{"version":3,"file":"2339.06319d8cbdd4160d939d.js","mappings":"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","sources":["webpack://wai/webpack/runtime/chunk loaded","webpack://wai/webpack/runtime/startup chunk dependencies","webpack://wai/./src/api/gramjs/apiBuilders/bots.ts","webpack://wai/./src/api/gramjs/apiBuilders/calls.ts","webpack://wai/./src/api/gramjs/apiBuilders/chats.ts","webpack://wai/./src/api/gramjs/apiBuilders/common.ts","webpack://wai/./src/api/gramjs/apiBuilders/helpers.ts","webpack://wai/./src/api/gramjs/apiBuilders/messages.ts","webpack://wai/./src/api/gramjs/apiBuilders/misc.ts","webpack://wai/./src/api/gramjs/apiBuilders/pathBytesToSvg.ts","webpack://wai/./src/api/gramjs/apiBuilders/peers.ts","webpack://wai/./src/api/gramjs/apiBuilders/symbols.ts","webpack://wai/./src/api/gramjs/apiBuilders/users.ts","webpack://wai/./src/api/gramjs/gramjsBuilders/index.ts","webpack://wai/./src/api/gramjs/helpers.ts","webpack://wai/./src/api/gramjs/localDb.ts","webpack://wai/./src/api/gramjs/methods/auth.ts","webpack://wai/./src/api/gramjs/methods/media.ts","webpack://wai/./src/api/gramjs/methods/client.ts","webpack://wai/./src/api/gramjs/updater.ts","webpack://wai/./src/lib/ptp/protobuf/PTPChats/LoadChatsReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPChats/LoadChatsRes.ts","webpack://wai/./src/api/gramjs/methods/chats.ts","webpack://wai/./src/api/gramjs/methods/messages.ts","webpack://wai/./src/api/gramjs/methods/users.ts","webpack://wai/./src/api/gramjs/methods/symbols.ts","webpack://wai/./src/api/gramjs/methods/management.ts","webpack://wai/./src/api/gramjs/methods/twoFaSettings.ts","webpack://wai/./src/api/gramjs/methods/bots.ts","webpack://wai/./src/api/gramjs/methods/calls.ts","webpack://wai/./src/api/gramjs/apiBuilders/payments.ts","webpack://wai/./src/api/gramjs/methods/payments.ts","webpack://wai/./src/api/gramjs/methods/account.ts","webpack://wai/./src/api/gramjs/apiBuilders/appConfig.ts","webpack://wai/./src/api/gramjs/methods/settings.ts","webpack://wai/./src/api/gramjs/methods/reactions.ts","webpack://wai/./src/api/gramjs/apiBuilders/statistics.ts","webpack://wai/./src/api/gramjs/methods/statistics.ts","webpack://wai/./src/api/gramjs/methods/phoneCallState.ts","webpack://wai/./src/api/gramjs/provider.ts","webpack://wai/./src/api/gramjs/worker/worker.ts","webpack://wai/./src/api/types/messages.ts","webpack://wai/./src/api/types/media.ts","webpack://wai/./src/config.ts","webpack://wai/./src/global/helpers/getEmojiOnlyCountForMessage.ts","webpack://wai/./src/lib/gramjs/client/uploadFile.ts","webpack://wai/./src/lib/gramjs/errors/index.js","webpack://wai/./src/lib/gramjs/tl/api.js","webpack://wai/./src/lib/ptp/functions/requests.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/AuthNativeReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/UpdateProfileReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/UpdateProfileRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/UpdateUsernameReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/UpdateUsernameRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/UploadProfilePhotoReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/UploadProfilePhotoRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPCommon/PbMsg.ts","webpack://wai/./src/lib/ptp/protobuf/PTPCommon/PbUser.ts","webpack://wai/./src/lib/ptp/protobuf/PTPCommon/types.ts","webpack://wai/./src/lib/ptp/protobuf/PTPFile/DownloadReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/AnswerCallbackButtonRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/AnswerCallbackButtonReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/DownloadMsgRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/GenMsgIdReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/GenMsgIdRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/MsgListReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/MsgListRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/SendBotMsgReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/SendBotMsgRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/UpdateCmdReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/UpdateCmdRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/UploadMsgReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPOther/StopChatStreamReq.ts","webpack://wai/./src/lib/ptp/wallet/Mnemonic.ts","webpack://wai/./src/lib/twemojiRegex.js","webpack://wai/./src/util/cacheApi.ts","webpack://wai/./src/util/files.ts","webpack://wai/./src/util/iteratees.ts","webpack://wai/./src/util/schedulers.ts","webpack://wai/./src/util/serverTime.ts","webpack://wai/./src/util/waveform.ts","webpack://wai/./src/worker/msg/MsgWorker.ts","webpack://wai/./src/worker/msg/bot/BotWebSocket.ts","webpack://wai/./src/worker/setting.ts","webpack://wai/./src/lib/ptp/wallet/EthEcies.ts","webpack://wai/./src/lib/ptp/wallet/Wallet.ts","webpack://wai/./src/lib/ptp/wallet/EcdsaHelper.ts","webpack://wai/./src/lib/ptp/wallet/Aes256Gcm.ts","webpack://wai/./src/worker/share/Account.ts","webpack://wai/./src/worker/share/db/LocalDatabase.ts","webpack://wai/./src/worker/share/utils/helpers.ts","webpack://wai/./src/worker/share/utils/utils.ts","webpack://wai/webpack/bootstrap","webpack://wai/webpack/runtime/compat get default export","webpack://wai/webpack/runtime/define property getters","webpack://wai/webpack/runtime/ensure chunk","webpack://wai/webpack/runtime/get javascript chunk filename","webpack://wai/webpack/runtime/get mini-css chunk filename","webpack://wai/webpack/runtime/global","webpack://wai/webpack/runtime/hasOwnProperty shorthand","webpack://wai/webpack/runtime/make namespace object","webpack://wai/webpack/runtime/node module decorator","webpack://wai/webpack/runtime/publicPath","webpack://wai/webpack/runtime/importScripts chunk loading","webpack://wai/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([5433,3760,4069,2752,4542,9439].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiAttachBot,\n  ApiAttachBotIcon,\n  ApiAttachMenuPeerType,\n  ApiBotCommand,\n  ApiBotInfo,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotInlineSwitchPm,\n  ApiBotMenuButton,\n  ApiInlineResultType,\n} from '../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { buildApiPhoto, buildApiThumbnailFromStripped } from './common';\nimport { buildApiDocument, buildApiWebDocument, buildVideoFromDocument } from './messages';\nimport { buildStickerFromDocument } from './symbols';\nimport localDb from '../localDb';\nimport { buildApiPeerId } from './peers';\nimport { omitVirtualClassFields } from './helpers';\n\nexport function buildApiBotInlineResult(result: GramJs.BotInlineResult, queryId: string): ApiBotInlineResult {\n  const {\n    id, type, title, description, url, thumb,\n  } = result;\n\n  return {\n    id,\n    queryId,\n    type: type as ApiInlineResultType,\n    title,\n    description,\n    url,\n    webThumbnail: buildApiWebDocument(thumb),\n  };\n}\n\nexport function buildApiBotInlineMediaResult(\n  result: GramJs.BotInlineMediaResult, queryId: string,\n): ApiBotInlineMediaResult {\n  const {\n    id, type, title, description, photo, document,\n  } = result;\n\n  return {\n    id,\n    queryId,\n    type: type as ApiInlineResultType,\n    title,\n    description,\n    ...(type === 'sticker' && document instanceof GramJs.Document && { sticker: buildStickerFromDocument(document) }),\n    ...(photo instanceof GramJs.Photo && { photo: buildApiPhoto(photo) }),\n    ...(type === 'gif' && document instanceof GramJs.Document && { gif: buildVideoFromDocument(document) }),\n    ...(type === 'video' && document instanceof GramJs.Document && {\n      thumbnail: buildApiThumbnailFromStripped(document.thumbs),\n    }),\n  };\n}\n\nexport function buildBotSwitchPm(switchPm?: GramJs.InlineBotSwitchPM) {\n  return switchPm ? pick(switchPm, ['text', 'startParam']) as ApiBotInlineSwitchPm : undefined;\n}\n\nexport function buildApiAttachBot(bot: GramJs.AttachMenuBot): ApiAttachBot {\n  return {\n    id: bot.botId.toString(),\n    hasSettings: bot.hasSettings,\n    shouldRequestWriteAccess: bot.requestWriteAccess,\n    shortName: bot.shortName,\n    peerTypes: bot.peerTypes.map(buildApiAttachMenuPeerType),\n    icons: bot.icons.map(buildApiAttachMenuIcon).filter(Boolean),\n  };\n}\n\nfunction buildApiAttachMenuPeerType(peerType: GramJs.TypeAttachMenuPeerType): ApiAttachMenuPeerType {\n  if (peerType instanceof GramJs.AttachMenuPeerTypeBotPM) return 'bots';\n  if (peerType instanceof GramJs.AttachMenuPeerTypePM) return 'users';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeChat) return 'chats';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeBroadcast) return 'channels';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeSameBotPM) return 'self';\n  return undefined!; // Never reached\n}\n\nfunction buildApiAttachMenuIcon(icon: GramJs.AttachMenuBotIcon): ApiAttachBotIcon | undefined {\n  if (!(icon.icon instanceof GramJs.Document)) return undefined;\n\n  const document = buildApiDocument(icon.icon);\n\n  if (!document) return undefined;\n\n  localDb.documents[String(icon.icon.id)] = icon.icon;\n\n  return {\n    name: icon.name,\n    document,\n  };\n}\n\nexport function buildApiBotInfo(botInfo: GramJs.BotInfo, chatId: string): ApiBotInfo {\n  const {\n    description, descriptionPhoto, descriptionDocument, userId, commands, menuButton,\n  } = botInfo;\n\n  const botId = userId && buildApiPeerId(userId, 'user');\n  const photo = descriptionPhoto instanceof GramJs.Photo ? buildApiPhoto(descriptionPhoto) : undefined;\n  const gif = descriptionDocument instanceof GramJs.Document ? buildVideoFromDocument(descriptionDocument) : undefined;\n\n  const commandsArray = commands?.map((command) => buildApiBotCommand(botId || chatId, command));\n\n  return {\n    botId: botId || chatId,\n    description,\n    gif,\n    photo,\n    menuButton: buildApiBotMenuButton(menuButton),\n    commands: commandsArray?.length ? commandsArray : undefined,\n  };\n}\n\nfunction buildApiBotCommand(botId: string, command: GramJs.BotCommand): ApiBotCommand {\n  return {\n    botId,\n    ...omitVirtualClassFields(command),\n  };\n}\n\nexport function buildApiBotMenuButton(menuButton?: GramJs.TypeBotMenuButton): ApiBotMenuButton {\n  if (menuButton instanceof GramJs.BotMenuButton) {\n    return {\n      type: 'webApp',\n      text: menuButton.text,\n      url: menuButton.url,\n    };\n  }\n\n  return {\n    type: 'commands',\n  };\n}\n","import type {\n  ApiCallProtocol,\n  ApiPhoneCallConnection,\n  GroupCallParticipant,\n  GroupCallParticipantVideo,\n  SsrcGroup,\n} from '../../../lib/secret-sauce';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type { ApiGroupCall, ApiPhoneCall } from '../../types';\nimport { getApiChatIdFromMtpPeer, isPeerUser } from './peers';\n\nexport function buildApiGroupCallParticipant(participant: GramJs.GroupCallParticipant): GroupCallParticipant {\n  const {\n    self, min, about, date, versioned, canSelfUnmute, justJoined, left, muted, mutedByYou, source, volume,\n    volumeByAdmin, videoJoined, peer, video, presentation, raiseHandRating,\n  } = participant;\n\n  return {\n    isSelf: self,\n    isMin: min,\n    canSelfUnmute,\n    isLeft: left,\n    isMuted: muted,\n    isMutedByMe: mutedByYou,\n    hasJustJoined: justJoined,\n    isVolumeByAdmin: volumeByAdmin,\n    isVersioned: versioned,\n    isVideoJoined: videoJoined,\n    about,\n    source,\n    raiseHandRating: raiseHandRating?.toString(),\n    volume,\n    date: new Date(date),\n    isUser: isPeerUser(peer),\n    id: getApiChatIdFromMtpPeer(peer),\n    video: video ? buildApiGroupCallParticipantVideo(video) : undefined,\n    presentation: presentation ? buildApiGroupCallParticipantVideo(presentation) : undefined,\n  };\n}\n\nfunction buildApiGroupCallParticipantVideo(\n  participantVideo: GramJs.GroupCallParticipantVideo,\n): GroupCallParticipantVideo {\n  const {\n    audioSource, endpoint, paused, sourceGroups,\n  } = participantVideo;\n  return {\n    audioSource,\n    endpoint,\n    isPaused: paused,\n    sourceGroups: sourceGroups.map(buildApiGroupCallParticipantVideoSourceGroup),\n  };\n}\n\nfunction buildApiGroupCallParticipantVideoSourceGroup(\n  participantVideoSourceGroup: GramJs.GroupCallParticipantVideoSourceGroup,\n): SsrcGroup {\n  return {\n    semantics: participantVideoSourceGroup.semantics,\n    sources: participantVideoSourceGroup.sources,\n  };\n}\n\nexport function buildApiGroupCall(groupCall: GramJs.TypeGroupCall): ApiGroupCall {\n  const {\n    id, accessHash,\n  } = groupCall;\n\n  if (groupCall instanceof GramJs.GroupCallDiscarded) {\n    return {\n      connectionState: 'discarded',\n      id: id.toString(),\n      accessHash: accessHash.toString(),\n      participantsCount: 0,\n      version: 0,\n      participants: {},\n    };\n  }\n\n  const {\n    version, participantsCount, streamDcId, scheduleDate, canChangeJoinMuted, joinMuted, canStartVideo,\n    scheduleStartSubscribed,\n  } = groupCall;\n\n  return {\n    connectionState: 'disconnected',\n    isLoaded: true,\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    version,\n    participantsCount,\n    streamDcId,\n    scheduleDate,\n    canChangeJoinMuted,\n    joinMuted,\n    canStartVideo,\n    scheduleStartSubscribed,\n    participants: {},\n  };\n}\n\nexport function getGroupCallId(groupCall: GramJs.TypeInputGroupCall) {\n  return groupCall.id.toString();\n}\n\nexport function buildPhoneCall(call: GramJs.TypePhoneCall): ApiPhoneCall {\n  const { id } = call;\n\n  let phoneCall: ApiPhoneCall = {\n    id: id.toString(),\n  };\n\n  if (call instanceof GramJs.PhoneCallAccepted\n    || call instanceof GramJs.PhoneCallWaiting\n    || call instanceof GramJs.PhoneCall\n    || call instanceof GramJs.PhoneCallRequested) {\n    const {\n      accessHash, adminId, date, video, participantId, protocol,\n    } = call;\n\n    phoneCall = {\n      ...phoneCall,\n      accessHash: accessHash.toString(),\n      adminId: adminId.toString(),\n      participantId: participantId.toString(),\n      date,\n      isVideo: video,\n      protocol: buildApiCallProtocol(protocol),\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCall) {\n    const {\n      p2pAllowed, gAOrB, keyFingerprint, connections, startDate,\n    } = call;\n\n    phoneCall = {\n      ...phoneCall,\n      state: 'active',\n      gAOrB: Array.from(gAOrB),\n      keyFingerprint: keyFingerprint.toString(),\n      startDate,\n      p2pAllowed,\n      connections: connections.map(buildApiCallConnection).filter(Boolean) as ApiPhoneCallConnection[],\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallDiscarded) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'discarded',\n      duration: call.duration,\n      reason: buildApiCallDiscardReason(call.reason),\n      needRating: call.needRating,\n      needDebug: call.needDebug,\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallWaiting) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'waiting',\n      receiveDate: call.receiveDate,\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallAccepted) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'accepted',\n      gB: Array.from(call.gB),\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallRequested) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'requested',\n      gAHash: Array.from(call.gAHash),\n    };\n  }\n\n  return phoneCall;\n}\n\nexport function buildApiCallDiscardReason(discardReason?: GramJs.TypePhoneCallDiscardReason) {\n  if (discardReason instanceof GramJs.PhoneCallDiscardReasonMissed) {\n    return 'missed';\n  } else if (discardReason instanceof GramJs.PhoneCallDiscardReasonBusy) {\n    return 'busy';\n  } else if (discardReason instanceof GramJs.PhoneCallDiscardReasonHangup) {\n    return 'hangup';\n  } else {\n    return 'disconnect';\n  }\n}\n\nfunction buildApiCallConnection(connection: GramJs.TypePhoneConnection): ApiPhoneCallConnection | undefined {\n  if (connection instanceof GramJs.PhoneConnectionWebrtc) {\n    const {\n      username, password, turn, stun, ip, ipv6, port,\n    } = connection;\n\n    return {\n      username,\n      password,\n      isTurn: turn,\n      isStun: stun,\n      ip,\n      ipv6,\n      port,\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexport function buildApiCallProtocol(protocol: GramJs.PhoneCallProtocol): ApiCallProtocol {\n  const {\n    libraryVersions, minLayer, maxLayer, udpP2p, udpReflector,\n  } = protocol;\n\n  return {\n    libraryVersions,\n    minLayer,\n    maxLayer,\n    isUdpP2p: udpP2p,\n    isUdpReflector: udpReflector,\n  };\n}\n\nexport function buildCallProtocol() {\n  return new GramJs.PhoneCallProtocol({\n    libraryVersions: ['4.0.0'],\n    minLayer: 92,\n    maxLayer: 92,\n    udpReflector: true,\n    udpP2p: true,\n  });\n}\n","import type BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiChat,\n  ApiChatAdminRights,\n  ApiChatBannedRights,\n  ApiBotCommand,\n  ApiChatFolder,\n  ApiChatMember,\n  ApiRestrictionReason,\n  ApiExportedInvite,\n  ApiChatInviteImporter,\n  ApiChatSettings,\n  ApiTopic,\n  ApiSendAsPeerId,\n  ApiChatReactions,\n} from '../../types';\nimport { pick, pickTruthy } from '../../../util/iteratees';\nimport {\n  buildApiPeerId, getApiChatIdFromMtpPeer, isPeerChat, isPeerUser,\n} from './peers';\nimport { omitVirtualClassFields } from './helpers';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { buildApiReaction } from './messages';\nimport { buildApiUsernames } from './common';\n\ntype PeerEntityApiChatFields = Omit<ApiChat, (\n  'id' | 'type' | 'title' |\n  'lastReadOutboxMessageId' | 'lastReadInboxMessageId' |\n  'unreadCount' | 'unreadMentionsCount' | 'isMuted'\n)>;\n\nfunction buildApiChatFieldsFromPeerEntity(\n  peerEntity: GramJs.TypeUser | GramJs.TypeChat,\n  isSupport = false,\n): PeerEntityApiChatFields {\n  const isMin = Boolean('min' in peerEntity && peerEntity.min);\n  const accessHash = ('accessHash' in peerEntity) && String(peerEntity.accessHash);\n  const hasVideoAvatar = 'photo' in peerEntity && peerEntity.photo && 'hasVideo' in peerEntity.photo\n    && peerEntity.photo.hasVideo;\n  const avatarHash = ('photo' in peerEntity) && peerEntity.photo && buildAvatarHash(peerEntity.photo);\n  const isSignaturesShown = Boolean('signatures' in peerEntity && peerEntity.signatures);\n  const hasPrivateLink = Boolean('hasLink' in peerEntity && peerEntity.hasLink);\n  const isScam = Boolean('scam' in peerEntity && peerEntity.scam);\n  const isFake = Boolean('fake' in peerEntity && peerEntity.fake);\n  const isJoinToSend = Boolean('joinToSend' in peerEntity && peerEntity.joinToSend);\n  const isJoinRequest = Boolean('joinRequest' in peerEntity && peerEntity.joinRequest);\n  const usernames = buildApiUsernames(peerEntity);\n  const isForum = Boolean('forum' in peerEntity && peerEntity.forum);\n\n  return {\n    isMin,\n    hasPrivateLink,\n    isSignaturesShown,\n    usernames,\n    ...(accessHash && { accessHash }),\n    hasVideoAvatar,\n    ...(avatarHash && { avatarHash }),\n    ...('verified' in peerEntity && { isVerified: peerEntity.verified }),\n    ...('callActive' in peerEntity && { isCallActive: peerEntity.callActive }),\n    ...('callNotEmpty' in peerEntity && { isCallNotEmpty: peerEntity.callNotEmpty }),\n    ...('date' in peerEntity && { joinDate: peerEntity.date }),\n    ...('participantsCount' in peerEntity && peerEntity.participantsCount !== undefined && {\n      membersCount: peerEntity.participantsCount,\n    }),\n    ...('noforwards' in peerEntity && { isProtected: Boolean(peerEntity.noforwards) }),\n    ...(isSupport && { isSupport: true }),\n    ...buildApiChatPermissions(peerEntity),\n    ...('creator' in peerEntity && { isCreator: peerEntity.creator }),\n    ...buildApiChatRestrictions(peerEntity),\n    ...buildApiChatMigrationInfo(peerEntity),\n    fakeType: isScam ? 'scam' : (isFake ? 'fake' : undefined),\n    isJoinToSend,\n    isJoinRequest,\n    isForum,\n  };\n}\n\nexport function buildApiChatFromDialog(\n  dialog: GramJs.Dialog,\n  peerEntity: GramJs.TypeUser | GramJs.TypeChat,\n): ApiChat {\n  const {\n    peer, folderId, unreadMark, unreadCount, unreadMentionsCount, unreadReactionsCount,\n    notifySettings: { silent, muteUntil },\n    readOutboxMaxId, readInboxMaxId, draft,\n  } = dialog;\n  const isMuted = silent || (typeof muteUntil === 'number' && getServerTime() < muteUntil);\n\n  return {\n    id: getApiChatIdFromMtpPeer(peer),\n    ...(folderId && { folderId }),\n    type: getApiChatTypeFromPeerEntity(peerEntity),\n    title: getApiChatTitleFromMtpPeer(peer, peerEntity),\n    lastReadOutboxMessageId: readOutboxMaxId,\n    lastReadInboxMessageId: readInboxMaxId,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    isMuted,\n    ...(unreadMark && { hasUnreadMark: true }),\n    ...(draft instanceof GramJs.DraftMessage && { draftDate: draft.date }),\n    ...buildApiChatFieldsFromPeerEntity(peerEntity),\n  };\n}\n\nfunction buildApiChatPermissions(peerEntity: GramJs.TypeUser | GramJs.TypeChat): {\n  adminRights?: ApiChatAdminRights;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n} {\n  if (!(peerEntity instanceof GramJs.Chat || peerEntity instanceof GramJs.Channel)) {\n    return {};\n  }\n\n  return {\n    adminRights: peerEntity.adminRights ? omitVirtualClassFields(peerEntity.adminRights) : undefined,\n    currentUserBannedRights: 'bannedRights' in peerEntity && peerEntity.bannedRights\n      ? omitVirtualClassFields(peerEntity.bannedRights)\n      : undefined,\n    defaultBannedRights: peerEntity.defaultBannedRights\n      ? omitVirtualClassFields(peerEntity.defaultBannedRights)\n      : undefined,\n  };\n}\n\nfunction buildApiChatRestrictions(peerEntity: GramJs.TypeUser | GramJs.TypeChat): {\n  isNotJoined?: boolean;\n  isForbidden?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n} {\n  if (peerEntity instanceof GramJs.ChatForbidden) {\n    return {\n      isForbidden: true,\n    };\n  }\n\n  if (peerEntity instanceof GramJs.ChannelForbidden) {\n    return {\n      isRestricted: true,\n    };\n  }\n\n  const restrictions = {};\n\n  if ('restricted' in peerEntity) {\n    const restrictionReason = peerEntity.restricted\n      ? buildApiChatRestrictionReason(peerEntity.restrictionReason)\n      : undefined;\n\n    if (restrictionReason) {\n      Object.assign(restrictions, {\n        isRestricted: true,\n        restrictionReason,\n      });\n    }\n  }\n\n  if (peerEntity instanceof GramJs.Chat) {\n    Object.assign(restrictions, {\n      isNotJoined: peerEntity.left,\n    });\n  }\n\n  if (peerEntity instanceof GramJs.Channel) {\n    Object.assign(restrictions, {\n      // `left` is weirdly set to `true` on all channels never joined before\n      isNotJoined: peerEntity.left,\n    });\n  }\n\n  return restrictions;\n}\n\nfunction buildApiChatMigrationInfo(peerEntity: GramJs.TypeChat): {\n  migratedTo?: {\n    chatId: string;\n    accessHash?: string;\n  };\n} {\n  if (\n    'migratedTo' in peerEntity\n    && peerEntity.migratedTo\n    && !(peerEntity.migratedTo instanceof GramJs.InputChannelEmpty)\n  ) {\n    return {\n      migratedTo: {\n        chatId: getApiChatIdFromMtpPeer(peerEntity.migratedTo),\n        ...(peerEntity.migratedTo instanceof GramJs.InputChannel && {\n          accessHash: String(peerEntity.migratedTo.accessHash),\n        }),\n      },\n    };\n  }\n\n  return {};\n}\n\nfunction buildApiChatRestrictionReason(\n  restrictionReasons?: GramJs.RestrictionReason[],\n): ApiRestrictionReason | undefined {\n  if (!restrictionReasons) {\n    return undefined;\n  }\n\n  const targetReason = restrictionReasons.find(({ platform }) => platform === 'all');\n  return targetReason ? pick(targetReason, ['reason', 'text']) : undefined;\n}\n\nexport function buildApiChatFromPreview(\n  preview: GramJs.TypeChat | GramJs.TypeUser,\n  isSupport = false,\n): ApiChat | undefined {\n  if (preview instanceof GramJs.ChatEmpty || preview instanceof GramJs.UserEmpty) {\n    return undefined;\n  }\n\n  return {\n    id: buildApiPeerId(preview.id, preview instanceof GramJs.User ? 'user' : 'chat'),\n    type: getApiChatTypeFromPeerEntity(preview),\n    title: preview instanceof GramJs.User ? getUserName(preview) : preview.title,\n    ...buildApiChatFieldsFromPeerEntity(preview, isSupport),\n  };\n}\n\nexport function getApiChatTypeFromPeerEntity(peerEntity: GramJs.TypeChat | GramJs.TypeUser) {\n  if (peerEntity instanceof GramJs.User || peerEntity instanceof GramJs.UserEmpty) {\n    return 'chatTypePrivate';\n  } else if (\n    peerEntity instanceof GramJs.Chat\n    || peerEntity instanceof GramJs.ChatForbidden\n    || peerEntity instanceof GramJs.ChatEmpty\n  ) {\n    return 'chatTypeBasicGroup';\n  } else {\n    return peerEntity.megagroup ? 'chatTypeSuperGroup' : 'chatTypeChannel';\n  }\n}\n\nexport function getPeerKey(peer: GramJs.TypePeer) {\n  if (isPeerUser(peer)) {\n    return `user${peer.userId}`;\n  } else if (isPeerChat(peer)) {\n    return `chat${peer.chatId}`;\n  } else {\n    return `chat${peer.channelId}`;\n  }\n}\n\nexport function getApiChatTitleFromMtpPeer(peer: GramJs.TypePeer, peerEntity: GramJs.User | GramJs.Chat) {\n  if (isPeerUser(peer)) {\n    return getUserName(peerEntity as GramJs.User);\n  } else {\n    return (peerEntity as GramJs.Chat).title;\n  }\n}\n\nfunction getUserName(user: GramJs.User) {\n  return user.firstName\n    ? `${user.firstName}${user.lastName ? ` ${user.lastName}` : ''}`\n    : (user.lastName || '');\n}\n\nexport function buildAvatarHash(photo: GramJs.TypeUserProfilePhoto | GramJs.TypeChatPhoto) {\n  if ('photoId' in photo) {\n    return String(photo.photoId);\n  }\n\n  return undefined;\n}\n\nexport function buildChatMember(\n  member: GramJs.TypeChatParticipant | GramJs.TypeChannelParticipant,\n): ApiChatMember | undefined {\n  const userId = (member instanceof GramJs.ChannelParticipantBanned || member instanceof GramJs.ChannelParticipantLeft)\n    ? getApiChatIdFromMtpPeer(member.peer)\n    : buildApiPeerId(member.userId, 'user');\n\n  return {\n    userId,\n    inviterId: 'inviterId' in member && member.inviterId\n      ? buildApiPeerId(member.inviterId as BigInt.BigInteger, 'user')\n      : undefined,\n    joinedDate: 'date' in member ? member.date : undefined,\n    kickedByUserId: 'kickedBy' in member && member.kickedBy ? buildApiPeerId(member.kickedBy, 'user') : undefined,\n    promotedByUserId: 'promotedBy' in member && member.promotedBy\n      ? buildApiPeerId(member.promotedBy, 'user')\n      : undefined,\n    bannedRights: 'bannedRights' in member ? omitVirtualClassFields(member.bannedRights) : undefined,\n    adminRights: 'adminRights' in member ? omitVirtualClassFields(member.adminRights) : undefined,\n    customTitle: 'rank' in member ? member.rank : undefined,\n    ...((member instanceof GramJs.ChannelParticipantAdmin || member instanceof GramJs.ChatParticipantAdmin) && {\n      isAdmin: true,\n    }),\n    ...((member instanceof GramJs.ChannelParticipantCreator || member instanceof GramJs.ChatParticipantCreator) && {\n      isOwner: true,\n    }),\n  };\n}\n\nexport function buildChatMembers(\n  participants: GramJs.TypeChatParticipants | GramJs.channels.ChannelParticipants,\n) {\n  // Duplicate code because of TS union-type shenanigans\n  if (participants instanceof GramJs.ChatParticipants) {\n    return participants.participants.map(buildChatMember).filter(Boolean);\n  }\n  if (participants instanceof GramJs.channels.ChannelParticipants) {\n    return participants.participants.map(buildChatMember).filter(Boolean);\n  }\n\n  return undefined;\n}\n\nexport function buildChatTypingStatus(\n  update: GramJs.UpdateUserTyping | GramJs.UpdateChatUserTyping | GramJs.UpdateChannelUserTyping,\n) {\n  let action: string = '';\n  let emoticon: string | undefined;\n  if (update.action instanceof GramJs.SendMessageCancelAction) {\n    return undefined;\n  } else if (update.action instanceof GramJs.SendMessageTypingAction) {\n    action = 'lng_user_typing';\n  } else if (update.action instanceof GramJs.SendMessageRecordVideoAction) {\n    action = 'lng_send_action_record_video';\n  } else if (update.action instanceof GramJs.SendMessageUploadVideoAction) {\n    action = 'lng_send_action_upload_video';\n  } else if (update.action instanceof GramJs.SendMessageRecordAudioAction) {\n    action = 'lng_send_action_record_audio';\n  } else if (update.action instanceof GramJs.SendMessageUploadAudioAction) {\n    action = 'lng_send_action_upload_audio';\n  } else if (update.action instanceof GramJs.SendMessageUploadPhotoAction) {\n    action = 'lng_send_action_upload_photo';\n  } else if (update.action instanceof GramJs.SendMessageUploadDocumentAction) {\n    action = 'lng_send_action_upload_file';\n  } else if (update.action instanceof GramJs.SendMessageGeoLocationAction) {\n    action = 'selecting a location to share';\n  } else if (update.action instanceof GramJs.SendMessageChooseContactAction) {\n    action = 'selecting a contact to share';\n  } else if (update.action instanceof GramJs.SendMessageGamePlayAction) {\n    action = 'lng_playing_game';\n  } else if (update.action instanceof GramJs.SendMessageRecordRoundAction) {\n    action = 'lng_send_action_record_round';\n  } else if (update.action instanceof GramJs.SendMessageUploadRoundAction) {\n    action = 'lng_send_action_upload_round';\n  } else if (update.action instanceof GramJs.SendMessageChooseStickerAction) {\n    action = 'lng_send_action_choose_sticker';\n  } else if (update.action instanceof GramJs.SpeakingInGroupCallAction) {\n    return undefined;\n  } else if (update.action instanceof GramJs.SendMessageEmojiInteractionSeen) {\n    action = 'lng_user_action_watching_animations';\n    emoticon = update.action.emoticon;\n  } else if (update.action instanceof GramJs.SendMessageEmojiInteraction) {\n    return undefined;\n  }\n\n  return {\n    action,\n    ...(emoticon && { emoji: emoticon }),\n    ...(!(update instanceof GramJs.UpdateUserTyping) && { userId: getApiChatIdFromMtpPeer(update.fromId) }),\n    timestamp: Date.now() + getServerTimeOffset() * 1000,\n  };\n}\n\nexport function buildApiChatFolder(filter: GramJs.DialogFilter): ApiChatFolder {\n  return {\n    ...pickTruthy(filter, [\n      'id', 'title', 'emoticon', 'contacts', 'nonContacts', 'groups', 'bots',\n      'excludeMuted', 'excludeRead', 'excludeArchived',\n    ]),\n    channels: filter.broadcasts,\n    pinnedChatIds: filter.pinnedPeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    includedChatIds: filter.includePeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    excludedChatIds: filter.excludePeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n  };\n}\n\nexport function buildApiChatFolderFromSuggested({\n  filter, description,\n}: {\n  filter: GramJs.TypeDialogFilter;\n  description: string;\n}): ApiChatFolder | undefined {\n  if (!(filter instanceof GramJs.DialogFilter)) return undefined;\n  return {\n    ...buildApiChatFolder(filter),\n    description,\n  };\n}\n\nexport function buildApiChatBotCommands(botInfos: GramJs.BotInfo[]) {\n  return botInfos.reduce((botCommands, botInfo) => {\n    const botId = buildApiPeerId(botInfo.userId!, 'user');\n\n    if (botInfo.commands) {\n      botCommands = botCommands.concat(botInfo.commands.map((mtpCommand) => ({\n        botId,\n        ...omitVirtualClassFields(mtpCommand),\n      })));\n    }\n\n    return botCommands;\n  }, [] as ApiBotCommand[]);\n}\n\nexport function buildApiExportedInvite(invite: GramJs.ChatInviteExported): ApiExportedInvite {\n  const {\n    revoked,\n    date,\n    expireDate,\n    link,\n    permanent,\n    startDate,\n    usage,\n    usageLimit,\n    requested,\n    requestNeeded,\n    title,\n    adminId,\n  } = invite;\n  return {\n    isRevoked: revoked,\n    date,\n    expireDate,\n    link,\n    isPermanent: permanent,\n    startDate,\n    usage,\n    usageLimit,\n    isRequestNeeded: requestNeeded,\n    requested,\n    title,\n    adminId: buildApiPeerId(adminId, 'user'),\n  };\n}\n\nexport function buildChatInviteImporter(importer: GramJs.ChatInviteImporter): ApiChatInviteImporter {\n  const {\n    userId,\n    date,\n    about,\n    requested,\n  } = importer;\n  return {\n    userId: buildApiPeerId(userId, 'user'),\n    date,\n    about,\n    isRequested: requested,\n  };\n}\n\nexport function buildApiChatSettings({\n  autoarchived,\n  reportSpam,\n  addContact,\n  blockContact,\n}: GramJs.PeerSettings): ApiChatSettings {\n  return {\n    isAutoArchived: Boolean(autoarchived),\n    canReportSpam: Boolean(reportSpam),\n    canAddContact: Boolean(addContact),\n    canBlockContact: Boolean(blockContact),\n  };\n}\n\nexport function buildApiChatReactions(chatReactions?: GramJs.TypeChatReactions): ApiChatReactions | undefined {\n  if (chatReactions instanceof GramJs.ChatReactionsAll) {\n    return {\n      type: 'all',\n      areCustomAllowed: chatReactions.allowCustom,\n    };\n  }\n  if (chatReactions instanceof GramJs.ChatReactionsSome) {\n    return {\n      type: 'some',\n      allowed: chatReactions.reactions.map(buildApiReaction).filter(Boolean),\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiSendAsPeerId(sendAs: GramJs.SendAsPeer): ApiSendAsPeerId {\n  return {\n    id: getApiChatIdFromMtpPeer(sendAs.peer),\n    isPremium: sendAs.premiumRequired,\n  };\n}\n\nexport function buildApiTopic(forumTopic: GramJs.TypeForumTopic): ApiTopic | undefined {\n  if (forumTopic instanceof GramJs.ForumTopicDeleted) {\n    return undefined;\n  }\n\n  const {\n    id,\n    my,\n    closed,\n    pinned,\n    hidden,\n    short,\n    date,\n    title,\n    iconColor,\n    iconEmojiId,\n    topMessage,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    fromId,\n    notifySettings: {\n      silent, muteUntil,\n    },\n  } = forumTopic;\n\n  return {\n    id,\n    isClosed: closed,\n    isPinned: pinned,\n    isHidden: hidden,\n    isOwner: my,\n    isMin: short,\n    date,\n    title,\n    iconColor,\n    iconEmojiId: iconEmojiId?.toString(),\n    lastMessageId: topMessage,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    fromId: getApiChatIdFromMtpPeer(fromId),\n    // TODO[forums] `muteUntil` should not really be parsed here\n    isMuted: silent || (muteUntil !== undefined ? muteUntil > 0 : undefined),\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport { strippedPhotoToJpg } from '../../../lib/gramjs/Utils';\n\nimport type {\n  ApiPhoto, ApiPhotoSize, ApiThumbnail, ApiVideoSize, ApiUsername,\n} from '../../types';\nimport { bytesToDataUri } from './helpers';\nimport { pathBytesToSvg } from './pathBytesToSvg';\nimport { compact } from '../../../util/iteratees';\n\nconst DEFAULT_THUMB_SIZE = { w: 100, h: 100 };\n\nexport function buildApiThumbnailFromStripped(\n  sizes?: GramJs.TypePhotoSize[], mimeType?: string,\n): ApiThumbnail | undefined {\n  if (!sizes || !sizes.length) {\n    return undefined;\n  }\n\n  const thumb = sizes.find((s: any): s is GramJs.PhotoStrippedSize => s instanceof GramJs.PhotoStrippedSize);\n  if (!thumb) {\n    return undefined;\n  }\n\n  const realSizes = sizes.filter((s): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  const { w, h } = realSizes.length ? realSizes[realSizes.length - 1] : DEFAULT_THUMB_SIZE;\n  const { bytes } = thumb;\n  const dataUri = bytesToDataUri(\n    !mimeType || mimeType === 'image/jpeg' ? strippedPhotoToJpg(bytes) : bytes,\n    undefined,\n    mimeType,\n  );\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiThumbnailFromCached(photoSize: GramJs.PhotoCachedSize): ApiThumbnail | undefined {\n  const { w, h, bytes } = photoSize;\n  const dataUri = bytesToDataUri(bytes, undefined, 'image/webp');\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiThumbnailFromPath(\n  photoSize: GramJs.PhotoPathSize,\n  sizeAttribute: GramJs.DocumentAttributeImageSize | GramJs.DocumentAttributeVideo,\n): ApiThumbnail | undefined {\n  const { w, h } = sizeAttribute;\n  const dataUri = `data:image/svg+xml;utf8,${pathBytesToSvg(photoSize.bytes, w, h)}`;\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiPhoto(photo: GramJs.Photo, isSpoiler?: boolean): ApiPhoto {\n  const sizes = photo.sizes\n    .filter((s: any): s is GramJs.PhotoSize => {\n      return s instanceof GramJs.PhotoSize || s instanceof GramJs.PhotoSizeProgressive;\n    })\n    .map(buildApiPhotoSize);\n\n  return {\n    id: String(photo.id),\n    thumbnail: buildApiThumbnailFromStripped(photo.sizes),\n    sizes,\n    isSpoiler,\n    ...(photo.videoSizes && { videoSizes: compact(photo.videoSizes.map(buildApiVideoSize)), isVideo: true }),\n  };\n}\n\nexport function buildApiVideoSize(videoSize: GramJs.TypeVideoSize): ApiVideoSize | undefined {\n  if (!(videoSize instanceof GramJs.VideoSize)) return undefined;\n\n  const {\n    videoStartTs, size, h, w, type,\n  } = videoSize;\n\n  return {\n    videoStartTs,\n    size,\n    height: h,\n    width: w,\n    type: type as ('u' | 'v'),\n  };\n}\n\nexport function buildApiPhotoSize(photoSize: GramJs.PhotoSize): ApiPhotoSize {\n  const { w, h, type } = photoSize;\n\n  return {\n    width: w,\n    height: h,\n    type: type as ('m' | 'x' | 'y'),\n  };\n}\n\nexport function buildApiUsernames(mtpPeer: GramJs.User | GramJs.Channel | GramJs.UpdateUserName) {\n  if (!mtpPeer.usernames && !('username' in mtpPeer && mtpPeer.username)) {\n    return undefined;\n  }\n\n  const usernames: ApiUsername[] = [];\n\n  if ('username' in mtpPeer && mtpPeer.username) {\n    usernames.push({\n      username: mtpPeer.username,\n      isActive: true,\n      isEditable: true,\n    });\n  }\n\n  if (mtpPeer.usernames) {\n    mtpPeer.usernames.forEach(({ username, active, editable }) => {\n      usernames.push({\n        username,\n        ...(active && { isActive: true }),\n        ...(editable && { isEditable: true }),\n      });\n    });\n  }\n\n  return usernames;\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiMessage,\n  ApiMessageForwardInfo,\n  ApiPhoto,\n  ApiSticker,\n  ApiVideo,\n  ApiVoice,\n  ApiAudio,\n  ApiDocument,\n  ApiAction,\n  ApiContact,\n  ApiAttachment,\n  ApiPoll,\n  ApiNewPoll,\n  ApiWebPage,\n  ApiMessageEntity,\n  ApiFormattedText,\n  ApiReplyKeyboard,\n  ApiKeyboardButton,\n  ApiChat,\n  ApiThreadInfo,\n  ApiInvoice,\n  ApiGroupCall,\n  ApiReactions,\n  ApiReactionCount,\n  ApiUserReaction,\n  ApiAvailableReaction,\n  ApiSponsoredMessage,\n  ApiUser,\n  ApiLocation,\n  ApiGame,\n  PhoneCallAction,\n  ApiWebDocument,\n  ApiMessageEntityDefault,\n  ApiMessageExtendedMediaPreview,\n  ApiReaction,\n  ApiReactionEmoji,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  LOCAL_MESSAGE_MIN_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  VIDEO_MOV_TYPE,\n  VIDEO_WEBM_TYPE,\n} from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { buildStickerFromDocument } from './symbols';\nimport { buildApiPhoto, buildApiPhotoSize, buildApiThumbnailFromStripped } from './common';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport { addPhotoToLocalDb, resolveMessageApiChatId, serializeBytes } from '../helpers';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer, isPeerUser } from './peers';\nimport { buildApiCallDiscardReason } from './calls';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nconst TIMESTAMP_BASE = 1676e9; // 2023-02-10\nconst TIMESTAMP_PRECISION = 1e2; // 0.1s\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\n\nlet localMessageCounter = LOCAL_MESSAGE_MIN_ID;\n\n// Local IDs need to be fractional to allow service notifications to be placed between real messages.\n// It also allows to avoid collisions when sending messages from multiple tabs due to timestamp-based whole part.\n// To support up to 1M local messages, the whole part must be below 8.5B (https://stackoverflow.com/a/57225494/903919).\n// The overflow will happen when `datePart` is >3.59B which will be in June 2034.\nexport function getNextLocalMessageId() {\n  const datePart = Math.round((Date.now() - TIMESTAMP_BASE) / TIMESTAMP_PRECISION);\n  return LOCAL_MESSAGE_MIN_ID + datePart + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    fromId, message, entities, startParam, channelPost, chatInvite, chatInviteHash, randomId, recommended,\n  } = mtpMessage;\n  const chatId = fromId ? getApiChatIdFromMtpPeer(fromId) : undefined;\n  const chatInviteTitle = chatInvite\n    ? (chatInvite instanceof GramJs.ChatInvite\n      ? chatInvite.title\n      : !(chatInvite.chat instanceof GramJs.ChatEmpty) ? chatInvite.chat.title : undefined)\n    : undefined;\n\n  return {\n    randomId: serializeBytes(randomId),\n    isBot: fromId ? isPeerUser(fromId) : false,\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: Boolean(recommended),\n    ...(chatId && { chatId }),\n    ...(chatInviteHash && { chatInviteHash }),\n    ...(chatInvite && { chatInviteTitle }),\n    ...(startParam && { startParam }),\n    ...(channelPost && { channelPostId: channelPost }),\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\ntype UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards' | 'silent'\n  )>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const {\n    replyToMsgId, replyToTopId, forumTopic, replyToPeerId,\n  } = mtpMessage.replyTo || {};\n  const isEdited = mtpMessage.editDate && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { replies, mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  return {\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    views: mtpMessage.views,\n    forwards: mtpMessage.forwards,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    ...(replyToMsgId && { replyToMessageId: replyToMsgId }),\n    ...(forumTopic && { isTopicReply: true }),\n    ...(replyToPeerId && { replyToChatId: getApiChatIdFromMtpPeer(replyToPeerId) }),\n    ...(replyToTopId && { replyToTopMessageId: replyToTopId }),\n    ...(forwardInfo && { forwardInfo }),\n    ...(isEdited && { isEdited }),\n    ...(mtpMessage.editDate && { editDate: mtpMessage.editDate }),\n    ...(isMediaUnread && { isMediaUnread }),\n    ...(mtpMessage.mentioned && isMediaUnread && { hasUnreadMention: true }),\n    ...(mtpMessage.mentioned && { isMentioned: true }),\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    ...(replies && { repliesThreadInfo: buildThreadInfo(replies, mtpMessage.id, chatId) }),\n    ...(postAuthor && { postAuthorTitle: postAuthor }),\n    isProtected,\n    isForwardingAllowed,\n  };\n}\n\nexport function buildMessageReactions(reactions: GramJs.MessageReactions): ApiReactions {\n  const {\n    recentReactions, results, canSeeList,\n  } = reactions;\n\n  return {\n    canSeeList,\n    results: results.map(buildReactionCount).filter(Boolean).sort(reactionCountComparator),\n    recentReactions: recentReactions?.map(buildMessagePeerReaction).filter(Boolean),\n  };\n}\n\nfunction reactionCountComparator(a: ApiReactionCount, b: ApiReactionCount) {\n  const diff = b.count - a.count;\n  if (diff) return diff;\n  if (a.chosenOrder !== undefined && b.chosenOrder !== undefined) {\n    return a.chosenOrder - b.chosenOrder;\n  }\n  if (a.chosenOrder !== undefined) return 1;\n  if (b.chosenOrder !== undefined) return -1;\n  return 0;\n}\n\nfunction buildReactionCount(reactionCount: GramJs.ReactionCount): ApiReactionCount | undefined {\n  const { chosenOrder, count, reaction } = reactionCount;\n\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    chosenOrder,\n    count,\n    reaction: apiReaction,\n  };\n}\n\nexport function buildMessagePeerReaction(userReaction: GramJs.MessagePeerReaction): ApiUserReaction | undefined {\n  const {\n    peerId, reaction, big, unread,\n  } = userReaction;\n\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    userId: getApiChatIdFromMtpPeer(peerId),\n    reaction: apiReaction,\n    isUnread: unread,\n    isBig: big,\n  };\n}\n\nexport function buildApiReaction(reaction: GramJs.TypeReaction): ApiReaction | undefined {\n  if (reaction instanceof GramJs.ReactionEmoji) {\n    return {\n      emoticon: reaction.emoticon,\n    };\n  }\n\n  if (reaction instanceof GramJs.ReactionCustomEmoji) {\n    return {\n      documentId: reaction.documentId.toString(),\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiAvailableReaction(availableReaction: GramJs.AvailableReaction): ApiAvailableReaction {\n  const {\n    selectAnimation, staticIcon, reaction, title,\n    inactive, aroundAnimation, centerIcon, effectAnimation, activateAnimation,\n    premium,\n  } = availableReaction;\n\n  return {\n    selectAnimation: buildApiDocument(selectAnimation),\n    activateAnimation: buildApiDocument(activateAnimation),\n    effectAnimation: buildApiDocument(effectAnimation),\n    staticIcon: buildApiDocument(staticIcon),\n    aroundAnimation: aroundAnimation ? buildApiDocument(aroundAnimation) : undefined,\n    centerIcon: centerIcon ? buildApiDocument(centerIcon) : undefined,\n    reaction: { emoticon: reaction } as ApiReactionEmoji,\n    title,\n    isInactive: inactive,\n    isPremium: premium,\n  };\n}\n\nexport function buildMessageContent(\n  mtpMessage: UniversalMessage | GramJs.UpdateServiceNotification,\n) {\n  let content: ApiMessage['content'] = {};\n\n  if (mtpMessage.media) {\n    content = {\n      ...buildMessageMediaContent(mtpMessage.media),\n    };\n  }\n\n  const hasUnsupportedMedia = mtpMessage.media instanceof GramJs.MessageMediaUnsupported;\n\n  if (mtpMessage.message && !hasUnsupportedMedia\n    && !content.sticker && !content.poll && !content.contact && !(content.video?.isRound)) {\n    content = {\n      ...content,\n      text: buildMessageTextContent(mtpMessage.message, mtpMessage.entities),\n    };\n  }\n\n  return content;\n}\n\nexport function buildMessageTextContent(\n  message: string,\n  entities?: GramJs.TypeMessageEntity[],\n): ApiFormattedText {\n  return {\n    text: message,\n    ...(entities && { entities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage) {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyToMsgId, date,\n  } = draft;\n\n  return {\n    formattedText: message ? buildMessageTextContent(message, entities) : undefined,\n    replyingToId: replyToMsgId,\n    date,\n  };\n}\n\nexport function buildMessageMediaContent(media: GramJs.TypeMessageMedia): ApiMessage['content'] | undefined {\n  if ('ttlSeconds' in media && media.ttlSeconds) {\n    return undefined;\n  }\n\n  if ('extendedMedia' in media && media.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n    return buildMessageMediaContent(media.extendedMedia.media);\n  }\n\n  const sticker = buildSticker(media);\n  if (sticker) return { sticker };\n\n  const photo = buildPhoto(media);\n  if (photo) return { photo };\n\n  const video = buildVideo(media);\n  if (video) return { video };\n\n  const audio = buildAudio(media);\n  if (audio) return { audio };\n\n  const voice = buildVoice(media);\n  if (voice) return { voice };\n\n  const document = buildDocumentFromMedia(media);\n  if (document) return { document };\n\n  const contact = buildContact(media);\n  if (contact) return { contact };\n\n  const poll = buildPollFromMedia(media);\n  if (poll) return { poll };\n\n  const webPage = buildWebPage(media);\n  if (webPage) return { webPage };\n\n  const invoice = buildInvoiceFromMedia(media);\n  if (invoice) return { invoice };\n\n  const location = buildLocationFromMedia(media);\n  if (location) return { location };\n\n  const game = buildGameFromMedia(media);\n  if (game) return { game };\n\n  return undefined;\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    fromChatId: savedFromPeerId || fromId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    senderUserId: fromId,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildSticker(media: GramJs.TypeMessageMedia): ApiSticker | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  return buildStickerFromDocument(media.document, media.nopremium);\n}\n\nfunction buildPhoto(media: GramJs.TypeMessageMedia): ApiPhoto | undefined {\n  if (!(media instanceof GramJs.MessageMediaPhoto) || !media.photo || !(media.photo instanceof GramJs.Photo)) {\n    return undefined;\n  }\n\n  return buildApiPhoto(media.photo, media.spoiler);\n}\n\nexport function buildVideoFromDocument(document: GramJs.Document, isSpoiler?: boolean): ApiVideo | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const {\n    id, mimeType, thumbs, size, attributes,\n  } = document;\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_WEBM_TYPE && !(self as any).isWebmSupported) {\n    return undefined;\n  }\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_MOV_TYPE && !(self as any).isMovSupported) {\n    return undefined;\n  }\n\n  const videoAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n  if (!videoAttr) {\n    return undefined;\n  }\n\n  const gifAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeAnimated => a instanceof GramJs.DocumentAttributeAnimated);\n\n  const {\n    duration,\n    w: width,\n    h: height,\n    supportsStreaming = false,\n    roundMessage: isRound = false,\n  } = videoAttr;\n\n  return {\n    id: String(id),\n    mimeType,\n    duration,\n    fileName: getFilenameFromDocument(document, 'video'),\n    width,\n    height,\n    supportsStreaming,\n    isRound,\n    isGif: Boolean(gifAttr),\n    thumbnail: buildApiThumbnailFromStripped(thumbs),\n    size: size.toJSNumber(),\n    isSpoiler,\n  };\n}\n\nfunction buildVideo(media: GramJs.TypeMessageMedia): ApiVideo | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !(media.document instanceof GramJs.Document)\n    || !media.document.mimeType.startsWith('video')\n  ) {\n    return undefined;\n  }\n\n  return buildVideoFromDocument(media.document, media.spoiler);\n}\n\nfunction buildAudio(media: GramJs.TypeMessageMedia): ApiAudio | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || audioAttribute.voice) {\n    return undefined;\n  }\n\n  const thumbnailSizes = media.document.thumbs && media.document.thumbs\n    .filter((thumb): thumb is GramJs.PhotoSize => thumb instanceof GramJs.PhotoSize)\n    .map((thumb) => buildApiPhotoSize(thumb));\n\n  return {\n    id: String(media.document.id),\n    fileName: getFilenameFromDocument(media.document, 'audio'),\n    thumbnailSizes,\n    size: media.document.size.toJSNumber(),\n    ...pick(media.document, ['mimeType']),\n    ...pick(audioAttribute, ['duration', 'performer', 'title']),\n  };\n}\n\nfunction buildVoice(media: GramJs.TypeMessageMedia): ApiVoice | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || !audioAttribute.voice) {\n    return undefined;\n  }\n\n  const { duration, waveform } = audioAttribute;\n\n  return {\n    id: String(media.document.id),\n    duration,\n    waveform: waveform ? Array.from(waveform) : undefined,\n  };\n}\n\nfunction buildDocumentFromMedia(media: GramJs.TypeMessageMedia) {\n  if (!(media instanceof GramJs.MessageMediaDocument) || !media.document) {\n    return undefined;\n  }\n\n  return buildApiDocument(media.document);\n}\n\nexport function buildApiDocument(document: GramJs.TypeDocument): ApiDocument | undefined {\n  if (!(document instanceof GramJs.Document)) {\n    return undefined;\n  }\n\n  const {\n    id, size, mimeType, date, thumbs, attributes,\n  } = document;\n\n  const thumbnail = thumbs && buildApiThumbnailFromStripped(thumbs);\n\n  let mediaType: ApiDocument['mediaType'] | undefined;\n  let mediaSize: ApiDocument['mediaSize'] | undefined;\n  const photoSize = thumbs && thumbs.find((s: any): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  if (photoSize) {\n    mediaSize = {\n      width: photoSize.w,\n      height: photoSize.h,\n    };\n\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'photo';\n\n      const imageAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeImageSize => a instanceof GramJs.DocumentAttributeImageSize);\n\n      if (imageAttribute) {\n        const { w: width, h: height } = imageAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'video';\n      const videoAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n      if (videoAttribute) {\n        const { w: width, h: height } = videoAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    }\n  }\n\n  return {\n    id: String(id),\n    size: size.toJSNumber(),\n    mimeType,\n    timestamp: date,\n    fileName: getFilenameFromDocument(document),\n    thumbnail,\n    mediaType,\n    mediaSize,\n  };\n}\n\nfunction buildContact(media: GramJs.TypeMessageMedia): ApiContact | undefined {\n  if (!(media instanceof GramJs.MessageMediaContact)) {\n    return undefined;\n  }\n\n  const {\n    firstName, lastName, phoneNumber, userId,\n  } = media;\n\n  return {\n    firstName, lastName, phoneNumber, userId: buildApiPeerId(userId, 'user'),\n  };\n}\n\nfunction buildPollFromMedia(media: GramJs.TypeMessageMedia): ApiPoll | undefined {\n  if (!(media instanceof GramJs.MessageMediaPoll)) {\n    return undefined;\n  }\n\n  return buildPoll(media.poll, media.results);\n}\n\nfunction buildInvoiceFromMedia(media: GramJs.TypeMessageMedia): ApiInvoice | undefined {\n  if (!(media instanceof GramJs.MessageMediaInvoice)) {\n    return undefined;\n  }\n\n  return buildInvoice(media);\n}\n\nfunction buildLocationFromMedia(media: GramJs.TypeMessageMedia): ApiLocation | undefined {\n  if (media instanceof GramJs.MessageMediaGeo) {\n    return buildGeo(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaVenue) {\n    return buildVenue(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaGeoLive) {\n    return buildGeoLive(media);\n  }\n\n  return undefined;\n}\n\nfunction buildGeo(media: GramJs.MessageMediaGeo): ApiLocation | undefined {\n  const point = buildGeoPoint(media.geo);\n  return point && { type: 'geo', geo: point };\n}\n\nfunction buildVenue(media: GramJs.MessageMediaVenue): ApiLocation | undefined {\n  const {\n    geo, title, provider, address, venueId, venueType,\n  } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'venue',\n    geo: point,\n    title,\n    provider,\n    address,\n    venueId,\n    venueType,\n  };\n}\n\nfunction buildGeoLive(media: GramJs.MessageMediaGeoLive): ApiLocation | undefined {\n  const { geo, period, heading } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'geoLive',\n    geo: point,\n    period,\n    heading,\n  };\n}\n\nfunction buildGeoPoint(geo: GramJs.TypeGeoPoint): ApiLocation['geo'] | undefined {\n  if (geo instanceof GramJs.GeoPointEmpty) return undefined;\n  const {\n    long, lat, accuracyRadius, accessHash,\n  } = geo;\n  return {\n    long,\n    lat,\n    accessHash: accessHash.toString(),\n    accuracyRadius,\n  };\n}\n\nfunction buildGameFromMedia(media: GramJs.TypeMessageMedia): ApiGame | undefined {\n  if (!(media instanceof GramJs.MessageMediaGame)) {\n    return undefined;\n  }\n\n  return buildGame(media);\n}\n\nfunction buildGame(media: GramJs.MessageMediaGame): ApiGame | undefined {\n  const {\n    id, accessHash, shortName, title, description, photo: apiPhoto, document: apiDocument,\n  } = media.game;\n\n  const photo = apiPhoto instanceof GramJs.Photo ? buildApiPhoto(apiPhoto) : undefined;\n  const document = apiDocument instanceof GramJs.Document ? buildApiDocument(apiDocument) : undefined;\n\n  return {\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    shortName,\n    title,\n    description,\n    photo,\n    document,\n  };\n}\n\nexport function buildPoll(poll: GramJs.Poll, pollResults: GramJs.PollResults): ApiPoll {\n  const { id, answers: rawAnswers } = poll;\n  const answers = rawAnswers.map((answer) => ({\n    text: answer.text,\n    option: serializeBytes(answer.option),\n  }));\n\n  return {\n    id: String(id),\n    summary: {\n      isPublic: poll.publicVoters,\n      ...pick(poll, [\n        'closed',\n        'multipleChoice',\n        'quiz',\n        'question',\n        'closePeriod',\n        'closeDate',\n      ]),\n      answers,\n    },\n    results: buildPollResults(pollResults),\n  };\n}\n\nexport function buildInvoice(media: GramJs.MessageMediaInvoice): ApiInvoice {\n  const {\n    description: text, title, photo, test, totalAmount, currency, receiptMsgId, extendedMedia,\n  } = media;\n\n  const preview = extendedMedia instanceof GramJs.MessageExtendedMediaPreview\n    ? buildApiMessageExtendedMediaPreview(extendedMedia) : undefined;\n\n  return {\n    title,\n    text,\n    photo: buildApiWebDocument(photo),\n    receiptMsgId,\n    amount: Number(totalAmount),\n    currency,\n    isTest: test,\n    extendedMedia: preview,\n  };\n}\n\nexport function buildPollResults(pollResults: GramJs.PollResults): ApiPoll['results'] {\n  const {\n    results: rawResults, totalVoters, recentVoters, solution, solutionEntities: entities, min,\n  } = pollResults;\n  const results = rawResults && rawResults.map(({\n    option, chosen, correct, voters,\n  }) => ({\n    isChosen: chosen,\n    isCorrect: correct,\n    option: serializeBytes(option),\n    votersCount: voters,\n  }));\n\n  return {\n    isMin: min,\n    totalVoters,\n    recentVoterIds: recentVoters?.map((id) => buildApiPeerId(id, 'user')),\n    results,\n    solution,\n    ...(entities && { solutionEntities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildWebPage(media: GramJs.TypeMessageMedia): ApiWebPage | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaWebPage)\n    || !(media.webpage instanceof GramJs.WebPage)\n  ) {\n    return undefined;\n  }\n\n  const { id, photo, document } = media.webpage;\n\n  let video;\n  if (document instanceof GramJs.Document && document.mimeType.startsWith('video/')) {\n    video = buildVideoFromDocument(document);\n  }\n\n  return {\n    id: Number(id),\n    ...pick(media.webpage, [\n      'url',\n      'displayUrl',\n      'type',\n      'siteName',\n      'title',\n      'description',\n      'duration',\n    ]),\n    photo: photo instanceof GramJs.Photo ? buildApiPhoto(photo) : undefined,\n    document: !video && document ? buildApiDocument(document) : undefined,\n    video,\n  };\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let text: string;\n  const translationValues = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    text = 'Chat.Service.BotPermissionAllowed';\n    translationValues.push(action.domain);\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionAttachMenuBotAllowed) {\n    text = 'ActionAttachMenuBotAllowed';\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  // TODO Move to the proper button inside preview\n  if (!replyMarkup) {\n    if (media instanceof GramJs.MessageMediaWebPage && media.webpage instanceof GramJs.WebPage) {\n      if (media.webpage.type === 'telegram_message') {\n        return {\n          inlineButtons: [[{\n            type: 'url',\n            text: 'Show Message',\n            url: media.webpage.url,\n          }]],\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  // TODO\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction getFilenameFromDocument(document: GramJs.Document, defaultBase = 'file') {\n  const { mimeType, attributes } = document;\n  const filenameAttribute = attributes\n    .find((a: any): a is GramJs.DocumentAttributeFilename => a instanceof GramJs.DocumentAttributeFilename);\n\n  if (filenameAttribute) {\n    return filenameAttribute.fileName;\n  }\n\n  const extension = mimeType.split('/')[1];\n\n  return `${defaultBase}${String(document.id)}.${extension}`;\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyingTo?: number,\n  replyingToTopId?: number,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiChat | ApiUser,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n  const isForum = chat.isForum;\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    ...(replyingTo && { replyToMessageId: replyingTo }),\n    ...(replyingToTopId && { replyToTopMessageId: replyingToTopId }),\n    ...((replyingTo || replyingToTopId) && isForum && { isTopicReply: true }),\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n}): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyToTopMessageId: toThreadId,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        senderUserId: senderId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildUploadingMedia(\n  attachment: ApiAttachment,\n): ApiMessage['content'] {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: blobUrl },\n            blobUrl,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n        },\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiMessageExtendedMediaPreview(\n  preview: GramJs.MessageExtendedMediaPreview,\n): ApiMessageExtendedMediaPreview {\n  const {\n    w, h, thumb, videoDuration,\n  } = preview;\n\n  return {\n    width: w,\n    height: h,\n    duration: videoDuration,\n    thumbnail: thumb ? buildApiThumbnailFromStripped([thumb]) : undefined,\n  };\n}\n\nexport function buildApiWebDocument(document?: GramJs.TypeWebDocument): ApiWebDocument | undefined {\n  if (!document) return undefined;\n\n  const {\n    url, size, mimeType,\n  } = document;\n  const accessHash = document instanceof GramJs.WebDocument ? document.accessHash.toString() : undefined;\n  const sizeAttr = document.attributes.find((attr): attr is GramJs.DocumentAttributeImageSize => (\n    attr instanceof GramJs.DocumentAttributeImageSize\n  ));\n  const dimensions = sizeAttr && { width: sizeAttr.w, height: sizeAttr.h };\n\n  return {\n    url,\n    accessHash,\n    size,\n    mimeType,\n    dimensions,\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildApiMessageEntity(entity: GramJs.TypeMessageEntity): ApiMessageEntity {\n  const {\n    className: type, offset, length,\n  } = entity;\n\n  if (entity instanceof GramJs.MessageEntityMentionName) {\n    return {\n      type: ApiMessageEntityTypes.MentionName,\n      offset,\n      length,\n      userId: buildApiPeerId(entity.userId, 'user'),\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityTextUrl) {\n    return {\n      type: ApiMessageEntityTypes.TextUrl,\n      offset,\n      length,\n      url: entity.url,\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityPre) {\n    return {\n      type: ApiMessageEntityTypes.Pre,\n      offset,\n      length,\n      language: entity.language,\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityCustomEmoji) {\n    return {\n      type: ApiMessageEntityTypes.CustomEmoji,\n      offset,\n      length,\n      documentId: entity.documentId.toString(),\n    };\n  }\n\n  return {\n    type: type as `${ApiMessageEntityDefault['type']}`,\n    offset,\n    length,\n  };\n}\n\nfunction buildThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const isPostThread = apiChannelId && chatId !== apiChannelId;\n\n  return {\n    isComments: comments,\n    threadId: messageId,\n    ...(isPostThread ? {\n      chatId: apiChannelId,\n      originChannelId: chatId,\n    } : {\n      chatId,\n    }),\n    messagesCount: replies,\n    lastMessageId: maxId,\n    lastReadInboxMessageId: readMaxId,\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n}\n\nexport function buildApiFormattedText(textWithEntities: GramJs.TextWithEntities): ApiFormattedText {\n  const { text, entities } = textWithEntities;\n\n  return {\n    text,\n    entities: entities.map(buildApiMessageEntity),\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiConfig,\n  ApiCountry, ApiSession, ApiUrlAuthResult, ApiWallpaper, ApiWebSession,\n} from '../../types';\nimport type { ApiPrivacySettings, ApiPrivacyKey, PrivacyVisibility } from '../../../types';\n\nimport { buildApiDocument, buildApiReaction } from './messages';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { pick } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\nimport { buildApiUser } from './users';\nimport { addUserToLocalDb } from '../helpers';\n\nexport function buildApiWallpaper(wallpaper: GramJs.TypeWallPaper): ApiWallpaper | undefined {\n  if (wallpaper instanceof GramJs.WallPaperNoFile) {\n    // TODO: Plain color wallpapers\n    return undefined;\n  }\n\n  const { slug } = wallpaper;\n\n  const document = buildApiDocument(wallpaper.document);\n\n  if (!document) {\n    return undefined;\n  }\n\n  return {\n    slug,\n    document,\n  };\n}\n\nexport function buildApiSession(session: GramJs.Authorization): ApiSession {\n  return {\n    isCurrent: Boolean(session.current),\n    isOfficialApp: Boolean(session.officialApp),\n    isPasswordPending: Boolean(session.passwordPending),\n    hash: String(session.hash),\n    areCallsEnabled: !session.callRequestsDisabled,\n    areSecretChatsEnabled: !session.encryptedRequestsDisabled,\n    ...pick(session, [\n      'deviceModel', 'platform', 'systemVersion', 'appName', 'appVersion', 'dateCreated', 'dateActive',\n      'ip', 'country', 'region',\n    ]),\n  };\n}\n\nexport function buildApiWebSession(session: GramJs.WebAuthorization): ApiWebSession {\n  return {\n    hash: String(session.hash),\n    botId: buildApiPeerId(session.botId, 'user'),\n    ...pick(session, [\n      'platform', 'browser', 'dateCreated', 'dateActive', 'ip', 'region', 'domain',\n    ]),\n  };\n}\n\nexport function buildPrivacyKey(key: GramJs.TypePrivacyKey): ApiPrivacyKey | undefined {\n  switch (key.className) {\n    case 'PrivacyKeyPhoneNumber':\n      return 'phoneNumber';\n    case 'PrivacyKeyStatusTimestamp':\n      return 'lastSeen';\n    case 'PrivacyKeyProfilePhoto':\n      return 'profilePhoto';\n    case 'PrivacyKeyPhoneCall':\n      return 'phoneCall';\n    case 'PrivacyKeyPhoneP2P':\n      return 'phoneP2P';\n    case 'PrivacyKeyForwards':\n      return 'forwards';\n    case 'PrivacyKeyVoiceMessages':\n      return 'voiceMessages';\n    case 'PrivacyKeyChatInvite':\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n\nexport function buildPrivacyRules(rules: GramJs.TypePrivacyRule[]): ApiPrivacySettings {\n  let visibility: PrivacyVisibility | undefined;\n  let allowUserIds: string[] | undefined;\n  let allowChatIds: string[] | undefined;\n  let blockUserIds: string[] | undefined;\n  let blockChatIds: string[] | undefined;\n\n  rules.forEach((rule) => {\n    if (rule instanceof GramJs.PrivacyValueAllowAll) {\n      visibility = visibility || 'everybody';\n    } else if (rule instanceof GramJs.PrivacyValueAllowContacts) {\n      visibility = visibility || 'contacts';\n    } else if (rule instanceof GramJs.PrivacyValueDisallowContacts) {\n      visibility = visibility || 'nonContacts';\n    } else if (rule instanceof GramJs.PrivacyValueDisallowAll) {\n      visibility = visibility || 'nobody';\n    } else if (rule instanceof GramJs.PrivacyValueAllowUsers) {\n      allowUserIds = rule.users.map((chatId) => buildApiPeerId(chatId, 'user'));\n    } else if (rule instanceof GramJs.PrivacyValueDisallowUsers) {\n      blockUserIds = rule.users.map((chatId) => buildApiPeerId(chatId, 'user'));\n    } else if (rule instanceof GramJs.PrivacyValueAllowChatParticipants) {\n      allowChatIds = rule.chats.map((chatId) => buildApiPeerId(chatId, 'chat'));\n    } else if (rule instanceof GramJs.PrivacyValueDisallowChatParticipants) {\n      blockChatIds = rule.chats.map((chatId) => buildApiPeerId(chatId, 'chat'));\n    }\n  });\n\n  if (!visibility) {\n    // disallow by default.\n    visibility = 'nobody';\n  }\n\n  return {\n    visibility,\n    allowUserIds: allowUserIds || [],\n    allowChatIds: allowChatIds || [],\n    blockUserIds: blockUserIds || [],\n    blockChatIds: blockChatIds || [],\n  };\n}\n\nexport function buildApiNotifyException(\n  notifySettings: GramJs.TypePeerNotifySettings, peer: GramJs.TypePeer,\n) {\n  const {\n    silent, muteUntil, showPreviews, otherSound,\n  } = notifySettings;\n\n  const hasSound = Boolean(otherSound && !(otherSound instanceof GramJs.NotificationSoundNone));\n\n  return {\n    chatId: getApiChatIdFromMtpPeer(peer),\n    isMuted: silent || (typeof muteUntil === 'number' && getServerTime() < muteUntil),\n    ...(!hasSound && { isSilent: true }),\n    ...(showPreviews !== undefined && { shouldShowPreviews: Boolean(showPreviews) }),\n  };\n}\n\nexport function buildApiNotifyExceptionTopic(\n  notifySettings: GramJs.TypePeerNotifySettings, peer: GramJs.TypePeer, topicId: number,\n) {\n  const {\n    silent, muteUntil, showPreviews, otherSound,\n  } = notifySettings;\n\n  const hasSound = Boolean(otherSound && !(otherSound instanceof GramJs.NotificationSoundNone));\n\n  return {\n    chatId: getApiChatIdFromMtpPeer(peer),\n    topicId,\n    isMuted: silent || (typeof muteUntil === 'number' && getServerTime() < muteUntil),\n    ...(!hasSound && { isSilent: true }),\n    ...(showPreviews !== undefined && { shouldShowPreviews: Boolean(showPreviews) }),\n  };\n}\n\nfunction buildApiCountry(country: GramJs.help.Country, code: GramJs.help.CountryCode) {\n  const {\n    hidden, iso2, defaultName, name,\n  } = country;\n  const { countryCode, prefixes, patterns } = code || {};\n\n  return {\n    isHidden: hidden,\n    iso2,\n    defaultName,\n    name,\n    countryCode,\n    prefixes,\n    patterns,\n  };\n}\n\nexport function buildApiCountryList(countries: GramJs.help.Country[]) {\n  const nonHiddenCountries = countries.filter(({ hidden }) => !hidden);\n  const listByCode = nonHiddenCountries\n    .map((country) => (\n      country.countryCodes.map((code) => buildApiCountry(country, code))\n    ))\n    .flat()\n    .sort((a: ApiCountry, b: ApiCountry) => (\n      a.name ? a.name.localeCompare(b.name!) : a.defaultName.localeCompare(b.defaultName)\n    ));\n\n  const generalList = nonHiddenCountries\n    .map((country) => buildApiCountry(country, country.countryCodes[0]))\n    .sort((a, b) => (\n      a.name ? a.name.localeCompare(b.name!) : a.defaultName.localeCompare(b.defaultName)\n    ));\n\n  return {\n    phoneCodes: listByCode,\n    general: generalList,\n  };\n}\n\nexport function buildJson(json: GramJs.TypeJSONValue): any {\n  if (json instanceof GramJs.JsonNull) return undefined;\n  if (json instanceof GramJs.JsonString\n    || json instanceof GramJs.JsonBool\n    || json instanceof GramJs.JsonNumber) return json.value;\n  if (json instanceof GramJs.JsonArray) return json.value.map(buildJson);\n\n  return json.value.reduce((acc: Record<string, any>, el) => {\n    acc[el.key] = buildJson(el.value);\n    return acc;\n  }, {});\n}\n\nexport function buildApiUrlAuthResult(result: GramJs.TypeUrlAuthResult): ApiUrlAuthResult | undefined {\n  if (result instanceof GramJs.UrlAuthResultRequest) {\n    const { bot, domain, requestWriteAccess } = result;\n    const user = buildApiUser(bot);\n    if (!user) return undefined;\n\n    addUserToLocalDb(bot);\n\n    return {\n      type: 'request',\n      domain,\n      shouldRequestWriteAccess: requestWriteAccess,\n      bot: user,\n    };\n  }\n\n  if (result instanceof GramJs.UrlAuthResultAccepted) {\n    return {\n      type: 'accepted',\n      url: result.url,\n    };\n  }\n\n  if (result instanceof GramJs.UrlAuthResultDefault) {\n    return {\n      type: 'default',\n    };\n  }\n  return undefined;\n}\n\nexport function buildApiConfig(config: GramJs.Config): ApiConfig {\n  const defaultReaction = config.reactionsDefault && buildApiReaction(config.reactionsDefault);\n  return {\n    expiresAt: config.expires,\n    gifSearchUsername: config.gifSearchUsername,\n    defaultReaction,\n    maxGroupSize: config.chatSizeMax,\n  };\n}\n","/* eslint-disable no-bitwise */\n\n// eslint-disable-next-line max-len\nconst TEMPLATE = '<?xml version=\"1.0\" encoding=\"utf-8\"?><svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 {{width}} {{height}}\" xml:space=\"preserve\"><path fill-opacity=\"0.1\" d=\"{{path}}\" /></svg>';\nconst LOOKUP = 'AACAAAAHAAALMAAAQASTAVAAAZaacaaaahaaalmaaaqastava.az0123456789-,';\n\nexport function pathBytesToSvg(bytes: Buffer, width: number, height: number) {\n  return TEMPLATE\n    .replace('{{path}}', buildPath(bytes))\n    .replace('{{width}}', String(width))\n    .replace('{{height}}', String(height));\n}\n\nfunction buildPath(bytes: Buffer) {\n  let path = 'M';\n\n  const len = bytes.length;\n  for (let i = 0; i < len; i++) {\n    const num = bytes[i];\n    if (num >= 128 + 64) {\n      path += LOOKUP[num - 128 - 64];\n    } else {\n      if (num >= 128) {\n        path += ',';\n      } else if (num >= 64) {\n        path += '-';\n      }\n      path += String(num & 63);\n    }\n  }\n\n  path += 'z';\n\n  return path;\n}\n","import type BigInt from 'big-integer';\n\nimport type { Api as GramJs } from '../../../lib/gramjs';\n\nexport function isPeerUser(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerUser {\n  return peer.hasOwnProperty('userId');\n}\n\nexport function isPeerChat(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerChat {\n  return peer.hasOwnProperty('chatId');\n}\n\nexport function isPeerChannel(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerChannel {\n  return peer.hasOwnProperty('channelId');\n}\n\nexport function buildApiPeerId(id: BigInt.BigInteger, type: 'user' | 'chat' | 'channel') {\n  return type === 'user' ? String(id) : `-${id}`;\n}\n\nexport function getApiChatIdFromMtpPeer(peer: GramJs.TypePeer | GramJs.TypeInputPeer) {\n  if (isPeerUser(peer)) {\n    return buildApiPeerId(peer.userId, 'user');\n  } else if (isPeerChat(peer)) {\n    return buildApiPeerId(peer.chatId, 'chat');\n  } else {\n    return buildApiPeerId((peer as GramJs.InputPeerChannel).channelId, 'channel');\n  }\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiEmojiInteraction, ApiStickerSetInfo, ApiSticker, ApiStickerSet, GramJsEmojiInteraction,\n} from '../../types';\n\nimport { buildApiThumbnailFromCached, buildApiThumbnailFromPath } from './common';\nimport localDb from '../localDb';\nimport { compact } from '../../../util/iteratees';\n\nconst LOTTIE_STICKER_MIME_TYPE = 'application/x-tgsticker';\nconst VIDEO_STICKER_MIME_TYPE = 'video/webm';\n\nexport function buildStickerFromDocument(document: GramJs.TypeDocument, isNoPremium?: boolean): ApiSticker | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const { mimeType, videoThumbs } = document;\n  const stickerAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeSticker => (\n      attr instanceof GramJs.DocumentAttributeSticker\n    ));\n  const customEmojiAttribute = document.attributes\n    .find((attr): attr is GramJs.DocumentAttributeCustomEmoji => attr instanceof GramJs.DocumentAttributeCustomEmoji);\n\n  const fileAttribute = (mimeType === LOTTIE_STICKER_MIME_TYPE || mimeType === VIDEO_STICKER_MIME_TYPE)\n    && document.attributes\n      .find((attr: any): attr is GramJs.DocumentAttributeFilename => (\n        attr instanceof GramJs.DocumentAttributeFilename\n      ));\n\n  if (!(stickerAttribute || customEmojiAttribute) && !fileAttribute) {\n    return undefined;\n  }\n\n  const isLottie = mimeType === LOTTIE_STICKER_MIME_TYPE;\n  const isVideo = mimeType === VIDEO_STICKER_MIME_TYPE;\n  const isCustomEmoji = Boolean(customEmojiAttribute);\n  const shouldUseTextColor = isCustomEmoji && customEmojiAttribute.textColor;\n\n  const imageSizeAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeImageSize => (\n      attr instanceof GramJs.DocumentAttributeImageSize\n    ));\n\n  const videoSizeAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeVideo => (\n      attr instanceof GramJs.DocumentAttributeVideo\n    ));\n\n  const sizeAttribute = imageSizeAttribute || videoSizeAttribute;\n\n  const stickerOrEmojiAttribute = (stickerAttribute || customEmojiAttribute)!;\n  const stickerSetInfo = buildApiStickerSetInfo(stickerOrEmojiAttribute?.stickerset);\n  const emoji = stickerOrEmojiAttribute?.alt;\n  const isFree = Boolean(customEmojiAttribute?.free ?? true);\n\n  const cachedThumb = document.thumbs && document.thumbs.find(\n    (s): s is GramJs.PhotoCachedSize => s instanceof GramJs.PhotoCachedSize,\n  );\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_STICKER_MIME_TYPE && !(self as any).isWebmSupported && !cachedThumb) {\n    const staticThumb = document.thumbs && document.thumbs.find(\n      (s): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize,\n    );\n\n    if (!staticThumb) {\n      return undefined;\n    }\n  }\n\n  const pathThumb = document.thumbs && document.thumbs.find(\n    (s): s is GramJs.PhotoPathSize => s instanceof GramJs.PhotoPathSize,\n  );\n\n  const thumbnail = cachedThumb ? (\n    buildApiThumbnailFromCached(cachedThumb)\n  ) : pathThumb && sizeAttribute ? (\n    buildApiThumbnailFromPath(pathThumb, sizeAttribute)\n  ) : undefined;\n\n  const { w: width, h: height } = cachedThumb as GramJs.PhotoCachedSize || sizeAttribute || {};\n\n  const hasEffect = !isNoPremium && videoThumbs && compact(videoThumbs\n    ?.filter((thumb) => thumb instanceof GramJs.VideoSize) as GramJs.VideoSize[])\n    .some(({ type }) => type === 'f');\n\n  return {\n    id: String(document.id),\n    stickerSetInfo,\n    emoji,\n    isCustomEmoji,\n    isLottie,\n    isVideo,\n    width,\n    height,\n    thumbnail,\n    hasEffect,\n    isFree,\n    shouldUseTextColor,\n  };\n}\n\nexport function buildStickerSet(set: GramJs.StickerSet): ApiStickerSet {\n  const {\n    archived,\n    animated,\n    installedDate,\n    videos,\n    id,\n    accessHash,\n    title,\n    thumbs,\n    count,\n    shortName,\n    emojis,\n    thumbDocumentId,\n  } = set;\n\n  return {\n    isArchived: archived,\n    isLottie: animated,\n    isVideos: videos,\n    isEmoji: emojis,\n    installedDate,\n    id: String(id),\n    accessHash: String(accessHash),\n    title,\n    hasThumbnail: Boolean(thumbs?.length || thumbDocumentId),\n    count,\n    shortName,\n  };\n}\n\nfunction buildApiStickerSetInfo(inputSet?: GramJs.TypeInputStickerSet): ApiStickerSetInfo {\n  if (inputSet instanceof GramJs.InputStickerSetID) {\n    return {\n      id: String(inputSet.id),\n      accessHash: String(inputSet.accessHash),\n    };\n  }\n  if (inputSet instanceof GramJs.InputStickerSetShortName) {\n    return {\n      shortName: inputSet.shortName,\n    };\n  }\n\n  return {\n    isMissing: true,\n  };\n}\n\nexport function buildStickerSetCovered(coveredStickerSet: GramJs.TypeStickerSetCovered): ApiStickerSet {\n  const stickerSet = buildStickerSet(coveredStickerSet.set);\n\n  if (coveredStickerSet instanceof GramJs.StickerSetNoCovered) {\n    return stickerSet;\n  }\n\n  const stickerSetCovers = (coveredStickerSet instanceof GramJs.StickerSetCovered) ? [coveredStickerSet.cover]\n    : (coveredStickerSet instanceof GramJs.StickerSetMultiCovered) ? coveredStickerSet.covers\n      : coveredStickerSet.documents;\n\n  const stickers = processStickerResult(stickerSetCovers);\n\n  if (coveredStickerSet instanceof GramJs.StickerSetFullCovered) {\n    return {\n      ...stickerSet,\n      stickers,\n      packs: processStickerPackResult(coveredStickerSet.packs),\n    };\n  }\n\n  return {\n    ...stickerSet,\n    covers: stickers,\n  };\n}\n\nexport function buildApiEmojiInteraction(json: GramJsEmojiInteraction): ApiEmojiInteraction {\n  return {\n    timestamps: json.a.map(({ t }) => t),\n  };\n}\n\nexport function processStickerPackResult(packs: GramJs.StickerPack[]) {\n  return packs.reduce((acc, { emoticon, documents }) => {\n    acc[emoticon] = documents.map((documentId) => buildStickerFromDocument(\n      localDb.documents[String(documentId)],\n    )).filter(Boolean);\n    return acc;\n  }, {} as Record<string, ApiSticker[]>);\n}\n\nexport function processStickerResult(stickers: GramJs.TypeDocument[]) {\n  return stickers\n    .map((document) => {\n      if (document instanceof GramJs.Document) {\n        const sticker = buildStickerFromDocument(document);\n        if (sticker) {\n          localDb.documents[String(document.id)] = document;\n\n          return sticker;\n        }\n      }\n\n      return undefined;\n    })\n    .filter(Boolean);\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiEmojiStatus,\n  ApiPremiumGiftOption,\n  ApiUser,\n  ApiUserStatus,\n  ApiUserType,\n} from '../../types';\nimport { buildApiPeerId } from './peers';\nimport { buildApiBotInfo } from './bots';\nimport { buildApiPhoto, buildApiUsernames } from './common';\n\nexport function buildApiUserFromFull(mtpUserFull: GramJs.users.UserFull): ApiUser {\n  const {\n    fullUser: {\n      about, commonChatsCount, pinnedMsgId, botInfo, blocked,\n      profilePhoto, voiceMessagesForbidden, premiumGifts,\n      fallbackPhoto, personalPhoto,\n    },\n    users,\n  } = mtpUserFull;\n\n  const user = buildApiUser(users[0])!;\n\n  return {\n    ...user,\n    fullInfo: {\n      ...(profilePhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(profilePhoto) }),\n      ...(fallbackPhoto instanceof GramJs.Photo && { fallbackPhoto: buildApiPhoto(fallbackPhoto) }),\n      ...(personalPhoto instanceof GramJs.Photo && { personalPhoto: buildApiPhoto(personalPhoto) }),\n      bio: about,\n      commonChatsCount,\n      pinnedMessageId: pinnedMsgId,\n      isBlocked: Boolean(blocked),\n      noVoiceMessages: voiceMessagesForbidden,\n      ...(premiumGifts && { premiumGifts: premiumGifts.map((gift) => buildApiPremiumGiftOption(gift)) }),\n      ...(botInfo && { botInfo: buildApiBotInfo(botInfo, user.id) }),\n    },\n  };\n}\n\nexport function buildApiUser(mtpUser: GramJs.TypeUser): ApiUser | undefined {\n  if (!(mtpUser instanceof GramJs.User)) {\n    return undefined;\n  }\n\n  const {\n    id, firstName, lastName, fake, scam,\n  } = mtpUser;\n  const hasVideoAvatar = mtpUser.photo instanceof GramJs.UserProfilePhoto\n    ? Boolean(mtpUser.photo.hasVideo)\n    : undefined;\n  const avatarHash = mtpUser.photo instanceof GramJs.UserProfilePhoto\n    ? String(mtpUser.photo.photoId)\n    : undefined;\n  const userType = buildApiUserType(mtpUser);\n  const usernames = buildApiUsernames(mtpUser);\n  const emojiStatus = mtpUser.emojiStatus ? buildApiUserEmojiStatus(mtpUser.emojiStatus) : undefined;\n\n  return {\n    id: buildApiPeerId(id, 'user'),\n    isMin: Boolean(mtpUser.min),\n    fakeType: scam ? 'scam' : (fake ? 'fake' : undefined),\n    ...(mtpUser.self && { isSelf: true }),\n    isPremium: Boolean(mtpUser.premium),\n    ...(mtpUser.verified && { isVerified: true }),\n    ...((mtpUser.contact || mtpUser.mutualContact) && { isContact: true }),\n    type: userType,\n    ...(firstName && { firstName }),\n    ...(userType === 'userTypeBot' && { canBeInvitedToGroup: !mtpUser.botNochats }),\n    ...(lastName && { lastName }),\n    ...(usernames && { usernames }),\n    phoneNumber: mtpUser.phone || '',\n    noStatus: !mtpUser.status,\n    ...(mtpUser.accessHash && { accessHash: String(mtpUser.accessHash) }),\n    ...(avatarHash && { avatarHash }),\n    emojiStatus,\n    hasVideoAvatar,\n    ...(mtpUser.bot && mtpUser.botInlinePlaceholder && { botPlaceholder: mtpUser.botInlinePlaceholder }),\n    ...(mtpUser.bot && mtpUser.botAttachMenu && { isAttachBot: mtpUser.botAttachMenu }),\n  };\n}\n\nfunction buildApiUserType(user: GramJs.User): ApiUserType {\n  if (user.bot) {\n    return 'userTypeBot';\n  }\n  if (user.deleted) {\n    return 'userTypeDeleted';\n  }\n\n  return 'userTypeRegular';\n}\n\nexport function buildApiUserStatus(mtpStatus?: GramJs.TypeUserStatus): ApiUserStatus {\n  if (!mtpStatus || mtpStatus instanceof GramJs.UserStatusEmpty) {\n    return { type: 'userStatusEmpty' };\n  } else if (mtpStatus instanceof GramJs.UserStatusOnline) {\n    return { type: 'userStatusOnline', expires: mtpStatus.expires };\n  } else if (mtpStatus instanceof GramJs.UserStatusOffline) {\n    return { type: 'userStatusOffline', wasOnline: mtpStatus.wasOnline };\n  } else if (mtpStatus instanceof GramJs.UserStatusRecently) {\n    return { type: 'userStatusRecently' };\n  } else if (mtpStatus instanceof GramJs.UserStatusLastWeek) {\n    return { type: 'userStatusLastWeek' };\n  } else {\n    return { type: 'userStatusLastMonth' };\n  }\n}\n\nexport function buildApiUserEmojiStatus(mtpEmojiStatus: GramJs.TypeEmojiStatus): ApiEmojiStatus | undefined {\n  if (mtpEmojiStatus instanceof GramJs.EmojiStatus) {\n    return { documentId: mtpEmojiStatus.documentId.toString() };\n  }\n\n  if (mtpEmojiStatus instanceof GramJs.EmojiStatusUntil) {\n    return { documentId: mtpEmojiStatus.documentId.toString(), until: mtpEmojiStatus.until };\n  }\n\n  return undefined;\n}\n\nexport function buildApiUsersAndStatuses(mtpUsers: GramJs.TypeUser[]) {\n  const userStatusesById: Record<string, ApiUserStatus> = {};\n  const users: ApiUser[] = [];\n\n  mtpUsers.forEach((mtpUser) => {\n    const user = buildApiUser(mtpUser);\n    if (!user) {\n      return;\n    }\n\n    users.push(user);\n\n    if ('status' in mtpUser) {\n      userStatusesById[user.id] = buildApiUserStatus(mtpUser.status);\n    }\n  });\n\n  return { users, userStatusesById };\n}\n\nexport function buildApiPremiumGiftOption(option: GramJs.TypePremiumGiftOption): ApiPremiumGiftOption {\n  const {\n    months, currency, amount, botUrl,\n  } = option;\n\n  return {\n    months,\n    currency,\n    amount: amount.toJSNumber(),\n    botUrl,\n  };\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiPrivacyKey } from '../../../types';\n\nimport { generateRandomBytes, readBigIntFromBuffer } from '../../../lib/gramjs/Helpers';\nimport type {\n  ApiChatAdminRights,\n  ApiChatBannedRights,\n  ApiChatFolder,\n  ApiGroupCall,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiPhoto,\n  ApiPhoneCall,\n  ApiReportReason,\n  ApiSendMessageAction,\n  ApiSticker,\n  ApiVideo,\n  ApiThemeParameters,\n  ApiPoll,\n  ApiRequestInputInvoice,\n  ApiChatReactions,\n  ApiReaction,\n  ApiFormattedText,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes,\n} from '../../types';\nimport localDb from '../localDb';\nimport { pick } from '../../../util/iteratees';\nimport { deserializeBytes } from '../helpers';\nimport { DEFAULT_STATUS_ICON_ID } from '../../../config';\n\nconst CHANNEL_ID_MIN_LENGTH = 11; // Example: -1000000000\n\nexport function getEntityTypeById(chatOrUserId: string) {\n  if (typeof chatOrUserId === 'number') {\n    return getEntityTypeByDeprecatedId(chatOrUserId);\n  }\n\n  if (!chatOrUserId.startsWith('-')) {\n    return 'user';\n  } else if (chatOrUserId.length >= CHANNEL_ID_MIN_LENGTH) {\n    return 'channel';\n  } else {\n    return 'chat';\n  }\n}\n\n// Workaround for old-fashioned IDs stored locally\nexport function getEntityTypeByDeprecatedId(chatOrUserId: number) {\n  if (chatOrUserId > 0) {\n    return 'user';\n  } else if (chatOrUserId <= -1000000000) {\n    return 'channel';\n  } else {\n    return 'chat';\n  }\n}\n\nexport function buildPeer(chatOrUserId: string): GramJs.TypePeer {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.PeerUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.PeerChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n    });\n  } else {\n    return new GramJs.PeerChat({\n      chatId: buildMtpPeerId(chatOrUserId, 'chat'),\n    });\n  }\n}\n\nexport function buildInputPeer(chatOrUserId: string, accessHash?: string): GramJs.TypeInputPeer {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.InputPeerUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.InputPeerChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else {\n    return new GramJs.InputPeerChat({\n      chatId: buildMtpPeerId(chatOrUserId, 'chat'),\n    });\n  }\n}\n\nexport function buildInputPeerFromLocalDb(chatOrUserId: string): GramJs.TypeInputPeer | undefined {\n  const type = getEntityTypeById(chatOrUserId);\n  let accessHash: BigInt.BigInteger | undefined;\n\n  if (type === 'user') {\n    accessHash = localDb.users[chatOrUserId]?.accessHash;\n    if (!accessHash) {\n      return undefined;\n    }\n  } else if (type === 'channel') {\n    accessHash = (localDb.chats[chatOrUserId] as GramJs.Channel)?.accessHash;\n    if (!accessHash) {\n      return undefined;\n    }\n  }\n\n  return buildInputPeer(chatOrUserId, String(accessHash));\n}\n\nexport function buildInputEntity(chatOrUserId: string, accessHash?: string) {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.InputUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.InputChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else {\n    return buildMtpPeerId(chatOrUserId, 'chat');\n  }\n}\n\nexport function buildInputStickerSet(id: string, accessHash: string) {\n  return new GramJs.InputStickerSetID({\n    id: BigInt(id),\n    accessHash: BigInt(accessHash),\n  });\n}\n\nexport function buildInputStickerSetShortName(shortName: string) {\n  return new GramJs.InputStickerSetShortName({\n    shortName,\n  });\n}\n\nexport function buildInputDocument(media: ApiSticker | ApiVideo) {\n  const document = localDb.documents[media.id];\n\n  if (!document) {\n    return undefined;\n  }\n\n  return new GramJs.InputDocument(pick(document, [\n    'id',\n    'accessHash',\n    'fileReference',\n  ]));\n}\n\nexport function buildInputMediaDocument(media: ApiSticker | ApiVideo) {\n  const inputDocument = buildInputDocument(media);\n\n  if (!inputDocument) {\n    return undefined;\n  }\n\n  return new GramJs.InputMediaDocument({ id: inputDocument });\n}\n\nexport function buildInputPoll(pollParams: ApiNewPoll, randomId: BigInt.BigInteger) {\n  const { summary, quiz } = pollParams;\n\n  const poll = new GramJs.Poll({\n    id: randomId,\n    publicVoters: summary.isPublic,\n    question: summary.question,\n    answers: summary.answers.map(({ text, option }) => {\n      return new GramJs.PollAnswer({ text, option: deserializeBytes(option) });\n    }),\n    quiz: summary.quiz,\n    multipleChoice: summary.multipleChoice,\n  });\n\n  if (!quiz) {\n    return new GramJs.InputMediaPoll({ poll });\n  }\n\n  const correctAnswers = quiz.correctAnswers.map(deserializeBytes);\n  const { solution } = quiz;\n  const solutionEntities = quiz.solutionEntities ? quiz.solutionEntities.map(buildMtpMessageEntity) : [];\n\n  return new GramJs.InputMediaPoll({\n    poll,\n    correctAnswers,\n    ...(solution && {\n      solution,\n      solutionEntities,\n    }),\n  });\n}\n\nexport function buildInputPollFromExisting(poll: ApiPoll, shouldClose = false) {\n  return new GramJs.InputMediaPoll({\n    poll: new GramJs.Poll({\n      id: BigInt(poll.id),\n      publicVoters: poll.summary.isPublic,\n      question: poll.summary.question,\n      answers: poll.summary.answers.map(({ text, option }) => {\n        return new GramJs.PollAnswer({ text, option: deserializeBytes(option) });\n      }),\n      quiz: poll.summary.quiz,\n      multipleChoice: poll.summary.multipleChoice,\n      closeDate: poll.summary.closeDate,\n      closePeriod: poll.summary.closePeriod,\n      closed: shouldClose ? true : poll.summary.closed,\n    }),\n    correctAnswers: poll.results.results?.filter((o) => o.isCorrect).map((o) => deserializeBytes(o.option)),\n    solution: poll.results.solution,\n    solutionEntities: poll.results.solutionEntities?.map(buildMtpMessageEntity),\n  });\n}\n\nexport function buildFilterFromApiFolder(folder: ApiChatFolder): GramJs.DialogFilter {\n  const {\n    emoticon,\n    contacts,\n    nonContacts,\n    groups,\n    channels,\n    bots,\n    excludeArchived,\n    excludeMuted,\n    excludeRead,\n    pinnedChatIds,\n    includedChatIds,\n    excludedChatIds,\n  } = folder;\n\n  const pinnedPeers = pinnedChatIds\n    ? pinnedChatIds.map(buildInputPeerFromLocalDb).filter(Boolean)\n    : [];\n\n  const includePeers = includedChatIds\n    ? includedChatIds.map(buildInputPeerFromLocalDb).filter(Boolean)\n    : [];\n\n  const excludePeers = excludedChatIds\n    ? excludedChatIds.map(buildInputPeerFromLocalDb).filter(Boolean)\n    : [];\n\n  return new GramJs.DialogFilter({\n    id: folder.id,\n    title: folder.title,\n    emoticon: emoticon || undefined,\n    contacts: contacts || undefined,\n    nonContacts: nonContacts || undefined,\n    groups: groups || undefined,\n    bots: bots || undefined,\n    excludeArchived: excludeArchived || undefined,\n    excludeMuted: excludeMuted || undefined,\n    excludeRead: excludeRead || undefined,\n    broadcasts: channels || undefined,\n    pinnedPeers,\n    includePeers,\n    excludePeers,\n  });\n}\n\nexport function generateRandomBigInt() {\n  return readBigIntFromBuffer(generateRandomBytes(8), true, true);\n}\n\nexport function generateRandomInt() {\n  return readBigIntFromBuffer(generateRandomBytes(4), true, true).toJSNumber();\n}\n\nexport function buildMessageFromUpdate(\n  id: number,\n  chatId: string,\n  update: GramJs.UpdateShortSentMessage | GramJs.UpdateServiceNotification,\n) {\n  // This is not a proper message, but we only need these fields for downloading media through `localDb`.\n  return new GramJs.Message({\n    id,\n    peerId: buildPeer(chatId),\n    fromId: buildPeer(chatId),\n    media: update.media,\n  } as GramJs.Message);\n}\n\nexport function buildMtpMessageEntity(entity: ApiMessageEntity): GramJs.TypeMessageEntity {\n  const {\n    type, offset, length,\n  } = entity;\n\n  const user = 'userId' in entity ? localDb.users[entity.userId] : undefined;\n  switch (type) {\n    case ApiMessageEntityTypes.Bold:\n      return new GramJs.MessageEntityBold({ offset, length });\n    case ApiMessageEntityTypes.Italic:\n      return new GramJs.MessageEntityItalic({ offset, length });\n    case ApiMessageEntityTypes.Underline:\n      return new GramJs.MessageEntityUnderline({ offset, length });\n    case ApiMessageEntityTypes.Strike:\n      return new GramJs.MessageEntityStrike({ offset, length });\n    case ApiMessageEntityTypes.Code:\n      return new GramJs.MessageEntityCode({ offset, length });\n    case ApiMessageEntityTypes.Pre:\n      return new GramJs.MessageEntityPre({ offset, length, language: entity.language || '' });\n    case ApiMessageEntityTypes.Blockquote:\n      return new GramJs.MessageEntityBlockquote({ offset, length });\n    case ApiMessageEntityTypes.TextUrl:\n      return new GramJs.MessageEntityTextUrl({ offset, length, url: entity.url });\n    case ApiMessageEntityTypes.Url:\n      return new GramJs.MessageEntityUrl({ offset, length });\n    case ApiMessageEntityTypes.Hashtag:\n      return new GramJs.MessageEntityHashtag({ offset, length });\n    case ApiMessageEntityTypes.MentionName:\n      return new GramJs.InputMessageEntityMentionName({\n        offset,\n        length,\n        userId: new GramJs.InputUser({ userId: BigInt(user!.id), accessHash: user!.accessHash! }),\n      });\n    case ApiMessageEntityTypes.Spoiler:\n      return new GramJs.MessageEntitySpoiler({ offset, length });\n    case ApiMessageEntityTypes.CustomEmoji:\n      return new GramJs.MessageEntityCustomEmoji({ offset, length, documentId: BigInt(entity.documentId) });\n    default:\n      return new GramJs.MessageEntityUnknown({ offset, length });\n  }\n}\n\nexport function isMessageWithMedia(message: GramJs.Message | GramJs.UpdateServiceNotification) {\n  const { media } = message;\n  if (!media) {\n    return false;\n  }\n\n  return (\n    media instanceof GramJs.MessageMediaPhoto\n    || media instanceof GramJs.MessageMediaDocument\n    || (\n      media instanceof GramJs.MessageMediaWebPage\n      && media.webpage instanceof GramJs.WebPage\n      && (\n        media.webpage.photo instanceof GramJs.Photo || (\n          media.webpage.document instanceof GramJs.Document\n          && media.webpage.document.mimeType.startsWith('video')\n        )\n      )\n    ) || (\n      media instanceof GramJs.MessageMediaGame\n      && (media.game.document instanceof GramJs.Document || media.game.photo instanceof GramJs.Photo)\n    ) || (\n      media instanceof GramJs.MessageMediaInvoice && (media.photo || media.extendedMedia)\n    )\n  );\n}\n\nexport function isServiceMessageWithMedia(message: GramJs.MessageService) {\n  return 'photo' in message.action && message.action.photo instanceof GramJs.Photo;\n}\n\nexport function buildChatPhotoForLocalDb(photo: GramJs.TypePhoto) {\n  if (photo instanceof GramJs.PhotoEmpty) {\n    return new GramJs.ChatPhotoEmpty();\n  }\n\n  const { dcId, id: photoId } = photo;\n\n  return new GramJs.ChatPhoto({\n    dcId,\n    photoId,\n  });\n}\n\nexport function buildInputPhoto(photo: ApiPhoto) {\n  const localPhoto = localDb.photos[photo?.id];\n\n  if (!localPhoto) {\n    return undefined;\n  }\n\n  return new GramJs.InputPhoto(pick(localPhoto, [\n    'id',\n    'accessHash',\n    'fileReference',\n  ]));\n}\n\nexport function buildInputContact({\n  phone,\n  firstName,\n  lastName,\n}: {\n  phone: string;\n  firstName: string;\n  lastName: string;\n}) {\n  return new GramJs.InputPhoneContact({\n    clientId: BigInt(1),\n    phone,\n    firstName,\n    lastName,\n  });\n}\n\nexport function buildChatBannedRights(\n  bannedRights: ApiChatBannedRights,\n  untilDate = 0,\n) {\n  return new GramJs.ChatBannedRights({\n    ...bannedRights,\n    untilDate,\n  });\n}\n\nexport function buildChatAdminRights(\n  adminRights: ApiChatAdminRights,\n) {\n  return new GramJs.ChatAdminRights(adminRights);\n}\n\nexport function buildShippingInfo(info: GramJs.PaymentRequestedInfo) {\n  const { shippingAddress } = info;\n  return new GramJs.PaymentRequestedInfo({\n    ...info,\n    shippingAddress: shippingAddress\n      ? new GramJs.PostAddress(shippingAddress)\n      : undefined,\n  });\n}\n\nexport function buildInputPrivacyKey(privacyKey: ApiPrivacyKey) {\n  switch (privacyKey) {\n    case 'phoneNumber':\n      return new GramJs.InputPrivacyKeyPhoneNumber();\n\n    case 'lastSeen':\n      return new GramJs.InputPrivacyKeyStatusTimestamp();\n\n    case 'profilePhoto':\n      return new GramJs.InputPrivacyKeyProfilePhoto();\n\n    case 'forwards':\n      return new GramJs.InputPrivacyKeyForwards();\n\n    case 'chatInvite':\n      return new GramJs.InputPrivacyKeyChatInvite();\n\n    case 'phoneCall':\n      return new GramJs.InputPrivacyKeyPhoneCall();\n\n    case 'phoneP2P':\n      return new GramJs.InputPrivacyKeyPhoneP2P();\n\n    case 'voiceMessages':\n      return new GramJs.InputPrivacyKeyVoiceMessages();\n  }\n\n  return undefined;\n}\n\nexport function buildInputReportReason(reason: ApiReportReason) {\n  switch (reason) {\n    case 'spam':\n      return new GramJs.InputReportReasonSpam();\n    case 'violence':\n      return new GramJs.InputReportReasonViolence();\n    case 'childAbuse':\n      return new GramJs.InputReportReasonChildAbuse();\n    case 'pornography':\n      return new GramJs.InputReportReasonPornography();\n    case 'copyright':\n      return new GramJs.InputReportReasonCopyright();\n    case 'fake':\n      return new GramJs.InputReportReasonFake();\n    case 'geoIrrelevant':\n      return new GramJs.InputReportReasonGeoIrrelevant();\n    case 'illegalDrugs':\n      return new GramJs.InputReportReasonIllegalDrugs();\n    case 'personalDetails':\n      return new GramJs.InputReportReasonPersonalDetails();\n    case 'other':\n      return new GramJs.InputReportReasonOther();\n  }\n\n  return undefined;\n}\n\nexport function buildSendMessageAction(action: ApiSendMessageAction) {\n  switch (action.type) {\n    case 'cancel':\n      return new GramJs.SendMessageCancelAction();\n    case 'typing':\n      return new GramJs.SendMessageTypingAction();\n    case 'recordAudio':\n      return new GramJs.SendMessageRecordAudioAction();\n    case 'chooseSticker':\n      return new GramJs.SendMessageChooseStickerAction();\n    case 'playingGame':\n      return new GramJs.SendMessageGamePlayAction();\n  }\n  return undefined;\n}\n\nexport function buildInputThemeParams(params: ApiThemeParameters) {\n  return new GramJs.DataJSON({\n    data: JSON.stringify(params),\n  });\n}\n\nexport function buildMtpPeerId(id: string, type: 'user' | 'chat' | 'channel') {\n  // Workaround for old-fashioned IDs stored locally\n  if (typeof id === 'number') {\n    return BigInt(Math.abs(id));\n  }\n\n  return type === 'user' ? BigInt(id) : BigInt(id.slice(1));\n}\n\nexport function buildInputGroupCall(groupCall: Partial<ApiGroupCall>) {\n  return new GramJs.InputGroupCall({\n    id: BigInt(groupCall.id!),\n    accessHash: BigInt(groupCall.accessHash!),\n  });\n}\n\nexport function buildInputPhoneCall({ id, accessHash }: ApiPhoneCall) {\n  return new GramJs.InputPhoneCall({\n    id: BigInt(id),\n    accessHash: BigInt(accessHash!),\n  });\n}\n\nexport function buildInputInvoice(invoice: ApiRequestInputInvoice) {\n  if ('slug' in invoice) {\n    return new GramJs.InputInvoiceSlug({\n      slug: invoice.slug,\n    });\n  } else {\n    return new GramJs.InputInvoiceMessage({\n      peer: buildInputPeer(invoice.chat.id, invoice.chat.accessHash),\n      msgId: invoice.messageId,\n    });\n  }\n}\n\nexport function buildInputReaction(reaction?: ApiReaction) {\n  if (reaction && 'emoticon' in reaction) {\n    return new GramJs.ReactionEmoji({\n      emoticon: reaction.emoticon,\n    });\n  }\n\n  if (reaction && 'documentId' in reaction) {\n    return new GramJs.ReactionCustomEmoji({\n      documentId: BigInt(reaction.documentId),\n    });\n  }\n\n  return new GramJs.ReactionEmpty();\n}\n\nexport function buildInputChatReactions(chatReactions?: ApiChatReactions) {\n  if (chatReactions?.type === 'all') {\n    return new GramJs.ChatReactionsAll({\n      allowCustom: chatReactions.areCustomAllowed,\n    });\n  }\n\n  if (chatReactions?.type === 'some') {\n    return new GramJs.ChatReactionsSome({\n      reactions: chatReactions.allowed.map(buildInputReaction),\n    });\n  }\n\n  return new GramJs.ChatReactionsNone();\n}\n\nexport function buildInputEmojiStatus(emojiStatus: ApiSticker, expires?: number) {\n  if (emojiStatus.id === DEFAULT_STATUS_ICON_ID) {\n    return new GramJs.EmojiStatusEmpty();\n  }\n\n  if (expires) {\n    return new GramJs.EmojiStatusUntil({\n      documentId: BigInt(emojiStatus.id),\n      until: expires,\n    });\n  }\n\n  return new GramJs.EmojiStatus({\n    documentId: BigInt(emojiStatus.id),\n  });\n}\n\nexport function buildInputTextWithEntities(formatted: ApiFormattedText) {\n  return new GramJs.TextWithEntities({\n    text: formatted.text,\n    entities: formatted.entities?.map(buildMtpMessageEntity) || [],\n  });\n}\n","import { Api as GramJs } from '../../lib/gramjs';\nimport localDb from './localDb';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './apiBuilders/peers';\n\nconst LOG_BACKGROUND = '#111111DD';\nconst LOG_PREFIX_COLOR = '#E4D00A';\nconst LOG_SUFFIX = {\n  INVOKE: '#49DBF5',\n  RESPONSE: '#6887F7',\n  CONNECTING: '#E4D00A',\n  CONNECTED: '#26D907',\n  'CONNECTING ERROR': '#D1191C',\n  'INVOKE ERROR': '#D1191C',\n  UPDATE: '#0DD151',\n  'UNEXPECTED UPDATE': '#9C9C9C',\n  'UNEXPECTED RESPONSE': '#D1191C',\n};\n\nexport function resolveMessageApiChatId(mtpMessage: GramJs.TypeMessage) {\n  if (!(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return getApiChatIdFromMtpPeer(mtpMessage.peerId);\n}\n\nexport function addMessageToLocalDb(message: GramJs.Message | GramJs.MessageService) {\n  const messageFullId = `${resolveMessageApiChatId(message)}-${message.id}`;\n\n  let mockMessage = message;\n  if (message instanceof GramJs.Message\n    && message.media instanceof GramJs.MessageMediaInvoice\n    && message.media.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n    mockMessage = new GramJs.Message({\n      ...message,\n      media: message.media.extendedMedia.media,\n    });\n  }\n\n  localDb.messages[messageFullId] = mockMessage;\n\n  if (mockMessage instanceof GramJs.Message) {\n    if (mockMessage.media instanceof GramJs.MessageMediaDocument\n      && mockMessage.media.document instanceof GramJs.Document\n    ) {\n      localDb.documents[String(mockMessage.media.document.id)] = mockMessage.media.document;\n    }\n\n    if (mockMessage.media instanceof GramJs.MessageMediaWebPage\n      && mockMessage.media.webpage instanceof GramJs.WebPage\n      && mockMessage.media.webpage.document instanceof GramJs.Document\n    ) {\n      localDb.documents[String(mockMessage.media.webpage.document.id)] = mockMessage.media.webpage.document;\n    }\n\n    if (mockMessage.media instanceof GramJs.MessageMediaGame) {\n      if (mockMessage.media.game.document instanceof GramJs.Document) {\n        localDb.documents[String(mockMessage.media.game.document.id)] = mockMessage.media.game.document;\n      }\n      addPhotoToLocalDb(mockMessage.media.game.photo);\n    }\n\n    if (mockMessage.media instanceof GramJs.MessageMediaInvoice\n      && mockMessage.media.photo) {\n      localDb.webDocuments[String(mockMessage.media.photo.url)] = mockMessage.media.photo;\n    }\n  }\n\n  if (mockMessage instanceof GramJs.MessageService && 'photo' in mockMessage.action) {\n    addPhotoToLocalDb(mockMessage.action.photo);\n  }\n}\n\nexport function addPhotoToLocalDb(photo: GramJs.TypePhoto) {\n  if (photo instanceof GramJs.Photo) {\n    localDb.photos[String(photo.id)] = photo;\n  }\n}\n\nfunction addChatToLocalDb(chat: GramJs.Chat | GramJs.Channel, noOverwrite = false) {\n  const id = buildApiPeerId(chat.id, chat instanceof GramJs.Chat ? 'chat' : 'channel');\n  if (!noOverwrite || !localDb.chats[id]) {\n    localDb.chats[id] = chat;\n  }\n}\n\nexport function addUserToLocalDb(user: GramJs.User, shouldOverwrite = false) {\n  const id = buildApiPeerId(user.id, 'user');\n  if (shouldOverwrite || !localDb.users[id]) {\n    localDb.users[id] = user;\n  }\n}\n\nexport function addEntitiesWithPhotosToLocalDb(entities: (GramJs.TypeUser | GramJs.TypeChat)[]) {\n  entities.forEach((entity) => {\n    if (entity instanceof GramJs.User && entity.photo) {\n      addUserToLocalDb(entity);\n    } else if ((entity instanceof GramJs.Chat || entity instanceof GramJs.Channel) && entity.photo) {\n      addChatToLocalDb(entity);\n    }\n  });\n}\n\nexport function swapLocalInvoiceMedia(\n  chatId: string, messageId: number, extendedMedia: GramJs.TypeMessageExtendedMedia,\n) {\n  const localMessage = localDb.messages[`${chatId}-${messageId}`];\n  if (!(localMessage instanceof GramJs.Message) || !localMessage.media) return;\n\n  if (extendedMedia instanceof GramJs.MessageExtendedMediaPreview) {\n    if (!(localMessage.media instanceof GramJs.MessageMediaInvoice)) {\n      return;\n    }\n    localMessage.media.extendedMedia = extendedMedia;\n  }\n\n  if (extendedMedia instanceof GramJs.MessageExtendedMedia) {\n    localMessage.media = extendedMedia.media;\n  }\n}\n\nexport function serializeBytes(value: Buffer) {\n  return String.fromCharCode(...value);\n}\n\nexport function deserializeBytes(value: string) {\n  return Buffer.from(value, 'binary');\n}\n\nexport function log(suffix: keyof typeof LOG_SUFFIX, ...data: any) {\n  /* eslint-disable max-len */\n  /* eslint-disable no-console */\n  const func = suffix === 'UNEXPECTED RESPONSE' ? console.error\n    : suffix === 'INVOKE ERROR' || suffix === 'UNEXPECTED UPDATE' ? console.warn : console.log;\n  /* eslint-enable no-console */\n  func(\n    `%cGramJS%c${suffix}`,\n    `color: ${LOG_PREFIX_COLOR}; background: ${LOG_BACKGROUND}; padding: 0.25rem; border-radius: 0.25rem;`,\n    `color: ${LOG_SUFFIX[suffix]}; background: ${LOG_BACKGROUND}; padding: 0.25rem; border-radius: 0.25rem; margin-left: 0.25rem;`,\n    ...data,\n  );\n  /* eslint-enable max-len */\n}\n","import BigInt from 'big-integer';\nimport type { Api as GramJs } from '../../lib/gramjs';\nimport type { ApiMessage } from '../types';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { constructors } from '../../lib/gramjs/tl';\nimport { throttle } from '../../util/schedulers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport interface LocalDb {\n  localMessages: Record<string, ApiMessage>;\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  cache: Record<string,any>;\n  botWaitReply: Record<string, undefined | {\n    command:string,\n    payload?:Record<string,any>\n  }>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments','cache','botWaitReply',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const valueVirtualClass = Object.keys(value).reduce((acc2, key2) => {\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, valueVirtualClass)\n        : valueVirtualClass;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import { errors } from '../../../lib/gramjs';\nimport type {\n  ApiUpdateAuthorizationState,\n  ApiUpdateAuthorizationStateType,\n  OnApiUpdate,\n  ApiUser,\n} from '../../types';\n\nimport { DEBUG } from '../../../config';\n\nconst ApiErrors: { [k: string]: string } = {\n  PHONE_NUMBER_INVALID: 'Invalid phone number.',\n  PHONE_CODE_INVALID: 'Invalid code.',\n  PASSWORD_HASH_INVALID: 'Incorrect password.',\n  PHONE_PASSWORD_FLOOD: 'Limit exceeded. Please try again later.',\n  PHONE_NUMBER_BANNED: 'This phone number is banned.',\n};\n\nconst authController: {\n  resolve?: Function;\n  reject?: Function;\n} = {};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport function onWebAuthTokenFailed() {\n  onUpdate({\n    '@type': 'updateWebAuthTokenFailed',\n  });\n}\n\nexport function onRequestPhoneNumber() {\n  onUpdate(buildAuthStateUpdate('authorizationStateWaitPhoneNumber'));\n\n  return new Promise<string>((resolve, reject) => {\n    authController.resolve = resolve;\n    authController.reject = reject;\n  });\n}\n\nexport function onRequestCode(isCodeViaApp = false) {\n  onUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitCode'),\n    isCodeViaApp,\n  });\n\n  return new Promise<string>((resolve, reject) => {\n    authController.resolve = resolve;\n    authController.reject = reject;\n  });\n}\n\nexport function onRequestPassword(hint?: string, noReset?: boolean) {\n  onUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitPassword'),\n    hint,\n    noReset,\n  });\n\n  return new Promise<string>((resolve) => {\n    authController.resolve = resolve;\n  });\n}\n\nexport function onRequestRegistration() {\n  onUpdate(buildAuthStateUpdate('authorizationStateWaitRegistration'));\n\n  return new Promise<[string, string?]>((resolve) => {\n    authController.resolve = resolve;\n  });\n}\n\nexport function onRequestQrCode(qrCode: { token: Buffer; expires: number }) {\n  onUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitQrCode'),\n    qrCode: {\n      token: btoa(String.fromCharCode(...qrCode.token)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, ''),\n      expires: qrCode.expires,\n    },\n  });\n\n  return new Promise<void>((resolve, reject) => {\n    authController.reject = reject;\n  });\n}\n\nexport function onAuthError(err: Error) {\n  let message: string;\n\n  if (err instanceof errors.FloodWaitError) {\n    const hours = Math.ceil(Number(err.seconds) / 60 / 60);\n    message = `Too many attempts. Try again in ${hours > 1 ? `${hours} hours` : 'an hour'}`;\n  } else {\n    message = ApiErrors[err.message];\n  }\n\n  if (!message) {\n    message = 'Unexpected Error';\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n\n  onUpdate({\n    '@type': 'updateAuthorizationError',\n    message,\n  });\n}\n\nexport function onAuthReady() {\n  onUpdate(buildAuthStateUpdate('authorizationStateReady'));\n}\n\nexport function onCurrentUserUpdate(currentUser: ApiUser) {\n  onUpdate({\n    '@type': 'updateCurrentUser',\n    currentUser,\n  });\n}\n\nexport function buildAuthStateUpdate(authorizationState: ApiUpdateAuthorizationStateType): ApiUpdateAuthorizationState {\n  return {\n    '@type': 'updateAuthorizationState',\n    authorizationState,\n  };\n}\n\nexport function provideAuthPhoneNumber(phoneNumber: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(phoneNumber);\n}\n\nexport function provideAuthCode(code: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(code);\n}\n\nexport function provideAuthPassword(password: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(password);\n}\n\nexport function provideAuthRegistration(registration: { firstName: string; lastName: string }) {\n  const { firstName, lastName } = registration;\n\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve([firstName, lastName]);\n}\n\nexport function restartAuth() {\n  if (!authController.reject) {\n    return;\n  }\n\n  authController.reject(new Error('RESTART_AUTH'));\n}\n\nexport function restartAuthWithQr() {\n  if (!authController.reject) {\n    return;\n  }\n\n  authController.reject(new Error('RESTART_AUTH_WITH_QR'));\n}\n","import type {TelegramClient} from '../../../lib/gramjs';\nimport {Api as GramJs} from '../../../lib/gramjs';\nimport type {ApiOnProgress, ApiParsedMedia} from '../../types';\nimport {ApiMediaFormat,} from '../../types';\n\nimport {\n  CLOUD_MESSAGE_API,\n  DOWNLOAD_WORKERS,\n  MEDIA_CACHE_DISABLED,\n  MEDIA_CACHE_NAME,\n  MEDIA_CACHE_NAME_AVATARS,\n  MEDIA_CACHE_NAME_WAI,\n} from '../../../config';\nimport localDb from '../localDb';\nimport * as cacheApi from '../../../util/cacheApi';\nimport {Type} from '../../../util/cacheApi';\nimport {getEntityTypeById} from '../gramjsBuilders';\nimport {DownloadReq, DownloadRes} from \"../../../lib/ptp/protobuf/PTPFile\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport Account from \"../../../worker/share/Account\";\nimport {blobToBuffer} from \"../../../worker/share/utils/utils\";\n\nconst MEDIA_ENTITY_TYPES = new Set([\n  'msg', 'sticker', 'gif', 'wallpaper', 'photo', 'webDocument', 'document', 'videoAvatar',\n]);\n\n\nasync function fileToArrayBuffer(file: File): Promise<ArrayBuffer> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      resolve(reader.result as ArrayBuffer);\n    };\n\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n\n    reader.readAsArrayBuffer(file);\n  });\n}\n\nexport default async function downloadMedia(\n  {\n    url, mediaFormat, start, end, isHtmlAllowed,\n  }: {\n    url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean;\n  },\n  client: TelegramClient,\n  isConnected: boolean,\n  onProgress?: ApiOnProgress,\n) {\n  let data:Buffer,fullSize:number,mimeType:string;\n  let flag = false;\n  let id;\n  const t = url.split(\"?\")\n  const t1 = t[0].split(\":\");\n  if(url.indexOf(\"progressive\") > 0 || t1[0].indexOf(\"-\") > 1){\n    id = t1[t1.length - 1];\n  }else{\n    // \"profile623415?7116860199581299000\"\n    if(url.indexOf(\"profile\") === 0){\n      if(url.indexOf(\"?\") > -1){\n        id = url.split(\"?\")[1]\n      }else {\n        id = url.replace(\"profile\",\"\")\n      }\n    }else if(url.indexOf(\"avatar\") === 0){\n      id = url.split(\"?\")[1]\n    }else if(url.indexOf(\"photo\") === 0){\n      id = url.split(\"?\")[0].replace(\"photo\",\"\")\n    }else{\n      console.error(\"[error id] \",url)\n      return undefined\n    }\n  }\n\n  if(localDb.cache[id]){\n    const ab = await fileToArrayBuffer(localDb.cache[id]);\n    mimeType = localDb.cache[id].type;\n    //blob = new Blob([ab], { type: mimeType });\n    fullSize = localDb.cache[id].size\n    data = Buffer.from(ab)\n    flag = true;\n  }\n\n  if(!flag){\n    // const  res = await download(url, client, isConnected, onProgress, start, end, mediaFormat, isHtmlAllowed) || {};\n    // if(!res){\n    //   return undefined\n    // }\n    // data = res.data;\n    // mimeType = res.mimeType;\n    // fullSize = res.fullSize;\n    // if (!data) {\n    //   return undefined;\n    // }\n\n    let downloadReq = new DownloadReq({\n      id,\n    })\n    try {\n      console.log(\"[DOWNLOAD media]\",{url,id})\n      let blob = await cacheApi.fetch(MEDIA_CACHE_NAME_WAI, id, Type.Blob);\n      let downloadRes;\n      let arrayBuffer;\n      if(!blob){\n        let finalBuf = Buffer.alloc(0);\n        while (true){\n          const res = await fetch(`${CLOUD_MESSAGE_API}/proto`,{\n            method: 'POST',\n            body: Buffer.from(downloadReq.pack().getPbData())\n          })\n          arrayBuffer = await res.arrayBuffer();\n          downloadRes = DownloadRes.parseMsg(new Pdu(Buffer.from(arrayBuffer)));\n          if(!downloadRes || downloadRes.err !== ERR.NO_ERROR || !downloadRes.file){\n            return undefined\n          }\n          finalBuf = Buffer.concat([finalBuf,Buffer.from(downloadRes.file.buf)])\n          if(downloadRes.file.part_total && downloadRes.file.part < downloadRes.file.part_total){\n            downloadReq = new DownloadReq({\n              id,\n              part:downloadRes.file.part+1\n            })\n          }else{\n            downloadRes.file!.buf = finalBuf\n            try {\n              const body = new DownloadRes(downloadRes).pack().getPbData()\n              await cacheApi.save(MEDIA_CACHE_NAME_WAI, id, new Blob([Buffer.from(body)]));\n              downloadRes.file.buf = Account.localDecrypt(finalBuf)\n            }catch (e){\n              console.error(e)\n              return undefined\n            }\n            break\n          }\n        }\n      }else{\n        // @ts-ignore\n        const buf = await blobToBuffer(blob)\n        downloadRes = DownloadRes.parseMsg(new Pdu(buf));\n        if(!downloadRes || downloadRes.err !== ERR.NO_ERROR){\n          return undefined\n        }\n        try {\n          downloadRes.file!.buf = Account.localDecrypt(Buffer.from(downloadRes.file!.buf))\n        }catch (e){}\n      }\n      data = Buffer.from(downloadRes.file!.buf);\n      mimeType= downloadRes.file!.type\n      fullSize = downloadRes.file!.size\n    }catch (e){\n      console.error('[DOWNLOAD FAILED]',e,{url,id})\n      return undefined\n    }\n  }\n  const parsed = await parseMedia(data, mediaFormat, mimeType);\n  if (!parsed) {\n    return undefined;\n  }\n  //\n  // const canCache = mediaFormat !== ApiMediaFormat.Progressive && (\n  //   mediaFormat !== ApiMediaFormat.BlobUrl || (parsed as Blob).size <= MEDIA_CACHE_MAX_BYTES\n  // );\n\n  const canCache = mediaFormat !== ApiMediaFormat.Progressive\n  if (!MEDIA_CACHE_DISABLED && cacheApi && canCache) {\n    const cacheName = url.startsWith('avatar') ? MEDIA_CACHE_NAME_AVATARS : MEDIA_CACHE_NAME;\n    void cacheApi.save(cacheName, url, parsed);\n  }\n\n  const dataBlob = mediaFormat === ApiMediaFormat.Progressive ? '' : parsed as string | Blob;\n  const arrayBuffer = mediaFormat === ApiMediaFormat.Progressive ? parsed as ArrayBuffer : undefined;\n\n  return {\n    dataBlob,\n    arrayBuffer,\n    mimeType,\n    fullSize,\n  };\n}\n\nexport type EntityType = (\n  'msg' | 'sticker' | 'wallpaper' | 'gif' | 'channel' | 'chat' | 'user' | 'photo' | 'stickerSet' | 'webDocument' |\n  'document' | 'staticMap' | 'videoAvatar'\n);\n\nasync function download(\n  url: string,\n  client: TelegramClient,\n  isConnected: boolean,\n  onProgress?: ApiOnProgress,\n  start?: number,\n  end?: number,\n  mediaFormat?: ApiMediaFormat,\n  isHtmlAllowed?: boolean,\n) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, sizeType, params, mediaMatchType,\n  } = parsed;\n\n  // if (!isConnected) {\n  //   return Promise.reject(new Error('ERROR: Client is not connected'));\n  // }\n\n  if (entityType === 'staticMap') {\n    const accessHash = entityId;\n    const parsedParams = new URLSearchParams(params);\n    const long = parsedParams.get('long');\n    const lat = parsedParams.get('lat');\n    const w = parsedParams.get('w');\n    const h = parsedParams.get('h');\n    const zoom = parsedParams.get('zoom');\n    const scale = parsedParams.get('scale');\n    const accuracyRadius = parsedParams.get('accuracy_radius');\n\n    const data = await client.downloadStaticMap(accessHash, long, lat, w, h, zoom, scale, accuracyRadius);\n    return {\n      mimeType: 'image/png',\n      data,\n    };\n  }\n\n  let entity: (\n    GramJs.User | GramJs.Chat | GramJs.Channel | GramJs.Photo |\n    GramJs.Message | GramJs.MessageService |\n    GramJs.Document | GramJs.StickerSet | GramJs.TypeWebDocument | undefined\n  );\n\n  switch (entityType) {\n    case 'channel':\n    case 'chat':\n      entity = localDb.chats[entityId];\n      break;\n    case 'user':\n      entity = localDb.users[entityId];\n      break;\n    case 'msg':\n      entity = localDb.messages[entityId];\n      break;\n    case 'sticker':\n    case 'gif':\n    case 'wallpaper':\n      entity = localDb.documents[entityId];\n      break;\n    case 'videoAvatar':\n    case 'photo':\n      entity = localDb.photos[entityId];\n      break;\n    case 'stickerSet':\n      entity = localDb.stickerSets[entityId];\n      break;\n    case 'webDocument':\n      entity = localDb.webDocuments[entityId];\n      break;\n    case 'document':\n      entity = localDb.documents[entityId];\n      break;\n  }\n\n  if (!entity) {\n    return undefined;\n  }\n\n  if (MEDIA_ENTITY_TYPES.has(entityType)) {\n    if (mediaFormat === ApiMediaFormat.Stream) {\n      onProgress!.acceptsBuffer = true;\n    }\n\n    const data = await client.downloadMedia(entity, {\n      sizeType, start, end, progressCallback: onProgress, workers: DOWNLOAD_WORKERS,\n    });\n    let mimeType;\n    let fullSize;\n\n    if (entity instanceof GramJs.MessageService && entity.action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n      mimeType = 'image/jpeg';\n    } else if (entity instanceof GramJs.Message) {\n      mimeType = getMessageMediaMimeType(entity, sizeType);\n      if (entity.media instanceof GramJs.MessageMediaDocument && entity.media.document instanceof GramJs.Document) {\n        fullSize = entity.media.document.size.toJSNumber();\n      }\n      if (entity.media instanceof GramJs.MessageMediaWebPage\n        && entity.media.webpage instanceof GramJs.WebPage\n        && entity.media.webpage.document instanceof GramJs.Document) {\n        fullSize = entity.media.webpage.document.size.toJSNumber();\n      }\n    } else if (entity instanceof GramJs.Photo) {\n      if (entityType === 'videoAvatar') {\n        mimeType = 'video/mp4';\n      } else {\n        mimeType = 'image/jpeg';\n      }\n    } else if (entityType === 'sticker' && sizeType) {\n      mimeType = 'image/webp';\n    } else if (entityType === 'webDocument') {\n      mimeType = (entity as GramJs.TypeWebDocument).mimeType;\n      fullSize = (entity as GramJs.TypeWebDocument).size;\n    } else {\n      mimeType = (entity as GramJs.Document).mimeType;\n      fullSize = (entity as GramJs.Document).size.toJSNumber();\n    }\n\n    // Prevent HTML-in-video attacks\n    if (!isHtmlAllowed && mimeType) {\n      mimeType = mimeType.replace(/html/gi, '');\n    }\n\n    return { mimeType, data, fullSize };\n  } else if (entityType === 'stickerSet') {\n    const data = await client.downloadStickerSetThumb(entity);\n    const mimeType = getMimeType(data);\n\n    return { mimeType, data };\n  } else {\n    const data = await client.downloadProfilePhoto(entity, mediaMatchType === 'profile');\n    const mimeType = getMimeType(data);\n\n    return { mimeType, data };\n  }\n}\n\nfunction getMessageMediaMimeType(message: GramJs.Message, sizeType?: string) {\n  if (!message || !message.media) {\n    return undefined;\n  }\n\n  if (message.media instanceof GramJs.MessageMediaPhoto) {\n    return 'image/jpeg';\n  }\n\n  if (message.media instanceof GramJs.MessageMediaGeo\n    || message.media instanceof GramJs.MessageMediaVenue\n    || message.media instanceof GramJs.MessageMediaGeoLive) {\n    return 'image/png';\n  }\n\n  if (message.media instanceof GramJs.MessageMediaDocument && message.media.document instanceof GramJs.Document) {\n    if (sizeType) {\n      return message.media.document!.attributes.some((a) => a instanceof GramJs.DocumentAttributeSticker)\n        ? 'image/webp'\n        : 'image/jpeg';\n    }\n\n    return message.media.document!.mimeType;\n  }\n\n  if (message.media instanceof GramJs.MessageMediaWebPage\n    && message.media.webpage instanceof GramJs.WebPage\n    && message.media.webpage.document instanceof GramJs.Document) {\n    if (sizeType) {\n      return 'image/jpeg';\n    }\n\n    return message.media.webpage.document.mimeType;\n  }\n\n  return undefined;\n}\n\n// eslint-disable-next-line no-async-without-await/no-async-without-await\nasync function parseMedia(\n  data: Buffer, mediaFormat: ApiMediaFormat, mimeType?: string,\n): Promise<ApiParsedMedia | undefined> {\n  switch (mediaFormat) {\n    case ApiMediaFormat.BlobUrl:\n      return new Blob([data], { type: mimeType });\n    case ApiMediaFormat.Text:\n      return data.toString();\n    case ApiMediaFormat.Progressive:\n    case ApiMediaFormat.DownloadUrl:\n      return data.buffer;\n  }\n\n  return undefined;\n}\n\nfunction getMimeType(data: Uint8Array, fallbackMimeType = 'image/jpeg') {\n  if (data.length < 4) {\n    return fallbackMimeType;\n  }\n\n  let type = fallbackMimeType;\n  const signature = data.subarray(0, 4).reduce((result, byte) => result + byte.toString(16), '');\n\n  // https://en.wikipedia.org/wiki/List_of_file_signatures\n  switch (signature) {\n    case '89504e47':\n      type = 'image/png';\n      break;\n    case '47494638':\n      type = 'image/gif';\n      break;\n    case 'ffd8ffe0':\n    case 'ffd8ffe1':\n    case 'ffd8ffe2':\n    case 'ffd8ffe3':\n    case 'ffd8ffe8':\n      type = 'image/jpeg';\n      break;\n    case '52494646':\n      // In our case only webp is expected\n      type = 'image/webp';\n      break;\n  }\n\n  return type;\n}\n\nexport function parseMediaUrl(url: string) {\n  const mediaMatch = url.startsWith('staticMap')\n    ? url.match(/(staticMap):([0-9-]+)(\\?.+)/)\n    : url.startsWith('webDocument')\n      ? url.match(/(webDocument):(.+)/)\n      : url.match(\n        // eslint-disable-next-line max-len\n        /(avatar|profile|photo|msg|stickerSet|sticker|wallpaper|gif|document|videoAvatar)([-\\d\\w./]+)(?::\\d+)?(\\?size=\\w+)?/,\n      );\n  if (!mediaMatch) {\n    return undefined;\n  }\n\n  const mediaMatchType = mediaMatch[1];\n  const entityId: string | number = mediaMatch[2];\n\n  let entityType: EntityType;\n  const params = mediaMatch[3];\n  const sizeType = params?.replace('?size=', '') || undefined;\n\n  if (mediaMatch[1] === 'avatar' || mediaMatch[1] === 'profile') {\n    entityType = getEntityTypeById(entityId);\n  } else {\n    entityType = mediaMatch[1] as EntityType;\n  }\n\n  return {\n    mediaMatchType,\n    entityType,\n    entityId,\n    sizeType,\n    params,\n  };\n}\n","import {Api as GramJs, connection, TelegramClient,} from '../../../lib/gramjs';\n\nimport {Logger as GramJsLogger} from '../../../lib/gramjs/extensions/index';\nimport type {TwoFaParams} from '../../../lib/gramjs/client/2fa';\n\nimport type {ApiInitialArgs, ApiMediaFormat, ApiOnProgress, ApiSessionData, OnApiUpdate,} from '../../types';\n\nimport {APP_VERSION, CLOUD_MESSAGE_API, DEBUG, DEBUG_GRAMJS, UPLOAD_WORKERS,} from '../../../config';\nimport {onCurrentUserUpdate,} from './auth';\nimport {updater} from '../updater';\nimport {setMessageBuilderCurrentUserId} from '../apiBuilders/messages';\nimport downloadMediaWithClient, {parseMediaUrl} from './media';\nimport {buildApiUserFromFull} from '../apiBuilders/users';\nimport localDb, {clearLocalDb} from '../localDb';\nimport {buildApiPeerId} from '../apiBuilders/peers';\nimport {addMessageToLocalDb, log} from '../helpers';\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport Account from \"../../../worker/share/Account\";\nimport LocalDatabase from \"../../../worker/share/db/LocalDatabase\";\nimport {ActionCommands, getActionCommandsName} from \"../../../lib/ptp/protobuf/ActionCommands\";\nimport {CurrentUserInfo} from \"../../../worker/setting\";\nimport MsgWorker from \"../../../worker/msg/MsgWorker\";\nimport {AuthNativeReq} from \"../../../lib/ptp/protobuf/PTPAuth\";\nimport {ControllerPool} from \"../../../lib/ptp/functions/requests\";\nimport {StopChatStreamReq} from \"../../../lib/ptp/protobuf/PTPOther\";\nimport {SendBotMsgReq, SendBotMsgRes, UpdateCmdReq, UpdateCmdRes} from \"../../../lib/ptp/protobuf/PTPMsg\";\nimport BotWebSocket from \"../../../worker/msg/bot/BotWebSocket\";\n\nconst DEFAULT_USER_AGENT = 'Unknown UserAgent';\nconst DEFAULT_PLATFORM = 'Unknown platform';\nconst APP_CODE_NAME = 'Z';\n\nGramJsLogger.setLevel(DEBUG_GRAMJS ? 'debug' : 'warn');\n\nlet onUpdate: OnApiUpdate;\nlet client: TelegramClient;\nexport let account: Account;\nlet isConnected = false;\nlet currentUserId: string | undefined;\n\nexport async function init(_onUpdate: OnApiUpdate, initialArgs: ApiInitialArgs) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START INIT API');\n  }\n  onUpdate = _onUpdate;\n  const {\n    userAgent, platform, sessionData, isTest, isMovSupported, isWebmSupported, maxBufferSize, webAuthToken, dcId,\n    mockScenario,accountId,entropy,session\n  } = initialArgs;\n  await handleAuthNative(accountId,entropy,session);\n  if(DEBUG){\n    console.log(\"[initialArgs]\",{\n      deviceModel: navigator.userAgent || userAgent || DEFAULT_USER_AGENT,\n      systemVersion: platform || DEFAULT_PLATFORM,\n      appVersion: `${APP_VERSION} ${APP_CODE_NAME}`,\n      useWSS: true,\n    })\n  }\n  try {\n    if (DEBUG) {\n      log('CONNECTING');\n      // eslint-disable-next-line no-restricted-globals\n      (self as any).invoke = invokeRequest;\n    }\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log('>>> FINISH INIT API');\n      log('CONNECTED');\n    }\n\n    onUpdate({ '@type': 'updateApiReady' });\n\n    onUpdate({\n      '@type': 'updateAuthorizationState',\n      authorizationState: \"authorizationStateReady\",\n    });\n    // @ts-ignore\n    onUpdate({'@type': 'updateCurrentUser',currentUser: CurrentUserInfo});\n\n    onUpdate({\n      '@type': 'updateConnectionState',\n      connectionState:\"connectionStateReady\",\n    });\n    // void fetchCurrentUser();\n  } catch (err) {\n    if (DEBUG) {\n      log('CONNECTING ERROR', err);\n    }\n    throw err;\n  }\n}\n\nexport function setIsPremium({ isPremium }: { isPremium: boolean }) {\n  // client.setIsPremium(isPremium);\n}\n\nexport async function destroy(noLogOut = false, noClearLocalDb = false) {\n  // if (!noLogOut) {\n  //   await invokeRequest(new GramJs.auth.LogOut());\n  // }\n  if (!noClearLocalDb) clearLocalDb();\n\n  await client.destroy();\n}\n\nexport async function disconnect() {\n  await client.disconnect();\n}\n\nexport function getClient() {\n  return client;\n\n}\n\nfunction onSessionUpdate(sessionData: ApiSessionData) {\n  onUpdate({\n    '@type': 'updateSession',\n    sessionData,\n  });\n}\n\nfunction handleGramJsUpdate(update: any) {\n  if (update instanceof connection.UpdateConnectionState) {\n    isConnected = update.state === connection.UpdateConnectionState.connected;\n  } else if (update instanceof GramJs.UpdatesTooLong) {\n    void handleTerminatedSession();\n  } else if (update instanceof GramJs.UpdateConfig) {\n    // eslint-disable-next-line no-underscore-dangle\n    const currentUser = (update as GramJs.UpdateConfig & { _entities?: (GramJs.TypeUser | GramJs.TypeChat)[] })\n      ._entities\n      ?.find((entity) => entity instanceof GramJs.User && buildApiPeerId(entity.id, 'user') === currentUserId);\n    if (!(currentUser instanceof GramJs.User)) return;\n\n    setIsPremium({ isPremium: Boolean(currentUser.premium) });\n  }\n}\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue: true,\n  shouldThrow?: boolean,\n  shouldIgnoreUpdates?: undefined,\n  dcId?: number,\n  shouldIgnoreErrors?: boolean,\n): Promise<true | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue?: boolean,\n  shouldThrow?: boolean,\n  shouldIgnoreUpdates?: boolean,\n  dcId?: number,\n  shouldIgnoreErrors?: boolean,\n): Promise<T['__response'] | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue = false,\n  shouldThrow = false,\n  shouldIgnoreUpdates = false,\n  dcId?: number,\n  shouldIgnoreErrors = false,\n) {\n  if (!isConnected) {\n    if (DEBUG) {\n      log('INVOKE ERROR', request.className, 'Client is not connected');\n    }\n\n    return undefined;\n  }\n\n  try {\n    if (DEBUG) {\n      log('INVOKE', request.className);\n    }\n\n    const result = await client.invoke(request, dcId);\n\n    if (DEBUG) {\n      log('RESPONSE', request.className, result);\n    }\n\n    if (!shouldIgnoreUpdates) {\n      handleUpdatesFromRequest(request, result);\n    }\n\n    return shouldReturnTrue ? result && true : result;\n  } catch (err: any) {\n    if (shouldIgnoreErrors) return undefined;\n    if (DEBUG) {\n      log('INVOKE ERROR', request.className);\n      // eslint-disable-next-line no-console\n      console.debug('invokeRequest failed with payload', request);\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n\n    if (shouldThrow) {\n      throw err;\n    }\n\n    dispatchErrorUpdate(err, request);\n\n    return undefined;\n  }\n}\n\nfunction handleUpdatesFromRequest<T extends GramJs.AnyRequest>(request: T, result: T['__response']) {\n  let manyUpdates;\n  let singleUpdate;\n\n  if (result instanceof GramJs.UpdatesCombined || result instanceof GramJs.Updates) {\n    manyUpdates = result;\n  } else if (typeof result === 'object' && 'updates' in result && (\n    result.updates instanceof GramJs.Updates || result.updates instanceof GramJs.UpdatesCombined\n  )) {\n    manyUpdates = result.updates;\n  } else if (\n    result instanceof GramJs.UpdateShortMessage\n    || result instanceof GramJs.UpdateShortChatMessage\n    || result instanceof GramJs.UpdateShort\n    || result instanceof GramJs.UpdateShortSentMessage\n  ) {\n    singleUpdate = result;\n  }\n\n  if (manyUpdates) {\n    injectUpdateEntities(manyUpdates);\n\n    manyUpdates.updates.forEach((update) => {\n      updater(update, request);\n    });\n  } else if (singleUpdate) {\n    updater(singleUpdate, request);\n  }\n}\n\nexport async function downloadMedia(\n  args: { url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean },\n  onProgress?: ApiOnProgress,\n) {\n  try {\n    return (await downloadMediaWithClient(args, client, isConnected, onProgress));\n  } catch (err: any) {\n    if (err.message.startsWith('FILE_REFERENCE')) {\n      const isFileReferenceRepaired = await repairFileReference({ url: args.url });\n      if (isFileReferenceRepaired) {\n        return downloadMediaWithClient(args, client, isConnected, onProgress);\n      }\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to repair file reference', args.url);\n      }\n    }\n\n    throw err;\n  }\n}\n\nexport function uploadFile(file: File, onProgress?: ApiOnProgress) {\n  return client.uploadFile({ file, onProgress, workers: UPLOAD_WORKERS });\n}\n\nexport function updateTwoFaSettings(params: TwoFaParams) {\n  return client.updateTwoFaSettings(params);\n}\n\nexport function getTmpPassword(currentPassword: string, ttl?: number) {\n  return client.getTmpPassword(currentPassword, ttl);\n}\n\nexport async function fetchCurrentUser() {\n  const userFull = await invokeRequest(new GramJs.users.GetFullUser({\n    id: new GramJs.InputUserSelf(),\n  }));\n\n  if (!userFull || !(userFull.users[0] instanceof GramJs.User)) {\n    return;\n  }\n\n  const user = userFull.users[0];\n\n  if (user.photo instanceof GramJs.Photo) {\n    localDb.photos[user.photo.id.toString()] = user.photo;\n  }\n  localDb.users[buildApiPeerId(user.id, 'user')] = user;\n  const currentUser = buildApiUserFromFull(userFull);\n\n  setMessageBuilderCurrentUserId(currentUser.id);\n  onCurrentUserUpdate(currentUser);\n\n  currentUserId = currentUser.id;\n  setIsPremium({ isPremium: Boolean(currentUser.isPremium) });\n}\n\nexport function dispatchErrorUpdate<T extends GramJs.AnyRequest>(err: Error, request: T) {\n  const isSlowMode = err.message.startsWith('A wait of') && (\n    request instanceof GramJs.messages.SendMessage\n    || request instanceof GramJs.messages.SendMedia\n    || request instanceof GramJs.messages.SendMultiMedia\n  );\n\n  const { message } = err;\n\n  onUpdate({\n    '@type': 'error',\n    error: {\n      message,\n      isSlowMode,\n      hasErrorKey: true,\n    },\n  });\n}\n\nfunction injectUpdateEntities(result: GramJs.Updates | GramJs.UpdatesCombined) {\n  const entities = [...result.users, ...result.chats];\n\n  result.updates.forEach((update) => {\n    if (entities) {\n      // eslint-disable-next-line no-underscore-dangle\n      (update as any)._entities = entities;\n    }\n  });\n}\n\nasync function handleTerminatedSession() {\n  try {\n    await invokeRequest(new GramJs.users.GetFullUser({\n      id: new GramJs.InputUserSelf(),\n    }), undefined, true);\n  } catch (err: any) {\n    if (err.message === 'AUTH_KEY_UNREGISTERED') {\n      onUpdate({\n        '@type': 'updateConnectionState',\n        connectionState: 'connectionStateBroken',\n      });\n    }\n  }\n}\n\nexport async function repairFileReference({\n  url,\n}: {\n  url: string;\n}) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, mediaMatchType,\n  } = parsed;\n\n  if (mediaMatchType === 'file') {\n    return false;\n  }\n\n  if (entityType === 'msg') {\n    const entity = localDb.messages[entityId]!;\n    const messageId = entity.id;\n\n    const peer = 'channelId' in entity.peerId ? new GramJs.InputChannel({\n      channelId: entity.peerId.channelId,\n      accessHash: (localDb.chats[buildApiPeerId(entity.peerId.channelId, 'channel')] as GramJs.Channel).accessHash!,\n    }) : undefined;\n    const result = await invokeRequest(\n      peer\n        ? new GramJs.channels.GetMessages({\n          channel: peer,\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        })\n        : new GramJs.messages.GetMessages({\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        }),\n    );\n\n    if (!result || result instanceof GramJs.messages.MessagesNotModified) return false;\n\n    const message = result.messages[0];\n    if (message instanceof GramJs.MessageEmpty) return false;\n    addMessageToLocalDb(message);\n    return true;\n  }\n  return false;\n}\n\nconst handleAuthNative = async (accountId:number,entropy:string,session?:string)=>{\n  const kv = new LocalDatabase();\n  kv.init(localDb);\n  Account.setClientKv(kv)\n  account = Account.getInstance(accountId);\n  await account.setEntropy(entropy)\n  Account.setCurrentAccountId(accountId)\n  if(session){\n    account.saveSession(session)\n  }else{\n    account.delSession()\n  }\n}\n\nconst handleAuthNativeReq = async (pdu:Pdu)=>{\n  const {accountId,entropy,session} = AuthNativeReq.parseMsg(pdu)\n  await handleAuthNative(accountId,entropy,session);\n}\nconst handleStopChatStreamReq = async (pdu:Pdu)=>{\n  const {msgId,chatId} = StopChatStreamReq.parseMsg(pdu)\n  ControllerPool.stop(chatId,msgId)\n}\n\nexport const handleSendBotMsgReq = async (pdu:Pdu)=>{\n  const {botApi,chatId,text} = SendBotMsgReq.parseMsg(pdu)\n  if(botApi){\n    try {\n      if(botApi.startsWith(\"http\")){\n        const res = await fetch(botApi+\"/message\", {\n          method: \"POST\",\n          headers:{\n            Authorization: `Bearer ${account.getSession()}`,\n          },\n          body:JSON.stringify({\n            text,\n            chatId,\n          })\n        });\n        if(!res || res.status !== 200){\n          return;\n        }\n        // @ts-ignore\n        const json = await res.json();\n        // @ts-ignore\n        return new SendBotMsgRes({text:json.text}).pack().getPbData()\n      }else{\n        const botWs = BotWebSocket.getInstance(chatId!)\n        if(!botWs.isLogged()){\n            await MsgWorker.createWsBot(chatId!,botApi)\n        }\n        const res = await botWs.sendPduWithCallback(new SendBotMsgReq({\n          text,\n          chatId\n        }).pack())\n        return res.getPbData()\n      }\n    }catch (e){\n      console.error(e)\n      return\n    }\n  }\n}\n\nconst handleUpdateCmdReq = async (pdu:Pdu)=>{\n  const {botApi,chatId} = UpdateCmdReq.parseMsg(pdu)\n  if(botApi){\n    try {\n      if(botApi.startsWith(\"http\")){\n        const res = await fetch(botApi+\"/commands\", {\n          method: \"GET\",\n          headers:{\n            Authorization: `Bearer ${account.getSession()}`,\n          }\n        });\n        if(!res || res.status !== 200){\n          return;\n        }\n        // @ts-ignore\n        const {commands} = await res.json();\n        return new UpdateCmdRes({\n          commands\n        }).pack().getPbData()\n      }else{\n        const botWs = BotWebSocket.getInstance(chatId!)\n        if(!botWs.isLogged()){\n          await MsgWorker.createWsBot(chatId!,botApi)\n        }\n        const res = await botWs.sendPduWithCallback(new UpdateCmdReq({\n          chatId\n        }).pack())\n        const {commands} = UpdateCmdRes.parseMsg(res)\n        return new UpdateCmdRes({\n          commands\n        }).pack().getPbData()\n      }\n    }catch (e){\n      console.error(e)\n      return\n    }\n  }\n}\n\nexport async function sendWithCallback(buff:Uint8Array){\n\n  let pdu = new Pdu(Buffer.from(buff))\n  if(DEBUG){\n    console.log(pdu.getCommandId(),getActionCommandsName(pdu.getCommandId()))\n  }\n  switch (pdu.getCommandId()) {\n    case ActionCommands.CID_SendBotMsgReq:\n      return await handleSendBotMsgReq(pdu);\n    case ActionCommands.CID_UpdateCmdReq:\n      return await handleUpdateCmdReq(pdu);\n    case ActionCommands.CID_StopChatStreamReq:\n      return await handleStopChatStreamReq(pdu);\n    case ActionCommands.CID_AuthNativeReq:\n      return await handleAuthNativeReq(pdu);\n    case ActionCommands.CID_GenMsgIdReq:\n      return await MsgWorker.genMsgId(pdu);\n    case ActionCommands.CID_UploadMsgReq:\n      pdu = await MsgWorker.beforeUploadMsgReq(pdu);\n      break\n    case ActionCommands.CID_UploadUserReq:\n      pdu = await MsgWorker.beforeUploadUserReq(pdu);\n      break\n  }\n  if(!account.getSession()){\n    return\n  }\n\n  const res = await fetch(`${CLOUD_MESSAGE_API}/proto`, {\n    method: \"POST\",\n    body: Buffer.from(pdu.getPbData()),\n    headers:{\n      Authorization: `Bearer ${account.getSession()}`,\n    }\n  });\n  if(!res || res.status !== 200){\n    return;\n  }\n  const arrayBuffer = await res.arrayBuffer();\n  let buf = Buffer.from(arrayBuffer);\n  const pduRes = new Pdu(buf)\n  switch (pduRes.getCommandId()) {\n    case ActionCommands.CID_DownloadMsgRes:\n      buf = await MsgWorker.afterDownloadMsgReq(pduRes)\n      break\n    case ActionCommands.CID_DownloadUserRes:\n      buf = await MsgWorker.afterDownloadUserReq(pduRes)\n      break\n  }\n  return buf;\n}\n\n","import type { GroupCallConnectionData } from '../../lib/secret-sauce';\nimport { Api as GramJs, connection } from '../../lib/gramjs';\nimport type {\n  ApiMessage, ApiMessageExtendedMediaPreview, ApiUpdateConnectionStateType, OnApiUpdate,\n} from '../types';\n\nimport { DEBUG, GENERAL_TOPIC_ID } from '../../config';\nimport { omit, pick } from '../../util/iteratees';\nimport { getServerTimeOffset, setServerTimeOffset } from '../../util/serverTime';\nimport {\n  buildApiMessage,\n  buildApiMessageFromShort,\n  buildApiMessageFromShortChat,\n  buildMessageMediaContent,\n  buildMessageTextContent,\n  buildPoll,\n  buildPollResults,\n  buildApiMessageFromNotification,\n  buildMessageDraft,\n  buildMessageReactions,\n  buildApiMessageExtendedMediaPreview,\n} from './apiBuilders/messages';\nimport {\n  buildChatMember,\n  buildChatMembers,\n  buildChatTypingStatus,\n  buildAvatarHash,\n  buildApiChatFromPreview,\n  buildApiChatFolder,\n  buildApiChatSettings,\n} from './apiBuilders/chats';\nimport {\n  buildApiUser,\n  buildApiUserEmojiStatus,\n  buildApiUserStatus,\n} from './apiBuilders/users';\nimport {\n  buildMessageFromUpdate,\n  isMessageWithMedia,\n  buildChatPhotoForLocalDb,\n} from './gramjsBuilders';\nimport localDb from './localDb';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\nimport {\n  addMessageToLocalDb,\n  addEntitiesWithPhotosToLocalDb,\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n  log,\n  swapLocalInvoiceMedia,\n} from './helpers';\nimport {\n  buildApiNotifyException,\n  buildApiNotifyExceptionTopic,\n  buildPrivacyKey,\n  buildPrivacyRules,\n} from './apiBuilders/misc';\nimport { buildApiPhoto, buildApiUsernames } from './apiBuilders/common';\nimport {\n  buildApiGroupCall,\n  buildApiGroupCallParticipant,\n  buildPhoneCall,\n  getGroupCallId,\n} from './apiBuilders/calls';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './apiBuilders/peers';\nimport { buildApiEmojiInteraction, buildStickerSet } from './apiBuilders/symbols';\nimport { buildApiBotMenuButton } from './apiBuilders/bots';\n\ntype Update = (\n  (GramJs.TypeUpdate | GramJs.TypeUpdates) & { _entities?: (GramJs.TypeUser | GramJs.TypeChat)[] }\n) | typeof connection.UpdateConnectionState;\n\nconst DELETE_MISSING_CHANNEL_MESSAGE_DELAY = 1000;\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nconst sentMessageIds = new Set();\n\nfunction dispatchUserAndChatUpdates(entities: (GramJs.TypeUser | GramJs.TypeChat)[]) {\n  entities\n    .filter((e) => e instanceof GramJs.User)\n    .map(buildApiUser)\n    .forEach((user) => {\n      if (!user) {\n        return;\n      }\n\n      onUpdate({\n        '@type': 'updateUser',\n        id: user.id,\n        user,\n      });\n    });\n\n  entities\n    .filter((e) => (\n      e instanceof GramJs.Chat || e instanceof GramJs.ChatForbidden\n      || e instanceof GramJs.Channel || e instanceof GramJs.ChannelForbidden\n    ))\n    .map((e) => buildApiChatFromPreview(e))\n    .forEach((chat) => {\n      if (!chat) {\n        return;\n      }\n\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    });\n}\n\nexport function updater(update: Update, originRequest?: GramJs.AnyRequest) {\n  if (update instanceof connection.UpdateServerTimeOffset) {\n    setServerTimeOffset(update.timeOffset);\n\n    onUpdate({\n      '@type': 'updateServerTimeOffset',\n      serverTimeOffset: update.timeOffset,\n    });\n  } else if (update instanceof connection.UpdateConnectionState) {\n    let connectionState: ApiUpdateConnectionStateType;\n\n    switch (update.state) {\n      case connection.UpdateConnectionState.disconnected:\n        connectionState = 'connectionStateConnecting';\n        break;\n      case connection.UpdateConnectionState.broken:\n        connectionState = 'connectionStateBroken';\n        break;\n      case connection.UpdateConnectionState.connected:\n      default:\n        connectionState = 'connectionStateReady';\n        break;\n    }\n\n    onUpdate({\n      '@type': 'updateConnectionState',\n      connectionState,\n    });\n\n    // Messages\n  } else if (\n    update instanceof GramJs.UpdateNewMessage\n    || update instanceof GramJs.UpdateNewScheduledMessage\n    || update instanceof GramJs.UpdateNewChannelMessage\n    || update instanceof GramJs.UpdateShortChatMessage\n    || update instanceof GramJs.UpdateShortMessage\n  ) {\n    let message: ApiMessage | undefined;\n    let shouldForceReply: boolean | undefined;\n\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    if (update instanceof GramJs.UpdateShortChatMessage) {\n      message = buildApiMessageFromShortChat(update);\n    } else if (update instanceof GramJs.UpdateShortMessage) {\n      message = buildApiMessageFromShort(update);\n    } else {\n      // TODO Remove if proven not reproducing\n      if (update.message instanceof GramJs.MessageEmpty) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error('Unexpected update:', update.className, update);\n        }\n\n        return;\n      }\n\n      if ((update.message instanceof GramJs.Message && isMessageWithMedia(update.message))\n      || (update.message instanceof GramJs.MessageService\n          && update.message.action instanceof GramJs.MessageActionSuggestProfilePhoto)\n      ) {\n        addMessageToLocalDb(update.message);\n      }\n\n      message = buildApiMessage(update.message)!;\n      shouldForceReply = 'replyMarkup' in update.message\n        && update.message?.replyMarkup instanceof GramJs.ReplyKeyboardForceReply\n        && (!update.message.replyMarkup.selective || message.isMentioned);\n    }\n\n    if (update instanceof GramJs.UpdateNewScheduledMessage) {\n      onUpdate({\n        '@type': sentMessageIds.has(message.id) ? 'updateScheduledMessage' : 'newScheduledMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n      });\n    } else {\n      onUpdate({\n        '@type': sentMessageIds.has(message.id) ? 'updateMessage' : 'newMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n        shouldForceReply,\n      });\n    }\n\n    // Some updates to a Chat/Channel don't have a dedicated update class.\n    // We can get info on some updates from Service Messages.\n    if (update.message instanceof GramJs.MessageService) {\n      const { action } = update.message;\n\n      if (action instanceof GramJs.MessageActionPaymentSent) {\n        onUpdate({\n          '@type': 'updatePaymentStateCompleted',\n          slug: action.invoiceSlug,\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n        onUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: {\n            title: action.title,\n          },\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n        const photo = buildChatPhotoForLocalDb(action.photo);\n        const avatarHash = buildAvatarHash(photo);\n\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = photo;\n        }\n        addPhotoToLocalDb(action.photo);\n\n        if (avatarHash) {\n          onUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              avatarHash,\n            },\n            ...(action.photo instanceof GramJs.Photo && { newProfilePhoto: buildApiPhoto(action.photo) }),\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = new GramJs.ChatPhotoEmpty();\n        }\n\n        onUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: { avatarHash: undefined },\n        });\n      } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && e.id === action.userId\n        ))) {\n          onUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              isForbidden: true,\n              isNotJoined: true,\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatAddUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && action.users.includes(e.id)\n        ))) {\n          onUpdate({\n            '@type': 'updateChatJoin',\n            id: message.chatId,\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionGroupCall) {\n        if (!action.duration && action.call) {\n          onUpdate({\n            '@type': 'updateGroupCallChatId',\n            chatId: message.chatId,\n            call: {\n              id: action.call.id.toString(),\n              accessHash: action.call.accessHash.toString(),\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionTopicEdit) {\n        const { replyTo } = update.message;\n        const {\n          replyToMsgId, replyToTopId, forumTopic: isTopicReply,\n        } = replyTo || {};\n        const topicId = !isTopicReply ? GENERAL_TOPIC_ID : replyToTopId || replyToMsgId || GENERAL_TOPIC_ID;\n\n        onUpdate({\n          '@type': 'updateTopic',\n          chatId: getApiChatIdFromMtpPeer(update.message.peerId!),\n          topicId,\n        });\n      } else if (action instanceof GramJs.MessageActionTopicCreate) {\n        onUpdate({\n          '@type': 'updateTopics',\n          chatId: getApiChatIdFromMtpPeer(update.message.peerId!),\n        });\n      }\n    }\n  } else if (\n    update instanceof GramJs.UpdateEditMessage\n    || update instanceof GramJs.UpdateEditChannelMessage\n  ) {\n    // TODO Remove if proven not reproducing\n    if (update.message instanceof GramJs.MessageEmpty) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Unexpected update:', update.className, update);\n      }\n\n      return;\n    }\n\n    if (update.message instanceof GramJs.Message && isMessageWithMedia(update.message)) {\n      addMessageToLocalDb(update.message);\n    }\n\n    // Workaround for a weird server behavior when own message is marked as incoming\n    const message = omit(buildApiMessage(update.message)!, ['isOutgoing']);\n\n    onUpdate({\n      '@type': 'updateMessage',\n      id: message.id,\n      chatId: message.chatId,\n      message,\n    });\n  } else if (update instanceof GramJs.UpdateMessageReactions) {\n    onUpdate({\n      '@type': 'updateMessageReactions',\n      id: update.msgId,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      reactions: buildMessageReactions(update.reactions),\n    });\n  } else if (update instanceof GramJs.UpdateMessageExtendedMedia) {\n    let media: ApiMessage['content'] | undefined;\n    if (update.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n      media = buildMessageMediaContent(update.extendedMedia.media);\n    }\n\n    let preview: ApiMessageExtendedMediaPreview | undefined;\n    if (update.extendedMedia instanceof GramJs.MessageExtendedMediaPreview) {\n      preview = buildApiMessageExtendedMediaPreview(update.extendedMedia);\n    }\n\n    if (!media && !preview) return;\n\n    const chatId = getApiChatIdFromMtpPeer(update.peer);\n\n    swapLocalInvoiceMedia(chatId, update.msgId, update.extendedMedia);\n\n    onUpdate({\n      '@type': 'updateMessageExtendedMedia',\n      id: update.msgId,\n      chatId,\n      media,\n      preview,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteMessages) {\n    onUpdate({\n      '@type': 'deleteMessages',\n      ids: update.messages,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteScheduledMessages) {\n    onUpdate({\n      '@type': 'deleteScheduledMessages',\n      ids: update.messages,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n    });\n  } else if (update instanceof GramJs.UpdateDeleteChannelMessages) {\n    const chatId = buildApiPeerId(update.channelId, 'channel');\n    const ids = update.messages;\n    const existingIds = ids.filter((id) => localDb.messages[`${chatId}-${id}`]);\n    const missingIds = ids.filter((id) => !localDb.messages[`${chatId}-${id}`]);\n    const profilePhotoIds = ids.map((id) => {\n      const message = localDb.messages[`${chatId}-${id}`];\n\n      return message && message instanceof GramJs.MessageService && 'photo' in message.action\n        ? String(message.action.photo.id)\n        : undefined;\n    }).filter(Boolean);\n\n    if (existingIds.length) {\n      onUpdate({\n        '@type': 'deleteMessages',\n        ids: existingIds,\n        chatId,\n      });\n    }\n\n    if (profilePhotoIds.length) {\n      onUpdate({\n        '@type': 'deleteProfilePhotos',\n        ids: profilePhotoIds,\n        chatId,\n      });\n    }\n\n    // For some reason delete message update sometimes comes before new message update\n    if (missingIds.length) {\n      setTimeout(() => {\n        onUpdate({\n          '@type': 'deleteMessages',\n          ids: missingIds,\n          chatId,\n        });\n      }, DELETE_MISSING_CHANNEL_MESSAGE_DELAY);\n    }\n  } else if (update instanceof GramJs.UpdateServiceNotification) {\n    if (update.popup) {\n      onUpdate({\n        '@type': 'error',\n        error: {\n          message: update.message,\n        },\n      });\n    } else {\n      const currentDate = Date.now() / 1000 + getServerTimeOffset();\n      const message = buildApiMessageFromNotification(update, currentDate);\n\n      if (isMessageWithMedia(update)) {\n        addMessageToLocalDb(buildMessageFromUpdate(message.id, message.chatId, update));\n      }\n\n      onUpdate({\n        '@type': 'updateServiceNotification',\n        message,\n      });\n    }\n  } else if ((\n    originRequest instanceof GramJs.messages.SendMessage\n    || originRequest instanceof GramJs.messages.SendMedia\n    || originRequest instanceof GramJs.messages.SendMultiMedia\n    || originRequest instanceof GramJs.messages.ForwardMessages\n  ) && (\n    update instanceof GramJs.UpdateMessageID || update instanceof GramJs.UpdateShortSentMessage\n  )) {\n    let randomId;\n    if ('randomId' in update) {\n      randomId = update.randomId;\n    } else if ('randomId' in originRequest) {\n      randomId = originRequest.randomId;\n    }\n\n    const localMessage = randomId && localDb.localMessages[String(randomId)];\n    if (!localMessage) {\n      throw new Error('Local message not found');\n    }\n\n    let newContent: ApiMessage['content'] | undefined;\n    if (update instanceof GramJs.UpdateShortSentMessage) {\n      if (localMessage.content.text && update.entities) {\n        newContent = {\n          text: buildMessageTextContent(localMessage.content.text.text, update.entities),\n        };\n      }\n      if (update.media) {\n        newContent = {\n          ...newContent,\n          ...buildMessageMediaContent(update.media),\n        };\n      }\n\n      const mtpMessage = buildMessageFromUpdate(update.id, localMessage.chatId, update);\n      if (isMessageWithMedia(mtpMessage)) {\n        addMessageToLocalDb(mtpMessage);\n      }\n    }\n\n    sentMessageIds.add(update.id);\n\n    // Edge case for \"Send When Online\"\n    const isAlreadySent = 'date' in update && update.date * 1000 < Date.now() + getServerTimeOffset() * 1000;\n\n    onUpdate({\n      '@type': localMessage.isScheduled && !isAlreadySent\n        ? 'updateScheduledMessageSendSucceeded'\n        : 'updateMessageSendSucceeded',\n      chatId: localMessage.chatId,\n      localId: localMessage.id,\n      message: {\n        ...localMessage,\n        ...(newContent && {\n          content: {\n            ...localMessage.content,\n            ...newContent,\n          },\n        }),\n        id: update.id,\n        sendingState: undefined,\n        ...('date' in update && { date: update.date }),\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadMessagesContents) {\n    onUpdate({\n      '@type': 'updateCommonBoxMessages',\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChannelReadMessagesContents) {\n    onUpdate({\n      '@type': 'updateChannelMessages',\n      channelId: buildApiPeerId(update.channelId, 'channel'),\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateMessagePoll) {\n    const { pollId, poll, results } = update;\n    if (poll) {\n      const apiPoll = buildPoll(poll, results);\n\n      onUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: apiPoll,\n      });\n    } else {\n      const pollResults = buildPollResults(results);\n      onUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: { results: pollResults },\n      });\n    }\n  } else if (update instanceof GramJs.UpdateMessagePollVote) {\n    onUpdate({\n      '@type': 'updateMessagePollVote',\n      pollId: String(update.pollId),\n      userId: buildApiPeerId(update.userId, 'user'),\n      options: update.options.map(serializeBytes),\n    });\n  } else if (update instanceof GramJs.UpdateChannelMessageViews) {\n    onUpdate({\n      '@type': 'updateMessage',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      id: update.id,\n      message: { views: update.views },\n    });\n\n    // Chats\n  } else if (update instanceof GramJs.UpdateReadHistoryInbox) {\n    onUpdate({\n      '@type': 'updateChatInbox',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadHistoryOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelInbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelDiscussionInbox) {\n    onUpdate({\n      '@type': 'updateThreadInfo',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      threadId: update.topMsgId,\n      threadInfo: {\n        lastReadInboxMessageId: update.readMaxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelDiscussionOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.readMaxId,\n      },\n    });\n  } else if (\n    update instanceof GramJs.UpdateDialogPinned\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateChatPinned',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      isPinned: update.pinned || false,\n    });\n  } else if (update instanceof GramJs.UpdatePinnedDialogs) {\n    const ids = update.order\n      ? update.order\n        .filter((dp): dp is GramJs.DialogPeer => dp instanceof GramJs.DialogPeer)\n        .map((dp) => getApiChatIdFromMtpPeer(dp.peer))\n      : [];\n\n    onUpdate({\n      '@type': 'updatePinnedChatIds',\n      ids,\n      folderId: update.folderId || undefined,\n    });\n  } else if (update instanceof GramJs.UpdateFolderPeers) {\n    update.folderPeers.forEach((folderPeer) => {\n      const { folderId, peer } = folderPeer;\n\n      onUpdate({\n        '@type': 'updateChatListType',\n        id: getApiChatIdFromMtpPeer(peer),\n        folderId,\n      });\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilter) {\n    const { id, filter } = update;\n    const folder = filter instanceof GramJs.DialogFilter ? buildApiChatFolder(filter) : undefined;\n\n    onUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder,\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilterOrder) {\n    onUpdate({\n      '@type': 'updateChatFoldersOrder',\n      orderedIds: update.order,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipants) {\n    const replacedMembers = buildChatMembers(update.participants);\n\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.participants.chatId, 'chat'),\n      replacedMembers,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantAdd) {\n    const addedMember = buildChatMember(\n      pick(update, ['userId', 'inviterId', 'date']) as GramJs.ChatParticipant,\n    );\n\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      addedMember,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantDelete) {\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      deletedMemberId: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (\n    update instanceof GramJs.UpdatePinnedMessages\n    || update instanceof GramJs.UpdatePinnedChannelMessages\n  ) {\n    const chatId = update instanceof GramJs.UpdatePinnedMessages\n      ? getApiChatIdFromMtpPeer(update.peer)\n      : buildApiPeerId(update.channelId, 'channel');\n\n    onUpdate({\n      '@type': 'updatePinnedIds',\n      chatId,\n      messageIds: update.messages,\n      isPinned: update.pinned,\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyPeer\n  ) {\n    onUpdate({\n      '@type': 'updateNotifyExceptions',\n      ...buildApiNotifyException(update.notifySettings, update.peer.peer),\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyForumTopic\n  ) {\n    onUpdate({\n      '@type': 'updateTopicNotifyExceptions',\n      ...buildApiNotifyExceptionTopic(\n        update.notifySettings, update.peer.peer, update.peer.topMsgId,\n      ),\n    });\n  } else if (\n    update instanceof GramJs.UpdateUserTyping\n    || update instanceof GramJs.UpdateChatUserTyping\n  ) {\n    const id = update instanceof GramJs.UpdateUserTyping\n      ? buildApiPeerId(update.userId, 'user')\n      : buildApiPeerId(update.chatId, 'chat');\n\n    if (update.action instanceof GramJs.SendMessageEmojiInteraction) {\n      onUpdate({\n        '@type': 'updateStartEmojiInteraction',\n        id,\n        emoji: update.action.emoticon,\n        messageId: update.action.msgId,\n        interaction: buildApiEmojiInteraction(JSON.parse(update.action.interaction.data)),\n      });\n    } else {\n      onUpdate({\n        '@type': 'updateChatTypingStatus',\n        id,\n        typingStatus: buildChatTypingStatus(update),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateChannelUserTyping) {\n    const id = buildApiPeerId(update.channelId, 'channel');\n\n    onUpdate({\n      '@type': 'updateChatTypingStatus',\n      id,\n      threadId: update.topMsgId,\n      typingStatus: buildChatTypingStatus(update),\n    });\n  } else if (update instanceof GramJs.UpdateChannel) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities } = update;\n    if (!_entities) {\n      return;\n    }\n\n    const channel = _entities.find((e): e is GramJs.Channel | GramJs.ChannelForbidden => (\n      e instanceof GramJs.Channel || e instanceof GramJs.ChannelForbidden\n    ));\n\n    if (channel instanceof GramJs.Channel) {\n      const chat = buildApiChatFromPreview(channel);\n      if (chat) {\n        onUpdate({\n          '@type': 'updateChat',\n          id: chat.id,\n          chat,\n        });\n\n        onUpdate({\n          '@type': chat.isNotJoined ? 'updateChatLeave' : 'updateChatJoin',\n          id: buildApiPeerId(update.channelId, 'channel'),\n        });\n      }\n    } else if (channel instanceof GramJs.ChannelForbidden) {\n      const chatId = buildApiPeerId(update.channelId, 'channel');\n\n      onUpdate({\n        '@type': 'updateChat',\n        id: chatId,\n        chat: {\n          isRestricted: true,\n        },\n      });\n\n      onUpdate({\n        '@type': 'updateChatLeave',\n        id: chatId,\n      });\n    } else if (_entities.length === 0) {\n      // The link to the discussion group may have been changed.\n      // No corresponding update available at this moment https://core.telegram.org/type/Updates\n      onUpdate({\n        '@type': 'resetMessages',\n        id: buildApiPeerId(update.channelId, 'channel'),\n      });\n    }\n  } else if (\n    update instanceof GramJs.UpdateDialogUnreadMark\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      chat: {\n        hasUnreadMark: update.unread,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChatDefaultBannedRights) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        defaultBannedRights: omitVirtualClassFields(update.defaultBannedRights),\n      },\n    });\n\n    // Users\n  } else if (update instanceof GramJs.UpdateUserStatus) {\n    onUpdate({\n      '@type': 'updateUserStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      status: buildApiUserStatus(update.status),\n    });\n  } else if (update instanceof GramJs.UpdateUser) {\n    onUpdate({\n      '@type': 'updateRequestUserUpdate',\n      id: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (update instanceof GramJs.UpdateUserEmojiStatus) {\n    const emojiStatus = buildApiUserEmojiStatus(update.emojiStatus);\n    onUpdate({\n      '@type': 'updateUserEmojiStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      emojiStatus,\n    });\n  } else if (update instanceof GramJs.UpdateUserName) {\n    const apiUserId = buildApiPeerId(update.userId, 'user');\n    const updatedUser = localDb.users[apiUserId];\n\n    const user = updatedUser?.mutualContact && !updatedUser.self\n      ? pick(update, [])\n      : pick(update, ['firstName', 'lastName']);\n\n    const usernames = buildApiUsernames(update);\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: apiUserId,\n      user: {\n        ...user,\n        usernames,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateUserPhone) {\n    const { userId, phone } = update;\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: buildApiPeerId(userId, 'user'),\n      user: { phoneNumber: phone },\n    });\n  } else if (update instanceof GramJs.UpdatePeerSettings) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities, settings } = update;\n    if (!_entities) {\n      return;\n    }\n\n    if (_entities?.length) {\n      _entities\n        .filter((e) => e instanceof GramJs.User && !e.contact)\n        .forEach((user) => {\n          onUpdate({\n            '@type': 'deleteContact',\n            id: buildApiPeerId(user.id, 'user'),\n          });\n        });\n\n      _entities\n        .filter((e) => e instanceof GramJs.User && e.contact)\n        .map(buildApiUser)\n        .forEach((user) => {\n          if (!user) {\n            return;\n          }\n\n          onUpdate({\n            '@type': 'updateUser',\n            id: user.id,\n            user: {\n              ...user,\n              ...(settings && { settings: buildApiChatSettings(settings) }),\n            },\n          });\n        });\n    }\n\n    // Settings\n  } else if (update instanceof GramJs.UpdateNotifySettings) {\n    const {\n      notifySettings: {\n        showPreviews, silent, muteUntil,\n      },\n      peer: { className },\n    } = update;\n\n    const peerType = className === 'NotifyUsers'\n      ? 'contact'\n      : (className === 'NotifyChats'\n        ? 'group'\n        : (className === 'NotifyBroadcasts'\n          ? 'broadcast'\n          : undefined\n        )\n      );\n\n    if (!peerType) {\n      return;\n    }\n\n    onUpdate({\n      '@type': 'updateNotifySettings',\n      peerType,\n      isSilent: Boolean(silent\n        || (typeof muteUntil === 'number' && Date.now() + getServerTimeOffset() * 1000 < muteUntil * 1000)),\n      shouldShowPreviews: Boolean(showPreviews),\n    });\n  } else if (update instanceof GramJs.UpdatePeerBlocked) {\n    onUpdate({\n      '@type': 'updatePeerBlocked',\n      id: getApiChatIdFromMtpPeer(update.peerId),\n      isBlocked: update.blocked,\n    });\n  } else if (update instanceof GramJs.UpdatePrivacy) {\n    const key = buildPrivacyKey(update.key);\n    if (key) {\n      onUpdate({\n        '@type': 'updatePrivacy',\n        key,\n        rules: buildPrivacyRules(update.rules),\n      });\n    }\n\n    // Misc\n  } else if (update instanceof GramJs.UpdateDraftMessage) {\n    onUpdate({\n      '@type': 'draftMessage',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      threadId: update.topMsgId,\n      ...buildMessageDraft(update.draft),\n    });\n  } else if (update instanceof GramJs.UpdateContactsReset) {\n    onUpdate({ '@type': 'updateResetContactList' });\n  } else if (update instanceof GramJs.UpdateFavedStickers) {\n    onUpdate({ '@type': 'updateFavoriteStickers' });\n  } else if (update instanceof GramJs.UpdateRecentStickers) {\n    onUpdate({ '@type': 'updateRecentStickers' });\n  } else if (update instanceof GramJs.UpdateMoveStickerSetToTop) {\n    if (!update.masks) {\n      onUpdate({\n        '@type': 'updateMoveStickerSetToTop',\n        isCustomEmoji: update.emojis,\n        id: update.stickerset.toString(),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateStickerSets) {\n    onUpdate({ '@type': 'updateStickerSets' });\n  } else if (update instanceof GramJs.UpdateStickerSetsOrder) {\n    if (!update.masks) {\n      onUpdate({\n        '@type': 'updateStickerSetsOrder',\n        order: update.order.map((n) => n.toString()),\n        isCustomEmoji: update.emojis,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateNewStickerSet) {\n    if (update.stickerset instanceof GramJs.messages.StickerSet) {\n      const stickerSet = buildStickerSet(update.stickerset.set);\n      onUpdate({\n        '@type': 'updateStickerSet',\n        id: stickerSet.id,\n        stickerSet,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateSavedGifs) {\n    onUpdate({ '@type': 'updateSavedGifs' });\n  } else if (update instanceof GramJs.UpdateGroupCall) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateGroupCall',\n      call: buildApiGroupCall(update.call),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallConnection) {\n    onUpdate({\n      '@type': 'updateGroupCallConnection',\n      data: JSON.parse(update.params.data) as GroupCallConnectionData,\n      presentation: Boolean(update.presentation),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallParticipants) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateGroupCallParticipants',\n      groupCallId: getGroupCallId(update.call),\n      participants: update.participants.map(buildApiGroupCallParticipant),\n    });\n  } else if (update instanceof GramJs.UpdatePendingJoinRequests) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updatePendingJoinRequests',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      recentRequesterIds: update.recentRequesters.map((id) => buildApiPeerId(id, 'user')),\n      requestsPending: update.requestsPending,\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCall) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updatePhoneCall',\n      call: buildPhoneCall(update.phoneCall),\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCallSignalingData) {\n    onUpdate({\n      '@type': 'updatePhoneCallSignalingData',\n      callId: update.phoneCallId.toString(),\n      data: Array.from(update.data),\n    });\n  } else if (update instanceof GramJs.UpdateWebViewResultSent) {\n    const { queryId } = update;\n\n    onUpdate({\n      '@type': 'updateWebViewResultSent',\n      queryId: queryId.toString(),\n    });\n  } else if (update instanceof GramJs.UpdateBotMenuButton) {\n    const {\n      botId,\n      button,\n    } = update;\n\n    const id = buildApiPeerId(botId, 'user');\n\n    onUpdate({\n      '@type': 'updateBotMenuButton',\n      botId: id,\n      button: buildApiBotMenuButton(button),\n    });\n  } else if (update instanceof GramJs.UpdateTranscribedAudio) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateTranscribedAudio',\n      transcriptionId: update.transcriptionId.toString(),\n      text: update.text,\n      isPending: update.pending,\n    });\n  } else if (update instanceof GramJs.UpdateConfig) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n    onUpdate({ '@type': 'updateConfig' });\n  } else if (update instanceof GramJs.UpdateChannelPinnedTopic) {\n    onUpdate({\n      '@type': 'updatePinnedTopic',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      topicId: update.topicId,\n      isPinned: Boolean(update.pinned),\n    });\n  } else if (update instanceof GramJs.UpdateChannelPinnedTopics) {\n    onUpdate({\n      '@type': 'updatePinnedTopicsOrder',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      order: update.order || [],\n    });\n  } else if (update instanceof GramJs.UpdateRecentEmojiStatuses) {\n    onUpdate({ '@type': 'updateRecentEmojiStatuses' });\n  } else if (DEBUG) {\n    const params = typeof update === 'object' && 'className' in update ? update.className : update;\n    log('UNEXPECTED UPDATE', params);\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { LoadChatsReq_Type } from './types';\n\nexport default class LoadChatsReq extends BaseMsg {\n  public msg?: LoadChatsReq_Type\n  constructor(msg?: LoadChatsReq_Type) {\n    super('PTP.Chats.LoadChatsReq', msg);\n    this.setCommandId(ActionCommands.CID_LoadChatsReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): LoadChatsReq_Type {\n    return new LoadChatsReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { LoadChatsRes_Type } from './types';\n\nexport default class LoadChatsRes extends BaseMsg {\n  public msg?: LoadChatsRes_Type\n  constructor(msg?: LoadChatsRes_Type) {\n    super('PTP.Chats.LoadChatsRes', msg);\n    this.setCommandId(ActionCommands.CID_LoadChatsRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): LoadChatsRes_Type {\n    return new LoadChatsRes().decode(pdu.body());\n  }\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  OnApiUpdate,\n  ApiChat,\n  ApiMessage,\n  ApiUser,\n  ApiMessageEntity,\n  ApiFormattedText,\n  ApiChatFullInfo,\n  ApiChatFolder,\n  ApiChatBannedRights,\n  ApiChatAdminRights,\n  ApiGroupCall,\n  ApiUserStatus,\n  ApiPhoto,\n  ApiTopic,\n  ApiChatReactions,\n} from '../../types';\n\nimport {\n  DEBUG,\n  ARCHIVED_FOLDER_ID,\n  MEMBERS_LOAD_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  ALL_FOLDER_ID,\n  MAX_INT_32,\n  TOPICS_SLICE,\n  GENERAL_TOPIC_ID, CHAT_LIST_LOAD_SLICE,\n} from '../../../config';\nimport {getClient, invokeRequest, uploadFile} from './client';\nimport {\n  buildApiChatFromDialog,\n  getPeerKey,\n  buildChatMembers,\n  buildApiChatFromPreview,\n  buildApiChatFolder,\n  buildApiChatFolderFromSuggested,\n  buildApiChatBotCommands,\n  buildApiChatSettings,\n  buildApiChatReactions,\n  buildApiTopic,\n} from '../apiBuilders/chats';\nimport { buildApiMessage, buildMessageDraft } from '../apiBuilders/messages';\nimport { buildApiUser, buildApiUsersAndStatuses } from '../apiBuilders/users';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  buildInputEntity,\n  buildInputPeer,\n  buildMtpMessageEntity,\n  buildFilterFromApiFolder,\n  isMessageWithMedia,\n  buildChatBannedRights,\n  buildChatAdminRights,\n  buildInputChatReactions,\n  buildInputPhoto,\n  generateRandomBigInt,\n} from '../gramjsBuilders';\nimport { addEntitiesWithPhotosToLocalDb, addMessageToLocalDb, addPhotoToLocalDb } from '../helpers';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport { buildApiPhoto } from '../apiBuilders/common';\nimport { buildStickerSet } from '../apiBuilders/symbols';\nimport localDb from '../localDb';\nimport Account from \"../../../worker/share/Account\";\nimport {LoadChatsReq, LoadChatsRes} from \"../../../lib/ptp/protobuf/PTPChats\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\n\ntype FullChatData = {\n  fullInfo: ApiChatFullInfo;\n  users?: ApiUser[];\n  userStatusesById: { [userId: string]: ApiUserStatus };\n  groupCall?: Partial<ApiGroupCall>;\n  membersCount?: number;\n};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchChats({\n  limit,\n  offsetDate,\n  archived,\n  withPinned,\n  lastLocalServiceMessage,\n}: {\n  limit: number;\n  offsetDate?: number;\n  archived?: boolean;\n  withPinned?: boolean;\n  lastLocalServiceMessage?: ApiMessage;\n}) {\n  const loadChatsRes = await Account.getCurrentAccount()?.sendPduWithCallback(new LoadChatsReq({\n    limit,\n    offsetDate,\n    archived,\n    withPinned,\n  }).pack())\n\n  if(!loadChatsRes){\n    return;\n  }\n  const res = LoadChatsRes.parseMsg(loadChatsRes);\n  if (!res || res.err !== ERR.NO_ERROR) {\n    return;\n  }\n  const result = JSON.parse(res.payload);\n  console.log('[LoadChatsRes]',result)\n  return result;\n  //\n  // const result = await invokeRequest(new GramJs.messages.GetDialogs({\n  //   offsetPeer: new GramJs.InputPeerEmpty(),\n  //   limit,\n  //   offsetDate,\n  //   folderId: archived ? ARCHIVED_FOLDER_ID : undefined,\n  //   ...(withPinned && { excludePinned: true }),\n  // }));\n  // const resultPinned = withPinned\n  //   ? await invokeRequest(new GramJs.messages.GetPinnedDialogs({\n  //     folderId: archived ? ARCHIVED_FOLDER_ID : undefined,\n  //   }))\n  //   : undefined;\n  //\n  // if (!result || result instanceof GramJs.messages.DialogsNotModified) {\n  //   return undefined;\n  // }\n  //\n  // if (resultPinned) {\n  //   updateLocalDb(resultPinned);\n  // }\n  // updateLocalDb(result);\n  //\n  // const lastMessagesByChatId = buildCollectionByKey(\n  //   (resultPinned ? resultPinned.messages : []).concat(result.messages)\n  //     .map(buildApiMessage)\n  //     .filter(Boolean),\n  //   'chatId',\n  // );\n  //\n  // const peersByKey = preparePeers(result);\n  // if (resultPinned) {\n  //   Object.assign(peersByKey, preparePeers(resultPinned, peersByKey));\n  // }\n  //\n  // const chats: ApiChat[] = [];\n  // const draftsById: Record<string, ApiFormattedText> = {};\n  // const replyingToById: Record<string, number> = {};\n  //\n  // const dialogs = (resultPinned ? resultPinned.dialogs : []).concat(result.dialogs);\n  //\n  // const orderedPinnedIds: string[] = [];\n  //\n  // dialogs.forEach((dialog) => {\n  //   if (\n  //     !(dialog instanceof GramJs.Dialog)\n  //     // This request can return dialogs not belonging to specified folder\n  //     || (!archived && dialog.folderId === ARCHIVED_FOLDER_ID)\n  //     || (archived && dialog.folderId !== ARCHIVED_FOLDER_ID)\n  //   ) {\n  //     return;\n  //   }\n  //\n  //   const peerEntity = peersByKey[getPeerKey(dialog.peer)];\n  //   const chat = buildApiChatFromDialog(dialog, peerEntity);\n  //\n  //   if (\n  //     chat.id === SERVICE_NOTIFICATIONS_USER_ID\n  //     && lastLocalServiceMessage\n  //     && (!lastMessagesByChatId[chat.id] || lastLocalServiceMessage.date > lastMessagesByChatId[chat.id].date)\n  //   ) {\n  //     chat.lastMessage = lastLocalServiceMessage;\n  //   } else {\n  //     chat.lastMessage = lastMessagesByChatId[chat.id];\n  //   }\n  //\n  //   chat.isListed = true;\n  //\n  //   chats.push(chat);\n  //\n  //   if (withPinned && dialog.pinned) {\n  //     orderedPinnedIds.push(chat.id);\n  //   }\n  //\n  //   if (dialog.draft) {\n  //     const { formattedText, replyingToId } = buildMessageDraft(dialog.draft) || {};\n  //     if (formattedText) {\n  //       draftsById[chat.id] = formattedText;\n  //     }\n  //     if (replyingToId) {\n  //       replyingToById[chat.id] = replyingToId;\n  //     }\n  //   }\n  // });\n  //\n  // const chatIds = chats.map((chat) => chat.id);\n  //\n  // const { users, userStatusesById } = buildApiUsersAndStatuses((resultPinned?.users || []).concat(result.users));\n  //\n  // let totalChatCount: number;\n  // if (result instanceof GramJs.messages.DialogsSlice) {\n  //   totalChatCount = result.count;\n  // } else {\n  //   totalChatCount = chatIds.length;\n  // }\n  //\n  // return {\n  //   chatIds,\n  //   chats,\n  //   users,\n  //   userStatusesById,\n  //   draftsById,\n  //   replyingToById,\n  //   orderedPinnedIds: withPinned ? orderedPinnedIds : undefined,\n  //   totalChatCount,\n  // };\n}\n\nexport function fetchFullChat(chat: ApiChat) {\n  const { id, accessHash, adminRights } = chat;\n\n  const input = buildInputEntity(id, accessHash);\n\n  return input instanceof GramJs.InputChannel\n    ? getFullChannelInfo(id, accessHash!, adminRights)\n    : getFullChatInfo(id);\n}\n\nexport async function fetchChatSettings(chat: ApiChat) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPeerSettings({\n    peer: buildInputPeer(id, accessHash),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    settings: buildApiChatSettings(result.settings),\n  };\n}\n\nexport async function searchChats({ query }: { query: string }) {\n  const result = await invokeRequest(new GramJs.contacts.Search({ q: query }));\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const localPeerIds = result.myResults.map(getApiChatIdFromMtpPeer);\n  const allChats = result.chats.concat(result.users)\n    .map((user) => buildApiChatFromPreview(user))\n    .filter(Boolean);\n  const allUsers = result.users.map(buildApiUser).filter((user) => Boolean(user) && !user.isSelf) as ApiUser[];\n\n  return {\n    localChats: allChats.filter((r) => localPeerIds.includes(r.id)),\n    localUsers: allUsers.filter((u) => localPeerIds.includes(u.id)),\n    globalChats: allChats.filter((r) => !localPeerIds.includes(r.id)),\n    globalUsers: allUsers.filter((u) => !localPeerIds.includes(u.id)),\n  };\n}\n\nexport async function fetchChat({\n  type, user,\n}: {\n  type: 'user' | 'self' | 'support'; user?: ApiUser;\n}) {\n  let mtpUser: GramJs.User | undefined;\n\n  if (type === 'self' || type === 'user') {\n    const result = await invokeRequest(new GramJs.users.GetUsers({\n      id: [\n        type === 'user' && user\n          ? buildInputEntity(user.id, user.accessHash) as GramJs.InputUser\n          : new GramJs.InputUserSelf(),\n      ],\n    }));\n    if (!result || !result.length) {\n      return undefined;\n    }\n\n    [mtpUser] = result;\n  } else if (type === 'support') {\n    const result = await invokeRequest(new GramJs.help.GetSupport());\n    if (!result || !result.user) {\n      return undefined;\n    }\n\n    mtpUser = result.user;\n  }\n\n  const chat = buildApiChatFromPreview(mtpUser!, type === 'support');\n  if (!chat) {\n    return undefined;\n  }\n\n  onUpdate({\n    '@type': 'updateChat',\n    id: chat.id,\n    chat,\n  });\n\n  return { chatId: chat.id };\n}\n\nexport async function requestChatUpdate({\n  chat,\n  lastLocalMessage,\n  noLastMessage,\n}: {\n  chat: ApiChat; lastLocalMessage?: ApiMessage; noLastMessage?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPeerDialogs({\n    peers: [new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    })],\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  const dialog = result.dialogs[0];\n  if (!dialog || !(dialog instanceof GramJs.Dialog)) {\n    return;\n  }\n\n  const peersByKey = preparePeers(result);\n  const peerEntity = peersByKey[getPeerKey(dialog.peer)];\n  if (!peerEntity) {\n    return;\n  }\n\n  updateLocalDb(result);\n\n  const lastRemoteMessage = buildApiMessage(result.messages[0]);\n  const lastMessage = lastLocalMessage && (!lastRemoteMessage || (lastLocalMessage.date > lastRemoteMessage.date))\n    ? lastLocalMessage\n    : lastRemoteMessage;\n\n  onUpdate({\n    '@type': 'updateChat',\n    id,\n    chat: {\n      ...buildApiChatFromDialog(dialog, peerEntity),\n      ...(!noLastMessage && { lastMessage }),\n    },\n  });\n}\n\nexport function saveDraft({\n  chat,\n  text,\n  entities,\n  threadId,\n  replyToMsgId,\n}: {\n  chat: ApiChat;\n  text: string;\n  entities?: ApiMessageEntity[];\n  threadId?: number;\n  replyToMsgId?: number;\n}) {\n  return invokeRequest(new GramJs.messages.SaveDraft({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    message: text,\n    ...(entities && {\n      entities: entities.map(buildMtpMessageEntity),\n    }),\n    replyToMsgId,\n    topMsgId: threadId,\n  }));\n}\n\nexport function clearDraft(chat: ApiChat, threadId?: number) {\n  return invokeRequest(new GramJs.messages.SaveDraft({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    message: '',\n    ...(threadId && { topMsgId: threadId }),\n  }));\n}\n\nasync function getFullChatInfo(chatId: string): Promise<FullChatData | undefined> {\n  const result = await invokeRequest(new GramJs.messages.GetFullChat({\n    chatId: buildInputEntity(chatId) as BigInt.BigInteger,\n  }));\n\n  if (!result || !(result.fullChat instanceof GramJs.ChatFull)) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const {\n    about,\n    participants,\n    exportedInvite,\n    botInfo,\n    call,\n    availableReactions,\n    recentRequesters,\n    requestsPending,\n    chatPhoto,\n  } = result.fullChat;\n\n  if (chatPhoto instanceof GramJs.Photo) {\n    localDb.photos[chatPhoto.id.toString()] = chatPhoto;\n  }\n\n  const members = buildChatMembers(participants);\n  const adminMembers = members ? members.filter(({ isAdmin, isOwner }) => isAdmin || isOwner) : undefined;\n  const botCommands = botInfo ? buildApiChatBotCommands(botInfo) : undefined;\n  const inviteLink = exportedInvite instanceof GramJs.ChatInviteExported ? exportedInvite.link : undefined;\n  const { users, userStatusesById } = buildApiUsersAndStatuses(result.users);\n\n  return {\n    fullInfo: {\n      ...(chatPhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(chatPhoto) }),\n      about,\n      members,\n      adminMembersById: adminMembers ? buildCollectionByKey(adminMembers, 'userId') : undefined,\n      canViewMembers: true,\n      botCommands,\n      inviteLink,\n      groupCallId: call?.id.toString(),\n      enabledReactions: buildApiChatReactions(availableReactions),\n      requestsPending,\n      recentRequesterIds: recentRequesters?.map((userId) => buildApiPeerId(userId, 'user')),\n    },\n    users,\n    userStatusesById,\n    groupCall: call ? {\n      chatId,\n      isLoaded: false,\n      id: call.id.toString(),\n      accessHash: call.accessHash.toString(),\n      connectionState: 'disconnected',\n      participantsCount: 0,\n      version: 0,\n      participants: {},\n    } : undefined,\n    membersCount: members?.length,\n  };\n}\n\nasync function getFullChannelInfo(\n  id: string,\n  accessHash: string,\n  adminRights?: ApiChatAdminRights,\n): Promise<FullChatData | undefined> {\n  const result = await invokeRequest(new GramJs.channels.GetFullChannel({\n    channel: buildInputEntity(id, accessHash) as GramJs.InputChannel,\n  }));\n\n  if (!result || !(result.fullChat instanceof GramJs.ChannelFull)) {\n    return undefined;\n  }\n\n  const {\n    about,\n    onlineCount,\n    exportedInvite,\n    slowmodeSeconds,\n    slowmodeNextSendDate,\n    migratedFromChatId,\n    migratedFromMaxId,\n    canViewParticipants,\n    canViewStats,\n    linkedChatId,\n    hiddenPrehistory,\n    call,\n    botInfo,\n    availableReactions,\n    defaultSendAs,\n    requestsPending,\n    recentRequesters,\n    statsDc,\n    participantsCount,\n    stickerset,\n    chatPhoto,\n    participantsHidden,\n  } = result.fullChat;\n\n  if (chatPhoto instanceof GramJs.Photo) {\n    localDb.photos[chatPhoto.id.toString()] = chatPhoto;\n  }\n\n  const inviteLink = exportedInvite instanceof GramJs.ChatInviteExported\n    ? exportedInvite.link\n    : undefined;\n\n  const { members, users, userStatusesById } = (canViewParticipants && await fetchMembers(id, accessHash)) || {};\n  const { members: kickedMembers, users: bannedUsers, userStatusesById: bannedStatusesById } = (\n    canViewParticipants && adminRights && await fetchMembers(id, accessHash, 'kicked')\n  ) || {};\n  const { members: adminMembers, users: adminUsers, userStatusesById: adminStatusesById } = (\n    canViewParticipants && await fetchMembers(id, accessHash, 'admin')\n  ) || {};\n  const botCommands = botInfo ? buildApiChatBotCommands(botInfo) : undefined;\n\n  if (result?.chats?.length > 1) {\n    updateLocalDb(result);\n\n    const [, mtpLinkedChat] = result.chats;\n    const chat = buildApiChatFromPreview(mtpLinkedChat);\n    if (chat) {\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    }\n  }\n\n  const statusesById = {\n    ...userStatusesById,\n    ...bannedStatusesById,\n    ...adminStatusesById,\n  };\n\n  return {\n    fullInfo: {\n      ...(chatPhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(chatPhoto) }),\n      about,\n      onlineCount,\n      inviteLink,\n      slowMode: slowmodeSeconds ? {\n        seconds: slowmodeSeconds,\n        nextSendDate: slowmodeNextSendDate,\n      } : undefined,\n      migratedFrom: migratedFromChatId ? {\n        chatId: buildApiPeerId(migratedFromChatId, 'chat'),\n        maxMessageId: migratedFromMaxId,\n      } : undefined,\n      canViewMembers: canViewParticipants,\n      canViewStatistics: canViewStats,\n      isPreHistoryHidden: hiddenPrehistory,\n      members,\n      kickedMembers,\n      adminMembersById: adminMembers ? buildCollectionByKey(adminMembers, 'userId') : undefined,\n      groupCallId: call ? String(call.id) : undefined,\n      linkedChatId: linkedChatId ? buildApiPeerId(linkedChatId, 'chat') : undefined,\n      botCommands,\n      enabledReactions: buildApiChatReactions(availableReactions),\n      sendAsId: defaultSendAs ? getApiChatIdFromMtpPeer(defaultSendAs) : undefined,\n      requestsPending,\n      recentRequesterIds: recentRequesters?.map((userId) => buildApiPeerId(userId, 'user')),\n      statisticsDcId: statsDc,\n      stickerSet: stickerset ? buildStickerSet(stickerset) : undefined,\n      areParticipantsHidden: participantsHidden,\n    },\n    users: [...(users || []), ...(bannedUsers || []), ...(adminUsers || [])],\n    userStatusesById: statusesById,\n    groupCall: call ? {\n      chatId: id,\n      isLoaded: false,\n      id: call.id.toString(),\n      accessHash: call?.accessHash.toString(),\n      participants: {},\n      version: 0,\n      participantsCount: 0,\n      connectionState: 'disconnected',\n    } : undefined,\n    membersCount: participantsCount,\n  };\n}\n\nexport async function updateChatMutedState({\n  chat, isMuted,\n}: {\n  chat: ApiChat; isMuted: boolean;\n}) {\n  await invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer: new GramJs.InputNotifyPeer({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n    }),\n    settings: new GramJs.InputPeerNotifySettings({ muteUntil: isMuted ? MAX_INT_32 : 0 }),\n  }));\n\n  onUpdate({\n    '@type': 'updateNotifyExceptions',\n    chatId: chat.id,\n    isMuted,\n  });\n\n  void requestChatUpdate({\n    chat,\n    noLastMessage: true,\n  });\n}\n\nexport async function updateTopicMutedState({\n  chat, topicId, isMuted,\n}: {\n  chat: ApiChat; topicId: number; isMuted: boolean;\n}) {\n  await invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer: new GramJs.InputNotifyForumTopic({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      topMsgId: topicId,\n    }),\n    settings: new GramJs.InputPeerNotifySettings({ muteUntil: isMuted ? MAX_INT_32 : 0 }),\n  }));\n\n  onUpdate({\n    '@type': 'updateTopicNotifyExceptions',\n    chatId: chat.id,\n    topicId,\n    isMuted,\n  });\n\n  // TODO[forums] Request forum topic thread update\n}\n\nexport async function createChannel({\n  title, about = '', users,\n}: {\n  title: string; about?: string; users?: ApiUser[];\n}, noErrorUpdate = false): Promise<ApiChat | undefined> {\n  const result = await invokeRequest(new GramJs.channels.CreateChannel({\n    broadcast: true,\n    title,\n    about,\n  }), undefined, true);\n\n  // `createChannel` can return a lot of different update types according to docs,\n  // but currently channel creation returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected channel creation update', result);\n    }\n    return undefined;\n  }\n\n  const newChannel = result.chats[0];\n  if (!newChannel || !(newChannel instanceof GramJs.Channel)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Created channel not found', result);\n    }\n    return undefined;\n  }\n\n  const channel = buildApiChatFromPreview(newChannel)!;\n\n  if (users?.length) {\n    try {\n      await invokeRequest(new GramJs.channels.InviteToChannel({\n        channel: buildInputEntity(channel.id, channel.accessHash) as GramJs.InputChannel,\n        users: users.map(({ id, accessHash }) => buildInputEntity(id, accessHash)) as GramJs.InputUser[],\n      }), undefined, noErrorUpdate);\n    } catch (err) {\n      // `noErrorUpdate` will cause an exception which we don't want either\n    }\n  }\n\n  return channel;\n}\n\nexport function joinChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.JoinChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), true, true);\n}\n\nexport function deleteChatUser({\n  chat, user,\n}: {\n  chat: ApiChat; user: ApiUser;\n}) {\n  if (chat.type !== 'chatTypeBasicGroup') return undefined;\n  return invokeRequest(new GramJs.messages.DeleteChatUser({\n    chatId: buildInputEntity(chat.id, chat.accessHash) as BigInt.BigInteger,\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n  }), true);\n}\n\nexport function deleteChat({\n  chatId,\n}: {\n  chatId: string;\n}) {\n  return invokeRequest(new GramJs.messages.DeleteChat({\n    chatId: buildInputEntity(chatId) as BigInt.BigInteger,\n  }), true);\n}\n\nexport function leaveChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.LeaveChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), true);\n}\n\nexport function deleteChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.DeleteChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), true);\n}\n\nexport async function createGroupChat({\n  title, users,\n}: {\n  title: string; users: ApiUser[];\n}): Promise<ApiChat | undefined> {\n  const result = await invokeRequest(new GramJs.messages.CreateChat({\n    title,\n    users: users.map(({ id, accessHash }) => buildInputEntity(id, accessHash)) as GramJs.InputUser[],\n  }), undefined, true);\n\n  // `createChat` can return a lot of different update types according to docs,\n  // but currently chat creation returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected chat creation update', result);\n    }\n    return undefined;\n  }\n\n  const newChat = result.chats[0];\n  if (!newChat || !(newChat instanceof GramJs.Chat)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Created chat not found', result);\n    }\n    return undefined;\n  }\n\n  return buildApiChatFromPreview(newChat);\n}\n\nexport async function editChatPhoto({\n  chatId, accessHash, photo,\n}: {\n  chatId: string; accessHash?: string; photo?: File | ApiPhoto;\n}) {\n  const inputEntity = buildInputEntity(chatId, accessHash);\n  let inputPhoto: GramJs.TypeInputChatPhoto;\n  if (photo instanceof File) {\n    const uploadedPhoto = await uploadFile(photo);\n    inputPhoto = new GramJs.InputChatUploadedPhoto({\n      file: uploadedPhoto,\n    });\n  } else if (photo) {\n    const photoId = buildInputPhoto(photo);\n    if (!photoId) return false;\n    inputPhoto = new GramJs.InputChatPhoto({\n      id: photoId,\n    });\n  } else {\n    inputPhoto = new GramJs.InputChatPhotoEmpty();\n  }\n  return invokeRequest(\n    inputEntity instanceof GramJs.InputChannel\n      ? new GramJs.channels.EditPhoto({\n        channel: inputEntity as GramJs.InputChannel,\n        photo: inputPhoto,\n      })\n      : new GramJs.messages.EditChatPhoto({\n        chatId: inputEntity as BigInt.BigInteger,\n        photo: inputPhoto,\n      }),\n    true,\n  );\n}\n\nexport async function toggleChatPinned({\n  chat,\n  shouldBePinned,\n}: {\n  chat: ApiChat;\n  shouldBePinned: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.ToggleDialogPin({\n    peer: new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    }),\n    pinned: shouldBePinned || undefined,\n  }));\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChatPinned',\n      id: chat.id,\n      isPinned: shouldBePinned,\n    });\n  }\n}\n\nexport function toggleChatArchived({\n  chat, folderId,\n}: {\n  chat: ApiChat; folderId: number;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.folders.EditPeerFolders({\n    folderPeers: [new GramJs.InputFolderPeer({\n      peer: buildInputPeer(id, accessHash),\n      folderId,\n    })],\n  }), true);\n}\n\nexport async function fetchChatFolders() {\n  const result = await invokeRequest(new GramJs.messages.GetDialogFilters());\n\n  if (!result) {\n    return undefined;\n  }\n\n  const defaultFolderPosition = result.findIndex((folder) => folder instanceof GramJs.DialogFilterDefault);\n  const dialogFilters = result.filter((df): df is GramJs.DialogFilter => df instanceof GramJs.DialogFilter);\n  const orderedIds = dialogFilters.map(({ id }) => id);\n  if (defaultFolderPosition !== -1) {\n    orderedIds.splice(defaultFolderPosition, 0, ALL_FOLDER_ID);\n  }\n  return {\n    byId: buildCollectionByKey(\n      dialogFilters\n        .map(buildApiChatFolder), 'id',\n    ) as Record<number, ApiChatFolder>,\n    orderedIds,\n  };\n}\n\nexport async function fetchRecommendedChatFolders() {\n  const results = await invokeRequest(new GramJs.messages.GetSuggestedDialogFilters());\n\n  if (!results) {\n    return undefined;\n  }\n\n  return results.map(buildApiChatFolderFromSuggested).filter(Boolean);\n}\n\nexport async function editChatFolder({\n  id,\n  folderUpdate,\n}: {\n  id: number;\n  folderUpdate: ApiChatFolder;\n}) {\n  // // Telegram ignores excluded chats if they also present in the included list\n  if(folderUpdate.excludedChatIds){\n    folderUpdate.excludedChatIds = folderUpdate.excludedChatIds.filter((chatId) => {\n      return !folderUpdate.includedChatIds.includes(chatId);\n    });\n  }\n\n  // const filter = buildFilterFromApiFolder(folderUpdate);\n\n  // const isActionSuccessful = await invokeRequest(new GramJs.messages.UpdateDialogFilter({\n  //   id,\n  //   filter,\n  // }));\n  const isActionSuccessful = true;\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder: folderUpdate,\n    });\n  }\n}\n\nexport async function deleteChatFolder(id: number) {\n\n  onUpdate({\n    '@type': 'updateChatFolder',\n    id,\n    folder: undefined,\n  });\n\n  //\n  // const isActionSuccessful = await invokeRequest(new GramJs.messages.UpdateDialogFilter({\n  //   id,\n  //   filter: undefined,\n  // }));\n  // const recommendedChatFolders = await fetchRecommendedChatFolders();\n  //\n  // if (isActionSuccessful) {\n  //   onUpdate({\n  //     '@type': 'updateChatFolder',\n  //     id,\n  //     folder: undefined,\n  //   });\n  // }\n  // if (recommendedChatFolders) {\n  //   onUpdate({\n  //     '@type': 'updateRecommendedChatFolders',\n  //     folders: recommendedChatFolders,\n  //   });\n  // }\n}\n\nexport function sortChatFolders(ids: number[]) {\n  onUpdate({\n    '@type': 'updateChatFoldersOrder',\n    orderedIds:ids\n  });\n  // return invokeRequest(new GramJs.messages.UpdateDialogFiltersOrder({\n  //   order: ids,\n  // }));\n}\n\nexport async function toggleDialogUnread({\n  chat, hasUnreadMark,\n}: {\n  chat: ApiChat; hasUnreadMark: boolean | undefined;\n}) {\n  const { id, accessHash } = chat;\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.MarkDialogUnread({\n    peer: new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    }),\n    unread: hasUnreadMark || undefined,\n  }));\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: chat.id,\n      chat: { hasUnreadMark },\n    });\n  }\n}\n\nexport async function getChatByPhoneNumber(phoneNumber: string) {\n  const result = await invokeRequest(new GramJs.contacts.ResolvePhone({\n    phone: phoneNumber,\n  }));\n\n  return processResolvedPeer(result);\n}\n\nexport async function getChatByUsername(username: string) {\n  const result = await invokeRequest(new GramJs.contacts.ResolveUsername({\n    username,\n  }));\n\n  return processResolvedPeer(result);\n}\n\nfunction processResolvedPeer(result?: GramJs.contacts.TypeResolvedPeer) {\n  if (!result) {\n    return undefined;\n  }\n\n  const { users, chats } = result;\n\n  const chat = chats.length\n    ? buildApiChatFromPreview(chats[0])\n    : buildApiChatFromPreview(users[0]);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    chat,\n    user: buildApiUser(users[0]),\n  };\n}\n\nexport function togglePreHistoryHidden({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  return invokeRequest(new GramJs.channels.TogglePreHistoryHidden({\n    channel: channel as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), true);\n}\n\nexport function updateChatDefaultBannedRights({\n  chat, bannedRights,\n}: { chat: ApiChat; bannedRights: ApiChatBannedRights }) {\n  const { id, accessHash } = chat;\n  const peer = buildInputPeer(id, accessHash);\n\n  return invokeRequest(new GramJs.messages.EditChatDefaultBannedRights({\n    peer,\n    bannedRights: buildChatBannedRights(bannedRights),\n  }), true);\n}\n\nexport function updateChatMemberBannedRights({\n  chat, user, bannedRights, untilDate,\n}: { chat: ApiChat; user: ApiUser; bannedRights: ApiChatBannedRights; untilDate?: number }) {\n  const channel = buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel;\n  const participant = buildInputPeer(user.id, user.accessHash) as GramJs.InputUser;\n\n  return invokeRequest(new GramJs.channels.EditBanned({\n    channel,\n    participant,\n    bannedRights: buildChatBannedRights(bannedRights, untilDate),\n  }), true);\n}\n\nexport function updateChatAdmin({\n  chat, user, adminRights, customTitle = '',\n}: { chat: ApiChat; user: ApiUser; adminRights: ApiChatAdminRights; customTitle?: string }) {\n  const channel = buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel;\n  const userId = buildInputEntity(user.id, user.accessHash) as GramJs.InputUser;\n\n  return invokeRequest(new GramJs.channels.EditAdmin({\n    channel,\n    userId,\n    adminRights: buildChatAdminRights(adminRights),\n    rank: customTitle,\n  }), true);\n}\n\nexport async function updateChatTitle(chat: ApiChat, title: string) {\n  const inputEntity = buildInputEntity(chat.id, chat.accessHash);\n  await invokeRequest(\n    inputEntity instanceof GramJs.InputChannel\n      ? new GramJs.channels.EditTitle({\n        channel: inputEntity as GramJs.InputChannel,\n        title,\n      }) : new GramJs.messages.EditChatTitle({\n        chatId: inputEntity as BigInt.BigInteger,\n        title,\n      }),\n    true,\n  );\n}\n\nexport async function updateChatAbout(chat: ApiChat, about: string) {\n  const result = await invokeRequest(new GramJs.messages.EditChatAbout({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    about,\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'updateChatFullInfo',\n    id: chat.id,\n    fullInfo: {\n      about,\n    },\n  });\n}\n\nexport function toggleSignatures({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  return invokeRequest(new GramJs.channels.ToggleSignatures({\n    channel: channel as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), true);\n}\n\ntype ChannelMembersFilter =\n  'kicked'\n  | 'admin'\n  | 'recent';\n\nexport async function fetchMembers(\n  chatId: string,\n  accessHash: string,\n  memberFilter: ChannelMembersFilter = 'recent',\n  offset?: number,\n) {\n  let filter: GramJs.TypeChannelParticipantsFilter;\n\n  switch (memberFilter) {\n    case 'kicked':\n      filter = new GramJs.ChannelParticipantsKicked({ q: '' });\n      break;\n    case 'admin':\n      filter = new GramJs.ChannelParticipantsAdmins();\n      break;\n    default:\n      filter = new GramJs.ChannelParticipantsRecent();\n      break;\n  }\n\n  const result = await invokeRequest(new GramJs.channels.GetParticipants({\n    channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n    filter,\n    offset,\n    limit: MEMBERS_LOAD_SLICE,\n  }));\n\n  if (!result || result instanceof GramJs.channels.ChannelParticipantsNotModified) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n  const { users, userStatusesById } = buildApiUsersAndStatuses(result.users);\n\n  return {\n    members: buildChatMembers(result),\n    users,\n    userStatusesById,\n  };\n}\n\nexport async function fetchGroupsForDiscussion() {\n  const result = await invokeRequest(new GramJs.channels.GetGroupsForDiscussion());\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return result.chats.map((chat) => buildApiChatFromPreview(chat));\n}\n\nexport function setDiscussionGroup({\n  channel,\n  chat,\n}: {\n  channel: ApiChat;\n  chat?: ApiChat;\n}) {\n  return invokeRequest(new GramJs.channels.SetDiscussionGroup({\n    broadcast: buildInputPeer(channel.id, channel.accessHash),\n    group: chat ? buildInputPeer(chat.id, chat.accessHash) : new GramJs.InputChannelEmpty(),\n  }), true);\n}\n\nexport async function migrateChat(chat: ApiChat) {\n  const result = await invokeRequest(\n    new GramJs.messages.MigrateChat({ chatId: buildInputEntity(chat.id) as BigInt.BigInteger }),\n    undefined,\n    true,\n  );\n\n  // `migrateChat` can return a lot of different update types according to docs,\n  // but currently chat migrations returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!result || !(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected channel creation update', result);\n    }\n\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return buildApiChatFromPreview(result.chats[1]);\n}\n\nexport async function openChatByInvite(hash: string) {\n  const result = await invokeRequest(new GramJs.messages.CheckChatInvite({ hash }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  let chat: ApiChat | undefined;\n\n  if (result instanceof GramJs.ChatInvite) {\n    const {\n      photo, participantsCount, title, channel, requestNeeded, about, megagroup,\n    } = result;\n\n    if (photo instanceof GramJs.Photo) {\n      addPhotoToLocalDb(result.photo);\n    }\n\n    onUpdate({\n      '@type': 'showInvite',\n      data: {\n        title,\n        about,\n        hash,\n        participantsCount,\n        isChannel: channel && !megagroup,\n        isRequestNeeded: requestNeeded,\n        ...(photo instanceof GramJs.Photo && { photo: buildApiPhoto(photo) }),\n      },\n    });\n  } else {\n    chat = buildApiChatFromPreview(result.chat);\n\n    if (chat) {\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    }\n  }\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return { chatId: chat.id };\n}\n\nexport async function addChatMembers(chat: ApiChat, users: ApiUser[], noErrorUpdate = false) {\n  try {\n    if (chat.type === 'chatTypeChannel' || chat.type === 'chatTypeSuperGroup') {\n      return await invokeRequest(new GramJs.channels.InviteToChannel({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        users: users.map((user) => buildInputEntity(user.id, user.accessHash)) as GramJs.InputUser[],\n      }), true, noErrorUpdate);\n    }\n\n    return await Promise.all(users.map((user) => {\n      return invokeRequest(new GramJs.messages.AddChatUser({\n        chatId: buildInputEntity(chat.id) as BigInt.BigInteger,\n        userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n      }), true, noErrorUpdate);\n    }));\n  } catch (err) {\n    // `noErrorUpdate` will cause an exception which we don't want either\n    return undefined;\n  }\n}\n\nexport function deleteChatMember(chat: ApiChat, user: ApiUser) {\n  if (chat.type === 'chatTypeChannel' || chat.type === 'chatTypeSuperGroup') {\n    return updateChatMemberBannedRights({\n      chat,\n      user,\n      bannedRights: {\n        viewMessages: true,\n        sendMessages: true,\n        sendMedia: true,\n        sendStickers: true,\n        sendGifs: true,\n        sendGames: true,\n        sendInline: true,\n        embedLinks: true,\n        sendPolls: true,\n        changeInfo: true,\n        inviteUsers: true,\n        pinMessages: true,\n        manageTopics: true,\n        sendPhotos: true,\n        sendVideos: true,\n        sendRoundvideos: true,\n        sendAudios: true,\n        sendVoices: true,\n        sendDocs: true,\n        sendPlain: true,\n      },\n      untilDate: MAX_INT_32,\n    });\n  } else {\n    return invokeRequest(new GramJs.messages.DeleteChatUser({\n      chatId: buildInputEntity(chat.id) as BigInt.BigInteger,\n      userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    }), true);\n  }\n}\n\nexport function toggleJoinToSend(chat: ApiChat, isEnabled: boolean) {\n  return invokeRequest(new GramJs.channels.ToggleJoinToSend({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), true);\n}\n\nexport function toggleJoinRequest(chat: ApiChat, isEnabled: boolean) {\n  return invokeRequest(new GramJs.channels.ToggleJoinRequest({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), true);\n}\n\nfunction preparePeers(\n  result: GramJs.messages.Dialogs | GramJs.messages.DialogsSlice | GramJs.messages.PeerDialogs,\n  currentStore?: Record<string, GramJs.TypeChat | GramJs.TypeUser>,\n) {\n  const store: Record<string, GramJs.TypeChat | GramJs.TypeUser> = {};\n\n  result.chats?.forEach((chat) => {\n    const key = `chat${chat.id}`;\n\n    if (currentStore?.[key] && 'min' in chat && chat.min) {\n      return;\n    }\n\n    store[key] = chat;\n  });\n\n  result.users?.forEach((user) => {\n    const key = `user${user.id}`;\n\n    if (currentStore?.[key] && 'min' in user && user.min) {\n      return;\n    }\n\n    store[key] = user;\n  });\n\n  return store;\n}\n\nfunction updateLocalDb(result: (\n  GramJs.messages.Dialogs | GramJs.messages.DialogsSlice | GramJs.messages.PeerDialogs |\n  GramJs.messages.ChatFull | GramJs.contacts.Found |\n  GramJs.contacts.ResolvedPeer | GramJs.channels.ChannelParticipants |\n  GramJs.messages.Chats | GramJs.messages.ChatsSlice | GramJs.TypeUpdates | GramJs.messages.ForumTopics\n)) {\n  if ('users' in result) {\n    addEntitiesWithPhotosToLocalDb(result.users);\n  }\n\n  if ('chats' in result) {\n    addEntitiesWithPhotosToLocalDb(result.chats);\n  }\n\n  if ('messages' in result) {\n    result.messages.forEach((message) => {\n      if (message instanceof GramJs.Message && isMessageWithMedia(message)) {\n        addMessageToLocalDb(message);\n      }\n    });\n  }\n}\n\nexport async function importChatInvite({ hash }: { hash: string }) {\n  const updates = await invokeRequest(new GramJs.messages.ImportChatInvite({ hash }));\n  if (!(updates instanceof GramJs.Updates) || !updates.chats.length) {\n    return undefined;\n  }\n\n  return buildApiChatFromPreview(updates.chats[0]);\n}\n\nexport function setChatEnabledReactions({\n  chat, enabledReactions,\n}: {\n  chat: ApiChat; enabledReactions?: ApiChatReactions;\n}) {\n  return invokeRequest(new GramJs.messages.SetChatAvailableReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    availableReactions: buildInputChatReactions(enabledReactions),\n  }), true);\n}\n\nexport function toggleIsProtected({\n  chat, isProtected,\n}: { chat: ApiChat; isProtected: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.messages.ToggleNoForwards({\n    peer: buildInputPeer(id, accessHash),\n    enabled: isProtected,\n  }), true);\n}\n\nexport function toggleParticipantsHidden({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.ToggleParticipantsHidden({\n    channel: buildInputPeer(id, accessHash),\n    enabled: isEnabled,\n  }), true);\n}\n\nexport function toggleForum({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.ToggleForum({\n    channel: buildInputPeer(id, accessHash),\n    enabled: isEnabled,\n  }), true);\n}\n\nexport async function createTopic({\n  chat, title, iconColor, iconEmojiId, sendAs,\n}: {\n  chat: ApiChat;\n  title: string;\n  iconColor?: number;\n  iconEmojiId?: string;\n  sendAs?: ApiUser | ApiChat;\n}) {\n  const { id, accessHash } = chat;\n\n  const updates = await invokeRequest(new GramJs.channels.CreateForumTopic({\n    channel: buildInputPeer(id, accessHash),\n    title,\n    iconColor,\n    iconEmojiId: iconEmojiId ? BigInt(iconEmojiId) : undefined,\n    sendAs: sendAs ? buildInputPeer(sendAs.id, sendAs.accessHash) : undefined,\n    randomId: generateRandomBigInt(),\n  }));\n\n  if (!(updates instanceof GramJs.Updates) || !updates.updates.length) {\n    return undefined;\n  }\n\n  // Finding topic id in updates\n  return updates.updates?.find((update): update is GramJs.UpdateMessageID => (\n    update instanceof GramJs.UpdateMessageID\n  ))?.id;\n}\n\nexport async function fetchTopics({\n  chat, query, offsetTopicId, offsetId, offsetDate, limit = TOPICS_SLICE,\n}: {\n  chat: ApiChat;\n  query?: string;\n  offsetTopicId?: number;\n  offsetId?: number;\n  offsetDate?: number;\n  limit?: number;\n}): Promise<{\n    topics: ApiTopic[];\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    count: number;\n    shouldOrderByCreateDate?: boolean;\n    draftsById: Record<number, ReturnType<typeof buildMessageDraft>>;\n    readInboxMessageIdByTopicId: Record<number, number>;\n  } | undefined> {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.channels.GetForumTopics({\n    channel: buildInputPeer(id, accessHash),\n    limit,\n    q: query,\n    offsetTopic: offsetTopicId,\n    offsetId,\n    offsetDate,\n  }));\n\n  if (!result) return undefined;\n\n  updateLocalDb(result);\n\n  const { count, orderByCreateDate } = result;\n\n  const topics = result.topics.map(buildApiTopic).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const draftsById = result.topics.reduce((acc, topic) => {\n    if (topic instanceof GramJs.ForumTopic && topic.draft) {\n      acc[topic.id] = buildMessageDraft(topic.draft);\n    }\n    return acc;\n  }, {} as Record<number, ReturnType<typeof buildMessageDraft>>);\n  const readInboxMessageIdByTopicId = result.topics.reduce((acc, topic) => {\n    if (topic instanceof GramJs.ForumTopic && topic.readInboxMaxId) {\n      acc[topic.id] = topic.readInboxMaxId;\n    }\n    return acc;\n  }, {} as Record<number, number>);\n\n  return {\n    topics,\n    messages,\n    users,\n    chats,\n    // Include general topic\n    count: count + 1,\n    shouldOrderByCreateDate: orderByCreateDate,\n    draftsById,\n    readInboxMessageIdByTopicId,\n  };\n}\n\nexport async function fetchTopicById({\n  chat, topicId,\n}: {\n  chat: ApiChat;\n  topicId: number;\n}): Promise<{\n    topic: ApiTopic;\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n  } | undefined> {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.channels.GetForumTopicsByID({\n    channel: buildInputPeer(id, accessHash),\n    topics: [topicId],\n  }));\n\n  if (!result?.topics.length || !(result.topics[0] instanceof GramJs.ForumTopic)) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    topic: buildApiTopic(result.topics[0])!,\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport function deleteTopic({\n  chat, topicId,\n}: {\n  chat: ApiChat;\n  topicId: number;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.DeleteTopicHistory({\n    channel: buildInputPeer(id, accessHash),\n    topMsgId: topicId,\n  }), true);\n}\n\nexport function togglePinnedTopic({\n  chat, topicId, isPinned,\n}: {\n  chat: ApiChat;\n  topicId: number;\n  isPinned: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.UpdatePinnedForumTopic({\n    channel: buildInputPeer(id, accessHash),\n    topicId,\n    pinned: isPinned,\n  }), true);\n}\n\nexport function editTopic({\n  chat, topicId, title, iconEmojiId, isClosed, isHidden,\n}: {\n  chat: ApiChat;\n  topicId: number;\n  title?: string;\n  iconEmojiId?: string;\n  isClosed?: boolean;\n  isHidden?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.EditForumTopic({\n    channel: buildInputPeer(id, accessHash),\n    topicId,\n    title,\n    iconEmojiId: topicId !== GENERAL_TOPIC_ID && iconEmojiId ? BigInt(iconEmojiId) : undefined,\n    closed: isClosed,\n    hidden: isHidden,\n  }), true);\n}\n","import {Api as GramJs} from '../../../lib/gramjs';\nimport type {\n  ApiAttachment,\n  ApiBotInfo,\n  ApiChat,\n  ApiContact,\n  ApiFormattedText,\n  ApiGlobalMessageSearchType,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageSearchType,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPoll,\n  ApiReportReason,\n  ApiSendMessageAction,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  OnApiUpdate,\n} from '../../types';\nimport {MAIN_THREAD_ID, MESSAGE_DELETED,} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  DEBUG,\n  GIF_MIME_TYPE,\n  MAX_INT_32,\n  MENTION_UNREAD_SLICE,\n  MESSAGE_LIST_SLICE,\n  PINNED_MESSAGES_LIMIT,\n  REACTION_UNREAD_SLICE,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  UPLOAD_WORKERS,\n} from '../../../config';\nimport {invokeRequest} from './client';\nimport {\n  buildApiFormattedText,\n  buildApiMessage,\n  buildApiSponsoredMessage,\n  buildLocalForwardedMessage,\n  buildLocalMessage,\n  buildWebPage,\n} from '../apiBuilders/messages';\nimport {buildApiUser} from '../apiBuilders/users';\nimport {\n  buildInputEntity,\n  buildInputMediaDocument,\n  buildInputPeer,\n  buildInputPoll,\n  buildInputPollFromExisting,\n  buildInputReportReason,\n  buildInputTextWithEntities,\n  buildMtpMessageEntity,\n  buildSendMessageAction,\n  generateRandomBigInt,\n  getEntityTypeById,\n  isMessageWithMedia,\n  isServiceMessageWithMedia,\n} from '../gramjsBuilders';\nimport localDb from '../localDb';\nimport {buildApiChatFromPreview, buildApiSendAsPeerId} from '../apiBuilders/chats';\nimport {blobToDataUri, fetchBlob, fetchFile} from '../../../util/files';\nimport {\n  addEntitiesWithPhotosToLocalDb,\n  addMessageToLocalDb,\n  deserializeBytes,\n  resolveMessageApiChatId,\n} from '../helpers';\nimport {interpolateArray} from '../../../util/waveform';\nimport {requestChatUpdate} from './chats';\nimport {getEmojiOnlyCountForMessage} from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport {getServerTimeOffset} from '../../../util/serverTime';\nimport {uploadFileV1} from \"../../../lib/gramjs/client/uploadFile\";\nimport {MsgListReq, MsgListRes} from \"../../../lib/ptp/protobuf/PTPMsg\";\nimport Account from '../../../worker/share/Account';\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport MsgWorker from \"../../../worker/msg/MsgWorker\";\nimport {AiHistoryType} from \"../../../worker/msg/MsgChatGpWorker\";\n\nconst FAST_SEND_TIMEOUT = 1000;\nconst INPUT_WAVEFORM_LENGTH = 63;\n\ntype TranslateTextParams = ({\n  text: ApiFormattedText[];\n} | {\n  chat: ApiChat;\n  messageIds: number[];\n}) & {\n  toLanguageCode: string;\n};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchMessages({\n  chat,\n  threadId,\n  offsetId,\n  lastMessageId,isUp,\n  ...pagination\n}: {\n  chat: ApiChat;\n  threadId?: number;\n  offsetId?: number;\n  addOffset?: number;\n  limit: number;\n  lastMessageId?:number,\n  isUp?:boolean\n}) {\n  return\n  const pdu = await Account.getCurrentAccount()?.sendPduWithCallback(new MsgListReq({\n    lastMessageId:lastMessageId!,\n    chatId:chat.id,\n    limit: MESSAGE_LIST_SLICE,\n    isUp\n  }).pack());\n  if(!pdu){\n    return\n  }\n  const res = MsgListRes.parseMsg(pdu!)\n  if(res.err !== ERR.NO_ERROR){\n    return;\n  }\n  const result = JSON.parse(res!.payload)\n  if(!result){\n    return\n  }\n  return result\n  // const RequestClass = threadId === MAIN_THREAD_ID ? GramJs.messages.GetHistory : GramJs.messages.GetReplies;\n  // let result;\n  //\n  // try {\n  //   result = await invokeRequest(new RequestClass({\n  //     peer: buildInputPeer(chat.id, chat.accessHash),\n  //     ...(threadId !== MAIN_THREAD_ID && {\n  //       msgId: Number(threadId),\n  //     }),\n  //     ...(offsetId && {\n  //       // Workaround for local message IDs overflowing some internal `Buffer` range check\n  //       offsetId: Math.min(offsetId, MAX_INT_32),\n  //     }),\n  //     ...pagination,\n  //   }), undefined, true);\n  // } catch (err: any) {\n  //   if (err.message === 'CHANNEL_PRIVATE') {\n  //     onUpdate({\n  //       '@type': 'updateChat',\n  //       id: chat.id,\n  //       chat: {\n  //         isRestricted: true,\n  //       },\n  //     });\n  //   }\n  // }\n  //\n  // if (\n  //   !result\n  //   || result instanceof GramJs.messages.MessagesNotModified\n  //   || !result.messages\n  // ) {\n  //   return undefined;\n  // }\n  //\n  // updateLocalDb(result);\n  //\n  // const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  // const users = result.users.map(buildApiUser).filter(Boolean);\n  // const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  // const repliesThreadInfos = messages.map(({ repliesThreadInfo }) => repliesThreadInfo).filter(Boolean);\n  //\n  // return {\n  //   messages,\n  //   users,\n  //   chats,\n  //   repliesThreadInfos,\n  // };\n}\n\nexport async function fetchMessage({ chat, messageId }: { chat: ApiChat; messageId: number }) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  let result;\n  try {\n    result = await invokeRequest(\n      isChannel\n        ? new GramJs.channels.GetMessages({\n          channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        })\n        : new GramJs.messages.GetMessages({\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        }),\n      undefined,\n      true,\n    );\n  } catch (err: any) {\n    const { message } = err;\n\n    // When fetching messages for the bot @replies, there may be situations when the user was banned\n    // in the comment group or this group was deleted\n    if (message !== 'CHANNEL_PRIVATE') {\n      onUpdate({\n        '@type': 'error',\n        error: {\n          message,\n          isSlowMode: false,\n          hasErrorKey: true,\n        },\n      });\n    }\n  }\n\n  if (!result || result instanceof GramJs.messages.MessagesNotModified) {\n    return undefined;\n  }\n\n  const mtpMessage = result.messages[0];\n  if (!mtpMessage) {\n    return undefined;\n  }\n\n  if (mtpMessage instanceof GramJs.MessageEmpty) {\n    return MESSAGE_DELETED;\n  }\n\n  const message = mtpMessage && buildApiMessage(mtpMessage);\n  if (!message) {\n    return undefined;\n  }\n\n  if (mtpMessage instanceof GramJs.Message) {\n    addMessageToLocalDb(mtpMessage);\n  }\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n\n  return { message, users };\n}\n\nlet queue = Promise.resolve();\n\n\nexport function sendMessage(\n  {\n    chat,\n    text,\n    entities,\n    replyingTo,\n    replyingToTopId,\n    attachment,\n    sticker,\n    gif,\n    poll,\n    contact,\n    isSilent,\n    scheduledAt,\n    groupedId,\n    noWebPage,\n    sendAs,\n    shouldUpdateStickerSetsOrder,\n    botInfo,\n    aiHistoryList\n  }: {\n    chat: ApiChat;\n    text?: string;\n    entities?: ApiMessageEntity[];\n    replyingTo?: number;\n    replyingToTopId?: number;\n    attachment?: ApiAttachment;\n    sticker?: ApiSticker;\n    gif?: ApiVideo;\n    poll?: ApiNewPoll;\n    contact?: ApiContact;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    groupedId?: string;\n    noWebPage?: boolean;\n    sendAs?: ApiUser | ApiChat;\n    shouldUpdateStickerSetsOrder?: boolean;\n    botInfo?: ApiBotInfo;\n    aiHistoryList?:AiHistoryType[]\n  },\n  onProgress?: ApiOnProgress,\n) {\n  const localMessage = buildLocalMessage(\n    chat,\n    text,\n    entities,\n    replyingTo,\n    replyingToTopId,\n    attachment,\n    sticker,\n    gif,\n    poll,\n    contact,\n    groupedId,\n    scheduledAt,\n    sendAs,\n  );\n\n  onUpdate({\n    '@type': localMessage.isScheduled ? 'newScheduledMessage' : 'newMessage',\n    id: localMessage.id,\n    chatId: chat.id,\n    message: {\n      ...localMessage,\n      sendingState: 'messageSendingStatePending',\n    },\n  });\n\n\n  const randomId = generateRandomBigInt();\n  localDb.localMessages[String(randomId)] = localMessage;\n\n  if (groupedId) {\n    return sendGroupedMedia({\n      chat,\n      text,\n      entities,\n      replyingTo,\n      replyingToTopId,\n      attachment: attachment!,\n      groupedId,\n      isSilent,\n      scheduledAt,\n    }, randomId, localMessage, onProgress);\n  }\n\n  const prevQueue = queue;\n  queue = (async () => {\n    let media: GramJs.TypeInputMedia | undefined;\n    if (attachment) {\n      try {\n        media = await uploadMedia(localMessage, attachment, onProgress!);\n      } catch (err) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.warn(err);\n        }\n        await prevQueue;\n        return;\n      }\n    } else if (sticker) {\n      media = buildInputMediaDocument(sticker);\n    } else if (gif) {\n      media = buildInputMediaDocument(gif);\n    } else if (poll) {\n      media = buildInputPoll(poll, randomId);\n    } else if (contact) {\n      media = new GramJs.InputMediaContact({\n        phoneNumber: contact.phoneNumber,\n        firstName: contact.firstName,\n        lastName: contact.lastName,\n        vcard: '',\n      });\n    }\n    await prevQueue;\n    await new MsgWorker({\n      chat,\n      msgSend:localMessage,\n      attachment,\n      media,\n      botInfo,\n      aiHistoryList,\n    },onUpdate).process()\n  })();\n\n  return queue;\n}\n\nconst groupedUploads: Record<string, {\n  counter: number;\n  singleMediaByIndex: Record<number, GramJs.InputSingleMedia>;\n}> = {};\n\nfunction sendGroupedMedia(\n  {\n    chat,\n    text,\n    entities,\n    replyingTo,\n    replyingToTopId,\n    attachment,\n    groupedId,\n    isSilent,\n    scheduledAt,\n    sendAs,\n  }: {\n    chat: ApiChat;\n    text?: string;\n    entities?: ApiMessageEntity[];\n    replyingTo?: number;\n    replyingToTopId?: number;\n    attachment: ApiAttachment;\n    groupedId: string;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    sendAs?: ApiUser | ApiChat;\n  },\n  randomId: GramJs.long,\n  localMessage: ApiMessage,\n  onProgress?: ApiOnProgress,\n) {\n  let groupIndex = -1;\n  if (!groupedUploads[groupedId]) {\n    groupedUploads[groupedId] = {\n      counter: 0,\n      singleMediaByIndex: {},\n    };\n  }\n\n  groupIndex = groupedUploads[groupedId].counter++;\n\n  const prevQueue = queue;\n  queue = (async () => {\n    let media;\n    try {\n      media = await uploadMedia(localMessage, attachment, onProgress!);\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.warn(err);\n      }\n\n      groupedUploads[groupedId].counter--;\n\n      await prevQueue;\n\n      return;\n    }\n\n    // const inputMedia = await fetchInputMedia(\n    //   buildInputPeer(chat.id, chat.accessHash),\n    //   media as GramJs.InputMediaUploadedPhoto | GramJs.InputMediaUploadedDocument,\n    // );\n\n    await prevQueue;\n\n    // if (!inputMedia) {\n    //   groupedUploads[groupedId].counter--;\n    //\n    //   if (DEBUG) {\n    //     // eslint-disable-next-line no-console\n    //     console.warn('Failed to upload grouped media');\n    //   }\n    //\n    //   return;\n    // }\n\n    // groupedUploads[groupedId].singleMediaByIndex[groupIndex] = new GramJs.InputSingleMedia({\n    //   media: inputMedia,\n    //   randomId,\n    //   message: text || '',\n    //   entities: entities ? entities.map(buildMtpMessageEntity) : undefined,\n    // });\n    //\n    // if (Object.keys(groupedUploads[groupedId].singleMediaByIndex).length < groupedUploads[groupedId].counter) {\n    //   return;\n    // }\n\n    // const { singleMediaByIndex } = groupedUploads[groupedId];\n    delete groupedUploads[groupedId];\n    if (onProgress) {\n      let fileId: string | undefined;\n      //@ts-ignore\n      if(media && media!.file && media.file.id) {\n        //@ts-ignore\n        fileId = media!.file.id.toString()\n      }\n\n      if(localMessage.content.photo || localMessage.content.document){\n\n        const getPhotoInfo = async (attachment:ApiAttachment)=>{\n          const dataUri = await blobToDataUri(await fetchBlob(attachment.thumbBlobUrl! ));\n          const size = {\n            \"width\": attachment.quick!.width,\n            \"height\":  attachment.quick!.height,\n          }\n          return{\n            dataUri,size\n          }\n        }\n\n        if(localMessage.content.document){\n          localMessage.content.document.id = fileId\n\n          if(localMessage.content.document.mimeType.split(\"/\")[0] === \"image\"){\n            const {size,dataUri} = await getPhotoInfo(attachment);\n            localMessage.content.document.mediaType = \"photo\";\n            localMessage.content.document.previewBlobUrl = undefined;\n            localMessage.content.document.thumbnail = {\n              ...size,\n              dataUri\n            }\n            localMessage.content.document.mediaSize = size;\n          }\n        }\n\n        if(localMessage.content.photo){\n          const {size,dataUri} = await getPhotoInfo(attachment);\n          localMessage.content.photo = {\n            isSpoiler:localMessage.content.photo.isSpoiler,\n            id:fileId!,\n            \"thumbnail\": {\n              ...size,\n              dataUri\n            },\n            \"sizes\": [\n              {\n                ...size,\n                \"type\": \"y\"\n              }\n            ],\n          }\n        }\n      }\n\n      await onProgress(2, localMessage)\n    }\n    // await invokeRequest(new GramJs.messages.SendMultiMedia({\n    //   clearDraft: true,\n    //   peer: buildInputPeer(chat.id, chat.accessHash),\n    //   multiMedia: Object.values(singleMediaByIndex), // Object keys are usually ordered\n    //   replyToMsgId: replyingTo,\n    //   ...(replyingToTopId && { topMsgId: replyingToTopId }),\n    //   ...(isSilent && { silent: isSilent }),\n    //   ...(scheduledAt && { scheduleDate: scheduledAt }),\n    //   ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n    // }), true);\n  })();\n\n  return queue;\n}\n\nasync function fetchInputMedia(\n  peer: GramJs.TypeInputPeer,\n  uploadedMedia: GramJs.InputMediaUploadedPhoto | GramJs.InputMediaUploadedDocument,\n) {\n  const messageMedia = await invokeRequest(new GramJs.messages.UploadMedia({\n    peer,\n    media: uploadedMedia,\n  }));\n  const isSpoiler = uploadedMedia.spoiler;\n\n  if ((\n    messageMedia instanceof GramJs.MessageMediaPhoto\n    && messageMedia.photo\n    && messageMedia.photo instanceof GramJs.Photo)\n  ) {\n    const { photo: { id, accessHash, fileReference } } = messageMedia;\n\n    return new GramJs.InputMediaPhoto({\n      id: new GramJs.InputPhoto({ id, accessHash, fileReference }),\n      spoiler: isSpoiler,\n    });\n  }\n\n  if ((\n    messageMedia instanceof GramJs.MessageMediaDocument\n    && messageMedia.document\n    && messageMedia.document instanceof GramJs.Document)\n  ) {\n    const { document: { id, accessHash, fileReference } } = messageMedia;\n\n    return new GramJs.InputMediaDocument({\n      id: new GramJs.InputDocument({ id, accessHash, fileReference }),\n      spoiler: isSpoiler,\n    });\n  }\n\n  return undefined;\n}\n\nexport async function editMessage({\n  chat,\n  message,\n  text,\n  entities,\n  noWebPage,\n}: {\n  chat: ApiChat;\n  message: ApiMessage;\n  text: string;\n  entities?: ApiMessageEntity[];\n  noWebPage?: boolean;\n}) {\n  const isScheduled = message.date * 1000 > Date.now() + getServerTimeOffset() * 1000;\n  let messageUpdate: Partial<ApiMessage> = {\n    content: {\n      ...message.content,\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n    },\n  };\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(messageUpdate.content!, messageUpdate.groupedId);\n  messageUpdate = {\n    ...messageUpdate,\n    emojiOnlyCount,\n  };\n  onUpdate({\n    '@type': isScheduled ? 'updateScheduledMessage' : 'updateMessage',\n    id: message.id,\n    chatId: chat.id,\n    message: messageUpdate,\n  });\n\n  // TODO Revise intersecting with scheduled\n  localDb.localMessages[message.id] = { ...message, ...messageUpdate };\n\n  const mtpEntities = entities && entities.map(buildMtpMessageEntity);\n\n  // await invokeRequest(new GramJs.messages.EditMessage({\n  //   message: text || '',\n  //   entities: mtpEntities,\n  //   peer: buildInputPeer(chat.id, chat.accessHash),\n  //   id: message.id,\n  //   ...(isScheduled && { scheduleDate: message.date }),\n  //   ...(noWebPage && { noWebpage: noWebPage }),\n  // }), true);\n  // await Account.getCurrentAccount()!.sendPdu(new MsgUpdateReq({\n  //   msg_id:message.id,\n  //   chat_id:chat.id,\n  //   user_id:Account.getCurrentAccount()?.getUid()!,\n  //   text\n  // }).pack(),0)\n}\n\nexport async function rescheduleMessage({\n  chat,\n  message,\n  scheduledAt,\n}: {\n  chat: ApiChat;\n  message: ApiMessage;\n  scheduledAt: number;\n}) {\n  await invokeRequest(new GramJs.messages.EditMessage({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: message.id,\n    scheduleDate: scheduledAt,\n  }), true);\n}\n\nasync function uploadMedia(localMessage: ApiMessage, attachment: ApiAttachment, onProgress: ApiOnProgress) {\n  const {\n    filename, blobUrl, encryptUrl,mimeType, quick, voice, audio, previewBlobUrl, shouldSendAsFile, shouldSendAsSpoiler,\n  } = attachment;\n\n  const patchedOnProgress: ApiOnProgress = (progress) => {\n    if (onProgress.isCanceled) {\n      patchedOnProgress.isCanceled = true;\n    } else {\n      onProgress(progress, localMessage);\n    }\n  };\n\n  let file;\n  if(encryptUrl){\n    file = await fetchFile(encryptUrl, \"EN_\"+filename);\n  }else{\n    file = await fetchFile(blobUrl, filename);\n  }\n  const inputFile = await uploadFileV1({file, onProgress:patchedOnProgress,workers: UPLOAD_WORKERS});\n  // const thumbFile = previewBlobUrl && await fetchFile(previewBlobUrl, filename);\n  //const thumb = thumbFile ? await uploadFileV1({file:thumbFile,workers: UPLOAD_WORKERS}) : undefined;\n  const thumb = undefined;\n  const attributes: GramJs.TypeDocumentAttribute[] = [new GramJs.DocumentAttributeFilename({ fileName: filename })];\n  if (!shouldSendAsFile) {\n    if (quick) {\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) && mimeType !== GIF_MIME_TYPE) {\n        return new GramJs.InputMediaUploadedPhoto({\n          file: inputFile,\n          spoiler: shouldSendAsSpoiler,\n        });\n      }\n\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = quick;\n        if (duration !== undefined) {\n          attributes.push(new GramJs.DocumentAttributeVideo({\n            duration,\n            w: width,\n            h: height,\n            supportsStreaming: true,\n          }));\n        }\n      }\n    }\n\n    if (audio) {\n      const { duration, title, performer } = audio;\n      attributes.push(new GramJs.DocumentAttributeAudio({\n        duration,\n        title,\n        performer,\n      }));\n    }\n\n    if (voice) {\n      const { duration, waveform } = voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      attributes.push(new GramJs.DocumentAttributeAudio({\n        voice: true,\n        duration,\n        waveform: Buffer.from(inputWaveform),\n      }));\n    }\n  }\n\n  return new GramJs.InputMediaUploadedDocument({\n    file: inputFile,\n    mimeType,\n    attributes,\n    thumb,\n    forceFile: shouldSendAsFile,\n    spoiler: shouldSendAsSpoiler,\n  });\n}\n\nexport async function pinMessage({\n  chat, messageId, isUnpin, isOneSide, isSilent,\n}: { chat: ApiChat; messageId: number; isUnpin: boolean; isOneSide?: boolean; isSilent?: boolean }) {\n  await invokeRequest(new GramJs.messages.UpdatePinnedMessage({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageId,\n    ...(isUnpin && { unpin: true }),\n    ...(isOneSide && { pmOneside: true }),\n    ...(isSilent && { silent: true }),\n  }), true);\n}\n\nexport async function unpinAllMessages({ chat, threadId }: { chat: ApiChat; threadId?: number }) {\n  await invokeRequest(new GramJs.messages.UnpinAllMessages({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    ...(threadId && { topMsgId: threadId }),\n  }), true);\n}\n\nexport async function deleteMessages({\n  chat, messageIds, shouldDeleteForAll,\n}: {\n  chat: ApiChat; messageIds: number[]; shouldDeleteForAll?: boolean;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  // await Account.getCurrentAccount()?.sendPduWithCallback(new MsgDeleteReq({\n  //   msg_ids:messageIds,\n  //   chat_id:chat.id,\n  //   user_id:Account.getCurrentAccount()?.getUid()!,\n  //   revoke: shouldDeleteForAll\n  // }).pack())\n\n  // const result = await invokeRequest(\n  //   isChannel\n  //     ? new GramJs.channels.DeleteMessages({\n  //       channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  //       id: messageIds,\n  //     })\n  //     : new GramJs.messages.DeleteMessages({\n  //       id: messageIds,\n  //       ...(shouldDeleteForAll && { revoke: true }),\n  //     }),\n  // );\n  //\n  // if (!result) {\n  //   return;\n  // }\n  onUpdate({\n    '@type': 'deleteMessages',\n    ids: messageIds,\n    ...{ chatId: chat.id },\n    ...(isChannel && { chatId: chat.id }),\n  });\n}\n\nexport async function deleteScheduledMessages({\n  chat, messageIds,\n}: {\n  chat: ApiChat; messageIds: number[];\n}) {\n  const result = await invokeRequest(\n    new GramJs.messages.DeleteScheduledMessages({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      id: messageIds,\n    }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'deleteScheduledMessages',\n    ids: messageIds,\n    chatId: chat.id,\n  });\n}\n\nexport async function deleteHistory({\n  chat, shouldDeleteForAll,\n}: {\n  chat: ApiChat; shouldDeleteForAll?: boolean; maxId?: number;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n  const result = await invokeRequest(\n    isChannel\n      ? new GramJs.channels.DeleteHistory({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n      })\n      : new GramJs.messages.DeleteHistory({\n        peer: buildInputPeer(chat.id, chat.accessHash),\n        ...(shouldDeleteForAll && { revoke: true }),\n        ...(!shouldDeleteForAll && { just_clear: true }),\n      }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  if ('offset' in result && result.offset) {\n    await deleteHistory({ chat, shouldDeleteForAll });\n    return;\n  }\n\n  onUpdate({\n    '@type': 'deleteHistory',\n    chatId: chat.id,\n  });\n}\n\nexport async function reportMessages({\n  peer, messageIds, reason, description,\n}: {\n  peer: ApiChat | ApiUser; messageIds: number[]; reason: ApiReportReason; description?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.Report({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: messageIds,\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function sendMessageAction({\n  peer, threadId, action,\n}: {\n  peer: ApiChat | ApiUser; threadId?: number; action: ApiSendMessageAction;\n}) {\n  const gramAction = buildSendMessageAction(action);\n  if (!gramAction) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('Unsupported message action', action);\n    }\n    return undefined;\n  }\n\n  try {\n    const result = await invokeRequest(new GramJs.messages.SetTyping({\n      peer: buildInputPeer(peer.id, peer.accessHash),\n      topMsgId: threadId,\n      action: gramAction,\n    }), undefined, true);\n    return result;\n  } catch (error) {\n    // Prevent error from being displayed in UI\n  }\n  return undefined;\n}\n\nexport async function markMessageListRead({\n  chat, threadId, maxId = -1,\n}: {\n  chat: ApiChat; threadId: number; maxId?: number;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  // Workaround for local message IDs overflowing some internal `Buffer` range check\n  const fixedMaxId = Math.min(maxId, MAX_INT_32);\n  if (isChannel && threadId === MAIN_THREAD_ID) {\n    await invokeRequest(new GramJs.channels.ReadHistory({\n      channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n      maxId: fixedMaxId,\n    }));\n  } else if (isChannel) {\n    await invokeRequest(new GramJs.messages.ReadDiscussion({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: threadId,\n      readMaxId: fixedMaxId,\n    }));\n  } else {\n    await invokeRequest(new GramJs.messages.ReadHistory({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      maxId: fixedMaxId,\n    }));\n  }\n\n  if (threadId === MAIN_THREAD_ID) {\n    void requestChatUpdate({ chat, noLastMessage: true });\n  } else {\n    void requestThreadInfoUpdate({ chat, threadId });\n  }\n}\n\nexport async function markMessagesRead({\n  chat, messageIds,\n}: {\n  chat: ApiChat; messageIds: number[];\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  await invokeRequest(\n    isChannel\n      ? new GramJs.channels.ReadMessageContents({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        id: messageIds,\n      })\n      : new GramJs.messages.ReadMessageContents({\n        id: messageIds,\n      }),\n  );\n\n  onUpdate({\n    ...(isChannel ? {\n      '@type': 'updateChannelMessages',\n      channelId: chat.id,\n    } : {\n      '@type': 'updateCommonBoxMessages',\n    }),\n    ids: messageIds,\n    messageUpdate: {\n      hasUnreadMention: false,\n      isMediaUnread: false,\n    },\n  });\n}\n\nexport async function fetchMessageViews({\n  chat, ids,\n}: {\n  chat: ApiChat; ids: number[];\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetMessagesViews({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: ids,\n    increment: false,\n  }));\n\n  if (!result) return undefined;\n\n  return ids.map((id, index) => {\n    const { views, forwards, replies } = result.views[index];\n    return {\n      id,\n      views,\n      forwards,\n      messagesCount: replies?.replies,\n    };\n  });\n}\n\nexport async function requestThreadInfoUpdate({\n  chat, threadId, originChannelId,\n}: {\n  chat: ApiChat; threadId: number; originChannelId?: string;\n}) {\n  if (threadId === MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  const [topMessageResult, repliesResult] = await Promise.all([\n    invokeRequest(new GramJs.messages.GetDiscussionMessage({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: Number(threadId),\n    })),\n    invokeRequest(new GramJs.messages.GetReplies({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: Number(threadId),\n      offsetId: 1,\n      addOffset: -1,\n      limit: 1,\n    })),\n  ]);\n\n  if (!topMessageResult || !topMessageResult.messages.length) {\n    return undefined;\n  }\n\n  const discussionChatId = resolveMessageApiChatId(topMessageResult.messages[0]);\n  if (!discussionChatId) {\n    return undefined;\n  }\n\n  const topMessageId = topMessageResult.messages[topMessageResult.messages.length - 1].id;\n\n  onUpdate({\n    '@type': 'updateThreadInfo',\n    chatId: discussionChatId,\n    threadId: topMessageId,\n    threadInfo: {\n      threadId: topMessageId,\n      topMessageId,\n      lastReadInboxMessageId: topMessageResult.readInboxMaxId,\n      messagesCount: (repliesResult instanceof GramJs.messages.ChannelMessages) ? repliesResult.count : undefined,\n      lastMessageId: topMessageResult.maxId,\n      ...(originChannelId ? { originChannelId } : undefined),\n    },\n    firstMessageId: repliesResult && 'messages' in repliesResult && repliesResult.messages.length\n      ? repliesResult.messages[0].id\n      : undefined,\n  });\n\n  const chats = topMessageResult.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  chats.forEach((newChat) => {\n    onUpdate({\n      '@type': 'updateChat',\n      id: newChat.id,\n      chat: newChat,\n      noTopChatsRequest: true,\n    });\n  });\n\n  if (chat.isForum) {\n    onUpdate({\n      '@type': 'updateTopic',\n      chatId: chat.id,\n      topicId: threadId,\n    });\n  }\n\n  addEntitiesWithPhotosToLocalDb(topMessageResult.users);\n  addEntitiesWithPhotosToLocalDb(topMessageResult.chats);\n\n  const users = topMessageResult.users.map(buildApiUser).filter(Boolean);\n\n  return {\n    topMessageId,\n    discussionChatId,\n    users,\n  };\n}\n\nexport async function searchMessagesLocal({\n  chat, type, query, topMessageId, minDate, maxDate, ...pagination\n}: {\n  chat: ApiChat;\n  type?: ApiMessageSearchType | ApiGlobalMessageSearchType;\n  query?: string;\n  topMessageId?: number;\n  offsetId?: number;\n  addOffset?: number;\n  limit: number;\n  minDate?: number;\n  maxDate?: number;\n}) {\n  let filter;\n  switch (type) {\n    case 'media':\n      filter = new GramJs.InputMessagesFilterPhotoVideo();\n      break;\n    case 'documents':\n      filter = new GramJs.InputMessagesFilterDocument();\n      break;\n    case 'links':\n      filter = new GramJs.InputMessagesFilterUrl();\n      break;\n    case 'audio':\n      filter = new GramJs.InputMessagesFilterMusic();\n      break;\n    case 'voice':\n      filter = new GramJs.InputMessagesFilterRoundVoice();\n      break;\n    case 'profilePhoto':\n      filter = new GramJs.InputMessagesFilterChatPhotos();\n      break;\n    case 'text':\n    default: {\n      filter = new GramJs.InputMessagesFilterEmpty();\n    }\n  }\n\n  const result = await invokeRequest(new GramJs.messages.Search({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    topMsgId: topMessageId,\n    filter,\n    q: query || '',\n    minDate,\n    maxDate,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  let totalCount = messages.length;\n  let nextOffsetId: number | undefined;\n  if (result instanceof GramJs.messages.MessagesSlice || result instanceof GramJs.messages.ChannelMessages) {\n    totalCount = result.count;\n\n    if (messages.length) {\n      nextOffsetId = messages[messages.length - 1].id;\n    }\n  }\n\n  return {\n    chats,\n    users,\n    messages,\n    totalCount,\n    nextOffsetId,\n  };\n}\n\nexport async function searchMessagesGlobal({\n  query, offsetRate = 0, limit, type = 'text', minDate, maxDate,\n}: {\n  query: string;\n  offsetRate?: number;\n  limit: number;\n  type?: ApiGlobalMessageSearchType;\n  minDate?: number;\n  maxDate?: number;\n}) {\n  let filter;\n  switch (type) {\n    case 'media':\n      filter = new GramJs.InputMessagesFilterPhotoVideo();\n      break;\n    case 'documents':\n      filter = new GramJs.InputMessagesFilterDocument();\n      break;\n    case 'links':\n      filter = new GramJs.InputMessagesFilterUrl();\n      break;\n    case 'audio':\n      filter = new GramJs.InputMessagesFilterMusic();\n      break;\n    case 'voice':\n      filter = new GramJs.InputMessagesFilterRoundVoice();\n      break;\n    case 'text':\n    default: {\n      if (!query && !(maxDate && minDate)) {\n        return undefined;\n      }\n\n      filter = new GramJs.InputMessagesFilterEmpty();\n    }\n  }\n\n  const result = await invokeRequest(new GramJs.messages.SearchGlobal({\n    q: query,\n    offsetRate,\n    offsetPeer: new GramJs.InputPeerEmpty(),\n    limit,\n    filter,\n    folderId: ALL_FOLDER_ID,\n    minDate,\n    maxDate,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb({\n    chats: result.chats,\n    users: result.users,\n    messages: result.messages,\n  } as GramJs.messages.Messages);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  let totalCount = messages.length;\n  let nextRate: number | undefined;\n  if (result instanceof GramJs.messages.MessagesSlice || result instanceof GramJs.messages.ChannelMessages) {\n    totalCount = result.count;\n\n    if (messages.length) {\n      nextRate = messages[messages.length - 1].id;\n    }\n  }\n\n  return {\n    messages,\n    users,\n    chats,\n    totalCount,\n    nextRate: 'nextRate' in result && result.nextRate ? result.nextRate : nextRate,\n  };\n}\n\nexport async function fetchWebPagePreview({ message }: { message: string }) {\n  const preview = await invokeRequest(new GramJs.messages.GetWebPagePreview({\n    message,\n  }));\n\n  return preview && buildWebPage(preview);\n}\n\nexport async function sendPollVote({\n  chat, messageId, options,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  options: string[];\n}) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.SendVote({\n    peer: buildInputPeer(id, accessHash),\n    msgId: messageId,\n    options: options.map(deserializeBytes),\n  }), true);\n}\n\nexport async function closePoll({\n  chat, messageId, poll,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  poll: ApiPoll;\n}) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.EditMessage({\n    peer: buildInputPeer(id, accessHash),\n    id: messageId,\n    media: buildInputPollFromExisting(poll, true),\n  }));\n}\n\nexport async function loadPollOptionResults({\n  chat, messageId, option, offset, limit, shouldResetVoters,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  option?: string;\n  offset?: string;\n  limit?: number;\n  shouldResetVoters?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPollVotes({\n    peer: buildInputPeer(id, accessHash),\n    id: messageId,\n    ...(option && { option: deserializeBytes(option) }),\n    ...(offset && { offset }),\n    ...(limit && { limit }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb({\n    chats: [] as GramJs.TypeChat[],\n    users: result.users,\n    messages: [] as GramJs.Message[],\n  } as GramJs.messages.Messages);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const votes = result.votes.map((vote) => ({\n    userId: vote.userId,\n    date: vote.date,\n  }));\n\n  return {\n    count: result.count,\n    votes,\n    users,\n    nextOffset: result.nextOffset,\n    shouldResetVoters,\n  };\n}\n\nexport async function fetchExtendedMedia({\n  chat, ids,\n}: {\n  chat: ApiChat;\n  ids: number[];\n}) {\n  await invokeRequest(new GramJs.messages.GetExtendedMedia({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: ids,\n  }));\n}\n\nexport async function forwardMessages({\n  fromChat,\n  toChat,\n  toThreadId,\n  messages,\n  isSilent,\n  scheduledAt,\n  sendAs,\n  withMyScore,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n}: {\n  fromChat: ApiChat;\n  toChat: ApiChat;\n  toThreadId?: number;\n  messages: ApiMessage[];\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiUser | ApiChat;\n  withMyScore?: boolean;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n}) {\n  const messageIds = messages.map(({ id }) => id);\n  const randomIds = messages.map(generateRandomBigInt);\n\n  messages.forEach((message, index) => {\n    const localMessage = buildLocalForwardedMessage({\n      toChat,\n      toThreadId,\n      message,\n      scheduledAt,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n\n    localDb.localMessages[String(randomIds[index])] = localMessage;\n\n    onUpdate({\n      '@type': localMessage.isScheduled ? 'newScheduledMessage' : 'newMessage',\n      id: localMessage.id,\n      chatId: toChat.id,\n      message: localMessage,\n    });\n  });\n\n  //\n  // await invokeRequest(new GramJs.messages.ForwardMessages({\n  //   fromPeer: buildInputPeer(fromChat.id, fromChat.accessHash),\n  //   toPeer: buildInputPeer(toChat.id, toChat.accessHash),\n  //   randomId: randomIds,\n  //   id: messageIds,\n  //   withMyScore: withMyScore || undefined,\n  //   silent: isSilent || undefined,\n  //   dropAuthor: noAuthors || undefined,\n  //   dropMediaCaptions: noCaptions || undefined,\n  //   ...(toThreadId && { topMsgId: toThreadId }),\n  //   ...(scheduledAt && { scheduleDate: scheduledAt }),\n  //   ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  // }), true);\n}\n\nexport async function findFirstMessageIdAfterDate({\n  chat,\n  timestamp,\n}: {\n  chat: ApiChat;\n  timestamp: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetHistory({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    offsetDate: timestamp,\n    addOffset: -1,\n    limit: 1,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages || !result.messages.length\n  ) {\n    return undefined;\n  }\n\n  return result.messages[0].id;\n}\n\nexport async function fetchScheduledHistory({ chat }: { chat: ApiChat }) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetScheduledHistory({\n    peer: buildInputPeer(id, accessHash),\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  return {\n    messages,\n  };\n}\n\nexport async function sendScheduledMessages({ chat, ids }: { chat: ApiChat; ids: number[] }) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.SendScheduledMessages({\n    peer: buildInputPeer(id, accessHash),\n    id: ids,\n  }), true);\n}\n\nfunction updateLocalDb(result: (\n  GramJs.messages.MessagesSlice | GramJs.messages.Messages | GramJs.messages.ChannelMessages |\n  GramJs.messages.DiscussionMessage | GramJs.messages.SponsoredMessages\n)) {\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n\n  result.messages.forEach((message) => {\n    if ((message instanceof GramJs.Message && isMessageWithMedia(message))\n      || (message instanceof GramJs.MessageService && isServiceMessageWithMedia(message))\n    ) {\n      addMessageToLocalDb(message);\n    }\n  });\n}\n\nexport async function fetchPinnedMessages({ chat, threadId }: { chat: ApiChat; threadId: number }) {\n  const result = await invokeRequest(new GramJs.messages.Search(\n    {\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      filter: new GramJs.InputMessagesFilterPinned(),\n      q: '',\n      limit: PINNED_MESSAGES_LIMIT,\n      topMsgId: threadId,\n    },\n  ));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function fetchSeenBy({ chat, messageId }: { chat: ApiChat; messageId: number }) {\n  const result = await invokeRequest(new GramJs.messages.GetMessageReadParticipants({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n  }));\n\n  return result ? result.map(String) : undefined;\n}\n\nexport async function fetchSendAs({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.channels.GetSendAs({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), undefined, undefined, undefined, undefined, true);\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    users,\n    chats,\n    sendAs: result.peers.map(buildApiSendAsPeerId),\n  };\n}\n\nexport function saveDefaultSendAs({\n  sendAs, chat,\n}: {\n  sendAs: ApiChat | ApiUser; chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.SaveDefaultSendAs({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    sendAs: buildInputPeer(sendAs.id, sendAs.accessHash),\n  }));\n}\n\nexport async function fetchSponsoredMessages({ chat }: { chat: ApiChat }) {\n  const result = await invokeRequest(new GramJs.channels.GetSponsoredMessages({\n    channel: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.SponsoredMessagesEmpty || !result.messages.length) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiSponsoredMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function viewSponsoredMessage({ chat, random }: { chat: ApiChat; random: string }) {\n  await invokeRequest(new GramJs.channels.ViewSponsoredMessage({\n    channel: buildInputPeer(chat.id, chat.accessHash),\n    randomId: deserializeBytes(random),\n  }));\n}\n\nexport function readAllMentions({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.ReadMentions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), true);\n}\n\nexport function readAllReactions({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.ReadReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), true);\n}\n\nexport async function fetchUnreadMentions({\n  chat, ...pagination\n}: {\n  chat: ApiChat;\n  offsetId?: number;\n  addOffset?: number;\n  maxId?: number;\n  minId?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetUnreadMentions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    limit: MENTION_UNREAD_SLICE,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function fetchUnreadReactions({\n  chat, ...pagination\n}: {\n  chat: ApiChat;\n  offsetId?: number;\n  addOffset?: number;\n  maxId?: number;\n  minId?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetUnreadReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    limit: REACTION_UNREAD_SLICE,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function transcribeAudio({\n  chat, messageId,\n}: {\n  chat: ApiChat; messageId: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.TranscribeAudio({\n    msgId: messageId,\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) return undefined;\n\n  onUpdate({\n    '@type': 'updateTranscribedAudio',\n    isPending: result.pending,\n    transcriptionId: result.transcriptionId.toString(),\n    text: result.text,\n  });\n\n  return result.transcriptionId.toString();\n}\n\nexport async function translateText(params: TranslateTextParams) {\n  let result;\n  const isMessageTranslation = 'chat' in params;\n  if (isMessageTranslation) {\n    const { chat, messageIds, toLanguageCode } = params;\n    result = await invokeRequest(new GramJs.messages.TranslateText({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      id: messageIds,\n      toLang: toLanguageCode,\n    }));\n  } else {\n    const { text, toLanguageCode } = params;\n    result = await invokeRequest(new GramJs.messages.TranslateText({\n      text: text.map((t) => buildInputTextWithEntities(t)),\n      toLang: toLanguageCode,\n    }));\n  }\n\n  if (!result) return undefined;\n\n  const formattedText = result.result.map((r) => buildApiFormattedText(r));\n\n  if (isMessageTranslation) {\n    onUpdate({\n      '@type': 'updateMessageTranslations',\n      chatId: params.chat.id,\n      messageIds: params.messageIds,\n      translations: formattedText,\n      toLanguageCode: params.toLanguageCode,\n    });\n  }\n\n  return formattedText;\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  OnApiUpdate, ApiUser, ApiChat, ApiSticker,\n} from '../../types';\n\nimport { COMMON_CHATS_LIMIT, PROFILE_PHOTOS_LIMIT } from '../../../config';\nimport { invokeRequest } from './client';\nimport { searchMessagesLocal } from './messages';\nimport {\n  buildInputEntity,\n  buildInputPeer,\n  buildInputContact,\n  buildMtpPeerId,\n  getEntityTypeById,\n  buildInputEmojiStatus,\n} from '../gramjsBuilders';\nimport { buildApiUser, buildApiUserFromFull, buildApiUsersAndStatuses } from '../apiBuilders/users';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { buildApiPhoto } from '../apiBuilders/common';\nimport { addEntitiesWithPhotosToLocalDb, addPhotoToLocalDb, addUserToLocalDb } from '../helpers';\nimport { buildApiPeerId } from '../apiBuilders/peers';\nimport localDb from '../localDb';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchFullUser({\n  id,\n  accessHash,\n}: {\n  id: string;\n  accessHash?: string;\n}) {\n  const input = buildInputEntity(id, accessHash);\n  if (!(input instanceof GramJs.InputUser)) {\n    return undefined;\n  }\n\n  const fullInfo = await invokeRequest(new GramJs.users.GetFullUser({ id: input }));\n\n  if (!fullInfo) {\n    return undefined;\n  }\n\n  updateLocalDb(fullInfo);\n  addUserToLocalDb(fullInfo.users[0], true);\n\n  if (fullInfo.fullUser.profilePhoto instanceof GramJs.Photo) {\n    localDb.photos[fullInfo.fullUser.profilePhoto.id.toString()] = fullInfo.fullUser.profilePhoto;\n  }\n\n  if (fullInfo.fullUser.personalPhoto instanceof GramJs.Photo) {\n    localDb.photos[fullInfo.fullUser.personalPhoto.id.toString()] = fullInfo.fullUser.personalPhoto;\n  }\n\n  if (fullInfo.fullUser.fallbackPhoto instanceof GramJs.Photo) {\n    localDb.photos[fullInfo.fullUser.fallbackPhoto.id.toString()] = fullInfo.fullUser.fallbackPhoto;\n  }\n\n  const botInfo = fullInfo.fullUser.botInfo;\n  if (botInfo?.descriptionPhoto instanceof GramJs.Photo) {\n    localDb.photos[botInfo.descriptionPhoto.id.toString()] = botInfo.descriptionPhoto;\n  }\n  if (botInfo?.descriptionDocument instanceof GramJs.Document) {\n    localDb.documents[botInfo.descriptionDocument.id.toString()] = botInfo.descriptionDocument;\n  }\n\n  const userWithFullInfo = buildApiUserFromFull(fullInfo);\n  const user = buildApiUser(fullInfo.users[0]);\n\n  onUpdate({\n    '@type': 'updateUser',\n    id,\n    user: {\n      ...user,\n      avatarHash: user?.avatarHash || undefined,\n      fullInfo: userWithFullInfo.fullInfo,\n    },\n  });\n\n  return userWithFullInfo;\n}\n\nexport async function fetchCommonChats(id: string, accessHash?: string, maxId?: string) {\n  const commonChats = await invokeRequest(new GramJs.messages.GetCommonChats({\n    userId: buildInputEntity(id, accessHash) as GramJs.InputUser,\n    maxId: maxId ? buildMtpPeerId(maxId, getEntityTypeById(maxId)) : undefined,\n    limit: COMMON_CHATS_LIMIT,\n  }));\n\n  if (!commonChats) {\n    return undefined;\n  }\n\n  updateLocalDb(commonChats);\n\n  const chatIds: string[] = [];\n  const chats: ApiChat[] = [];\n\n  commonChats.chats.forEach((mtpChat) => {\n    const chat = buildApiChatFromPreview(mtpChat);\n\n    if (chat) {\n      chats.push(chat);\n      chatIds.push(chat.id);\n    }\n  });\n\n  return { chats, chatIds, isFullyLoaded: chatIds.length < COMMON_CHATS_LIMIT };\n}\n\nexport async function fetchNearestCountry() {\n  const dcInfo = await invokeRequest(new GramJs.help.GetNearestDc());\n\n  return dcInfo?.country;\n}\n\nexport async function fetchTopUsers() {\n  const topPeers = await invokeRequest(new GramJs.contacts.GetTopPeers({\n    correspondents: true,\n  }));\n  if (!(topPeers instanceof GramJs.contacts.TopPeers)) {\n    return undefined;\n  }\n\n  const users = topPeers.users.map(buildApiUser).filter((user) => Boolean(user) && !user.isSelf) as ApiUser[];\n  const ids = users.map(({ id }) => id);\n\n  return {\n    ids,\n    users,\n  };\n}\n\nexport async function fetchContactList() {\n  const result = await invokeRequest(new GramJs.contacts.GetContacts({ hash: BigInt('0') }));\n  if (!result || result instanceof GramJs.contacts.ContactsNotModified) {\n    return undefined;\n  }\n\n  result.users.forEach((user) => {\n    if (user instanceof GramJs.User) {\n      addUserToLocalDb(user, true);\n    }\n  });\n\n  const { users, userStatusesById } = buildApiUsersAndStatuses(result.users);\n\n  return {\n    users,\n    userStatusesById,\n    chats: result.users.map((user) => buildApiChatFromPreview(user)).filter(Boolean),\n  };\n}\n\nexport async function fetchUsers({ users }: { users: ApiUser[] }) {\n  const result = await invokeRequest(new GramJs.users.GetUsers({\n    id: users.map(({ id, accessHash }) => buildInputPeer(id, accessHash)),\n  }));\n  if (!result || !result.length) {\n    return undefined;\n  }\n\n  result.forEach((user) => {\n    if (user instanceof GramJs.User) {\n      addUserToLocalDb(user, true);\n    }\n  });\n\n  return buildApiUsersAndStatuses(result);\n}\n\nexport async function importContact({\n  phone,\n  firstName,\n  lastName,\n}: {\n  phone?: string;\n  firstName?: string;\n  lastName?: string;\n}) {\n  const result = await invokeRequest(new GramJs.contacts.ImportContacts({\n    contacts: [buildInputContact({\n      phone: phone || '',\n      firstName: firstName || '',\n      lastName: lastName || '',\n    })],\n  }));\n\n  if (result instanceof GramJs.contacts.ImportedContacts && result.users.length) {\n    addUserToLocalDb(result.users[0]);\n  }\n\n  return result?.imported.length ? buildApiPeerId(result.imported[0].userId, 'user') : undefined;\n}\n\nexport function updateContact({\n  id,\n  accessHash,\n  phoneNumber = '',\n  firstName = '',\n  lastName = '',\n  shouldSharePhoneNumber = false,\n}: {\n  id: string;\n  accessHash?: string;\n  phoneNumber?: string;\n  firstName?: string;\n  lastName?: string;\n  shouldSharePhoneNumber?: boolean;\n}) {\n  return invokeRequest(new GramJs.contacts.AddContact({\n    id: buildInputEntity(id, accessHash) as GramJs.InputUser,\n    firstName,\n    lastName,\n    phone: phoneNumber,\n    ...(shouldSharePhoneNumber && { addPhonePrivacyException: shouldSharePhoneNumber }),\n  }), true);\n}\n\nexport async function deleteContact({\n  id,\n  accessHash,\n}: {\n  id: string;\n  accessHash?: string;\n}) {\n  const input = buildInputEntity(id, accessHash);\n  if (!(input instanceof GramJs.InputUser)) {\n    return;\n  }\n\n  const result = await invokeRequest(new GramJs.contacts.DeleteContacts({ id: [input] }));\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'deleteContact',\n    id,\n  });\n}\n\nexport async function fetchProfilePhotos(user?: ApiUser, chat?: ApiChat) {\n  if (user) {\n    const { id, accessHash } = user;\n\n    const result = await invokeRequest(new GramJs.photos.GetUserPhotos({\n      userId: buildInputEntity(id, accessHash) as GramJs.InputUser,\n      limit: PROFILE_PHOTOS_LIMIT,\n      offset: 0,\n      maxId: BigInt('0'),\n    }));\n\n    if (!result) {\n      return undefined;\n    }\n\n    updateLocalDb(result);\n\n    return {\n      photos: result.photos\n        .filter((photo): photo is GramJs.Photo => photo instanceof GramJs.Photo)\n        .map((photo) => buildApiPhoto(photo)),\n      users: result.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n\n  const result = await searchMessagesLocal({\n    chat: chat!,\n    type: 'profilePhoto',\n    limit: PROFILE_PHOTOS_LIMIT,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  const { messages, users } = result;\n\n  return {\n    photos: messages.map((message) => message.content.action!.photo).filter(Boolean),\n    users,\n  };\n}\n\nexport function reportSpam(userOrChat: ApiUser | ApiChat) {\n  const { id, accessHash } = userOrChat;\n\n  return invokeRequest(new GramJs.messages.ReportSpam({\n    peer: buildInputPeer(id, accessHash),\n  }), true);\n}\n\nexport function updateEmojiStatus(emojiStatus: ApiSticker, expires?: number) {\n  return invokeRequest(new GramJs.account.UpdateEmojiStatus({\n    emojiStatus: buildInputEmojiStatus(emojiStatus, expires),\n  }), true);\n}\n\nfunction updateLocalDb(result: (GramJs.photos.Photos | GramJs.photos.PhotosSlice | GramJs.messages.Chats)) {\n  if ('chats' in result) {\n    addEntitiesWithPhotosToLocalDb(result.chats);\n  }\n\n  if ('photos' in result) {\n    result.photos.forEach(addPhotoToLocalDb);\n  }\n\n  if ('users' in result) {\n    addEntitiesWithPhotosToLocalDb(result.users);\n  }\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiStickerSetInfo, ApiSticker, ApiVideo, OnApiUpdate,\n} from '../../types';\n\nimport { invokeRequest } from './client';\nimport {\n  buildStickerSet, buildStickerSetCovered, processStickerPackResult, processStickerResult,\n} from '../apiBuilders/symbols';\nimport { buildApiUserEmojiStatus } from '../apiBuilders/users';\nimport { buildInputStickerSet, buildInputDocument, buildInputStickerSetShortName } from '../gramjsBuilders';\nimport { buildVideoFromDocument } from '../apiBuilders/messages';\nimport { DEFAULT_GIF_SEARCH_BOT_USERNAME, RECENT_STATUS_LIMIT, RECENT_STICKERS_LIMIT } from '../../../config';\n\nimport localDb from '../localDb';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchCustomEmojiSets({ hash = '0' }: { hash?: string }) {\n  const allStickers = await invokeRequest(new GramJs.messages.GetEmojiStickers({ hash: BigInt(hash) }));\n\n  if (!allStickers || allStickers instanceof GramJs.messages.AllStickersNotModified) {\n    return undefined;\n  }\n\n  allStickers.sets.forEach((stickerSet) => {\n    if (stickerSet.thumbs?.length || stickerSet.thumbDocumentId) {\n      localDb.stickerSets[String(stickerSet.id)] = stickerSet;\n    }\n  });\n\n  return {\n    hash: String(allStickers.hash),\n    sets: allStickers.sets.map(buildStickerSet),\n  };\n}\n\nexport async function fetchStickerSets({ hash = '0' }: { hash?: string }) {\n  const allStickers = await invokeRequest(new GramJs.messages.GetAllStickers({ hash: BigInt(hash) }));\n\n  if (!allStickers || allStickers instanceof GramJs.messages.AllStickersNotModified) {\n    return undefined;\n  }\n\n  allStickers.sets.forEach((stickerSet) => {\n    if (stickerSet.thumbs?.length) {\n      localDb.stickerSets[String(stickerSet.id)] = stickerSet;\n    }\n  });\n\n  return {\n    hash: String(allStickers.hash),\n    sets: allStickers.sets.map(buildStickerSet),\n  };\n}\n\nexport async function fetchRecentStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetRecentStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.RecentStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    stickers: processStickerResult(result.stickers.slice(0, RECENT_STICKERS_LIMIT)),\n  };\n}\n\nexport async function fetchFavoriteStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetFavedStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.FavedStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    stickers: processStickerResult(result.stickers),\n  };\n}\n\nexport async function fetchFeaturedStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetFeaturedStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.FeaturedStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    isPremium: Boolean(result.premium),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function fetchFeaturedEmojiStickers() {\n  const result = await invokeRequest(new GramJs.messages.GetFeaturedEmojiStickers({ hash: BigInt(0) }));\n\n  if (!result || result instanceof GramJs.messages.FeaturedStickersNotModified) {\n    return undefined;\n  }\n\n  result.sets.forEach(({ set }) => {\n    if (set.thumbDocumentId) {\n      localDb.stickerSets[String(set.id)] = set;\n    }\n  });\n\n  return {\n    isPremium: Boolean(result.premium),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function faveSticker({\n  sticker,\n  unfave,\n}: {\n  sticker: ApiSticker;\n  unfave?: boolean;\n}) {\n  const request = new GramJs.messages.FaveSticker({\n    id: buildInputDocument(sticker),\n    unfave,\n  });\n\n  const result = await invokeRequest(request);\n  if (result) {\n    onUpdate({\n      '@type': 'updateFavoriteStickers',\n    });\n  }\n}\n\nexport function removeRecentSticker({\n  sticker,\n}: {\n  sticker: ApiSticker;\n}) {\n  const request = new GramJs.messages.SaveRecentSticker({\n    id: buildInputDocument(sticker),\n    unsave: true,\n  });\n\n  return invokeRequest(request);\n}\n\nexport function clearRecentStickers() {\n  return invokeRequest(new GramJs.messages.ClearRecentStickers());\n}\n\nexport async function fetchStickers(\n  { stickerSetInfo }:\n  { stickerSetInfo: ApiStickerSetInfo },\n) {\n  if ('isMissing' in stickerSetInfo) return undefined;\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: 'id' in stickerSetInfo\n      ? buildInputStickerSet(stickerSetInfo.id, stickerSetInfo.accessHash)\n      : buildInputStickerSetShortName(stickerSetInfo.shortName),\n  }), undefined, true);\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  localDb.stickerSets[String(result.set.id)] = result.set;\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n    packs: processStickerPackResult(result.packs),\n  };\n}\n\nexport async function fetchCustomEmoji({ documentId }: { documentId: string[] }) {\n  if (!documentId.length) return undefined;\n  const result = await invokeRequest(new GramJs.messages.GetCustomEmojiDocuments({\n    documentId: documentId.map((id) => BigInt(id)),\n  }));\n  if (!result) return undefined;\n\n  return processStickerResult(result);\n}\n\nexport async function fetchAnimatedEmojis() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetAnimatedEmoji(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchAnimatedEmojiEffects() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetAnimatedEmojiAnimations(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchGenericEmojiEffects() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetEmojiGenericAnimations(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchPremiumGifts() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetPremiumGifts(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchDefaultTopicIcons() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetEmojiDefaultTopicIcons(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchDefaultStatusEmojis() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetEmojiDefaultStatuses(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function searchStickers({ query, hash = '0' }: { query: string; hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.SearchStickerSets({\n    q: query,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.FoundStickerSetsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function fetchSavedGifs({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetSavedGifs({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.SavedGifsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    gifs: processGifResult(result.gifs),\n  };\n}\n\nexport function saveGif({ gif, shouldUnsave }: { gif: ApiVideo; shouldUnsave?: boolean }) {\n  const request = new GramJs.messages.SaveGif({\n    id: buildInputDocument(gif),\n    unsave: shouldUnsave,\n  });\n\n  return invokeRequest(request, true);\n}\n\nexport async function installStickerSet({ stickerSetId, accessHash }: { stickerSetId: string; accessHash: string }) {\n  const result = await invokeRequest(new GramJs.messages.InstallStickerSet({\n    stickerset: buildInputStickerSet(stickerSetId, accessHash),\n  }));\n\n  if (result) {\n    onUpdate({\n      '@type': 'updateStickerSet',\n      id: stickerSetId,\n      stickerSet: { installedDate: Date.now() },\n    });\n  }\n}\n\nexport async function uninstallStickerSet({ stickerSetId, accessHash }: { stickerSetId: string; accessHash: string }) {\n  const result = await invokeRequest(new GramJs.messages.UninstallStickerSet({\n    stickerset: buildInputStickerSet(stickerSetId, accessHash),\n  }));\n\n  if (result) {\n    onUpdate({\n      '@type': 'updateStickerSet',\n      id: stickerSetId,\n      stickerSet: { installedDate: undefined },\n    });\n  }\n}\n\nlet inputGifBot: GramJs.InputUser | undefined;\n\nexport async function searchGifs({\n  query,\n  offset = '',\n  username = DEFAULT_GIF_SEARCH_BOT_USERNAME,\n}: { query: string; offset?: string; username?: string }) {\n  if (!inputGifBot) {\n    const resolvedPeer = await invokeRequest(new GramJs.contacts.ResolveUsername({\n      username,\n    }));\n    if (!resolvedPeer || !(resolvedPeer.users[0] instanceof GramJs.User)) {\n      return undefined;\n    }\n\n    inputGifBot = new GramJs.InputUser({\n      userId: (resolvedPeer.peer as GramJs.PeerUser).userId,\n      accessHash: resolvedPeer.users[0].accessHash!,\n    });\n  }\n\n  const result = await invokeRequest(new GramJs.messages.GetInlineBotResults({\n    bot: inputGifBot,\n    peer: new GramJs.InputPeerEmpty(),\n    query,\n    offset,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const documents = result.results\n    .map((foundGif) => {\n      if (foundGif instanceof GramJs.BotInlineMediaResult) {\n        return foundGif.document;\n      }\n\n      return undefined;\n    })\n    .filter(Boolean);\n\n  return {\n    nextOffset: result.nextOffset,\n    gifs: processGifResult(documents),\n  };\n}\n\nexport async function fetchStickersForEmoji({\n  emoji, hash = '0',\n}: { emoji: string; hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetStickers({\n    emoticon: emoji,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.StickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    stickers: processStickerResult(result.stickers),\n    hash: String(result.hash),\n  };\n}\n\nexport async function fetchEmojiKeywords({ language, fromVersion }: {\n  language: string;\n  fromVersion?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetEmojiKeywordsDifference({\n    langCode: language,\n    fromVersion,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    language: result.langCode,\n    version: result.version,\n    keywords: result.keywords.reduce((acc, emojiKeyword) => {\n      acc[emojiKeyword.keyword] = emojiKeyword.emoticons;\n\n      return acc;\n    }, {} as Record<string, string[]>),\n  };\n}\n\nexport async function fetchRecentEmojiStatuses(hash = '0') {\n  const result = await invokeRequest(new GramJs.account.GetRecentEmojiStatuses({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.account.EmojiStatusesNotModified) {\n    return undefined;\n  }\n\n  const documentIds = result.statuses\n    .slice(0, RECENT_STATUS_LIMIT)\n    .map(buildApiUserEmojiStatus)\n    .filter(Boolean)\n    .map(({ documentId }) => documentId);\n  const emojiStatuses = await fetchCustomEmoji({ documentId: documentIds });\n\n  return {\n    hash: String(result.hash),\n    emojiStatuses,\n  };\n}\n\nfunction processGifResult(gifs: GramJs.TypeDocument[]) {\n  return gifs\n    .map((document) => {\n      if (document instanceof GramJs.Document) {\n        const gif = buildVideoFromDocument(document);\n        if (gif) {\n          localDb.documents[String(document.id)] = document;\n\n          return gif;\n        }\n      }\n\n      return undefined;\n    })\n    .filter(Boolean);\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport { invokeRequest } from './client';\nimport { buildInputEntity, buildInputPeer } from '../gramjsBuilders';\nimport type {\n  ApiChat, ApiError, ApiUser, OnApiUpdate,\n} from '../../types';\n\nimport { USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { buildApiExportedInvite, buildChatInviteImporter } from '../apiBuilders/chats';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\nlet onUpdate: OnApiUpdate;\n\nexport const ACCEPTABLE_USERNAME_ERRORS = new Set([USERNAME_PURCHASE_ERROR, 'USERNAME_INVALID']);\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function checkChatUsername({ username }: { username: string }) {\n  try {\n    const result = await invokeRequest(new GramJs.channels.CheckUsername({\n      channel: new GramJs.InputChannelEmpty(),\n      username,\n    }), undefined, true);\n\n    return { result, error: undefined };\n  } catch (error) {\n    const errorMessage = (error as ApiError).message;\n\n    if (ACCEPTABLE_USERNAME_ERRORS.has(errorMessage)) {\n      return {\n        result: false,\n        error: errorMessage,\n      };\n    }\n\n    throw error;\n  }\n}\n\nexport async function setChatUsername(\n  { chat, username }: { chat: ApiChat; username: string },\n) {\n  const result = await invokeRequest(new GramJs.channels.UpdateUsername({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    username,\n  }));\n\n  const usernames = chat.usernames\n    ? chat.usernames.map((u) => (u.isEditable ? { ...u, username } : u))\n    : [{ username, isEditable: true, isActive: true }];\n\n  if (result) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: chat.id,\n      chat: { usernames },\n    });\n  }\n\n  return result;\n}\n\nexport async function updatePrivateLink({\n  chat, usageLimit, expireDate,\n}: {\n  chat: ApiChat; usageLimit?: number; expireDate?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.ExportChatInvite({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    usageLimit,\n    expireDate,\n  }));\n\n  if (!(result instanceof GramJs.ChatInviteExported)) return undefined;\n\n  onUpdate({\n    '@type': 'updateChatFullInfo',\n    id: chat.id,\n    fullInfo: {\n      inviteLink: result.link,\n    },\n  });\n\n  return result.link;\n}\n\nexport async function fetchExportedChatInvites({\n  peer, admin, limit = 0, isRevoked,\n}: { peer: ApiChat; admin: ApiUser; limit?: number; isRevoked?: boolean }) {\n  const exportedInvites = await invokeRequest(new GramJs.messages.GetExportedChatInvites({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    adminId: buildInputEntity(admin.id, admin.accessHash) as GramJs.InputUser,\n    limit,\n    revoked: isRevoked || undefined,\n  }));\n\n  if (!exportedInvites) return undefined;\n  addEntitiesWithPhotosToLocalDb(exportedInvites.users);\n\n  const invites = (exportedInvites.invites\n    .filter((invite): invite is GramJs.ChatInviteExported => invite instanceof GramJs.ChatInviteExported))\n    .map(buildApiExportedInvite);\n\n  return {\n    invites,\n    users: exportedInvites.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport async function editExportedChatInvite({\n  peer, isRevoked, link, expireDate, usageLimit, isRequestNeeded, title,\n}: {\n  peer: ApiChat;\n  isRevoked?: boolean;\n  link: string;\n  expireDate?: number;\n  usageLimit?: number;\n  isRequestNeeded?: boolean;\n  title?: string;\n}) {\n  const invite = await invokeRequest(new GramJs.messages.EditExportedChatInvite({\n    link,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    expireDate,\n    usageLimit: !isRequestNeeded ? usageLimit : undefined,\n    requestNeeded: isRequestNeeded,\n    title,\n    revoked: isRevoked || undefined,\n  }));\n\n  if (!invite) return undefined;\n\n  addEntitiesWithPhotosToLocalDb(invite.users);\n  if (invite instanceof GramJs.messages.ExportedChatInvite && invite.invite instanceof GramJs.ChatInviteExported) {\n    const replaceInvite = buildApiExportedInvite(invite.invite);\n    return {\n      oldInvite: replaceInvite,\n      newInvite: replaceInvite,\n      users: invite.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n\n  if (invite instanceof GramJs.messages.ExportedChatInviteReplaced\n    && invite.invite instanceof GramJs.ChatInviteExported\n    && invite.newInvite instanceof GramJs.ChatInviteExported) {\n    const oldInvite = buildApiExportedInvite(invite.invite);\n    const newInvite = buildApiExportedInvite(invite.newInvite);\n    return {\n      oldInvite,\n      newInvite,\n      users: invite.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n  return undefined;\n}\n\nexport async function exportChatInvite({\n  peer, expireDate, usageLimit, isRequestNeeded, title,\n}: {\n  peer: ApiChat;\n  expireDate?: number;\n  usageLimit?: number;\n  isRequestNeeded?: boolean;\n  title?: string;\n}) {\n  const invite = await invokeRequest(new GramJs.messages.ExportChatInvite({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    expireDate,\n    usageLimit: !isRequestNeeded ? usageLimit : undefined,\n    requestNeeded: isRequestNeeded || undefined,\n    title,\n  }));\n\n  if (!(invite instanceof GramJs.ChatInviteExported)) return undefined;\n  return buildApiExportedInvite(invite);\n}\n\nexport async function deleteExportedChatInvite({\n  peer, link,\n}: {\n  peer: ApiChat; link: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.DeleteExportedChatInvite({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    link,\n  }));\n\n  return result;\n}\n\nexport async function deleteRevokedExportedChatInvites({\n  peer, admin,\n}: {\n  peer: ApiChat; admin: ApiUser;\n}) {\n  const result = await invokeRequest(new GramJs.messages.DeleteRevokedExportedChatInvites({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    adminId: buildInputEntity(admin.id, admin.accessHash) as GramJs.InputUser,\n  }));\n\n  return result;\n}\n\nexport async function fetchChatInviteImporters({\n  peer, link, offsetDate = 0, offsetUser, limit = 0, isRequested,\n}: {\n  peer: ApiChat; link?: string; offsetDate?: number; offsetUser?: ApiUser; limit?: number; isRequested?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetChatInviteImporters({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    link,\n    offsetDate,\n    offsetUser: offsetUser\n      ? buildInputEntity(offsetUser.id, offsetUser.accessHash) as GramJs.InputUser : new GramJs.InputUserEmpty(),\n    limit,\n    requested: isRequested || undefined,\n  }));\n\n  if (!result) return undefined;\n  const users = result.users.map((user) => buildApiUser(user)).filter(Boolean);\n  addEntitiesWithPhotosToLocalDb(result.users);\n  return {\n    importers: result.importers.map((importer) => buildChatInviteImporter(importer)),\n    users: buildCollectionByKey(users, 'id'),\n  };\n}\n\nexport function hideChatJoinRequest({\n  peer,\n  user,\n  isApproved,\n}: {\n  peer: ApiChat;\n  user: ApiUser;\n  isApproved: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.HideChatJoinRequest({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    approved: isApproved || undefined,\n  }), true);\n}\n\nexport function hideAllChatJoinRequests({\n  peer,\n  isApproved,\n  link,\n}: {\n  peer: ApiChat;\n  isApproved: boolean;\n  link?: string;\n}) {\n  return invokeRequest(new GramJs.messages.HideAllChatJoinRequests({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    approved: isApproved || undefined,\n    link,\n  }), true);\n}\n\nexport function hideChatReportPanel(chat: ApiChat) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.messages.HidePeerSettingsBar({\n    peer: buildInputPeer(id, accessHash),\n  }));\n}\n","import { Api as GramJs, errors } from '../../../lib/gramjs';\n\nimport type { OnApiUpdate } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { invokeRequest, updateTwoFaSettings, getTmpPassword } from './client';\n\nconst ApiErrors: { [k: string]: string } = {\n  EMAIL_UNCONFIRMED: 'Email unconfirmed',\n  EMAIL_HASH_EXPIRED: 'Email hash expired',\n  NEW_SALT_INVALID: 'The new salt is invalid',\n  NEW_SETTINGS_INVALID: 'The new password settings are invalid',\n  CODE_INVALID: 'Invalid Code',\n  PASSWORD_HASH_INVALID: 'Invalid Password',\n};\n\nconst emailCodeController: {\n  resolve?: Function;\n  reject?: Function;\n} = {};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function getPasswordInfo() {\n  const result = await invokeRequest(new GramJs.account.GetPassword());\n  if (!result) {\n    return undefined;\n  }\n\n  const { hint, hasPassword } = result;\n\n  return { hint, hasPassword };\n}\n\nfunction onRequestEmailCode(length: number) {\n  onUpdate({\n    '@type': 'updateTwoFaStateWaitCode',\n    length,\n  });\n\n  return new Promise<string>((resolve, reject) => {\n    emailCodeController.resolve = resolve;\n    emailCodeController.reject = reject;\n  });\n}\n\nexport function getTemporaryPaymentPassword(password: string, ttl?: number) {\n  return getTmpPassword(password, ttl);\n}\n\nexport async function checkPassword(currentPassword: string) {\n  try {\n    await updateTwoFaSettings({ isCheckPassword: true, currentPassword });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function clearPassword(currentPassword: string) {\n  try {\n    await updateTwoFaSettings({ currentPassword });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function updatePassword(currentPassword: string, password: string, hint?: string, email?: string) {\n  try {\n    await updateTwoFaSettings({\n      currentPassword,\n      newPassword: password,\n      hint,\n      email,\n      emailCodeCallback: onRequestEmailCode,\n      onEmailCodeError: onError,\n    });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function updateRecoveryEmail(currentPassword: string, email: string) {\n  try {\n    await updateTwoFaSettings({\n      currentPassword,\n      newPassword: currentPassword,\n      email,\n      emailCodeCallback: onRequestEmailCode,\n      onEmailCodeError: onError,\n    });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport function provideRecoveryEmailCode(code: string) {\n  emailCodeController.resolve!(code);\n}\n\nfunction onError(err: Error) {\n  let message: string;\n\n  if (err instanceof errors.FloodWaitError) {\n    const hours = Math.ceil(Number(err.seconds) / 60 / 60);\n    message = `Too many attempts. Try again in ${hours > 1 ? `${hours} hours` : 'an hour'}`;\n  } else {\n    message = ApiErrors[err.message];\n  }\n\n  if (!message) {\n    message = 'Unexpected Error';\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n\n  onUpdate({\n    '@type': 'updateTwoFaError',\n    message,\n  });\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiThemeParameters, ApiUser, OnApiUpdate,\n} from '../../types';\n\nimport localDb from '../localDb';\nimport { invokeRequest } from './client';\nimport { buildInputPeer, buildInputThemeParams, generateRandomBigInt } from '../gramjsBuilders';\nimport { buildApiUser } from '../apiBuilders/users';\nimport {\n  buildApiAttachBot, buildApiBotInlineMediaResult, buildApiBotInlineResult, buildBotSwitchPm,\n} from '../apiBuilders/bots';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { addEntitiesWithPhotosToLocalDb, addUserToLocalDb, deserializeBytes } from '../helpers';\nimport { omitVirtualClassFields } from '../apiBuilders/helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { buildApiUrlAuthResult } from '../apiBuilders/misc';\nimport Account from \"../../../worker/share/Account\";\nimport AnswerCallbackButtonRes from '../../../lib/ptp/protobuf/PTPMsg/AnswerCallbackButtonRes';\nimport {AnswerCallbackButtonReq} from \"../../../lib/ptp/protobuf/PTPMsg\";\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function answerCallbackButton({\n  chatId, accessHash, messageId, data, isGame,\n}: {\n  chatId: string; accessHash?: string; messageId: number; data?: string; isGame?: boolean;\n}) {\n  const pdu = await Account.getCurrentAccount()?.sendPduWithCallback(new AnswerCallbackButtonReq({\n    chatId,accessHash,messageId,data,isGame\n  }).pack())\n  if(!pdu){\n    return undefined\n  }\n  const result = AnswerCallbackButtonRes.parseMsg(pdu)\n  return result\n}\n\nexport async function fetchTopInlineBots() {\n  const topPeers = await invokeRequest(new GramJs.contacts.GetTopPeers({\n    botsInline: true,\n  }));\n\n  if (!(topPeers instanceof GramJs.contacts.TopPeers)) {\n    return undefined;\n  }\n\n  const users = topPeers.users.map(buildApiUser).filter(Boolean);\n  const ids = users.map(({ id }) => id);\n\n  return {\n    ids,\n    users,\n  };\n}\n\nexport async function fetchInlineBot({ username }: { username: string }) {\n  const resolvedPeer = await invokeRequest(new GramJs.contacts.ResolveUsername({ username }));\n\n  if (\n    !resolvedPeer\n    || !(\n      resolvedPeer.users[0] instanceof GramJs.User\n      && resolvedPeer.users[0].bot\n      && resolvedPeer.users[0].botInlinePlaceholder\n    )\n  ) {\n    return undefined;\n  }\n\n  addUserToLocalDb(resolvedPeer.users[0]);\n\n  return {\n    user: buildApiUser(resolvedPeer.users[0]),\n    chat: buildApiChatFromPreview(resolvedPeer.users[0]),\n  };\n}\n\nexport async function fetchInlineBotResults({\n  bot, chat, query, offset = '',\n}: {\n  bot: ApiUser; chat: ApiChat; query: string; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetInlineBotResults({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    query,\n    offset,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    isGallery: Boolean(result.gallery),\n    help: bot.botPlaceholder,\n    nextOffset: getInlineBotResultsNextOffset(bot.usernames![0].username, result.nextOffset),\n    switchPm: buildBotSwitchPm(result.switchPm),\n    users: result.users.map(buildApiUser).filter(Boolean),\n    results: processInlineBotResult(String(result.queryId), result.results),\n    cacheTime: result.cacheTime,\n  };\n}\n\nexport async function sendInlineBotResult({\n  chat, replyingToTopId, resultId, queryId, replyingTo, sendAs, isSilent, scheduleDate,\n}: {\n  chat: ApiChat;\n  replyingToTopId?: number;\n  resultId: string;\n  queryId: string;\n  replyingTo?: number;\n  sendAs?: ApiUser | ApiChat;\n  isSilent?: boolean;\n  scheduleDate?: number;\n}) {\n  const randomId = generateRandomBigInt();\n\n  await invokeRequest(new GramJs.messages.SendInlineBotResult({\n    clearDraft: true,\n    randomId,\n    queryId: BigInt(queryId),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: resultId,\n    scheduleDate,\n    ...(replyingToTopId && { topMsgId: replyingToTopId }),\n    ...(isSilent && { silent: true }),\n    ...(replyingTo && { replyToMsgId: replyingTo }),\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }), true);\n}\n\nexport async function startBot({\n  bot, startParam,\n}: {\n  bot: ApiUser;\n  startParam?: string;\n}) {\n  const randomId = generateRandomBigInt();\n\n  await invokeRequest(new GramJs.messages.StartBot({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    peer: buildInputPeer(bot.id, bot.accessHash),\n    randomId,\n    startParam,\n  }), true);\n}\n\nexport async function requestWebView({\n  isSilent,\n  peer,\n  bot,\n  url,\n  startParam,\n  replyToMessageId,\n  threadId,\n  theme,\n  sendAs,\n  isFromBotMenu,\n}: {\n  isSilent?: boolean;\n  peer: ApiChat | ApiUser;\n  bot: ApiUser;\n  url?: string;\n  startParam?: string;\n  replyToMessageId?: number;\n  threadId?: number;\n  theme?: ApiThemeParameters;\n  sendAs?: ApiUser | ApiChat;\n  isFromBotMenu?: boolean;\n}) {\n  // const result = await invokeRequest(new GramJs.messages.RequestWebView({\n  //   silent: isSilent || undefined,\n  //   peer: buildInputPeer(peer.id, peer.accessHash),\n  //   bot: buildInputPeer(bot.id, bot.accessHash),\n  //   replyToMsgId: replyToMessageId,\n  //   url,\n  //   startParam,\n  //   themeParams: theme ? buildInputThemeParams(theme) : undefined,\n  //   fromBotMenu: isFromBotMenu || undefined,\n  //   platform: 'webz',\n  //   ...(threadId && { topMsgId: threadId }),\n  //   ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  // }));\n  //\n  // if (result instanceof GramJs.WebViewResultUrl) {\n  //   return {\n  //     url: result.url,\n  //     queryId: result.queryId.toString(),\n  //   };\n  // }\n  return {\n      url: `https://webappcontent.telegram.org/cafe/?mode=menu#tgWebAppData=query_id%3DAAHFY2V2AgAAAMVjZXb0KFJb%26user%3D%257B%2522id%2522%253A6281323461%252C%2522first_name%2522%253A%2522Wai%2522%252C%2522last_name%2522%253A%2522Chat%2522%252C%2522username%2522%253A%2522wai_chat%2522%252C%2522language_code%2522%253A%2522en%2522%257D%26auth_date%3D1680293757%26hash%3D513a7167671bc1e80c1d95c168231a1a4f32511942a2bfae25c2640e1c925a7f&tgWebAppVersion=6.4&tgWebAppPlatform=webz&tgWebAppThemeParams=%7B\"bg_color\"%3A\"%23212121\"%2C\"text_color\"%3A\"%23ffffff\"%2C\"hint_color\"%3A\"%23aaaaaa\"%2C\"link_color\"%3A\"%238774e1\"%2C\"button_color\"%3A\"%238774e1\"%2C\"button_text_color\"%3A\"%23ffffff\"%2C\"secondary_bg_color\"%3A\"%230f0f0f\"%7D`,\n      queryId: \"sss\",\n    };\n  return undefined;\n}\n\nexport async function requestSimpleWebView({\n  bot, url, theme,\n}: {\n  bot: ApiUser;\n  url: string;\n  theme?: ApiThemeParameters;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestSimpleWebView({\n    url,\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    themeParams: theme ? buildInputThemeParams(theme) : undefined,\n    platform: 'webz',\n  }));\n\n  return result?.url;\n}\n\nexport function prolongWebView({\n  isSilent,\n  peer,\n  bot,\n  queryId,\n  replyToMessageId,\n  threadId,\n  sendAs,\n}: {\n  isSilent?: boolean;\n  peer: ApiChat | ApiUser;\n  bot: ApiUser;\n  queryId: string;\n  replyToMessageId?: number;\n  threadId?: number;\n  sendAs?: ApiUser | ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.ProlongWebView({\n    silent: isSilent || undefined,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    queryId: BigInt(queryId),\n    replyToMsgId: replyToMessageId,\n    ...(threadId && { topMsgId: threadId }),\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }));\n}\n\nexport async function sendWebViewData({\n  bot, buttonText, data,\n}: {\n  bot: ApiUser;\n  buttonText: string;\n  data: string;\n}) {\n  const randomId = generateRandomBigInt();\n  await invokeRequest(new GramJs.messages.SendWebViewData({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    buttonText,\n    data,\n    randomId,\n  }), true);\n}\n\nexport async function loadAttachBots({\n  hash,\n}: {\n  hash?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetAttachMenuBots({\n    hash: hash ? BigInt(hash) : undefined,\n  }));\n\n  if (result instanceof GramJs.AttachMenuBots) {\n    addEntitiesWithPhotosToLocalDb(result.users);\n    return {\n      hash: result.hash.toString(),\n      bots: buildCollectionByKey(result.bots.map(buildApiAttachBot), 'id'),\n      users: result.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n  return undefined;\n}\n\nexport async function loadAttachBot({\n  bot,\n}: {\n  bot: ApiUser;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetAttachMenuBot({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n  }));\n\n  if (result instanceof GramJs.AttachMenuBotsBot) {\n    addEntitiesWithPhotosToLocalDb(result.users);\n    return {\n      bot: buildApiAttachBot(result.bot),\n      users: result.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n  return undefined;\n}\n\nexport function toggleAttachBot({\n  bot,\n  isWriteAllowed,\n  isEnabled,\n}: {\n  bot: ApiUser;\n  isWriteAllowed?: boolean;\n  isEnabled: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.ToggleBotInAttachMenu({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    writeAllowed: isWriteAllowed || undefined,\n    enabled: isEnabled,\n  }));\n}\n\nexport async function requestBotUrlAuth({\n  chat, buttonId, messageId,\n}: {\n  chat: ApiChat;\n  buttonId: number;\n  messageId: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestUrlAuth({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    buttonId,\n    msgId: messageId,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function acceptBotUrlAuth({\n  chat,\n  messageId,\n  buttonId,\n  isWriteAllowed,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  buttonId: number;\n  isWriteAllowed?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.AcceptUrlAuth({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n    buttonId,\n    writeAllowed: isWriteAllowed || undefined,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function requestLinkUrlAuth({ url }: { url: string }) {\n  const result = await invokeRequest(new GramJs.messages.RequestUrlAuth({\n    url,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function acceptLinkUrlAuth({ url, isWriteAllowed }: { url: string; isWriteAllowed?: boolean }) {\n  const result = await invokeRequest(new GramJs.messages.AcceptUrlAuth({\n    url,\n    writeAllowed: isWriteAllowed || undefined,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nfunction processInlineBotResult(queryId: string, results: GramJs.TypeBotInlineResult[]) {\n  return results.map((result) => {\n    if (result instanceof GramJs.BotInlineMediaResult) {\n      if (result.document instanceof GramJs.Document) {\n        addDocumentToLocalDb(result.document);\n      }\n\n      if (result.photo instanceof GramJs.Photo) {\n        addPhotoToLocalDb(result.photo);\n      }\n\n      return buildApiBotInlineMediaResult(result, queryId);\n    }\n\n    if (result.thumb) {\n      addWebDocumentToLocalDb(result.thumb);\n    }\n\n    return buildApiBotInlineResult(result, queryId);\n  });\n}\n\nfunction getInlineBotResultsNextOffset(username: string, nextOffset?: string) {\n  return username === 'gif' && nextOffset === '0' ? '' : nextOffset;\n}\n\nfunction addDocumentToLocalDb(document: GramJs.Document) {\n  localDb.documents[String(document.id)] = document;\n}\n\nfunction addPhotoToLocalDb(photo: GramJs.Photo) {\n  localDb.photos[String(photo.id)] = photo;\n}\n\nfunction addWebDocumentToLocalDb(webDocument: GramJs.TypeWebDocument) {\n  localDb.webDocuments[webDocument.url] = webDocument;\n}\n","import BigInt from 'big-integer';\nimport type { JoinGroupCallPayload } from '../../../lib/secret-sauce';\nimport type {\n  ApiChat, ApiUser, OnApiUpdate, ApiGroupCall, ApiPhoneCall,\n} from '../../types';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport { invokeRequest } from './client';\nimport {\n  buildInputGroupCall, buildInputPeer, buildInputPhoneCall, generateRandomInt,\n} from '../gramjsBuilders';\nimport {\n  buildCallProtocol,\n  buildApiGroupCall,\n  buildApiGroupCallParticipant, buildPhoneCall,\n\n} from '../apiBuilders/calls';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { GROUP_CALL_PARTICIPANTS_LIMIT } from '../../../config';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function getGroupCall({\n  call,\n}: {\n  call: Partial<ApiGroupCall>;\n}) {\n  const result = await invokeRequest(new GramJs.phone.GetGroupCall({\n    call: buildInputGroupCall(call),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    groupCall: buildApiGroupCall(result.call),\n    users,\n    chats,\n  };\n}\n\nexport function discardGroupCall({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.DiscardGroupCall({\n    call: buildInputGroupCall(call),\n  }), true);\n}\n\nexport function editGroupCallParticipant({\n  call, participant, muted, presentationPaused, videoStopped, videoPaused, volume,\n  raiseHand,\n}: {\n  call: ApiGroupCall; participant: ApiUser; muted?: boolean; presentationPaused?: boolean;\n  videoStopped?: boolean; videoPaused?: boolean; raiseHand?: boolean; volume?: number;\n}) {\n  return invokeRequest(new GramJs.phone.EditGroupCallParticipant({\n    call: buildInputGroupCall(call),\n    participant: buildInputPeer(participant.id, participant.accessHash),\n    ...(videoStopped !== undefined && { videoStopped }),\n    ...(videoPaused !== undefined && { videoPaused }),\n    ...(muted !== undefined && { muted }),\n    ...(presentationPaused !== undefined && { presentationPaused }),\n    ...(raiseHand !== undefined && { raiseHand }),\n    ...(volume !== undefined && { volume }),\n  }), true);\n}\n\nexport function editGroupCallTitle({\n  groupCall, title,\n}: {\n  groupCall: ApiGroupCall; title: string;\n}) {\n  return invokeRequest(new GramJs.phone.EditGroupCallTitle({\n    title,\n    call: buildInputGroupCall(groupCall),\n  }), true);\n}\n\nexport async function exportGroupCallInvite({\n  call, canSelfUnmute,\n}: {\n  call: ApiGroupCall; canSelfUnmute: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.phone.ExportGroupCallInvite({\n    canSelfUnmute: canSelfUnmute || undefined,\n    call: buildInputGroupCall(call),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.link;\n}\n\nexport async function fetchGroupCallParticipants({\n  call, offset,\n}: {\n  call: ApiGroupCall; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.phone.GetGroupParticipants({\n    call: buildInputGroupCall(call),\n    ids: [],\n    sources: [],\n    offset: offset || '',\n    limit: GROUP_CALL_PARTICIPANTS_LIMIT,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  onUpdate({\n    '@type': 'updateGroupCallParticipants',\n    groupCallId: call.id,\n    participants: result.participants.map(buildApiGroupCallParticipant),\n    nextOffset: result.nextOffset,\n  });\n\n  return {\n    users, chats,\n  };\n}\n\nexport function leaveGroupCall({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.LeaveGroupCall({\n    call: buildInputGroupCall(call),\n  }), true);\n}\n\nexport async function joinGroupCall({\n  call, inviteHash, params,\n}: {\n  call: ApiGroupCall; inviteHash?: string; params: JoinGroupCallPayload;\n}) {\n  const result = await invokeRequest(new GramJs.phone.JoinGroupCall({\n    call: buildInputGroupCall(call),\n    joinAs: new GramJs.InputPeerSelf(),\n    muted: true,\n    videoStopped: true,\n    params: new GramJs.DataJSON({\n      data: JSON.stringify(params),\n    }),\n    inviteHash,\n  }));\n\n  if (!result) return undefined;\n\n  if (result instanceof GramJs.Updates) {\n    const update = result.updates.find((u) => u instanceof GramJs.UpdateGroupCall);\n    if (!(update instanceof GramJs.UpdateGroupCall)) return undefined;\n\n    return buildApiGroupCall(update.call);\n  }\n\n  return undefined;\n}\n\nexport async function createGroupCall({\n  peer,\n}: {\n  peer: ApiChat;\n}) {\n  const randomId = generateRandomInt();\n  const result = await invokeRequest(new GramJs.phone.CreateGroupCall({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    randomId,\n  }));\n\n  if (!result) return undefined;\n\n  if (result instanceof GramJs.Updates) {\n    const update = result.updates[0];\n    if (update instanceof GramJs.UpdateGroupCall) {\n      return buildApiGroupCall(update.call);\n    }\n  }\n\n  return undefined;\n}\n\nexport function joinGroupCallPresentation({\n  call, params,\n}: {\n  call: ApiGroupCall; params: JoinGroupCallPayload;\n}) {\n  return invokeRequest(new GramJs.phone.JoinGroupCallPresentation({\n    call: buildInputGroupCall(call),\n    params: new GramJs.DataJSON({\n      data: JSON.stringify(params),\n    }),\n  }), true);\n}\n\nexport function toggleGroupCallStartSubscription({\n  call, subscribed,\n}: {\n  call: ApiGroupCall; subscribed: boolean;\n}) {\n  return invokeRequest(new GramJs.phone.ToggleGroupCallStartSubscription({\n    call: buildInputGroupCall(call),\n    subscribed,\n  }), true, undefined, undefined, undefined, true);\n}\n\nexport function leaveGroupCallPresentation({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.LeaveGroupCallPresentation({\n    call: buildInputGroupCall(call),\n  }), true);\n}\n\nexport async function getDhConfig() {\n  const dhConfig = await invokeRequest(new GramJs.messages.GetDhConfig({}));\n\n  if (!dhConfig || dhConfig instanceof GramJs.messages.DhConfigNotModified) return undefined;\n\n  return {\n    g: dhConfig.g,\n    p: Array.from(dhConfig.p),\n    random: Array.from(dhConfig.random),\n  };\n}\n\nexport function discardCall({\n  call, isBusy,\n}: {\n  call: ApiPhoneCall; isBusy?: boolean;\n}) {\n  return invokeRequest(new GramJs.phone.DiscardCall({\n    peer: buildInputPhoneCall(call),\n    reason: isBusy ? new GramJs.PhoneCallDiscardReasonBusy() : new GramJs.PhoneCallDiscardReasonHangup(),\n  }), true);\n}\n\nexport async function requestCall({\n  user, gAHash, isVideo,\n}: {\n  user: ApiUser; gAHash: number[]; isVideo?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.phone.RequestCall({\n    randomId: generateRandomInt(),\n    userId: buildInputPeer(user.id, user.accessHash),\n    gAHash: Buffer.from(gAHash),\n    ...(isVideo && { video: true }),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const call = buildPhoneCall(result.phoneCall);\n\n  onUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport function setCallRating({\n  call, rating, comment,\n}: {\n  call: ApiPhoneCall; rating: number; comment: string;\n}) {\n  return invokeRequest(new GramJs.phone.SetCallRating({\n    rating,\n    peer: buildInputPhoneCall(call),\n    comment,\n  }), true);\n}\n\nexport function receivedCall({\n  call,\n}: {\n  call: ApiPhoneCall;\n}) {\n  return invokeRequest(new GramJs.phone.ReceivedCall({\n    peer: buildInputPhoneCall(call),\n  }));\n}\n\nexport async function acceptCall({\n  call, gB,\n}: {\n  call: ApiPhoneCall; gB: number[];\n}) {\n  const result = await invokeRequest(new GramJs.phone.AcceptCall({\n    peer: buildInputPhoneCall(call),\n    gB: Buffer.from(gB),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  call = buildPhoneCall(result.phoneCall);\n\n  onUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport async function confirmCall({\n  call, gA, keyFingerprint,\n}: {\n  call: ApiPhoneCall; gA: number[]; keyFingerprint: string;\n}) {\n  const result = await invokeRequest(new GramJs.phone.ConfirmCall({\n    peer: buildInputPhoneCall(call),\n    gA: Buffer.from(gA),\n    keyFingerprint: BigInt(keyFingerprint),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  call = buildPhoneCall(result.phoneCall);\n\n  onUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport function sendSignalingData({\n  data, call,\n}: {\n  data: number[]; call: ApiPhoneCall;\n}) {\n  return invokeRequest(new GramJs.phone.SendSignalingData({\n    data: Buffer.from(data),\n    peer: buildInputPhoneCall(call),\n  }));\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiInvoice, ApiPaymentSavedInfo, ApiPremiumPromo, ApiPremiumSubscriptionOption,\n  ApiPaymentForm, ApiReceipt, ApiLabeledPrice, ApiPaymentCredentials,\n} from '../../types';\n\nimport { buildApiDocument, buildApiMessageEntity, buildApiWebDocument } from './messages';\nimport { omitVirtualClassFields } from './helpers';\n\nexport function buildShippingOptions(shippingOptions: GramJs.ShippingOption[] | undefined) {\n  if (!shippingOptions) {\n    return undefined;\n  }\n\n  return Object.values(shippingOptions).map((option) => {\n    return {\n      id: option.id,\n      title: option.title,\n      amount: option.prices.reduce((ac, cur) => ac + cur.amount.toJSNumber(), 0),\n      prices: option.prices.map(({ label, amount }) => {\n        return {\n          label,\n          amount: amount.toJSNumber(),\n        };\n      }),\n    };\n  });\n}\n\nexport function buildApiReceipt(receipt: GramJs.payments.PaymentReceipt): ApiReceipt {\n  const {\n    invoice,\n    info,\n    shipping,\n    currency,\n    totalAmount,\n    credentialsTitle,\n    tipAmount,\n  } = receipt;\n\n  const { shippingAddress, phone, name } = (info || {});\n\n  const { prices } = invoice;\n  const mappedPrices: ApiLabeledPrice[] = prices.map(({ label, amount }) => ({\n    label,\n    amount: amount.toJSNumber(),\n  }));\n\n  let shippingPrices: ApiLabeledPrice[] | undefined;\n  let shippingMethod: string | undefined;\n\n  if (shipping) {\n    shippingPrices = shipping.prices.map(({ label, amount }) => {\n      return {\n        label,\n        amount: amount.toJSNumber(),\n      };\n    });\n    shippingMethod = shipping.title;\n  }\n\n  return {\n    currency,\n    prices: mappedPrices,\n    info: { shippingAddress, phone, name },\n    totalAmount: totalAmount.toJSNumber(),\n    credentialsTitle,\n    shippingPrices,\n    shippingMethod,\n    tipAmount: tipAmount ? tipAmount.toJSNumber() : 0,\n  };\n}\n\nexport function buildApiPaymentForm(form: GramJs.payments.PaymentForm): ApiPaymentForm {\n  const {\n    formId,\n    canSaveCredentials,\n    passwordMissing: isPasswordMissing,\n    providerId,\n    nativeProvider,\n    nativeParams,\n    savedInfo,\n    invoice,\n    savedCredentials,\n  } = form;\n\n  const {\n    test: isTest,\n    nameRequested: isNameRequested,\n    phoneRequested: isPhoneRequested,\n    emailRequested: isEmailRequested,\n    shippingAddressRequested: isShippingAddressRequested,\n    flexible: isFlexible,\n    phoneToProvider: shouldSendPhoneToProvider,\n    emailToProvider: shouldSendEmailToProvider,\n    currency,\n    prices,\n  } = invoice;\n\n  const mappedPrices: ApiLabeledPrice[] = prices.map(({ label, amount }) => ({\n    label,\n    amount: amount.toJSNumber(),\n  }));\n  const { shippingAddress } = savedInfo || {};\n  const cleanedInfo: ApiPaymentSavedInfo | undefined = savedInfo ? omitVirtualClassFields(savedInfo) : undefined;\n  if (cleanedInfo && shippingAddress) {\n    cleanedInfo.shippingAddress = omitVirtualClassFields(shippingAddress);\n  }\n\n  const nativeData = nativeParams ? JSON.parse(nativeParams.data) : {};\n\n  return {\n    canSaveCredentials,\n    isPasswordMissing,\n    formId: String(formId),\n    providerId: String(providerId),\n    nativeProvider,\n    savedInfo: cleanedInfo,\n    invoiceContainer: {\n      isTest,\n      isNameRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      isShippingAddressRequested,\n      isFlexible,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices: mappedPrices,\n    },\n    nativeParams: {\n      needCardholderName: Boolean(nativeData?.need_cardholder_name),\n      needCountry: Boolean(nativeData?.need_country),\n      needZip: Boolean(nativeData?.need_zip),\n      publishableKey: nativeData?.publishable_key,\n      publicToken: nativeData?.public_token,\n    },\n    ...(savedCredentials && { savedCredentials: buildApiPaymentCredentials(savedCredentials) }),\n  };\n}\n\nexport function buildApiInvoiceFromForm(form: GramJs.payments.PaymentForm): ApiInvoice {\n  const {\n    invoice, description: text, title, photo,\n  } = form;\n  const {\n    test, currency, prices, recurring, recurringTermsUrl, maxTipAmount, suggestedTipAmounts,\n  } = invoice;\n\n  const totalAmount = prices.reduce((ac, cur) => ac + cur.amount.toJSNumber(), 0);\n\n  return {\n    text,\n    title,\n    photo: buildApiWebDocument(photo),\n    amount: totalAmount,\n    currency,\n    isTest: test,\n    isRecurring: recurring,\n    recurringTermsUrl,\n    maxTipAmount: maxTipAmount?.toJSNumber(),\n    ...(suggestedTipAmounts && { suggestedTipAmounts: suggestedTipAmounts.map((tip) => tip.toJSNumber()) }),\n  };\n}\n\nexport function buildApiPremiumPromo(promo: GramJs.help.PremiumPromo): ApiPremiumPromo {\n  const {\n    statusText, statusEntities, videos, videoSections, periodOptions,\n  } = promo;\n\n  return {\n    statusText,\n    statusEntities: statusEntities.map(buildApiMessageEntity),\n    videoSections,\n    videos: videos.map(buildApiDocument).filter(Boolean),\n    options: periodOptions.map(buildApiPremiumSubscriptionOption),\n  };\n}\n\nfunction buildApiPremiumSubscriptionOption(option: GramJs.PremiumSubscriptionOption): ApiPremiumSubscriptionOption {\n  const {\n    current, canPurchaseUpgrade, currency, amount, botUrl, months,\n  } = option;\n\n  return {\n    isCurrent: current,\n    canPurchaseUpgrade,\n    currency,\n    amount: amount.toString(),\n    botUrl,\n    months,\n  };\n}\n\nexport function buildApiPaymentCredentials(credentials: GramJs.PaymentSavedCredentialsCard[]): ApiPaymentCredentials[] {\n  return credentials.map(({ id, title }) => ({ id, title }));\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { invokeRequest } from './client';\nimport { buildInputInvoice, buildInputPeer, buildShippingInfo } from '../gramjsBuilders';\nimport {\n  buildApiInvoiceFromForm,\n  buildApiPremiumPromo,\n  buildApiPaymentForm,\n  buildApiReceipt,\n  buildShippingOptions,\n} from '../apiBuilders/payments';\nimport type {\n  ApiChat, OnApiUpdate, ApiRequestInputInvoice,\n} from '../../types';\nimport localDb from '../localDb';\nimport {\n  addEntitiesWithPhotosToLocalDb,\n  deserializeBytes,\n  serializeBytes,\n} from '../helpers';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { getTemporaryPaymentPassword } from './twoFaSettings';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function validateRequestedInfo({\n  inputInvoice,\n  requestInfo,\n  shouldSave,\n}: {\n  inputInvoice: ApiRequestInputInvoice;\n  requestInfo: GramJs.TypePaymentRequestedInfo;\n  shouldSave?: boolean;\n}): Promise<{\n    id: string;\n    shippingOptions: any;\n  } | undefined> {\n  const result = await invokeRequest(new GramJs.payments.ValidateRequestedInfo({\n    invoice: buildInputInvoice(inputInvoice),\n    save: shouldSave || undefined,\n    info: buildShippingInfo(requestInfo),\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return undefined;\n  }\n\n  return {\n    id,\n    shippingOptions: buildShippingOptions(shippingOptions),\n  };\n}\n\nexport async function sendPaymentForm({\n  inputInvoice,\n  formId,\n  requestedInfoId,\n  shippingOptionId,\n  credentials,\n  savedCredentialId,\n  temporaryPassword,\n  tipAmount,\n}: {\n  inputInvoice: ApiRequestInputInvoice;\n  formId: string;\n  credentials: any;\n  requestedInfoId?: string;\n  shippingOptionId?: string;\n  savedCredentialId?: string;\n  temporaryPassword?: string;\n  tipAmount?: number;\n}) {\n  const inputCredentials = temporaryPassword && savedCredentialId\n    ? new GramJs.InputPaymentCredentialsSaved({\n      id: savedCredentialId,\n      tmpPassword: deserializeBytes(temporaryPassword),\n    })\n    : new GramJs.InputPaymentCredentials({\n      save: credentials.save,\n      data: new GramJs.DataJSON({ data: JSON.stringify(credentials.data) }),\n    });\n  const result = await invokeRequest(new GramJs.payments.SendPaymentForm({\n    formId: BigInt(formId),\n    invoice: buildInputInvoice(inputInvoice),\n    requestedInfoId,\n    shippingOptionId,\n    credentials: inputCredentials,\n    ...(tipAmount && { tipAmount: BigInt(tipAmount) }),\n  }));\n\n  if (result instanceof GramJs.payments.PaymentVerificationNeeded) {\n    onUpdate({\n      '@type': 'updatePaymentVerificationNeeded',\n      url: result.url,\n    });\n\n    return undefined;\n  }\n\n  return Boolean(result);\n}\n\nexport async function getPaymentForm(inputInvoice: ApiRequestInputInvoice) {\n  const result = await invokeRequest(new GramJs.payments.GetPaymentForm({\n    invoice: buildInputInvoice(inputInvoice),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  if (result.photo) {\n    localDb.webDocuments[result.photo.url] = result.photo;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    form: buildApiPaymentForm(result),\n    invoice: buildApiInvoiceFromForm(result),\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport async function getReceipt(chat: ApiChat, msgId: number) {\n  const result = await invokeRequest(new GramJs.payments.GetPaymentReceipt({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    receipt: buildApiReceipt(result),\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport async function fetchPremiumPromo() {\n  const result = await invokeRequest(new GramJs.help.GetPremiumPromo());\n  if (!result) return undefined;\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  result.videos.forEach((video) => {\n    if (video instanceof GramJs.Document) {\n      localDb.documents[video.id.toString()] = video;\n    }\n  });\n\n  return {\n    promo: buildApiPremiumPromo(result),\n    users,\n  };\n}\n\nexport async function fetchTemporaryPaymentPassword(password: string) {\n  const result = await getTemporaryPaymentPassword(password);\n\n  if (!result) {\n    return undefined;\n  }\n\n  if ('error' in result) {\n    return result;\n  }\n\n  return {\n    value: serializeBytes(result.tmpPassword),\n    validUntil: result.validUntil,\n  };\n}\n","import BigInt from 'big-integer';\nimport type {\n  ApiChat, ApiPhoto, ApiReportReason, ApiUser,\n} from '../../types';\nimport { invokeRequest } from './client';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { buildInputPeer, buildInputReportReason, buildInputPhoto } from '../gramjsBuilders';\n\nexport async function reportPeer({\n  peer,\n  reason,\n  description,\n}: {\n  peer: ApiChat | ApiUser; reason: ApiReportReason; description?: string;\n}) {\n  const result = await invokeRequest(new GramJs.account.ReportPeer({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function reportProfilePhoto({\n  peer,\n  photo,\n  reason,\n  description,\n}: {\n  peer: ApiChat | ApiUser; photo: ApiPhoto; reason: ApiReportReason; description?: string;\n}) {\n  const photoId = buildInputPhoto(photo);\n  if (!photoId) return undefined;\n\n  const result = await invokeRequest(new GramJs.account.ReportProfilePhoto({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    photoId,\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function changeSessionSettings({\n  hash, areCallsEnabled, areSecretChatsEnabled,\n}: {\n  hash: string; areCallsEnabled?: boolean; areSecretChatsEnabled?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.account.ChangeAuthorizationSettings({\n    hash: BigInt(hash),\n    ...(areCallsEnabled !== undefined ? { callRequestsDisabled: !areCallsEnabled } : undefined),\n    ...(areSecretChatsEnabled !== undefined ? { encryptedRequestsDisabled: !areSecretChatsEnabled } : undefined),\n  }));\n\n  return result;\n}\n\nexport async function changeSessionTtl({\n  days,\n}: {\n  days: number;\n}) {\n  const result = await invokeRequest(new GramJs.account.SetAuthorizationTTL({\n    authorizationTtlDays: days,\n  }));\n\n  return result;\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport BigInt from 'big-integer';\nimport localDb from '../localDb';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type { ApiAppConfig } from '../../types';\nimport type { ApiLimitType } from '../../../global/types';\nimport { buildJson } from './misc';\nimport { DEFAULT_LIMITS } from '../../../config';\n\ntype LimitType = 'default' | 'premium';\ntype Limit = 'upload_max_fileparts' | 'stickers_faved_limit' | 'saved_gifs_limit' | 'dialog_filters_chats_limit' |\n'dialog_filters_limit' | 'dialogs_folder_pinned_limit' | 'dialogs_pinned_limit' | 'caption_length_limit' |\n'channels_limit' | 'channels_public_limit' | 'about_length_limit';\ntype LimitKey = `${Limit}_${LimitType}`;\ntype LimitsConfig = Record<LimitKey, number>;\n\nexport interface GramJsAppConfig extends LimitsConfig {\n  emojies_sounds: Record<string, {\n    id: string;\n    access_hash: string;\n    file_reference_base64: string;\n  }>;\n  emojies_send_dice: string[];\n  groupcall_video_participants_max: number;\n  reactions_uniq_max: number;\n  chat_read_mark_size_threshold: number;\n  chat_read_mark_expire_period: number;\n  reactions_user_max_default: number;\n  reactions_user_max_premium: number;\n  autologin_domains: string[];\n  autologin_token: string;\n  url_auth_domains: string[];\n  premium_purchase_blocked: boolean;\n  premium_bot_username: string;\n  premium_invoice_slug: string;\n  premium_promo_order: string[];\n  default_emoji_statuses_stickerset_id: string;\n  hidden_members_group_size_min: number;\n  autoarchive_setting_available: boolean;\n  // Forums\n  topics_pinned_limit: number;\n}\n\nfunction buildEmojiSounds(appConfig: GramJsAppConfig) {\n  const { emojies_sounds } = appConfig;\n  return emojies_sounds ? Object.keys(emojies_sounds).reduce((acc: Record<string, string>, key) => {\n    const l = emojies_sounds[key];\n    localDb.documents[l.id] = new GramJs.Document({\n      id: BigInt(l.id),\n      accessHash: BigInt(l.access_hash),\n      dcId: 1,\n      mimeType: 'audio/ogg',\n      fileReference: Buffer.from(atob(l.file_reference_base64\n        .replace(/-/g, '+')\n        .replace(/_/g, '/'))),\n      size: BigInt(0),\n    } as GramJs.Document);\n\n    acc[key] = l.id;\n    return acc;\n  }, {}) : {};\n}\n\nfunction getLimit(appConfig: GramJsAppConfig, key: Limit, fallbackKey: ApiLimitType) {\n  const defaultLimit = appConfig[`${key}_default`] || DEFAULT_LIMITS[fallbackKey][0];\n  const premiumLimit = appConfig[`${key}_premium`] || DEFAULT_LIMITS[fallbackKey][1];\n  return [defaultLimit, premiumLimit] as const;\n}\n\nexport function buildAppConfig(json: GramJs.TypeJSONValue): ApiAppConfig {\n  const appConfig = buildJson(json) as GramJsAppConfig;\n\n  return {\n    emojiSounds: buildEmojiSounds(appConfig),\n    seenByMaxChatMembers: appConfig.chat_read_mark_size_threshold,\n    seenByExpiresAt: appConfig.chat_read_mark_expire_period,\n    autologinDomains: appConfig.autologin_domains || [],\n    autologinToken: appConfig.autologin_token || '',\n    urlAuthDomains: appConfig.url_auth_domains || [],\n    maxUniqueReactions: appConfig.reactions_uniq_max,\n    premiumBotUsername: appConfig.premium_bot_username,\n    premiumInvoiceSlug: appConfig.premium_invoice_slug,\n    premiumPromoOrder: appConfig.premium_promo_order,\n    isPremiumPurchaseBlocked: appConfig.premium_purchase_blocked,\n    defaultEmojiStatusesStickerSetId: appConfig.default_emoji_statuses_stickerset_id,\n    topicsPinnedLimit: appConfig.topics_pinned_limit,\n    maxUserReactionsDefault: appConfig.reactions_user_max_default,\n    maxUserReactionsPremium: appConfig.reactions_user_max_premium,\n    hiddenMembersMinCount: appConfig.hidden_members_group_size_min,\n    canDisplayAutoarchiveSetting: appConfig.autoarchive_setting_available,\n    limits: {\n      uploadMaxFileparts: getLimit(appConfig, 'upload_max_fileparts', 'uploadMaxFileparts'),\n      stickersFaved: getLimit(appConfig, 'stickers_faved_limit', 'stickersFaved'),\n      savedGifs: getLimit(appConfig, 'saved_gifs_limit', 'savedGifs'),\n      dialogFiltersChats: getLimit(appConfig, 'dialog_filters_chats_limit', 'dialogFiltersChats'),\n      dialogFilters: getLimit(appConfig, 'dialog_filters_limit', 'dialogFilters'),\n      dialogFolderPinned: getLimit(appConfig, 'dialogs_pinned_limit', 'dialogFolderPinned'),\n      captionLength: getLimit(appConfig, 'caption_length_limit', 'captionLength'),\n      channels: getLimit(appConfig, 'channels_limit', 'channels'),\n      channelsPublic: getLimit(appConfig, 'channels_public_limit', 'channelsPublic'),\n      aboutLength: getLimit(appConfig, 'about_length_limit', 'aboutLength'),\n    },\n  };\n}\n","import BigInt from 'big-integer';\nimport {Api as GramJs} from '../../../lib/gramjs';\n\nimport type {\n  ApiAppConfig,\n  ApiConfig,\n  ApiError,\n  ApiLangString,\n  ApiLanguage,\n  ApiNotifyException,\n  ApiPhoto,\n  ApiUser,\n} from '../../types';\nimport type {ApiPrivacyKey, InputPrivacyRules, LangCode} from '../../../types';\nimport type {LANG_PACKS} from '../../../config';\nimport {BLOCKED_LIST_LIMIT, DEFAULT_LANG_PACK, MAX_INT_32, UPLOAD_WORKERS} from '../../../config';\nimport {ACCEPTABLE_USERNAME_ERRORS} from './management';\nimport {\n  buildApiConfig,\n  buildApiCountryList,\n  buildApiNotifyException,\n  buildApiSession,\n  buildApiWallpaper,\n  buildApiWebSession,\n  buildPrivacyRules,\n} from '../apiBuilders/misc';\n\nimport {buildApiPhoto} from '../apiBuilders/common';\nimport {buildApiUser} from '../apiBuilders/users';\nimport {buildApiChatFromPreview} from '../apiBuilders/chats';\nimport {getApiChatIdFromMtpPeer} from '../apiBuilders/peers';\nimport {buildAppConfig} from '../apiBuilders/appConfig';\nimport {omitVirtualClassFields} from '../apiBuilders/helpers';\nimport {buildInputEntity, buildInputPeer, buildInputPhoto, buildInputPrivacyKey,} from '../gramjsBuilders';\nimport {getClient, invokeRequest, uploadFile} from './client';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {getServerTime} from '../../../util/serverTime';\nimport {addEntitiesWithPhotosToLocalDb, addPhotoToLocalDb} from '../helpers';\nimport localDb from '../localDb';\nimport {uploadFileV1} from \"../../../lib/gramjs/client/uploadFile\";\nimport {\n  UpdateProfileReq,\n  UpdateProfileRes,\n  UpdateUsernameReq,\n  UpdateUsernameRes,\n  UploadProfilePhotoReq,\n  UploadProfilePhotoRes\n} from \"../../../lib/ptp/protobuf/PTPAuth\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport Account from \"../../../worker/share/Account\";\n\nconst BETA_LANG_CODES = ['ar', 'fa', 'id', 'ko', 'uz', 'en'];\n\nexport async function updateProfile({\n  firstName,\n  lastName,\n  about,\n}: {\n  firstName?: string;\n  lastName?: string;\n  about?: string;\n}) {\n\n  // return invokeRequest(new GramJs.account.UpdateProfile({\n  //   firstName: firstName || '',\n  //   lastName: lastName || '',\n  //   about: about || '',\n  // }), true);\n\n  let pdu = await Account.getCurrentAccount()?.sendPduWithCallback(new UpdateProfileReq({\n      firstName: firstName || '',\n      lastName: lastName || '',\n      about: about || '',\n  }).pack())\n  if(!pdu){\n    return false\n  }\n  const {err} = UpdateProfileRes.parseMsg(pdu)\n  return err === ERR.NO_ERROR\n}\n\nexport async function checkUsername(username: string) {\n  try {\n    const result = await invokeRequest(new GramJs.account.CheckUsername({\n      username,\n    }), undefined, true);\n\n    return { result, error: undefined };\n  } catch (error) {\n    const errorMessage = (error as ApiError).message;\n\n    if (ACCEPTABLE_USERNAME_ERRORS.has(errorMessage)) {\n      return {\n        result: false,\n        error: errorMessage,\n      };\n    }\n\n    throw error;\n  }\n}\n\nexport async function updateUsername(username: string) {\n  const pdu = await  Account.getCurrentAccount()?.sendPduWithCallback(new UpdateUsernameReq({\n    username\n  }).pack())\n  if(!pdu){\n    return false\n  }\n  const {err} = UpdateUsernameRes.parseMsg(pdu)\n  return err === ERR.NO_ERROR\n  // return invokeRequest(new GramJs.account.UpdateUsername({ username }), true);\n}\n\nexport async function updateProfilePhoto(photo?: ApiPhoto, isFallback?: boolean) {\n  const photoId = photo ? buildInputPhoto(photo) : new GramJs.InputPhotoEmpty();\n  const result = await invokeRequest(new GramJs.photos.UpdateProfilePhoto({\n    id: photoId,\n    ...(isFallback ? { fallback: true } : undefined),\n  }));\n  if (!result) return undefined;\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n  if (result.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(result.photo);\n    return {\n      users: result.users.map(buildApiUser).filter(Boolean),\n      photo: buildApiPhoto(result.photo),\n    };\n  }\n  return undefined;\n}\n\nexport async function uploadProfilePhoto(file: File, isFallback?: boolean, isVideo = false, videoTs = 0,thumbnail?:string) {\n  const inputFile = await uploadFileV1({file,workers: UPLOAD_WORKERS});\n  const id = inputFile.id.toString();\n  if(Account.getCurrentAccount()?.getSession()){\n    return {\n      avatarHash: id,\n      photos: [\n        {\n          id: id,\n          thumbnail: {\n            dataUri: thumbnail,\n            width: 640,\n            height: 640,\n          },\n          sizes: [\n            {\n              width: 160,\n              height: 160,\n              type: 's',\n            },\n            {\n              width: 320,\n              height: 320,\n              type: 'm',\n            },\n            {\n              width: 640,\n              height: 640,\n              type: 'x',\n            },\n          ],\n        },\n      ],\n    }\n  }\n  let pdu = await Account.getCurrentAccount()?.sendPduWithCallback(new UploadProfilePhotoReq({\n    id:inputFile.id.toString(),\n    is_video:isVideo,\n    thumbnail:thumbnail!\n  }).pack())\n  if(!pdu){\n    return false\n  }\n  const {err,payload} = UploadProfilePhotoRes.parseMsg(pdu);\n\n  if(err != ERR.NO_ERROR){\n    return false\n  }\n  return JSON.parse(payload!);\n\n  // const params = {\n  //   ...(isVideo ? { video: inputFile, videoStartTs: videoTs } : { file: inputFile }),\n  //   ...(isFallback ? { fallback: true } : undefined),\n  // }\n  // const result = await invokeRequest(new GramJs.photos.UploadProfilePhoto(params));\n  //\n  // if (!result) return undefined;\n  //\n  // addEntitiesWithPhotosToLocalDb(result.users);\n  // if (result.photo instanceof GramJs.Photo) {\n  //   addPhotoToLocalDb(result.photo);\n  //   return {\n  //     users: result.users.map(buildApiUser).filter(Boolean),\n  //     photo: buildApiPhoto(result.photo),\n  //   };\n  // }\n  // return undefined;\n}\n\nexport async function uploadContactProfilePhoto({\n  file, isSuggest, user,thumbnail\n}: {\n  file?: File;\n  isSuggest?: boolean;\n  user: ApiUser;\n  thumbnail?:string\n}) {\n  const inputFile = file ? await uploadFileV1({file}) : undefined;\n  if(Account.getCurrentAccount()?.getSession()){\n    const id = inputFile?.id.toString()\n    return {\n      users: [\n        {\n          ...user,\n          avatarHash: id,\n          photos: [\n            {\n              id: id,\n              thumbnail: {\n                dataUri: thumbnail,\n                width: 640,\n                height: 640,\n              },\n              sizes: [\n                {\n                  width: 160,\n                  height: 160,\n                  type: 's',\n                },\n                {\n                  width: 320,\n                  height: 320,\n                  type: 'm',\n                },\n                {\n                  width: 640,\n                  height: 640,\n                  type: 'x',\n                },\n              ],\n            }\n            ]\n        }\n      ]\n    }\n  }\n\n\n  const result = await invokeRequest(new GramJs.photos.UploadContactProfilePhoto({\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    file: inputFile,\n    ...(isSuggest ? { suggest: true } : { save: true }),\n  }));\n\n  if (!result) return undefined;\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n\n  if (result.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(result.photo);\n    return {\n      users,\n      photo: buildApiPhoto(result.photo),\n    };\n  }\n\n  return {\n    users,\n    photo: undefined,\n  };\n}\n\nexport async function deleteProfilePhotos(photos: ApiPhoto[]) {\n  const photoIds = photos.map(buildInputPhoto).filter(Boolean);\n  const isDeleted = await invokeRequest(new GramJs.photos.DeletePhotos({ id: photoIds }), true);\n  if (isDeleted) {\n    photos.forEach((photo) => {\n      delete localDb.photos[photo.id];\n    });\n  }\n  return isDeleted;\n}\n\nexport async function fetchWallpapers() {\n  const result = await invokeRequest(new GramJs.account.GetWallPapers({ hash: BigInt('0') }));\n\n  if (!result || result instanceof GramJs.account.WallPapersNotModified) {\n    return undefined;\n  }\n\n  const filteredWallpapers = result.wallpapers.filter((wallpaper) => {\n    if (\n      !(wallpaper instanceof GramJs.WallPaper)\n      || !(wallpaper.document instanceof GramJs.Document)\n    ) {\n      return false;\n    }\n\n    return !wallpaper.pattern && wallpaper.document.mimeType !== 'application/x-tgwallpattern';\n  }) as GramJs.WallPaper[];\n\n  filteredWallpapers.forEach((wallpaper) => {\n    localDb.documents[String(wallpaper.document.id)] = wallpaper.document as GramJs.Document;\n  });\n\n  return {\n    wallpapers: filteredWallpapers.map(buildApiWallpaper).filter(Boolean),\n  };\n}\n\nexport async function uploadWallpaper(file: File) {\n  const inputFile = await uploadFile(file);\n\n  const result = await invokeRequest(new GramJs.account.UploadWallPaper({\n    file: inputFile,\n    mimeType: file.type,\n    settings: new GramJs.WallPaperSettings(),\n  }));\n\n  if (!result || !(result instanceof GramJs.WallPaper)) {\n    return undefined;\n  }\n\n  const wallpaper = buildApiWallpaper(result);\n  if (!wallpaper) {\n    return undefined;\n  }\n\n  localDb.documents[String(result.document.id)] = result.document as GramJs.Document;\n\n  return { wallpaper };\n}\n\nexport async function fetchBlockedContacts() {\n  const result = await invokeRequest(new GramJs.contacts.GetBlocked({\n    limit: BLOCKED_LIST_LIMIT,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    chats: result.chats.map((chat) => buildApiChatFromPreview(chat)).filter(Boolean),\n    blockedIds: result.blocked.map((blocked) => getApiChatIdFromMtpPeer(blocked.peerId)),\n    totalCount: result instanceof GramJs.contacts.BlockedSlice ? result.count : result.blocked.length,\n  };\n}\n\nexport function blockContact(chatOrUserId: string, accessHash?: string) {\n  return invokeRequest(new GramJs.contacts.Block({\n    id: buildInputPeer(chatOrUserId, accessHash),\n  }));\n}\n\nexport function unblockContact(chatOrUserId: string, accessHash?: string) {\n  return invokeRequest(new GramJs.contacts.Unblock({\n    id: buildInputPeer(chatOrUserId, accessHash),\n  }));\n}\n\nexport async function fetchAuthorizations() {\n  const result = await invokeRequest(new GramJs.account.GetAuthorizations());\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    authorizations: buildCollectionByKey(result.authorizations.map(buildApiSession), 'hash'),\n    ttlDays: result.authorizationTtlDays,\n  };\n}\n\nexport function terminateAuthorization(hash: string) {\n  return invokeRequest(new GramJs.account.ResetAuthorization({ hash: BigInt(hash) }));\n}\n\nexport function terminateAllAuthorizations() {\n  return invokeRequest(new GramJs.auth.ResetAuthorizations());\n}\n\nexport async function fetchWebAuthorizations() {\n  const result = await invokeRequest(new GramJs.account.GetWebAuthorizations());\n  if (!result) {\n    return undefined;\n  }\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    webAuthorizations: buildCollectionByKey(result.authorizations.map(buildApiWebSession), 'hash'),\n  };\n}\n\nexport function terminateWebAuthorization(hash: string) {\n  return invokeRequest(new GramJs.account.ResetWebAuthorization({ hash: BigInt(hash) }));\n}\n\nexport function terminateAllWebAuthorizations() {\n  return invokeRequest(new GramJs.account.ResetWebAuthorizations());\n}\n\nexport async function fetchNotificationExceptions() {\n  const result = await invokeRequest(new GramJs.account.GetNotifyExceptions({\n    compareSound: true,\n  }), undefined, undefined, true);\n\n  if (!(result instanceof GramJs.Updates || result instanceof GramJs.UpdatesCombined)) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return result.updates.reduce((acc, update) => {\n    if (!(update instanceof GramJs.UpdateNotifySettings && update.peer instanceof GramJs.NotifyPeer)) {\n      return acc;\n    }\n\n    acc.push(buildApiNotifyException(update.notifySettings, update.peer.peer));\n\n    return acc;\n  }, [] as ApiNotifyException[]);\n}\n\nexport async function fetchNotificationSettings() {\n  const [\n    isMutedContactSignUpNotification,\n    privateContactNotificationsSettings,\n    groupNotificationsSettings,\n    broadcastNotificationsSettings,\n  ] = await Promise.all([\n    invokeRequest(new GramJs.account.GetContactSignUpNotification()),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyUsers(),\n    })),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyChats(),\n    })),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyBroadcasts(),\n    })),\n  ]);\n\n  if (!privateContactNotificationsSettings || !groupNotificationsSettings || !broadcastNotificationsSettings) {\n    return false;\n  }\n\n  const {\n    silent: privateSilent, muteUntil: privateMuteUntil, showPreviews: privateShowPreviews,\n  } = privateContactNotificationsSettings;\n  const {\n    silent: groupSilent, muteUntil: groupMuteUntil, showPreviews: groupShowPreviews,\n  } = groupNotificationsSettings;\n  const {\n    silent: broadcastSilent, muteUntil: broadcastMuteUntil, showPreviews: broadcastShowPreviews,\n  } = broadcastNotificationsSettings;\n\n  return {\n    hasContactJoinedNotifications: !isMutedContactSignUpNotification,\n    hasPrivateChatsNotifications: !(\n      privateSilent\n      || (typeof privateMuteUntil === 'number' && getServerTime() < privateMuteUntil)\n    ),\n    hasPrivateChatsMessagePreview: privateShowPreviews,\n    hasGroupNotifications: !(\n      groupSilent || (typeof groupMuteUntil === 'number'\n        && getServerTime() < groupMuteUntil)\n    ),\n    hasGroupMessagePreview: groupShowPreviews,\n    hasBroadcastNotifications: !(\n      broadcastSilent || (typeof broadcastMuteUntil === 'number'\n        && getServerTime() < broadcastMuteUntil)\n    ),\n    hasBroadcastMessagePreview: broadcastShowPreviews,\n  };\n}\n\nexport function updateContactSignUpNotification(isSilent: boolean) {\n  return invokeRequest(new GramJs.account.SetContactSignUpNotification({ silent: isSilent }));\n}\n\nexport function updateNotificationSettings(peerType: 'contact' | 'group' | 'broadcast', {\n  isSilent,\n  shouldShowPreviews,\n}: {\n  isSilent?: boolean;\n  shouldShowPreviews?: boolean;\n}) {\n  let peer: GramJs.TypeInputNotifyPeer;\n  if (peerType === 'contact') {\n    peer = new GramJs.InputNotifyUsers();\n  } else if (peerType === 'group') {\n    peer = new GramJs.InputNotifyChats();\n  } else {\n    peer = new GramJs.InputNotifyBroadcasts();\n  }\n\n  const settings = {\n    showPreviews: shouldShowPreviews,\n    silent: isSilent,\n    muteUntil: isSilent ? MAX_INT_32 : 0,\n  };\n\n  return invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer,\n    settings: new GramJs.InputPeerNotifySettings(settings),\n  }));\n}\n\nexport async function fetchLanguages(): Promise<ApiLanguage[] | undefined> {\n  const result = await invokeRequest(new GramJs.langpack.GetLanguages({\n    langPack: DEFAULT_LANG_PACK,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(omitVirtualClassFields);\n}\n\nexport async function fetchLangPack({ sourceLangPacks, langCode }: {\n  sourceLangPacks: typeof LANG_PACKS;\n  langCode: string;\n}) {\n  const results = await Promise.all(sourceLangPacks.map((langPack) => {\n    return invokeRequest(new GramJs.langpack.GetLangPack({\n      langPack,\n      langCode: BETA_LANG_CODES.includes(langCode) ? `${langCode}-raw` : langCode,\n    }));\n  }));\n\n  const collections = results\n    .filter(Boolean)\n    .map((result) => {\n      return buildCollectionByKey(result.strings.map<ApiLangString>(omitVirtualClassFields), 'key');\n    });\n\n  if (!collections.length) {\n    return undefined;\n  }\n\n  return { langPack: Object.assign({}, ...collections.reverse()) as typeof collections[0] };\n}\n\nexport async function fetchLangStrings({ langPack, langCode, keys }: {\n  langPack: string; langCode: string; keys: string[];\n}) {\n  const result = await invokeRequest(new GramJs.langpack.GetStrings({\n    langPack,\n    langCode: BETA_LANG_CODES.includes(langCode) ? `${langCode}-raw` : langCode,\n    keys,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(omitVirtualClassFields);\n}\n\nexport async function fetchPrivacySettings(privacyKey: ApiPrivacyKey) {\n  const key = buildInputPrivacyKey(privacyKey);\n  const result = await invokeRequest(new GramJs.account.GetPrivacy({ key }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    rules: buildPrivacyRules(result.rules),\n  };\n}\n\nexport function registerDevice(token: string) {\n  const client = getClient();\n  const secret = client.session.getAuthKey().getKey();\n  return invokeRequest(new GramJs.account.RegisterDevice({\n    tokenType: 10,\n    secret,\n    appSandbox: false,\n    otherUids: [],\n    token,\n  }));\n}\n\nexport function unregisterDevice(token: string) {\n  return invokeRequest(new GramJs.account.UnregisterDevice({\n    tokenType: 10,\n    otherUids: [],\n    token,\n  }));\n}\n\nexport async function setPrivacySettings(\n  privacyKey: ApiPrivacyKey, rules: InputPrivacyRules,\n) {\n  const key = buildInputPrivacyKey(privacyKey);\n  const privacyRules: GramJs.TypeInputPrivacyRule[] = [];\n\n  if (rules.allowedUsers) {\n    privacyRules.push(new GramJs.InputPrivacyValueAllowUsers({\n      users: rules.allowedUsers.map(({ id, accessHash }) => buildInputEntity(id, accessHash) as GramJs.InputUser),\n    }));\n  }\n  if (rules.allowedChats) {\n    privacyRules.push(new GramJs.InputPrivacyValueAllowChatParticipants({\n      chats: rules.allowedChats.map(({ id }) => buildInputEntity(id) as BigInt.BigInteger),\n    }));\n  }\n  if (rules.blockedUsers) {\n    privacyRules.push(new GramJs.InputPrivacyValueDisallowUsers({\n      users: rules.blockedUsers.map(({ id, accessHash }) => buildInputEntity(id, accessHash) as GramJs.InputUser),\n    }));\n  }\n  if (rules.blockedChats) {\n    privacyRules.push(new GramJs.InputPrivacyValueDisallowChatParticipants({\n      chats: rules.blockedChats.map(({ id }) => buildInputEntity(id) as BigInt.BigInteger),\n    }));\n  }\n  switch (rules.visibility) {\n    case 'everybody':\n      privacyRules.push(new GramJs.InputPrivacyValueAllowAll());\n      break;\n\n    case 'contacts':\n      privacyRules.push(new GramJs.InputPrivacyValueAllowContacts());\n      break;\n\n    case 'nonContacts':\n      privacyRules.push(new GramJs.InputPrivacyValueDisallowContacts());\n      break;\n\n    case 'nobody':\n      privacyRules.push(new GramJs.InputPrivacyValueDisallowAll());\n      break;\n  }\n\n  const result = await invokeRequest(new GramJs.account.SetPrivacy({ key, rules: privacyRules }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    rules: buildPrivacyRules(result.rules),\n  };\n}\n\nexport async function updateIsOnline(isOnline: boolean) {\n  await invokeRequest(new GramJs.account.UpdateStatus({ offline: !isOnline }));\n}\n\nexport async function fetchContentSettings() {\n  const result = await invokeRequest(new GramJs.account.GetContentSettings());\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    isSensitiveEnabled: Boolean(result.sensitiveEnabled),\n    canChangeSensitive: Boolean(result.sensitiveCanChange),\n  };\n}\n\nexport function updateContentSettings(isEnabled: boolean) {\n  return invokeRequest(new GramJs.account.SetContentSettings({\n    sensitiveEnabled: isEnabled || undefined,\n  }));\n}\n\nexport async function fetchAppConfig(): Promise<ApiAppConfig | undefined> {\n  const result = await invokeRequest(new GramJs.help.GetAppConfig());\n  if (!result) return undefined;\n\n  return buildAppConfig(result);\n}\n\nexport async function fetchConfig(): Promise<ApiConfig | undefined> {\n  const result = await invokeRequest(new GramJs.help.GetConfig());\n  if (!result) return undefined;\n\n  return buildApiConfig(result);\n}\n\nfunction updateLocalDb(\n  result: (\n    GramJs.account.PrivacyRules | GramJs.contacts.Blocked | GramJs.contacts.BlockedSlice |\n    GramJs.Updates | GramJs.UpdatesCombined\n  ),\n) {\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n}\n\nexport async function fetchCountryList({ langCode = 'en' }: { langCode?: LangCode }) {\n  const countryList = await invokeRequest(new GramJs.help.GetCountriesList({\n    langCode,\n  }));\n\n  if (!(countryList instanceof GramJs.help.CountriesList)) {\n    return undefined;\n  }\n  return buildApiCountryList(countryList.countries);\n}\n\nexport async function fetchGlobalPrivacySettings() {\n  const result = await invokeRequest(new GramJs.account.GetGlobalPrivacySettings());\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    shouldArchiveAndMuteNewNonContact: Boolean(result.archiveAndMuteNewNoncontactPeers),\n  };\n}\n\nexport async function updateGlobalPrivacySettings({ shouldArchiveAndMuteNewNonContact } : {\n  shouldArchiveAndMuteNewNonContact: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.account.SetGlobalPrivacySettings({\n    settings: new GramJs.GlobalPrivacySettings({\n      archiveAndMuteNewNoncontactPeers: shouldArchiveAndMuteNewNonContact,\n    }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    shouldArchiveAndMuteNewNonContact: Boolean(result.archiveAndMuteNewNoncontactPeers),\n  };\n}\n\nexport function toggleUsername({\n  chatId, accessHash, username, isActive,\n}: {\n  username: string;\n  isActive: boolean;\n  chatId?: string;\n  accessHash?: string;\n}) {\n  if (chatId) {\n    return invokeRequest(new GramJs.channels.ToggleUsername({\n      channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n      username,\n      active: isActive,\n    }));\n  }\n\n  return invokeRequest(new GramJs.account.ToggleUsername({\n    username,\n    active: isActive,\n  }));\n}\n\nexport function reorderUsernames({ chatId, accessHash, usernames }: {\n  usernames: string[];\n  chatId?: string;\n  accessHash?: string;\n}) {\n  if (chatId) {\n    return invokeRequest(new GramJs.channels.ReorderUsernames({\n      channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n      order: usernames,\n    }));\n  }\n\n  return invokeRequest(new GramJs.account.ReorderUsernames({\n    order: usernames,\n  }));\n}\n","import type { ApiChat, ApiReaction } from '../../types';\nimport { invokeRequest } from './client';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { buildInputPeer, buildInputReaction } from '../gramjsBuilders';\nimport localDb from '../localDb';\nimport { buildApiAvailableReaction, buildMessagePeerReaction } from '../apiBuilders/messages';\nimport { REACTION_LIST_LIMIT } from '../../../config';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { buildApiUser } from '../apiBuilders/users';\n\nexport function sendWatchingEmojiInteraction({\n  chat,\n  emoticon,\n}: {\n  chat: ApiChat; emoticon: string;\n}) {\n  return invokeRequest(new GramJs.messages.SetTyping({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    action: new GramJs.SendMessageEmojiInteractionSeen({\n      emoticon,\n    }),\n  }));\n}\n\nexport function sendEmojiInteraction({\n  chat,\n  emoticon,\n  messageId,\n  timestamps,\n}: {\n  chat: ApiChat; messageId: number; emoticon: string; timestamps: number[];\n}) {\n  return invokeRequest(new GramJs.messages.SetTyping({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    action: new GramJs.SendMessageEmojiInteraction({\n      emoticon,\n      msgId: messageId,\n      interaction: new GramJs.DataJSON({\n        data: JSON.stringify({\n          v: 1,\n          a: timestamps.map((t: number) => ({\n            t,\n            i: 1,\n          })),\n        }),\n      }),\n    }),\n  }));\n}\n\nexport async function getAvailableReactions() {\n  const result = await invokeRequest(new GramJs.messages.GetAvailableReactions({}));\n\n  if (!result || result instanceof GramJs.messages.AvailableReactionsNotModified) {\n    return undefined;\n  }\n\n  result.reactions.forEach((reaction) => {\n    if (reaction.staticIcon instanceof GramJs.Document) {\n      localDb.documents[String(reaction.staticIcon.id)] = reaction.staticIcon;\n    }\n    if (reaction.selectAnimation instanceof GramJs.Document) {\n      localDb.documents[String(reaction.selectAnimation.id)] = reaction.selectAnimation;\n    }\n    if (reaction.aroundAnimation instanceof GramJs.Document) {\n      localDb.documents[String(reaction.aroundAnimation.id)] = reaction.aroundAnimation;\n    }\n    if (reaction.centerIcon instanceof GramJs.Document) {\n      localDb.documents[String(reaction.centerIcon.id)] = reaction.centerIcon;\n    }\n  });\n\n  return result.reactions.map(buildApiAvailableReaction);\n}\n\nexport function sendReaction({\n  chat, messageId, reactions,\n}: {\n  chat: ApiChat; messageId: number; reactions?: ApiReaction[];\n}) {\n  return invokeRequest(new GramJs.messages.SendReaction({\n    reaction: reactions?.map((r) => buildInputReaction(r)),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n  }), true);\n}\n\nexport function fetchMessageReactions({\n  ids, chat,\n}: {\n  ids: number[]; chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.GetMessagesReactions({\n    id: ids,\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), true);\n}\n\nexport async function fetchMessageReactionsList({\n  chat, messageId, reaction, offset,\n}: {\n  chat: ApiChat; messageId: number; reaction?: ApiReaction; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetMessageReactionsList({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageId,\n    ...(reaction && { reaction: buildInputReaction(reaction) }),\n    limit: REACTION_LIST_LIMIT,\n    ...(offset && { offset }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  const { nextOffset, reactions, count } = result;\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    nextOffset,\n    reactions: reactions.map(buildMessagePeerReaction).filter(Boolean),\n    count,\n  };\n}\n\nexport function setDefaultReaction({\n  reaction,\n}: {\n  reaction: ApiReaction;\n}) {\n  return invokeRequest(new GramJs.messages.SetDefaultReaction({\n    reaction: buildInputReaction(reaction),\n  }));\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  ApiMessageStatistics,\n  ApiMessagePublicForward,\n  StatisticsGraph,\n  StatisticsOverviewItem,\n  StatisticsOverviewPercentage,\n  StatisticsOverviewPeriod,\n} from '../../types';\nimport { buildAvatarHash } from './chats';\nimport { buildApiPeerId } from './peers';\n\nexport function buildChannelStatistics(stats: GramJs.stats.BroadcastStats): ApiChannelStatistics {\n  return {\n    // Graphs\n    growthGraph: buildGraph(stats.growthGraph),\n    followersGraph: buildGraph(stats.followersGraph),\n    muteGraph: buildGraph(stats.muteGraph),\n    topHoursGraph: buildGraph(stats.topHoursGraph),\n\n    // Async graphs\n    languagesGraph: (stats.languagesGraph as GramJs.StatsGraphAsync).token,\n    viewsBySourceGraph: (stats.viewsBySourceGraph as GramJs.StatsGraphAsync).token,\n    newFollowersBySourceGraph: (stats.newFollowersBySourceGraph as GramJs.StatsGraphAsync).token,\n    interactionsGraph: (stats.interactionsGraph as GramJs.StatsGraphAsync).token,\n\n    // Statistics overview\n    followers: buildStatisticsOverview(stats.followers),\n    viewsPerPost: buildStatisticsOverview(stats.viewsPerPost),\n    sharesPerPost: buildStatisticsOverview(stats.sharesPerPost),\n    enabledNotifications: buildStatisticsPercentage(stats.enabledNotifications),\n\n    // Recent posts\n    recentTopMessages: stats.recentMessageInteractions,\n  };\n}\n\nexport function buildGroupStatistics(stats: GramJs.stats.MegagroupStats): ApiGroupStatistics {\n  return {\n    // Graphs\n    growthGraph: buildGraph(stats.growthGraph),\n    membersGraph: buildGraph(stats.membersGraph),\n    topHoursGraph: buildGraph(stats.topHoursGraph),\n\n    // Async graphs\n    languagesGraph: (stats.languagesGraph as GramJs.StatsGraphAsync).token,\n    messagesGraph: (stats.messagesGraph as GramJs.StatsGraphAsync).token,\n    actionsGraph: (stats.actionsGraph as GramJs.StatsGraphAsync).token,\n\n    // Statistics overview\n    period: getOverviewPeriod(stats.period),\n    members: buildStatisticsOverview(stats.members),\n    viewers: buildStatisticsOverview(stats.viewers),\n    messages: buildStatisticsOverview(stats.messages),\n    posters: buildStatisticsOverview(stats.posters),\n  };\n}\n\nexport function buildMessageStatistics(stats: GramJs.stats.MessageStats): ApiMessageStatistics {\n  return {\n    viewsGraph: buildGraph(stats.viewsGraph),\n  };\n}\n\nexport function buildMessagePublicForwards(\n  result: GramJs.messages.TypeMessages,\n): ApiMessagePublicForward[] | undefined {\n  if (!result || !('messages' in result)) {\n    return undefined;\n  }\n\n  return result.messages.map((message) => {\n    const peerId = buildApiPeerId((message.peerId as GramJs.PeerChannel).channelId, 'channel');\n    const channel = result.chats.find((p) => buildApiPeerId(p.id, 'channel') === peerId);\n\n    return {\n      messageId: message.id,\n      views: (message as GramJs.Message).views,\n      title: (channel as GramJs.Channel).title,\n      chat: {\n        id: peerId,\n        type: 'chatTypeChannel',\n        title: (channel as GramJs.Channel).title,\n        username: (channel as GramJs.Channel).username,\n        avatarHash: buildAvatarHash((channel as GramJs.Channel).photo),\n      },\n    };\n  });\n}\n\nexport function buildGraph(\n  result: GramJs.TypeStatsGraph, isPercentage?: boolean,\n): StatisticsGraph | undefined {\n  if ((result as GramJs.StatsGraphError).error) {\n    return undefined;\n  }\n\n  const data = JSON.parse((result as GramJs.StatsGraph).json.data);\n  const [x, ...y] = data.columns;\n  const hasSecondYAxis = data.y_scaled;\n\n  return {\n    type: isPercentage ? 'area' : data.types.y0,\n    zoomToken: (result as GramJs.StatsGraph).zoomToken,\n    labelFormatter: data.xTickFormatter,\n    tooltipFormatter: data.xTooltipFormatter,\n    labels: x.slice(1),\n    hideCaption: !data.subchart.show,\n    hasSecondYAxis,\n    isStacked: data.stacked && !hasSecondYAxis,\n    isPercentage,\n    datasets: y.map((item: any) => {\n      const key = item[0];\n\n      return {\n        name: data.names[key],\n        color: extractColor(data.colors[key]),\n        values: item.slice(1),\n      };\n    }),\n    ...calculateMinimapRange(data.subchart.defaultZoom, x.slice(1)),\n  };\n}\n\nfunction extractColor(color: string): string {\n  return color.substring(color.indexOf('#'));\n}\n\nfunction calculateMinimapRange(range: Array<number>, values: Array<number>) {\n  const [min, max] = range;\n\n  let minIndex = 0;\n  let maxIndex = values.length - 1;\n\n  values.forEach((item, index) => {\n    if (!minIndex && item >= min) {\n      minIndex = index;\n    }\n\n    if (!maxIndex && item >= max) {\n      maxIndex = index;\n    }\n  });\n\n  const begin = Math.max(0, minIndex / (values.length - 1));\n  const end = Math.min(1, maxIndex / (values.length - 1));\n\n  return { minimapRange: { begin, end }, labelFromIndex: minIndex, labelToIndex: maxIndex };\n}\n\nfunction buildStatisticsOverview({ current, previous }: GramJs.StatsAbsValueAndPrev): StatisticsOverviewItem {\n  const change = current - previous;\n\n  return {\n    current,\n    change,\n    ...(previous && { percentage: (change ? ((Math.abs(change) / previous) * 100) : 0).toFixed(2) }),\n  };\n}\n\nfunction buildStatisticsPercentage(data: GramJs.StatsPercentValue): StatisticsOverviewPercentage {\n  return {\n    percentage: ((data.part / data.total) * 100).toFixed(2),\n  };\n}\n\nfunction getOverviewPeriod(data: GramJs.StatsDateRangeDays): StatisticsOverviewPeriod {\n  return {\n    maxDate: data.maxDate,\n    minDate: data.minDate,\n  };\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph,\n} from '../../types';\n\nimport { invokeRequest } from './client';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { buildInputEntity } from '../gramjsBuilders';\nimport {\n  buildChannelStatistics, buildGroupStatistics, buildMessageStatistics, buildMessagePublicForwards, buildGraph,\n} from '../apiBuilders/statistics';\nimport { buildApiUser } from '../apiBuilders/users';\n\nexport async function fetchChannelStatistics({\n  chat,\n}: { chat: ApiChat }) {\n  const result = await invokeRequest(new GramJs.stats.GetBroadcastStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }), undefined, undefined, undefined, chat.fullInfo!.statisticsDcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    stats: buildChannelStatistics(result),\n    users: [],\n  };\n}\n\nexport async function fetchGroupStatistics({\n  chat,\n}: { chat: ApiChat }) {\n  const result = await invokeRequest(new GramJs.stats.GetMegagroupStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }), undefined, undefined, undefined, chat.fullInfo!.statisticsDcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    stats: buildGroupStatistics(result),\n  };\n}\n\nexport async function fetchMessageStatistics({\n  chat,\n  messageId,\n}: {\n  chat: ApiChat;\n  messageId: number;\n}): Promise<ApiMessageStatistics | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetMessageStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    msgId: messageId,\n  }), undefined, undefined, undefined, chat.fullInfo!.statisticsDcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildMessageStatistics(result);\n}\n\nexport async function fetchMessagePublicForwards({\n  chat,\n  messageId,\n  dcId,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  dcId?: number;\n}): Promise<ApiMessagePublicForward[] | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetMessagePublicForwards({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    msgId: messageId,\n    offsetPeer: new GramJs.InputPeerEmpty(),\n  }), undefined, undefined, undefined, dcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  if ('chats' in result) {\n    addEntitiesWithPhotosToLocalDb(result.chats);\n  }\n\n  return buildMessagePublicForwards(result);\n}\n\nexport async function fetchStatisticsAsyncGraph({\n  token,\n  x,\n  isPercentage,\n  dcId,\n}: {\n  token: string;\n  x?: number;\n  isPercentage?: boolean;\n  dcId?: number;\n}): Promise<StatisticsGraph | undefined> {\n  const result = await invokeRequest(new GramJs.stats.LoadAsyncGraph({\n    token,\n    ...(x && { x: BigInt(x) }),\n  }), undefined, undefined, undefined, dcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildGraph(result as GramJs.StatsGraph, isPercentage);\n}\n","import BigInt from 'big-integer';\nimport type bigInt from 'big-integer';\nimport MTProtoState from '../../../lib/gramjs/network/MTProtoState';\nimport Logger from '../../../lib/gramjs/extensions/Logger';\nimport Helpers from '../../../lib/gramjs/Helpers';\nimport AuthKey from '../../../lib/gramjs/crypto/AuthKey';\n\ntype DhConfig = {\n  p: number[];\n  g: number;\n  random: number[];\n};\n\nlet currentPhoneCallState: PhoneCallState | undefined;\n\nclass PhoneCallState {\n  private state?: MTProtoState;\n\n  private seq = 0;\n\n  private gA?: bigInt.BigInteger;\n\n  private gB: any;\n\n  private p?: bigInt.BigInteger;\n\n  private random?: bigInt.BigInteger;\n\n  private waitForState: Promise<void>;\n\n  private resolveState?: VoidFunction;\n\n  constructor(\n    private isOutgoing: boolean,\n  ) {\n    this.waitForState = new Promise<void>((resolve) => {\n      this.resolveState = resolve;\n    });\n  }\n\n  async requestCall({ p, g, random }: DhConfig) {\n    const pBN = Helpers.readBigIntFromBuffer(Buffer.from(p), false);\n    const randomBN = Helpers.readBigIntFromBuffer(Buffer.from(random), false);\n\n    const gA = Helpers.modExp(BigInt(g), randomBN, pBN);\n\n    this.gA = gA;\n    this.p = pBN;\n    this.random = randomBN;\n\n    const gAHash: Buffer = await Helpers.sha256(Helpers.getByteArray(gA));\n    return Array.from(gAHash);\n  }\n\n  acceptCall({ p, g, random }: DhConfig) {\n    const pLast = Helpers.readBigIntFromBuffer(p, false);\n    const randomLast = Helpers.readBigIntFromBuffer(random, false);\n\n    const gB = Helpers.modExp(BigInt(g), randomLast, pLast);\n    this.gB = gB;\n    this.p = pLast;\n    this.random = randomLast;\n\n    return Array.from(Helpers.getByteArray(gB));\n  }\n\n  async confirmCall(gAOrB: number[], emojiData: Uint16Array, emojiOffsets: number[]) {\n    if (this.isOutgoing) {\n      this.gB = Helpers.readBigIntFromBuffer(Buffer.from(gAOrB), false);\n    } else {\n      this.gA = Helpers.readBigIntFromBuffer(Buffer.from(gAOrB), false);\n    }\n    const authKey = Helpers.modExp(\n      !this.isOutgoing ? this.gA : this.gB,\n      this.random,\n      this.p,\n    );\n    const fingerprint: Buffer = await Helpers.sha1(Helpers.getByteArray(authKey));\n    const keyFingerprint = Helpers.readBigIntFromBuffer(fingerprint.slice(-8).reverse(), false);\n\n    const emojis = await generateEmojiFingerprint(\n      Helpers.getByteArray(authKey),\n      Helpers.getByteArray(this.gA),\n      emojiData,\n      emojiOffsets,\n    );\n\n    const key = new AuthKey();\n    await key.setKey(Helpers.getByteArray(authKey));\n    this.state = new MTProtoState(key, new Logger(), true, this.isOutgoing);\n    this.resolveState!();\n\n    return { gA: Array.from(Helpers.getByteArray(this.gA)), keyFingerprint: keyFingerprint.toString(), emojis };\n  }\n\n  async encode(data: string) {\n    if (!this.state) return undefined;\n\n    const seqArray = new Uint32Array(1);\n    seqArray[0] = this.seq++;\n    const encodedData = await this.state.encryptMessageData(\n      Buffer.concat([Helpers.convertToLittle(seqArray), Buffer.from(data)]),\n    );\n    return Array.from(encodedData);\n  }\n\n  async decode(data: number[]): Promise<any> {\n    if (!this.state) {\n      return this.waitForState.then(() => {\n        return this.decode(data);\n      });\n    }\n\n    const message = await this.state.decryptMessageData(Buffer.from(data));\n\n    return JSON.parse(message.toString());\n  }\n}\n\n// https://github.com/TelegramV/App/blob/ead52320975362139cabad18cf8346f98c349a22/src/js/MTProto/Calls/Internal.js#L72\nfunction computeEmojiIndex(bytes: Uint8Array) {\n  return ((BigInt(bytes[0]).and(0x7F)).shiftLeft(56))\n    .or((BigInt(bytes[1]).shiftLeft(48)))\n    .or((BigInt(bytes[2]).shiftLeft(40)))\n    .or((BigInt(bytes[3]).shiftLeft(32)))\n    .or((BigInt(bytes[4]).shiftLeft(24)))\n    .or((BigInt(bytes[5]).shiftLeft(16)))\n    .or((BigInt(bytes[6]).shiftLeft(8)))\n    .or((BigInt(bytes[7])));\n}\n\nexport async function generateEmojiFingerprint(\n  authKey: Uint8Array, gA: Uint8Array, emojiData: Uint16Array, emojiOffsets: number[],\n) {\n  const hash = await Helpers.sha256(Buffer.concat([new Uint8Array(authKey), new Uint8Array(gA)]));\n  const result = [];\n  const emojiCount = emojiOffsets.length - 1;\n  const kPartSize = 8;\n  for (let partOffset = 0; partOffset !== hash.byteLength; partOffset += kPartSize) {\n    const value = computeEmojiIndex(hash.subarray(partOffset, partOffset + kPartSize));\n    const index = value.modPow(1, emojiCount).toJSNumber();\n    const offset = emojiOffsets[index];\n    const size = emojiOffsets[index + 1] - offset;\n    result.push(String.fromCharCode(...emojiData.subarray(offset, offset + size)));\n  }\n  return result.join('');\n}\n\nexport function createPhoneCallState(params: ConstructorParameters<typeof PhoneCallState>) {\n  currentPhoneCallState = new PhoneCallState(...params);\n}\n\nexport function destroyPhoneCallState() {\n  currentPhoneCallState = undefined;\n}\n\ntype FunctionPropertyOf<T> = {\n  [P in keyof T]: T[P] extends Function\n    ? P\n    : never\n}[keyof T];\n\ntype ParamsOf<T extends FunctionPropertyOf<PhoneCallState>> = Parameters<PhoneCallState[T]>;\ntype ReturnTypeOf<T extends FunctionPropertyOf<PhoneCallState>> = ReturnType<PhoneCallState[T]>;\n\nexport function encodePhoneCallData(params: ParamsOf<'encode'>): ReturnTypeOf<'encode'> {\n  return currentPhoneCallState!.encode(...params);\n}\n\nexport function decodePhoneCallData(params: ParamsOf<'decode'>): ReturnTypeOf<'decode'> {\n  return currentPhoneCallState!.decode(...params);\n}\n\nexport function confirmPhoneCall(params: ParamsOf<'confirmCall'>): ReturnTypeOf<'confirmCall'> {\n  return currentPhoneCallState!.confirmCall(...params);\n}\n\nexport function acceptPhoneCall(params: ParamsOf<'acceptCall'>): ReturnTypeOf<'acceptCall'> {\n  return currentPhoneCallState!.acceptCall(...params);\n}\n\nexport function requestPhoneCall(params: ParamsOf<'requestCall'>): ReturnTypeOf<'requestCall'> {\n  return currentPhoneCallState!.requestCall(...params);\n}\n","import type {\n  OnApiUpdate,\n  ApiInitialArgs,\n  ApiUpdate,\n  ApiOnProgress,\n} from '../types';\nimport type { Methods, MethodArgs, MethodResponse } from './methods/types';\nimport type { LocalDb } from './localDb';\n\nimport { API_THROTTLE_RESET_UPDATES, API_UPDATE_THROTTLE } from '../../config';\nimport { throttle, throttleWithTickEnd } from '../../util/schedulers';\nimport { updateFullLocalDb } from './localDb';\nimport { init as initUpdater } from './updater';\nimport { init as initAuth } from './methods/auth';\nimport { init as initChats } from './methods/chats';\nimport { init as initMessages } from './methods/messages';\nimport { init as initUsers } from './methods/users';\nimport { init as initClient } from './methods/client';\nimport { init as initStickers } from './methods/symbols';\nimport { init as initManagement } from './methods/management';\nimport { init as initTwoFaSettings } from './methods/twoFaSettings';\nimport { init as initBots } from './methods/bots';\nimport { init as initCalls } from './methods/calls';\nimport { init as initPayments } from './methods/payments';\nimport * as methods from './methods';\n\nlet onUpdate: OnApiUpdate;\n\nexport async function initApi(_onUpdate: OnApiUpdate, initialArgs: ApiInitialArgs, initialLocalDb?: LocalDb) {\n  onUpdate = _onUpdate;\n\n  initUpdater(handleUpdate);\n  initAuth(handleUpdate);\n  initChats(handleUpdate);\n  initMessages(handleUpdate);\n  initUsers(handleUpdate);\n  initStickers(handleUpdate);\n  initManagement(handleUpdate);\n  initTwoFaSettings(handleUpdate);\n  initBots(handleUpdate);\n  initCalls(handleUpdate);\n  initPayments(handleUpdate);\n\n  if (initialLocalDb) updateFullLocalDb(initialLocalDb);\n\n  await initClient(handleUpdate, initialArgs);\n}\n\nexport function callApi<T extends keyof Methods>(fnName: T, ...args: MethodArgs<T>): MethodResponse<T> {\n  // @ts-ignore\n  return methods[fnName](...args) as MethodResponse<T>;\n}\n\nexport function cancelApiProgress(progressCallback: ApiOnProgress) {\n  progressCallback.isCanceled = true;\n}\n\nconst flushUpdatesOnTickEnd = throttleWithTickEnd(flushUpdates);\n\nlet flushUpdatesThrottled: typeof flushUpdatesOnTickEnd | undefined;\nlet currentThrottleId: number | undefined;\n\nlet pendingUpdates: ApiUpdate[] | undefined;\n\nfunction handleUpdate(update: ApiUpdate) {\n  if (!pendingUpdates) {\n    pendingUpdates = [update];\n  } else {\n    pendingUpdates.push(update);\n  }\n\n  if (!flushUpdatesThrottled || API_THROTTLE_RESET_UPDATES.has(update['@type'])) {\n    flushUpdatesThrottled = throttle(flushUpdatesOnTickEnd, API_UPDATE_THROTTLE, true);\n    currentThrottleId = Math.random();\n  }\n\n  flushUpdatesThrottled(currentThrottleId!);\n}\n\nfunction flushUpdates(throttleId: number) {\n  if (!pendingUpdates || throttleId !== currentThrottleId) {\n    return;\n  }\n\n  const currentUpdates = pendingUpdates!;\n  pendingUpdates = undefined;\n  currentUpdates.forEach(onUpdate);\n}\n","import type { ApiOnProgress, ApiUpdate } from '../../types';\nimport type { OriginMessageEvent, WorkerMessageData } from './types';\n\nimport { DEBUG } from '../../../config';\nimport { initApi, callApi, cancelApiProgress } from '../provider';\nimport { log } from '../helpers';\nimport {BYPASS_API} from \"../../../worker/setting\";\n\ndeclare const self: WorkerGlobalScope;\n\nhandleErrors();\n\nconst callbackState = new Map<string, ApiOnProgress>();\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD WORKER');\n}\n\nonmessage = async (message: OriginMessageEvent) => {\n  const { data } = message;\n\n  switch (data.type) {\n    case 'initApi': {\n      await initApi(onUpdate, data.args[0], data.args[1]);\n      break;\n    }\n    case 'callMethod': {\n      const {\n        messageId, name, args, withCallback,\n      } = data;\n      try {\n        if (messageId && withCallback) {\n          const callback = (...callbackArgs: any[]) => {\n            const lastArg = callbackArgs[callbackArgs.length - 1];\n\n            sendToOrigin({\n              type: 'methodCallback',\n              messageId,\n              callbackArgs,\n            }, lastArg instanceof ArrayBuffer ? lastArg : undefined);\n          };\n\n          callbackState.set(messageId, callback);\n\n          args.push(callback as never);\n        }\n        if(!BYPASS_API.includes(name)){\n          if(DEBUG){\n            console.log(`xxx callApi('${name}'`)\n          }\n          return;\n        }\n        const response = await callApi(name, ...args);\n\n        if (DEBUG && typeof response === 'object' && 'CONSTRUCTOR_ID' in response) {\n          log('UNEXPECTED RESPONSE', `${name}: ${response.className}`);\n        }\n\n        const { arrayBuffer } = (typeof response === 'object' && 'arrayBuffer' in response && response) || {};\n\n        if (messageId) {\n          sendToOrigin({\n            type: 'methodResponse',\n            messageId,\n            response,\n          }, arrayBuffer);\n        }\n      } catch (error: any) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(error);\n        }\n\n        if (messageId) {\n          sendToOrigin({\n            type: 'methodResponse',\n            messageId,\n            error: { message: error.message },\n          });\n        }\n      }\n\n      if (messageId) {\n        callbackState.delete(messageId);\n      }\n\n      break;\n    }\n    case 'cancelProgress': {\n      const callback = callbackState.get(data.messageId);\n      if (callback) {\n        cancelApiProgress(callback);\n      }\n\n      break;\n    }\n    case 'ping': {\n      sendToOrigin({\n        type: 'methodResponse',\n        messageId: data.messageId!,\n      });\n\n      break;\n    }\n  }\n};\n\nfunction handleErrors() {\n  self.onerror = (e) => {\n    // eslint-disable-next-line no-console\n    console.error(e);\n    sendToOrigin({ type: 'unhandledError', error: { message: e.error.message || 'Uncaught exception in worker' } });\n  };\n\n  self.addEventListener('unhandledrejection', (e) => {\n    // eslint-disable-next-line no-console\n    console.error(e);\n    sendToOrigin({ type: 'unhandledError', error: { message: e.reason.message || 'Uncaught rejection in worker' } });\n  });\n}\n\nfunction onUpdate(update: ApiUpdate) {\n  sendToOrigin({\n    type: 'update',\n    update,\n  });\n\n  if (DEBUG && update['@type'] !== 'updateUserStatus' && update['@type'] !== 'updateServerTimeOffset') {\n    log('UPDATE', update['@type'], update);\n  }\n}\n\nfunction sendToOrigin(data: WorkerMessageData, arrayBuffer?: ArrayBuffer) {\n  if (arrayBuffer) {\n    postMessage(data, [arrayBuffer]);\n  } else {\n    postMessage(data);\n  }\n}\n","import type { ApiWebDocument } from './bots';\nimport type { ApiGroupCall, PhoneCallAction } from './calls';\nimport type { ApiChat } from './chats';\n\nexport interface ApiDimensions {\n  width: number;\n  height: number;\n}\n\nexport interface ApiPhotoSize extends ApiDimensions {\n  type: 's' | 'm' | 'x' | 'y' | 'z';\n}\n\nexport interface ApiVideoSize extends ApiDimensions {\n  type: 'u' | 'v';\n  videoStartTs: number;\n  size: number;\n}\n\nexport interface ApiThumbnail extends ApiDimensions {\n  dataUri: string;\n}\n\nexport interface ApiPhoto {\n  id: string;\n  thumbnail?: ApiThumbnail;\n  isVideo?: boolean;\n  sizes: ApiPhotoSize[];\n  videoSizes?: ApiVideoSize[];\n  blobUrl?: string;\n  isSpoiler?: boolean;\n}\n\nexport interface ApiSticker {\n  id: string;\n  stickerSetInfo: ApiStickerSetInfo;\n  emoji?: string;\n  isCustomEmoji?: boolean;\n  isLottie: boolean;\n  isVideo: boolean;\n  width?: number;\n  height?: number;\n  thumbnail?: ApiThumbnail;\n  isPreloadedGlobally?: boolean;\n  hasEffect?: boolean;\n  isFree?: boolean;\n  shouldUseTextColor?: boolean;\n}\n\nexport interface ApiStickerSet {\n  isArchived?: true;\n  isLottie?: true;\n  isVideos?: true;\n  isEmoji?: true;\n  installedDate?: number;\n  id: string;\n  accessHash: string;\n  title: string;\n  hasThumbnail?: boolean;\n  count: number;\n  stickers?: ApiSticker[];\n  packs?: Record<string, ApiSticker[]>;\n  covers?: ApiSticker[];\n  shortName: string;\n}\n\ntype ApiStickerSetInfoShortName = {\n  shortName: string;\n};\n\ntype ApiStickerSetInfoId = {\n  id: string;\n  accessHash: string;\n};\n\ntype ApiStickerSetInfoMissing = {\n  isMissing: true;\n};\n\nexport type ApiStickerSetInfo = ApiStickerSetInfoShortName | ApiStickerSetInfoId | ApiStickerSetInfoMissing;\n\nexport interface ApiVideo {\n  id: string;\n  mimeType: string;\n  duration: number;\n  fileName: string;\n  width?: number;\n  height?: number;\n  supportsStreaming?: boolean;\n  isRound?: boolean;\n  isGif?: boolean;\n  isSpoiler?: boolean;\n  thumbnail?: ApiThumbnail;\n  blobUrl?: string;\n  previewBlobUrl?: string;\n  size: number;\n}\n\nexport interface ApiAudio {\n  id: string;\n  size: number;\n  mimeType: string;\n  fileName: string;\n  duration: number;\n  performer?: string;\n  title?: string;\n  thumbnailSizes?: ApiPhotoSize[];\n}\n\nexport interface ApiVoice {\n  id: string;\n  duration: number;\n  waveform?: number[];\n}\n\nexport interface ApiDocument {\n  id?: string;\n  fileName: string;\n  size: number;\n  timestamp?: number;\n  mimeType: string;\n  thumbnail?: ApiThumbnail;\n  previewBlobUrl?: string;\n  mediaType?: 'photo' | 'video';\n  mediaSize?: ApiDimensions;\n}\n\nexport interface ApiContact {\n  firstName: string;\n  lastName: string;\n  phoneNumber: string;\n  userId: string;\n}\n\nexport interface ApiPollAnswer {\n  text: string;\n  option: string;\n}\n\nexport interface ApiPollResult {\n  isChosen?: true;\n  isCorrect?: true;\n  option: string;\n  votersCount: number;\n}\n\nexport interface ApiPoll {\n  id: string;\n  summary: {\n    closed?: true;\n    isPublic?: true;\n    multipleChoice?: true;\n    quiz?: true;\n    question: string;\n    answers: ApiPollAnswer[];\n    closePeriod?: number;\n    closeDate?: number;\n  };\n  results: {\n    isMin?: true;\n    results?: ApiPollResult[];\n    totalVoters?: number;\n    recentVoterIds?: string[];\n    solution?: string;\n    solutionEntities?: ApiMessageEntity[];\n  };\n}\n\n// First type used for state, second - for API requests\nexport type ApiInputInvoice = {\n  chatId: string;\n  messageId: number;\n  isExtendedMedia?: boolean;\n} | {\n  slug: string;\n};\n\nexport type ApiRequestInputInvoice = {\n  chat: ApiChat;\n  messageId: number;\n} | {\n  slug: string;\n};\n\nexport interface ApiInvoice {\n  text: string;\n  title: string;\n  photo?: ApiWebDocument;\n  amount: number;\n  currency: string;\n  receiptMsgId?: number;\n  isTest?: boolean;\n  isRecurring?: boolean;\n  recurringTermsUrl?: string;\n  extendedMedia?: ApiMessageExtendedMediaPreview;\n  maxTipAmount?: number;\n  suggestedTipAmounts?: number[];\n}\n\nexport interface ApiMessageExtendedMediaPreview {\n  width?: number;\n  height?: number;\n  thumbnail?: ApiThumbnail;\n  duration?: number;\n}\n\nexport interface ApiPaymentCredentials {\n  id: string;\n  title: string;\n}\n\ninterface ApiGeoPoint {\n  long: number;\n  lat: number;\n  accessHash: string;\n  accuracyRadius?: number;\n}\n\ninterface ApiGeo {\n  type: 'geo';\n  geo: ApiGeoPoint;\n}\n\ninterface ApiVenue {\n  type: 'venue';\n  geo: ApiGeoPoint;\n  title: string;\n  address: string;\n  provider: string;\n  venueId: string;\n  venueType: string;\n}\n\ninterface ApiGeoLive {\n  type: 'geoLive';\n  geo: ApiGeoPoint;\n  heading?: number;\n  period: number;\n}\n\nexport type ApiLocation = ApiGeo | ApiVenue | ApiGeoLive;\n\nexport type ApiGame = {\n  title: string;\n  description: string;\n  photo?: ApiPhoto;\n  shortName: string;\n  id: string;\n  accessHash: string;\n  document?: ApiDocument;\n};\n\nexport type ApiNewPoll = {\n  summary: ApiPoll['summary'];\n  quiz?: {\n    correctAnswers: string[];\n    solution?: string;\n    solutionEntities?: ApiMessageEntity[];\n  };\n};\n\nexport interface ApiAction {\n  text: string;\n  targetUserIds?: string[];\n  targetChatId?: string;\n  type: 'historyClear' | 'contactSignUp' | 'chatCreate' | 'topicCreate' | 'suggestProfilePhoto' | 'other';\n  photo?: ApiPhoto;\n  amount?: number;\n  currency?: string;\n  translationValues: string[];\n  call?: Partial<ApiGroupCall>;\n  phoneCall?: PhoneCallAction;\n  score?: number;\n  months?: number;\n  topicEmojiIconId?: string;\n  isTopicAction?: boolean;\n}\n\nexport interface ApiWebPage {\n  id: number;\n  url: string;\n  displayUrl: string;\n  type?: string;\n  siteName?: string;\n  title?: string;\n  description?: string;\n  photo?: ApiPhoto;\n  duration?: number;\n  document?: ApiDocument;\n  video?: ApiVideo;\n}\n\nexport interface ApiMessageForwardInfo {\n  date: number;\n  isImported?: boolean;\n  isChannelPost: boolean;\n  channelPostId?: number;\n  isLinkedChannelPost?: boolean;\n  fromChatId?: string;\n  senderUserId?: string;\n  fromMessageId?: number;\n  hiddenUserName?: string;\n  postAuthorTitle?: string;\n}\n\nexport type ApiMessageEntityDefault = {\n  type: Exclude<\n  `${ApiMessageEntityTypes}`,\n  `${ApiMessageEntityTypes.Pre}` | `${ApiMessageEntityTypes.TextUrl}` | `${ApiMessageEntityTypes.MentionName}` |\n  `${ApiMessageEntityTypes.CustomEmoji}`\n  >;\n  offset: number;\n  length: number;\n};\n\nexport type ApiMessageEntityPre = {\n  type: ApiMessageEntityTypes.Pre;\n  offset: number;\n  length: number;\n  language?: string;\n};\n\nexport type ApiMessageEntityTextUrl = {\n  type: ApiMessageEntityTypes.TextUrl;\n  offset: number;\n  length: number;\n  url: string;\n};\n\nexport type ApiMessageEntityMentionName = {\n  type: ApiMessageEntityTypes.MentionName;\n  offset: number;\n  length: number;\n  userId: string;\n};\n\nexport type ApiMessageEntityCustomEmoji = {\n  type: ApiMessageEntityTypes.CustomEmoji;\n  offset: number;\n  length: number;\n  documentId: string;\n};\n\nexport type ApiMessageEntity = ApiMessageEntityDefault | ApiMessageEntityPre | ApiMessageEntityTextUrl |\nApiMessageEntityMentionName | ApiMessageEntityCustomEmoji;\n\nexport enum ApiMessageEntityTypes {\n  Bold = 'MessageEntityBold',\n  Typing = 'MessageEntityTyping',\n  Blockquote = 'MessageEntityBlockquote',\n  BotCommand = 'MessageEntityBotCommand',\n  Cashtag = 'MessageEntityCashtag',\n  Code = 'MessageEntityCode',\n  Email = 'MessageEntityEmail',\n  Hashtag = 'MessageEntityHashtag',\n  Italic = 'MessageEntityItalic',\n  MentionName = 'MessageEntityMentionName',\n  Mention = 'MessageEntityMention',\n  Phone = 'MessageEntityPhone',\n  Pre = 'MessageEntityPre',\n  Strike = 'MessageEntityStrike',\n  TextUrl = 'MessageEntityTextUrl',\n  Url = 'MessageEntityUrl',\n  Underline = 'MessageEntityUnderline',\n  Spoiler = 'MessageEntitySpoiler',\n  CustomEmoji = 'MessageEntityCustomEmoji',\n  Unknown = 'MessageEntityUnknown',\n}\n\nexport interface ApiFormattedText {\n  text: string;\n  entities?: ApiMessageEntity[];\n}\n\nexport interface ApiMessage {\n  id: number;\n  chatId: string;\n  content: {\n    text?: ApiFormattedText;\n    photo?: ApiPhoto;\n    video?: ApiVideo;\n    document?: ApiDocument;\n    sticker?: ApiSticker;\n    contact?: ApiContact;\n    poll?: ApiPoll;\n    action?: ApiAction;\n    webPage?: ApiWebPage;\n    audio?: ApiAudio;\n    voice?: ApiVoice;\n    invoice?: ApiInvoice;\n    location?: ApiLocation;\n    game?: ApiGame;\n  };\n  date: number;\n  isOutgoing: boolean;\n  senderId?: string;\n  replyToChatId?: string;\n  replyToMessageId?: number;\n  replyToTopMessageId?: number;\n  isTopicReply?: true;\n  sendingState?: 'messageSendingStatePending' | 'messageSendingStateFailed';\n  forwardInfo?: ApiMessageForwardInfo;\n  isDeleting?: boolean;\n  previousLocalId?: number;\n  views?: number;\n  forwards?: number;\n  isEdited?: boolean;\n  editDate?: number;\n  isMentioned?: boolean;\n  isMediaUnread?: boolean;\n  groupedId?: string;\n  isInAlbum?: boolean;\n  hasUnreadMention?: boolean;\n  inlineButtons?: ApiKeyboardButtons;\n  keyboardButtons?: ApiKeyboardButtons;\n  keyboardPlaceholder?: string;\n  isKeyboardSingleUse?: boolean;\n  isKeyboardSelective?: boolean;\n  viaBotId?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  postAuthorTitle?: string;\n  isScheduled?: boolean;\n  shouldHideKeyboardButtons?: boolean;\n  isHideKeyboardSelective?: boolean;\n  isFromScheduled?: boolean;\n  isSilent?: boolean;\n  seenByUserIds?: string[];\n  isProtected?: boolean;\n  isForwardingAllowed?: boolean;\n  transcriptionId?: string;\n  isTranscriptionError?: boolean;\n  emojiOnlyCount?: number;\n  reactors?: {\n    nextOffset?: string;\n    count: number;\n    reactions: ApiUserReaction[];\n  };\n  reactions?: ApiReactions;\n}\n\nexport interface ApiReactions {\n  canSeeList?: boolean;\n  results: ApiReactionCount[];\n  recentReactions?: ApiUserReaction[];\n}\n\nexport interface ApiUserReaction {\n  userId: string;\n  reaction: ApiReaction;\n  isBig?: boolean;\n  isUnread?: boolean;\n}\n\nexport interface ApiReactionCount {\n  chosenOrder?: number;\n  count: number;\n  reaction: ApiReaction;\n}\n\nexport interface ApiAvailableReaction {\n  selectAnimation?: ApiDocument;\n  activateAnimation?: ApiDocument;\n  effectAnimation?: ApiDocument;\n  staticIcon?: ApiDocument;\n  centerIcon?: ApiDocument;\n  aroundAnimation?: ApiDocument;\n  reaction: ApiReactionEmoji;\n  title: string;\n  isInactive?: boolean;\n  isPremium?: boolean;\n}\n\ntype ApiChatReactionsAll = {\n  type: 'all';\n  areCustomAllowed?: true;\n};\n\ntype ApiChatReactionsSome = {\n  type: 'some';\n  allowed: ApiReaction[];\n};\n\nexport type ApiChatReactions = ApiChatReactionsAll | ApiChatReactionsSome;\n\nexport type ApiReactionEmoji = {\n  emoticon: string;\n};\n\nexport type ApiReactionCustomEmoji = {\n  documentId: string;\n};\n\nexport type ApiReaction = ApiReactionEmoji | ApiReactionCustomEmoji;\n\nexport interface ApiThreadInfo {\n  isComments?: boolean;\n  threadId: number;\n  chatId: string;\n  topMessageId?: number;\n  originChannelId?: string;\n  messagesCount: number;\n  lastMessageId?: number;\n  lastReadInboxMessageId?: number;\n  recentReplierIds?: string[];\n}\n\nexport type ApiMessageOutgoingStatus = 'read' | 'succeeded' | 'pending' | 'failed';\n\nexport type ApiSponsoredMessage = {\n  chatId?: string;\n  randomId: string;\n  isRecommended?: boolean;\n  isBot?: boolean;\n  channelPostId?: number;\n  startParam?: string;\n  chatInviteHash?: string;\n  chatInviteTitle?: string;\n  text: ApiFormattedText;\n  expiresAt: number;\n};\n\n// KeyboardButtons\n\ninterface ApiKeyboardButtonSimple {\n  type: 'unsupported' | 'buy' | 'command' | 'requestPhone' | 'game';\n  text: string;\n}\n\ninterface ApiKeyboardButtonReceipt {\n  type: 'receipt';\n  text: string;\n  receiptMessageId: number;\n}\n\ninterface ApiKeyboardButtonUrl {\n  type: 'url';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonSimpleWebView {\n  type: 'simpleWebView';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonWebView {\n  type: 'webView';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonCallback {\n  type: 'callback';\n  text: string;\n  data: string;\n}\n\ninterface ApiKeyboardButtonRequestUploadImage {\n  type: 'requestUploadImage';\n  text: string;\n}\n\ninterface ApiKeyboardButtonRequestPoll {\n  type: 'requestPoll';\n  text: string;\n  isQuiz?: boolean;\n}\n\ninterface ApiKeyboardButtonSwitchBotInline {\n  type: 'switchBotInline';\n  text: string;\n  query: string;\n  isSamePeer?: boolean;\n}\n\ninterface ApiKeyboardButtonUserProfile {\n  type: 'userProfile';\n  text: string;\n  userId: string;\n}\n\ninterface ApiKeyboardButtonUrlAuth {\n  type: 'urlAuth';\n  text: string;\n  url: string;\n  buttonId: number;\n}\n\nexport type ApiTranscription = {\n  text: string;\n  isPending?: boolean;\n  transcriptionId: string;\n};\n\nexport type ApiKeyboardButton = (\n  ApiKeyboardButtonSimple\n  | ApiKeyboardButtonReceipt\n  | ApiKeyboardButtonUrl\n  | ApiKeyboardButtonCallback\n  | ApiKeyboardButtonRequestPoll\n  | ApiKeyboardButtonSwitchBotInline\n  | ApiKeyboardButtonUserProfile\n  | ApiKeyboardButtonWebView\n  | ApiKeyboardButtonSimpleWebView\n  | ApiKeyboardButtonUrlAuth\n  | ApiKeyboardButtonRequestUploadImage\n);\n\nexport type ApiKeyboardButtons = ApiKeyboardButton[][];\nexport type ApiReplyKeyboard = {\n  keyboardPlaceholder?: string;\n  isKeyboardSingleUse?: boolean;\n  isKeyboardSelective?: boolean;\n} & {\n  [K in 'inlineButtons' | 'keyboardButtons']?: ApiKeyboardButtons;\n};\n\nexport type ApiMessageSearchType = 'text' | 'media' | 'documents' | 'links' | 'audio' | 'voice' | 'profilePhoto';\nexport type ApiGlobalMessageSearchType = 'text' | 'media' | 'documents' | 'links' | 'audio' | 'voice';\n\nexport type ApiReportReason = 'spam' | 'violence' | 'pornography' | 'childAbuse'\n| 'copyright' | 'geoIrrelevant' | 'fake' | 'illegalDrugs' | 'personalDetails' | 'other';\n\nexport type ApiSendMessageAction = {\n  type: 'cancel' | 'typing' | 'recordAudio' | 'chooseSticker' | 'playingGame';\n};\n\nexport type ApiThemeParameters = {\n  bg_color: string;\n  text_color: string;\n  hint_color: string;\n  link_color: string;\n  button_color: string;\n  button_text_color: string;\n  secondary_bg_color: string;\n};\n\nexport const MAIN_THREAD_ID = -1;\n\n// `Symbol` can not be transferred from worker\nexport const MESSAGE_DELETED = 'MESSAGE_DELETED';\n","// We cache avatars as Data URI for faster initial load\n// and messages media as Blob for smaller size.\n\nexport enum ApiMediaFormat {\n  BlobUrl,\n  Progressive,\n  Stream,\n  DownloadUrl,\n  Text,\n}\n\nexport type ApiParsedMedia = string | Blob | ArrayBuffer;\nexport type ApiPreparedMedia = string;\n","import type { ApiLimitType } from './global/types';\nlet adr\ntry{\n  adr = localStorage.getItem(\"adr\")\n  if(!adr){\n    adr = \"0\"\n  }\n}catch (e){\n  adr = \"0\"\n}\nexport const GLOBAL_STATE_CACHE_KEY = 'tt-global-state-'+adr;\n\nexport const CLOUD_MESSAGE_ENABLE = false\nexport const CLOUD_MESSAGE_API = process.env.CLOUD_MESSAGE_API;\nexport const AI_PROXY_API = process.env.AI_PROXY_API;\n\nexport const TEST_USERNAME = process.env.TEST_USERNAME;\nexport const TEST_PWD = process.env.TEST_PWD;\nexport const CLOUD_WS_URL = \"\";\n\nexport const SESSION_TOKEN = 'user_token';\n\nexport const APP_NAME = process.env.APP_NAME || 'Wai';\nexport const APP_VERSION = process.env.APP_VERSION!;\nexport const RELEASE_DATETIME = process.env.RELEASE_DATETIME;\nexport const PRODUCTION_HOSTNAME = 'web.telegram.org';\n\nexport const DEBUG = process.env.APP_ENV !== 'production';\nexport const DEBUG_MORE = false;\n\nexport const IS_MOCKED_CLIENT = process.env.APP_MOCKED_CLIENT === '1';\nexport const IS_TEST = process.env.APP_ENV === 'test';\nexport const IS_PERF = process.env.APP_ENV === 'perf';\nexport const IS_BETA = process.env.APP_ENV === 'staging';\n\nexport const BETA_CHANGELOG_URL = 'https://github.com/ptp-build/wai-chat/issues';\n\nexport const DEBUG_ALERT_MSG = 'Shoot!\\nSomething went wrong, please see the error details in Dev Tools Console.';\nexport const DEBUG_GRAMJS = false;\n\nexport const PAGE_TITLE = process.env.APP_TITLE!;\nexport const INACTIVE_MARKER = '[Inactive]';\n\nexport const DEBUG_PAYMENT_SMART_GLOCAL = false;\n\n\nexport const SESSION_USER_KEY = 'user_auth';\nexport const LEGACY_SESSION_KEY = 'GramJs:sessionId';\nexport const PASSCODE_CACHE_NAME = 'tt-passcode';\n\nexport const GLOBAL_STATE_CACHE_DISABLED = false;\n\nexport const GLOBAL_STATE_CACHE_USER_LIST_LIMIT = 500;\nexport const GLOBAL_STATE_CACHE_CHAT_LIST_LIMIT = 200;\nexport const GLOBAL_STATE_CACHE_CHATS_WITH_MESSAGES_LIMIT = 30;\nexport const GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT = 150;\n\nexport const MEDIA_CACHE_DISABLED = false;\nexport const MEDIA_CACHE_NAME_WAI = 'wai-media';\nexport const MEDIA_CACHE_NAME = 'tt-media';\nexport const MEDIA_CACHE_NAME_AVATARS = 'tt-media-avatars';\nexport const MEDIA_PROGRESSIVE_CACHE_DISABLED = false;\nexport const MEDIA_PROGRESSIVE_CACHE_NAME = 'tt-media-progressive';\nexport const CUSTOM_EMOJI_PREVIEW_CACHE_DISABLED = false;\nexport const CUSTOM_EMOJI_PREVIEW_CACHE_NAME = 'tt-custom-emoji-preview';\nexport const MEDIA_CACHE_MAX_BYTES = 512 * 1024; // 512 KB\nexport const CUSTOM_BG_CACHE_NAME = 'tt-custom-bg';\nexport const LANG_CACHE_NAME = 'tt-lang-packs';\nexport const ASSET_CACHE_NAME = 'tt-assets';\nexport const AUTODOWNLOAD_FILESIZE_MB_LIMITS = [1, 5, 10, 50, 100, 500];\nexport const DATA_BROADCAST_CHANNEL_NAME = 'tt-global';\nexport const ESTABLISH_BROADCAST_CHANNEL_NAME = 'tt-establish';\nexport const MULTITAB_LOCALSTORAGE_KEY = 'tt-multitab';\n\nexport const DOWNLOAD_WORKERS = 16;\nexport const UPLOAD_WORKERS = 16;\n\nconst isBigScreen = typeof window !== 'undefined' && window.innerHeight >= 900;\n\nexport const MIN_PASSWORD_LENGTH = 1;\n\nexport const MESSAGE_LIST_SLICE = isBigScreen ? 60 : 40;\nexport const MESSAGE_LIST_VIEWPORT_LIMIT = MESSAGE_LIST_SLICE * 2;\n\nexport const ARCHIVE_MINIMIZED_HEIGHT = 36;\nexport const CHAT_HEIGHT_PX = 72;\nexport const TOPIC_HEIGHT_PX = 65;\nexport const CHAT_LIST_SLICE = isBigScreen ? 30 : 25;\nexport const CHAT_LIST_LOAD_SLICE = 100;\nexport const SHARED_MEDIA_SLICE = 42;\nexport const MESSAGE_SEARCH_SLICE = 42;\nexport const GLOBAL_SEARCH_SLICE = 20;\nexport const GLOBAL_TOPIC_SEARCH_SLICE = 5;\nexport const MEMBERS_SLICE = 30;\nexport const MEMBERS_LOAD_SLICE = 200;\nexport const PINNED_MESSAGES_LIMIT = 50;\nexport const BLOCKED_LIST_LIMIT = 100;\nexport const PROFILE_PHOTOS_LIMIT = 40;\nexport const PROFILE_SENSITIVE_AREA = 500;\nexport const TOPIC_LIST_SENSITIVE_AREA = 600;\nexport const COMMON_CHATS_LIMIT = 100;\nexport const GROUP_CALL_PARTICIPANTS_LIMIT = 100;\nexport const REACTION_LIST_LIMIT = 100;\nexport const REACTION_UNREAD_SLICE = 100;\nexport const MENTION_UNREAD_SLICE = 100;\nexport const TOPICS_SLICE = 20;\nexport const TOPICS_SLICE_SECOND_LOAD = 500;\n\nexport const TOP_CHAT_MESSAGES_PRELOAD_LIMIT = 20;\n\nexport const SPONSORED_MESSAGE_CACHE_MS = 300000; // 5 min\n\nexport const DEFAULT_VOLUME = 1;\nexport const DEFAULT_PLAYBACK_RATE = 1;\nexport const PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION = 20 * 60; // 20 min\n\nexport const ANIMATION_LEVEL_MIN = 0;\nexport const ANIMATION_LEVEL_MED = 1;\nexport const ANIMATION_LEVEL_MAX = 2;\nexport const ANIMATION_LEVEL_DEFAULT = ANIMATION_LEVEL_MAX;\n\nexport const DEFAULT_MESSAGE_TEXT_SIZE_PX = 16;\nexport const IOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 17;\nexport const MACOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 15;\n\nexport const DRAFT_DEBOUNCE = 10000; // 10s\nexport const SEND_MESSAGE_ACTION_INTERVAL = 3000; // 3s\n// 10000s from https://corefork.telegram.org/api/url-authorization#automatic-authorization\nexport const APP_CONFIG_REFETCH_INTERVAL = 10000 * 1000;\n\nexport const EDITABLE_INPUT_ID = 'editable-message-text';\nexport const EDITABLE_INPUT_MODAL_ID = 'editable-message-text-modal';\n// eslint-disable-next-line max-len\nexport const EDITABLE_INPUT_CSS_SELECTOR = `.messages-layout .Transition__slide--active #${EDITABLE_INPUT_ID}, .messages-layout .Transition > .to #${EDITABLE_INPUT_ID}`;\nexport const EDITABLE_INPUT_MODAL_CSS_SELECTOR = `#${EDITABLE_INPUT_MODAL_ID}`;\n\nexport const CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\nexport const MESSAGE_CONTENT_CLASS_NAME = 'message-content';\nexport const MESSAGE_CONTENT_SELECTOR = '.message-content';\n\n// Screen width where Pinned Message / Audio Player in the Middle Header can be safely displayed\nexport const SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1440; // px\n// Screen width where Pinned Message / Audio Player in the Middle Header shouldn't collapse with ChatInfo\nexport const SAFE_SCREEN_WIDTH_FOR_CHAT_INFO = 1150; // px\n\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1275; // px\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN = 925; // px\nexport const MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES = 1340; // px\nexport const MOBILE_SCREEN_MAX_WIDTH = 600; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_WIDTH = 950; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_HEIGHT = 450; // px\n\nexport const LOCAL_MESSAGE_MIN_ID = 5e9;\nexport const MAX_INT_32 = 2 ** 31 - 1;\nexport const TMP_CHAT_ID = '0';\n\nexport const ANIMATION_END_DELAY = 100;\n\nexport const FAST_SMOOTH_MAX_DISTANCE = 1500;\nexport const FAST_SMOOTH_MIN_DURATION = 250;\nexport const FAST_SMOOTH_MAX_DURATION = 600;\nexport const FAST_SMOOTH_SHORT_TRANSITION_MAX_DISTANCE = 500; // px\n\n// Average duration of message sending animation\nexport const API_UPDATE_THROTTLE = Math.round((FAST_SMOOTH_MIN_DURATION + FAST_SMOOTH_MAX_DURATION) / 2);\nexport const API_THROTTLE_RESET_UPDATES = new Set([\n  'newMessage', 'newScheduledMessage', 'deleteMessages', 'deleteScheduledMessages', 'deleteHistory',\n]);\n\nexport const LOCK_SCREEN_ANIMATION_DURATION_MS = 200;\n\nexport const STICKER_SIZE_INLINE_DESKTOP_FACTOR = 13;\nexport const STICKER_SIZE_INLINE_MOBILE_FACTOR = 11;\nexport const STICKER_SIZE_AUTH = 160;\nexport const STICKER_SIZE_AUTH_MOBILE = 120;\nexport const STICKER_SIZE_PICKER = 64;\nexport const EMOJI_SIZE_PICKER = 40;\nexport const COMPOSER_EMOJI_SIZE_PICKER = 32;\nexport const STICKER_SIZE_GENERAL_SETTINGS = 48;\nexport const STICKER_SIZE_PICKER_HEADER = 32;\nexport const STICKER_PICKER_MAX_SHARED_COVERS = 20;\nexport const STICKER_SIZE_SEARCH = 64;\nexport const STICKER_SIZE_MODAL = 64;\nexport const EMOJI_SIZE_MODAL = 40;\nexport const STICKER_SIZE_TWO_FA = 160;\nexport const STICKER_SIZE_PASSCODE = 160;\nexport const STICKER_SIZE_DISCUSSION_GROUPS = 140;\nexport const STICKER_SIZE_FOLDER_SETTINGS = 100;\nexport const STICKER_SIZE_INLINE_BOT_RESULT = 100;\nexport const STICKER_SIZE_JOIN_REQUESTS = 140;\nexport const STICKER_SIZE_INVITES = 140;\nexport const RECENT_STICKERS_LIMIT = 20;\nexport const RECENT_STATUS_LIMIT = 20;\nexport const EMOJI_STATUS_LOOP_LIMIT = 2;\nexport const EMOJI_SIZES = 7;\nexport const RECENT_SYMBOL_SET_ID = 'recent';\nexport const FAVORITE_SYMBOL_SET_ID = 'favorite';\nexport const CHAT_STICKER_SET_ID = 'chatStickers';\nexport const PREMIUM_STICKER_SET_ID = 'premium';\nexport const DEFAULT_TOPIC_ICON_STICKER_ID = 'topic-default-icon';\nexport const DEFAULT_STATUS_ICON_ID = 'status-default-icon';\nexport const EMOJI_IMG_REGEX = /<img[^>]+alt=\"([^\"]+)\"(?![^>]*data-document-id)[^>]*>/gm;\n\nexport const BASE_EMOJI_KEYWORD_LANG = 'en';\n\nexport const MENU_TRANSITION_DURATION = 200;\nexport const SLIDE_TRANSITION_DURATION = 450;\n\nexport const VIDEO_MOV_TYPE = 'video/quicktime';\nexport const VIDEO_WEBM_TYPE = 'video/webm';\n\nexport const GIF_MIME_TYPE = 'image/gif';\n\nexport const SUPPORTED_IMAGE_CONTENT_TYPES = new Set([\n  'image/png', 'image/jpeg', GIF_MIME_TYPE,\n]);\n\nexport const SUPPORTED_VIDEO_CONTENT_TYPES = new Set([\n  'video/mp4', // video/quicktime added dynamically in environment.ts\n]);\n\nexport const SUPPORTED_AUDIO_CONTENT_TYPES = new Set([\n  'audio/mp3',\n  'audio/ogg',\n  'audio/wav',\n  'audio/mpeg',\n  'audio/flac',\n  'audio/aac',\n  'audio/m4a',\n  'audio/mp4',\n  'audio/x-m4a',\n]);\n\nexport const CONTENT_TYPES_WITH_PREVIEW = new Set([\n  ...SUPPORTED_IMAGE_CONTENT_TYPES,\n  ...SUPPORTED_VIDEO_CONTENT_TYPES,\n]);\n\nexport const CONTENT_NOT_SUPPORTED = 'The message is not supported on this version of Wai.';\n\n// Taken from https://github.com/telegramdesktop/tdesktop/blob/41d9a9fcbd0c809c60ddbd9350791b1436aff7d9/Telegram/SourceFiles/ui/boxes/choose_language_box.cpp#L28\nexport const SUPPORTED_TRANSLATION_LANGUAGES = [\n  // Official\n  'en', 'ar', 'be', 'ca', 'zh', 'nl', 'fr', 'de', 'id',\n  'it', 'ja', 'ko', 'pl', 'pt', 'ru', 'es', 'uk',\n  // Unnofficial\n  'af', 'sq', 'am', 'hy', 'az', 'eu', 'bn', 'bs', 'bg',\n  'ceb', 'zh-CN', 'zh-TW', 'co', 'hr', 'cs', 'da', 'eo',\n  'et', 'fi', 'fy', 'gl', 'ka', 'el', 'gu', 'ht', 'ha',\n  'haw', 'he', 'iw', 'hi', 'hmn', 'hu', 'is', 'ig', 'ga',\n  'jv', 'kn', 'kk', 'km', 'rw', 'ku', 'ky', 'lo', 'la',\n  'lv', 'lt', 'lb', 'mk', 'mg', 'ms', 'ml', 'mt', 'mi',\n  'mr', 'mn', 'my', 'ne', 'no', 'ny', 'or', 'ps', 'fa',\n  'pa', 'ro', 'sm', 'gd', 'sr', 'st', 'sn', 'sd', 'si',\n  'sk', 'sl', 'so', 'su', 'sw', 'sv', 'tl', 'tg', 'ta',\n  'tt', 'te', 'th', 'tr', 'tk', 'ur', 'ug', 'uz', 'vi',\n  'cy', 'xh', 'yi', 'yo', 'zu',\n];\n\n// eslint-disable-next-line max-len\nexport const RE_LINK_TEMPLATE = '((ftp|https?):\\\\/\\\\/)?((www\\\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\\\.[a-zA-Z0-9()]{1,63})\\\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)';\nexport const RE_MENTION_TEMPLATE = '(@[\\\\w\\\\d_-]+)';\nexport const RE_TG_LINK = /^tg:(\\/\\/)?/i;\nexport const RE_TME_LINK = /^(https?:\\/\\/)?([-a-zA-Z0-9@:%_+~#=]{1,32}\\.)?t\\.me/i;\nexport const RE_TELEGRAM_LINK = /^(https?:\\/\\/)?telegram\\.org\\//i;\nexport const TME_LINK_PREFIX = 'https://t.me/';\nexport const USERNAME_PURCHASE_ERROR = 'USERNAME_PURCHASE_AVAILABLE';\nexport const PURCHASE_USERNAME = 'auction';\nexport const TME_WEB_DOMAINS = new Set(['t.me', 'web.t.me', 'k.t.me', 'z.t.me']);\n\n// eslint-disable-next-line max-len\nexport const COUNTRIES_WITH_12H_TIME_FORMAT = new Set(['AU', 'BD', 'CA', 'CO', 'EG', 'HN', 'IE', 'IN', 'JO', 'MX', 'MY', 'NI', 'NZ', 'PH', 'PK', 'SA', 'SV', 'US']);\n\nexport const API_CHAT_TYPES = ['bots', 'channels', 'chats', 'users'] as const;\n\n// MTProto constants\nexport const SERVICE_NOTIFICATIONS_USER_ID = '777000';\nexport const REPLIES_USER_ID = '1271266957'; // TODO For Test connection ID must be equal to 708513\nexport const RESTRICTED_EMOJI_SET_ID = '7173162320003080';\nexport const DEFAULT_GIF_SEARCH_BOT_USERNAME = 'gif';\nexport const ALL_FOLDER_ID = 0;\nexport const ARCHIVED_FOLDER_ID = 1;\nexport const DELETED_COMMENTS_CHANNEL_ID = '-777';\nexport const MAX_MEDIA_FILES_FOR_ALBUM = 10;\nexport const MAX_ACTIVE_PINNED_CHATS = 5;\nexport const SCHEDULED_WHEN_ONLINE = 0x7FFFFFFE;\nexport const DEFAULT_LANG_CODE = 'en';\nexport const DEFAULT_LANG_PACK = 'android';\nexport const LANG_PACKS = ['android', 'ios', 'tdesktop', 'macos'] as const;\nexport const FEEDBACK_URL = 'https://github.com/ptp-build/ptp-ai-chat/issues';\nexport const GENERAL_TOPIC_ID = 1;\n\nexport const LIGHT_THEME_BG_COLOR = '#99BA92';\nexport const DARK_THEME_BG_COLOR = '#0F0F0F';\nexport const DEFAULT_PATTERN_COLOR = '#4A8E3A8C';\nexport const DARK_THEME_PATTERN_COLOR = '#0A0A0A8C';\nexport const MAX_UPLOAD_FILEPART_SIZE = 524288;\n\n// Group calls\nexport const GROUP_CALL_VOLUME_MULTIPLIER = 100;\nexport const GROUP_CALL_DEFAULT_VOLUME = 100 * GROUP_CALL_VOLUME_MULTIPLIER;\nexport const GROUP_CALL_THUMB_VIDEO_DISABLED = true;\n\nexport const DEFAULT_LIMITS: Record<ApiLimitType, readonly [number, number]> = {\n  uploadMaxFileparts: [4000, 8000],\n  stickersFaved: [5, 10],\n  savedGifs: [200, 400],\n  dialogFiltersChats: [100, 200],\n  dialogFilters: [10, 20],\n  dialogFolderPinned: [5, 10],\n  captionLength: [1024, 2048],\n  channels: [500, 1000],\n  channelsPublic: [10, 20],\n  aboutLength: [70, 140],\n};\n","import type { ApiMessage } from '../../api/types';\nimport { ApiMessageEntityTypes } from '../../api/types';\nimport parseEmojiOnlyString from '../../util/parseEmojiOnlyString';\n\nexport function getEmojiOnlyCountForMessage(content: ApiMessage['content'], groupedId?: string): number | undefined {\n  if (!content.text) return undefined;\n  return (\n    !groupedId\n    && Object.keys(content).length === 1 // Only text is present\n    && !content.text.entities?.some((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji)\n    && parseEmojiOnlyString(content.text.text)\n  ) || undefined;\n}\n","// eslint-disable-next-line import/no-named-default\nimport {default as Api} from '../tl/api';\n\nimport type TelegramClient from './TelegramClient';\nimport {generateRandomBytes, readBigIntFromBuffer, sleep} from '../Helpers';\nimport {getUploadPartSize} from '../Utils';\nimport errors from '../errors';\nimport {Foreman} from '../../../util/foreman';\nimport {DownloadRes, UploadReq} from \"../../ptp/protobuf/PTPFile\";\nimport {CLOUD_MESSAGE_API, DEBUG, MEDIA_CACHE_NAME_WAI} from \"../../../config\";\nimport localDb from \"../../../api/gramjs/localDb\";\nimport Account from \"../../../worker/share/Account\";\nimport * as cacheApi from '../../../util/cacheApi';\nimport {fileToBuffer} from \"../../../worker/share/utils/utils\";\nimport {ERR, FileInfo_Type} from \"../../ptp/protobuf/PTPCommon/types\";\n\ninterface OnProgress {\n    isCanceled?: boolean;\n\n    // Float between 0 and 1.\n    (progress: number): void;\n}\n\nexport interface UploadFileParams {\n    file: File;\n    workers?: number;\n    onProgress?: OnProgress;\n}\n\nconst KB_TO_BYTES = 1024;\nconst LARGE_FILE_THRESHOLD = 10 * 1024 * 1024;\nconst DISCONNECT_SLEEP = 1000;\nconst MAX_CONCURRENT_CONNECTIONS = 3;\nconst MAX_CONCURRENT_CONNECTIONS_PREMIUM = 6;\nconst MAX_WORKERS_PER_CONNECTION = 10;\n\nconst foremans = Array(MAX_CONCURRENT_CONNECTIONS_PREMIUM).fill(undefined)\n    .map(() => new Foreman(MAX_WORKERS_PER_CONNECTION));\n\nexport const getFileId = ()=>{\n    let fileId1 = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    return fileId1.toString()\n        .replace(\"-\", \"\")\n        .replace(\"n\", \"\")\n}\n\nexport async function uploadFileV1(\n    fileParams: UploadFileParams,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n    const { name, size } = file;\n    let fileIdStr = getFileId();\n    const fileId = Number(fileIdStr)\n    fileIdStr = String(fileId)\n    localDb.cache[fileIdStr] = file;\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n    const buf = await fileToBuffer(file)\n    const cipher = Account.localEncrypt(Buffer.from(buf));\n    const body = new DownloadRes({\n        file:{\n            id:fileIdStr,\n            part:0,\n            part_total:1,\n            buf:cipher,\n            size,\n            type:file.type\n        },\n        err:ERR.NO_ERROR\n    }).pack().getPbData()\n\n    const blob = new Blob([Buffer.from(body)]);\n    await cacheApi.save(MEDIA_CACHE_NAME_WAI, fileIdStr, blob);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n\n\nexport async function uploadFileCache(\n    file: FileInfo_Type,\n) {\n    const { buf, id } = file;\n    const size = buf.length\n    const fileIdStr = id;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % MAX_CONCURRENT_CONNECTIONS_PREMIUM;\n        await foremans[senderIndex].requestWorker();\n        const blobSlice = buf.subarray(i * partSize, (i + 1) * partSize);\n        promises.push((async (jMemo: number, blobSliceMemo: Buffer) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                try {\n                    if(CLOUD_MESSAGE_API && Account.getCurrentAccount()?.getSession()){\n                        if(DEBUG){\n                            console.log(\"uploadProfilePhoto\",fileIdStr,jMemo,partCount)\n                        }\n                        const fileInfo = {\n                            id:fileIdStr,\n                            size:file.size,\n                            type:file.type,\n                            part:jMemo+1,\n                            part_total:partCount,\n                            buf:blobSliceMemo\n                        }\n                        const uploadReq = new UploadReq({file:fileInfo})\n                        const body = Buffer.from(uploadReq.pack().getPbData());\n                        await fetch(`${CLOUD_MESSAGE_API}/proto`,{\n                            method: 'POST',\n                            body,\n                            headers:{\n                                Authorization: `Bearer ${Account.getCurrentAccount()?.getSession()}`,\n                            }\n                        })\n                    }\n                } catch (err) {\n                    foremans[senderIndex].releaseWorker();\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n    await Promise.all(promises);\n}\n\n\nexport async function uploadFile(\n    client: TelegramClient,\n    fileParams: UploadFileParams,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n\n    const isPremium = Boolean(client.isPremium);\n\n    const { name, size } = file;\n    const fileId = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    // Pick the least busy foreman\n    // For some reason, fresh connections give out a higher speed for the first couple of seconds\n    // I have no idea why, but this may speed up the download of small files\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % (\n            isPremium ? MAX_CONCURRENT_CONNECTIONS_PREMIUM : MAX_CONCURRENT_CONNECTIONS\n        );\n\n        await foremans[senderIndex].requestWorker();\n\n        if (onProgress?.isCanceled) {\n            foremans[senderIndex].releaseWorker();\n            break;\n        }\n\n        const blobSlice = file.slice(i * partSize, (i + 1) * partSize);\n        // eslint-disable-next-line no-loop-func, @typescript-eslint/no-loop-func\n        promises.push((async (jMemo: number, blobSliceMemo: Blob) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                let sender;\n                try {\n                    // We always upload from the DC we are in\n                    sender = await client.getSender(client.session.dcId, senderIndex, isPremium);\n                    const partBytes = await blobSliceMemo.arrayBuffer();\n                    await sender.send(\n                        isLarge\n                            ? new Api.upload.SaveBigFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                fileTotalParts: partCount,\n                                bytes: Buffer.from(partBytes),\n                            })\n                            : new Api.upload.SaveFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                bytes: Buffer.from(partBytes),\n                            }),\n                    );\n                } catch (err) {\n                    if (sender && !sender.isConnected()) {\n                        await sleep(DISCONNECT_SLEEP);\n                        continue;\n                    } else if (err instanceof errors.FloodWaitError) {\n                        await sleep(err.seconds * 1000);\n                        continue;\n                    }\n                    foremans[senderIndex].releaseWorker();\n\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n\n                if (onProgress) {\n                    if (onProgress.isCanceled) {\n                        throw new Error('USER_CANCELED');\n                    }\n\n                    progress += (1 / partCount);\n                    onProgress(progress);\n                }\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n\n    await Promise.all(promises);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n","/**\n * Converts a Telegram's RPC Error to a Python error.\n * @param rpcError the RPCError instance\n * @param request the request that caused this error\n * @constructor the RPCError as a Python exception that represents this error\n */\nconst { RPCError } = require('./RPCBaseErrors');\nconst { rpcErrorRe } = require('./RPCErrorList');\n\nfunction RPCMessageToError(rpcError, request) {\n    for (const [msgRegex, Cls] of rpcErrorRe) {\n        const m = rpcError.errorMessage.match(msgRegex);\n        if (m) {\n            const capture = m.length === 2 ? parseInt(m[1], 10) : undefined;\n            return new Cls({\n                request,\n                capture,\n            });\n        }\n    }\n\n    return new RPCError(rpcError.errorMessage, request);\n}\n\nconst Common = require('./Common');\nconst RPCBaseErrors = require('./RPCBaseErrors');\nconst RPCErrorList = require('./RPCErrorList');\n\nmodule.exports = {\n    RPCMessageToError,\n    ...Common,\n    ...RPCBaseErrors,\n    ...RPCErrorList,\n};\n","const {\n    parseTl,\n    serializeBytes,\n    serializeDate,\n} = require('./generationHelpers');\nconst {\n    toSignedLittleBuffer,\n} = require('../Helpers');\n\nconst tlContent = require('./apiTl');\nconst schemeContent = require('./schemaTl');\n\n/* CONTEST\nconst NAMED_AUTO_CASTS = new Set([\n    'chatId,int'\n])\nconst NAMED_BLACKLIST = new Set([\n    'discardEncryption'\n])\nconst AUTO_CASTS = new Set([\n    'InputPeer',\n    'InputChannel',\n    'InputUser',\n    'InputDialogPeer',\n    'InputNotifyPeer',\n    'InputMedia',\n    'InputPhoto',\n    'InputMessage',\n    'InputDocument',\n    'InputChatPhoto'\n])\n\n */\n// eslint-disable-next-line no-restricted-globals\nconst CACHING_SUPPORTED = typeof self !== 'undefined' && self.localStorage !== undefined;\n\nconst CACHE_KEY = 'GramJs:apiCache';\n\nfunction buildApiFromTlSchema() {\n    let definitions;\n    const fromCache = CACHING_SUPPORTED && loadFromCache();\n\n    if (fromCache) {\n        definitions = fromCache;\n    } else {\n        definitions = loadFromTlSchemas();\n\n        if (CACHING_SUPPORTED) {\n            localStorage.setItem(CACHE_KEY, JSON.stringify(definitions));\n        }\n    }\n\n    return mergeWithNamespaces(\n        createClasses('constructor', definitions.constructors),\n        createClasses('request', definitions.requests),\n    );\n}\n\nfunction loadFromCache() {\n    const jsonCache = localStorage.getItem(CACHE_KEY);\n    return jsonCache && JSON.parse(jsonCache);\n}\n\nfunction loadFromTlSchemas() {\n    const [constructorParamsApi, functionParamsApi] = extractParams(tlContent);\n    const [constructorParamsSchema, functionParamsSchema] = extractParams(schemeContent);\n    const constructors = [].concat(constructorParamsApi, constructorParamsSchema);\n    const requests = [].concat(functionParamsApi, functionParamsSchema);\n\n    return {\n        constructors,\n        requests,\n    };\n}\n\nfunction mergeWithNamespaces(obj1, obj2) {\n    const result = { ...obj1 };\n\n    Object.keys(obj2)\n        .forEach((key) => {\n            if (typeof obj2[key] === 'function' || !result[key]) {\n                result[key] = obj2[key];\n            } else {\n                Object.assign(result[key], obj2[key]);\n            }\n        });\n\n    return result;\n}\n\nfunction extractParams(fileContent) {\n    const f = parseTl(fileContent);\n    const constructors = [];\n    const functions = [];\n    for (const d of f) {\n        if (d.isFunction) {\n            functions.push(d);\n        } else {\n            constructors.push(d);\n        }\n    }\n    return [constructors, functions];\n}\n\nfunction argToBytes(x, type) {\n    switch (type) {\n        case 'int': {\n            const i = Buffer.alloc(4);\n            i.writeInt32LE(x, 0);\n            return i;\n        }\n        case 'long':\n            return toSignedLittleBuffer(x, 8);\n        case 'int128':\n            return toSignedLittleBuffer(x, 16);\n        case 'int256':\n            return toSignedLittleBuffer(x, 32);\n        case 'double': {\n            const d = Buffer.alloc(8);\n            d.writeDoubleLE(x, 0);\n            return d;\n        }\n        case 'string':\n            return serializeBytes(x);\n        case 'Bool':\n            return x ? Buffer.from('b5757299', 'hex') : Buffer.from('379779bc', 'hex');\n        case 'true':\n            return Buffer.alloc(0);\n        case 'bytes':\n            return serializeBytes(x);\n        case 'date':\n            return serializeDate(x);\n        default:\n            return x.getBytes();\n    }\n}\n\n/*\nCONTEST\nasync function getInputFromResolve(utils, client, peer, peerType) {\n    switch (peerType) {\n        case 'InputPeer':\n            return utils.getInputPeer(await client.getInputEntity(peer))\n        case 'InputChannel':\n            return utils.getInputChannel(await client.getInputEntity(peer))\n        case 'InputUser':\n            return utils.getInputUser(await client.getInputEntity(peer))\n        case 'InputDialogPeer':\n            return await client._getInputDialog(peer)\n        case 'InputNotifyPeer':\n            return await client._getInputNotify(peer)\n        case 'InputMedia':\n            return utils.getInputMedia(peer)\n        case 'InputPhoto':\n            return utils.getInputPhoto(peer)\n        case 'InputMessage':\n            return utils.getInputMessage(peer)\n        case 'InputDocument':\n            return utils.getInputDocument(peer)\n        case 'InputChatPhoto':\n            return utils.getInputChatPhoto(peer)\n        case 'chatId,int' :\n            return await client.getPeerId(peer, false)\n        default:\n            throw new Error('unsupported peer type : ' + peerType)\n    }\n}\n*/\nfunction getArgFromReader(reader, arg) {\n    if (arg.isVector) {\n        if (arg.useVectorId) {\n            reader.readInt();\n        }\n        const temp = [];\n        const len = reader.readInt();\n        arg.isVector = false;\n        for (let i = 0; i < len; i++) {\n            temp.push(getArgFromReader(reader, arg));\n        }\n        arg.isVector = true;\n        return temp;\n    } else if (arg.flagIndicator) {\n        return reader.readInt();\n    } else {\n        switch (arg.type) {\n            case 'int':\n                return reader.readInt();\n            case 'long':\n                return reader.readLong();\n            case 'int128':\n                return reader.readLargeInt(128);\n            case 'int256':\n                return reader.readLargeInt(256);\n            case 'double':\n                return reader.readDouble();\n            case 'string':\n                return reader.tgReadString();\n            case 'Bool':\n                return reader.tgReadBool();\n            case 'true':\n                return true;\n            case 'bytes':\n                return reader.tgReadBytes();\n            case 'date':\n                return reader.tgReadDate();\n            default:\n                if (!arg.skipConstructorId) {\n                    return reader.tgReadObject();\n                } else {\n                    throw new Error(`Unknown type ${arg}`);\n                }\n        }\n    }\n}\n\nfunction createClasses(classesType, params) {\n    const classes = {};\n    for (const classParams of params) {\n        const {\n            name,\n            constructorId,\n            subclassOfId,\n            argsConfig,\n            namespace,\n            result,\n        } = classParams;\n        const fullName = [namespace, name].join('.')\n            .replace(/^\\./, '');\n\n        class VirtualClass {\n            static CONSTRUCTOR_ID = constructorId;\n\n            static SUBCLASS_OF_ID = subclassOfId;\n\n            static className = fullName;\n\n            static classType = classesType;\n\n            CONSTRUCTOR_ID = constructorId;\n\n            SUBCLASS_OF_ID = subclassOfId;\n\n            className = fullName;\n\n            classType = classesType;\n\n            constructor(args) {\n                args = args || {};\n                Object.keys(args)\n                    .forEach((argName) => {\n                        this[argName] = args[argName];\n                    });\n            }\n\n            static fromReader(reader) {\n                const args = {};\n\n                for (const argName in argsConfig) {\n                    if (argsConfig.hasOwnProperty(argName)) {\n                        const arg = argsConfig[argName];\n                        if (arg.isFlag) {\n                            const flagGroupSuffix = arg.flagGroup > 1 ? arg.flagGroup : '';\n                            const flagValue = args[`flags${flagGroupSuffix}`] & (1 << arg.flagIndex);\n                            if (arg.type === 'true') {\n                                args[argName] = Boolean(flagValue);\n                                continue;\n                            }\n\n                            args[argName] = flagValue ? getArgFromReader(reader, arg) : undefined;\n                        } else {\n                            args[argName] = getArgFromReader(reader, arg);\n                        }\n                    }\n                }\n                return new VirtualClass(args);\n            }\n\n            getBytes() {\n                // The next is pseudo-code:\n                const idForBytes = this.CONSTRUCTOR_ID;\n                const c = Buffer.alloc(4);\n                c.writeUInt32LE(idForBytes, 0);\n                const buffers = [c];\n                for (const arg in argsConfig) {\n                    if (argsConfig.hasOwnProperty(arg)) {\n                        if (argsConfig[arg].isFlag) {\n                            if ((this[arg] === false && argsConfig[arg].type === 'true')\n                                || this[arg] === undefined) {\n                                continue;\n                            }\n                        }\n                        if (argsConfig[arg].isVector) {\n                            if (argsConfig[arg].useVectorId) {\n                                buffers.push(Buffer.from('15c4b51c', 'hex'));\n                            }\n                            const l = Buffer.alloc(4);\n                            l.writeInt32LE(this[arg].length, 0);\n                            buffers.push(l, Buffer.concat(this[arg].map((x) => argToBytes(x, argsConfig[arg].type))));\n                        } else if (argsConfig[arg].flagIndicator) {\n                            if (!Object.values(argsConfig)\n                                .some((f) => f.isFlag)) {\n                                buffers.push(Buffer.alloc(4));\n                            } else {\n                                let flagCalculate = 0;\n                                for (const f in argsConfig) {\n                                    if (argsConfig[f].isFlag) {\n                                        if ((this[f] === false && argsConfig[f].type === 'true')\n                                            || this[f] === undefined) {\n                                            flagCalculate |= 0;\n                                        } else {\n                                            flagCalculate |= 1 << argsConfig[f].flagIndex;\n                                        }\n                                    }\n                                }\n                                const f = Buffer.alloc(4);\n                                f.writeUInt32LE(flagCalculate, 0);\n                                buffers.push(f);\n                            }\n                        } else {\n                            buffers.push(argToBytes(this[arg], argsConfig[arg].type));\n\n                            if (this[arg] && typeof this[arg].getBytes === 'function') {\n                                let boxed = (argsConfig[arg].type.charAt(argsConfig[arg].type.indexOf('.') + 1));\n                                boxed = boxed === boxed.toUpperCase();\n                                if (!boxed) {\n                                    buffers.shift();\n                                }\n                            }\n                        }\n                    }\n                }\n                return Buffer.concat(buffers);\n            }\n\n            readResult(reader) {\n                if (classesType !== 'request') {\n                    throw new Error('`readResult()` called for non-request instance');\n                }\n\n                const m = result.match(/Vector<(int|long)>/);\n                if (m) {\n                    reader.readInt();\n                    const temp = [];\n                    const len = reader.readInt();\n                    if (m[1] === 'int') {\n                        for (let i = 0; i < len; i++) {\n                            temp.push(reader.readInt());\n                        }\n                    } else {\n                        for (let i = 0; i < len; i++) {\n                            temp.push(reader.readLong());\n                        }\n                    }\n                    return temp;\n                } else {\n                    return reader.tgReadObject();\n                }\n            }\n\n            /* CONTEST\n            async resolve(client, utils) {\n\n                if (classesType !== 'request') {\n                    throw new Error('`resolve()` called for non-request instance')\n                }\n\n                for (const arg in argsConfig) {\n                    if (argsConfig.hasOwnProperty(arg)) {\n                        if (!AUTO_CASTS.has(argsConfig[arg].type)) {\n                            if (!NAMED_AUTO_CASTS.has(`${argsConfig[arg].name},${argsConfig[arg].type}`)) {\n                                continue\n                            }\n                        }\n                        if (argsConfig[arg].isFlag) {\n                            if (!this[arg]) {\n                                continue\n                            }\n                        }\n                        if (argsConfig[arg].isVector) {\n                            const temp = []\n                            for (const x of this[arg]) {\n                                temp.push(await getInputFromResolve(utils, client, x, argsConfig[arg].type))\n                            }\n                            this[arg] = temp\n                        } else {\n                            this[arg] = await getInputFromResolve(utils, client, this[arg], argsConfig[arg].type)\n                        }\n                    }\n                }\n            } */\n        }\n\n        if (namespace) {\n            if (!classes[namespace]) {\n                classes[namespace] = {};\n            }\n            classes[namespace][name] = VirtualClass;\n        } else {\n            classes[name] = VirtualClass;\n        }\n    }\n\n    return classes;\n}\n\nmodule.exports = buildApiFromTlSchema();\n","import {ChatRequest, ChatResponse, Message} from \"../../../../functions/api/types\";\nimport {AI_PROXY_API} from \"../../../config\";\nimport {PbChatGptModelConfig_Type} from \"../protobuf/PTPCommon/types\";\n\nconst TIME_OUT_MS = 30000;\n\nconst ENABLE_GPT4 = true;\n\nexport const ALL_MODELS = [\n  {\n    name: \"gpt-4\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-0314\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-32k\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-32k-0314\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-3.5-turbo\",\n    available: true,\n  },\n  {\n    name: \"gpt-3.5-turbo-0301\",\n    available: true,\n  },\n];\n\nexport function isValidModel(name: string) {\n  return ALL_MODELS.some((m) => m.name === name && m.available);\n}\n\nexport function isValidNumber(x: number, min: number, max: number) {\n  return typeof x === \"number\" && x <= max && x >= min;\n}\n\n\nconst makeRequestParam = (\n  messages: Message[],\n  options?: {\n    filterBot?: boolean;\n    stream?: boolean;\n  },\n): ChatRequest => {\n  let sendMessages = messages.map((v) => ({\n    role: v.role,\n    content: v.content,\n  }));\n\n  if (options?.filterBot) {\n    sendMessages = sendMessages.filter((m) => m.role !== \"assistant\");\n  }\n\n  return {\n    model: \"gpt-3.5-turbo\",\n    messages: sendMessages,\n    stream: options?.stream,\n  };\n};\n\nfunction getHeaders(apiKey:string) {\n  let headers: Record<string, string> = {};\n  headers[\"token\"] = apiKey;\n  return headers;\n}\n\nexport function requestOpenaiClient(path: string,apiKey:string) {\n  return (body: any, method = \"POST\") =>\n    fetch(AI_PROXY_API +\"/api/openai\", {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        path,\n        ...getHeaders(apiKey),\n      },\n      body: body && JSON.stringify(body),\n    });\n}\n\nexport async function requestChat(messages: Message[],apiKey:string) {\n  const req: ChatRequest = makeRequestParam(messages, { filterBot: true });\n\n  const res = await requestOpenaiClient(\"v1/chat/completions\",apiKey)(req);\n\n  try {\n    return (await res.json()) as ChatResponse;\n  } catch (error) {\n    console.error(\"[Request Chat] \", error, res.body);\n  }\n}\n\nexport function filterConfig(oldConfig: PbChatGptModelConfig_Type): Partial<PbChatGptModelConfig_Type> {\n  const config = Object.assign({}, oldConfig);\n\n  const validator: {\n    [k in keyof PbChatGptModelConfig_Type]: (x: PbChatGptModelConfig_Type[keyof PbChatGptModelConfig_Type]) => boolean;\n  } = {\n    model(x) {\n      return isValidModel(x as string);\n    },\n    max_tokens(x) {\n      return isValidNumber(x as number, 100, 4000);\n    },\n    presence_penalty(x) {\n      return isValidNumber(x as number, -2, 2);\n    },\n    temperature(x) {\n      return isValidNumber(x as number, 0, 2);\n    },\n  };\n\n  Object.keys(validator).forEach((k) => {\n    const key = k as keyof PbChatGptModelConfig_Type;\n    if (!validator[key](config[key])) {\n      delete config[key];\n    }\n  });\n\n  return config;\n}\n\nexport async function requestChatStream(\n  url?:string,\n  messages: Message[],\n  options?: {\n    apiKey:string,\n    filterBot?: boolean;\n    modelConfig?: PbChatGptModelConfig_Type;\n    onMessage: (message: string, done: boolean) => void;\n    onAbort: (error: Error) => void;\n    onError: (error: Error) => void;\n    onController?: (controller: AbortController) => void;\n  },\n) {\n  const req = makeRequestParam(messages, {\n    stream: true,\n    filterBot: options?.filterBot,\n  });\n\n  // valid and assign model config\n  if (options?.modelConfig) {\n    Object.assign(req, filterConfig(options.modelConfig));\n  }\n\n  console.log(\"[Request] \", req);\n\n  const controller = new AbortController();\n  const reqTimeoutId = setTimeout(() => controller.abort(), TIME_OUT_MS);\n\n  try {\n    const res = await fetch(url ? url : AI_PROXY_API + \"/api/chat-stream\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        path: \"v1/chat/completions\",\n        ...getHeaders(options!.apiKey),\n      },\n      body: JSON.stringify(req),\n      signal: controller.signal,\n    });\n\n    clearTimeout(reqTimeoutId);\n\n    let responseText = \"\";\n\n    const finish = () => {\n      options?.onMessage(responseText, true);\n      controller.abort();\n    };\n\n    if (res.ok) {\n      const reader = res.body?.getReader();\n      const decoder = new TextDecoder();\n\n      options?.onController?.(controller);\n      while (true) {\n        // handle time out, will stop if no response in 10 secs\n        const resTimeoutId = setTimeout(() => finish(), TIME_OUT_MS);\n        const content = await reader?.read();\n        clearTimeout(resTimeoutId);\n        const text = decoder.decode(content?.value);\n        responseText += text;\n\n        const done = !content || content.done;\n        options?.onMessage(responseText, false);\n\n        if (done) {\n          break;\n        }\n      }\n\n      finish();\n    } else if (res.status === 401) {\n      console.error(\"Anauthorized\");\n      responseText = \"Unauthorized\";\n      finish();\n    } else {\n      console.error(\"Stream Error\", res.body);\n      options?.onError(new Error(\"Stream Error\"));\n    }\n  } catch (err:any) {\n    debugger\n    if(err.code === 20){\n      console.error(\"onAbort\", err);\n      options?.onAbort(err);\n    }else{\n      // AbortError\n      console.error(\"NetWork Error\", err);\n      options?.onError(err);\n    }\n  }\n}\n\nexport async function requestWithPrompt(messages: Message[], prompt: string,apiKey:string) {\n  messages = messages.concat([\n    {\n      role: \"user\",\n      content: prompt,\n      date: new Date().toLocaleString(),\n    },\n  ]);\n\n  const res = await requestChat(messages,apiKey);\n\n  return res?.choices?.at(0)?.message?.content ?? \"\";\n}\n\n// To store message streaming controller\nexport const ControllerPool = {\n  controllers: {} as Record<string, AbortController>,\n\n  addController(\n    sessionIndex: number,\n    messageIndex: number,\n    controller: AbortController,\n  ) {\n    const key = this.key(sessionIndex, messageIndex);\n    this.controllers[key] = controller;\n    return key;\n  },\n\n  stop(sessionIndex: number, messageIndex: number) {\n    const key = this.key(sessionIndex, messageIndex);\n    if(this.controllers[key]){\n      const controller = this.controllers[key];\n      console.log(controller);\n      controller?.abort();\n    }\n  },\n\n  remove(sessionIndex: number, messageIndex: number) {\n    const key = this.key(sessionIndex, messageIndex);\n    delete this.controllers[key];\n  },\n\n  key(sessionIndex: number, messageIndex: number) {\n    return `${sessionIndex},${messageIndex}`;\n  },\n};\n\nexport async function requestUsage(apiKey:string) {\n  const formatDate = (d: Date) =>\n    `${d.getFullYear()}-${(d.getMonth() + 1).toString().padStart(2, \"0\")}-${d\n      .getDate()\n      .toString()\n      .padStart(2, \"0\")}`;\n  const ONE_DAY = 2 * 24 * 60 * 60 * 1000;\n  const now = new Date(Date.now() + ONE_DAY);\n  const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n  const startDate = formatDate(startOfMonth);\n  const endDate = formatDate(now);\n\n  const [used, subs] = await Promise.all([\n    requestOpenaiClient(\n      `dashboard/billing/usage?start_date=${startDate}&end_date=${endDate}`,\n      apiKey\n    )(null, \"GET\"),\n    requestOpenaiClient(\"dashboard/billing/subscription\",apiKey)(null, \"GET\"),\n  ]);\n\n  const response = (await used.json()) as {\n    total_usage?: number;\n    error?: {\n      type: string;\n      message: string;\n    };\n  };\n\n  const total = (await subs.json()) as {\n    hard_limit_usd?: number;\n  };\n\n  if (response.error && response.error.type) {\n    console.error(response.error)\n    throw new Error(response.error.type)\n  }\n\n  if (response.total_usage) {\n    response.total_usage = Math.round(response.total_usage) / 100;\n  }\n\n  if (total.hard_limit_usd) {\n    total.hard_limit_usd = Math.round(total.hard_limit_usd * 100) / 100;\n  }\n\n  return {\n    used: response.total_usage,\n    subscription: total.hard_limit_usd,\n  };\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { AuthNativeReq_Type } from './types';\n\nexport default class AuthNativeReq extends BaseMsg {\n  public msg?: AuthNativeReq_Type\n  constructor(msg?: AuthNativeReq_Type) {\n    super('PTP.Auth.AuthNativeReq', msg);\n    this.setCommandId(ActionCommands.CID_AuthNativeReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): AuthNativeReq_Type {\n    return new AuthNativeReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateProfileReq_Type } from './types';\n\nexport default class UpdateProfileReq extends BaseMsg {\n  public msg?: UpdateProfileReq_Type\n  constructor(msg?: UpdateProfileReq_Type) {\n    super('PTP.Auth.UpdateProfileReq', msg);\n    this.setCommandId(ActionCommands.CID_UpdateProfileReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateProfileReq_Type {\n    return new UpdateProfileReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateProfileRes_Type } from './types';\n\nexport default class UpdateProfileRes extends BaseMsg {\n  public msg?: UpdateProfileRes_Type\n  constructor(msg?: UpdateProfileRes_Type) {\n    super('PTP.Auth.UpdateProfileRes', msg);\n    this.setCommandId(ActionCommands.CID_UpdateProfileRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateProfileRes_Type {\n    return new UpdateProfileRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateUsernameReq_Type } from './types';\n\nexport default class UpdateUsernameReq extends BaseMsg {\n  public msg?: UpdateUsernameReq_Type\n  constructor(msg?: UpdateUsernameReq_Type) {\n    super('PTP.Auth.UpdateUsernameReq', msg);\n    this.setCommandId(ActionCommands.CID_UpdateUsernameReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateUsernameReq_Type {\n    return new UpdateUsernameReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateUsernameRes_Type } from './types';\n\nexport default class UpdateUsernameRes extends BaseMsg {\n  public msg?: UpdateUsernameRes_Type\n  constructor(msg?: UpdateUsernameRes_Type) {\n    super('PTP.Auth.UpdateUsernameRes', msg);\n    this.setCommandId(ActionCommands.CID_UpdateUsernameRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateUsernameRes_Type {\n    return new UpdateUsernameRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UploadProfilePhotoReq_Type } from './types';\n\nexport default class UploadProfilePhotoReq extends BaseMsg {\n  public msg?: UploadProfilePhotoReq_Type\n  constructor(msg?: UploadProfilePhotoReq_Type) {\n    super('PTP.Auth.UploadProfilePhotoReq', msg);\n    this.setCommandId(ActionCommands.CID_UploadProfilePhotoReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UploadProfilePhotoReq_Type {\n    return new UploadProfilePhotoReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UploadProfilePhotoRes_Type } from './types';\n\nexport default class UploadProfilePhotoRes extends BaseMsg {\n  public msg?: UploadProfilePhotoRes_Type\n  constructor(msg?: UploadProfilePhotoRes_Type) {\n    super('PTP.Auth.UploadProfilePhotoRes', msg);\n    this.setCommandId(ActionCommands.CID_UploadProfilePhotoRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UploadProfilePhotoRes_Type {\n    return new UploadProfilePhotoRes().decode(pdu.body());\n  }\n}\n","// DO NOT EDIT\nimport BaseMsg from '../BaseMsg';\nimport type { Pdu } from '../BaseMsg';\nimport type { PbMsg_Type } from './types';\n\nexport default class PbMsg extends BaseMsg {\n  public msg?: PbMsg_Type\n  constructor(msg?: PbMsg_Type) {\n    super('PTP.Common.PbMsg', msg);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): PbMsg_Type {\n    return new PbMsg().decode(pdu.body());\n  }\n}\n","// DO NOT EDIT\nimport BaseMsg from '../BaseMsg';\nimport type { Pdu } from '../BaseMsg';\nimport type { PbUser_Type } from './types';\n\nexport default class PbUser extends BaseMsg {\n  public msg?: PbUser_Type\n  constructor(msg?: PbUser_Type) {\n    super('PTP.Common.PbUser', msg);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): PbUser_Type {\n    return new PbUser().decode(pdu.body());\n  }\n}\n","export enum AUTH_TYPE {\n  AUTH_TYPE_USERNAME = 0,\n  AUTH_TYPE_EMAIL = 1,\n  AUTH_TYPE_MOBILE = 2,\n}\n\nexport enum EncryptType {\n  EncryptType_Wallet = 0,\n  EncryptType_Group = 1,\n  EncryptType_Message = 2,\n  EncryptType_Media = 3,\n}\n\nexport enum ERR {\n  NO_ERROR = 0,\n  ERR_SYSTEM = 1,\n  ERR_AUTH_LOGIN = 2,\n  ERR_AUTH_NEED = 3,\n}\n\nexport enum QrCodeType {\n  QrCodeType_MNEMONIC = 1,\n}\n\nexport interface FileInfo_Type {\n  id: string;\n  size: number;\n  part: number;\n  part_total?: number;\n  buf: Buffer;\n  type: string;\n}\n\nexport interface MessageStoreRow_Type {\n  message?: PbMsg_Type;\n  messageId: number;\n  time?: number;\n  buf?: Buffer;\n}\n\nexport interface PbAction_Type {\n  text: string;\n  type: string;\n}\n\nexport interface PbAiBot_Type {\n  chatGptConfig?: PbChatGpBotConfig_Type;\n  enableAi?: boolean;\n  botApi?: string;\n  disableClearHistory?: boolean;\n  commandsFromApi?: PbCommands_Type[];\n}\n\nexport interface PbAudio_Type {\n  id: string;\n  size?: number[];\n  duration?: number[];\n  mimeType: string;\n  fileName: string;\n  performer?: string;\n  title?: string;\n  thumbnailSizes?: PbSizes_Type[];\n}\n\nexport interface PbBotInfo_Type {\n  botId: string;\n  description?: string;\n  menuButton?: PbMenuButton_Type;\n  commands?: PbCommands_Type[];\n  photo?: PbPhoto_Type;\n  aiBot?: PbAiBot_Type;\n}\n\nexport interface PbChat_Type {\n  type: string;\n  id: string;\n  title: string;\n  usernames?: PbUsernames_Type[];\n  isMuted?: boolean;\n  isMin?: boolean;\n  hasPrivateLink?: boolean;\n  isSignaturesShown?: boolean;\n  accessHash?: string;\n  isVerified?: boolean;\n  isJoinToSend?: boolean;\n  isJoinRequest?: boolean;\n  isForum?: boolean;\n  isListed?: boolean;\n  settings?: PbSettings_Type;\n  lastMessage?: PbMsg_Type;\n}\n\nexport interface PbChatFolder_Type {\n  id: number;\n  title: string;\n  channels: boolean;\n  pinnedChatIds?: string[];\n  includedChatIds?: string[];\n  excludedChatIds?: string[];\n}\n\nexport interface PbChatGpBotConfig_Type {\n  init_system_content?: string;\n  api_key?: string;\n  max_history_length?: number;\n  modelConfig?: PbChatGptModelConfig_Type;\n}\n\nexport interface PbChatGptModelConfig_Type {\n  model: string;\n  temperature: number;\n  max_tokens: number;\n  presence_penalty: number;\n}\n\nexport interface PbCommands_Type {\n  botId: string;\n  command: string;\n  description: string;\n}\n\nexport interface PbContent_Type {\n  text?: PbText_Type;\n  photo?: PbPhoto_Type;\n  voice?: PbVoice_Type;\n  action?: PbAction_Type;\n  document?: PbDocument_Type;\n  audio?: PbAudio_Type;\n}\n\nexport interface PbDimensions_Type {\n  width: number;\n  height: number;\n}\n\nexport interface PbDocument_Type {\n  id?: string;\n  fileName: string;\n  size?: number[];\n  timestamp?: number;\n  duration?: number[];\n  mimeType: string;\n  performer?: string;\n  previewBlobUrl?: string;\n  mediaType?: string;\n  mediaSize?: PbSizes_Type;\n  thumbnail?: PbThumbnail_Type;\n}\n\nexport interface PbFullInfo_Type {\n  bio?: string;\n  commonChatsCount?: number;\n  isBlocked?: boolean;\n  noVoiceMessages?: boolean;\n  botInfo?: PbBotInfo_Type;\n  pinnedMessageId?: number;\n}\n\nexport interface PbMenuButton_Type {\n  type: string;\n  text?: string;\n  url?: string;\n}\n\nexport interface PbMessageEntity_Type {\n  type: string;\n  offset: number;\n  length: number;\n  documentId?: string;\n  userId?: string;\n  url?: string;\n  language?: string;\n  cipher?: string;\n  hint?: string;\n}\n\nexport interface PbMsg_Type {\n  id: number;\n  chatId: string;\n  content: PbContent_Type;\n  date: number;\n  isOutgoing: boolean;\n  senderId?: string;\n  isForwardingAllowed?: boolean;\n  previousLocalId?: number;\n}\n\nexport interface PbPhoto_Type {\n  id: string;\n  thumbnail?: PbThumbnail_Type;\n  sizes?: PbSizes_Type[];\n  isSpoiler?: boolean;\n}\n\nexport interface PbQrCode_Type {\n  type: QrCodeType;\n  data: Buffer;\n}\n\nexport interface PbSettings_Type {\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n}\n\nexport interface PbSizes_Type {\n  width: number;\n  height: number;\n  type: string;\n}\n\nexport interface PbText_Type {\n  text: string;\n  entities?: PbMessageEntity_Type[];\n}\n\nexport interface PbThumbnail_Type {\n  width: number;\n  height: number;\n  dataUri: string;\n}\n\nexport interface PbUser_Type {\n  id: string;\n  firstName?: string;\n  usernames?: PbUsernames_Type[];\n  isMin?: boolean;\n  isPremium?: boolean;\n  type: string;\n  hasVideoAvatar?: boolean;\n  canBeInvitedToGroup?: boolean;\n  phoneNumber: string;\n  noStatus?: boolean;\n  accessHash?: string;\n  fullInfo?: PbFullInfo_Type;\n  lastName?: string;\n  isSelf?: boolean;\n  avatarHash?: string;\n  photos?: PbPhoto_Type[];\n}\n\nexport interface PbUsernames_Type {\n  username: string;\n  isActive?: boolean;\n  isEditable?: boolean;\n}\n\nexport interface PbUserSetting_Type {\n  chatFolders?: PbChatFolder_Type[];\n  chatFolderOrderedIds?: number[];\n  myBotIds?: string[];\n  myGroups?: string[];\n}\n\nexport interface PbVoice_Type {\n  id: string;\n  waveform?: number[];\n  duration?: number;\n}\n\nexport interface UserMessageStoreData_Type {\n  chatId: string;\n  messageIds?: number[];\n  messageIdsDeleted?: number[];\n  time: number;\n}\n\nexport interface UserStoreData_Type {\n  chatIds?: string[];\n  chatIdsDeleted?: string[];\n  chatFolders: string;\n  time: number;\n}\n\nexport interface UserStoreRow_Type {\n  buf?: Buffer;\n  userId: string;\n  time?: number;\n  user?: PbUser_Type;\n}\n\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadReq_Type } from './types';\n\nexport default class DownloadReq extends BaseMsg {\n  public msg?: DownloadReq_Type\n  constructor(msg?: DownloadReq_Type) {\n    super('PTP.File.DownloadReq', msg);\n    this.setCommandId(ActionCommands.CID_DownloadReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadReq_Type {\n    return new DownloadReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { AnswerCallbackButtonRes_Type } from './types';\n\nexport default class AnswerCallbackButtonRes extends BaseMsg {\n  public msg?: AnswerCallbackButtonRes_Type\n  constructor(msg?: AnswerCallbackButtonRes_Type) {\n    super('PTP.Msg.AnswerCallbackButtonRes', msg);\n    this.setCommandId(ActionCommands.CID_AnswerCallbackButtonRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): AnswerCallbackButtonRes_Type {\n    return new AnswerCallbackButtonRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { AnswerCallbackButtonReq_Type } from './types';\n\nexport default class AnswerCallbackButtonReq extends BaseMsg {\n  public msg?: AnswerCallbackButtonReq_Type\n  constructor(msg?: AnswerCallbackButtonReq_Type) {\n    super('PTP.Msg.AnswerCallbackButtonReq', msg);\n    this.setCommandId(ActionCommands.CID_AnswerCallbackButtonReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): AnswerCallbackButtonReq_Type {\n    return new AnswerCallbackButtonReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadMsgRes_Type } from './types';\n\nexport default class DownloadMsgRes extends BaseMsg {\n  public msg?: DownloadMsgRes_Type\n  constructor(msg?: DownloadMsgRes_Type) {\n    super('PTP.Msg.DownloadMsgRes', msg);\n    this.setCommandId(ActionCommands.CID_DownloadMsgRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadMsgRes_Type {\n    return new DownloadMsgRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { GenMsgIdReq_Type } from './types';\n\nexport default class GenMsgIdReq extends BaseMsg {\n  public msg?: GenMsgIdReq_Type\n  constructor(msg?: GenMsgIdReq_Type) {\n    super('PTP.Msg.GenMsgIdReq', msg);\n    this.setCommandId(ActionCommands.CID_GenMsgIdReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): GenMsgIdReq_Type {\n    return new GenMsgIdReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { GenMsgIdRes_Type } from './types';\n\nexport default class GenMsgIdRes extends BaseMsg {\n  public msg?: GenMsgIdRes_Type\n  constructor(msg?: GenMsgIdRes_Type) {\n    super('PTP.Msg.GenMsgIdRes', msg);\n    this.setCommandId(ActionCommands.CID_GenMsgIdRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): GenMsgIdRes_Type {\n    return new GenMsgIdRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { MsgListReq_Type } from './types';\n\nexport default class MsgListReq extends BaseMsg {\n  public msg?: MsgListReq_Type\n  constructor(msg?: MsgListReq_Type) {\n    super('PTP.Msg.MsgListReq', msg);\n    this.setCommandId(ActionCommands.CID_MsgListReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): MsgListReq_Type {\n    return new MsgListReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { MsgListRes_Type } from './types';\n\nexport default class MsgListRes extends BaseMsg {\n  public msg?: MsgListRes_Type\n  constructor(msg?: MsgListRes_Type) {\n    super('PTP.Msg.MsgListRes', msg);\n    this.setCommandId(ActionCommands.CID_MsgListRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): MsgListRes_Type {\n    return new MsgListRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SendBotMsgReq_Type } from './types';\n\nexport default class SendBotMsgReq extends BaseMsg {\n  public msg?: SendBotMsgReq_Type\n  constructor(msg?: SendBotMsgReq_Type) {\n    super('PTP.Msg.SendBotMsgReq', msg);\n    this.setCommandId(ActionCommands.CID_SendBotMsgReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SendBotMsgReq_Type {\n    return new SendBotMsgReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SendBotMsgRes_Type } from './types';\n\nexport default class SendBotMsgRes extends BaseMsg {\n  public msg?: SendBotMsgRes_Type\n  constructor(msg?: SendBotMsgRes_Type) {\n    super('PTP.Msg.SendBotMsgRes', msg);\n    this.setCommandId(ActionCommands.CID_SendBotMsgRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SendBotMsgRes_Type {\n    return new SendBotMsgRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateCmdReq_Type } from './types';\n\nexport default class UpdateCmdReq extends BaseMsg {\n  public msg?: UpdateCmdReq_Type\n  constructor(msg?: UpdateCmdReq_Type) {\n    super('PTP.Msg.UpdateCmdReq', msg);\n    this.setCommandId(ActionCommands.CID_UpdateCmdReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateCmdReq_Type {\n    return new UpdateCmdReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateCmdRes_Type } from './types';\n\nexport default class UpdateCmdRes extends BaseMsg {\n  public msg?: UpdateCmdRes_Type\n  constructor(msg?: UpdateCmdRes_Type) {\n    super('PTP.Msg.UpdateCmdRes', msg);\n    this.setCommandId(ActionCommands.CID_UpdateCmdRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateCmdRes_Type {\n    return new UpdateCmdRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UploadMsgReq_Type } from './types';\n\nexport default class UploadMsgReq extends BaseMsg {\n  public msg?: UploadMsgReq_Type\n  constructor(msg?: UploadMsgReq_Type) {\n    super('PTP.Msg.UploadMsgReq', msg);\n    this.setCommandId(ActionCommands.CID_UploadMsgReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UploadMsgReq_Type {\n    return new UploadMsgReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { StopChatStreamReq_Type } from './types';\n\nexport default class StopChatStreamReq extends BaseMsg {\n  public msg?: StopChatStreamReq_Type\n  constructor(msg?: StopChatStreamReq_Type) {\n    super('PTP.Other.StopChatStreamReq', msg);\n    this.setCommandId(ActionCommands.CID_StopChatStreamReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): StopChatStreamReq_Type {\n    return new StopChatStreamReq().decode(pdu.body());\n  }\n}\n","import {\n  entropyToMnemonic,\n  generateMnemonic,\n  mnemonicToEntropy,\n  mnemonicToSeedSync,\n  setDefaultWordlist,\n  validateMnemonic,\n} from 'bip39';\n\nexport type MnemonicLangEnum = 'english' | 'chinese_simplified';\n\nexport default class Mnemonic {\n  private lang: MnemonicLangEnum | undefined;\n  private words: string | undefined;\n\n  constructor(words?: string, lang?: MnemonicLangEnum) {\n    if (!lang) {\n      lang = 'english';\n    }\n    Object.defineProperty(this, 'lang', {\n      value: lang,\n      writable: false,\n    });\n\n    setDefaultWordlist(this.lang!);\n    if (!words) {\n      words = generateMnemonic();\n    }\n\n    Object.defineProperty(this, 'words', {\n      value: words,\n      writable: false,\n    });\n  }\n\n  getLang() {\n    return this.lang;\n  }\n\n  getWords() {\n    return this.words!;\n  }\n\n  checkMnemonic() {\n    return validateMnemonic(this.words!);\n  }\n\n  toSeedBuffer(password?: string) {\n    if (!password) password = '';\n    return mnemonicToSeedSync(this.getWords()!, password);\n  }\n\n  toSeedHex(password?: string) {\n    return this.toSeedBuffer(password).toString('hex');\n  }\n  toEntropy() {\n    return mnemonicToEntropy(this.getWords()!);\n  }\n\n  static fromEntropy(entropy: string, lang?: MnemonicLangEnum) {\n    const words = entropyToMnemonic(entropy);\n    return new Mnemonic(words, lang);\n  }\n}\n","// Copyright Twitter Inc. Licensed under MIT\n// https://github.com/twitter/twemoji-parser/blob/master/LICENSE.md\n// Version f8312f3 12.03.2022\n\nconst vs16RegExp = /\\uFE0F/g;\n// avoid using a string literal like '\\u200D' here because minifiers expand it inline\nconst zeroWidthJoiner = String.fromCharCode(0x200d);\n\nexport function removeVS16s(rawEmoji) {\n  return rawEmoji.indexOf(zeroWidthJoiner) < 0 ? rawEmoji.replace(vs16RegExp, '') : rawEmoji;\n}\n\n// Default Twemoji regex was modified here.\n// An exception for ascii emoji has been added to the beginning of the regular string: 🅰🅱🅾🅿\n// UTF-16 endcoding are \\ud83c\\udd70, \\ud83c\\udd71,\\ud83c\\udd7e and \\ud83c\\udd7f\n// These emojis in the graphic version must end with the `\\ufe0f` symbol.\n\n// This file is generated by source/emoji/scripts/generate.sh\n// eslint-disable-next-line max-len\nexport default /(?:\\ud83c[\\udd70\\udd71\\udd7e\\udd7f]\\ufe0f)|(?:\\ud83d\\udc68\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffc-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc68\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udffe]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffc-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffe]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d[\\udc68\\udc69]|\\ud83e\\udef1\\ud83c\\udffb\\u200d\\ud83e\\udef2\\ud83c[\\udffc-\\udfff]|\\ud83e\\udef1\\ud83c\\udffc\\u200d\\ud83e\\udef2\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\udef1\\ud83c\\udffd\\u200d\\ud83e\\udef2\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\udef1\\ud83c\\udffe\\u200d\\ud83e\\udef2\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\udef1\\ud83c\\udfff\\u200d\\ud83e\\udef2\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1|\\ud83d\\udc6b\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc6c\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc6d\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc8f\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc91\\ud83c[\\udffb-\\udfff]|\\ud83e\\udd1d\\ud83c[\\udffb-\\udfff]|\\ud83d[\\udc6b-\\udc6d\\udc8f\\udc91]|\\ud83e\\udd1d)|(?:\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1)(?:\\ud83c[\\udffb-\\udfff])?\\u200d(?:\\u2695\\ufe0f|\\u2696\\ufe0f|\\u2708\\ufe0f|\\ud83c[\\udf3e\\udf73\\udf7c\\udf84\\udf93\\udfa4\\udfa8\\udfeb\\udfed]|\\ud83d[\\udcbb\\udcbc\\udd27\\udd2c\\ude80\\ude92]|\\ud83e[\\uddaf-\\uddb3\\uddbc\\uddbd])|(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75]|\\u26f9)((?:\\ud83c[\\udffb-\\udfff]|\\ufe0f)\\u200d[\\u2640\\u2642]\\ufe0f)|(?:\\ud83c[\\udfc3\\udfc4\\udfca]|\\ud83d[\\udc6e\\udc70\\udc71\\udc73\\udc77\\udc81\\udc82\\udc86\\udc87\\ude45-\\ude47\\ude4b\\ude4d\\ude4e\\udea3\\udeb4-\\udeb6]|\\ud83e[\\udd26\\udd35\\udd37-\\udd39\\udd3d\\udd3e\\uddb8\\uddb9\\uddcd-\\uddcf\\uddd4\\uddd6-\\udddd])(?:\\ud83c[\\udffb-\\udfff])?\\u200d[\\u2640\\u2642]\\ufe0f|(?:\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83c\\udff3\\ufe0f\\u200d\\u26a7\\ufe0f|\\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08|\\ud83d\\ude36\\u200d\\ud83c\\udf2b\\ufe0f|\\u2764\\ufe0f\\u200d\\ud83d\\udd25|\\u2764\\ufe0f\\u200d\\ud83e\\ude79|\\ud83c\\udff4\\u200d\\u2620\\ufe0f|\\ud83d\\udc15\\u200d\\ud83e\\uddba|\\ud83d\\udc3b\\u200d\\u2744\\ufe0f|\\ud83d\\udc41\\u200d\\ud83d\\udde8|\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc6f\\u200d\\u2640\\ufe0f|\\ud83d\\udc6f\\u200d\\u2642\\ufe0f|\\ud83d\\ude2e\\u200d\\ud83d\\udca8|\\ud83d\\ude35\\u200d\\ud83d\\udcab|\\ud83e\\udd3c\\u200d\\u2640\\ufe0f|\\ud83e\\udd3c\\u200d\\u2642\\ufe0f|\\ud83e\\uddde\\u200d\\u2640\\ufe0f|\\ud83e\\uddde\\u200d\\u2642\\ufe0f|\\ud83e\\udddf\\u200d\\u2640\\ufe0f|\\ud83e\\udddf\\u200d\\u2642\\ufe0f|\\ud83d\\udc08\\u200d\\u2b1b)|[#*0-9]\\ufe0f?\\u20e3|(?:[©®\\u2122\\u265f]\\ufe0f)|(?:\\ud83c[\\udc04\\ude02\\ude1a\\ude2f\\ude37\\udf21\\udf24-\\udf2c\\udf36\\udf7d\\udf96\\udf97\\udf99-\\udf9b\\udf9e\\udf9f\\udfcd\\udfce\\udfd4-\\udfdf\\udff3\\udff5\\udff7]|\\ud83d[\\udc3f\\udc41\\udcfd\\udd49\\udd4a\\udd6f\\udd70\\udd73\\udd76-\\udd79\\udd87\\udd8a-\\udd8d\\udda5\\udda8\\uddb1\\uddb2\\uddbc\\uddc2-\\uddc4\\uddd1-\\uddd3\\udddc-\\uddde\\udde1\\udde3\\udde8\\uddef\\uddf3\\uddfa\\udecb\\udecd-\\udecf\\udee0-\\udee5\\udee9\\udef0\\udef3]|[\\u203c\\u2049\\u2139\\u2194-\\u2199\\u21a9\\u21aa\\u231a\\u231b\\u2328\\u23cf\\u23ed-\\u23ef\\u23f1\\u23f2\\u23f8-\\u23fa\\u24c2\\u25aa\\u25ab\\u25b6\\u25c0\\u25fb-\\u25fe\\u2600-\\u2604\\u260e\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262a\\u262e\\u262f\\u2638-\\u263a\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267b\\u267f\\u2692-\\u2697\\u2699\\u269b\\u269c\\u26a0\\u26a1\\u26a7\\u26aa\\u26ab\\u26b0\\u26b1\\u26bd\\u26be\\u26c4\\u26c5\\u26c8\\u26cf\\u26d1\\u26d3\\u26d4\\u26e9\\u26ea\\u26f0-\\u26f5\\u26f8\\u26fa\\u26fd\\u2702\\u2708\\u2709\\u270f\\u2712\\u2714\\u2716\\u271d\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u2764\\u27a1\\u2934\\u2935\\u2b05-\\u2b07\\u2b1b\\u2b1c\\u2b50\\u2b55\\u3030\\u303d\\u3297\\u3299])(?:\\ufe0f|(?!\\ufe0e))|(?:(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75\\udd90]|[\\u261d\\u26f7\\u26f9\\u270c\\u270d])(?:\\ufe0f|(?!\\ufe0e))|(?:\\ud83c[\\udf85\\udfc2-\\udfc4\\udfc7\\udfca]|\\ud83d[\\udc42\\udc43\\udc46-\\udc50\\udc66-\\udc69\\udc6e\\udc70-\\udc78\\udc7c\\udc81-\\udc83\\udc85-\\udc87\\udcaa\\udd7a\\udd95\\udd96\\ude45-\\ude47\\ude4b-\\ude4f\\udea3\\udeb4-\\udeb6\\udec0\\udecc]|\\ud83e[\\udd0c\\udd0f\\udd18-\\udd1c\\udd1e\\udd1f\\udd26\\udd30-\\udd39\\udd3d\\udd3e\\udd77\\uddb5\\uddb6\\uddb8\\uddb9\\uddbb\\uddcd-\\uddcf\\uddd1-\\udddd\\udec3-\\udec5\\udef0-\\udef6]|[\\u270a\\u270b]))(?:\\ud83c[\\udffb-\\udfff])?|(?:\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc65\\udb40\\udc6e\\udb40\\udc67\\udb40\\udc7f|\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc73\\udb40\\udc63\\udb40\\udc74\\udb40\\udc7f|\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc77\\udb40\\udc6c\\udb40\\udc73\\udb40\\udc7f|\\ud83c\\udde6\\ud83c[\\udde8-\\uddec\\uddee\\uddf1\\uddf2\\uddf4\\uddf6-\\uddfa\\uddfc\\uddfd\\uddff]|\\ud83c\\udde7\\ud83c[\\udde6\\udde7\\udde9-\\uddef\\uddf1-\\uddf4\\uddf6-\\uddf9\\uddfb\\uddfc\\uddfe\\uddff]|\\ud83c\\udde8\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\uddee\\uddf0-\\uddf5\\uddf7\\uddfa-\\uddff]|\\ud83c\\udde9\\ud83c[\\uddea\\uddec\\uddef\\uddf0\\uddf2\\uddf4\\uddff]|\\ud83c\\uddea\\ud83c[\\udde6\\udde8\\uddea\\uddec\\udded\\uddf7-\\uddfa]|\\ud83c\\uddeb\\ud83c[\\uddee-\\uddf0\\uddf2\\uddf4\\uddf7]|\\ud83c\\uddec\\ud83c[\\udde6\\udde7\\udde9-\\uddee\\uddf1-\\uddf3\\uddf5-\\uddfa\\uddfc\\uddfe]|\\ud83c\\udded\\ud83c[\\uddf0\\uddf2\\uddf3\\uddf7\\uddf9\\uddfa]|\\ud83c\\uddee\\ud83c[\\udde8-\\uddea\\uddf1-\\uddf4\\uddf6-\\uddf9]|\\ud83c\\uddef\\ud83c[\\uddea\\uddf2\\uddf4\\uddf5]|\\ud83c\\uddf0\\ud83c[\\uddea\\uddec-\\uddee\\uddf2\\uddf3\\uddf5\\uddf7\\uddfc\\uddfe\\uddff]|\\ud83c\\uddf1\\ud83c[\\udde6-\\udde8\\uddee\\uddf0\\uddf7-\\uddfb\\uddfe]|\\ud83c\\uddf2\\ud83c[\\udde6\\udde8-\\udded\\uddf0-\\uddff]|\\ud83c\\uddf3\\ud83c[\\udde6\\udde8\\uddea-\\uddec\\uddee\\uddf1\\uddf4\\uddf5\\uddf7\\uddfa\\uddff]|\\ud83c\\uddf4\\ud83c\\uddf2|\\ud83c\\uddf5\\ud83c[\\udde6\\uddea-\\udded\\uddf0-\\uddf3\\uddf7-\\uddf9\\uddfc\\uddfe]|\\ud83c\\uddf6\\ud83c\\udde6|\\ud83c\\uddf7\\ud83c[\\uddea\\uddf4\\uddf8\\uddfa\\uddfc]|\\ud83c\\uddf8\\ud83c[\\udde6-\\uddea\\uddec-\\uddf4\\uddf7-\\uddf9\\uddfb\\uddfd-\\uddff]|\\ud83c\\uddf9\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\udded\\uddef-\\uddf4\\uddf7\\uddf9\\uddfb\\uddfc\\uddff]|\\ud83c\\uddfa\\ud83c[\\udde6\\uddec\\uddf2\\uddf3\\uddf8\\uddfe\\uddff]|\\ud83c\\uddfb\\ud83c[\\udde6\\udde8\\uddea\\uddec\\uddee\\uddf3\\uddfa]|\\ud83c\\uddfc\\ud83c[\\uddeb\\uddf8]|\\ud83c\\uddfd\\ud83c\\uddf0|\\ud83c\\uddfe\\ud83c[\\uddea\\uddf9]|\\ud83c\\uddff\\ud83c[\\udde6\\uddf2\\uddfc]|\\ud83c[\\udccf\\udd8e\\udd91-\\udd9a\\udde6-\\uddff\\ude01\\ude32-\\ude36\\ude38-\\ude3a\\ude50\\ude51\\udf00-\\udf20\\udf2d-\\udf35\\udf37-\\udf7c\\udf7e-\\udf84\\udf86-\\udf93\\udfa0-\\udfc1\\udfc5\\udfc6\\udfc8\\udfc9\\udfcf-\\udfd3\\udfe0-\\udff0\\udff4\\udff8-\\udfff]|\\ud83d[\\udc00-\\udc3e\\udc40\\udc44\\udc45\\udc51-\\udc65\\udc6a\\udc6f\\udc79-\\udc7b\\udc7d-\\udc80\\udc84\\udc88-\\udc8e\\udc90\\udc92-\\udca9\\udcab-\\udcfc\\udcff-\\udd3d\\udd4b-\\udd4e\\udd50-\\udd67\\udda4\\uddfb-\\ude44\\ude48-\\ude4a\\ude80-\\udea2\\udea4-\\udeb3\\udeb7-\\udebf\\udec1-\\udec5\\uded0-\\uded2\\uded5-\\uded7\\udedd-\\udedf\\udeeb\\udeec\\udef4-\\udefc\\udfe0-\\udfeb\\udff0]|\\ud83e[\\udd0d\\udd0e\\udd10-\\udd17\\udd20-\\udd25\\udd27-\\udd2f\\udd3a\\udd3c\\udd3f-\\udd45\\udd47-\\udd76\\udd78-\\uddb4\\uddb7\\uddba\\uddbc-\\uddcc\\uddd0\\uddde-\\uddff\\ude70-\\ude74\\ude78-\\ude7c\\ude80-\\ude86\\ude90-\\udeac\\udeb0-\\udeba\\udec0-\\udec2\\uded0-\\uded9\\udee0-\\udee7]|[\\u23e9-\\u23ec\\u23f0\\u23f3\\u267e\\u26ce\\u2705\\u2728\\u274c\\u274e\\u2753-\\u2755\\u2795-\\u2797\\u27b0\\u27bf\\ue50a])|\\ufe0f/g;\n","// eslint-disable-next-line no-restricted-globals\nconst cacheApi = self.caches;\n\nexport enum Type {\n  Text,\n  Blob,\n  Json,\n  ArrayBuffer,\n}\n\nexport async function fetch(\n  cacheName: string, key: string, type: Type, isHtmlAllowed = false,\n) {\n  if (!cacheApi) {\n    return undefined;\n  }\n\n  try {\n    // To avoid the error \"Request scheme 'webdocument' is unsupported\"\n    const request = new Request(key.replace(/:/g, '_'));\n    const cache = await cacheApi.open(cacheName);\n    const response = await cache.match(request);\n    if (!response) {\n      return undefined;\n    }\n\n    const contentType = response.headers.get('Content-Type');\n\n    switch (type) {\n      case Type.Text:\n        return await response.text();\n      case Type.Blob: {\n        // Ignore deprecated data-uri avatars\n        if (key.startsWith('avatar') && contentType && contentType.startsWith('text')) {\n          return undefined;\n        }\n\n        const blob = await response.blob();\n        const shouldRecreate = !blob.type || (!isHtmlAllowed && blob.type.includes('html'));\n        // iOS Safari fails to preserve `type` in cache\n        let resolvedType = blob.type || contentType;\n\n        if (!(shouldRecreate && resolvedType)) {\n          return blob;\n        }\n\n        // Prevent HTML-in-video attacks (for files that were cached before fix)\n        if (!isHtmlAllowed) {\n          resolvedType = resolvedType.replace(/html/gi, '');\n        }\n\n        return new Blob([blob], { type: resolvedType });\n      }\n      case Type.Json:\n        return await response.json();\n      case Type.ArrayBuffer:\n        return await response.arrayBuffer();\n      default:\n        return undefined;\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function save(cacheName: string, key: string, data: AnyLiteral | Blob | ArrayBuffer | string) {\n  if (!cacheApi) {\n    return undefined;\n  }\n\n  try {\n    const cacheData = typeof data === 'string' || data instanceof Blob || data instanceof ArrayBuffer\n      ? data\n      : JSON.stringify(data);\n    // To avoid the error \"Request scheme 'webdocument' is unsupported\"\n    const request = new Request(key.replace(/:/g, '_'));\n    const response = new Response(cacheData);\n    const cache = await cacheApi.open(cacheName);\n    return await cache.put(request, response);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function remove(cacheName: string, key: string) {\n  try {\n    if (!cacheApi) {\n      return undefined;\n    }\n\n    const cache = await cacheApi.open(cacheName);\n    return await cache.delete(key);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function clear(cacheName: string) {\n  try {\n    if (!cacheApi) {\n      return undefined;\n    }\n\n    return await cacheApi.delete(cacheName);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n","import { CONTENT_TYPES_WITH_PREVIEW } from '../config';\nimport { pause } from './schedulers';\n\n// Polyfill for Safari: `File` is not available in web worker\nif (typeof File === 'undefined') {\n  // eslint-disable-next-line no-global-assign, no-restricted-globals, func-names\n  self.File = class extends Blob {\n    name: string;\n\n    constructor(fileBits: BlobPart[], fileName: string, options?: FilePropertyBag) {\n      if (options) {\n        const { type, ...rest } = options;\n        super(fileBits, { type });\n        Object.assign(this, rest);\n      } else {\n        super(fileBits);\n      }\n\n      this.name = fileName;\n    }\n  } as typeof File;\n}\n\nexport function dataUriToBlob(dataUri: string) {\n  const arr = dataUri.split(',');\n  const mime = arr[0].match(/:(.*?);/)![1];\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n\n  return new Blob([u8arr], { type: mime });\n}\n\nexport function blobToDataUri(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = (e: ProgressEvent<FileReader>) => {\n      const { result } = e.target || {};\n      if (typeof result === 'string') {\n        resolve(result);\n      }\n\n      reject(new Error('Failed to read blob'));\n    };\n\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n}\n\n\nexport function blobToBuffer(blob: Blob): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = (e: ProgressEvent<FileReader>) => {\n      const { result } = e.target || {};\n      if (typeof result === 'object' && result && result.byteLength > 9) {\n        resolve(Buffer.from(result));\n      }\n\n      reject(new Error('Failed to read blob'));\n    };\n\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(blob);\n  });\n}\n\nexport function blobToFile(blob: Blob, fileName: string) {\n  return new File([blob], fileName, {\n    lastModified: Date.now(),\n    type: blob.type,\n  });\n}\n\nexport function preloadImage(url: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = url;\n  });\n}\n\nexport function preloadVideo(url: string): Promise<HTMLVideoElement> {\n  return new Promise((resolve, reject) => {\n    const video = document.createElement('video');\n    video.volume = 0;\n    video.onloadedmetadata = () => resolve(video);\n    video.onerror = reject;\n    video.src = url;\n  });\n}\n\nexport async function createPosterForVideo(url: string): Promise<string | undefined> {\n  const video = await preloadVideo(url);\n\n  return Promise.race([\n    pause(2000) as Promise<undefined>,\n    new Promise<string | undefined>((resolve, reject) => {\n      video.onseeked = () => {\n        if (!video.videoWidth || !video.videoHeight) {\n          resolve(undefined);\n        }\n\n        const canvas = document.createElement('canvas');\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        const ctx = canvas.getContext('2d')!;\n        ctx.drawImage(video, 0, 0);\n        resolve(canvas.toDataURL('image/jpeg'));\n      };\n      video.onerror = reject;\n      video.currentTime = Math.min(video.duration, 1);\n    }),\n  ]);\n}\n\nexport async function fetchBlob(blobUrl: string) {\n  const response = await fetch(blobUrl);\n  return response.blob();\n}\n\nexport async function fetchFile(blobUrl: string, fileName: string) {\n  const blob = await fetchBlob(blobUrl);\n  return blobToFile(blob, fileName);\n}\n\nexport function imgToCanvas(img: HTMLImageElement) {\n  const canvas = document.createElement('canvas');\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  const ctx = canvas.getContext('2d')!;\n  ctx.drawImage(img, 0, 0);\n\n  return canvas;\n}\n\nexport function imgToBlob(imageFile:File) {\n  const reader = new FileReader();\n  return new Promise<Blob>((resolve, reject) => {\n    reader.onload = () => {\n      const blob = new Blob([reader.result!], {type: imageFile.type});\n      resolve(blob);\n    };\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(imageFile);\n  });\n}\n\nexport function hasPreview(file: File) {\n  return CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n}\n\nexport function validateFiles(files: File[] | FileList | null): File[] | undefined {\n  if (!files?.length) {\n    return undefined;\n  }\n  return Array.from(files).map(fixMovMime).filter((file) => file.size);\n}\n\n// .mov MIME type not reported sometimes https://developer.mozilla.org/en-US/docs/Web/API/File/type#sect1\nfunction fixMovMime(file: File) {\n  const ext = file.name.split('.').pop()!;\n  if (!file.type && ext.toLowerCase() === 'mov') {\n    return new File([file], file.name, { type: 'video/quicktime' });\n  }\n  return file;\n}\n","type CollectionByKey<Member> = Record<number | string, Member>;\n\ntype OrderDirection =\n  'asc'\n  | 'desc';\n\ninterface OrderCallback<T> {\n  (member: T): any;\n}\n\nexport function buildCollectionByKey<T extends AnyLiteral>(collection: T[], key: keyof T) {\n  return collection.reduce((byKey: CollectionByKey<T>, member: T) => {\n    byKey[member[key]] = member;\n\n    return byKey;\n  }, {});\n}\n\nexport function mapValues<R extends any, M extends any>(\n  byKey: CollectionByKey<M>,\n  callback: (member: M, key: string, index: number, originalByKey: CollectionByKey<M>) => R,\n): CollectionByKey<R> {\n  return Object.keys(byKey).reduce((newByKey: CollectionByKey<R>, key, index) => {\n    newByKey[key] = callback(byKey[key], key, index, byKey);\n    return newByKey;\n  }, {});\n}\n\nexport function pick<T, K extends keyof T>(object: T, keys: K[]) {\n  return keys.reduce((result, key) => {\n    result[key] = object[key];\n    return result;\n  }, {} as Pick<T, K>);\n}\n\nexport function pickTruthy<T, K extends keyof T>(object: T, keys: K[]) {\n  return keys.reduce((result, key) => {\n    if (object[key]) {\n      result[key] = object[key];\n    }\n\n    return result;\n  }, {} as Pick<T, K>);\n}\n\nexport function omit<T extends object, K extends keyof T>(object: T, keys: K[]): Omit<T, K> {\n  const stringKeys = new Set(keys.map(String));\n  const savedKeys = Object.keys(object)\n    .filter((key) => !stringKeys.has(key)) as Array<Exclude<keyof T, K>>;\n\n  return pick(object, savedKeys);\n}\n\nexport function orderBy<T>(\n  collection: T[],\n  orderRule: (keyof T) | OrderCallback<T> | ((keyof T) | OrderCallback<T>)[],\n  mode: OrderDirection | [OrderDirection, OrderDirection] = 'asc',\n): T[] {\n  function compareValues(a: T, b: T, currentOrderRule: (keyof T) | OrderCallback<T>, isAsc: boolean) {\n    const aValue = (typeof currentOrderRule === 'function' ? currentOrderRule(a) : a[currentOrderRule]) || 0;\n    const bValue = (typeof currentOrderRule === 'function' ? currentOrderRule(b) : b[currentOrderRule]) || 0;\n\n    return isAsc ? aValue - bValue : bValue - aValue;\n  }\n\n  if (Array.isArray(orderRule)) {\n    const [mode1, mode2] = Array.isArray(mode) ? mode : [mode, mode];\n    const [orderRule1, orderRule2] = orderRule;\n    const isAsc1 = mode1 === 'asc';\n    const isAsc2 = mode2 === 'asc';\n\n    return collection.sort((a, b) => {\n      return compareValues(a, b, orderRule1, isAsc1) || compareValues(a, b, orderRule2, isAsc2);\n    });\n  }\n\n  const isAsc = mode === 'asc';\n  return collection.sort((a, b) => {\n    return compareValues(a, b, orderRule, isAsc);\n  });\n}\n\nexport function unique<T extends any>(array: T[]): T[] {\n  return Array.from(new Set(array));\n}\n\nexport function uniqueByField<T extends any>(array: T[], field: keyof T): T[] {\n  return [...new Map(array.map((item) => [item[field], item])).values()];\n}\n\nexport function compact<T extends any>(array: T[]) {\n  return array.filter(Boolean);\n}\n\nexport function areSortedArraysEqual(array1: any[], array2: any[]) {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  return array1.every((item, i) => item === array2[i]);\n}\n\nexport function areSortedArraysIntersecting(array1: any[], array2: any[]) {\n  return array1[0] <= array2[array2.length - 1] && array1[array1.length - 1] >= array2[0];\n}\n\nexport function findIntersectionWithSet<T>(array: T[], set: Set<T>): T[] {\n  return array.filter((a) => set.has(a));\n}\n\nexport function split<T extends any>(array: T[], chunkSize: number) {\n  const result: T[][] = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    result.push(array.slice(i, i + chunkSize));\n  }\n\n  return result;\n}\n\nexport function partition<T extends unknown>(\n  array: T[], filter: (value: T, index: number, array: T[]) => boolean,\n): [T[], T[]] {\n  const pass: T[] = [];\n  const fail: T[] = [];\n\n  array.forEach((e, idx, arr) => (filter(e, idx, arr) ? pass : fail).push(e));\n\n  return [pass, fail];\n}\n\nexport function cloneDeep<T>(value: T): T {\n  if (!isObject(value)) {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(cloneDeep) as typeof value;\n  }\n\n  return Object.keys(value).reduce((acc, key) => {\n    acc[key as keyof T] = cloneDeep(value[key as keyof T]);\n    return acc;\n  }, {} as T);\n}\n\nfunction isObject(value: any): value is object {\n  // eslint-disable-next-line no-null/no-null\n  return typeof value === 'object' && value !== null;\n}\n\nexport function findLast<T>(array: Array<T>, predicate: (value: T, index: number, obj: T[]) => boolean): T | undefined {\n  let cursor = array.length;\n\n  while (cursor--) {\n    if (predicate(array[cursor], cursor, array)) {\n      return array[cursor];\n    }\n  }\n\n  return undefined;\n}\n","type Scheduler =\n  typeof requestAnimationFrame\n  | typeof onTickEnd;\n\nexport function debounce<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n  shouldRunLast = true,\n) {\n  let waitingTimeout: number | undefined;\n\n  return (...args: Parameters<F>) => {\n    if (waitingTimeout) {\n      clearTimeout(waitingTimeout);\n      waitingTimeout = undefined;\n    } else if (shouldRunFirst) {\n      fn(...args);\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    waitingTimeout = self.setTimeout(() => {\n      if (shouldRunLast) {\n        fn(...args);\n      }\n\n      waitingTimeout = undefined;\n    }, ms);\n  };\n}\n\nexport function throttle<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n) {\n  let interval: number | undefined;\n  let isPending: boolean;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    isPending = true;\n    args = _args;\n\n    if (!interval) {\n      if (shouldRunFirst) {\n        isPending = false;\n        fn(...args);\n      }\n\n      // eslint-disable-next-line no-restricted-globals\n      interval = self.setInterval(() => {\n        if (!isPending) {\n          // eslint-disable-next-line no-restricted-globals\n          self.clearInterval(interval!);\n          interval = undefined;\n          return;\n        }\n\n        isPending = false;\n        fn(...args);\n      }, ms);\n    }\n  };\n}\n\nexport function fastRafWithFallback<F extends AnyToVoidFunction>(fn: F) {\n  return fastRaf(fn, false, true);\n}\n\nexport function fastRafPrimaryWithFallback<F extends AnyToVoidFunction>(fn: F) {\n  return fastRaf(fn, true, true);\n}\n\nexport function throttleWithRafFallback<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRafWithFallback, fn);\n}\n\nexport function throttleWithPrimaryRafFallback<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRafPrimaryWithFallback, fn);\n}\n\nexport function throttleWithRaf<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRaf, fn);\n}\n\nexport function throttleWithPrimaryRaf<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRafPrimary, fn);\n}\n\nexport function throttleWithTickEnd<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(onTickEnd, fn);\n}\n\nexport function throttleWithPrimaryTickEnd<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(onTickEndPrimary, fn);\n}\n\nexport function throttleWith<F extends AnyToVoidFunction>(schedulerFn: Scheduler, fn: F) {\n  let waiting = false;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    args = _args;\n\n    if (!waiting) {\n      waiting = true;\n\n      schedulerFn(() => {\n        waiting = false;\n        fn(...args);\n      });\n    }\n  };\n}\n\nexport function onIdle(cb: NoneToVoidFunction, timeout?: number) {\n  // eslint-disable-next-line no-restricted-globals\n  if (self.requestIdleCallback) {\n    // eslint-disable-next-line no-restricted-globals\n    self.requestIdleCallback(cb, { timeout });\n  } else {\n    onTickEnd(cb);\n  }\n}\n\nexport const pause = (ms: number) => new Promise<void>((resolve) => {\n  setTimeout(() => resolve(), ms);\n});\n\nexport function rafPromise() {\n  return new Promise<void>((resolve) => {\n    fastRaf(resolve);\n  });\n}\n\nlet fastRafCallbacks: NoneToVoidFunction[] | undefined;\nlet fastRafPrimaryCallbacks: NoneToVoidFunction[] | undefined;\nlet timeoutCallbacks: NoneToVoidFunction[] | undefined;\nlet timeoutPrimaryCallbacks: NoneToVoidFunction[] | undefined;\nlet timeout: NodeJS.Timeout | undefined;\n\nconst FAST_RAF_TIMEOUT_FALLBACK_MS = 300;\n\n// May result in an immediate execution if called from another RAF callback which was scheduled\n// (and therefore is executed) earlier than RAF callback scheduled by `fastRaf`\nexport function fastRaf(callback: NoneToVoidFunction, isPrimary = false, withTimeoutFallback = false) {\n  if (!fastRafCallbacks) {\n    fastRafCallbacks = !withTimeoutFallback && !isPrimary ? [callback] : [];\n    fastRafPrimaryCallbacks = !withTimeoutFallback && isPrimary ? [callback] : [];\n    timeoutCallbacks = withTimeoutFallback && !isPrimary ? [callback] : [];\n    timeoutPrimaryCallbacks = withTimeoutFallback && isPrimary ? [callback] : [];\n\n    requestAnimationFrame(() => {\n      const currentCallbacks = fastRafCallbacks!;\n      const currentPrimaryCallbacks = fastRafPrimaryCallbacks!;\n      const currentTimeoutCallbacks = timeoutCallbacks!;\n      const currentTimeoutPrimaryCallbacks = timeoutPrimaryCallbacks!;\n\n      if (timeout) clearTimeout(timeout);\n      timeout = undefined;\n\n      fastRafCallbacks = undefined;\n      fastRafPrimaryCallbacks = undefined;\n      timeoutCallbacks = undefined;\n      timeoutPrimaryCallbacks = undefined;\n\n      currentPrimaryCallbacks.forEach((cb) => cb());\n      currentTimeoutPrimaryCallbacks.forEach((cb) => cb());\n      currentCallbacks.forEach((cb) => cb());\n      currentTimeoutCallbacks.forEach((cb) => cb());\n    });\n  } else if (isPrimary) {\n    if (withTimeoutFallback) {\n      timeoutPrimaryCallbacks!.push(callback);\n    } else {\n      fastRafPrimaryCallbacks!.push(callback);\n    }\n  } else if (withTimeoutFallback) {\n    timeoutCallbacks!.push(callback);\n  } else {\n    fastRafCallbacks.push(callback);\n  }\n\n  if (!timeout && withTimeoutFallback) {\n    timeout = setTimeout(() => {\n      const currentTimeoutCallbacks = timeoutCallbacks!;\n      const currentTimeoutPrimaryCallbacks = timeoutPrimaryCallbacks!;\n\n      if (timeout) clearTimeout(timeout);\n      timeout = undefined;\n\n      timeoutCallbacks = [];\n      timeoutPrimaryCallbacks = [];\n\n      currentTimeoutPrimaryCallbacks.forEach((cb) => cb());\n      currentTimeoutCallbacks.forEach((cb) => cb());\n    }, FAST_RAF_TIMEOUT_FALLBACK_MS);\n  }\n}\n\nexport function fastRafPrimary(callback: NoneToVoidFunction) {\n  fastRaf(callback, true);\n}\n\nlet onTickEndCallbacks: NoneToVoidFunction[] | undefined;\nlet onTickEndPrimaryCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onTickEnd(callback: NoneToVoidFunction, isPrimary = false) {\n  if (!onTickEndCallbacks) {\n    onTickEndCallbacks = isPrimary ? [] : [callback];\n    onTickEndPrimaryCallbacks = isPrimary ? [callback] : [];\n\n    Promise.resolve().then(() => {\n      const currentCallbacks = onTickEndCallbacks!;\n      const currentPrimaryCallbacks = onTickEndPrimaryCallbacks!;\n      onTickEndCallbacks = undefined;\n      onTickEndPrimaryCallbacks = undefined;\n      currentPrimaryCallbacks.forEach((cb) => cb());\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else if (isPrimary) {\n    onTickEndPrimaryCallbacks!.push(callback);\n  } else {\n    onTickEndCallbacks.push(callback);\n  }\n}\n\nexport function onTickEndPrimary(callback: NoneToVoidFunction) {\n  onTickEnd(callback, true);\n}\n\nlet beforeUnloadCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onBeforeUnload(callback: NoneToVoidFunction, isLast = false) {\n  if (!beforeUnloadCallbacks) {\n    beforeUnloadCallbacks = [];\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('beforeunload', () => {\n      beforeUnloadCallbacks!.forEach((cb) => cb());\n    });\n  }\n\n  if (isLast) {\n    beforeUnloadCallbacks.push(callback);\n  } else {\n    beforeUnloadCallbacks.unshift(callback);\n  }\n\n  return () => {\n    beforeUnloadCallbacks = beforeUnloadCallbacks!.filter((cb) => cb !== callback);\n  };\n}\n","let serverTimeOffset = 0;\n\nexport function setServerTimeOffset(_serverTimeOffset: number) {\n  serverTimeOffset = _serverTimeOffset;\n}\n\nexport function getServerTimeOffset() {\n  return serverTimeOffset;\n}\n\nexport function getServerTime() {\n  return Math.floor(Date.now() / 1000) + serverTimeOffset;\n}\n","/* eslint-disable no-bitwise */\n\n// Ref: https://github.com/telegramdesktop/tdesktop/blob/0743e71ab6b928d2ee5bae1aed991849b1e2b291/Telegram/SourceFiles/data/data_document.cpp#L1018\nexport function decodeWaveform(encoded5bit: Uint8Array) {\n  const bitsCount = encoded5bit.length * 8;\n  const valuesCount = Math.floor(bitsCount / 5);\n  if (!valuesCount) {\n    return [];\n  }\n\n  // Read each 5 bit of encoded5bit as 0-31 unsigned char.\n  // We count the index of the byte in which the desired 5-bit sequence starts.\n  // And then we read a uint16 starting from that byte to guarantee to get all of those 5 bits.\n  //\n  // BUT! if it is the last byte we have, we're not allowed to read a uint16 starting with it.\n  // Because it will be an overflow (we'll access one byte after the available memory).\n  // We see, that only the last 5 bits could start in the last available byte and be problematic.\n  // So we read in a general way all the entries in a general way except the last one.\n  const result = Array(valuesCount);\n  const bitsData = encoded5bit;\n  for (let i = 0, l = valuesCount - 1; i !== l; ++i) {\n    const byteIndex = Math.floor((i * 5) / 8);\n    const bitShift = Math.floor((i * 5) % 8);\n    const value = bitsData[byteIndex] + (bitsData[byteIndex + 1] << 8);\n    result[i] = ((value >> bitShift) & 0x1F);\n  }\n  const lastByteIndex = Math.floor(((valuesCount - 1) * 5) / 8);\n  const lastBitShift = Math.floor(((valuesCount - 1) * 5) % 8);\n  const lastValue = bitsData[lastByteIndex] + (bitsData[lastByteIndex + 1] << 8);\n  result[valuesCount - 1] = (lastValue >> lastBitShift) & 0x1F;\n\n  return result;\n}\n\nexport function interpolateArray(data: number[], fitCount: number) {\n  let peak = 0;\n  const newData = new Array(fitCount);\n  const springFactor = data.length / fitCount;\n  const leftFiller = data[0];\n  const rightFiller = data[data.length - 1];\n  for (let i = 0; i < fitCount; i++) {\n    const idx = Math.floor(i * springFactor);\n    const val = ((data[idx - 1] ?? leftFiller) + (data[idx] ?? leftFiller) + (data[idx + 1] ?? rightFiller)) / 3;\n    newData[i] = val;\n    if (peak < val) {\n      peak = val;\n    }\n  }\n  return { data: newData, peak };\n}\n","import {\n  ApiAttachment,\n  ApiBotInfo,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntityTypes,\n  ApiUpdate,\n  OnApiUpdate\n} from \"../../api/types\";\nimport {LOCAL_MESSAGE_MIN_ID, MEDIA_CACHE_NAME_WAI} from \"../../config\";\nimport {DownloadMsgRes, GenMsgIdReq, GenMsgIdRes, UploadMsgReq} from \"../../lib/ptp/protobuf/PTPMsg\";\nimport {getNextLocalMessageId} from \"../../api/gramjs/apiBuilders/messages\";\nimport {\n  Pdu,\n  popByteBuffer,\n  readBytes,\n  readInt16,\n  readInt32,\n  toUint8Array,\n  wrapByteBuffer,\n  writeBytes,\n  writeInt16,\n  writeInt32\n} from \"../../lib/ptp/protobuf/BaseMsg\";\nimport {PbMsg, PbUser} from \"../../lib/ptp/protobuf/PTPCommon\";\nimport {account} from \"../../api/gramjs/methods/client\";\nimport {DownloadUserRes, UploadUserReq} from \"../../lib/ptp/protobuf/PTPUser\";\nimport {sleep} from \"../../lib/gramjs/Helpers\";\nimport {Api as GramJs} from \"../../lib/gramjs\";\nimport {blobToDataUri, fetchBlob} from \"../../util/files\";\nimport {parseCodeBlock, parseEntities} from \"../share/utils/stringParse\";\nimport MsgChatGptWorker, {AiHistoryType} from \"./MsgChatGpWorker\";\nimport * as cacheApi from \"../../util/cacheApi\";\nimport {Type} from \"../../util/cacheApi\";\nimport {DownloadRes} from \"../../lib/ptp/protobuf/PTPFile\";\nimport {uploadFileCache} from \"../../lib/gramjs/client/uploadFile\";\nimport BotWebSocket, {BotWebSocketNotifyAction, BotWebSocketState} from \"./bot/BotWebSocket\";\nimport Account from \"../share/Account\";\n\nlet messageIds:number[] = [];\n\nexport default class MsgWorker {\n  private botInfo?: ApiBotInfo;\n  private chat: ApiChat;\n  private msgSend: ApiMessage;\n  private media: GramJs.TypeInputMedia | undefined;\n  private attachment?: ApiAttachment;\n  public static onUpdate: (update: ApiUpdate) => void;\n  private aiHistoryList:AiHistoryType[];\n  constructor({\n      chat,\n      msgSend,\n      attachment,\n      media,\n      botInfo,\n      aiHistoryList,\n    }:{\n    chat:ApiChat;\n    media: GramJs.TypeInputMedia | undefined;\n    msgSend:ApiMessage;\n    attachment?:ApiAttachment;\n    botInfo?:ApiBotInfo;\n    aiHistoryList?:AiHistoryType[]\n  },onUpdate:OnApiUpdate) {\n    MsgWorker.onUpdate = onUpdate;\n    this.aiHistoryList = aiHistoryList||[]\n    this.botInfo = botInfo;\n    this.chat = chat;\n    this.media = media;\n    this.msgSend = msgSend;\n    this.attachment = attachment;\n  }\n\n  static async createWsBot(chatId:string,botApi?:string){\n    if(botApi && botApi.startsWith(\"ws\")){\n      const botWs = BotWebSocket.getInstance(chatId)\n      if(!botWs.isLogged()){\n        botWs.setMsgHandler(async (chatId, notifies)=>{\n          for (let i = 0; i < notifies.length; i++) {\n            const {action,payload} = notifies[i]\n            switch (action){\n              case BotWebSocketNotifyAction.onConnectionStateChanged:\n                switch (payload.BotWebSocketState){\n                  case BotWebSocketState.connected:\n                    // await MsgDispatcher.newTextMessage(chatId,undefined,\"已连接\")\n                    break;\n                  case BotWebSocketState.closed:\n                    // await MsgDispatcher.newTextMessage(chatId,undefined,\"已断开\")\n                    break;\n                }\n                break\n              case BotWebSocketNotifyAction.onData:\n                // await MsgCommand.handleWsBotOnData(chatId,payload)\n                break\n            }\n          }\n        })\n        botWs.setWsUrl(botApi)\n        botWs.setSession(Account.getCurrentAccount()?.getSession()!)\n        botWs.connect();\n        await botWs.waitForMsgServerState(BotWebSocketState.logged)\n      }\n    }\n  }\n  static async beforeUploadUserReq(pdu:Pdu){\n    const {users,...res} = UploadUserReq.parseMsg(pdu)\n    if(users){\n      for (let i = 0; i < users?.length; i++) {\n        if (users) {\n          if(\n            (users.length === 1 && users[0].user!.photos && users[0].user!.photos.length > 0 )\n          ){\n            const photo = users[0].user!.photos[0];\n            let id;\n            if(photo && photo.id){\n              id = photo.id;\n            }\n            if(id){\n              let arrayBuffer = await cacheApi.fetch(MEDIA_CACHE_NAME_WAI, id, Type.ArrayBuffer);\n              if(arrayBuffer){\n                // @ts-ignore\n                const res = DownloadRes.parseMsg(new Pdu(Buffer.from(arrayBuffer)));\n                if(!res || !res.file){\n                  break\n                }\n                await uploadFileCache(res.file!)\n              }\n            }\n          }\n          const {time,user} = users[i]\n          let buf = Buffer.from(new PbUser(user!).pack().getPbData())\n          const password = \"Wai\" + time!.toString();\n          // console.log(\"accountId\",account.getAccountId())\n          // console.log(\"entropy\",await account.getEntropy())\n          const cipher = await account.encryptData(buf,password)\n          const bb = popByteBuffer();\n          writeInt32(bb, cipher?.length + 4 + 4 + 4 + 2);\n          writeInt16(bb, 1);\n          writeInt32(bb, time!);\n          writeInt32(bb, 0);\n          writeBytes(bb, cipher);\n          users[i].buf = Buffer.from(toUint8Array(bb));\n          users[i].user = undefined\n          // console.log(\"userId\",user?.id)\n          // console.log(\"buf\",buf)\n          // console.log(\"cipher\",cipher)\n          // console.log(\"msg buf\",users[i].buf)\n        }\n      }\n    }\n\n    return new UploadUserReq({users,...res}).pack()\n  }\n  static async afterDownloadUserReq(pdu:Pdu){\n    const {users,...res} = DownloadUserRes.parseMsg(pdu)\n    if(users){\n      for (let i = 0; i < users?.length; i++) {\n        if (users) {\n          const {buf} = users[i]\n          const bbDecode = wrapByteBuffer(Buffer.from(buf!))\n          const len = readInt32(bbDecode);\n          const encrypt = readInt16(bbDecode) === 1;\n          const time = readInt32(bbDecode);\n          const reverse = readInt32(bbDecode);\n          let cipher = readBytes(bbDecode,len - 14);\n          const password = \"Wai\"+time.toString();\n          // console.log(\"encode\",Buffer.from(buf!).toString(\"hex\"))\n          // console.log(\"cipher\",Buffer.from(cipher).toString(\"hex\"))\n          const buf2 = await account.decryptData(Buffer.from(cipher),password)\n          // console.log(\"userId\",user?.id)\n          // console.log(\"buf\",buf)\n          // console.log(\"cipher\",cipher)\n          // console.log(\"msg buf\",user)\n          users[i].user = PbUser.parseMsg(new Pdu(Buffer.from(buf2)));\n          users[i].buf = undefined\n        }\n      }\n    }\n\n    return Buffer.from(new DownloadUserRes({...res,users}).pack().getPbData())\n  }\n  static async afterDownloadMsgReq(pdu:Pdu){\n    const {messages,...res} = DownloadMsgRes.parseMsg(pdu)\n    if(messages){\n      for (let i = 0; i < messages?.length; i++) {\n        const {buf} = messages[i]\n        const bbDecode = wrapByteBuffer(Buffer.from(buf!))\n        const len = readInt32(bbDecode);\n        const encrypt = readInt16(bbDecode) === 1;\n        const time = readInt32(bbDecode);\n        const reverse = readInt32(bbDecode);\n        let cipher = readBytes(bbDecode,len - 14);\n        const password = \"Wai\"+time.toString();\n        // console.log(\"encode\",Buffer.from(buf!).toString(\"hex\"))\n        // console.log(\"cipher\",Buffer.from(cipher).toString(\"hex\"))\n        const buf2 = await account.decryptData(Buffer.from(cipher),password)\n        messages[i].message = PbMsg.parseMsg(new Pdu(Buffer.from(buf2)))\n        messages[i].buf = undefined\n        // console.log(\"userId\",user?.id)\n        // console.log(\"buf\",buf)\n        // console.log(\"cipher\",cipher)\n        // console.log(\"msg buf\",users[i].buf)\n      }\n    }\n    return Buffer.from(new DownloadMsgRes({...res,messages}).pack().getPbData())\n  }\n  static async beforeUploadMsgReq(pdu:Pdu){\n    const {messages,...res} = UploadMsgReq.parseMsg(pdu)\n\n    if(messages){\n      if(messages.length === 1){\n        const {photo,voice,audio,document} = messages[0].message!.content;\n        let id;\n        if(photo && photo.id){\n          id = photo.id;\n        }else if(voice && voice.id){\n          id = voice.id;\n        }else if(audio && audio.id){\n          id = audio.id;\n        }else if(document && document.id){\n          id = document.id;\n        }\n        if(id){\n          let arrayBuffer = await cacheApi.fetch(MEDIA_CACHE_NAME_WAI, id, Type.ArrayBuffer);\n\n          if(arrayBuffer){\n            // @ts-ignore\n            const {file} = DownloadRes.parseMsg(new Pdu(Buffer.from(arrayBuffer)));\n            await uploadFileCache(file!)\n          }\n        }\n      }\n      for (let i = 0; i < messages?.length; i++) {\n        const {time,message} = messages[i]\n        let buf = Buffer.from(new PbMsg(message!).pack().getPbData())\n        const password = \"Wai\"+time!.toString();\n        const cipher = await account.encryptData(buf,password)\n        const bb = popByteBuffer();\n        writeInt32(bb, cipher?.length + 4 + 4 + 4 + 2);\n        writeInt16(bb, 1);\n        writeInt32(bb, time!);\n        writeInt32(bb, 0);\n        writeBytes(bb, cipher);\n        messages[i].buf = Buffer.from(toUint8Array(bb));\n        messages[i].message = undefined\n        // console.log(\"buf\",buf)\n        // console.log(\"cipher\",cipher)\n        // console.log(\"msg buf\",messages[i].buf)\n      }\n    }\n    return new UploadMsgReq({messages,...res}).pack()\n  }\n\n  static async genMessageId(isLocal?:boolean):Promise<number>{\n    let msgId = isLocal ? getNextLocalMessageId() : parseInt(getNextLocalMessageId().toString()) % LOCAL_MESSAGE_MIN_ID;\n    if(messageIds.length > 10){\n      messageIds = messageIds.slice(messageIds.length - 10)\n    }\n    if(messageIds.includes(msgId)){\n      await sleep(100);\n      return MsgWorker.genMessageId(isLocal);\n    }else{\n      messageIds.push(msgId);\n      return msgId\n    }\n  }\n\n  static async genMsgId(pdu:Pdu):Promise<Uint8Array>{\n    const {isLocal} = GenMsgIdReq.parseMsg(pdu)\n    return new GenMsgIdRes({messageId:await MsgWorker.genMessageId(isLocal)}).pack().getPbData()\n  }\n\n  static getMediaFileId(media: GramJs.TypeInputMedia | undefined){\n    let fileId;\n    //@ts-ignore\n    if (media && media!.file && media.file.id) {\n      //@ts-ignore\n      fileId = media!.file.id.toString()\n    }\n    return fileId\n  }\n  async handleMedia(){\n    const {msgSend,attachment} = this;\n    if(attachment){\n      let fileId = MsgWorker.getMediaFileId(this.media);\n\n      if (msgSend.content.photo || msgSend.content.document) {\n        const getPhotoInfo = async (attachment: ApiAttachment) => {\n          const dataUri = await blobToDataUri(await fetchBlob(attachment.thumbBlobUrl!));\n          const size = {\n            \"width\": attachment.quick!.width,\n            \"height\": attachment.quick!.height,\n          }\n          return {\n            dataUri, size\n          }\n        }\n\n        if (msgSend.content.document) {\n          msgSend.content.document.id = fileId\n\n          if (msgSend.content.document.mimeType.split(\"/\")[0] === \"image\") {\n            const {size, dataUri} = await getPhotoInfo(attachment);\n            msgSend.content.document.mediaType = \"photo\";\n            msgSend.content.document.previewBlobUrl = undefined;\n            msgSend.content.document.thumbnail = {\n              ...size,\n              dataUri\n            }\n            msgSend.content.document.mediaSize = size;\n          }\n        }\n\n        if(msgSend.content.photo){\n          const {size,dataUri} = await getPhotoInfo(attachment);\n          msgSend.content.photo = {\n            isSpoiler:msgSend.content.photo.isSpoiler,\n            id:fileId,\n            \"thumbnail\": {\n              ...size,\n              dataUri\n            },\n            \"sizes\": [\n              {\n                ...size,\n                \"type\": \"y\"\n              }\n            ],\n          }\n        }\n      }\n\n      if(msgSend.content.voice){\n        msgSend.content.voice.id = fileId\n      }\n      if(msgSend.content.audio){\n        msgSend.content.audio.id = fileId\n      }\n      this.msgSend = msgSend;\n    }\n  }\n  static handleMessageTextCode(msgSend:Partial<ApiMessage>){\n    if(msgSend.content?.text && msgSend.content.text.text){\n      // @ts-ignore\n      msgSend.content.text = parseCodeBlock(msgSend.content.text?.text)\n    }\n    return msgSend\n  }\n  static handleBotCmdText(msgSend:Partial<ApiMessage>,botInfo:ApiBotInfo){\n    const commands:string[] = []\n    if(botInfo && botInfo.commands){\n      botInfo.commands.forEach(cmd=>commands.push(cmd.command))\n    }\n    if(msgSend.content && msgSend.content.text && msgSend.content.text.text){\n      if(msgSend.content.text!.entities && msgSend.content.text!.entities.find(e=>{\n        // @ts-ignore\n        return e.cipher\n      })){\n      }else{\n        // @ts-ignore\n        msgSend.content.text!.entities = [\n          ...msgSend.content.text!.entities||[],\n          ...parseEntities(msgSend.content.text!.text!,commands)\n        ]\n      }\n    }\n    return msgSend;\n  }\n  static updateMessage(chatId:string,messageId:number,message:Partial<ApiMessage>){\n    MsgWorker.onUpdate({\n      '@type': \"updateMessage\",\n      id: messageId,\n      chatId,\n      message,\n    });\n    return message\n  }\n  static newMessage(chatId:string,messageId:number,message:ApiMessage){\n    MsgWorker.onUpdate({\n      '@type': \"newMessage\",\n      chatId,\n      id:messageId,\n      message,\n      shouldForceReply:false\n    });\n    return message\n  }\n  async processOutGoing(){\n    const {msgSend} = this;\n    const msgId = await MsgWorker.genMessageId();\n    let message = {\n      ...msgSend,\n      id:msgId,\n      sendingState: undefined,\n    };\n    MsgWorker.onUpdate({\n      '@type': \"updateMessageSendSucceeded\",\n      chatId: msgSend.chatId,\n      localId:msgSend.id,\n      message,\n    });\n    this.msgSend = message\n  }\n\n  isMsgCipher(){\n    return this.msgSend.content.text?.entities?.some((e) => e.type === ApiMessageEntityTypes.Spoiler);\n  }\n  async processBotMsg(){\n    const {botInfo,msgSend} =this;\n    if(\n      msgSend.content.text && msgSend.content.text.text &&\n      botInfo?.aiBot\n    ){\n      return await new MsgChatGptWorker(this.msgSend,botInfo,this.aiHistoryList).process()\n    }\n  }\n  async process(){\n    const {msgSend,chat,botInfo} = this;\n\n    try {\n      await this.handleMedia();\n      if(botInfo){\n        this.msgSend = MsgWorker.handleBotCmdText(this.msgSend,botInfo);\n      }\n      await this.processOutGoing();\n      if(this.isMsgCipher()){\n        return\n      }\n      if(this.botInfo){\n        await this.processBotMsg();\n      }\n    }catch (error:any){\n      console.error(error)\n      MsgWorker.onUpdate({\n        '@type': 'updateMessageSendFailed',\n        chatId: chat.id,\n        localId: msgSend.id,\n        error: error.message,\n      });\n    }\n  }\n}\n","import {DEBUG} from '../../../config';\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport {getActionCommandsName} from \"../../../lib/ptp/protobuf/ActionCommands\";\nimport Account from '../../share/Account';\nimport {AuthLoginReq} from \"../../../lib/ptp/protobuf/PTPAuth\";\n\nexport enum BotWebSocketNotifyAction{\n  onConnectionStateChanged,\n  onData,\n}\n\nexport type BotWebSocketNotify = {\n  action: BotWebSocketNotifyAction;\n  payload: any;\n};\n\nexport enum BotWebSocketState {\n  connect_none,\n  closed,\n  connect_error,\n  connecting,\n  connected,\n  logged,\n}\n\nexport type MsgHandleType = (chatId:string,notifies:BotWebSocketNotify[])=>void\n\nlet reconnect_cnt = 0;\nlet seq_num = 0;\nlet clients: Record<string, BotWebSocket> = {};\n\nlet currentMsgConn: BotWebSocket | null = null;\n\nexport default class BotWebSocket {\n  private autoConnect: boolean;\n  public client: WebSocket | any | undefined;\n  private __rev_msg_map: Record<number, Pdu>;\n  private __sending_msg_map: Record<number, boolean>;\n  private __msgHandler?: MsgHandleType;\n  private sendMsgTimer?: NodeJS.Timeout;\n  private state: BotWebSocketState;\n  private chatId: string;\n  private wsUrl?: string;\n  private session?: string;\n  constructor(chatId: string) {\n    currentMsgConn = this;\n    this.chatId = chatId;\n    this.autoConnect = true;\n    this.sendMsgTimer = undefined;\n    this.state = BotWebSocketState.connect_none;\n    this.__rev_msg_map = {};\n    this.__sending_msg_map = {};\n  }\n  setWsUrl(wsUrl:string) {\n    this.wsUrl = wsUrl;\n  }\n  setSession(session:string) {\n    this.session = session;\n  }\n  getState() {\n    return this.state;\n  }\n  getChatId(){\n    return this.chatId;\n  }\n\n  getAutoConnect() {\n    return this.autoConnect;\n  }\n  setAutoConnect(autoConnect: boolean) {\n    this.autoConnect = autoConnect;\n  }\n\n  async close() {\n    this.notifyState(BotWebSocketState.closed);\n    if (this.client && this.isConnect()) {\n      this.client.close();\n    }\n  }\n  connect() {\n    if (!this.wsUrl ) {\n      console.error('no ws url');\n      return;\n    }\n    if (\n      this.state === BotWebSocketState.logged ||\n      this.state === BotWebSocketState.connecting ||\n      this.state === BotWebSocketState.connected\n    ) {\n      return;\n    }\n    try {\n      console.log('connecting', this.chatId,this.wsUrl);\n      this.notifyState(BotWebSocketState.connecting);\n      this.client = new WebSocket(`${this.wsUrl}`);\n      this.client.binaryType = 'arraybuffer';\n      this.client.onopen = this.onConnected.bind(this);\n      this.client.onmessage = this.onData.bind(this);\n      this.client.onclose = this.onClose.bind(this);\n    } catch (e) {\n      console.error('connect error', e);\n      this.reconnect(this.getAutoConnect());\n    }\n  }\n\n  waitForMsgServerState(\n    state: BotWebSocketState,\n    timeout: number = 10000,\n    startTime: number = 0\n  ) {\n    const timeout_ = 500;\n    return new Promise<boolean>((resolve) => {\n      setTimeout(() => {\n        if (this.getState() === state) {\n          resolve(true);\n        } else if (timeout > 0 && startTime >= timeout) {\n          //console.debug('waitForMsgServerState timeout', startTime, timeout);\n          resolve(false);\n        } else {\n          startTime += timeout_;\n          // eslint-disable-next-line promise/catch-or-return\n          this.waitForMsgServerState(state, timeout, startTime).then(resolve);\n        }\n      }, timeout_);\n    });\n  }\n\n  waitTime(timeout: number = 1000, startTime: number = 0) {\n    const timeout_ = 1000;\n    return new Promise<void>((resolve) => {\n      setTimeout(() => {\n        if (startTime >= timeout) {\n          resolve();\n        } else {\n          startTime += timeout_;\n          // eslint-disable-next-line promise/catch-or-return\n          this.waitTime(timeout, startTime).then(resolve);\n        }\n      }, timeout_);\n    });\n  }\n\n  setMsgHandler(msgHandler: MsgHandleType) {\n    this.__msgHandler = msgHandler;\n  }\n\n  onConnected() {\n    reconnect_cnt = 0\n    console.log(\"[onConnected account]\",this.getChatId())\n    this.notifyState(BotWebSocketState.connected);\n    this.login().catch(console.error)\n  }\n  async login(){\n    const {session} = this;\n    await this.sendPduWithCallback(new AuthLoginReq({\n      sign:Account.getCurrentAccount()?.getSession()!\n    }).pack())\n    console.log(\"[onLogin]\")\n    this.notifyState(BotWebSocketState.logged);\n  }\n  notify(notifyList:BotWebSocketNotify[]) {\n    if (this.__msgHandler) {\n      this.__msgHandler(this.chatId,notifyList);\n    }\n  }\n  onData(e: { data: Buffer }) {\n    if(e.data && e.data.byteLength && e.data.byteLength > 16){\n      let pdu = new Pdu(Buffer.from(e.data));\n      const seq_num = pdu.getSeqNum();\n      if(DEBUG){\n        console.log(\"[onData]\",seq_num,pdu.getCommandId(),getActionCommandsName(pdu.getCommandId()))\n      }\n      if(this.__sending_msg_map[seq_num]){\n        this.__rev_msg_map[seq_num] = pdu\n        delete this.__sending_msg_map[seq_num];\n      }else{\n        if (this.__msgHandler) {\n          this.notify([\n            {\n              action: BotWebSocketNotifyAction.onData,\n              payload: pdu,\n            },\n          ]);\n        }\n      }\n    }\n\n  }\n  notifyState(state: BotWebSocketState) {\n    this.state = state;\n    this.notify([\n      {\n        action: BotWebSocketNotifyAction.onConnectionStateChanged,\n        payload: {\n          BotWebSocketState: state,\n        },\n      },\n    ]);\n  }\n  onClose() {\n    if (this.sendMsgTimer) {\n      clearTimeout(this.sendMsgTimer);\n    }\n    console.log('onClose', this.autoConnect);\n    this.notifyState(BotWebSocketState.closed);\n    this.reconnect(this.getAutoConnect());\n  }\n\n  reconnect(autoConnect: boolean) {\n    if (autoConnect) {\n      setTimeout(() => {\n        if (\n          this.state === BotWebSocketState.closed ||\n          this.state === BotWebSocketState.connect_error\n        ) {\n          if (reconnect_cnt > 20) {\n            reconnect_cnt = 0;\n          }\n          if (reconnect_cnt < 5) {\n            reconnect_cnt += 1;\n          } else {\n            reconnect_cnt += 2;\n          }\n          console.log(\"[reconnect_cnt]\",reconnect_cnt)\n          this.connect();\n        }\n      }, 1000 * (reconnect_cnt + 1));\n    }\n  }\n\n  static getInstance(chatId: string): BotWebSocket {\n    if (!clients[chatId]) {\n      clients[chatId] = new BotWebSocket(chatId);\n    }\n    return clients[chatId];\n  }\n\n  waitForMsgCallback(\n    seq_num: number,\n    timeout: number = 5000,\n    startTime: number = 0\n  ) {\n    return new Promise<Pdu>((resolve, reject) => {\n      setTimeout(() => {\n        if (this.__rev_msg_map[seq_num]) {\n          const res = this.__rev_msg_map[seq_num];\n          delete this.__rev_msg_map[seq_num];\n          resolve(res);\n        } else {\n          if (startTime >= timeout) {\n            reject('TIMEOUT');\n          } else {\n            startTime += 200;\n            if (this.isConnect()) {\n              this.waitForMsgCallback(seq_num, timeout, startTime)\n                .then(resolve)\n                .catch(reject);\n            }\n          }\n        }\n      }, 200);\n    });\n  }\n\n  send(data:Buffer|Uint8Array){\n    this.client.send(data);\n  }\n\n  sendPduWithCallback(\n    pdu:Pdu,\n    timeout: number = 10000\n  ) {\n    seq_num += 1;\n    if(seq_num > 100000){\n      seq_num = 1\n    }\n    pdu.updateSeqNo(seq_num)\n    return new Promise<Pdu>((resolve, reject) => {\n      if (this.isConnect()) {\n        if(DEBUG){\n          console.log(\"[sendPduWithCallback]\",pdu.getSeqNum(),pdu.getCommandId(),getActionCommandsName(pdu.getCommandId()))\n        }\n        this.__sending_msg_map[pdu.getSeqNum()] = true;\n        this.send(pdu.getPbData())\n        this.waitForMsgCallback(pdu.getSeqNum(), timeout)\n          .then(resolve)\n          .catch(reject);\n      } else {\n        this.reconnect(this.autoConnect);\n        reject('BotWebSocketState is not connected');\n      }\n    });\n  }\n\n  isLogged() {\n    return [BotWebSocketState.logged].includes(this.state);\n  }\n  isConnect() {\n    return [BotWebSocketState.connected, BotWebSocketState.logged].includes(\n      this.state\n    );\n  }\n  async destroy(){\n    this.client.close()\n    this.setAutoConnect(false)\n    await this.waitForMsgServerState(BotWebSocketState.closed)\n  }\n}\n","import {PbChatGptModelConfig_Type} from \"../lib/ptp/protobuf/PTPCommon/types\";\n\nexport const UserIdFirstBot = \"1000\";\nexport const UserIdCnPrompt = \"1010\";\nexport const UserIdEnPrompt = \"1011\";\nexport const UserIdChatGpt = \"1012\";\n\nexport const DEFAULT_AVATARS:Record<string, string> = {\n  [UserIdFirstBot]:'icon-square-dev-512x512.png',\n  [UserIdChatGpt]:'avatar/ChatGPT_logo.png'\n}\n\nexport const NameFirstBot = \"Wai\";\nexport const DEFAULT_CREATE_USER_BIO = '我是一个AI机器人'\nexport const DEFAULT_PROMPT = '你现在是一个优秀的助手，请用中文回答我的问题。'\nexport const BOT_FOLDER_TITLE = '机器人'\nexport const BOT_FOLDER_ID = 1\n\n\nconst ENABLE_GPT4 = true;\n\nexport const ALL_CHAT_GPT_MODELS = [\n  {\n    name: \"gpt-4\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-0314\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-32k\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-32k-0314\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-3.5-turbo\",\n    available: true,\n  },\n  {\n    name: \"gpt-3.5-turbo-0301\",\n    available: true,\n  },\n];\n\nexport const ChatModelConfig:PbChatGptModelConfig_Type = {\n  model: \"gpt-3.5-turbo\",\n  temperature: 1,\n  max_tokens: 2000,\n  presence_penalty: 0,\n}\n\nexport const DEFAULT_BOT_COMMANDS = [\n  {\n    \"botId\": UserIdFirstBot,\n    \"command\": \"start\",\n    \"description\": \"开始对话\"\n  },\n  {\n    \"botId\": UserIdFirstBot,\n    \"command\": \"setting\",\n    \"description\": \"设置面板\"\n  },\n]\n\nexport const DEFAULT_CHATGPT_AI_COMMANDS = [\n  {\n    \"botId\": UserIdChatGpt,\n    \"command\": \"reset\",\n    \"description\": \"重置ai记忆,提问只携带 初始化Prompt\"\n  },\n  {\n    \"botId\": UserIdChatGpt,\n    \"command\": \"aiModel\",\n    \"description\": \"设置AI模型\"\n  },\n  {\n    \"botId\": UserIdChatGpt,\n    \"command\": \"apiKey\",\n    \"description\": \"设置apiKey\"\n  },\n  {\n    \"botId\": UserIdChatGpt,\n    \"command\": \"initPrompt\",\n    \"description\": \"初始化 上下文 Prompt\"\n  },\n  {\n    \"botId\": UserIdChatGpt,\n    \"command\": \"maxHistoryLength\",\n    \"description\": \"每次提问携带历史消息数\"\n  },\n  {\n    \"botId\": UserIdChatGpt,\n    \"command\": \"usage\",\n    \"description\": \"账户余额\"\n  },\n]\n\nexport const DEFAULT_START_TIPS =    `你可以通过发送以下命令来控制我：\n\n/setting - 设置面板\n\nPrompts\n  点击 /setting >> 创建 prompts 大全\n`\n\nexport const CurrentUserInfo = {\n  \"id\": \"1\",\n  \"accessHash\": \"\",\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"canBeInvitedToGroup\": false,\n  \"hasVideoAvatar\": false,\n  \"isMin\": false,\n  \"isPremium\": false,\n  \"noStatus\": true,\n  \"fullInfo\": {\n    \"isBlocked\": false,\n    \"noVoiceMessages\": false,\n    \"bio\": \"\",\n  },\n  \"usernames\": [\n    {\n      \"username\": \"my-self\",\n      \"isActive\": true,\n      \"isEditable\": true\n    }\n  ],\n  \"type\": \"userTypeBot\",\n  \"phoneNumber\": \"\",\n  \"avatarHash\": \"\",\n  \"isSelf\": true\n}\n\nexport let LoadAllChats = {\n  \"users\": [\n    {...CurrentUserInfo},\n    {\n      \"id\": UserIdFirstBot,\n      \"fullInfo\": {\n        \"isBlocked\": false,\n        \"noVoiceMessages\": false,\n        \"bio\": DEFAULT_CREATE_USER_BIO,\n        \"botInfo\": {\n          \"botId\": UserIdFirstBot,\n          \"description\": DEFAULT_CREATE_USER_BIO,\n          aiType:\"ChatGpt\",\n          \"menuButton\": {\n            \"type\": \"commands\"\n          },\n          \"commands\": DEFAULT_BOT_COMMANDS\n        }\n      },\n      bot:{\n        chatGptConfig:{\n          modelConfig:ChatModelConfig,\n          api_key:\"\",\n          init_system_content:DEFAULT_PROMPT,\n          max_history_length:4,\n        },\n        enableAi:true,\n      },\n      \"accessHash\": \"\",\n      \"firstName\": NameFirstBot,\n      \"lastName\": \"\",\n      \"canBeInvitedToGroup\": false,\n      \"hasVideoAvatar\": false,\n      \"isMin\": false,\n      \"isPremium\": true,\n      \"noStatus\": true,\n      \"usernames\": [\n        {\n          \"username\": \"first_bot\",\n          \"isActive\": true,\n          \"isEditable\": true\n        }\n      ],\n      \"type\": \"userTypeBot\",\n      \"phoneNumber\": \"\",\n      \"avatarHash\": \"\",\n      \"isSelf\": false\n    }\n  ],\n  \"chats\": [\n    {\n      \"id\": UserIdFirstBot,\n      \"title\":  NameFirstBot,\n      \"type\": \"chatTypePrivate\",\n      \"isMuted\": false,\n      \"isMin\": false,\n      \"hasPrivateLink\": false,\n      \"isSignaturesShown\": false,\n      \"isVerified\": true,\n      \"isJoinToSend\": true,\n      \"isJoinRequest\": true,\n      \"isForum\": false,\n      \"isListed\": true,\n      \"settings\": {\n        \"isAutoArchived\": false,\n        \"canReportSpam\": false,\n        \"canAddContact\": false,\n        \"canBlockContact\": false\n      },\n      \"accessHash\": \"\"\n    }\n  ],\n  \"chatFolders\": [\n    {\n      \"id\": BOT_FOLDER_ID,\n      \"title\": BOT_FOLDER_TITLE,\n      \"includedChatIds\": [\n        UserIdFirstBot\n      ],\n      \"channels\": false,\n      \"pinnedChatIds\": [],\n      \"excludedChatIds\": []\n    }\n  ],\n  folderIds:[\n    0,\n    BOT_FOLDER_ID\n  ],\n  \"draftsById\": {},\n  \"replyingToById\": {},\n  \"orderedPinnedIds\": [],\n}\nexport const TEXT_AI_THINKING = \"...\"\nexport const BYPASS_API = [\n  \"editChatFolder\",\"sortChatFolders\",\"deleteChatFolder\",\n  \"requestWebView\",\"uploadContactProfilePhoto\",\n  \"sendMessage\",\"editMessage\",\"deleteMessages\",\"downloadMedia\",\"destroy\",\"fetchMessages\",\"answerCallbackButton\",\n  \"uploadProfilePhoto\",\"fetchChats\",\"sendWithCallback\",\"msgClientLogin\",\"updateProfile\",\"updateUsername\"\n]\nexport const MaxSyncUserToRemote = 5;\nexport const MaxSyncMessageToRemote = 10;\nexport const BOTTOM_INPUT_LEFT_MARGIN = 'width:4px;'\n\nexport const SWAGGER_DOC = {\n  schema: {\n    info: {\n      title: 'Worker Wai Chat',\n      version: '1.0',\n    },\n    components: {\n      securitySchemes: {\n        bearerAuth: {\n          type: 'http',\n          scheme: 'bearer',\n        },\n      },\n    },\n    security: [\n      {\n        bearerAuth: [],\n      },\n    ],\n  },\n};\nexport const STOP_HANDLE_MESSAGE = true\n","/**\n * ECIES encrypt/decrypt with Ethereum keys\n * Modified from https://github.com/vhpoet/simple-ecies/blob/master/index.js\n */\n// @ts-ignore\nimport { ec as EC } from 'elliptic';\n// import Crypto from 'crypto';\nconst Crypto = require('crypto-browserify')\n\nconst { Buffer } = require('buffer');\n\nconst ec = new EC('secp256k1');\n\ntype Opts = {\n  iv?: Buffer;\n  ephemPrivKey?: Buffer;\n};\n\n/**\n * AES-256 CBC encrypt\n * @param {Buffer} iv\n * @param {Buffer} key\n * @param {Buffer} plaintext\n * @returns {Buffer} ciphertext\n */\nconst AES256CbcEncrypt = (\n  iv: Buffer,\n  key: Buffer,\n  plaintext: Buffer\n): Buffer => {\n  const cipher = Crypto.createCipheriv('aes-256-cbc', key, iv);\n  const firstChunk = cipher.update(plaintext);\n  const secondChunk = cipher.final();\n  return Buffer.concat([firstChunk, secondChunk]);\n};\n\n/**\n * AES-256 CBC decrypt\n * @param {Buffer} iv\n * @param {Buffer} key\n * @param {Buffer} ciphertext\n * @returns {Buffer} plaintext\n */\nconst AES256CbcDecrypt = (\n  iv: Buffer,\n  key: Buffer,\n  ciphertext: Buffer\n): Buffer => {\n  const cipher = Crypto.createDecipheriv('aes-256-cbc', key, iv);\n  const firstChunk = cipher.update(ciphertext);\n  const secondChunk = cipher.final();\n  return Buffer.concat([firstChunk, secondChunk]);\n};\n\n/**\n * Compares if two buffers are equal\n * @param {Buffer} b1\n * @param {Buffer} b2\n * @returns {boolean} true if the buffers are equal\n */\nconst BufferEqual = (b1: Buffer, b2: Buffer): boolean => {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n  let res = 0;\n  for (let i = 0; i < b1.length; i++) {\n    res |= b1[i] ^ b2[i];\n  }\n  return res === 0;\n};\n\n/**\n * ECIES encrypt\n * @param {Buffer} pubKeyTo Ethereum pub key, 64 bytes\n * @param {Buffer} plainBuffer Plaintext to be encrypted\n * @param opts\n * optional iv (16 bytes) and ephem key (32 bytes)\n * @returns {Buffer} Encrypted message, serialized, 113+ bytes\n */\nexport const encrypt = (\n  pubKeyTo: Buffer,\n  plainBuffer: Buffer,\n  opts: Opts = {}\n): Buffer => {\n  if (64 !== pubKeyTo.length) {\n    throw new Error('pubKeyTo len must 64');\n  }\n  const prvKey = opts.ephemPrivKey! || Crypto.randomBytes(32);\n  const ephemPrivKey = ec.keyFromPrivate(prvKey);\n  const ephemPubKey = ephemPrivKey.getPublic();\n  const ephemPubKeyEncoded = Buffer.from(ephemPubKey.encode('array', false));\n\n  // Every EC public key begins with the 0x04 prefix before giving\n  // the location of the two point on the curve\n  const pubKey = Buffer.concat([Buffer.from([0x04]), pubKeyTo]);\n  const pubKey1 = ec.keyFromPublic(pubKey);\n  const px = ephemPrivKey.derive(pubKey1.getPublic());\n\n  const hash = Crypto.createHash('sha512')\n    .update(px.toArrayLike(Buffer))\n    .digest();\n  const iv = opts.iv || Crypto.randomBytes(16);\n  const encryptionKey = hash.slice(0, 32);\n  const macKey = hash.slice(32);\n\n  const ciphertext = AES256CbcEncrypt(iv, encryptionKey, plainBuffer);\n\n  const dataToMac = Buffer.concat([iv, ephemPubKeyEncoded, ciphertext]);\n\n  const mac = Crypto.createHmac('sha256', macKey).update(dataToMac).digest();\n\n  return Buffer.concat([\n    iv, // 16 bytes\n    ephemPubKeyEncoded, // 65 bytes\n    mac, // 32 bytes\n    ciphertext,\n  ]);\n};\n\n/**\n * ECIES decrypt\n * @param {Buffer} privKey Ethereum private key, 32 bytes\n * @param {Buffer} encrypted Encrypted message, serialized, 113+ bytes\n * @param opts\n * @returns {Buffer} plaintext\n */\nexport const decrypt = (\n  privKey: Buffer,\n  encrypted: Buffer,\n  opts: Opts = {}\n) => {\n  opts = opts || {};\n  let ephemPubKeyEncoded;\n  let ephemPubKey;\n  let offset = 0;\n  if (opts.ephemPrivKey) {\n    offset = 65;\n    const ephemPrivKey = ec.keyFromPrivate(opts.ephemPrivKey);\n    ephemPubKey = ephemPrivKey.getPublic();\n    ephemPubKeyEncoded = Buffer.from(ephemPubKey.encode('array', false));\n  } else {\n    ephemPubKeyEncoded = encrypted.slice(16, 81);\n    ephemPubKey = ec.keyFromPublic(ephemPubKeyEncoded).getPublic();\n  }\n\n  const iv = encrypted.slice(0, 16);\n  const mac = encrypted.slice(81 - offset, 113 - offset);\n  const ciphertext = encrypted.slice(113 - offset);\n  const px = ec.keyFromPrivate(privKey).derive(ephemPubKey);\n  const hash = Crypto.createHash('sha512')\n    .update(px.toArrayLike(Buffer))\n    .digest();\n  const encryptionKey = hash.slice(0, 32);\n  const macKey = hash.slice(32);\n  const dataToMac = Buffer.concat([iv, ephemPubKeyEncoded, ciphertext]);\n  const computedMac = Crypto.createHmac('sha256', macKey)\n    .update(dataToMac)\n    .digest();\n  // verify mac\n  if (!BufferEqual(computedMac, mac)) {\n    throw new Error('MAC mismatch');\n  }\n  return AES256CbcDecrypt(iv, encryptionKey, ciphertext);\n};\n","import { hdkey as HDKey } from 'ethereumjs-wallet';\n\nimport Mnemonic, {MnemonicLangEnum} from './Mnemonic';\nimport {EncryptType} from \"../protobuf/PTPCommon/types\";\n\nexport const ETH_HD_PATH = \"m/44'/60'/0'\";\nexport const PTP_HD_PATH = \"m/44'/60'/1'\";\nexport const PTP_GROUP_HD_PATH = \"m/44'/60'/1'\";\n\n\nexport default class Wallet {\n  private __masterKey: any | undefined;\n\n  constructor(mnemonic: Mnemonic, password?: string | undefined) {\n    const seed = mnemonic.toSeedBuffer(password);\n    this.__masterKey = HDKey.fromMasterSeed(seed);\n    Object.defineProperty(this, '__masterKey', {\n      value: HDKey.fromMasterSeed(seed),\n      writable: false,\n    });\n  }\n\n  getMashKey() {\n    return this.__masterKey!;\n  }\n\n  static fromEntropy(\n    entropy: string,\n    password: string | undefined,\n    lang: MnemonicLangEnum | undefined\n  ) {\n    const mnemonic = Mnemonic.fromEntropy(entropy, lang);\n    return new Wallet(mnemonic, password);\n  }\n\n  getChild(\n    root: string,\n    childIndex = 0,\n    changeIndex: number = 0,\n    hex: boolean = false\n  ) {\n    const path = `${root}/${changeIndex}/${childIndex}`;\n    const childKey = this.getMashKey().derivePath(path);\n    const address = childKey.getWallet().getAddressString();\n    const prvKey = childKey._hdkey.privateKey;\n    const pubKey = childKey._hdkey.publicKey;\n    const pubKey_ = childKey.getWallet().getPublicKey();\n    if (hex) {\n      return {\n        path,\n        address,\n        prvKey: Wallet.bufferToHex(prvKey),\n        pubKey: Wallet.bufferToHex(pubKey),\n        pubKey_: Wallet.bufferToHex(pubKey_),\n      };\n    } else {\n      return {\n        path,\n        address,\n        prvKey,\n        pubKey,\n        pubKey_,\n      };\n    }\n  }\n\n  static bufferToHex(buffer: Buffer) {\n    return '0x' + buffer.toString('hex');\n  }\n\n  getEthWallet(childIndex: number, hex?: boolean) {\n    return this.getChild(ETH_HD_PATH, childIndex, 0, !!hex);\n  }\n\n  getPTPWallet(childIndex: number, hex?: boolean) {\n    return this.getChild(PTP_HD_PATH, childIndex, EncryptType.EncryptType_Wallet, !!hex);\n  }\n\n  getPTPEncryptWallet(childIndex: number, type:EncryptType) {\n    return this.getChild(PTP_HD_PATH, childIndex, type, false);\n  }\n\n  getGroupWallet(childIndex: number, hex?: boolean) {\n    return this.getChild(PTP_GROUP_HD_PATH, childIndex, EncryptType.EncryptType_Group, !!hex);\n  }\n}\n","import assert from 'assert';\nimport BN from 'bn.js';\n\nconst { Buffer } = require('buffer');\nconst {\n  keccak224,\n  keccak384,\n  keccak256,\n  keccak512,\n} = require('ethereum-cryptography/keccak');\nconst {\n  ecdsaRecover,\n  publicKeyConvert,\n  ecdsaSign,\n} = require('ethereum-cryptography/secp256k1');\n\nexport type BNLike = BN | PrefixedHexString | number | Buffer;\nexport type PrefixedHexString = string;\n\nexport interface ECDSASignature {\n  v: number;\n  r: Buffer;\n  s: Buffer;\n}\n\nexport interface ECDSASignatureBuffer {\n  v: Buffer;\n  r: Buffer;\n  s: Buffer;\n}\n\nconst ETH_Signed_Message = '\\u0019Ethereum Signed Message:\\n';\nconst PTP_Signed_Message = '\\u0019PTP Signed Message:\\n';\nconst PTP_GROUP_Signed_Message = '\\u0019PTP GROUP Signed Message:\\n';\n\n\nexport enum SignMsgType {\n  SignMsgType_eth = 1000,\n  SignMsgType_ptp = 1001,\n  SignMsgType_ptp_group = 1002,\n}\n\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexport const assertIsBuffer = function (input: Buffer): void {\n  if (!Buffer.isBuffer(input)) {\n    const msg = `This method only supports Buffer but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexport const bufferToHex = function (buf: Buffer): string {\n  return '0x' + buf.toString('hex');\n};\n\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nexport const keccak = function (a: Buffer, bits: number = 256): Buffer {\n  assertIsBuffer(a);\n  switch (bits) {\n    case 224: {\n      return keccak224(a);\n    }\n    case 256: {\n      return keccak256(a);\n    }\n    case 384: {\n      return keccak384(a);\n    }\n    case 512: {\n      return keccak512(a);\n    }\n    default: {\n      throw new Error(`Invald algorithm: keccak${bits}`);\n    }\n  }\n};\n\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexport const bufferToInt = function (buf: Buffer): number {\n  return new BN(buf).toNumber();\n};\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexport const fromSigned = function (num: Buffer): BN {\n  return new BN(num).fromTwos(256);\n};\n\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexport const toUnsigned = function (num: BN): Buffer {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nexport const intToHex = function (i: number) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`);\n  }\n  return `0x${i.toString(16)}`;\n};\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexport const addHexPrefix = function (str: string): string {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str : '0x' + str;\n};\n\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nexport function isHexPrefixed(str: string): boolean {\n  if (typeof str !== 'string') {\n    throw new Error(\n      `[isHexPrefixed] input must be type 'string', received type ${typeof str}`\n    );\n  }\n\n  return str[0] === '0' && str[1] === 'x';\n}\n\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nexport const stripHexPrefix = (str: string): string => {\n  if (typeof str !== 'string')\n    throw new Error(\n      `[stripHexPrefix] input must be type 'string', received ${typeof str}`\n    );\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n};\n\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nexport function padToEven(value: string): string {\n  let a = value;\n\n  if (typeof a !== 'string') {\n    throw new Error(\n      `[padToEven] value must be type 'string', received ${typeof a}`\n    );\n  }\n\n  if (a.length % 2) a = `0${a}`;\n\n  return a;\n}\n//\n// function padWithZeroes(number: string, length: number) {\n//   let myString = `${number}`;\n//   while (myString.length < length) {\n//     myString = `0${myString}`;\n//   }\n//   return myString;\n// }\n//\n// function concatSig(v: Buffer, r: Buffer, s: Buffer) {\n//   const rSig = fromSigned(r);\n//   const sSig = fromSigned(s);\n//   const vSig = bufferToInt(v);\n//   const rStr = padWithZeroes(toUnsigned(rSig).toString('hex'), 64);\n//   const sStr = padWithZeroes(toUnsigned(sSig).toString('hex'), 64);\n//   const vStr = stripHexPrefix(intToHex(vSig));\n//   return addHexPrefix(rStr.concat(sStr, vStr));\n// }\n\nfunction getPublicKeyFor(msgData: Buffer, signature: Buffer) {\n  const msgHash = keccak(msgData);\n  // console.debug(\"getPublicKeyFor\", {msgHash})\n  // console.debug(\"msg_hash_hex\", bufferToHex(msgHash))\n  const sigParams = fromRpcSig(signature);\n  return ecrecover(msgHash, sigParams.v, sigParams.r, sigParams.s);\n}\n\nfunction getPublicKey65For(msgData: Buffer, signature: Buffer) {\n  const msgHash = keccak(msgData);\n  // console.debug(\"getPublicKeyFor\", {msgHash})\n  // console.debug(\"msg_hash_hex\", bufferToHex(msgHash))\n  const sigParams = fromRpcSig(signature);\n  return ecrecoverPubKey65(msgHash, sigParams.v, sigParams.r, sigParams.s);\n}\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthLeft = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg);\n  return setLength(msg, length, false);\n};\n\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthRight = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg);\n  return setLength(msg, length, true);\n};\n\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexport const zeros = function (bytes: number): Buffer {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg: Buffer, length: number, right: boolean) {\n  const buf = zeros(length);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (\n  msgHash: Buffer,\n  v: BNLike,\n  r: Buffer,\n  s: Buffer,\n  chainId?: BNLike\n): Buffer {\n  const signature = Buffer.concat(\n    [setLengthLeft(r, 32), setLengthLeft(s, 32)],\n    64\n  );\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const senderPubKey = ecdsaRecover(signature, recovery.toNumber(), msgHash);\n  return Buffer.from(publicKeyConvert(senderPubKey, false).slice(1));\n};\n\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecoverPubKey65 = function (\n  msgHash: Buffer,\n  v: BNLike,\n  r: Buffer,\n  s: Buffer,\n  chainId?: BNLike\n): Uint8Array {\n  const signature = Buffer.concat(\n    [setLengthLeft(r, 32), setLengthLeft(s, 32)],\n    64\n  );\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const senderPubKey = ecdsaRecover(signature, recovery.toNumber(), msgHash);\n  return publicKeyConvert(senderPubKey, false);\n};\n\n/**\n * Type output options\n */\nexport enum TypeOutput {\n  Number,\n  BN,\n  Buffer,\n  PrefixedHexString,\n}\n\nfunction isValidSigRecovery(recovery: number | BN): boolean {\n  const rec = new BN(recovery);\n  return rec.eqn(0) || rec.eqn(1);\n}\n\n/*\n * A type that represents an object that has a `toArray()` method.\n */\nexport interface TransformableToArray {\n  toArray(): Uint8Array;\n\n  toBuffer?(): Buffer;\n}\n\n/*\n * A type that represents an object that has a `toBuffer()` method.\n */\nexport interface TransformableToBuffer {\n  toBuffer(): Buffer;\n\n  toArray?(): Uint8Array;\n}\n\nexport type ToBufferInputTypes =\n  | PrefixedHexString\n  | number\n  | BN\n  | Buffer\n  | Uint8Array\n  | number[]\n  | TransformableToArray\n  | TransformableToBuffer\n  | null\n  | undefined;\n\nexport type TypeOutputReturnType = {\n  [TypeOutput.Number]: number;\n  [TypeOutput.BN]: BN;\n  [TypeOutput.Buffer]: Buffer;\n  [TypeOutput.PrefixedHexString]: PrefixedHexString;\n};\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nexport const intToBuffer = function (i: number) {\n  const hex = intToHex(i);\n  return Buffer.from(padToEven(hex.slice(2)), 'hex');\n};\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nexport const toBuffer = function (v: ToBufferInputTypes): Buffer {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v as Uint8Array);\n  }\n\n  if (typeof v === 'string') {\n    if (!isHexString(v)) {\n      throw new Error(\n        `Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`\n      );\n    }\n    return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n  }\n\n  if (typeof v === 'number') {\n    return intToBuffer(v);\n  }\n\n  if (BN.isBN(v)) {\n    if (v.isNeg()) {\n      throw new Error(`Cannot convert negative BN to buffer. Given: ${v}`);\n    }\n    return v.toArrayLike(Buffer);\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n\n  throw new Error('invalid type');\n};\n\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */\nexport function isHexString(value: string, length?: number): boolean {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))\n    return false;\n\n  if (length && value.length !== 2 + 2 * length) return false;\n\n  return true;\n}\n\n/**\n * Convert an input to a specified type.\n * Input of null/undefined returns null/undefined regardless of the output type.\n * @param input value to convert\n * @param outputType type to output\n */\nexport function toType<T extends TypeOutput>(input: null, outputType: T): null;\n// eslint-disable-next-line no-redeclare\nexport function toType<T extends TypeOutput>(\n  input: undefined,\n  outputType: T\n): undefined;\n// eslint-disable-next-line no-redeclare\nexport function toType<T extends TypeOutput>(\n  input: ToBufferInputTypes,\n  outputType: T\n): TypeOutputReturnType[T];\n// eslint-disable-next-line no-redeclare\nexport function toType<T extends TypeOutput>(\n  input: ToBufferInputTypes,\n  outputType: T\n): TypeOutputReturnType[T] | undefined | null {\n  if (input === null) {\n    return null;\n  }\n  if (input === undefined) {\n    return undefined;\n  }\n\n  if (typeof input === 'string' && !isHexString(input)) {\n    throw new Error(\n      `A string must be provided with a 0x-prefix, given: ${input}`\n    );\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error(\n      'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'\n    );\n  }\n\n  const output = toBuffer(input);\n\n  if (outputType === TypeOutput.Buffer) {\n    return output as TypeOutputReturnType[T];\n  } else if (outputType === TypeOutput.BN) {\n    return new BN(output) as TypeOutputReturnType[T];\n  } else if (outputType === TypeOutput.Number) {\n    const bn = new BN(output);\n    const max = new BN(Number.MAX_SAFE_INTEGER.toString());\n    if (bn.gt(max)) {\n      throw new Error(\n        'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)'\n      );\n    }\n    return bn.toNumber() as TypeOutputReturnType[T];\n  } else {\n    // outputType === TypeOutput.PrefixedHexString\n    return `0x${output.toString('hex')}` as TypeOutputReturnType[T];\n  }\n}\n\nfunction calculateSigRecovery(v: BNLike, chainId?: BNLike): BN {\n  const vBN = toType(v, TypeOutput.BN);\n\n  if (vBN.eqn(0) || vBN.eqn(1)) return toType(v, TypeOutput.BN);\n\n  if (!chainId) {\n    return vBN.subn(27);\n  }\n  const chainIdBN = toType(chainId, TypeOutput.BN);\n  return vBN.sub(chainIdBN.muln(2).addn(35));\n}\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nexport const fromRpcSig = function (buf: Buffer): ECDSASignature {\n  let r: Buffer;\n  let s: Buffer;\n  let v: number;\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = bufferToInt(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = bufferToInt(buf.slice(32, 33)) >> 7;\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  }\n\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v,\n    r,\n    s,\n  };\n};\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexport const pubToAddress = function (\n  pubKey: Buffer,\n  sanitize: boolean = false\n): Buffer {\n  assertIsBuffer(pubKey);\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = Buffer.from(publicKeyConvert(pubKey, false).slice(1));\n  }\n  assert(pubKey.length === 64);\n  // Only take the lower 160bits of the hash\n  const hash = keccak(pubKey);\n  // console.debug('pubToAddress keccak(pubKey)', hash.length, hash);\n  return hash.slice(-20);\n};\nexport const publicToAddress = pubToAddress;\n\nexport function ecsign(\n  msgHash: Buffer,\n  privateKey: Buffer,\n  chainId?: any\n): any {\n  const { signature, recid } = ecdsaSign(msgHash, privateKey, {\n    recovered: true,\n  });\n  const r = Buffer.from(signature.slice(0, 32));\n  const s = Buffer.from(signature.slice(32, 64));\n\n  if (!chainId || typeof chainId === 'number') {\n    // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n    if (chainId && !Number.isSafeInteger(chainId)) {\n      throw new Error(\n        'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'\n      );\n    }\n    const v = chainId ? recid + (chainId * 2 + 35) : recid + 27;\n    return { r, s, v };\n  }\n  //@todo\n  // const chainIdBN = toType(chainId as BNLike, TypeOutput.BN)\n  // const v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer)\n  // return { r, s, v }\n}\n\nexport default class EcdsaHelper {\n  //@ts-ignore\n  private pubKey: Buffer | undefined;\n  private prvKey: Buffer | undefined;\n\n  constructor({ pubKey, prvKey }: { pubKey: Buffer; prvKey: Buffer }) {\n    Object.defineProperty(this, 'pubKey', {\n      value: pubKey,\n      writable: false,\n    });\n    Object.defineProperty(this, 'prvKey', {\n      value: prvKey,\n      writable: false,\n    });\n  }\n  static getSignMsgData(message: string,signMsgType:SignMsgType = SignMsgType.SignMsgType_ptp){\n    const data = Buffer.from(message, 'utf-8');\n    let prefix;\n    if(signMsgType == SignMsgType.SignMsgType_eth){\n      prefix = Buffer.from(`${ETH_Signed_Message}${data.length}`, 'utf-8');\n    }else if (signMsgType == SignMsgType.SignMsgType_ptp_group){\n      prefix = Buffer.from(`${PTP_GROUP_Signed_Message}${data.length}`, 'utf-8');\n    }else{\n      prefix = Buffer.from(`${PTP_Signed_Message}${data.length}`, 'utf-8');\n    }\n    //console.log(\"getSignMsgData\",Buffer.concat([prefix, data]).toString())\n    return Buffer.concat([prefix, data]);\n  }\n  sign(message: string) {\n    const msgHash = keccak(EcdsaHelper.getSignMsgData(message));\n    // console.debug(\"sign\", {msgHash})\n    const sig = ecsign(msgHash, this.prvKey!);\n    // const serialized = concatSig(sig.v, sig.r, sig.s);\n    return Buffer.concat([sig.r, sig.s, intToBuffer(sig.v)]);\n  }\n\n  static recoverAddress({ sig, message }: { sig: Buffer; message: string }) {\n    const publicKey = getPublicKeyFor(EcdsaHelper.getSignMsgData(message), sig);\n    // console.debug('recoverAddress publicKey', publicKey.length, publicKey);\n    // console.debug('recoverAddress publicKey hex', bufferToHex(publicKey));\n    const sender = publicToAddress(publicKey);\n    const senderHex = bufferToHex(sender);\n    // console.debug('recoverAddress', sender.length, sender, senderHex);\n    return senderHex;\n  }\n\n  static recoverAddressAndPubKey({\n    sig,\n    message,\n  }: {\n    sig: Buffer;\n    message: string;\n  }) {\n    const publicKey = getPublicKey65For(EcdsaHelper.getSignMsgData(message), sig);\n    // console.debug('recoverAddress publicKey', publicKey.length, publicKey);\n    // console.debug('recoverAddress publicKey hex', bufferToHex(publicKey));\n    const sender = publicToAddress(Buffer.from(publicKey.slice(1)));\n    const senderHex = bufferToHex(sender);\n    // console.debug('recoverAddress', sender.length, sender, senderHex);\n    return { address: senderHex, pubKey: Buffer.from(publicKey) };\n  }\n}\n","const { Buffer } = require('buffer');\nconst crypto = require('crypto-browserify');\n\nconst ALGORITHM = 'aes-256-gcm';\n\nexport default class Aes256Gcm {\n  /**\n   * Encrypts text with AES 256 GCM.\n   * @param {Buffer} text - Cleartext to encode.\n   * @param {Buffer|null} iv - iv\n   * @param {Buffer|null} aad - needAad\n   * @param {Buffer} secret - Shared secret key, must be 32 bytes.\n   * @returns {object}\n   */\n  static encrypt(\n    text: Buffer,\n    secret: Buffer,\n    iv?: Buffer | null,\n    aad?: Buffer | null\n  ) {\n    const cipher = crypto.createCipheriv(ALGORITHM, secret, iv);\n    if (aad) {\n      cipher.setAAD(aad);\n    }\n\n    let ciphertext = cipher.update(text, 'utf8', 'binary');\n    ciphertext += cipher.final('binary');\n    const tag = cipher.getAuthTag();\n    return Buffer.concat([Buffer.from(tag), Buffer.from(ciphertext, 'binary')]);\n  }\n\n  /**\n   * Decrypts AES 256 CGM encrypted text.\n   * @param {Buffer} cipherData - Base64-encoded ciphertext.\n   * @param {Buffer} secret - Shared secret key, must be 32 bytes.\n   * @param {Buffer} iv - The base64-encoded initialization vector.\n   * @param {Buffer|null} aad - aad.\n   * @returns {Buffer}\n   */\n  static decrypt(\n    cipherData: Buffer,\n    secret: Buffer,\n    iv: Buffer,\n    aad?: Buffer | null\n  ) {\n    const tag = Buffer.from(cipherData.subarray(0, 16));\n    const decipher = crypto.createDecipheriv(ALGORITHM, secret, iv);\n    let cipherData1: Buffer;\n    if (aad) {\n      decipher.setAAD(aad);\n    }\n    cipherData1 = Buffer.from(cipherData.subarray(16, cipherData.length));\n\n    decipher.setAuthTag(tag);\n    let plainData = decipher.update(cipherData1.toString('hex'), 'hex', 'hex');\n    plainData += decipher.final('hex');\n    return Buffer.from(plainData, 'hex');\n  }\n}\n","import {ecdh} from \"ethereum-cryptography/secp256k1\";\nimport * as EthEcies from '../../lib/ptp/wallet/EthEcies';\nimport Mnemonic from \"../../lib/ptp/wallet/Mnemonic\";\nimport Wallet from \"../../lib/ptp/wallet/Wallet\";\nimport EcdsaHelper from \"../../lib/ptp/wallet/EcdsaHelper\";\nimport Aes256Gcm from \"../../lib/ptp/wallet/Aes256Gcm\";\nimport LocalStorage from \"./db/LocalStorage\";\nimport CloudFlareKv from \"./db/CloudFlareKv\";\nimport {Pdu} from \"../../lib/ptp/protobuf/BaseMsg\";\nimport {AuthLoginReq_Type} from \"../../lib/ptp/protobuf/PTPAuth/types\";\nimport {hashSha256} from \"./utils/helpers\";\nimport LocalDatabase from \"./db/LocalDatabase\";\nimport {randomize} from \"worktop/utils\";\nimport {EncryptType} from \"../../lib/ptp/protobuf/PTPCommon/types\";\n\nconst KEYS_PREFIX = \"a-ks\";\nconst SESSIONS_PREFIX = \"a-ss\";\n\nconst LOCAL_key =  \"86680581fcdc7b5aba47f2218884d50706b108532a624f0cbe939d9dea1bf997\"\nconst LOCAL_iv =  \"815b4192992cf4a36796ead23b8b5fd4\"\nconst LOCAL_aad =  \"60efbef0ab699df0011825d013d92148\"\n\nexport type IMsgConn = {\n  send?: (buf:Buffer|Uint8Array) => void,\n  sendPduWithCallback?:  (pdu:Pdu,timeout: number) => Promise<Pdu>\n}\n\nlet currentAccountId: number;\nlet accountIds: number[] = [];\nlet accounts: Record<number, Account> = {};\nlet serverKvStore: CloudFlareKv  | undefined = undefined\nlet clientKvStore:LocalStorage | LocalDatabase | undefined = undefined\n\nexport default class Account {\n  private accountId: number;\n  private uid?: string;\n  private userInfo?: object;\n  private shareKey?: Buffer;\n  private iv?: Buffer;\n  private aad?: Buffer;\n  private entropy?:string;\n  private session?: string;\n  constructor(accountId: number) {\n    this.accountId = accountId;\n    this.uid = \"\";\n  }\n  static getServerKv(){\n    return serverKvStore!;\n  }\n  static getClientKv(){\n    return clientKvStore!;\n  }\n  static setServerKv(kv:CloudFlareKv){\n    serverKvStore = kv;\n  }\n\n  static setClientKv(kv:LocalStorage | LocalDatabase){\n    clientKvStore = kv;\n  }\n\n  static formatSession({sign,ts,address,accountId}:{sign:Buffer,ts:number,address:string,accountId:number}){\n    return `${sign.toString(\"hex\")}_${ts}_${address}_${accountId}`\n  }\n\n  static parseSession(session:string){\n    if(session){\n      const res = session.split(\"_\")\n      const sign = res[0];\n      const time = parseInt(res[1]);\n      const address = res[2];\n      const accountId = res.length > 3 ? parseInt(res[3]) : 0\n      return {sign,time,address,accountId};\n    }else{\n      return undefined\n    }\n  }\n\n  saveSession(session:string){\n    const res = Account.parseSession(session)\n    if(res){\n      Account.getClientKv().put(`adr`,res.address)\n      Account.saveSessionByAddr(res.address,session)\n    }\n  }\n\n  getSessionAddress(){\n    const session = this.getSession()\n    if(session){\n      const {address} = Account.parseSession(session)!\n      return address\n    }else{\n      return undefined\n    }\n  }\n\n  getSession(){\n    if(this.session){\n      return this.session;\n    }else{\n      const adr = Account.getClientKv().get(`adr`);\n      if(adr){\n        this.session = Account.getSessionByAddr(adr);\n        return this.session\n      }else{\n        return undefined\n      }\n    }\n  }\n\n  delSession(){\n    this.session = undefined\n    Account.getClientKv().delete(`adr`);\n  }\n\n  static saveSessionByAddr(addr:string,session:string){\n    const sessions = Account.getSessions()\n    sessions[addr] = session;\n    Account.getClientKv().put(\n      `${SESSIONS_PREFIX}`,\n      JSON.stringify(sessions)\n    );\n  }\n\n  static getSessionByAddr(addr:string){\n    const sessions = Account.getSessions()\n    if(sessions[addr]){\n      return sessions[addr]\n    }else{\n      return undefined\n    }\n  }\n  static getSessions(){\n    const data = Account.getClientKv().get(\n      `${SESSIONS_PREFIX}`,\n    );\n    if(data){\n      return JSON.parse(data)\n    }else{\n      return {}\n    }\n  }\n\n  async saveUidFromCacheByAddress(address: string, uid: string) {\n    await Account.getServerKv().put(`ADR_UID_${address}`, uid);\n  }\n\n  async getUidFromCacheByAddress(address:string){\n    const uid_cache = await Account.getServerKv().get(`ADR_UID_${address}`)\n    return uid_cache || undefined;\n  }\n  async afterServerLoginOk({uid,address}:AuthLoginReq_Type){\n    this.setUid(uid);\n    const uid_cache = await Account.getServerKv().get(`ADR_UID_${address}`)\n    if(!uid_cache){\n      await Account.getServerKv().put(`ADR_UID_${address}`,uid)\n    }\n  }\n\n  getShareKey() {\n    return this.shareKey!;\n  }\n  getIv() {\n    return this.iv!;\n  }\n  getAad() {\n    return this.aad!;\n  }\n\n  getAccountId() {\n    return this.accountId;\n  }\n\n  setUid(uid: string) {\n    this.uid = uid;\n  }\n\n  setUserInfo(userInfo: object) {\n    this.userInfo = userInfo;\n  }\n\n  getUserInfo() {\n    return this.userInfo ;\n  }\n\n  getUid() {\n    return this.uid;\n  }\n\n  async verifyPwd(password:string,address:string){\n    const hash = hashSha256(password);\n    const entropy = await this.getEntropy();\n    const address1 = Account.getAddressFromEntropy(entropy,hash)\n    return address === address1;\n  }\n\n  static getAddressFromEntropy(entropy:string,pasword?:string){\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy),pasword);\n    const ethWallet = wallet.getPTPWallet(0);\n    return ethWallet.address;\n  }\n\n  genEntropy(){\n    let mnemonic = new Mnemonic();\n    this.entropy = mnemonic.toEntropy();\n  }\n\n  async encryptData(plain:Buffer,password:string):Promise<Buffer>{\n    const entropy = await this.getEntropy();\n    if(password){\n      password = hashSha256(password);\n    }\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy));\n    let { prvKey,pubKey } = wallet.getPTPWallet(EncryptType.EncryptType_Message);\n    pubKey = pubKey.slice(1)\n    const shareKey = Buffer.from(password!,\"hex\")\n    // console.log(\"encryptData\",{prvKey,pubKey,shareKey,password})\n    return Aes256Gcm.encrypt(\n      plain,\n      shareKey,\n      prvKey,\n      pubKey\n    );\n  }\n  async decryptData(cipher:Buffer,password:string):Promise<Buffer>{\n    const entropy = await this.getEntropy();\n    password = hashSha256(password);\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy));\n    let { prvKey,pubKey } = wallet.getPTPWallet(EncryptType.EncryptType_Message);\n    pubKey = pubKey.slice(1)\n    const shareKey = Buffer.from(password!,\"hex\")\n    // console.log(\"decryptData\",{prvKey,pubKey,shareKey,password})\n    return Aes256Gcm.decrypt(\n      cipher,\n      shareKey,\n      prvKey,\n      pubKey\n    );\n  }\n  async encryptByPubKey(plain:Buffer,password?:string):Promise<Buffer>{\n    const entropy = await this.getEntropy();\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy),password);\n    let { pubKey_ } = wallet.getPTPWallet(0);\n    return EthEcies.encrypt(pubKey_, plain)\n  }\n\n  async decryptByPrvKey(cipher:Buffer,password?:string ):Promise<Buffer>{\n    const entropy = await this.getEntropy();\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy),password);\n    let { prvKey } = wallet.getPTPWallet(0);\n    return EthEcies.decrypt(prvKey, cipher)\n  }\n\n  static getAccountIdByEntropy(entropy:string){\n    const keys = Account.getKeys()\n    for (let i = 0; i < Object.keys(keys).length; i++) {\n      const key = Object.keys(keys)[i]\n      const value = keys[key]\n      if(entropy === value){\n        return parseInt(key)\n      }\n    }\n    return null\n  }\n  static localEncrypt(plain:Buffer){\n    return Aes256Gcm.encrypt(\n      Buffer.from(plain),\n      Buffer.from(LOCAL_key, \"hex\"),\n      Buffer.from(LOCAL_iv, \"hex\"),\n      Buffer.from(LOCAL_aad, \"hex\"),\n    )\n  }\n  static localDecrypt(cipher:Buffer):Buffer{\n    return Aes256Gcm.decrypt(\n      cipher,\n      Buffer.from(LOCAL_key, \"hex\"),\n      Buffer.from(LOCAL_iv, \"hex\"),\n      Buffer.from(LOCAL_aad, \"hex\"),\n    )\n  }\n  static saveKey(key:number,value:string){\n    const keys = Account.getKeys()\n    keys[key] = value;\n    const cipher = Account.localEncrypt(Buffer.from(JSON.stringify(keys)))\n    Account.getClientKv().put(\n      `${KEYS_PREFIX}`,\n      cipher.toString(\"hex\")\n    );\n  }\n\n  static getKey(key:number){\n    const keys = Account.getKeys()\n    if(keys[key]){\n      return keys[key]\n    }else{\n      return undefined\n    }\n  }\n  static getKeys(){\n    let data = Account.getClientKv().get(\n      `${KEYS_PREFIX}`,\n    );\n    if(data){\n      if(data.indexOf(\"{\") === -1){\n        data = Account.localDecrypt(Buffer.from(data,\"hex\"))\n        data = data.toString()\n      }\n      return JSON.parse(data)\n    }else{\n      return {}\n    }\n  }\n  async setEntropy(entropy:string,skipSave?:boolean) {\n    this.entropy = entropy;\n    if(!skipSave){\n      await Account.saveKey(\n        this.getAccountId(),\n        entropy\n      )\n    }\n  }\n\n  async getEntropy() :Promise<string>{\n    if(this.entropy){\n      return this.entropy\n    }\n    let entropy = await Account.getKey(this.getAccountId());\n    if (!entropy) {\n      let mnemonic = new Mnemonic();\n      entropy = mnemonic.toEntropy();\n      await Account.saveKey(\n        this.getAccountId(),\n        entropy\n      )\n    }\n    this.entropy = entropy;\n    return entropy;\n  }\n\n  async initEcdh(serverPubKey: Buffer, iv: Buffer, aad: Buffer) {\n    const entropy = await this.getEntropy();\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy));\n    const ethWallet = wallet.getPTPWallet(0);\n    this.shareKey = Buffer.from(ecdh(serverPubKey, ethWallet.prvKey));\n    // console.log(\"shareKey\",this.shareKey)\n    this.aad = aad;\n    this.iv = iv;\n  }\n\n  aesEncrypt(plainData: Buffer) {\n    return Aes256Gcm.encrypt(\n      plainData,\n      this.getShareKey(),\n      this.getIv(),\n      this.getAad()\n    );\n  }\n\n  aesDecrypt(cipherData: Buffer) {\n    return Aes256Gcm.decrypt(\n      cipherData,\n      this.getShareKey(),\n      this.getIv(),\n      this.getAad()\n    );\n  }\n\n  async signMessage(message: string,password?: string | undefined) {\n    const entropy = await this.getEntropy();\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy),password);\n    const ethWallet = wallet.getPTPWallet(0);\n    const ecdsa = new EcdsaHelper({\n      pubKey: ethWallet.pubKey,\n      prvKey: ethWallet.prvKey,\n    });\n    return {address:ethWallet.address,sign:ecdsa.sign(message)};\n  }\n\n  verifyRecoverAddress(sig: Buffer, message: string) {\n    return EcdsaHelper.recoverAddress({ message, sig });\n  }\n\n  async verifySession(session:string,password:string){\n    const {address} = this.recoverAddressAndPubKey(\n      Buffer.from(session!.split(\"_\")[0],\"hex\"),\n      session!.split(\"_\")[1]\n    )\n    const res = await this.verifyPwd(password,address);\n    return res ? address : \"\";\n  }\n  recoverAddressAndPubKey(sig: Buffer, message: string) {\n    return EcdsaHelper.recoverAddressAndPubKey({ message, sig });\n  }\n\n  static setCurrentAccount(account:Account) {\n    currentAccountId = account.getAccountId();\n  }\n\n  static getCurrentAccount() {\n    if (currentAccountId) {\n      return Account.getInstance(currentAccountId);\n    } else {\n      return null;\n    }\n  }\n  static genAccountId(){\n    return +(new Date())\n  }\n  static getCurrentAccountId() {\n    if(currentAccountId){\n      return currentAccountId;\n    }else{\n      let accountId:number | string | null = Account.getClientKv().get(\"a-c-id\");\n      if(!accountId){\n        accountId = Account.genAccountId();\n      }else{\n        if (typeof accountId === \"string\") {\n          accountId = parseInt(accountId)\n        }\n        Account.getClientKv().put(\"a-c-id\",String(accountId));\n      }\n      Account.setCurrentAccountId(accountId);\n      return accountId;\n    }\n  }\n\n  static setCurrentAccountId(accountId: number) {\n    currentAccountId = accountId;\n    const accountIdsStr =  Account.getClientKv().get(\"a-as\");\n    accountIds = accountIdsStr ? JSON.parse(accountIdsStr) : []\n    if(!accountIds.includes(accountId)){\n      accountIds.push(accountId);\n      Account.getClientKv().put(\"a-as\",JSON.stringify(accountIds));\n    }\n    Account.getClientKv().put(\"a-c-id\",String(accountId));\n  }\n\n  static getInstance(accountId: number) {\n    if (!accounts[accountId]) {\n      accounts[accountId] = new Account(accountId);\n    }\n    return accounts[accountId];\n  }\n\n  static randomBuff(len:16|32){\n    return Buffer.from(randomize(len));\n  }\n\n}\n","import {LocalDb} from \"../../../api/gramjs/localDb\";\n\nexport default class LocalDatabase {\n  private db: LocalDb | undefined;\n  constructor() {}\n  init(db:LocalDb) {\n    this.db = db;\n  }\n\n  put(key: string, value: any) {\n    this.db!.cache[key] = value;\n  }\n\n  get(key: string) {\n    return this.db!.cache[key]\n  }\n\n  delete(key: string) {\n    delete this.db!.cache[key];\n  }\n}\n","import PasswordValidator from \"password-validator\";\nimport {sha256} from \"ethereum-cryptography/sha256\";\n\nconst SALT = 'wai ai blockchain auto bot';\n\nexport function passwordCheck(password:string){\n  const schema = new PasswordValidator();\n  schema\n    .is().min(8)                                    // Minimum length 8\n    .is().max(100)                                  // Maximum length 100\n    .has().uppercase()                              // Must have uppercase letters\n    .has().lowercase()                              // Must have lowercase letters\n    .has().not().spaces()                           // Should not have spaces\n    .is().not().oneOf(['Passw0rd', 'Password123']); // Blacklist these values\n\n  return schema.validate(password);\n}\n\nexport function hashSha256(text:string):string{\n  return sha256(Buffer.from(`${text}${SALT}`)).toString(\"hex\")\n}\n\n","\nexport function generateRandomString(length:number) {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport function sha1(str: string): string {\n  function utf8_encode(str: string): string {\n    str = str.replace(/\\r\\n/g, '\\n');\n    let utf8str = '';\n    for (let n = 0; n < str.length; n++) {\n      let c = str.charCodeAt(n);\n      if (c < 128) {\n        utf8str += String.fromCharCode(c);\n      } else if ((c > 127) && (c < 2048)) {\n        utf8str += String.fromCharCode((c >> 6) | 192);\n        utf8str += String.fromCharCode((c & 63) | 128);\n      } else {\n        utf8str += String.fromCharCode((c >> 12) | 224);\n        utf8str += String.fromCharCode(((c >> 6) & 63) | 128);\n        utf8str += String.fromCharCode((c & 63) | 128);\n      }\n    }\n    return utf8str;\n  }\n\n  function rotate_left(n: number, s: number): number {\n    return (n << s) | (n >>> (32 - s));\n  }\n\n  function cvt_hex(val: number): string {\n    let str = '';\n    let i;\n    let v;\n    for (i = 7; i >= 0; i--) {\n      v = (val >>> (i * 4)) & 0x0f;\n      str += v.toString(16);\n    }\n    return str;\n  }\n\n  let blockstart;\n\n  let i: number, j: number;\n\n  let W = new Array(80);\n\n  let H0 = 0x67452301;\n  let H1 = 0xEFCDAB89;\n  let H2 = 0x98BADCFE;\n  let H3 = 0x10325476;\n  let H4 = 0xC3D2E1F0;\n\n  let A, B, C, D, E;\n\n  let temp;\n\n  str = utf8_encode(str);\n\n  let len = str.length * 8;\n\n  let K = new Array(\n    0x5A827999,\n    0x6ED9EBA1,\n    0x8F1BBCDC,\n    0xCA62C1D6\n  );\n\n  let str_len = str.length;\n\n  let word_array = new Array();\n\n  for (i = 0; i < str_len - 3; i += 4) {\n    j =\n      (str.charCodeAt(i) << 24) |\n      (str.charCodeAt(i + 1) << 16) |\n      (str.charCodeAt(i + 2) << 8) |\n      str.charCodeAt(i + 3);\n    word_array.push(j);\n  }\n\n  switch (str_len % 4) {\n    case 0:\n      i = 0x080000000;\n      break;\n    case 1:\n      i = (str.charCodeAt(str_len - 1) << 24) | 0x0800000;\n      break;\n\n    case 2:\n      i =\n        (str.charCodeAt(str_len - 2) << 24) |\n        (str.charCodeAt(str_len - 1) << 16) |\n        0x08000;\n      break;\n\n    case 3:\n      i =\n        (str.charCodeAt(str_len - 3) << 24) |\n        (str.charCodeAt(str_len - 2) << 16) |\n        (str.charCodeAt(str_len - 1) << 8) |\n        0x80;\n      break;\n  }\n\n  word_array.push(i);\n\n  while (word_array.length % 16 != 14) word_array.push(0);\n\n  word_array.push(len >>> 32);\n  word_array.push(len & 0xffffffff);\n\n  for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {\n    for (i = 0; i < 16; i++) W[i] = word_array[blockstart + i];\n    for (i = 16; i < 80; i++)\n      W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n    A = H0;\n    B = H1;\n    C = H2;\n    D = H3;\n    E = H4;\n\n    for (i = 0; i < 20; i++) {\n      temp =\n        (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + K[0]) &\n        0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 20; i < 40; i++) {\n      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + K[1]) & 0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 40; i < 60; i++) {\n      temp =\n        (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + K[2]) &\n        0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 60; i < 80; i++) {\n      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + K[3]) & 0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    H0 = (H0 + A) & 0xffffffff;\n    H1 = (H1 + B) & 0xffffffff;\n    H2 = (H2 + C) & 0xffffffff;\n    H3 = (H3 + D) & 0xffffffff;\n    H4 = (H4 + E) & 0xffffffff;\n  }\n\n  let result =\n    cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);\n  return result.toLowerCase();\n}\n\nexport function replaceSubstring(text:string, offset:number, length:number,replace:string) {\n  const prefix = text.substring(0, offset);\n  const suffix = text.substring(offset + length);\n  return prefix + replace + suffix;\n\n}\nexport function fetchWithTimeout(url: RequestInfo | URL, options: RequestInit | undefined, timeout = 10000) {\n  return Promise.race([\n    fetch(url, options),\n    new Promise((_, reject) =>\n      setTimeout(() => reject(new Error(`Timeout: ${timeout}s`)), timeout)\n    )\n  ]);\n}\n\nexport const isEmailValid = (email:string)=>{\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(email);\n}\n\nexport function parseQueryFromUrl(urlStr: string): { url: URL; query: Record<string, string> } {\n  const replacedUrl = urlStr.replace(/#/g, '?');\n  const url = new URL(replacedUrl);\n  const query = Array.from(url.searchParams.entries()).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: value,\n    }),\n    {}\n  );\n\n  return { url, query };\n}\n\n\nexport function getCorsHeader(Access_Control_Allow_Origin: string = '*',ContentType:string = \"application/json;charset=UTF-8\") {\n  return {\n    'content-type': ContentType,\n    'Access-Control-Allow-Origin': Access_Control_Allow_Origin,\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, Accept',\n    'Access-Control-Allow-Credentials': 'true',\n  };\n}\n\nexport function ResponseJson(result: object, status = 200,Access_Control_Allow_Origin: string = '*') {\n  return new Response(JSON.stringify(result), {\n    status,\n    headers: {\n      ...getCorsHeader(Access_Control_Allow_Origin),\n    },\n  });\n}\n\nexport function currentTs(){\n  return Math.ceil(+(new Date)/1000)\n}\n\nexport function currentTs1000(){\n  return Math.ceil(+(new Date))\n}\n\nexport async function fileToArrayBuffer(file:File) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n    reader.readAsArrayBuffer(file);\n  });\n}\nexport async function fileToBuffer(file:File) {\n  return new Promise<Buffer>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      // @ts-ignore\n      const buffer = Buffer.from(reader.result);\n      resolve(buffer);\n    };\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(file);\n  });\n}\n\nfunction downloadText(text:string, filename:string,type = \"text/json\") {\n  var element = document.createElement('a');\n  element.setAttribute('href', 'data:'+type+';charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n}\n\nexport async function blobToArrayBuffer(blob:Blob):Promise<ArrayBuffer> {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', () => {\n      // @ts-ignore\n      resolve(reader.result);\n    });\n    reader.readAsArrayBuffer(blob);\n  });\n}\n\nexport async function blobToBuffer(blob:Blob) {\n  const ab = await blobToArrayBuffer(blob);\n  return Buffer.from(ab)\n}\n\nexport function isPositiveInteger(str: string): boolean {\n  const reg = /^[1-9]\\d*$/; // 正则表达式\n  return reg.test(str);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [5433,3760,4069,2752,4542,9439], () => (__webpack_require__(2049)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"2752\":\"fb094f41b88d10b557c8\",\"3760\":\"92293361e75e95e04498\",\"4069\":\"7bd13776c79ea5e7a2da\",\"4542\":\"33606f8f42418c2ef05e\",\"5433\":\"dc756fbfbd427f32dedf\",\"9439\":\"f2c06de32363d4d91865\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t2339: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkwai\"] = self[\"webpackChunkwai\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","buildApiBotInlineResult","result","queryId","id","type","title","description","url","thumb","webThumbnail","buildApiWebDocument","buildApiBotInlineMediaResult","photo","document","GramJs","sticker","buildStickerFromDocument","buildApiPhoto","gif","buildVideoFromDocument","thumbnail","buildApiThumbnailFromStripped","thumbs","buildBotSwitchPm","switchPm","pick","undefined","buildApiAttachBot","bot","botId","toString","hasSettings","shouldRequestWriteAccess","requestWriteAccess","shortName","peerTypes","map","buildApiAttachMenuPeerType","icons","buildApiAttachMenuIcon","filter","Boolean","peerType","icon","buildApiDocument","localDb","String","name","buildApiBotInfo","botInfo","chatId","descriptionPhoto","descriptionDocument","userId","commands","menuButton","buildApiPeerId","commandsArray","command","omitVirtualClassFields","buildApiBotCommand","buildApiBotMenuButton","length","text","buildApiGroupCallParticipant","participant","self","min","about","date","versioned","canSelfUnmute","justJoined","left","muted","mutedByYou","source","volume","volumeByAdmin","videoJoined","peer","video","presentation","raiseHandRating","isSelf","isMin","isLeft","isMuted","isMutedByMe","hasJustJoined","isVolumeByAdmin","isVersioned","isVideoJoined","Date","isUser","isPeerUser","getApiChatIdFromMtpPeer","buildApiGroupCallParticipantVideo","participantVideo","audioSource","endpoint","paused","sourceGroups","isPaused","buildApiGroupCallParticipantVideoSourceGroup","participantVideoSourceGroup","semantics","sources","buildApiGroupCall","groupCall","accessHash","connectionState","participantsCount","version","participants","streamDcId","scheduleDate","canChangeJoinMuted","joinMuted","canStartVideo","scheduleStartSubscribed","isLoaded","getGroupCallId","buildPhoneCall","call","phoneCall","adminId","participantId","protocol","isVideo","buildApiCallProtocol","p2pAllowed","gAOrB","keyFingerprint","connections","startDate","state","Array","from","buildApiCallConnection","duration","reason","buildApiCallDiscardReason","needRating","needDebug","receiveDate","gB","gAHash","discardReason","connection","username","password","turn","stun","ip","ipv6","port","isTurn","isStun","libraryVersions","minLayer","maxLayer","udpP2p","udpReflector","isUdpP2p","isUdpReflector","buildCallProtocol","buildApiChatFieldsFromPeerEntity","peerEntity","isSupport","hasVideoAvatar","hasVideo","avatarHash","buildAvatarHash","isSignaturesShown","signatures","hasPrivateLink","hasLink","isScam","scam","isFake","fake","isJoinToSend","joinToSend","isJoinRequest","joinRequest","usernames","buildApiUsernames","isForum","forum","isVerified","verified","isCallActive","callActive","isCallNotEmpty","callNotEmpty","joinDate","membersCount","isProtected","noforwards","buildApiChatPermissions","isCreator","creator","buildApiChatRestrictions","buildApiChatMigrationInfo","fakeType","buildApiChatFromDialog","dialog","folderId","unreadMark","unreadCount","unreadMentionsCount","unreadReactionsCount","notifySettings","silent","muteUntil","readOutboxMaxId","readInboxMaxId","draft","getServerTime","getApiChatTypeFromPeerEntity","getApiChatTitleFromMtpPeer","lastReadOutboxMessageId","lastReadInboxMessageId","hasUnreadMark","draftDate","adminRights","currentUserBannedRights","bannedRights","defaultBannedRights","isForbidden","isRestricted","restrictions","restrictionReason","restricted","restrictionReasons","targetReason","find","platform","buildApiChatRestrictionReason","Object","assign","isNotJoined","migratedTo","buildApiChatFromPreview","preview","getUserName","megagroup","getPeerKey","isPeerChat","channelId","user","firstName","lastName","photoId","buildChatMember","member","inviterId","joinedDate","kickedByUserId","kickedBy","promotedByUserId","promotedBy","customTitle","rank","isAdmin","isOwner","buildChatMembers","buildChatTypingStatus","update","emoticon","action","emoji","fromId","timestamp","now","getServerTimeOffset","buildApiChatFolder","pickTruthy","channels","broadcasts","pinnedChatIds","pinnedPeers","includedChatIds","includePeers","excludedChatIds","excludePeers","buildApiChatFolderFromSuggested","buildApiChatBotCommands","botInfos","reduce","botCommands","concat","mtpCommand","buildApiExportedInvite","invite","revoked","expireDate","link","permanent","usage","usageLimit","requested","requestNeeded","isRevoked","isPermanent","isRequestNeeded","buildChatInviteImporter","importer","isRequested","buildApiChatSettings","autoarchived","reportSpam","addContact","blockContact","isAutoArchived","canReportSpam","canAddContact","canBlockContact","buildApiChatReactions","chatReactions","areCustomAllowed","allowCustom","allowed","reactions","buildApiReaction","buildApiSendAsPeerId","sendAs","isPremium","premiumRequired","buildApiTopic","forumTopic","my","closed","pinned","hidden","short","iconColor","iconEmojiId","topMessage","isClosed","isPinned","isHidden","lastMessageId","DEFAULT_THUMB_SIZE","w","h","sizes","mimeType","s","realSizes","bytes","dataUri","bytesToDataUri","strippedPhotoToJpg","width","height","buildApiThumbnailFromCached","photoSize","buildApiThumbnailFromPath","sizeAttribute","pathBytesToSvg","isSpoiler","buildApiPhotoSize","videoSizes","compact","buildApiVideoSize","videoSize","videoStartTs","size","mtpPeer","push","isActive","isEditable","forEach","active","editable","shouldOmitPrefix","btoa","fromCharCode","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","className","classType","getBytes","rest","TIMESTAMP_BASE","TIMESTAMP_PRECISION","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","INPUT_WAVEFORM_LENGTH","currentUserId","localMessageCounter","LOCAL_MESSAGE_MIN_ID","getNextLocalMessageId","datePart","Math","round","setMessageBuilderCurrentUserId","_currentUserId","buildApiSponsoredMessage","mtpMessage","message","entities","startParam","channelPost","chatInvite","chatInviteHash","randomId","recommended","chatInviteTitle","chat","serializeBytes","isBot","buildMessageTextContent","expiresAt","SPONSORED_MESSAGE_CACHE_MS","isRecommended","channelPostId","buildApiMessage","resolveMessageApiChatId","buildApiMessageWithChatId","buildApiMessageFromShort","buildPeer","out","buildApiMessageFromShortChat","buildApiMessageFromNotification","notification","currentDate","localId","content","buildMessageContent","SERVICE_NOTIFICATIONS_USER_ID","inboxDate","isOutgoing","peerId","isChatWithSelf","post","fwdFrom","senderId","targetPeerId","isChannelPost","amount","currency","translationValues","score","months","topicEmojiIconId","isTopicAction","targetUserIds","users","targetChatId","includes","withDuration","join","mins","max","Number","totalAmount","domain","toJSNumber","addPhotoToLocalDb","buildAction","isInvoiceMedia","media","extendedMedia","replyToMsgId","replyToTopId","replyToPeerId","replyTo","isEdited","editDate","editHide","inlineButtons","keyboardButtons","keyboardPlaceholder","isKeyboardSingleUse","isKeyboardSelective","shouldSkipBuyButton","replyMarkup","webpage","markup","rows","buttons","button","requiresPassword","data","isQuiz","quiz","receiptMsgId","receiptMessageId","query","isSamePeer","samePeer","buttonId","every","row","placeholder","singleUse","selective","buildReplyButtons","forwardInfo","savedFromPeerId","savedFromPeer","isImported","imported","isLinkedChannelPost","fromChatId","fromMessageId","savedFromMsgId","senderUserId","hiddenUserName","fromName","postAuthorTitle","postAuthor","buildApiMessageForwardInfo","replies","mediaUnread","isMediaUnread","groupedId","isInAlbum","audio","shouldHideKeyboardButtons","isHideKeyboardSelective","isForwardingAllowed","emojiOnlyCount","getEmojiOnlyCountForMessage","views","forwards","isFromScheduled","fromScheduled","isSilent","buildMessageReactions","replyToMessageId","isTopicReply","replyToChatId","replyToTopMessageId","mentioned","hasUnreadMention","isMentioned","viaBotId","repliesThreadInfo","buildThreadInfo","recentReactions","results","canSeeList","buildReactionCount","sort","reactionCountComparator","buildMessagePeerReaction","a","b","count","chosenOrder","reactionCount","reaction","apiReaction","userReaction","big","unread","isUnread","isBig","documentId","buildApiAvailableReaction","availableReaction","selectAnimation","staticIcon","inactive","aroundAnimation","centerIcon","effectAnimation","activateAnimation","premium","isInactive","buildMessageMediaContent","hasUnsupportedMedia","poll","contact","isRound","buildApiMessageEntity","buildMessageDraft","formattedText","replyingToId","ttlSeconds","nopremium","buildSticker","spoiler","buildPhoto","startsWith","buildVideo","audioAttribute","attributes","attr","voice","thumbnailSizes","fileName","getFilenameFromDocument","buildAudio","waveform","buildVoice","buildDocumentFromMedia","phoneNumber","buildContact","buildPoll","buildPollFromMedia","webPage","buildWebPage","invoice","test","buildApiMessageExtendedMediaPreview","isTest","buildInvoice","buildInvoiceFromMedia","location","point","buildGeoPoint","geo","buildGeo","provider","address","venueId","venueType","buildVenue","period","heading","buildGeoLive","buildLocationFromMedia","game","apiPhoto","apiDocument","buildGame","buildGameFromMedia","VIDEO_WEBM_TYPE","isWebmSupported","VIDEO_MOV_TYPE","isMovSupported","videoAttr","gifAttr","supportsStreaming","roundMessage","isGif","mediaType","mediaSize","SUPPORTED_IMAGE_CONTENT_TYPES","imageAttribute","SUPPORTED_VIDEO_CONTENT_TYPES","videoAttribute","long","lat","accuracyRadius","pollResults","answers","rawAnswers","answer","option","summary","isPublic","publicVoters","buildPollResults","rawResults","totalVoters","recentVoters","solution","solutionEntities","chosen","correct","voters","isChosen","isCorrect","votersCount","recentVoterIds","defaultBase","filenameAttribute","extension","split","buildLocalMessage","replyingTo","replyingToTopId","attachment","scheduledAt","filename","blobUrl","previewBlobUrl","shouldSendAsFile","shouldSendAsSpoiler","quick","inputWaveform","interpolateArray","SUPPORTED_AUDIO_CONTENT_TYPES","performer","buildUploadingMedia","isChannel","buildNewPoll","isScheduled","buildLocalForwardedMessage","toChat","toThreadId","noAuthors","noCaptions","isCurrentUserPremium","isAudio","asIncomingInChatWithSelf","shouldHideText","keys","shouldDropCustomEmoji","strippedText","entity","ApiMessageEntityTypes","updatedContent","sendingState","videoDuration","sizeAttr","dimensions","offset","language","messageReplies","messageId","maxId","readMaxId","recentRepliers","comments","apiChannelId","DELETED_COMMENTS_CHANNEL_ID","isComments","threadId","originChannelId","messagesCount","recentReplierIds","buildApiFormattedText","textWithEntities","buildApiWallpaper","wallpaper","slug","buildApiSession","session","isCurrent","current","isOfficialApp","officialApp","isPasswordPending","passwordPending","hash","areCallsEnabled","callRequestsDisabled","areSecretChatsEnabled","encryptedRequestsDisabled","buildApiWebSession","buildPrivacyKey","key","buildPrivacyRules","rules","visibility","allowUserIds","allowChatIds","blockUserIds","blockChatIds","rule","chats","buildApiNotifyException","showPreviews","otherSound","hasSound","shouldShowPreviews","buildApiNotifyExceptionTopic","topicId","buildApiCountry","country","code","iso2","defaultName","countryCode","prefixes","patterns","buildApiCountryList","countries","nonHiddenCountries","phoneCodes","countryCodes","flat","localeCompare","general","buildJson","json","value","acc","el","buildApiUrlAuthResult","buildApiUser","addUserToLocalDb","buildApiConfig","config","defaultReaction","reactionsDefault","expires","gifSearchUsername","maxGroupSize","chatSizeMax","TEMPLATE","LOOKUP","replace","path","len","i","num","buildPath","hasOwnProperty","LOTTIE_STICKER_MIME_TYPE","VIDEO_STICKER_MIME_TYPE","isNoPremium","_customEmojiAttribute","videoThumbs","stickerAttribute","customEmojiAttribute","fileAttribute","isLottie","isCustomEmoji","shouldUseTextColor","textColor","imageSizeAttribute","videoSizeAttribute","stickerOrEmojiAttribute","stickerSetInfo","inputSet","stickerset","isMissing","alt","isFree","free","cachedThumb","pathThumb","hasEffect","some","buildStickerSet","set","archived","animated","installedDate","videos","emojis","thumbDocumentId","isArchived","isVideos","isEmoji","hasThumbnail","buildStickerSetCovered","coveredStickerSet","stickerSet","stickers","processStickerResult","cover","covers","documents","packs","processStickerPackResult","buildApiEmojiInteraction","timestamps","t","buildApiUserFromFull","mtpUserFull","fullUser","commonChatsCount","pinnedMsgId","blocked","profilePhoto","voiceMessagesForbidden","premiumGifts","fallbackPhoto","personalPhoto","fullInfo","bio","pinnedMessageId","isBlocked","noVoiceMessages","gift","botUrl","buildApiPremiumGiftOption","mtpUser","userType","deleted","emojiStatus","buildApiUserEmojiStatus","mutualContact","isContact","canBeInvitedToGroup","botNochats","phone","noStatus","status","botInlinePlaceholder","botPlaceholder","botAttachMenu","isAttachBot","buildApiUserStatus","mtpStatus","wasOnline","mtpEmojiStatus","until","buildApiUsersAndStatuses","mtpUsers","userStatusesById","CHANNEL_ID_MIN_LENGTH","getEntityTypeById","chatOrUserId","getEntityTypeByDeprecatedId","buildMtpPeerId","buildInputPeer","BigInt","buildInputEntity","buildInputStickerSet","buildInputStickerSetShortName","buildInputDocument","buildInputMediaDocument","inputDocument","buildInputPoll","pollParams","question","deserializeBytes","multipleChoice","correctAnswers","buildMtpMessageEntity","buildInputPollFromExisting","shouldClose","closeDate","closePeriod","o","generateRandomBigInt","readBigIntFromBuffer","generateRandomBytes","generateRandomInt","buildMessageFromUpdate","isMessageWithMedia","isServiceMessageWithMedia","buildChatPhotoForLocalDb","dcId","buildInputPhoto","localPhoto","buildInputContact","clientId","buildChatBannedRights","untilDate","buildChatAdminRights","buildShippingInfo","info","shippingAddress","buildInputPrivacyKey","privacyKey","buildInputReportReason","buildSendMessageAction","buildInputThemeParams","params","JSON","stringify","abs","slice","buildInputGroupCall","buildInputPhoneCall","buildInputInvoice","msgId","buildInputReaction","buildInputChatReactions","buildInputEmojiStatus","DEFAULT_STATUS_ICON_ID","buildInputTextWithEntities","formatted","LOG_BACKGROUND","LOG_PREFIX_COLOR","LOG_SUFFIX","INVOKE","RESPONSE","CONNECTING","CONNECTED","UPDATE","addMessageToLocalDb","messageFullId","mockMessage","shouldOverwrite","addEntitiesWithPhotosToLocalDb","noOverwrite","addChatToLocalDb","swapLocalInvoiceMedia","localMessage","Buffer","log","suffix","console","error","warn","IS_MULTITAB_SUPPORTED","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","batchedUpdates","throttledLocalDbUpdate","throttle","postMessage","convertToVirtualClass","Uint8Array","isArray","VirtualClass","field","constructors","valueOmited","createLocalDbInitial","initial","_initial","valueVirtualClass","acc2","key2","Proxy","get","target","prop","Reflect","broadcastLocalDbUpdateFull","updateFullLocalDb","clearLocalDb","authController","onUpdate","init","_onUpdate","onCurrentUserUpdate","currentUser","provideAuthPhoneNumber","resolve","provideAuthCode","provideAuthPassword","provideAuthRegistration","registration","restartAuth","reject","Error","restartAuthWithQr","async","downloadMedia","mediaFormat","start","end","isHtmlAllowed","client","isConnected","onProgress","fullSize","flag","t1","indexOf","ab","file","Promise","reader","FileReader","onload","onerror","readAsArrayBuffer","fileToArrayBuffer","downloadReq","DownloadReq","downloadRes","arrayBuffer","blob","cacheApi","fetch","MEDIA_CACHE_NAME_WAI","Type","buf","blobToBuffer","DownloadRes","Pdu","err","ERR","Account","e","finalBuf","alloc","res","CLOUD_MESSAGE_API","method","body","pack","getPbData","part_total","part","save","Blob","parsed","ApiMediaFormat","buffer","parseMedia","canCache","MEDIA_CACHE_DISABLED","cacheName","MEDIA_CACHE_NAME_AVATARS","MEDIA_CACHE_NAME","dataBlob","Set","DEFAULT_USER_AGENT","DEFAULT_PLATFORM","APP_CODE_NAME","account","GramJsLogger","DEBUG_GRAMJS","initialArgs","DEBUG","userAgent","sessionData","maxBufferSize","webAuthToken","mockScenario","accountId","entropy","handleAuthNative","deviceModel","navigator","systemVersion","appVersion","APP_VERSION","useWSS","invoke","invokeRequest","authorizationState","CurrentUserInfo","destroy","noLogOut","noClearLocalDb","disconnect","getClient","request","shouldReturnTrue","shouldThrow","shouldIgnoreUpdates","shouldIgnoreErrors","manyUpdates","singleUpdate","updates","_entities","injectUpdateEntities","updater","handleUpdatesFromRequest","debug","isSlowMode","hasErrorKey","dispatchErrorUpdate","args","downloadMediaWithClient","repairFileReference","uploadFile","workers","UPLOAD_WORKERS","updateTwoFaSettings","getTmpPassword","currentPassword","ttl","fetchCurrentUser","userFull","mediaMatch","match","mediaMatchType","entityId","entityType","sizeType","parseMediaUrl","messages","kv","LocalDatabase","setEntropy","saveSession","delSession","handleAuthNativeReq","AuthNativeReq","pdu","handleStopChatStreamReq","StopChatStreamReq","ControllerPool","handleSendBotMsgReq","botApi","SendBotMsgReq","headers","Authorization","getSession","SendBotMsgRes","botWs","BotWebSocket","isLogged","MsgWorker","sendPduWithCallback","handleUpdateCmdReq","UpdateCmdReq","UpdateCmdRes","sendWithCallback","buff","getCommandId","getActionCommandsName","ActionCommands","pduRes","DELETE_MISSING_CHANNEL_MESSAGE_DELAY","sentMessageIds","dispatchUserAndChatUpdates","originRequest","setServerTimeOffset","timeOffset","serverTimeOffset","shouldForceReply","has","invoiceSlug","localDbChatId","newProfilePhoto","GENERAL_TOPIC_ID","omit","ids","existingIds","missingIds","profilePhotoIds","setTimeout","popup","newContent","add","isAlreadySent","messageUpdate","pollId","apiPoll","pollUpdate","options","stillUnreadCount","topMsgId","threadInfo","order","dp","folderPeers","folderPeer","folder","orderedIds","replacedMembers","addedMember","deletedMemberId","messageIds","interaction","parse","typingStatus","apiUserId","updatedUser","settings","masks","n","groupCallId","recentRequesterIds","recentRequesters","requestsPending","callId","phoneCallId","transcriptionId","isPending","pending","LoadChatsReq","BaseMsg","constructor","msg","super","this","setCommandId","static","decode","LoadChatsRes","fetchChats","limit","offsetDate","withPinned","lastLocalServiceMessage","loadChatsRes","parseMsg","payload","fetchFullChat","fullChat","onlineCount","exportedInvite","slowmodeSeconds","slowmodeNextSendDate","migratedFromChatId","migratedFromMaxId","canViewParticipants","canViewStats","linkedChatId","hiddenPrehistory","availableReactions","defaultSendAs","statsDc","chatPhoto","participantsHidden","inviteLink","members","fetchMembers","kickedMembers","bannedUsers","bannedStatusesById","adminMembers","adminUsers","adminStatusesById","updateLocalDb","mtpLinkedChat","statusesById","slowMode","seconds","nextSendDate","migratedFrom","maxMessageId","canViewMembers","canViewStatistics","isPreHistoryHidden","adminMembersById","buildCollectionByKey","enabledReactions","sendAsId","statisticsDcId","areParticipantsHidden","getFullChannelInfo","getFullChatInfo","fetchChatSettings","searchChats","q","localPeerIds","myResults","allChats","allUsers","localChats","r","localUsers","u","globalChats","globalUsers","fetchChat","requestChatUpdate","lastLocalMessage","noLastMessage","peers","dialogs","peersByKey","currentStore","store","preparePeers","lastRemoteMessage","lastMessage","saveDraft","clearDraft","updateChatMutedState","MAX_INT_32","updateTopicMutedState","createChannel","noErrorUpdate","broadcast","newChannel","joinChannel","deleteChatUser","deleteChat","leaveChannel","deleteChannel","createGroupChat","newChat","editChatPhoto","inputEntity","inputPhoto","File","uploadedPhoto","toggleChatPinned","shouldBePinned","toggleChatArchived","fetchChatFolders","defaultFolderPosition","findIndex","dialogFilters","df","splice","ALL_FOLDER_ID","byId","fetchRecommendedChatFolders","editChatFolder","folderUpdate","deleteChatFolder","sortChatFolders","toggleDialogUnread","getChatByPhoneNumber","processResolvedPeer","getChatByUsername","togglePreHistoryHidden","isEnabled","enabled","updateChatDefaultBannedRights","updateChatMemberBannedRights","updateChatAdmin","updateChatTitle","updateChatAbout","toggleSignatures","memberFilter","MEMBERS_LOAD_SLICE","fetchGroupsForDiscussion","setDiscussionGroup","group","migrateChat","openChatByInvite","addChatMembers","all","deleteChatMember","viewMessages","sendMessages","sendMedia","sendStickers","sendGifs","sendGames","sendInline","embedLinks","sendPolls","changeInfo","inviteUsers","pinMessages","manageTopics","sendPhotos","sendVideos","sendRoundvideos","sendAudios","sendVoices","sendDocs","sendPlain","toggleJoinToSend","toggleJoinRequest","importChatInvite","setChatEnabledReactions","toggleIsProtected","toggleParticipantsHidden","toggleForum","createTopic","fetchTopics","offsetTopicId","offsetId","TOPICS_SLICE","offsetTopic","orderByCreateDate","topics","c","shouldOrderByCreateDate","draftsById","topic","readInboxMessageIdByTopicId","fetchTopicById","deleteTopic","togglePinnedTopic","editTopic","fetchMessages","isUp","pagination","fetchMessage","MESSAGE_DELETED","queue","sendMessage","noWebPage","shouldUpdateStickerSetsOrder","aiHistoryList","groupIndex","groupedUploads","counter","singleMediaByIndex","prevQueue","uploadMedia","fileId","getPhotoInfo","blobToDataUri","fetchBlob","thumbBlobUrl","sendGroupedMedia","vcard","msgSend","process","editMessage","rescheduleMessage","encryptUrl","patchedOnProgress","progress","isCanceled","fetchFile","inputFile","uploadFileV1","GIF_MIME_TYPE","forceFile","pinMessage","isUnpin","isOneSide","unpin","pmOneside","unpinAllMessages","deleteMessages","shouldDeleteForAll","deleteScheduledMessages","deleteHistory","revoke","just_clear","reportMessages","sendMessageAction","gramAction","markMessageListRead","fixedMaxId","MAIN_THREAD_ID","requestThreadInfoUpdate","markMessagesRead","fetchMessageViews","increment","index","topMessageResult","repliesResult","addOffset","discussionChatId","topMessageId","firstMessageId","noTopChatsRequest","searchMessagesLocal","minDate","maxDate","nextOffsetId","totalCount","searchMessagesGlobal","offsetRate","offsetPeer","nextRate","fetchWebPagePreview","sendPollVote","closePoll","loadPollOptionResults","shouldResetVoters","votes","vote","nextOffset","fetchExtendedMedia","forwardMessages","fromChat","withMyScore","randomIds","findFirstMessageIdAfterDate","fetchScheduledHistory","sendScheduledMessages","fetchPinnedMessages","PINNED_MESSAGES_LIMIT","fetchSeenBy","fetchSendAs","saveDefaultSendAs","fetchSponsoredMessages","viewSponsoredMessage","random","readAllMentions","readAllReactions","fetchUnreadMentions","MENTION_UNREAD_SLICE","fetchUnreadReactions","REACTION_UNREAD_SLICE","transcribeAudio","translateText","isMessageTranslation","toLanguageCode","toLang","translations","inputGifBot","fetchFullUser","input","userWithFullInfo","fetchCommonChats","commonChats","COMMON_CHATS_LIMIT","chatIds","mtpChat","isFullyLoaded","fetchNearestCountry","dcInfo","fetchTopUsers","topPeers","correspondents","fetchContactList","fetchUsers","importContact","contacts","updateContact","shouldSharePhoneNumber","addPhonePrivacyException","deleteContact","fetchProfilePhotos","PROFILE_PHOTOS_LIMIT","photos","userOrChat","updateEmojiStatus","fetchCustomEmojiSets","allStickers","sets","fetchStickerSets","fetchRecentStickers","RECENT_STICKERS_LIMIT","fetchFavoriteStickers","fetchFeaturedStickers","fetchFeaturedEmojiStickers","faveSticker","unfave","removeRecentSticker","unsave","clearRecentStickers","fetchStickers","fetchCustomEmoji","fetchAnimatedEmojis","fetchAnimatedEmojiEffects","fetchGenericEmojiEffects","fetchPremiumGifts","fetchDefaultTopicIcons","fetchDefaultStatusEmojis","searchStickers","fetchSavedGifs","gifs","processGifResult","saveGif","shouldUnsave","installStickerSet","stickerSetId","uninstallStickerSet","searchGifs","DEFAULT_GIF_SEARCH_BOT_USERNAME","resolvedPeer","foundGif","fetchStickersForEmoji","fetchEmojiKeywords","fromVersion","langCode","keywords","emojiKeyword","keyword","emoticons","fetchRecentEmojiStatuses","documentIds","statuses","RECENT_STATUS_LIMIT","emojiStatuses","ACCEPTABLE_USERNAME_ERRORS","USERNAME_PURCHASE_ERROR","checkChatUsername","errorMessage","setChatUsername","updatePrivateLink","fetchExportedChatInvites","admin","exportedInvites","invites","editExportedChatInvite","replaceInvite","oldInvite","newInvite","exportChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","fetchChatInviteImporters","offsetUser","importers","hideChatJoinRequest","isApproved","approved","hideAllChatJoinRequests","hideChatReportPanel","ApiErrors","EMAIL_UNCONFIRMED","EMAIL_HASH_EXPIRED","NEW_SALT_INVALID","NEW_SETTINGS_INVALID","CODE_INVALID","PASSWORD_HASH_INVALID","emailCodeController","getPasswordInfo","hint","hasPassword","onRequestEmailCode","checkPassword","isCheckPassword","onError","clearPassword","updatePassword","email","newPassword","emailCodeCallback","onEmailCodeError","updateRecoveryEmail","provideRecoveryEmailCode","errors","hours","ceil","answerCallbackButton","isGame","AnswerCallbackButtonReq","AnswerCallbackButtonRes","fetchTopInlineBots","botsInline","fetchInlineBot","fetchInlineBotResults","isGallery","gallery","help","webDocument","cacheTime","sendInlineBotResult","resultId","startBot","requestWebView","theme","isFromBotMenu","requestSimpleWebView","themeParams","prolongWebView","sendWebViewData","buttonText","loadAttachBots","bots","loadAttachBot","toggleAttachBot","isWriteAllowed","writeAllowed","requestBotUrlAuth","authResult","acceptBotUrlAuth","requestLinkUrlAuth","acceptLinkUrlAuth","getGroupCall","discardGroupCall","editGroupCallParticipant","presentationPaused","videoStopped","videoPaused","raiseHand","editGroupCallTitle","exportGroupCallInvite","fetchGroupCallParticipants","GROUP_CALL_PARTICIPANTS_LIMIT","leaveGroupCall","joinGroupCall","inviteHash","joinAs","createGroupCall","joinGroupCallPresentation","toggleGroupCallStartSubscription","subscribed","leaveGroupCallPresentation","getDhConfig","dhConfig","g","p","discardCall","isBusy","requestCall","setCallRating","rating","comment","receivedCall","acceptCall","confirmCall","gA","sendSignalingData","buildShippingOptions","shippingOptions","values","prices","ac","cur","label","buildApiReceipt","receipt","shipping","credentialsTitle","tipAmount","mappedPrices","shippingPrices","shippingMethod","buildApiPaymentForm","form","formId","canSaveCredentials","passwordMissing","isPasswordMissing","providerId","nativeProvider","nativeParams","savedInfo","savedCredentials","nameRequested","isNameRequested","phoneRequested","isPhoneRequested","emailRequested","isEmailRequested","shippingAddressRequested","isShippingAddressRequested","flexible","isFlexible","phoneToProvider","shouldSendPhoneToProvider","emailToProvider","shouldSendEmailToProvider","cleanedInfo","nativeData","invoiceContainer","needCardholderName","need_cardholder_name","needCountry","need_country","needZip","need_zip","publishableKey","publishable_key","publicToken","public_token","credentials","buildApiInvoiceFromForm","recurring","recurringTermsUrl","maxTipAmount","suggestedTipAmounts","isRecurring","tip","buildApiPremiumPromo","promo","statusText","statusEntities","videoSections","periodOptions","buildApiPremiumSubscriptionOption","canPurchaseUpgrade","validateRequestedInfo","inputInvoice","requestInfo","shouldSave","sendPaymentForm","requestedInfoId","shippingOptionId","savedCredentialId","temporaryPassword","inputCredentials","tmpPassword","getPaymentForm","getReceipt","fetchPremiumPromo","fetchTemporaryPaymentPassword","getTemporaryPaymentPassword","validUntil","reportPeer","reportProfilePhoto","changeSessionSettings","changeSessionTtl","days","authorizationTtlDays","buildEmojiSounds","appConfig","emojies_sounds","l","access_hash","fileReference","atob","file_reference_base64","getLimit","fallbackKey","DEFAULT_LIMITS","BETA_LANG_CODES","updateProfile","UpdateProfileReq","UpdateProfileRes","checkUsername","updateUsername","UpdateUsernameReq","UpdateUsernameRes","updateProfilePhoto","isFallback","fallback","uploadProfilePhoto","videoTs","UploadProfilePhotoReq","is_video","UploadProfilePhotoRes","uploadContactProfilePhoto","isSuggest","suggest","deleteProfilePhotos","photoIds","isDeleted","fetchWallpapers","filteredWallpapers","wallpapers","pattern","uploadWallpaper","fetchBlockedContacts","BLOCKED_LIST_LIMIT","blockedIds","unblockContact","fetchAuthorizations","authorizations","ttlDays","terminateAuthorization","terminateAllAuthorizations","fetchWebAuthorizations","webAuthorizations","terminateWebAuthorization","terminateAllWebAuthorizations","fetchNotificationExceptions","compareSound","fetchNotificationSettings","isMutedContactSignUpNotification","privateContactNotificationsSettings","groupNotificationsSettings","broadcastNotificationsSettings","privateSilent","privateMuteUntil","privateShowPreviews","groupSilent","groupMuteUntil","groupShowPreviews","broadcastSilent","broadcastMuteUntil","broadcastShowPreviews","hasContactJoinedNotifications","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","updateContactSignUpNotification","updateNotificationSettings","fetchLanguages","langPack","DEFAULT_LANG_PACK","fetchLangPack","sourceLangPacks","collections","strings","reverse","fetchLangStrings","fetchPrivacySettings","registerDevice","token","secret","getAuthKey","getKey","tokenType","appSandbox","otherUids","unregisterDevice","setPrivacySettings","privacyRules","allowedUsers","allowedChats","blockedUsers","blockedChats","updateIsOnline","isOnline","offline","fetchContentSettings","isSensitiveEnabled","sensitiveEnabled","canChangeSensitive","sensitiveCanChange","updateContentSettings","fetchAppConfig","emojiSounds","seenByMaxChatMembers","chat_read_mark_size_threshold","seenByExpiresAt","chat_read_mark_expire_period","autologinDomains","autologin_domains","autologinToken","autologin_token","urlAuthDomains","url_auth_domains","maxUniqueReactions","reactions_uniq_max","premiumBotUsername","premium_bot_username","premiumInvoiceSlug","premium_invoice_slug","premiumPromoOrder","premium_promo_order","isPremiumPurchaseBlocked","premium_purchase_blocked","defaultEmojiStatusesStickerSetId","default_emoji_statuses_stickerset_id","topicsPinnedLimit","topics_pinned_limit","maxUserReactionsDefault","reactions_user_max_default","maxUserReactionsPremium","reactions_user_max_premium","hiddenMembersMinCount","hidden_members_group_size_min","canDisplayAutoarchiveSetting","autoarchive_setting_available","limits","uploadMaxFileparts","stickersFaved","savedGifs","dialogFiltersChats","dialogFolderPinned","captionLength","channelsPublic","aboutLength","buildAppConfig","fetchConfig","fetchCountryList","countryList","fetchGlobalPrivacySettings","shouldArchiveAndMuteNewNonContact","archiveAndMuteNewNoncontactPeers","updateGlobalPrivacySettings","toggleUsername","reorderUsernames","sendWatchingEmojiInteraction","sendEmojiInteraction","v","getAvailableReactions","sendReaction","fetchMessageReactions","fetchMessageReactionsList","REACTION_LIST_LIMIT","setDefaultReaction","buildGraph","isPercentage","x","y","columns","hasSecondYAxis","y_scaled","types","y0","zoomToken","labelFormatter","xTickFormatter","tooltipFormatter","xTooltipFormatter","labels","hideCaption","subchart","show","isStacked","stacked","datasets","item","names","color","colors","substring","calculateMinimapRange","defaultZoom","range","minIndex","maxIndex","minimapRange","begin","labelFromIndex","labelToIndex","buildStatisticsOverview","previous","change","percentage","toFixed","fetchChannelStatistics","stats","growthGraph","followersGraph","muteGraph","topHoursGraph","languagesGraph","viewsBySourceGraph","newFollowersBySourceGraph","interactionsGraph","followers","viewsPerPost","sharesPerPost","enabledNotifications","total","recentTopMessages","recentMessageInteractions","fetchGroupStatistics","membersGraph","messagesGraph","actionsGraph","viewers","posters","fetchMessageStatistics","viewsGraph","fetchMessagePublicForwards","buildMessagePublicForwards","fetchStatisticsAsyncGraph","currentPhoneCallState","PhoneCallState","_defineProperty","waitForState","resolveState","pBN","Helpers","randomBN","pLast","randomLast","emojiData","emojiOffsets","authKey","fingerprint","emojiCount","partOffset","byteLength","subarray","and","shiftLeft","or","modPow","generateEmojiFingerprint","AuthKey","setKey","MTProtoState","Logger","seqArray","Uint32Array","seq","encodedData","encryptMessageData","then","decryptMessageData","createPhoneCallState","destroyPhoneCallState","encodePhoneCallData","encode","decodePhoneCallData","confirmPhoneCall","acceptPhoneCall","requestPhoneCall","flushUpdatesOnTickEnd","throttleWithTickEnd","throttleId","pendingUpdates","currentThrottleId","currentUpdates","flushUpdatesThrottled","handleUpdate","API_THROTTLE_RESET_UPDATES","API_UPDATE_THROTTLE","sendToOrigin","addEventListener","callbackState","Map","onmessage","initialLocalDb","initUpdater","initAuth","initChats","initMessages","initUsers","initStickers","initManagement","initTwoFaSettings","initBots","initCalls","initPayments","initClient","initApi","withCallback","callback","callbackArgs","lastArg","ArrayBuffer","BYPASS_API","response","fnName","methods","callApi","delete","adr","localStorage","getItem","AI_PROXY_API","MESSAGE_LIST_SLICE","window","innerHeight","parseEmojiOnlyString","KB_TO_BYTES","LARGE_FILE_THRESHOLD","DISCONNECT_SLEEP","MAX_CONCURRENT_CONNECTIONS","MAX_CONCURRENT_CONNECTIONS_PREMIUM","foremans","fill","Foreman","getFileId","fileParams","fileIdStr","isLarge","partSize","getUploadPartSize","partCount","floor","fileToBuffer","cipher","Api","parts","md5Checksum","uploadFileCache","activeCounts","activeWorkers","currentForemanIndex","promises","senderIndex","requestWorker","blobSlice","jMemo","blobSliceMemo","fileInfo","uploadReq","UploadReq","releaseWorker","sender","getSender","partBytes","send","filePart","fileTotalParts","sleep","RPCError","require","rpcErrorRe","Common","RPCBaseErrors","RPCErrorList","module","exports","RPCMessageToError","rpcError","msgRegex","Cls","m","capture","parseInt","parseTl","serializeDate","toSignedLittleBuffer","tlContent","schemeContent","CACHING_SUPPORTED","CACHE_KEY","extractParams","fileContent","f","functions","d","isFunction","argToBytes","writeInt32LE","writeDoubleLE","getArgFromReader","arg","isVector","useVectorId","readInt","temp","flagIndicator","readLong","readLargeInt","readDouble","tgReadString","tgReadBool","tgReadBytes","tgReadDate","skipConstructorId","tgReadObject","createClasses","classesType","classes","classParams","constructorId","subclassOfId","argsConfig","namespace","fullName","argName","isFlag","flagValue","flagGroup","flagIndex","idForBytes","writeUInt32LE","buffers","flagCalculate","boxed","charAt","toUpperCase","shift","readResult","definitions","fromCache","jsonCache","loadFromCache","constructorParamsApi","functionParamsApi","constructorParamsSchema","functionParamsSchema","requests","loadFromTlSchemas","setItem","obj1","obj2","mergeWithNamespaces","buildApiFromTlSchema","TIME_OUT_MS","ENABLE_GPT4","ALL_MODELS","available","isValidNumber","makeRequestParam","role","filterBot","model","stream","getHeaders","apiKey","requestChatStream","req","modelConfig","oldConfig","validator","max_tokens","presence_penalty","temperature","k","filterConfig","controller","AbortController","reqTimeoutId","abort","signal","clearTimeout","responseText","finish","onMessage","ok","getReader","decoder","TextDecoder","onController","resTimeoutId","read","done","onAbort","controllers","addController","sessionIndex","messageIndex","stop","remove","PbMsg","PbUser","EncryptType","DownloadMsgRes","GenMsgIdReq","GenMsgIdRes","MsgListReq","MsgListRes","UploadMsgReq","Mnemonic","words","lang","defineProperty","writable","setDefaultWordlist","generateMnemonic","getLang","getWords","checkMnemonic","validateMnemonic","toSeedBuffer","mnemonicToSeedSync","toSeedHex","toEntropy","mnemonicToEntropy","entropyToMnemonic","caches","Request","cache","open","contentType","Text","shouldRecreate","resolvedType","Json","cacheData","Response","put","clear","readAsDataURL","lastModified","blobToFile","fileBits","collection","byKey","object","stringKeys","array","fn","ms","shouldRunFirst","interval","_args","setInterval","clearInterval","schedulerFn","waiting","throttleWith","onTickEnd","onTickEndCallbacks","onTickEndPrimaryCallbacks","isPrimary","currentCallbacks","currentPrimaryCallbacks","cb","_serverTimeOffset","fitCount","peak","newData","springFactor","leftFiller","rightFiller","_data","_data$idx","_data2","idx","val","setMsgHandler","notifies","BotWebSocketNotifyAction","BotWebSocketState","setWsUrl","setSession","connect","waitForMsgServerState","UploadUserReq","time","bb","popByteBuffer","writeInt32","writeInt16","writeBytes","toUint8Array","DownloadUserRes","bbDecode","wrapByteBuffer","readInt32","readInt16","readBytes","buf2","isLocal","genMessageId","getMediaFileId","parseCodeBlock","cmd","parseEntities","isMsgCipher","aiBot","MsgChatGptWorker","handleMedia","handleBotCmdText","processOutGoing","processBotMsg","reconnect_cnt","seq_num","clients","currentMsgConn","autoConnect","sendMsgTimer","connect_none","__rev_msg_map","__sending_msg_map","wsUrl","getState","getChatId","getAutoConnect","setAutoConnect","notifyState","isConnect","close","logged","connecting","connected","WebSocket","binaryType","onopen","onConnected","bind","onData","onclose","onClose","reconnect","timeout","startTime","waitTime","msgHandler","__msgHandler","login","catch","AuthLoginReq","sign","notify","notifyList","getSeqNum","onConnectionStateChanged","connect_error","waitForMsgCallback","updateSeqNo","DEFAULT_PROMPT","ChatModelConfig","Crypto","ec","EC","PTP_HD_PATH","Wallet","mnemonic","seed","__masterKey","HDKey","getMashKey","getChild","root","childIndex","changeIndex","hex","childKey","derivePath","getWallet","getAddressString","prvKey","_hdkey","privateKey","pubKey","publicKey","pubKey_","getPublicKey","bufferToHex","getEthWallet","getPTPWallet","getPTPEncryptWallet","getGroupWallet","keccak224","keccak384","keccak256","keccak512","ecdsaRecover","publicKeyConvert","ecdsaSign","SignMsgType","assertIsBuffer","isBuffer","keccak","bits","bufferToInt","BN","toNumber","padToEven","setLengthLeft","setLength","right","allocUnsafe","copy","TypeOutput","isValidSigRecovery","recovery","rec","eqn","intToBuffer","isSafeInteger","intToHex","toBuffer","isHexString","str","isHexPrefixed","stripHexPrefix","isNeg","toArrayLike","toArray","toType","outputType","output","bn","MAX_SAFE_INTEGER","gt","calculateSigRecovery","chainId","vBN","subn","chainIdBN","sub","muln","addn","fromRpcSig","publicToAddress","sanitize","assert","EcdsaHelper","signMsgType","SignMsgType_ptp","prefix","SignMsgType_eth","SignMsgType_ptp_group","sig","msgHash","signature","recid","recovered","ecsign","getSignMsgData","msgData","sigParams","senderPubKey","ecrecover","getPublicKeyFor","ecrecoverPubKey65","getPublicKey65For","crypto","ALGORITHM","Aes256Gcm","iv","aad","createCipheriv","setAAD","ciphertext","final","tag","getAuthTag","cipherData","decipher","createDecipheriv","cipherData1","setAuthTag","plainData","KEYS_PREFIX","SESSIONS_PREFIX","LOCAL_key","LOCAL_iv","LOCAL_aad","currentAccountId","serverKvStore","clientKvStore","accountIds","accounts","uid","ts","parseSession","getClientKv","saveSessionByAddr","getSessionAddress","getSessionByAddr","addr","sessions","getSessions","getServerKv","setUid","getShareKey","shareKey","getIv","getAad","getAccountId","setUserInfo","userInfo","getUserInfo","getUid","hashSha256","getEntropy","getAddressFromEntropy","pasword","genEntropy","plain","wallet","encrypt","decrypt","pubKeyTo","plainBuffer","opts","ephemPrivKey","randomBytes","keyFromPrivate","ephemPubKey","getPublic","ephemPubKeyEncoded","pubKey1","keyFromPublic","px","derive","createHash","digest","encryptionKey","macKey","AES256CbcEncrypt","plaintext","firstChunk","secondChunk","dataToMac","mac","createHmac","EthEcies","privKey","encrypted","BufferEqual","b1","b2","AES256CbcDecrypt","getKeys","localEncrypt","localDecrypt","skipSave","saveKey","serverPubKey","ethWallet","ecdh","aesEncrypt","aesDecrypt","ecdsa","verifyRecoverAddress","recoverAddress","recoverAddressAndPubKey","verifyPwd","getInstance","genAccountId","setCurrentAccountId","accountIdsStr","randomize","db","SALT","sha256","currentTs","currentTs1000","blobToArrayBuffer","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","__webpack_exports__","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","getter","__esModule","definition","enumerable","chunkId","miniCssF","globalThis","Function","obj","prototype","Symbol","toStringTag","nmd","paths","children","scriptUrl","importScripts","currentScript","src","scripts","getElementsByTagName","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","moreModules","runtime","pop"],"sourceRoot":""}