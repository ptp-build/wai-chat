{"version":3,"file":"5769.498e10b6a4d7381b354a.js","mappings":"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B4H,WAAY93B,EAAS83B,WAAWC,WAChCyqF,mBAAoBxiH,EAAS83B,WAAWlf,UACxC6pG,gBAAiB7hH,GAAMunB,UAAYvnB,EAAKunB,SAASu6F,YACjDA,YAAapa,GAASngF,SAAYmgF,EAAQngF,SAASD,SAAS+nB,WAAY,OAAStxC,EACjFgkH,cAAera,GAASngF,UAAUD,SAAS+uB,WAC3CkqE,aACAt4F,aACAD,WACA84F,eACAN,qBACAE,sBACA9G,WAAYp8G,EAAO49B,WAAWC,KAC9B2mF,oBAAoBC,EAAAA,EAAAA,GAAezkH,EAAQG,GAC3CqgC,OAAOsiB,EAAAA,EAAAA,IAAY9iD,GACnB0kH,eAAe5zF,EAAAA,GAAAA,GAAmB9wB,EAAQ,sBAAwB2kH,EAAAA,IAClEC,cAAc9zF,EAAAA,GAAAA,GAAmB9wB,EAAQ,iBACzCymB,sBAAsBC,EAAAA,EAAAA,IAA2B1mB,GACjDqjH,wBACA1sG,mBAAoB3W,EAAO2W,mBAC5B,GAhGewpC,EArzCwB0kE,EAC1CC,gBACAjB,iBACAH,yBACAr+C,UACAjkB,WACA2jE,aACAtB,iBACAtjH,SACAC,WACAqE,kBACAuD,QACAxF,OACA4gH,0BACA38F,uBACA48F,wBACAprF,kBACAqrC,gBACAe,iBACAxM,YACA6sD,gBACAxgD,qBACAC,qBACAwyB,eACAzpF,YACAw1G,uBACAoB,yBACAF,sBACAI,mBACAC,sBACAC,mBACAC,kBACAnrG,gBACA4rG,eACA9sF,eACAz1B,uBACAigH,wBACAC,2BACAC,oBACA5wF,gBACArf,eACAmnB,aACA0qF,qBACAE,cACAD,kBACAtB,cACAt4F,cACAD,YACA84F,gBACAn7G,gBACA66G,sBACAE,uBACAqB,iBACAnI,cACAoI,sBACA7tG,sBACA6pB,aAEA,MAAM,YACJte,GAAW,WACX8iG,GAAU,WACV14F,GAAU,gBACVhqB,GAAe,cACfu9B,GAAa,eACbolF,GAAc,qBACdC,GAAoB,SACpB5hH,GAAQ,eACR6hH,GAAc,oBACdC,GAAmB,WACnBC,GAAU,uBACVC,GAAsB,cACtB3hF,GAAa,qBACb4hF,GA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","sources":["webpack://wai/./src/global/actions/ui/localSearch.ts","webpack://wai/./src/global/actions/ui/chats.ts","webpack://wai/./src/global/actions/ui/messages.ts","webpack://wai/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://wai/./src/global/actions/ui/globalSearch.ts","webpack://wai/./src/global/actions/ui/stickerSearch.ts","webpack://wai/./src/global/actions/ui/users.ts","webpack://wai/./src/util/updateIcon.ts","webpack://wai/./src/util/updatePageTitle.ts","webpack://wai/./src/global/actions/ui/misc.ts","webpack://wai/./src/global/actions/ui/payments.ts","webpack://wai/./src/global/actions/ui/mediaViewer.ts","webpack://wai/./src/global/actions/ui/passcode.ts","webpack://wai/./src/global/actions/api/messages.ts","webpack://wai/./src/global/actions/api/symbols.ts","webpack://wai/./src/global/actions/api/globalSearch.ts","webpack://wai/./src/global/actions/api/localSearch.ts","webpack://wai/./src/global/actions/api/management.ts","webpack://wai/./src/global/actions/api/sync.ts","webpack://wai/./src/global/actions/api/accounts.ts","webpack://wai/./src/global/actions/api/users.ts","webpack://wai/./src/global/reducers/bots.ts","webpack://wai/./src/util/PopupManager.ts","webpack://wai/./src/global/actions/api/bots.ts","webpack://wai/./src/global/actions/api/payments.ts","webpack://wai/./src/global/actions/api/twoFaSettings.ts","webpack://wai/./src/util/requestQuery.ts","webpack://wai/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://wai/./src/global/reducers/reactions.ts","webpack://wai/./src/global/actions/api/reactions.ts","webpack://wai/./src/global/actions/api/statistics.ts","webpack://wai/./src/global/actions/apiUpdaters/chats.ts","webpack://wai/./src/worker/share/utils/stringParse.ts","webpack://wai/./src/global/actions/apiUpdaters/messages.ts","webpack://wai/./src/worker/msg/msgHelper.ts","webpack://wai/./src/global/actions/apiUpdaters/users.ts","webpack://wai/./src/global/actions/apiUpdaters/symbols.ts","webpack://wai/./src/global/actions/apiUpdaters/misc.ts","webpack://wai/./src/global/actions/apiUpdaters/settings.ts","webpack://wai/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://wai/./src/global/actions/apiUpdaters/calls.ts","webpack://wai/./src/global/actions/apiUpdaters/payments.ts","webpack://wai/./src/hooks/useBeforeUnload.ts","webpack://wai/./src/hooks/usePreventPinchZoomGesture.ts","webpack://wai/./src/components/common/StickerSetModal.async.tsx","webpack://wai/./src/components/common/UnreadCounter.tsx","webpack://wai/./src/hooks/useConnectionStatus.ts","webpack://wai/./src/hooks/useBrowserOnline.ts","webpack://wai/./src/components/left/ConnectionStatusOverlay.tsx","webpack://wai/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://wai/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://wai/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://wai/./src/components/left/main/StatusButton.tsx","webpack://wai/./src/components/left/main/LeftMainHeader.tsx","webpack://wai/./src/util/permanentWebVersion.ts","webpack://wai/./src/components/ui/Tab.tsx","webpack://wai/./src/components/ui/TabList.tsx","webpack://wai/./src/components/left/main/ChatFolders.tsx","webpack://wai/./src/components/left/search/LeftSearch.async.tsx","webpack://wai/./src/components/left/main/ContactList.async.tsx","webpack://wai/./src/components/left/NewChatButton.tsx","webpack://wai/./src/components/left/main/LeftMain.tsx","webpack://wai/./src/components/left/settings/Settings.async.tsx","webpack://wai/./src/components/left/newChat/NewChat.async.tsx","webpack://wai/./src/components/left/ArchivedChats.async.tsx","webpack://wai/./src/components/left/LeftColumn.tsx","webpack://wai/./src/hooks/useResize.ts","webpack://wai/./src/components/middle/PinnedMessageNavigation.tsx","webpack://wai/./src/components/middle/HeaderPinnedMessage.tsx","webpack://wai/./src/hooks/useMessageMediaMetadata.ts","webpack://wai/./src/components/middle/AudioPlayer.tsx","webpack://wai/./src/components/middle/ChatReportPanel.tsx","webpack://wai/./src/components/middle/MiddleHeader.tsx","webpack://wai/./src/components/middle/helpers/groupMessages.ts","webpack://wai/./src/components/middle/hooks/useStickyDates.ts","webpack://wai/./src/components/middle/hooks/useScrollHooks.ts","webpack://wai/./src/components/middle/hooks/useMessageObservers.ts","webpack://wai/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://wai/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://wai/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://wai/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://wai/./src/util/languageDetection.ts","webpack://wai/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://wai/./src/components/middle/ActionMessage.tsx","webpack://wai/./src/components/common/EmbeddedMessage.tsx","webpack://wai/./src/components/middle/message/MessageMeta.tsx","webpack://wai/./src/components/middle/message/Sticker.tsx","webpack://wai/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://wai/./src/components/middle/message/AnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://wai/./src/components/middle/message/Video.tsx","webpack://wai/./src/components/middle/message/Contact.tsx","webpack://wai/./src/components/middle/message/PollOption.tsx","webpack://wai/./src/components/middle/message/Poll.tsx","webpack://wai/./src/components/middle/message/WebPage.tsx","webpack://wai/./src/components/middle/message/Invoice.tsx","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://wai/./src/util/map.ts","webpack://wai/./src/components/middle/message/Location.tsx","webpack://wai/./src/components/middle/message/Game.tsx","webpack://wai/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://wai/./src/components/middle/message/Album.tsx","webpack://wai/./src/components/middle/message/RoundVideo.tsx","webpack://wai/./src/components/middle/message/InlineButtons.tsx","webpack://wai/./src/components/middle/message/CommentButton.tsx","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/ReactionButton.tsx","webpack://wai/./src/components/middle/message/Reactions.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://wai/./src/components/common/TopicChip.tsx","webpack://wai/./src/components/common/TopicChip.module.scss?5208","webpack://wai/./src/components/middle/message/Message.tsx","webpack://wai/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://wai/./src/hooks/useTextLanguage.ts","webpack://wai/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://wai/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://wai/./src/components/common/AboutAdsModal.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessage.tsx","webpack://wai/./src/components/middle/MessageListContent.tsx","webpack://wai/./src/components/middle/ContactGreeting.tsx","webpack://wai/./src/components/middle/NoMessages.tsx","webpack://wai/./src/components/middle/MessageList.tsx","webpack://wai/./src/hooks/useNativeCopySelectedMessages.ts","webpack://wai/./src/components/middle/ScrollDownButton.tsx","webpack://wai/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://wai/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://wai/./src/components/middle/FloatingActionButtons.tsx","webpack://wai/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://wai/./src/util/audio.ts","webpack://wai/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://wai/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://wai/./src/util/voiceRecording.ts","webpack://wai/./src/lib/cleanDocsHtml.ts","webpack://wai/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://wai/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://wai/./src/components/middle/composer/hooks/useDraft.ts","webpack://wai/./src/components/common/DeleteMessageModal.async.tsx","webpack://wai/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://wai/./src/components/middle/composer/AttachBotIcon.tsx","webpack://wai/./src/components/middle/composer/AttachBotItem.tsx","webpack://wai/./src/components/middle/composer/AttachMenu.tsx","webpack://wai/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://wai/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://wai/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://wai/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://wai/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://wai/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://wai/./src/components/middle/composer/PollModal.async.tsx","webpack://wai/./src/components/middle/composer/DropArea.async.tsx","webpack://wai/./src/components/middle/composer/WebPagePreview.tsx","webpack://wai/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://wai/./src/components/middle/composer/BotMenuButton.tsx","webpack://wai/./src/components/middle/composer/Composer.tsx","webpack://wai/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://wai/./src/components/middle/composer/hooks/useEditing.ts","webpack://wai/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://wai/./src/components/middle/MobileSearch.async.tsx","webpack://wai/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://wai/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://wai/./src/components/common/SeenByModal.async.tsx","webpack://wai/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://wai/./src/components/middle/ReactorListModal.async.tsx","webpack://wai/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://wai/./src/components/middle/MessageLanguageModal.async.tsx","webpack://wai/./src/components/middle/MiddleColumn.tsx","webpack://wai/./src/hooks/useCustomBackground.ts","webpack://wai/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://wai/./src/components/right/RightHeader.tsx","webpack://wai/./src/components/right/hooks/useProfileViewportIds.ts","webpack://wai/./src/components/right/hooks/useProfileState.ts","webpack://wai/./src/components/right/Profile.tsx","webpack://wai/./src/components/right/hooks/useTransitionFixes.ts","webpack://wai/./src/hooks/useCacheBuster.ts","webpack://wai/./src/components/right/RightSearch.async.tsx","webpack://wai/./src/components/right/management/Management.async.tsx","webpack://wai/./src/components/right/statistics/Statistics.async.tsx","webpack://wai/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://wai/./src/components/right/StickerSearch.async.tsx","webpack://wai/./src/components/right/GifSearch.async.tsx","webpack://wai/./src/components/right/PollResults.async.tsx","webpack://wai/./src/components/right/AddChatMembers.tsx","webpack://wai/./src/components/right/CreateTopic.async.tsx","webpack://wai/./src/components/right/EditTopic.async.tsx","webpack://wai/./src/components/right/RightColumn.tsx","webpack://wai/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://wai/./src/util/download.ts","webpack://wai/./src/components/main/DownloadManager.tsx","webpack://wai/./src/components/main/GameModal.tsx","webpack://wai/./src/components/main/Notifications.async.tsx","webpack://wai/./src/components/main/Dialogs.async.tsx","webpack://wai/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://wai/./src/components/main/SafeLinkModal.async.tsx","webpack://wai/./src/components/main/HistoryCalendar.async.tsx","webpack://wai/./src/components/calls/group/GroupCall.async.tsx","webpack://wai/./src/components/calls/ActiveCallHeader.async.tsx","webpack://wai/./src/components/calls/phone/PhoneCall.async.tsx","webpack://wai/./src/components/middle/MessageListHistoryHandler.tsx","webpack://wai/./src/components/main/NewContactModal.async.tsx","webpack://wai/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://wai/./src/components/main/WebAppModal.async.tsx","webpack://wai/./src/components/main/BotTrustModal.async.tsx","webpack://wai/./src/components/main/AttachBotInstallModal.async.tsx","webpack://wai/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://wai/./src/components/main/ConfettiContainer.tsx","webpack://wai/./src/components/main/UrlAuthModal.async.tsx","webpack://wai/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://wai/./src/components/payment/PaymentModal.async.tsx","webpack://wai/./src/components/payment/ReceiptModal.async.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://wai/./src/components/main/DeleteFolderDialog.async.tsx","webpack://wai/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://wai/./src/components/main/DraftRecipientPicker.async.tsx","webpack://wai/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://wai/./src/components/ui/PasswordModal.tsx","webpack://wai/./src/components/common/QrCode.tsx","webpack://wai/./src/components/ui/MnemonicModal.tsx","webpack://wai/./src/components/ui/PickBotModal.tsx","webpack://wai/./src/components/ui/GlobalModal.tsx","webpack://wai/./src/components/main/Main.tsx","webpack://wai/./src/components/main/LockScreen.tsx","webpack://wai/./src/components/main/LockScreen.module.scss?8252","webpack://wai/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage, updateFocusedMessageReached, toggleMessageSelectAll,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage, selectChatMessage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\nimport {MessageStoreRow_Type, PbMsg_Type} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {currentTs} from \"../../../worker/share/utils/utils\";\nimport MsgCommandSetting from \"../../../worker/msg/MsgCommandSetting\";\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('onSpeak', (global, actions, payload): ActionReturnType => {\n  const { messageId,chatId, tabId = getCurrentTabId() } = payload;\n  const utterance = new SpeechSynthesisUtterance();\n  var selectedText = \"\";\n  if (window.getSelection) {\n    selectedText = window.getSelection().toString();\n  } else if (document.selection && document.selection.type != \"Control\") {\n    selectedText = document.selection.createRange().text;\n  }\n  if(!selectedText){\n    const message = selectChatMessage(global,chatId,messageId)\n    if(message?.content.text?.text){\n      selectedText = message!.content!.text!.text\n    }\n  }\n  if(selectedText){\n    utterance.lang = 'zh-CN';\n    utterance.text = selectedText\n    speechSynthesis.speak(utterance)\n  }\n})\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n  const messages = selectChatMessages(global,chatId);\n  const {content} = messages[lastOwnEditableMessageId]\n  if(content.text && content.text){\n    actions.saveDraft({\n      chatId, threadId,\n      draft:{\n        text:content.text.text,\n        entities:content.text.entities\n      }\n      , shouldForce:true,\n    })\n    // return replaceThreadParam(global, chatId, threadId, 'editingId', {text:lastOwnEditableMessageId.toString()});\n  }\n\n  // return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\n\naddActionHandler('toggleMessageSelectAll', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n  return toggleMessageSelectAll(global, chatId, tabId);\n});\n\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('saveMsgToCloud', async (global, actions, payload): ActionReturnType => {\n  let { chatId,msgId,tabId = getCurrentTabId() } = payload || {};\n  let messageIds = []\n  if(chatId){\n    messageIds = [msgId]\n  }else{\n    const tabState = selectTabState(global, tabId);\n\n    if (!tabState.selectedMessages) {\n      return;\n    }\n    chatId =tabState.selectedMessages.chatId;\n    messageIds =tabState.selectedMessages.messageIds;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId)\n  if (!chatMessages) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id!])\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const messages1:MessageStoreRow_Type[] = [];\n\n  for (let i = 0; i < messages.length; i++) {\n    // @ts-ignore\n    const message:PbMsg_Type = messages[i]\n    messages1.push({\n      time:currentTs(),\n      message,\n      messageId:message.id,\n    })\n  }\n  await new MsgCommandSetting(chatId).uploadMsgList(messages1)\n  if(tabId){\n    global = getGlobal();\n    global = exitMessageSelectMode(global, tabId);\n    setGlobal(global)\n  }\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: false, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, tabId]\n    : global.blurredTabTokens.filter((t) => t !== tabId));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (messageList && canDisplayChatInTitle) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, undefined, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  // storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ActionReturnType, ApiDraft, GlobalState, TabArgs,} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiBotInfo,\n  ApiChat, ApiFormattedText,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {MAIN_THREAD_ID, MESSAGE_DELETED,} from '../../../api/types';\nimport {LoadMoreDirection} from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport {IS_IOS} from '../../../util/environment';\nimport {callApi, cancelApiProgress} from '../../../api/gramjs';\nimport {areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  leaveChat,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingIds,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadTopMessageId,\n  selectUser,\n  selectViewportIds,\n} from '../../selectors';\nimport {debounce, onTickEnd, rafPromise,} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isLocalMessageId,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {translate} from '../../../util/langProvider';\nimport {ensureProtocol} from '../../../util/ensureProtocol';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport Account from \"../../../worker/share/Account\";\nimport {replaceSubstring} from \"../../../worker/share/utils/utils\";\nimport {blobToBuffer, fetchBlob} from \"../../../util/files\";\nimport {popByteBuffer, toUint8Array, writeBytes, writeInt16} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport {resizeImage} from \"../../../util/imageResize\";\nimport {UserIdChatGpt, UserIdFirstBot} from \"../../../worker/setting\";\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\nimport {getPasswordFromEvent} from '../../../worker/share/utils/password';\nimport {AiHistoryType} from \"../../../worker/msg/MsgChatGpWorker\";\nimport MsgCommandChatGpt from \"../../../worker/msg/MsgCommandChatGpt\";\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\nlet _userMaxMsgId:number;\n\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n  let { chatId, threadId } = payload || {};\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId, type } = currentMessageList;\n  payload = omit(payload, ['tabId']);\n  const {currentUserId} = getGlobal();\n\n  if(payload.attachments){\n    const hasMessageEntitySpoiler = payload.attachments.find((a:ApiAttachment)=>a.shouldSendAsSpoiler);\n    if(hasMessageEntitySpoiler){\n      const {password,hint} = await getPasswordFromEvent(undefined,false,'messageEncryptPassword');\n      if(password){\n        let {attachments} = payload;\n        for (let i = 0; i < attachments.length; i++) {\n          const attachment = attachments[i];\n          const {blobUrl,mimeType} = attachment;\n          const buf = await blobToBuffer(await fetchBlob(blobUrl));\n          const cipher = await Account.getCurrentAccount()?.encryptData(buf, password)\n          const bb = popByteBuffer();\n          const hintLen = (hint ? hint.length:0)\n          const typeLen = mimeType.length;\n          writeInt16(bb, 2);\n          writeBytes(bb,Buffer.from(\"EN\"));\n          writeInt16(bb, typeLen);\n          writeBytes(bb,Buffer.from(mimeType));\n          writeInt16(bb, hintLen);\n          if(hintLen){\n            writeBytes(bb,Buffer.from(hint||\"\"));\n          }\n          const res = toUint8Array(bb);\n          const blob = new Blob([Buffer.from(res),Buffer.from(cipher!)], { type: attachment.mimeType });\n          payload.attachments[i].encryptUrl = URL.createObjectURL(blob)\n        }\n      }else{\n        return undefined\n      }\n    }\n  }\n  let {attachments} = payload;\n  if(attachments){\n    for (let i = 0; i < attachments.length; i++) {\n      const attachment = attachments[i];\n      const {mimeType,encryptUrl,blobUrl} = attachment;\n      if(mimeType.indexOf(\"image/\") === 0){\n        const size = encryptUrl ? 10 : 40;\n        const quality = 0.1;\n        attachment.thumbBlobUrl = await resizeImage(\n          blobUrl, size,size, 'image/jpeg',quality\n        );\n      }\n    }\n  }\n  if(payload.text && payload.entities && payload.entities!.length > 0){\n    let {entities,text} = payload;\n    const hasMessageEntitySpoiler = entities.find((entity:ApiMessageEntity)=>entity.type === \"MessageEntitySpoiler\");\n    if(hasMessageEntitySpoiler){\n      const {password,hint} = await getPasswordFromEvent(undefined,false,'messageEncryptPassword');\n      if(password){\n        for (let i = 0; i < entities.length; i++) {\n          if(entities[i].type === \"MessageEntitySpoiler\"){\n            const entity = payload.entities[i];\n            const {offset,length} = entity;\n            const cipher = await Account.getCurrentAccount()?.encryptData(Buffer.from(text.substr(offset,length)), password)\n            payload.text = replaceSubstring(payload.text,offset,length,\"x\".repeat(length));\n            //@ts-ignore\n            payload.entities[i] = {...entity,cipher:cipher.toString(\"hex\"),hint}\n          }\n        }\n        console.log(payload)\n      }else{\n        return undefined\n      }\n    }\n  }\n\n  global = getGlobal();\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectUser(global, global.currentUserId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\n// @ts-ignore\naddActionHandler('editMessage', async (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n  await MsgDispatcher.reRunAi(chatId,message.id,text)\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', async (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  try {\n    void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n    const {lastMessage} = global.chats.byId[chatId];\n\n    if(lastMessage && lastMessage.id){\n      if(messageIds.includes(lastMessage.id)){\n        const t = getGlobal()\n        setGlobal({\n          ...t,\n          chats:{\n            ...t.chats,\n            byId:{\n              ...t.chats.byId,\n              [chatId]:{\n                ...t.chats.byId[chatId],\n                lastMessage:undefined\n              }\n            }\n          }\n        })\n      }\n    }\n\n    const editingId = selectEditingId(global, chatId, threadId);\n    if (editingId && messageIds.includes(editingId)) {\n      actions.setEditingId({ messageId: undefined, tabId });\n    }\n  }catch (e){\n    console.error(e)\n  }\n\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n  if([UserIdFirstBot,UserIdChatGpt].includes(chatId)) return\n  // await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  global = getGlobal();\n  const {chatIdsDeleted} = global;\n  if(!chatIdsDeleted.includes(chatId)){\n    chatIdsDeleted.push(chatId)\n  }\n  global = {\n    ...global,\n    messagesDeleted:{\n      ...global.messagesDeleted,\n      [chatId]:[]\n    }\n  }\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nconst loadViewportMessagesCache:Record<string, boolean> = {};\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  let flag = false;\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].lastViewportIds == undefined){\n    global = safeReplaceViewportIds(global, chatId, threadId, [], tabId);\n    flag = true;\n  }\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].listedIds == undefined){\n    global = updateListedIds(global, chatId, threadId, [])\n    flag = true;\n  }\n\n  if(flag){\n    setGlobal(global)\n  }\n  const lastMessageId = chat?.lastMessage ? chat?.lastMessage.id : 0;\n  const messages1 = selectChatMessages(global,chat!.id)\n\n  let isUp = true;\n  let listedIds1 = selectListedIds(global, chatId, threadId);\n  const ids1:number[]= []\n  listedIds1?.forEach((id:number)=>{\n    if(!isLocalMessageId(id)){\n      ids1.push(id)\n    }\n  })\n\n  if((ids1.length > 1 && ids1[ids1.length - 1] < lastMessageId) || Object.keys(messages1).length === 0){\n    isUp = false;\n  }\n  let result;\n  try{\n    if(loadViewportMessagesCache[chat.id]){\n      return\n    }\n    // console.log(\"[MsgListReq]\",{chatId:chat.id,lastMessageId,isUp})\n    loadViewportMessagesCache[chat.id] = true;\n    result = await callApi('fetchMessages', {\n      chat: selectChat(global, chatId)!,\n      offsetId,\n      addOffset,\n      limit: MESSAGE_LIST_SLICE,\n      threadId,\n      lastMessageId,\n      isUp\n    });\n  }catch (e){\n\n  }\n  setTimeout(()=>{delete loadViewportMessagesCache[chat.id]},1000)\n  if (!result) {\n    return;\n  }\n\n  let {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  if(messages.length > 0 && lastMessageId < messages[messages.length - 1].id){\n    chat.lastMessage = messages[messages.length - 1];\n    if(!chats){\n      chats = []\n    }\n    chats.push(chat)\n  }\n\n  console.log(\"[MsgListRes]\",messages,users)\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nexport function getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n  botInfo?:ApiBotInfo;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? async (progress: number, localMessage: ApiMessage) => {\n    const messageLocalId = localMessage.id;\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : async (progress: number, localMessage: any)=>{\n\n  }\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  const user = selectUser(global,params.chat.id);\n  params.botInfo = user?.fullInfo?.botInfo ? user?.fullInfo?.botInfo:undefined\n\n  const res = await new MsgDispatcher(params).process()\n  if(!res){\n    await callApi('sendMessage', params, progressCallback);\n    // @ts-ignore\n    if (progressCallback && localId) {\n      uploadProgressCallbacks.delete(localId);\n    }\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n  const messages:Record<number, ApiFormattedText> = {}\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n    messages[parseInt(id)] = selectChatMessage(global,chatId,id)?.content.text!\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    messages,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentGlobalSearchQuery,\n  selectTabState, selectUser\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      global = getGlobal();\n      const chatListIdsActive = global.chats.listIds.active;\n      if(!chatListIdsActive){\n        return;\n      }\n      const messagesList:ApiMessage[] = []\n      const chatIds:string[] = [];\n      const userIds:string[] = [];\n      const userIdList = Object.keys(global.users.byId);\n      for (let i = 0; i < userIdList.length; i++) {\n        const userId = userIdList[i]\n        const user = selectUser(global,userId)\n        if(\n          chatListIdsActive.includes(userId) && (\n            (user?.firstName && user?.firstName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.lastName && user?.lastName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.fullInfo && user?.fullInfo.bio && user?.fullInfo.bio.toLowerCase().indexOf(query.toLowerCase()) > -1)\n          )\n          ){\n          chatIds.push(userId)\n        }\n      }\n\n      for (let i = 0; i < chatListIdsActive.length; i++) {\n        const chatId = chatListIdsActive[i]\n        const chat = selectChat(global,chatId)\n        if(chat && chat?.title.indexOf(query) > -1 && !chatIds.includes(chat?.id)){\n          chatIds.push(chat?.id)\n        }\n        const messages = selectChatMessages(global,chatId)\n        if(messages){\n          const messageIds = Object.keys(messages);\n          for (let i = 0; i < messageIds.length; i++) {\n            const messageId = Number(messageIds[i])\n            const message = selectChatMessage(global,chatId,messageId)\n            if(message?.content && message?.content.text && message?.content.text.text){\n              if(message?.content.text.text.toLowerCase().indexOf(query.toLowerCase()) > -1){\n                messagesList.push(message)\n              }\n            }\n          }\n        }\n\n      }\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (messagesList.length === 0 || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n      global = updateGlobalSearchResults(global,messagesList,messagesList.length,\"text\",0,tabId)\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds,\n          userIds\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n\n  //\n  // const { query, tabId = getCurrentTabId() } = payload!;\n  // const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  // if (query && !chatId) {\n  //   void searchThrottled(async () => {\n  //     const result = await callApi('searchChats', { query });\n  //\n  //     global = getGlobal();\n  //     const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  //     if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n  //       global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //       setGlobal(global);\n  //       return;\n  //     }\n  //\n  //     const {\n  //       localChats, localUsers, globalChats, globalUsers,\n  //     } = result;\n  //\n  //     if (localChats.length || globalChats.length) {\n  //       global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  //     }\n  //\n  //     if (localUsers.length || globalUsers.length) {\n  //       global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  //     }\n  //\n  //     global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //     global = updateGlobalSearch(global, {\n  //       localResults: {\n  //         chatIds: localChats.map(({ id }) => id),\n  //         userIds: localUsers.map(({ id }) => id),\n  //       },\n  //       globalResults: {\n  //         ...selectTabState(global, tabId).globalSearch.globalResults,\n  //         chatIds: globalChats.map(({ id }) => id),\n  //         userIds: globalUsers.map(({ id }) => id),\n  //       },\n  //     }, tabId);\n  //\n  //     setGlobal(global);\n  //   });\n  // }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  return\n  console.log(\"searchMessagesGlobal\")\n  // let result: {\n  //   messages: ApiMessage[];\n  //   users: ApiUser[];\n  //   chats: ApiChat[];\n  //   topics?: ApiTopic[];\n  //   totalTopicsCount?: number;\n  //   totalCount: number;\n  //   nextRate: number | undefined;\n  // } | undefined;\n  //   console.log(\"searchMessagesGlobal\")\n  // if (chat) {\n  //   const localResultRequest = callApi('searchMessagesLocal', {\n  //     chat,\n  //     query,\n  //     type,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     offsetId: offsetRate,\n  //     minDate,\n  //     maxDate,\n  //   });\n  //   const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n  //     chat,\n  //     query,\n  //     limit: GLOBAL_TOPIC_SEARCH_SLICE,\n  //   }) : undefined;\n  //\n  //   const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n  //\n  //   if (localResult) {\n  //     const {\n  //       messages, users, totalCount, nextOffsetId,\n  //     } = localResult;\n  //\n  //     const { topics: localTopics, count } = topics || {};\n  //\n  //     result = {\n  //       topics: localTopics,\n  //       totalTopicsCount: count,\n  //       messages,\n  //       users,\n  //       chats: [],\n  //       totalCount,\n  //       nextRate: nextOffsetId,\n  //     };\n  //   }\n  // } else {\n  //   result = await callApi('searchMessagesGlobal', {\n  //     query,\n  //     offsetRate,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     type,\n  //     maxDate,\n  //     minDate,\n  //   });\n  // }\n  //\n  // global = getGlobal();\n  // const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  // if (!result || (query !== '' && query !== currentSearchQuery)) {\n  //   global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  //\n  // const {\n  //   messages, users, chats, totalCount, nextRate,\n  // } = result;\n  //\n  // if (chats.length) {\n  //   global = addChats(global, buildCollectionByKey(chats, 'id'));\n  // }\n  //\n  // if (users.length) {\n  //   global = addUsers(global, buildCollectionByKey(users, 'id'));\n  // }\n  //\n  // if (messages.length) {\n  //   global = addMessages(global, messages);\n  // }\n  //\n  // global = updateGlobalSearchResults(\n  //   global,\n  //   messages,\n  //   totalCount,\n  //   type,\n  //   nextRate,\n  //   tabId,\n  // );\n  //\n  // if (result.topics) {\n  //   global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  // }\n  //\n  // const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  // global = updateGlobalSearch(global, {\n  //   foundTopicIds: sortedTopics,\n  // }, tabId);\n  //\n  // setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport {ManagementProgress} from '../../../types';\nimport type {ActionReturnType} from '../../types';\n\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addUsers,\n  updateChat,\n  updateManagement,\n  updateManagementProgress,\n  updateUsers,\n} from '../../reducers';\nimport {selectChat, selectCurrentMessageList, selectTabState, selectUser,} from '../../selectors';\nimport {ensureIsSuperGroup} from './chats';\nimport {getUserFirstOrLastName} from '../../helpers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\nimport {blobToDataUri, fetchBlob, imgToBlob} from \"../../../util/files\";\nimport {resizeImage} from \"../../../util/imageResize\";\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  const blob = await imgToBlob(file!);\n  const thumbnailUrl = await resizeImage(blob,40,40,file!.type,0.1);\n  const thumbnail = await blobToDataUri(await fetchBlob(thumbnailUrl));\n  result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n    thumbnail,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  // @ts-ignore\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  // const newUser = await callApi('fetchFullUser', { id, accessHash });\n  // if (!newUser) {\n  //   global = getGlobal();\n  //   global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  // actions.loadProfilePhotos({ profileId: userId });\n  global = getGlobal();\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getActions, getGlobal, setGlobal,} from '../../index';\nimport {addCallback} from '../../../lib/teact/teactn';\n\nimport type {ApiChat, ApiMessage} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {ActionReturnType, GlobalState, Thread} from '../../types';\n\nimport {DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport {init as initFolderManager} from '../../../util/folderManager';\nimport {updateTabState} from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n  const { loadAllChats, preloadTopChatMessages, } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      // await loadAndReplaceMessages(global, actions);\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState,msgClientState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (\n    previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState\n  )) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (\n    connectionState === 'connectionStateReady' && authState === 'authorizationStateReady'\n  ) {\n    if(DEBUG){\n      console.log({connectionState,msgClientState,authState})\n    }\n    getActions().sync();\n  }\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiUser} from '../../../api/types';\nimport {ManagementProgress} from '../../../types';\n\nimport {throttle} from '../../../util/schedulers';\nimport {buildCollectionByKey, unique} from '../../../util/iteratees';\nimport {isUserBot, isUserId} from '../../helpers';\nimport {callApi} from '../../../api/gramjs';\nimport {selectChat, selectCurrentMessageList, selectTabState, selectUser,} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {getServerTime} from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type {ActionReturnType} from '../../types';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  // if (!user.isContact && user.phoneNumber) {\n  //   result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  // } else {\n  //   const { id, accessHash } = user;\n  //   result = await callApi('updateContact', {\n  //     id,\n  //     accessHash,\n  //     phoneNumber: '',\n  //     firstName,\n  //     lastName,\n  //     shouldSharePhoneNumber,\n  //   });\n  // }\n  result = {};\n  global = getGlobal();\n  if (result) {\n    // actions.loadChatSettings({ chatId: userId });\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n  }\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ActionReturnType, GlobalState, TabArgs} from '../../types';\nimport type {ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {InlineBotSettings} from '../../../types';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectReplyingToId,\n  selectSendAs,\n  selectTabState,\n  selectThreadTopMessageId,\n  selectUser,\n} from '../../selectors';\nimport {addChats, addUsers, removeBlockedContact} from '../../reducers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {debounce} from '../../../util/schedulers';\nimport {replaceInlineBotSettings, replaceInlineBotsIsLoading} from '../../reducers/bots';\nimport {getServerTime} from '../../../util/serverTime';\nimport {extractCurrentThemeParams} from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\nimport {openSystemFilesDialog} from \"../../../util/systemFilesDialog\";\nimport {SUPPORTED_IMAGE_CONTENT_TYPES} from \"../../../config\";\nimport MsgCommand from \"../../../worker/msg/MsgCommand\";\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      new MsgCommand(chat.id).answerCallbackButton(global,messageId,button.data);\n      // void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestUploadImage':\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      openSystemFilesDialog(\n        Array.from(SUPPORTED_IMAGE_CONTENT_TYPES).join(','),\n        async (e) => {\n          const { files } = e.target as HTMLInputElement;\n          await new MsgCommand(chat.id).requestUploadImage(global,messageId,files);\n        },\n        true\n      );\n      break;\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n  actions.focusLastMessage()\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  const global = getGlobal();\n  const user = selectUser(global,chat.id)\n  const params = {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n    botInfo:user?.fullInfo?.botInfo\n  }\n  const res = await new MsgDispatcher(params).process()\n  if(!res){\n    await callApi('sendMessage', params);\n  }\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\nimport {isLocalMessageId} from \"../../helpers\";\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n      const listActiveIds = global.chats.listIds.active\n      if(!listActiveIds.includes(update.chat.id)){\n        listActiveIds.push(update.chat.id)\n        global = {\n          ...global,\n          chats:{\n            ...global.chats,\n            listIds:{\n              ...global.chats.listIds,\n              active:listActiveIds\n            }\n          }\n        }\n      }\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n      if(!isLocalMessageId(message.id!)){\n        // global = updateChat(global, update.chatId, {\n        //   unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        //   ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        // });\n        global = updateChat(global, update.chatId, {\n          unreadCount:0,\n          unreadMentionsCount:0,\n        });\n      }\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import {ApiMessageEntityTypes} from \"../../../api/types\";\n\nexport function parseCodeBlock(text:string,entities?:any[]) {\n  const reg = /```(.*?)\\n([\\s\\S]*?)```/g;\n  if(text.indexOf(\"```\") >= 0 && text.split(\"```\").length % 2 === 0){\n    text =  text+\"```\";\n  }\n  let result = text;\n  let match;\n  let codeBlock = [];\n  let i = 0;\n  let j = 0;\n  while (match = reg.exec(text)) {\n    codeBlock.push({\n      type:ApiMessageEntityTypes.Pre,\n      language: match[1],\n      offset: match.index - 6 * i - j,\n      length: match[2].length\n    });\n    j += match[1].length+1\n    result = result.replace(match[0],  match[2]);\n    ++i;\n  }\n  if(!entities){\n    entities = []\n  }\n  return {\n    text:result.endsWith(\"```\") ? result.substring(0,result.indexOf(\"```\")): result,\n    entities:[\n      ...codeBlock,\n      ...entities\n    ]\n  };\n}\n\nfunction parseMentionName(text:string) {\n  const regex = /@\\w+/g;\n  let match;\n  let result = [];\n  while ((match = regex.exec(text)) !== null) {\n    result.push({\n      type:ApiMessageEntityTypes.MentionName,\n      offset: match.index,\n      length: match[0].length\n    });\n  }\n  return result\n}\nexport function parseCmd(text: string, commands: string[]) {\n  if (commands.length === 0) return [];\n  const regex = new RegExp(`(?<=\\\\/)(${commands.join('|')})\\\\b`, 'g');\n  const matches = [];\n  let match;\n  while ((match = regex.exec(text)) !== null) {\n    matches.push({\n      type: 'MessageEntityBotCommand',\n      offset: match.index-1,\n      length: match[0].length+1\n    });\n  }\n  return matches;\n}\n\nexport function parseEntities(text:string,commands:string[]){\n  return [\n    ...parseCmd(text,commands),\n    ...parseMentionName(text),\n  ]\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isLocalMessageId,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport parseMessageInput from \"../../../util/parseMessageInput\";\nimport { handleBotCmdText, handleMessageTextCode } from '../../../worker/msg/msgHelper';\n\nconst ANIMATION_DELAY = 350;\n\nconst handleMessageEntities = (global:GlobalState,chatId:string,message:ApiMessage|Partial<ApiMessage>)=>{\n  if(message.content?.text && (!message.content.text.entities || message.content.text.entities?.length === 0)){\n    const user = selectUser(global,chatId)\n    message = handleMessageTextCode(message)\n    if(user && user.fullInfo?.botInfo){\n      message = handleBotCmdText(message,user.fullInfo.botInfo) as ApiMessage\n    }\n  }\n  message.isOutgoing = false\n  return message\n}\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      let {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      message = handleMessageEntities(global,chatId,message)\n      \n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      let { chatId, id, message } = update;\n      message = handleMessageEntities(global,chatId,message)\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      let { chatId, id, message } = update;\n      message = handleMessageEntities(global,chatId,message)\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      let { chatId, localId, message } = update;\n      message = handleMessageEntities(global,chatId,message) as ApiMessage\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n      let messageNew = message\n      if (!messageNew.isOutgoing && messageNew.content\n        && messageNew.content.text && messageNew.content.text.text && !messageNew.content.text!.entities) {\n        const {text, entities} = parseMessageInput(messageNew.content.text.text);\n        messageNew.content.text.text = text;\n        messageNew.content.text.entities = entities\n      }\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...messageNew,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error && error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n\n  // Channel update\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import {ApiBotInfo, ApiMessage} from \"../../api/types\";\nimport {parseCodeBlock, parseEntities} from \"../share/utils/stringParse\";\n\nexport function handleMessageTextCode(msgSend:Partial<ApiMessage> | ApiMessage){\n  if(msgSend.content?.text && msgSend.content.text.text){\n    const {entities} = msgSend.content.text\n    // @ts-ignore\n    msgSend.content.text = {\n      ...parseCodeBlock(msgSend.content.text?.text,entities)\n    }\n  }\n  return msgSend\n}\n\nexport function handleBotCmdText(msgSend:Partial<ApiMessage> | ApiMessage,botInfo:ApiBotInfo){\n  const commands:string[] = []\n  if(botInfo && botInfo.commands){\n    botInfo.commands.forEach(cmd=>commands.push(cmd.command))\n  }\n  if(msgSend.content && msgSend.content.text && msgSend.content.text.text){\n    if(msgSend.content.text!.entities && msgSend.content.text!.entities.find(e=>{\n      // @ts-ignore\n      return e.cipher\n    })){\n    }else{\n      // @ts-ignore\n      msgSend.content.text!.entities = [\n        ...msgSend.content.text!.entities||[],\n        ...parseEntities(msgSend.content.text!.text!,commands)\n      ]\n    }\n  }\n  return msgSend;\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ApiUserStatus} from '../../../api/types';\n\nimport {\n  addUsers,\n  addUserStatuses,\n  deleteContact,\n  replaceChats,\n  replaceUsers,\n  replaceUserStatuses,\n  updateUser,\n} from '../../reducers';\nimport {throttle} from '../../../util/schedulers';\nimport {selectChat, selectIsCurrentUserPremium, selectUser} from '../../selectors';\nimport type {ActionReturnType, RequiredGlobalState} from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case \"updateGlobalUpdate\":\n      const {data} = update\n      switch (data.action){\n        case \"updateChatGptHistory\":\n          const chatId = data.payload!.chatId;\n          return {\n            ...global,\n            chatGptAskHistory:{\n              ...global.chatGptAskHistory,\n              [chatId]:{\n                ...global.chatGptAskHistory[chatId],\n                [data.payload!.msgIdAssistant]:data.payload!.msgIdUser\n              }\n            }\n          }\n        case \"updateBot\":\n          const userBotUpdate = {\n            ...global.users.byId[data.payload!.botInfo.botId],\n            bot:data.payload!.bot\n          };\n          if(data.payload!.bot.chatGptConfig && data.payload!.bot.chatGptConfig.api_key){\n            localStorage.setItem(\"open-api-key\" , data.payload!.bot.chatGptConfig.api_key)\n          }\n          return updateUser(global,data.payload!.botInfo.botId,userBotUpdate)\n        case \"clearHistory\":\n          actions.updateGlobal({\n            messages:{\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [data.payload!.chatId]:{\n                  ...global.messages.byChatId[data.payload!.chatId],\n                  byId:{},\n                  threadsById:{\n                    \"-1\":{\n                      ...global.messages.byChatId[data.payload!.chatId].threadsById[\"-1\"],\n                      lastScrollOffset:undefined,\n                      lastViewportIds: [],\n                      listedIds:[]\n                    }\n                  }\n                }\n              }\n            },\n            chats:{\n              ...global.chats,\n              byId:{\n                ...global.chats.byId,\n                [data.payload!.chatId]:{\n                  ...global.chats.byId[data.payload!.chatId],\n                  lastMessage:undefined\n                }\n              }\n            }\n          })\n          break;\n        case \"removeBot\":\n          if(global.chats.listIds && global.chats.listIds.active){\n            let listIds_active = global.chats.listIds.active\n            listIds_active = listIds_active!.filter(id=>id !== data.payload!.chatId)\n            actions.updateGlobal({\n              chats:{\n                ...global.chats,\n                listIds: {\n                  ...global.chats.listIds,\n                  active:listIds_active\n                },\n                totalCount: {\n                  ...global.chats.totalCount,\n                  all:listIds_active.length\n                }\n              }\n            })\n            // @ts-ignore\n            actions.openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n            actions.loadAllChats({ listType: 'active', shouldReplace: true });\n          }\n          return\n      }\n      break\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n      if(selectUser(global,update.id)){\n        return updateUser(global, update.id, update.user);\n      }else{\n        if(update.user.fullInfo && update.user.fullInfo.botInfo){\n          global = addUserStatuses(global,{\n            [update.user.id]:{\n              type:'userStatusEmpty'\n            }\n          });\n        }\n        return addUsers(global, {\n          [update.id]:update.user\n        });\n      }\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect] as const);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useMemo,} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {AnimationLevel, ISettings} from '../../../types';\nimport {LeftColumnContent, SettingsScreens} from '../../../types';\nimport type {ApiChat} from '../../../api/types';\nimport type {GlobalState, TabState} from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME,\n  APP_VERSION,\n  ASSET_CACHE_NAME,\n  BETA_CHANGELOG_URL,\n  CLOUD_MESSAGE_ENABLE,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  LANG_CACHE_NAME,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport {IS_PWA} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport {formatDateToString} from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport {setPermanentWebVersion} from '../../../util/permanentWebVersion';\nimport {clearWebsync} from '../../../util/websync';\nimport {\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport {isChatArchived} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport {useHotkeys} from '../../../hooks/useHotkeys';\nimport {getPromptInstall} from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\nimport * as cacheApi from '../../../util/cacheApi';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectFolder: ()=>void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    currentAccountAddress?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectFolder,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n  archiveSettings,\n  currentAccountAddress,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    signOut,\n    updateGlobal,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleClearCache = useCallback(async () => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    await cacheApi.clear(LANG_CACHE_NAME);\n    await cacheApi.clear(ASSET_CACHE_NAME);\n\n    setTimeout(()=>{\n      location.reload();\n    },500)\n  }, [openUrl]);\n\n  const handleSignOutClick = useCallback(() => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    setTimeout(()=>{\n      signOut({ forceInitApi: true });\n      updateGlobal({\n        authState:\"authorizationStateWaitSignPassword\"\n      })\n      },300)\n  }, [openChat,signOut]);\n\n  const handleLoginClick = useCallback(() => {\n\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    updateGlobal({\n      authState:\"authorizationStateWaitSignPassword\"\n    })\n  }, [updateGlobal]);\n\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"folder\"\n        onClick={onSelectFolder}\n      >\n        {lang('Filters')}\n      </MenuItem>\n      {\n        currentUserId &&\n        <MenuItem\n          icon=\"settings\"\n          onClick={onSelectSettings}\n        >\n          {lang('Settings')}\n        </MenuItem>\n      }\n      {/*{*/}\n      {/*  currentUserId  &&*/}\n      {/*  <MenuItem*/}\n      {/*    icon=\"saved-messages\"*/}\n      {/*    onClick={handleSelectSaved}*/}\n      {/*  >*/}\n      {/*    {lang('SavedMessages')}*/}\n      {/*  </MenuItem>*/}\n      {/*}*/}\n      {/* {archiveSettings.isHidden && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"archive\" */}\n      {/*     onClick={onSelectArchived} */}\n      {/*   > */}\n      {/*     <span className=\"menu-item-name\">{lang('ArchivedChats')}</span> */}\n      {/*     {archivedUnreadChatsCount > 0 && ( */}\n      {/*       <div className=\"right-badge\">{archivedUnreadChatsCount}</div> */}\n      {/*     )} */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* <MenuItem */}\n      {/*   icon=\"user\" */}\n      {/*   onClick={onSelectContacts} */}\n      {/* > */}\n      {/*   {lang('Contacts')} */}\n      {/* </MenuItem> */}\n\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('NightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Animations')}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      {/* <MenuItem */}\n      {/*   icon=\"help\" */}\n      {/*   onClick={handleOpenTipsChat} */}\n      {/* > */}\n      {/*   {lang('TelegramFeatures')} */}\n      {/* </MenuItem> */}\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('ReportBug')}\n      </MenuItem>\n      <MenuItem\n        icon=\"stop\"\n        onClick={handleClearCache}\n      >\n        清除缓存\n      </MenuItem>\n      {/* {IS_BETA && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"permissions\" */}\n      {/*     onClick={handleChangelogClick} */}\n      {/*   > */}\n      {/*     Beta Changelog */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* {withOtherVersions && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"char-K\" */}\n      {/*     href={WEBK_VERSION_URL} */}\n      {/*     onClick={handleSwitchToWebK} */}\n      {/*   > */}\n      {/*     Switch to K Version */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n      {\n        !CLOUD_MESSAGE_ENABLE ?\n          <></>:\n          currentAccountAddress  ?\n        <MenuItem\n          icon=\"logout\"\n          onClick={handleSignOutClick}\n        >\n          {lang('SignOut')}\n        </MenuItem>:\n          <MenuItem\n            icon=\"user\"\n            onClick={handleLoginClick}\n          >\n            {lang('Login')}\n          </MenuItem>\n      }\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,currentAccountAddress\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.messages) : false,\n      currentUserId,\n      currentAccountAddress,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, memo, useEffect } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport forceReflow from '../../util/forceReflow';\nimport renderText from '../common/helpers/renderText';\n\nimport './Tab.scss';\n\ntype OwnProps = {\n  className?: string;\n  title: string;\n  isActive?: boolean;\n  isBlocked?: boolean;\n  badgeCount?: number;\n  isBadgeActive?: boolean;\n  previousActiveTab?: number;\n  onClick: (arg: number) => void;\n  clickArg: number;\n};\n\nconst classNames = {\n  active: 'Tab--active',\n  badgeActive: 'Tab__badge--active',\n};\n\nconst Tab: FC<OwnProps> = ({\n  className,\n  title,\n  isActive,\n  isBlocked,\n  badgeCount,\n  isBadgeActive,\n  previousActiveTab,\n  onClick,\n  clickArg,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const tabRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Set initial active state\n    if (isActive && previousActiveTab === undefined && tabRef.current) {\n      tabRef.current.classList.add(classNames.active);\n    }\n\n    if (!isActive || previousActiveTab === undefined) {\n      return;\n    }\n\n    const tabEl = tabRef.current!;\n    const prevTabEl = tabEl.parentElement!.children[previousActiveTab];\n    if (!prevTabEl) {\n      // The number of tabs in the parent component has decreased. It is necessary to add the active tab class name.\n      if (isActive && !tabEl.classList.contains(classNames.active)) {\n        tabEl.classList.add(classNames.active);\n      }\n      return;\n    }\n\n    const platformEl = tabEl.querySelector<HTMLElement>('.platform')!;\n    const prevPlatformEl = prevTabEl.querySelector<HTMLElement>('.platform')!;\n\n    // We move and resize the platform, so it repeats the position and size of the previous one\n    const shiftLeft = prevPlatformEl.parentElement!.offsetLeft - platformEl.parentElement!.offsetLeft;\n    const scaleFactor = prevPlatformEl.clientWidth / platformEl.clientWidth;\n\n    prevPlatformEl.classList.remove('animate');\n    platformEl.classList.remove('animate');\n    platformEl.style.transform = `translate3d(${shiftLeft}px, 0, 0) scale3d(${scaleFactor}, 1, 1)`;\n    forceReflow(platformEl);\n    platformEl.classList.add('animate');\n    platformEl.style.transform = 'none';\n\n    prevTabEl.classList.remove(classNames.active);\n    tabEl.classList.add(classNames.active);\n  }, [isActive, previousActiveTab]);\n\n  return (\n    <div\n      className={buildClassName('Tab', className)}\n      onClick={() => onClick(clickArg)}\n      ref={tabRef}\n    >\n      <span>\n        {renderText(title)}\n        {Boolean(badgeCount) && (\n          <span className={buildClassName('badge', isBadgeActive && classNames.badgeActive)}>{badgeCount}</span>\n        )}\n        {isBlocked && <i className=\"icon-lock-badge blocked\" />}\n        <i className=\"platform\" />\n      </span>\n    </div>\n  );\n};\n\nexport default memo(Tab);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport { IS_ANDROID, IS_IOS } from '../../util/environment';\nimport fastSmoothScrollHorizontal from '../../util/fastSmoothScrollHorizontal';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Tab from './Tab';\n\nimport './TabList.scss';\n\nexport type TabWithProperties = {\n  id?: number;\n  title: string;\n  badgeCount?: number;\n  isBlocked?: boolean;\n  isBadgeActive?: boolean;\n};\n\ntype OwnProps = {\n  tabs: readonly TabWithProperties[];\n  areFolders?: boolean;\n  activeTab: number;\n  big?: boolean;\n  onSwitchTab: (index: number) => void;\n};\n\nconst TAB_SCROLL_THRESHOLD_PX = 16;\n// Should match duration from `--slide-transition` CSS variable\nconst SCROLL_DURATION = IS_IOS ? 450 : IS_ANDROID ? 400 : 300;\n\nconst TabList: FC<OwnProps> = ({\n  tabs, areFolders, activeTab, big, onSwitchTab,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const previousActiveTab = usePrevious(activeTab);\n\n  useHorizontalScroll(containerRef, undefined, true);\n\n  // Scroll container to place active tab in the center\n  useEffect(() => {\n    const container = containerRef.current!;\n    const { scrollWidth, offsetWidth, scrollLeft } = container;\n    if (scrollWidth <= offsetWidth) {\n      return;\n    }\n\n    const activeTabElement = container.childNodes[activeTab] as HTMLElement | null;\n    if (!activeTabElement) {\n      return;\n    }\n\n    const { offsetLeft: activeTabOffsetLeft, offsetWidth: activeTabOffsetWidth } = activeTabElement;\n    const newLeft = activeTabOffsetLeft - (offsetWidth / 2) + (activeTabOffsetWidth / 2);\n\n    // Prevent scrolling by only a couple of pixels, which doesn't look smooth\n    if (Math.abs(newLeft - scrollLeft) < TAB_SCROLL_THRESHOLD_PX) {\n      return;\n    }\n\n    fastSmoothScrollHorizontal(container, newLeft, SCROLL_DURATION);\n  }, [activeTab]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      className={`TabList no-selection no-scrollbar ${big ? 'big' : ''}`}\n      ref={containerRef}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {tabs.map((tab, i) => (\n        <Tab\n          key={tab.id ?? tab.title}\n          // TODO Remove dependency on usage context\n          title={(!areFolders || tab.id === ALL_FOLDER_ID) ? lang(tab.title) : tab.title}\n          isActive={i === activeTab}\n          isBlocked={tab.isBlocked}\n          badgeCount={tab.badgeCount}\n          isBadgeActive={tab.isBadgeActive}\n          previousActiveTab={previousActiveTab}\n          onClick={onSwitchTab}\n          clickArg={i}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(TabList);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\nimport {getActions} from \"../../global\";\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const {loadAllChats,createChat} = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n    onNewChannel();\n    setTimeout(()=>{\n      setIsMenuOpen(false);\n    },200)\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-add\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={false}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useRef, useState,} from '../../../lib/teact/teact';\n\nimport {LeftColumnContent, SettingsScreens} from '../../../types';\nimport type {FolderEditDispatch} from '../../../hooks/reducers/useFoldersReducer';\n\nimport {IS_TOUCH_ENV} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\nimport * as cacheApi from '../../../util/cacheApi';\n\nimport './LeftMain.scss';\nimport {getActions} from '../../../global';\nimport {LANG_CACHE_NAME} from \"../../../config\";\nimport {UserIdFirstBot} from \"../../../worker/setting\";\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel,openChat,sendBotCommand,focusLastMessage } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectFolder = useCallback(() => {\n    onSettingsScreenSelect(SettingsScreens.Folders);\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectSettings = useCallback(() => {\n    openChat({ id: UserIdFirstBot, shouldReplaceHistory: true }, { forceOnHeavyAnimation: true });\n    focusLastMessage()\n    setTimeout(()=>{\n      sendBotCommand({\n        chatId:UserIdFirstBot,\n        command:\"/start\"\n      })\n    },300)\n    // onSettingsScreenSelect(SettingsScreens.Main);\n    // onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(async () => {\n    await cacheApi.clear(LANG_CACHE_NAME);\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep2);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectFolder={handleSelectFolder}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  chatCreationProgress?:ChatCreationProgress;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\nconst leftColumnContent = window.sessionStorage.getItem(\"LeftColumnContent\") || LeftColumnContent.ChatList;\nconst LeftColumn: FC<StateProps> = ({\n  chatCreationProgress,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n\n  const [content, setContent] = useState<LeftColumnContent>(Number(leftColumnContent));\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n  const setContent_ = (v:LeftColumnContent)=>{\n    setContent(v);\n    window.sessionStorage.setItem(\"LeftColumnContent\",v.toString())\n  }\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent_(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent_(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      // setContent_(LeftColumnContent.NewChannelStep1);\n      // return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.Folders:\n          setContent_(LeftColumnContent.ChatList);\n          return;\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent_(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent_(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent_(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent_(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent_(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent_(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  foldersDispatch={foldersDispatch}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onLeftColumnContentChange={setContent_}\n                  isForumPanelOpen={isForumPanelOpen}\n                  archiveSettings={archiveSettings}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent_}\n                  onSearchQuery={handleSearchQuery}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      chatCreation,\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      chatCreationProgress:chatCreation?.progress,\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n\n    // console.log(chatId,{isChatWithBot,canRestartBot},Boolean(selectIsChatBotNotStarted(global, chatId)),canStartBot)\n\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId,setEditingId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n    setEditingId({ messageId });\n    // setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  noReplies,\n  isTranslated,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'requestUploadImage':\n        return <i className=\"icon-photo\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\nimport {TEXT_AI_THINKING} from \"../../../worker/setting\";\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    (message.senderId === \"1\") && 'selfSend',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { result: detectedLanguage } = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message) && message.content;\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleEditClick = useCallback(() => {\n    if(message.senderId === \"1\" && message.content.text && message.content.text.text && !message.content.text.text.startsWith(\"/\")){\n      if (handleDoubleClick) {\n        handleDoubleClick();\n      }\n      return false\n    }\n  },[])\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), withCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if(message.content.text?.text === TEXT_AI_THINKING){\n      return <DotAnimation className=\"status\" content={TEXT_AI_THINKING.replace(\"...\",\"\")} />\n    }\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <>\n            <div className={textContentClass} dir=\"auto\"\n                 onDoubleClick={handleEditClick}>\n              {renderMessageText()}\n              {isTranslationPending && (\n                <div className=\"translation-animation\">\n                  <div className=\"text-loading\">\n                    {renderMessageText(true)}\n                  </div>\n                </div>\n              )}\n              {metaPosition === 'in-text' && renderReactionsAndMeta()}\n            </div>\n\n          </>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    if(sender?.id === \"1\"){\n      return\n    }\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    let {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    withAvatar = true;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    let canShowSender = withSenderName || withAvatar || forceSenderName;\n\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { detectLanguage } from '../util/languageDetection';\nimport useAsync from './useAsync';\n\nexport default function useTextLanguage(text?: string) {\n  const language = useAsync(() => (text ? detectLanguage(text) : Promise.resolve(undefined)), [text], undefined);\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      {/*<span>{lang('UnreadMessages')}</span>*/}\n      <span></span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('ChatYourSelfTitle')}</h3>\n        <ul className=\"description\">\n          <li>{lang('ChatYourSelfDescription1')}</li>\n          <li>{lang('ChatYourSelfDescription2')}</li>\n          <li>{lang('ChatYourSelfDescription3')}</li>\n          <li>{lang('ChatYourSelfDescription1')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset, selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,focusMessage\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    // if (areMessagesLoaded) {\n    //   memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    // }\n    memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      // newScrollTop = Math.min(\n      //   unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n      //   scrollHeight - scrollOffset,\n      // );\n      newScrollTop = scrollHeight - scrollOffset;\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  let withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  let noAvatars = Boolean(!withUsers || isChannelChat);\n  noAvatars = false\n  withUsers = true;\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n\n    if (!isShown) {\n      return;\n    }\n    if (messageListType !== 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport {resizeImage, scaleImage} from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let thumbBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n    if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n\n  }\n\n  return {\n    blobUrl,\n    thumbBlobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n  canSendVideos = false;\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n      true\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false),true);\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {/*{canAttachPolls && (*/}\n        {/*  <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>*/}\n        {/*)}*/}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {ApiDraft, GlobalState, MessageListType, TabState,} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiAttachMenuPeerType,\n  ApiBotCommand,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotMenuButton,\n  ApiChat,\n  ApiChatMember,\n  ApiFormattedText,\n  ApiMessage,\n  ApiNewPoll,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type {InlineBotSettings, ISettings} from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  EDITABLE_INPUT_MODAL_ID,\n  MAX_UPLOAD_FILEPART_SIZE,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport {IS_IOS, IS_VOICE_RECORDING_SUPPORTED} from '../../../util/environment';\nimport {MEMO_EMPTY_ARRAY} from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport {formatMediaDuration, formatVoiceRecordDuration} from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, {prepareAttachmentsToSend} from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport {insertHtmlInSelection} from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport {isSelectionInsideInput} from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport {getServerTime} from '../../../util/serverTime';\nimport {selectCurrentLimit} from '../../../global/selectors/limits';\nimport {buildCustomEmojiHtml} from './helpers/customEmoji';\nimport {processMessageInputForCustomEmoji} from '../../../util/customEmojiManager';\nimport {getTextWithEntitiesAsHtml} from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {useStateRef} from '../../../hooks/useStateRef';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, {DropAreaState} from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n  const [speechRecognizing, setSpeechRecognizing] = useState(false);\n\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    // if(speechRecognizing){\n    //   return MainButtonState.Send;\n    // }\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, speechRecognizing,editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n    // if(speechRecognizing){\n    //   recognition.stop();\n    //   setSpeechRecognizing(false);\n    //   return\n    // }\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          // recognition.start().then((res:string)=>{\n          //   setHtml(res);\n          // }).catch((e)=>{\n          //   console.error(e)\n          //   // setSpeechRecognizing(false);\n          // });\n          // setSpeechRecognizing(true);\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n  const [passwordOpen,setPasswordOpen] = useState(true);\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={false}\n              canSendGifs={false}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              (activeVoiceRecording )&& windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {(activeVoiceRecording ) && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {(activeVoiceRecording) && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={ ()=>{\n            // recognition.stop();\n            // setSpeechRecognizing(false)\n            stopRecordingVoice()\n          } }\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState,\"mainSendBtn\", !isReady && 'not-ready', ( activeVoiceRecording) && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport {getActions, getGlobal, withGlobal} from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\nimport Account from \"../../worker/share/Account\";\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {/* {currentInviteInfo && !currentInviteInfo.isRevoked && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('Edit')} */}\n              {/*     onClick={handleEditInviteClick} */}\n              {/*   > */}\n              {/*     <i className=\"icon-edit\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {/* {canAddContact && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('AddContact')} */}\n              {/*     onClick={handleAddContact} */}\n              {/*   > */}\n              {/*     <i className=\"icon-add-user\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n               {canManage && !isInsideTopic && (\n                 <Button\n                   round\n                   color=\"translucent\"\n                   size=\"smaller\"\n                   ariaLabel={lang('Edit')}\n                   onClick={handleToggleManagement}\n                 >\n                   <i className=\"icon-edit\" />\n                 </Button>\n               )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          {/* <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} /> */}\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport Modal from './Modal';\nimport PasswordMonkey from \"../common/PasswordMonkey\";\nimport PasswordForm from \"../common/PasswordForm\";\nimport {passwordCheck} from \"../../worker/share/utils/helpers\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nexport type PasswordHelperType = undefined | \"showMnemonic\" | \"messageEncryptPassword\"\n\nconst PasswordModal: FC<OwnProps> = ({}: OwnProps) => {\n\n  const [open, setOpen] = useState<boolean>(false);\n  const [noBackdropClose, setNoBackdropClose] = useState<boolean>(false);\n\n  const [showHitInput, setShowHitInput] = useState<boolean>(false);\n  const [passwordHelper, setPasswordHelper] = useState<PasswordHelperType>(undefined);\n  const [validationError, setValidationError] = useState<string>('');\n  const [hint, setHint] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const lang = useLang();\n\n  const handleSubmit = useCallback((password) => {\n    if (!passwordCheck(password)) {\n      setValidationError(lang(\"PasswordTipsCheck\"))\n      return\n    }\n    if (onConfirm) {\n      onConfirm({password, hint});\n      setOpen(false)\n    }\n  }, [hint]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        setOpen(true);\n        // @ts-ignore\n        onConfirm = e.detail.callback;\n        // @ts-ignore\n        setNoBackdropClose(e.detail.noBackdropClose)\n        // @ts-ignore\n        setPasswordHelper(e.detail.passwordHelper)\n        // @ts-ignore\n        setHint(e.detail.hint)\n        // @ts-ignore\n        setShowHitInput(!e.detail.hideHitInput);\n      }\n    }\n    document.addEventListener('password', evt);\n    return () => {\n      document.removeEventListener('password', evt);\n    }\n  }, [setHint, setShowHitInput, open])\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  return (\n    <Modal\n      hasCloseButton={!noBackdropClose}\n      isOpen={open}\n      noBackdropClose={noBackdropClose}\n      onClose={() => {\n        if(noBackdropClose){\n          return false\n        }\n        if (onConfirm) {\n          onConfirm({password: \"\", hint: \"\"});\n        }\n        setOpen(false)\n      }}\n      title=\"Password\"\n      className=\"\"\n    >\n      <div className=\"settings-content password-form custom-scroll background\">\n        <div className=\"settings-content-header no-border\">\n          <PasswordMonkey isBig isPasswordVisible={shouldShowPassword}/>\n        </div>\n        <div className=\"pt-0 pb-0 mb-2 background\">\n          {\n            showHitInput &&\n            <InputText\n              id=\"pwd-hint\"\n              type={\"text\"}\n              label={lang(\"PasswordTipsLocalHint\")}\n              onChange={(e) => {\n                setHint(e.target.value)\n              }}\n              value={hint}\n              autoComplete=\"given-name\"\n            />\n          }\n          <PasswordForm\n            error={validationError}\n            hint={(!showHitInput && hint) ? hint : lang(\"PasswordTipsLocalPlaceholder\")}\n            shouldDisablePasswordManager={true}\n            submitLabel={lang('Next')}\n            clearError={handleClearError}\n            isLoading={false}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={true}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n        {\n          passwordHelper === \"messageEncryptPassword\" &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"PasswordTipsLocalStorage\")}</li>\n              <li>{lang(\"PasswordTipsLocalStorage1\")}</li>\n            </ul>\n          </div>\n        }\n        {\n          passwordHelper === \"showMnemonic\" &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"密码不会存储服务器,跟账户助记词直接相关，请牢记密码和妥善保管助记词\")}</li>\n            </ul>\n          </div>\n        }\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PasswordModal);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {useCallback, useEffect, useRef,} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useAsync from '../../hooks/useAsync';\n\nimport Loading from '../ui/Loading';\n\nimport blankUrl from '../../assets/blank.png';\nimport Button from \"../ui/Button\";\n\ntype OwnProps ={ content?:string,tips?:string};\n\nconst DATA_PREFIX = 'wai://';\nconst QR_SIZE = 280;\n\nlet qrCodeStylingPromise: Promise<typeof import('qr-code-styling')>;\n\nfunction ensureQrCodeStyling() {\n  if (!qrCodeStylingPromise) {\n    qrCodeStylingPromise = import('qr-code-styling');\n  }\n  return qrCodeStylingPromise;\n}\n\nconst QrCode: FC<OwnProps> = ({content,tips}) => {\n\n  // @ts-ignore\n  const qrCodeRef = useRef<HTMLDivElement>(null);\n  const [isQrMounted, markQrMounted, unmarkQrMounted] = useFlag();\n\n  const { result: qrCode } = useAsync(async () => {\n    const QrCodeStyling = (await ensureQrCodeStyling()).default;\n    return new QrCodeStyling({\n      width: QR_SIZE,\n      height: QR_SIZE,\n      // image: blankUrl,\n      margin: 10,\n      type: 'svg',\n      dotsOptions: {\n        type: 'rounded',\n      },\n      cornersSquareOptions: {\n        type: 'extra-rounded',\n      },\n      imageOptions: {\n        imageSize: 0.4,\n        margin: 8,\n      },\n      qrOptions: {\n        errorCorrectionLevel: 'M',\n      },\n    });\n  }, []);\n\n  const transitionClassNames = useMediaTransition(isQrMounted);\n\n  useEffect(() => {\n    if (!qrCode) {\n      return () => {\n        unmarkQrMounted();\n      };\n    }\n\n    const container = qrCodeRef.current!;\n    const data = `${DATA_PREFIX}${content}`;\n    qrCode.update({\n      data,\n    });\n\n    if (!isQrMounted) {\n      qrCode.append(container);\n      markQrMounted();\n    }\n    return undefined;\n  }, [content,isQrMounted, markQrMounted, unmarkQrMounted, qrCode]);\n  const onDownload = useCallback(()=>{\n    if(qrCode){\n      qrCode.download()\n    }\n  },[qrCode])\n  return (\n    <div id=\"auth-qr-form\" className=\"custom-scroll\">\n      <div className=\"qr-outer\">\n        <div\n          className={buildClassName('qr-inner', transitionClassNames)}\n          key=\"qr-inner\"\n        >\n          <div\n            key=\"qr-container\"\n            className=\"qr-container\"\n            ref={qrCodeRef}\n            style={`width: ${QR_SIZE}px; height: ${QR_SIZE}px`}\n          />\n        </div>\n        {!isQrMounted && <div className=\"qr-loading\"><Loading /></div>}\n      </div>\n      <div className={'pt-2'} style={\"text-align:center\"}><code>{tips}</code></div>\n\n      <Button isText disabled={!isQrMounted} onClick={onDownload}>下载</Button>\n    </div>\n  );\n};\n\nexport default QrCode;\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport Modal from './Modal';\nimport {getActions, withGlobal} from \"../../global\";\nimport {getPasswordFromEvent} from \"../../worker/share/utils/password\";\nimport Account from \"../../worker/share/Account\";\nimport Mnemonic from \"../../lib/ptp/wallet/Mnemonic\";\nimport {aesEncrypt} from \"../../util/passcode\";\nimport {hashSha256} from \"../../worker/share/utils/helpers\";\nimport {PbQrCode} from \"../../lib/ptp/protobuf/PTPCommon\";\nimport {QrCodeType} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport QrCode from \"../common/QrCode\";\n\ntype OwnProps = {};\ntype StateProps = {\n  showMnemonicModal?:boolean\n};\n\nconst MnemonicModal: FC<OwnProps & StateProps> = ({showMnemonicModal}) => {\n  const {updateGlobal,showNotification} = getActions();\n  const [mnemonic,setMnemonic] = useState(\"\");\n  const [mnemonicEncrypt,setMnemonicEncrypt] = useState(\"\");\n\n  const onCloseModal = useCallback(async ()=>{\n    setMnemonic(\"\")\n    setMnemonicEncrypt(\"\")\n    updateGlobal({showMnemonicModal:undefined})\n  },[])\n\n  useEffect(()=>{\n    const init = async ()=>{\n      const {password} = await getPasswordFromEvent(undefined,true,'showMnemonic')\n      if(!password){\n        updateGlobal({showMnemonicModal:undefined})\n        return\n      }\n      const account = Account.getCurrentAccount();\n      if(!account?.getSession()){\n        updateGlobal({showMnemonicModal:undefined})\n        return showNotification({message:\"没有登录\"})\n      }\n      const res = await account?.verifySession(account?.getSession(),password);\n      if(!res){\n        updateGlobal({showMnemonicModal:undefined})\n        return showNotification({message:\"密码不正确\"})\n      }\n      const entropy = await Account.getCurrentAccount()!.getEntropy();\n      const m = Mnemonic.fromEntropy(entropy);\n      const words = m.getWords();\n      const e = await aesEncrypt(words,Buffer.from(hashSha256(password),'hex'))\n      setMnemonicEncrypt(Buffer.from(new PbQrCode({\n        type:QrCodeType.QrCodeType_MNEMONIC,\n        data:Buffer.from(e)\n      }).pack().getPbData()).toString(\"hex\"))\n      setMnemonic(words);\n    }\n    if(showMnemonicModal){\n      init();\n    }\n\n  },[showMnemonicModal])\n\n  if(!mnemonic){\n    return null\n  }\n  return (\n    <Modal title={\"助记词\"} isOpen={!!showMnemonicModal} hasCloseButton={true} onClose={onCloseModal}>\n      <QrCode content={mnemonicEncrypt} tips={mnemonic} />\n    </Modal>\n  )\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global ): StateProps => {\n    const {\n      showMnemonicModal,\n    } = global;\n    return {\n      showMnemonicModal,\n    };\n  },\n)(MnemonicModal));\n\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from \"../../global\";\nimport ChatOrUserPicker from \"../common/ChatOrUserPicker\";\nimport MsgCommandSetting from '../../worker/msg/MsgCommandSetting';\n\ntype OwnProps = {};\ntype StateProps = {\n  botIds:string[],\n  showPickBotModal?:boolean\n};\n\nconst PickBotModal: FC<OwnProps & StateProps> = ({showPickBotModal,botIds}) => {\n  const [search,setSearch] = useState(\"\");\n  const {updateGlobal} = getActions();\n\n  const handleSelect = useCallback((userId: string) => {\n    MsgCommandSetting.onSelectSyncBot(userId)\n    updateGlobal({\n      showPickBotModal:false\n    })\n  }, []);\n\n  const handleClose = useCallback(() => {\n    updateGlobal({\n      showPickBotModal:false\n    })\n  }, []);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={!!showPickBotModal}\n      chatOrUserIds={botIds}\n      searchPlaceholder={\"请选择要同步的机器人\"}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={()=>{}}\n      onSelectChatOrUser={handleSelect}\n      onClose={handleClose}\n    />\n  )\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global ): StateProps => {\n    const {\n      chatIdsDeleted,\n      showPickBotModal,\n      users:{\n        byId:users\n      }\n    } = global;\n    const botIds = Object.keys(users).filter(id=>id !== \"1\").filter(id=>!chatIdsDeleted.includes(id))\n    return {\n      botIds,\n      showPickBotModal,\n    };\n  },\n)(PickBotModal));\n\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport Modal from './Modal';\nimport {ShowModalFromEventPayload} from \"../../worker/share/utils/modal\";\nimport Button from \"./Button\";\nimport TextArea from \"./TextArea\";\nimport {ChangeEvent} from \"react\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nconst GlobalModal: FC<OwnProps> = ({}: OwnProps) => {\n  const [payload, setPayload] = useState<ShowModalFromEventPayload|undefined>(undefined);\n  const [open, setOpen] = useState<boolean>(false);\n  const [value, setValue] = useState<string>(\"\");\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    let {value} = e.target\n    setValue(value);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (onConfirm) {\n      if(payload?.inputType === 'number'){\n        onConfirm({value});\n      }else{\n        onConfirm({value:value.trim()});\n      }\n      setOpen(false)\n      setValue(\"\")\n    }\n  }, [value]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        //@ts-ignore\n        const payload = e.detail.payload;\n        setPayload({\n          type:\"singleInput\",\n          title:\"请输入\",\n          ...payload,\n        })\n        //@ts-ignore\n        onConfirm = e.detail.callback;\n        setOpen(true);\n        setValue(payload.initVal|| \"\")\n      }\n    }\n    document.addEventListener('modal', evt);\n    return () => {\n      document.removeEventListener('modal', evt);\n    }\n  }, [open])\n\n  return (\n    <Modal\n      hasCloseButton\n      isOpen={open}\n      onClose={() => {\n        // if (onConfirm) {\n        //   onConfirm({value: \"\"});\n        // }\n        setValue(\"\")\n        setOpen(false)\n      }}\n      title={payload && payload.title}\n      className=\"\"\n    >\n      {\n        payload && (payload.type === 'multipleInput' || payload.type === 'singleInput' )&&\n        <div className=\"settings-content password-form custom-scroll background\">\n          <div className=\"pt-4 pb-4 mb-2 background\">\n            {\n              payload.type !== 'multipleInput' ?\n                <InputText\n                  type={payload.inputType || \"text\"}\n                  label={payload.placeholder||\"\"}\n                  step={payload.step}\n                  min={payload.min}\n                  max={payload.max}\n                  onChange={handleChange}\n                  value={value}\n                  autoComplete=\"given-name\"\n                />:\n                <TextArea\n                  value={value}\n                  onChange={handleChange}\n                  label={payload.placeholder||\"\"}\n                  disabled={false}\n                />\n            }\n          </div>\n          <Button type=\"button\" onClick={handleSubmit} ripple={true} isLoading={false} disabled={false}>\n            下一步\n          </Button>\n        </div>\n      }\n\n    </Modal>\n  );\n};\n\nexport default memo(GlobalModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\nimport PasswordModal from \"../ui/PasswordModal\";\nimport Modal from \"../ui/Modal\";\nimport QrCode from \"../common/QrCode\";\nimport {UserIdFirstBot} from \"../../worker/setting\";\nimport ChatOrUserPicker from \"../common/ChatOrUserPicker\";\nimport MnemonicModal from \"../ui/MnemonicModal\";\nimport PickBotModal from \"../ui/PickBotModal\";\nimport GlobalModal from \"../ui/GlobalModal\";\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n      <PasswordModal/>\n      <GlobalModal/>\n      <MnemonicModal />\n      <PickBotModal />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../global';\n\nimport type {GlobalState} from '../../global/types';\n\nimport {LOCAL_TGS_URLS} from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport {decryptSession} from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return <div className={styles.help}></div>\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","utterance","SpeechSynthesisUtterance","selectedText","getSelection","toString","document","selection","createRange","selectChatMessage","content","speechSynthesis","speak","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","saveDraft","draft","entities","shouldForce","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","length","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","toggleMessageSelectAll","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","async","msgId","messages1","i","time","currentTs","MsgCommandSetting","uploadMsgList","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","currentChat","getChatTitle","topics","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","previousGlobal","parse","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","LoadMoreDirection","isBudgetPreload","isRestricted","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","offsetId","isOutlying","historyIds","newViewportIds","areSomeLocal","areAllLocal","getViewportSlice","safeReplaceViewportIds","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","MESSAGE_LIST_SLICE","replyOriginForId","threadUpdate","callApi","MESSAGE_DELETED","updateChatMessage","addUsers","buildCollectionByKey","users","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","attachments","a","shouldSendAsSpoiler","password","hint","getPasswordFromEvent","attachment","blobUrl","mimeType","buf","blobToBuffer","fetchBlob","cipher","Account","encryptData","bb","popByteBuffer","hintLen","typeLen","writeInt16","writeBytes","Buffer","from","res","toUint8Array","blob","Blob","encryptUrl","URL","createObjectURL","size","quality","thumbBlobUrl","resizeImage","entity","substr","replaceSubstring","repeat","log","scheduledAt","replyingToMessage","replyingToTopId","selectThreadTopMessageId","replyToTopMessageId","params","replyingTo","noWebPage","selectNoWebPage","sendAs","selectUser","clearWebPagePreview","isSingle","isGrouped","shouldGroupMessages","restParams","sendMessage","commonParams","byType","index","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","MsgDispatcher","setEditingId","progressCallback","get","getMessageOriginalId","cancelApiProgress","user","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","byId","editingId","selectEditingId","selectEditingScheduledId","UserIdFirstBot","UserIdChatGpt","activeChat","chatIdsDeleted","messagesDeleted","leaveChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","to","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","b","selectSendAs","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadViewportMessagesCache","addOffset","flag","threadsById","lastViewportIds","updateListedIds","isUp","listedIds1","ids1","isLocalMessageId","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","addChatMessagesById","updateOutlyingIds","addChats","updateThreadInfos","areSortedArraysIntersecting","sourceIds","findClosestIndex","indexForDirection","progress","localMessage","messageLocalId","has","set","fileUploads","byMessageLocalId","IS_IOS","rafPromise","botInfo","fullInfo","process","delete","shouldSendAsFile","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","seenByUserIds","sendAsId","sendAsChat","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","parseInt","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","totalCount","nextOffsetId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","chatListIdsActive","listIds","active","messagesList","chatIds","userIdList","firstName","toLowerCase","lastName","bio","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","userIds","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","imgToBlob","thumbnailUrl","thumbnail","blobToDataUri","updateUsers","getUserFirstOrLastName","releaseStatusTimeout","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","lastSyncTime","initFolderManager","addCallback","connectionState","authState","msgClientState","getActions","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","loadProfilePhotos","profileId","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","localUsers","globalUsers","phoneNumber","phone","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openUrl","MsgCommand","answerCallbackButton","openSystemFilesDialog","Array","target","requestUploadImage","openPollModal","receiptMessageId","getReceipt","openInvoice","isGame","openGame","alert","isError","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","currentChatId","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","currentPassword","onSuccess","isSuccess","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","updateStatistics","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","listActiveIds","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","loadTopicById","loadTopics","parseCodeBlock","reg","codeBlock","j","exec","ApiMessageEntityTypes","endsWith","substring","parseMentionName","regex","parseCmd","commands","RegExp","matches","parseEntities","ANIMATION_DELAY","handleMessageEntities","msgSend","handleMessageTextCode","cmd","handleBotCmdText","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","messageNew","thread","currentThreadId","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","chatGptAskHistory","msgIdAssistant","msgIdUser","userBotUpdate","chatGptConfig","api_key","localStorage","setItem","updateGlobal","lastScrollOffset","listIds_active","forceOnHeavyAnimation","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","CustomEmojiEffect","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","currentAccountAddress","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","LeftMainHeader","shouldHideSearch","contactsFilter","onSearchQuery","onSelectFolder","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","signOut","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleClearCache","cacheApi","clear","LANG_CACHE_NAME","ASSET_CACHE_NAME","reload","handleSignOutClick","history","replaceState","forceInitApi","handleLoginClick","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","CLOUD_MESSAGE_ENABLE","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","classNames","Tab","badgeCount","isBadgeActive","previousActiveTab","tabRef","tabEl","prevTabEl","parentElement","children","contains","platformEl","prevPlatformEl","shiftLeft","offsetLeft","scaleFactor","clientWidth","remove","transform","forceReflow","renderText","SCROLL_DURATION","TabList","tabs","areFolders","activeTab","big","onSwitchTab","containerRef","usePrevious","useHorizontalScroll","container","scrollWidth","offsetWidth","scrollLeft","activeTabElement","childNodes","activeTabOffsetLeft","activeTabOffsetWidth","newLeft","abs","fastSmoothScrollHorizontal","tab","_tab$id","ALL_FOLDER_ID","orderedFolderIds","archived","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","hasArchivedChats","maxFolders","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","chatsCount","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","renderCount","LeftSearch","Loading","ContactList","NewChatButton","isShown","onNewPrivateChat","onNewChannel","onNewGroup","createChat","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectFolder","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","leftColumnContent","sessionStorage","getItem","nextSettingsScreen","isChatOpen","chatCreationProgress","isFirstChatFolderActive","LeftColumn","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","setContent_","v","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","svg","div","defs","innerHTML","HeaderPinnedMessage","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","closeAudioPlayer","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ChatReportPanel","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioChatId","audioMessageId","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","originChannelId","firstPinnedMessage","MiddleHeader","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","isOwn","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","createElement","font","whiteSpace","opacity","appendChild","textContent","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","handleTap","stopEvent","handleDoubleClick","handleContentDoubleClick","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","Deferred","createConnector","Worker","ContextMenuContainer","ActionMessageSuggestedAvatar","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","ActionMessage","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","EmbeddedMessage","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","MessageMeta","outgoingStatus","signature","withReactionOffset","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","AnimatedCounter","formatTime","MessageOutgoingStatus","Sticker","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","AnimatedEmoji","forceLoadPreview","forcePreview","LIKE_STICKER_ID","customEmojiId","AnimatedCustomEmoji","getCustomEmojiSize","isBig","Video","canAutoLoad","canAutoPlay","uploadProgress","isDownloading","onCancelUpload","videoRef","getMessageVideo","getMessageWebPageVideo","localBlobUrl","isSpoilerShown","hideSpoiler","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","fullMediaData","isPlayerReady","markPlayerReady","getMessageMediaThumbDataUri","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","useMediaTransition","noThumb","thumbRef","useBlurredMediaThumbRef","thumbClassNames","isInline","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","isOwnMessage","isWebPageVideo","calculateVideoDimensions","cancelMessageMediaDownload","isAllowed","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","withAnimation","ProgressSpinner","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","Poll","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","WebPage","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Invoice","shouldAffectAppendix","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","Skeleton","forceAspectRatio","InvoiceMediaPreview","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","scale","SVG_PIN","__html","Location","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","Game","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","Album","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","RoundVideo","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","InlineButtons","renderIcon","CommentButton","openComments","recentReplierIds","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","ReactionAnimatedEmoji","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","ReactionButton","withRecentReactors","recentReactors","recentReaction","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","threshold","promise","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleEditClick","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","getMinMediaWidth","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","TEXT_AI_THINKING","DotAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","SponsoredMessage","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","MessageListContent","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","MessageList","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","areMessagesLoaded","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","FloatingActionButtons","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","quick","img","preloadImage","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","AttachBotIcon","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","AttachBotItem","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","AttachMenu","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","BotKeyboardMenu","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","ComposerEmbeddedMessage","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","WebPagePreview","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","BotMenuButton","textRef","textEl","composerEl","removeProperty","MainButtonState","_ref","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","editingDraft","selectEditingScheduledDraft","selectEditingDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","Composer","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","speechRecognizing","setSpeechRecognizing","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","passwordOpen","setPasswordOpen","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","CustomSendMenu","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","MiddleColumn","unpinAllMessages","loadUser","loadChatSettings","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","_useCurrentOrPrev","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleDeleteInviteClick","ManagementScreens","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewerAsync","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","GameModal","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","NotificationsAsync","Notifications","DialogsAsync","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","MessageListHistoryHandler","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","fill","prevConfettiTime","hideTimeout","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","PasswordModal","setOpen","noBackdropClose","setNoBackdropClose","showHitInput","setShowHitInput","passwordHelper","setPasswordHelper","validationError","setValidationError","setHint","shouldShowPassword","setShouldShowPassword","handleSubmit","passwordCheck","evt","detail","hideHitInput","handleClearError","PasswordMonkey","isPasswordVisible","InputText","PasswordForm","shouldDisablePasswordManager","submitLabel","clearError","shouldResetValue","onChangePasswordVisibility","onSubmit","qrCodeStylingPromise","QrCode","tips","qrCodeRef","isQrMounted","markQrMounted","unmarkQrMounted","qrCode","QrCodeStyling","dotsOptions","cornersSquareOptions","imageOptions","imageSize","qrOptions","errorCorrectionLevel","append","onDownload","showMnemonicModal","MnemonicModal","mnemonic","setMnemonic","mnemonicEncrypt","setMnemonicEncrypt","onCloseModal","account","getSession","verifySession","entropy","getEntropy","words","Mnemonic","getWords","aesEncrypt","hashSha256","PbQrCode","QrCodeType","pack","getPbData","showPickBotModal","botIds","PickBotModal","search","setSearch","handleSelect","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","onSearchChange","onSelectChatOrUser","GlobalModal","setPayload","inputType","initVal","TextArea","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","UnreadCount","passcodeSettings","LockScreen","isLocked","resetInvalidUnlockAttempts","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleSignOutMessage","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","shouldShowSubmit","noRipple","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}