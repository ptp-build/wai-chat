{"version":3,"file":"3748.8d8e9d2918137477431d.js","mappings":"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","sources":["webpack://wai/./src/lib/rlottie/RLottie.ts","webpack://wai/./src/util/PostMessageConnector.ts","webpack://wai/./src/util/cycleRestrict.ts"],"sourcesContent":["import type { RLottieApi } from './rlottie.worker';\n\nimport {\n  DPR, IS_SAFARI, IS_ANDROID, IS_IOS,\n} from '../../util/environment';\nimport { createConnector } from '../../util/PostMessageConnector';\nimport { animate } from '../../util/animation';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { fastRaf } from '../../util/schedulers';\n\ninterface Params {\n  noLoop?: boolean;\n  size?: number;\n  quality?: number;\n  isLowPriority?: boolean;\n  coords?: { x: number; y: number };\n}\n\nconst WAITING = Symbol('WAITING');\ntype Frame =\n  undefined\n  | typeof WAITING\n  | ImageBitmap;\n\nconst MAX_WORKERS = 4;\nconst HIGH_PRIORITY_QUALITY = (IS_ANDROID || IS_IOS) ? 0.75 : 1;\nconst LOW_PRIORITY_QUALITY = IS_ANDROID ? 0.5 : 0.75;\nconst LOW_PRIORITY_QUALITY_SIZE_THRESHOLD = 24;\nconst HIGH_PRIORITY_CACHE_MODULO = IS_SAFARI ? 2 : 4;\nconst LOW_PRIORITY_CACHE_MODULO = 0;\n\nconst instancesById = new Map<string, RLottie>();\n\nconst workers = new Array(MAX_WORKERS).fill(undefined).map(\n  () => createConnector<RLottieApi>(new Worker(new URL('./rlottie.worker.ts', import.meta.url))),\n);\nlet lastWorkerIndex = -1;\n\nclass RLottie {\n  // Config\n\n  private containers = new Map<string, {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    isLoaded?: boolean;\n    isPaused?: boolean;\n    isSharedCanvas?: boolean;\n    coords?: Params['coords'];\n    onLoad?: NoneToVoidFunction;\n  }>();\n\n  private imgSize!: number;\n\n  private imageData!: ImageData;\n\n  private msPerFrame = 1000 / 60;\n\n  private reduceFactor = 1;\n\n  private cacheModulo!: number;\n\n  private workerIndex!: number;\n\n  private frames: Frame[] = [];\n\n  private framesCount?: number;\n\n  // State\n\n  private isAnimating = false;\n\n  private isWaiting = true;\n\n  private isEnded = false;\n\n  private isDestroyed = false;\n\n  private isRendererInited = false;\n\n  private approxFrameIndex = 0;\n\n  private prevFrameIndex = -1;\n\n  private stopFrameIndex? = 0;\n\n  private speed = 1;\n\n  private direction: 1 | -1 = 1;\n\n  private lastRenderAt?: number;\n\n  static init(...args: ConstructorParameters<typeof RLottie>) {\n    const [container, canvas, onLoad, id, , params] = args;\n    let instance = instancesById.get(id);\n\n    if (!instance) {\n      // eslint-disable-next-line prefer-rest-params\n      instance = new RLottie(...args);\n      instancesById.set(id, instance);\n    } else {\n      instance.addContainer(container, canvas, onLoad, params?.coords);\n    }\n\n    return instance;\n  }\n\n  constructor(\n    containerId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad: NoneToVoidFunction | undefined,\n    private id: string,\n    private tgsUrl: string,\n    private params: Params = { },\n    private customColor?: [number, number, number],\n    private onEnded?: (isDestroyed?: boolean) => void,\n    private onLoop?: () => void,\n  ) {\n    this.addContainer(containerId, container, onLoad, params.coords);\n    this.initConfig();\n    this.initRenderer();\n  }\n\n  public removeContainer(containerId: string) {\n    const {\n      canvas, ctx, isSharedCanvas, coords,\n    } = this.containers.get(containerId)!;\n\n    if (isSharedCanvas) {\n      ctx.clearRect(coords!.x, coords!.y, this.imgSize, this.imgSize);\n    } else {\n      canvas.remove();\n    }\n\n    this.containers.delete(containerId);\n\n    if (!this.containers.size) {\n      this.destroy();\n    }\n  }\n\n  isPlaying() {\n    return this.isAnimating || this.isWaiting;\n  }\n\n  play(forceRestart = false, containerId?: string) {\n    if (containerId) {\n      this.containers.get(containerId)!.isPaused = false;\n    }\n\n    if (this.isEnded && forceRestart) {\n      this.approxFrameIndex = Math.floor(0);\n    }\n\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  pause(containerId?: string) {\n    if (containerId) {\n      this.containers.get(containerId)!.isPaused = true;\n\n      const areAllContainersPaused = Array.from(this.containers.values()).every(({ isPaused }) => isPaused);\n      if (!areAllContainersPaused) {\n        return;\n      }\n    }\n\n    if (this.isWaiting) {\n      this.stopFrameIndex = this.approxFrameIndex;\n    } else {\n      this.isAnimating = false;\n    }\n\n    if (!this.params.isLowPriority) {\n      this.frames = this.frames.map((frame, i) => {\n        if (i === this.prevFrameIndex) {\n          return frame;\n        } else {\n          if (frame && frame !== WAITING) {\n            frame.close();\n          }\n\n          return undefined;\n        }\n      });\n    }\n  }\n\n  playSegment([startFrameIndex, stopFrameIndex]: [number, number]) {\n    this.approxFrameIndex = Math.floor(startFrameIndex / this.reduceFactor);\n    this.stopFrameIndex = Math.floor(stopFrameIndex / this.reduceFactor);\n    this.direction = startFrameIndex < stopFrameIndex ? 1 : -1;\n    this.doPlay();\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n  }\n\n  setNoLoop(noLoop?: boolean) {\n    this.params.noLoop = noLoop;\n  }\n\n  setSharedCanvasCoords(containerId: string, newCoords: Params['coords']) {\n    const containerInfo = this.containers.get(containerId)!;\n    const {\n      canvas, ctx,\n    } = containerInfo;\n\n    if (!canvas.dataset.isJustCleaned || canvas.dataset.isJustCleaned === 'false') {\n      const sizeFactor = this.calcSizeFactor();\n      ensureCanvasSize(canvas, sizeFactor);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      canvas.dataset.isJustCleaned = 'true';\n      fastRaf(() => {\n        canvas.dataset.isJustCleaned = 'false';\n      });\n    }\n\n    containerInfo.coords = {\n      x: Math.round((newCoords?.x || 0) * canvas.width),\n      y: Math.round((newCoords?.y || 0) * canvas.height),\n    };\n\n    const frame = this.getFrame(this.prevFrameIndex) || this.getFrame(Math.round(this.approxFrameIndex));\n\n    if (frame && frame !== WAITING) {\n      ctx.drawImage(frame, containerInfo.coords.x, containerInfo.coords.y);\n    }\n  }\n\n  private addContainer(\n    containerId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad?: NoneToVoidFunction,\n    coords?: Params['coords'],\n  ) {\n    const sizeFactor = this.calcSizeFactor();\n\n    let imgSize: number;\n\n    if (container instanceof HTMLDivElement) {\n      if (!(container.parentNode instanceof HTMLElement)) {\n        throw new Error('[RLottie] Container is not mounted');\n      }\n\n      let { size } = this.params;\n\n      if (!size) {\n        size = (\n          container.offsetWidth\n          || parseInt(container.style.width, 10)\n          || container.parentNode.offsetWidth\n        );\n\n        if (!size) {\n          throw new Error('[RLottie] Failed to detect width from container');\n        }\n      }\n\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d')!;\n\n      canvas.style.width = `${size}px`;\n      canvas.style.height = `${size}px`;\n\n      imgSize = Math.round(size * sizeFactor);\n\n      canvas.width = imgSize;\n      canvas.height = imgSize;\n\n      container.appendChild(canvas);\n\n      this.containers.set(containerId, {\n        canvas, ctx, onLoad,\n      });\n    } else {\n      if (!container.isConnected) {\n        throw new Error('[RLottie] Shared canvas is not mounted');\n      }\n\n      const canvas = container;\n      const ctx = canvas.getContext('2d')!;\n\n      ensureCanvasSize(canvas, sizeFactor);\n\n      imgSize = Math.round(this.params.size! * sizeFactor);\n\n      this.containers.set(containerId, {\n        canvas,\n        ctx,\n        isSharedCanvas: true,\n        coords: {\n          x: Math.round((coords?.x || 0) * canvas.width),\n          y: Math.round((coords?.y || 0) * canvas.height),\n        },\n        onLoad,\n      });\n    }\n\n    if (!this.imgSize) {\n      this.imgSize = imgSize;\n      this.imageData = new ImageData(imgSize, imgSize);\n    }\n\n    if (this.isRendererInited) {\n      this.doPlay();\n    }\n  }\n\n  private calcSizeFactor() {\n    const {\n      isLowPriority,\n      size,\n      // Reduced quality only looks acceptable on big enough images\n      quality = isLowPriority && (!size || size > LOW_PRIORITY_QUALITY_SIZE_THRESHOLD)\n        ? LOW_PRIORITY_QUALITY : HIGH_PRIORITY_QUALITY,\n    } = this.params;\n\n    // Reduced quality only looks acceptable on high DPR screens\n    return Math.max(DPR * quality, 1);\n  }\n\n  private destroy() {\n    this.isDestroyed = true;\n    this.pause();\n    this.clearCache();\n    this.destroyRenderer();\n\n    instancesById.delete(this.id);\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      if (frame && frame !== WAITING) {\n        frame.close();\n      }\n    });\n\n    // Help GC\n    this.imageData = undefined as any;\n    this.frames = [];\n  }\n\n  private initConfig() {\n    const { isLowPriority } = this.params;\n\n    this.cacheModulo = isLowPriority ? LOW_PRIORITY_CACHE_MODULO : HIGH_PRIORITY_CACHE_MODULO;\n  }\n\n  setColor(newColor: [number, number, number] | undefined) {\n    this.customColor = newColor;\n  }\n\n  private initRenderer() {\n    this.workerIndex = cycleRestrict(MAX_WORKERS, ++lastWorkerIndex);\n\n    workers[this.workerIndex].request({\n      name: 'init',\n      args: [\n        this.id,\n        this.tgsUrl,\n        this.imgSize,\n        this.params.isLowPriority || false,\n        this.customColor,\n        this.onRendererInit.bind(this),\n      ],\n    });\n  }\n\n  private destroyRenderer() {\n    workers[this.workerIndex].request({\n      name: 'destroy',\n      args: [this.id],\n    });\n  }\n\n  private onRendererInit(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.isRendererInited = true;\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n\n  changeData(tgsUrl: string) {\n    this.pause();\n    this.tgsUrl = tgsUrl;\n    this.initConfig();\n\n    workers[this.workerIndex].request({\n      name: 'changeData',\n      args: [\n        this.id,\n        this.tgsUrl,\n        this.params.isLowPriority || false,\n        this.onChangeData.bind(this),\n      ],\n    });\n  }\n\n  private onChangeData(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n    this.isWaiting = false;\n    this.isAnimating = false;\n\n    this.doPlay();\n  }\n\n  private doPlay() {\n    if (!this.framesCount) {\n      return;\n    }\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.isAnimating) {\n      return;\n    }\n\n    if (!this.isWaiting) {\n      this.lastRenderAt = undefined;\n    }\n\n    this.isEnded = false;\n    this.isAnimating = true;\n    this.isWaiting = false;\n\n    animate(() => {\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      // Paused from outside\n      if (!this.isAnimating) {\n        const areAllLoaded = Array.from(this.containers.values()).every(({ isLoaded }) => isLoaded);\n        if (areAllLoaded) {\n          return false;\n        }\n      }\n\n      const frameIndex = Math.round(this.approxFrameIndex);\n      const frame = this.getFrame(frameIndex);\n      if (!frame || frame === WAITING) {\n        if (!frame) {\n          this.requestFrame(frameIndex);\n        }\n\n        this.isAnimating = false;\n        this.isWaiting = true;\n        return false;\n      }\n\n      if (this.cacheModulo && frameIndex % this.cacheModulo === 0) {\n        this.cleanupPrevFrame(frameIndex);\n      }\n\n      if (frameIndex !== this.prevFrameIndex) {\n        this.containers.forEach((containerData) => {\n          const {\n            ctx, isLoaded, isPaused, coords: { x, y } = {}, onLoad,\n          } = containerData;\n\n          if (!isLoaded || !isPaused) {\n            ctx.clearRect(x || 0, y || 0, this.imgSize, this.imgSize);\n            ctx.drawImage(frame, x || 0, y || 0);\n          }\n\n          if (!isLoaded) {\n            containerData.isLoaded = true;\n            onLoad?.();\n          }\n        });\n\n        this.prevFrameIndex = frameIndex;\n      }\n\n      const now = Date.now();\n      const currentSpeed = this.lastRenderAt ? this.msPerFrame / (now - this.lastRenderAt) : 1;\n      const delta = Math.min(1, (this.direction * this.speed) / currentSpeed);\n      const expectedNextFrameIndex = Math.round(this.approxFrameIndex + delta);\n\n      this.lastRenderAt = now;\n\n      // Forward animation finished\n      if (delta > 0 && (frameIndex === this.framesCount! - 1 || expectedNextFrameIndex > this.framesCount! - 1)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = 0;\n\n        // Backward animation finished\n      } else if (delta < 0 && (frameIndex === 0 || expectedNextFrameIndex < 0)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = this.framesCount! - 1;\n\n        // Stop frame reached\n      } else if (\n        this.stopFrameIndex !== undefined\n        && (frameIndex === this.stopFrameIndex\n          || (\n            (delta > 0 && expectedNextFrameIndex > this.stopFrameIndex)\n            || (delta < 0 && expectedNextFrameIndex < this.stopFrameIndex)\n          ))\n      ) {\n        this.stopFrameIndex = undefined;\n        this.isAnimating = false;\n        return false;\n\n        // Preparing next frame\n      } else {\n        this.approxFrameIndex += delta;\n      }\n\n      const nextFrameIndex = Math.round(this.approxFrameIndex);\n\n      if (!this.getFrame(nextFrameIndex)) {\n        this.requestFrame(nextFrameIndex);\n        this.isWaiting = true;\n        this.isAnimating = false;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  private getFrame(frameIndex: number) {\n    return this.frames[frameIndex];\n  }\n\n  private requestFrame(frameIndex: number) {\n    this.frames[frameIndex] = WAITING;\n\n    workers[this.workerIndex].request({\n      name: 'renderFrames',\n      args: [this.id, frameIndex, this.onFrameLoad.bind(this)],\n    });\n  }\n\n  private cleanupPrevFrame(frameIndex: number) {\n    if (this.framesCount! < 3) {\n      return;\n    }\n\n    const prevFrameIndex = cycleRestrict(this.framesCount!, frameIndex - 1);\n    this.frames[prevFrameIndex] = undefined;\n  }\n\n  private onFrameLoad(frameIndex: number, imageBitmap: ImageBitmap) {\n    if (this.frames[frameIndex] !== WAITING) {\n      return;\n    }\n\n    this.frames[frameIndex] = imageBitmap;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n}\n\nfunction ensureCanvasSize(canvas: HTMLCanvasElement, sizeFactor: number) {\n  const expectedWidth = Math.round(canvas.offsetWidth * sizeFactor);\n  const expectedHeight = Math.round(canvas.offsetHeight * sizeFactor);\n  if (canvas.width !== expectedWidth || canvas.height !== expectedHeight) {\n    canvas.width = expectedWidth;\n    canvas.height = expectedHeight;\n  }\n}\n\nexport default RLottie;\n","import generateIdFor from './generateIdFor';\n\nexport interface CancellableCallback {\n  (\n    ...args: any[]\n  ): void;\n\n  isCanceled?: boolean;\n  acceptsBuffer?: boolean;\n}\n\ntype InitData = {\n  channel?: string;\n  type: 'init';\n  messageId?: string;\n  name: 'init';\n  args: any;\n};\n\ntype CallMethodData = {\n  channel?: string;\n  type: 'callMethod';\n  messageId?: string;\n  name: string;\n  args: any;\n  withCallback?: boolean;\n};\n\nexport type OriginMessageData = InitData | CallMethodData | {\n  channel?: string;\n  type: 'cancelProgress';\n  messageId: string;\n};\n\nexport interface OriginMessageEvent {\n  data: OriginMessageData;\n}\n\nexport type ApiUpdate =\n  { type: string }\n  & any;\n\nexport type WorkerMessageData = {\n  channel?: string;\n  type: 'update';\n  update: ApiUpdate;\n} | {\n  channel?: string;\n  type: 'methodResponse';\n  messageId: string;\n  response?: any;\n  error?: { message: string };\n} | {\n  channel?: string;\n  type: 'methodCallback';\n  messageId: string;\n  callbackArgs: any[];\n} | {\n  channel?: string;\n  type: 'unhandledError';\n  error?: { message: string };\n};\n\nexport interface WorkerMessageEvent {\n  data: WorkerMessageData;\n}\n\ninterface RequestStates {\n  messageId: string;\n  resolve: Function;\n  reject: Function;\n  callback: AnyToVoidFunction;\n}\n\ntype InputRequestTypes = Record<string, AnyFunction>;\n\ntype Values<T> = T[keyof T];\nexport type RequestTypes<T extends InputRequestTypes> = Values<{\n  [Name in keyof (T)]: {\n    name: Name & string;\n    args: Parameters<T[Name]>;\n  }\n}>;\n\nclass ConnectorClass<T extends InputRequestTypes> {\n  private requestStates = new Map<string, RequestStates>();\n\n  private requestStatesByCallback = new Map<AnyToVoidFunction, RequestStates>();\n\n  constructor(\n    public target: Worker,\n    private onUpdate?: (update: ApiUpdate) => void,\n    private channel?: string,\n  ) {\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public destroy() {\n  }\n\n  init(...args: any[]) {\n    this.postMessage({\n      type: 'init',\n      args,\n    });\n  }\n\n  request(messageData: RequestTypes<T>) {\n    const { requestStates, requestStatesByCallback } = this;\n\n    const messageId = generateIdFor(requestStates);\n    const payload: CallMethodData = {\n      type: 'callMethod',\n      messageId,\n      ...messageData,\n    };\n\n    const requestState = { messageId } as RequestStates;\n\n    // Re-wrap type because of `postMessage`\n    const promise: Promise<any> = new Promise((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    });\n\n    if (typeof payload.args[payload.args.length - 1] === 'function') {\n      payload.withCallback = true;\n\n      const callback = payload.args.pop() as AnyToVoidFunction;\n      requestState.callback = callback;\n      requestStatesByCallback.set(callback, requestState);\n    }\n\n    requestStates.set(messageId, requestState);\n    promise\n      .catch(() => undefined)\n      .finally(() => {\n        requestStates.delete(messageId);\n\n        if (requestState.callback) {\n          requestStatesByCallback.delete(requestState.callback);\n        }\n      });\n\n    this.postMessage(payload);\n\n    return promise;\n  }\n\n  cancelCallback(progressCallback: CancellableCallback) {\n    progressCallback.isCanceled = true;\n\n    const { messageId } = this.requestStatesByCallback.get(progressCallback) || {};\n    if (!messageId) {\n      return;\n    }\n\n    this.postMessage({\n      type: 'cancelProgress',\n      messageId,\n    });\n  }\n\n  onMessage(data: WorkerMessageData) {\n    const { requestStates, channel } = this;\n    if (data.channel !== channel) {\n      return;\n    }\n\n    if (data.type === 'update' && this.onUpdate) {\n      this.onUpdate(data.update);\n    }\n    if (data.type === 'methodResponse') {\n      const requestState = requestStates.get(data.messageId);\n      if (requestState) {\n        if (data.error) {\n          requestState.reject(data.error);\n        } else {\n          requestState.resolve(data.response);\n        }\n      }\n    } else if (data.type === 'methodCallback') {\n      const requestState = requestStates.get(data.messageId);\n      requestState?.callback?.(...data.callbackArgs);\n    } else if (data.type === 'unhandledError') {\n      throw new Error(data.error?.message);\n    }\n  }\n\n  private postMessage(data: AnyLiteral) {\n    data.channel = this.channel;\n\n    this.target.postMessage(data);\n  }\n}\n\nexport function createConnector<T extends InputRequestTypes>(\n  worker: Worker,\n  onUpdate?: (update: ApiUpdate) => void,\n  channel?: string,\n) {\n  const connector = new ConnectorClass<T>(worker, onUpdate, channel);\n\n  function handleMessage({ data }: WorkerMessageEvent) {\n    connector.onMessage(data);\n  }\n\n  worker.addEventListener('message', handleMessage);\n\n  connector.destroy = () => {\n    worker.removeEventListener('message', handleMessage);\n  };\n\n  return connector;\n}\n\nexport type Connector<T extends InputRequestTypes> = ReturnType<typeof createConnector<T>>;\n","export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n"],"names":["WAITING","Symbol","HIGH_PRIORITY_QUALITY","IS_ANDROID","IS_IOS","LOW_PRIORITY_QUALITY","LOW_PRIORITY_QUALITY_SIZE_THRESHOLD","HIGH_PRIORITY_CACHE_MODULO","IS_SAFARI","instancesById","Map","workers","Array","fill","undefined","map","createConnector","Worker","URL","lastWorkerIndex","RLottie","static","args","container","canvas","onLoad","id","params","instance","get","addContainer","coords","set","constructor","containerId","tgsUrl","customColor","onEnded","onLoop","_defineProperty","this","initConfig","initRenderer","removeContainer","ctx","isSharedCanvas","containers","clearRect","x","y","imgSize","remove","delete","size","destroy","isPlaying","isAnimating","isWaiting","play","forceRestart","isPaused","isEnded","approxFrameIndex","Math","floor","stopFrameIndex","direction","doPlay","pause","from","values","every","isLowPriority","frames","frame","i","prevFrameIndex","close","playSegment","startFrameIndex","reduceFactor","setSpeed","speed","setNoLoop","noLoop","setSharedCanvasCoords","newCoords","containerInfo","dataset","isJustCleaned","sizeFactor","calcSizeFactor","ensureCanvasSize","width","height","fastRaf","round","getFrame","drawImage","HTMLDivElement","parentNode","HTMLElement","Error","offsetWidth","parseInt","style","document","createElement","getContext","appendChild","isConnected","imageData","ImageData","isRendererInited","quality","max","DPR","isDestroyed","clearCache","destroyRenderer","forEach","cacheModulo","setColor","newColor","workerIndex","cycleRestrict","request","name","onRendererInit","bind","msPerFrame","framesCount","changeData","onChangeData","lastRenderAt","animate","isLoaded","frameIndex","requestFrame","cleanupPrevFrame","containerData","now","Date","currentSpeed","delta","min","expectedNextFrameIndex","nextFrameIndex","onFrameLoad","imageBitmap","expectedWidth","expectedHeight","offsetHeight","ConnectorClass","target","onUpdate","channel","init","postMessage","type","messageData","requestStates","requestStatesByCallback","messageId","generateIdFor","payload","requestState","promise","Promise","resolve","reject","Object","assign","length","withCallback","callback","pop","catch","finally","cancelCallback","progressCallback","isCanceled","onMessage","data","update","error","response","callbackArgs","message","worker","connector","handleMessage","addEventListener","removeEventListener","index"],"sourceRoot":""}