{"version":3,"file":"3779.a0f4b6d3cdeb16878542.js","mappings":"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","sources":["webpack://wai/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://wai/./src/hooks/usePictureInPicture.ts","webpack://wai/./src/hooks/useBlur.ts","webpack://wai/./src/hooks/useBlurSync.ts","webpack://wai/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://wai/./src/components/common/DeleteMessageModal.tsx","webpack://wai/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://wai/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://wai/./src/hooks/useFullscreen.ts","webpack://wai/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://wai/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://wai/./src/components/mediaViewer/VideoPlayer.tsx","webpack://wai/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://wai/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://wai/./src/components/mediaViewer/SenderInfo.tsx","webpack://wai/./src/components/mediaViewer/MediaViewer.tsx","webpack://wai/./src/components/common/RecipientPicker.tsx","webpack://wai/./src/components/main/ForwardRecipientPicker.tsx","webpack://wai/./src/components/main/DraftRecipientPicker.tsx","webpack://wai/./src/components/main/AttachBotRecipientPicker.tsx","webpack://wai/./src/components/main/Dialogs.tsx","webpack://wai/./src/components/main/Notifications.tsx","webpack://wai/./src/components/main/SafeLinkModal.tsx","webpack://wai/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://wai/./src/components/main/UrlAuthModal.tsx","webpack://wai/./src/components/common/CalendarModal.tsx","webpack://wai/./src/components/main/HistoryCalendar.tsx","webpack://wai/./src/components/main/NewContactModal.tsx","webpack://wai/./src/components/main/hooks/useWebAppFrame.ts","webpack://wai/./src/components/main/WebAppModal.tsx","webpack://wai/./src/components/main/WebAppModal.module.scss?73f6","webpack://wai/./src/components/main/BotTrustModal.tsx","webpack://wai/./src/components/main/AttachBotInstallModal.tsx","webpack://wai/./src/components/main/DeleteFolderDialog.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://wai/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://wai/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://wai/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://wai/./src/components/common/SliderDots.module.scss?afdd","webpack://wai/./src/components/common/SliderDots.tsx","webpack://wai/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://wai/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://wai/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://wai/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://wai/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://wai/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://wai/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://wai/./src/components/main/premium/PremiumMainModal.tsx","webpack://wai/./src/components/main/premium/GiftOption.module.scss?a171","webpack://wai/./src/components/main/premium/GiftOption.tsx","webpack://wai/./src/components/main/premium/GiftPremiumModal.tsx","webpack://wai/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://wai/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://wai/./src/components/middle/composer/StickerSet.tsx","webpack://wai/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://wai/./src/components/middle/composer/StickerSetCover.tsx","webpack://wai/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://wai/./src/components/left/main/StatusPickerMenu.tsx","webpack://wai/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://wai/./src/components/common/AboutAdsModal.tsx","webpack://wai/./src/components/common/PinMessageModal.tsx","webpack://wai/./src/components/common/UnpinAllMessagesModal.tsx","webpack://wai/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://wai/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://wai/./src/components/middle/MessageSelectToolbar.tsx","webpack://wai/./src/components/common/SeenByModal.tsx","webpack://wai/./src/components/middle/ReactorListModal.tsx","webpack://wai/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://wai/./src/components/middle/MessageLanguageModal.tsx","webpack://wai/./src/components/middle/MessageLanguageModal.module.scss?f702","webpack://wai/./src/hooks/useSelectWithEnter.ts","webpack://wai/./src/components/left/search/LeftSearchResultChat.tsx","webpack://wai/./src/components/left/search/RecentContacts.tsx","webpack://wai/./src/components/left/search/ChatMessage.tsx","webpack://wai/./src/components/left/search/DateSuggest.tsx","webpack://wai/./src/components/left/search/ChatResults.tsx","webpack://wai/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://wai/./src/components/left/search/ChatMessageResults.tsx","webpack://wai/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://wai/./src/components/left/search/MediaResults.tsx","webpack://wai/./src/components/left/search/LinkResults.tsx","webpack://wai/./src/components/left/search/FileResults.tsx","webpack://wai/./src/components/left/search/AudioResults.tsx","webpack://wai/./src/components/left/search/LeftSearch.tsx","webpack://wai/./src/hooks/reducers/useTwoFaReducer.ts","webpack://wai/./src/components/left/settings/SettingsHeader.tsx","webpack://wai/./src/hooks/useMultiClick.ts","webpack://wai/./src/components/left/settings/SettingsMain.tsx","webpack://wai/./src/components/ui/Draggable.tsx","webpack://wai/./src/components/ui/Draggable.module.scss?804f","webpack://wai/./src/components/common/ManageUsernames.module.scss?3086","webpack://wai/./src/components/common/ManageUsernames.tsx","webpack://wai/./src/components/left/settings/SettingsEditProfile.tsx","webpack://wai/./src/components/left/settings/SettingsDataStorage.tsx","webpack://wai/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://wai/./src/components/ui/ShowMoreButton.tsx","webpack://wai/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://wai/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://wai/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://wai/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://wai/./src/components/left/settings/SettingsGeneral.tsx","webpack://wai/./src/components/left/settings/WallpaperTile.tsx","webpack://wai/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://wai/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://wai/./src/components/left/settings/SettingsNotifications.tsx","webpack://wai/./src/components/left/settings/SettingsPrivacy.tsx","webpack://wai/./src/components/left/settings/SettingsLanguage.tsx","webpack://wai/./src/components/left/settings/helpers/privacy.ts","webpack://wai/./src/components/ui/SelectAvatar.module.scss?3384","webpack://wai/./src/components/ui/SelectAvatar.tsx","webpack://wai/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://wai/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://wai/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://wai/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://wai/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://wai/./src/components/left/settings/SettingsActiveSession.tsx","webpack://wai/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://wai/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://wai/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://wai/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://wai/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://wai/./src/components/left/settings/BlockUserModal.tsx","webpack://wai/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://wai/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://wai/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://wai/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://wai/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://wai/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://wai/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://wai/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://wai/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://wai/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://wai/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://wai/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://wai/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://wai/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://wai/./src/components/common/StickerSetCard.tsx","webpack://wai/./src/components/left/settings/SettingsStickers.tsx","webpack://wai/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://wai/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://wai/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://wai/./src/components/left/settings/SettingsExperimental.tsx","webpack://wai/./src/components/left/settings/Settings.tsx","webpack://wai/./src/components/left/main/ContactList.tsx","webpack://wai/./src/components/left/newChat/NewChatStep1.tsx","webpack://wai/./src/components/left/newChat/NewChatStep2.tsx","webpack://wai/./src/components/left/newChat/NewChat.tsx","webpack://wai/./src/components/left/ArchivedChats.tsx","webpack://wai/./src/components/left/ChatFolderModal.tsx","webpack://wai/./src/components/middle/message/helpers/copyOptions.ts","webpack://wai/./src/util/scrollLock.ts","webpack://wai/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://wai/./src/components/middle/message/ReactionSelector.tsx","webpack://wai/./src/components/middle/message/MessageContextMenu.tsx","webpack://wai/./src/components/middle/message/ContextMenuContainer.tsx","webpack://wai/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://wai/./src/components/common/StickerSetModal.tsx","webpack://wai/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://wai/./src/components/common/CustomEmojiSetsModal.tsx","webpack://wai/./src/components/middle/HeaderMenuContainer.tsx","webpack://wai/./src/components/middle/MobileSearch.tsx","webpack://wai/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://wai/./src/hooks/useScrolledState.ts","webpack://wai/./src/util/findInViewport.ts","webpack://wai/./src/util/isFullyVisible.ts","webpack://wai/./src/util/setTooltipItemVisible.ts","webpack://wai/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://wai/./src/components/middle/composer/MentionTooltip.tsx","webpack://wai/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://wai/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://wai/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://wai/./src/components/middle/composer/AttachmentModal.tsx","webpack://wai/./src/components/middle/composer/PollModal.tsx","webpack://wai/./src/components/middle/composer/EmojiButton.tsx","webpack://wai/./src/components/middle/composer/EmojiCategory.tsx","webpack://wai/./src/components/middle/composer/EmojiPicker.tsx","webpack://wai/./src/components/middle/composer/StickerPicker.tsx","webpack://wai/./src/components/common/GifButton.tsx","webpack://wai/./src/components/middle/composer/GifPicker.tsx","webpack://wai/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://wai/./src/components/middle/composer/SymbolMenu.tsx","webpack://wai/./src/components/middle/composer/BotCommand.tsx","webpack://wai/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://wai/./src/components/middle/composer/BotCommandMenu.tsx","webpack://wai/./src/components/middle/composer/StickerTooltip.tsx","webpack://wai/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://wai/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://wai/./src/components/middle/composer/CustomSendMenu.tsx","webpack://wai/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://wai/./src/components/middle/composer/EmojiTooltip.tsx","webpack://wai/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://wai/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://wai/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://wai/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://wai/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://wai/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://wai/./src/components/middle/composer/SendAsMenu.tsx","webpack://wai/./src/components/right/RightSearch.tsx","webpack://wai/./src/components/right/StickerSetResult.tsx","webpack://wai/./src/components/right/StickerSearch.tsx","webpack://wai/./src/components/right/GifSearch.tsx","webpack://wai/./src/components/right/statistics/StatisticsOverview.tsx","webpack://wai/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://wai/./src/components/right/statistics/Statistics.tsx","webpack://wai/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://wai/./src/components/right/statistics/MessageStatistics.tsx","webpack://wai/./src/components/right/PollAnswerResults.tsx","webpack://wai/./src/components/right/PollResults.tsx","webpack://wai/./src/components/right/ManageTopic.module.scss?04dd","webpack://wai/./src/components/right/CreateTopic.tsx","webpack://wai/./src/components/right/EditTopic.tsx","webpack://wai/./src/components/right/management/ManageUser.tsx","webpack://wai/./src/components/right/management/ManageGroup.tsx","webpack://wai/./src/components/right/hooks/useManagePermissions.ts","webpack://wai/./src/components/right/management/ManageGroupPermissions.tsx","webpack://wai/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://wai/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://wai/./src/components/right/management/ManageChannel.tsx","webpack://wai/./src/components/common/UsernameInput.tsx","webpack://wai/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://wai/./src/components/right/management/ManageDiscussion.tsx","webpack://wai/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://wai/./src/components/right/management/ManageChatAdministrators.tsx","webpack://wai/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://wai/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://wai/./src/components/right/management/ManageGroupMembers.tsx","webpack://wai/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://wai/./src/components/right/management/ManageInvites.tsx","webpack://wai/./src/components/right/management/ManageInvite.tsx","webpack://wai/./src/components/right/management/ManageReactions.tsx","webpack://wai/./src/components/right/management/ManageInviteInfo.tsx","webpack://wai/./src/components/right/management/JoinRequest.tsx","webpack://wai/./src/components/right/management/ManageJoinRequests.tsx","webpack://wai/./src/components/right/management/Management.tsx","webpack://wai/./src/components/common/helpers/detectCardType.ts","webpack://wai/./src/hooks/reducers/usePaymentReducer.ts","webpack://wai/./src/hooks/useFocusAfterAnimation.tsx","webpack://wai/./src/components/ui/Select.tsx","webpack://wai/./src/components/payment/ShippingInfo.tsx","webpack://wai/./src/components/payment/Shipping.tsx","webpack://wai/./src/components/payment/Checkout.module.scss?4e47","webpack://wai/./src/components/payment/Checkout.tsx","webpack://wai/./src/components/payment/ExpiryInput.tsx","webpack://wai/./src/components/middle/helpers/inputFormatters.ts","webpack://wai/./src/components/payment/CardInput.tsx","webpack://wai/./src/components/payment/PaymentInfo.tsx","webpack://wai/./src/components/payment/ConfirmPayment.tsx","webpack://wai/./src/components/payment/SavedPaymentCredentials.tsx","webpack://wai/./src/components/payment/PasswordConfirm.tsx","webpack://wai/./src/components/payment/PaymentModal.tsx","webpack://wai/./src/components/payment/ReceiptModal.tsx","webpack://wai/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiDimensions, ApiMessage } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media, ${MESSAGE_CONTENT_SELECTOR} .thumbnail`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isInPictureInPicture, setIsInPictureInPicture] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsInPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      onLeave();\n      setIsInPictureInPicture(false);\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isInPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize, getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport {photosMap} from \"../../middle/message/Photo\";\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  let previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n\n  if(previewMediaHash && photosMap[previewMediaHash]){\n    previewBlobUrl = photosMap[previewMediaHash];\n  }\n\n  let {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  if(getMediaHash(true) && photosMap[getMediaHash(true)!]){\n    fullMediaBlobUrl = photosMap[getMediaHash(true)!];\n  }\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto || actionPhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    loadProgress,\n    videoSize,\n  };\n};\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {/*{canDeleteForAll && (*/}\n        {/*  <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>*/}\n        {/*    {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}*/}\n        {/*    {!contactName && lang('Conversation.DeleteMessagesForEveryone')}*/}\n        {/*  </Button>*/}\n        {/*)}*/}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  zoomLevelChange,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n  setZoomLevelChange,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {/*{message?.isForwardingAllowed && !isChatProtected && (*/}\n      {/*  <Button*/}\n      {/*    round*/}\n      {/*    size=\"smaller\"*/}\n      {/*    color=\"translucent-white\"*/}\n      {/*    ariaLabel={lang('Forward')}*/}\n      {/*    onClick={onForward}*/}\n      {/*  >*/}\n      {/*    <i className=\"icon-forward\" />*/}\n      {/*  </Button>*/}\n      {/*)}*/}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport { captureEvents } from '../../util/captureEvents';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if ((e.key === 'Enter' || e.key === ' ') && !isInPictureInPicture) {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n  const isMoving = isMouseDown && scale > 1;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          isMoving={isMoving}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, isMobile, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (!chatId || !mediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: mediaId });\n    }\n  }, [handleClose, isMobile, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === (avatarOwner as ApiUser).fullInfo?.fallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        isChatWithSelf,\n        canUpdateMedia,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album\n      || origin === MediaViewerOrigin.SuggestedAvatar) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Wai';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        const { req_id: requestId } = data.eventData;\n        // eslint-disable-next-line no-null/no-null -- Required by spec\n        window.navigator.clipboard.readText().catch(() => null).then((text) => {\n          sendEvent({\n            eventType: 'clipboard_text_received',\n            eventData: {\n              req_id: requestId,\n              data: text,\n            },\n          });\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendEvent, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeCloseModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId! });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\nimport grey from '../../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideRecentHeader?: boolean;\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isStatusPicker,\n  isCurrentUserPremium,\n  shouldHideRecentHeader,\n  withDefaultTopicIcon,\n  withDefaultStatusIcon,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(ITEMS_PER_ROW_FALLBACK);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickerMarginPx = isMobile ? 8 : 16;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const handleDefaultTopicIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const handleDefaultStatusIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useCallback((width: number) => {\n    if (!width) return ITEMS_PER_ROW_FALLBACK;\n\n    return Math.floor(width / (itemSize + margin));\n  }, [itemSize, margin]);\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  }, [calculateItemsPerRow]);\n  useResizeObserver(ref, handleResize);\n\n  useLayoutEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow) * (itemSize + margin);\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * (itemSize + margin);\n\n  const shouldHideHeader = isRecent && shouldHideRecentHeader;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className=\"symbol-set-name\">\n            {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n            {stickerSet.title}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n          )}\n          {!isRecent && isEmoji && !isInstalled && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersection}\n                noAnimate={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBoundsInSharedCanvas from '../../../hooks/useBoundsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const bounds = useBoundsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size || bounds.size}\n            play={isIntersecting && !noAnimate}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={bounds.coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport {\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  loadAndPlay: boolean;\n  isStatusPicker?: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isStatusPicker,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith(idPrefix)) {\n        return;\n      }\n\n      const index = Number(id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrRecent[] = [];\n\n    if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, defaultStatusIconsId, lang, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, [idPrefix]);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            idPrefix={idPrefix}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            isStatusPicker={isStatusPicker}\n            shouldHideRecentHeader={withDefaultTopicIcons || isStatusPicker}\n            withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n            onContextMenuOpen={onContextMenuOpen}\n            onContextMenuClose={onContextMenuClose}\n            onContextMenuClick={onContextMenuClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n    };\n  },\n)(CustomEmojiPicker));\n","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../middle/composer/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isStatusPicker\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={\"删除消息\"}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {/*{canDeleteForAll && (*/}\n        {/*  <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>*/}\n        {/*    {contactName*/}\n        {/*      ? renderText(lang('ChatList.DeleteForEveryone', contactName))*/}\n        {/*      : lang('Conversation.DeleteMessagesForEveryone')}*/}\n        {/*  </Button>*/}\n        {/*)}*/}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    saveMsgToCloud,\n    exitMessageSelectMode,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n\n  const handleExitMessageSelectMode = useCallback(() => {\n    exitMessageSelectMode();\n  }, [exitMessageSelectMode]);\n\n\n  const handleSaveMsgToCloud = useCallback(() => {\n    saveMsgToCloud();\n  }, [saveMsgToCloud]);\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,icon_rotate_180?:boolean\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={`icon-${icon_rotate_180 ? icon + \" rotate_180\" : icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {/*{messageListType !== 'scheduled' && canForwardMessages && (*/}\n            {/*  renderButton(*/}\n            {/*    'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,*/}\n            {/*  )*/}\n            {/*)}*/}\n            {/*{canReportMessages && (*/}\n            {/*  renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)*/}\n            {/*)}*/}\n            {/*{canDownloadMessages && !hasProtectedMessage && (*/}\n            {/*  renderButton('download', lang('lng_media_download'), handleDownload)*/}\n            {/*)}*/}\n            {/*{!hasProtectedMessage && (*/}\n            {/*  renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)*/}\n            {/*)}*/}\n            {/*{canDeleteMessages && (*/}\n            {/*  renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)*/}\n            {/*)}*/}\n\n            {(\n              renderButton('download', lang('保存到云端'), handleSaveMsgToCloud,false,true)\n            )}\n\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)}\n\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const handleCloseSeenByModal = useCallback(() => {\n    closeSeenByModal();\n  }, [closeSeenByModal]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                      <FullNameTitle peer={user} withEmojiStatus />\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { selectLanguageCode, selectRequestedTranslationLanguage, selectTabState } from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './MessageLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst MessageLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const { requestMessageTranslation, closeMessageLanguageModal } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useCallback((toLanguageCode: string) => {\n    if (!chatId || !messageId) return;\n\n    requestMessageTranslation({ chatId, id: messageId, toLanguageCode });\n    closeMessageLanguageModal();\n  }, [chatId, closeMessageLanguageModal, messageId, requestMessageTranslation]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeMessageLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={styles.listItem}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).messageLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId && messageId\n      ? selectRequestedTranslationLanguage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(MessageLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ty4iYfZBkv7TFGwTrzul\",\"list-item\":\"GXEouxz4KmZfOmlymVnB\",\"listItem\":\"GXEouxz4KmZfOmlymVnB\",\"title\":\"MpKdUudmoMIsoFkDFNbJ\",\"subtitle\":\"B0tluyEaLLlMRQ5TZMEP\",\"languages\":\"SxqwP1DiSMFc8Gh_KgfK\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n    // if (!localContactIds) {\n    //   return {\n    //     chatsById,\n    //   };\n    // }\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport {\n  selectChat,\n} from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      {/*<TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />*/}\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && editedFolderId !== 1 && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            {/*<DropdownMenu*/}\n            {/*  className=\"settings-more-menu\"*/}\n            {/*  trigger={SettingsMenuButton}*/}\n            {/*  positionX=\"right\"*/}\n            {/*>*/}\n            {/*  <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>*/}\n            {/*</DropdownMenu>*/}\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {/*<ListItem*/}\n        {/*  icon=\"lock\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Privacy)}*/}\n        {/*>*/}\n        {/*  {lang('PrivacySettings')}*/}\n        {/*</ListItem>*/}\n\n        {/*<ListItem*/}\n        {/*  icon=\"settings\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.General)}*/}\n        {/*>*/}\n        {/*  {lang('Telegram.GeneralSettingsViewController')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"unmute\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Notifications)}*/}\n        {/*>*/}\n        {/*  {lang('Notifications')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"data\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.DataStorage)}*/}\n        {/*>*/}\n        {/*  {lang('DataSettings')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"lock\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Privacy)}*/}\n        {/*>*/}\n        {/*  {lang('PrivacySettings')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"folder\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Folders)}*/}\n        {/*>*/}\n        {/*  {lang('Filters')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"active-sessions\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}*/}\n        {/*>*/}\n        {/*  {lang('SessionsTitle')}*/}\n        {/*  {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"language\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Language)}*/}\n        {/*>*/}\n        {/*  {lang('Language')}*/}\n        {/*  <span className=\"settings-item__current-value\">{lang.langName}</span>*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"stickers\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Stickers)}*/}\n        {/*>*/}\n        {/*  {lang('StickersName')}*/}\n        {/*</ListItem>*/}\n        {/*{canBuyPremium && (*/}\n        {/*  <ListItem*/}\n        {/*    leftElement={<PremiumIcon withGradient big />}*/}\n        {/*    className=\"settings-main-menu-premium\"*/}\n        {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*    onClick={() => openPremiumModal()}*/}\n        {/*  >*/}\n        {/*    {lang('TelegramPremium')}*/}\n        {/*  </ListItem>*/}\n        {/*)}*/}\n        {/*  <ListItem*/}\n        {/*    leftElement={<PremiumIcon withGradient big />}*/}\n        {/*    className=\"settings-main-menu-premium\"*/}\n        {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*    onClick={() => openPremiumModal()}*/}\n        {/*  >*/}\n        {/*    {lang('TelegramPremium')}*/}\n        {/*  </ListItem>*/}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    // if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        {/*<div className=\"settings-item\">*/}\n        {/*  <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>*/}\n\n        {/*  <UsernameInput*/}\n        {/*    currentUsername={currentUsername}*/}\n        {/*    isLoading={isLoading}*/}\n        {/*    isUsernameAvailable={isUsernameAvailable}*/}\n        {/*    checkedUsername={checkedUsername}*/}\n        {/*    onChange={handleUsernameChange}*/}\n        {/*  />*/}\n\n        {/*  {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}*/}\n        {/*  <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n        {/*    {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}*/}\n        {/*  </p>*/}\n        {/*  {editableUsername && (*/}\n        {/*    <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n        {/*      {lang('lng_username_link')}<br />*/}\n        {/*      <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>*/}\n        {/*    </p>*/}\n        {/*  )}*/}\n        {/*</div>*/}\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\nimport {BOT_FOLDER_ID} from \"../../../../worker/setting\";\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID || folder.id === BOT_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={folder.id === 1 ? undefined : [\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\n// const ERROR_NO_TITLE = 'Please provide a title for this folder.';\n// const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\n\nconst ERROR_NO_TITLE = '请填写名称';\nconst ERROR_NO_CHATS = '对话不能为空';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n    //\n    // if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n    //   dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n    //   return;\n    // }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId!, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder as ApiChatFolder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {/*<h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n            {/*  {lang('FilterChatTypes')}*/}\n            {/*</h4>*/}\n            {/*{chatTypes.map(renderChatType)}*/}\n            {/*<div className=\"picker-list-divider\" />*/}\n            {/*<h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n            {/*  {lang('FilterChats')}*/}\n            {/*</h4>*/}\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {ApiPrivacySettings} from '../../../types';\nimport {SettingsScreens} from '../../../types';\n\nimport {selectIsCurrentUserPremium} from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  session?:string;\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  session,\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n    updatePageTitle,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n    updatePageTitle();\n  }, []);\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n\n        {/*</ListItem>*/}\n          {/*<ListItem*/}\n          {/*  icon=\"key\"*/}\n          {/*  narrow*/}\n          {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n          {/*  onClick={() => onScreenSelect(*/}\n          {/*    hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,*/}\n          {/*  )}*/}\n          {/*>*/}\n          {/*  <div className=\"multiline-menu-item\">*/}\n          {/*    <span className=\"title\">{lang('Passcode')}</span>*/}\n          {/*    <span className=\"subtitle\" dir=\"auto\">*/}\n          {/*      {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}*/}\n          {/*    </span>*/}\n          {/*  </div>*/}\n          {/*</ListItem>*/}\n\n      </div>\n\n      {/*<div className=\"settings-item pt-3\">*/}\n      {/*  <ListItem*/}\n      {/*    icon=\"delete-user\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}*/}\n      {/*  >*/}\n      {/*    {lang('BlockedUsers')}*/}\n      {/*    <span className=\"settings-item__current-value\">{blockedCount || ''}</span>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    icon=\"key\"*/}\n      {/*    narrow*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(*/}\n      {/*      hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,*/}\n      {/*    )}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('Passcode')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    icon=\"lock\"*/}\n      {/*    narrow*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(*/}\n      {/*      hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,*/}\n      {/*    )}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('TwoStepVerification')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  {webAuthCount > 0 && (*/}\n      {/*    <ListItem*/}\n      {/*      icon=\"web\"*/}\n      {/*      // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*      onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}*/}\n      {/*    >*/}\n      {/*      {lang('PrivacySettings.WebSessions')}*/}\n      {/*      <span className=\"settings-item__current-value\">{webAuthCount}</span>*/}\n      {/*    </ListItem>*/}\n      {/*  )}*/}\n      {/*</div>*/}\n\n      {/*<div className=\"settings-item\">*/}\n      {/*  <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>*/}\n\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyPhoneNumber)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('LastSeenTitle')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyLastSeen)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyProfilePhoto)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('WhoCanCallMe')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyPhoneCall)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyP2P')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyPhoneP2P)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyForwarding)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    disabled={!isCurrentUserPremium}*/}\n      {/*    allowDisabledClick*/}\n      {/*    rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    onClick={handleVoiceMessagesClick}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyVoiceMessages)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('WhoCanAddMe')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyGroupChats)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*</div>*/}\n\n      {/*{canDisplayAutoarchiveSetting && (*/}\n      {/*  <div className=\"settings-item\">*/}\n      {/*    <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n      {/*      {lang('NewChatsFromNonContacts')}*/}\n      {/*    </h4>*/}\n      {/*    <Checkbox*/}\n      {/*      label={lang('ArchiveAndMute')}*/}\n      {/*      subLabel={lang('ArchiveAndMuteInfo')}*/}\n      {/*      checked={Boolean(shouldArchiveAndMuteNewNonContact)}*/}\n      {/*      onCheck={handleArchiveAndMuteChange}*/}\n      {/*    />*/}\n      {/*  </div>*/}\n      {/*)}*/}\n\n      {/*<div className=\"settings-item\">*/}\n      {/*  <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n      {/*    {lang('lng_settings_window_system')}*/}\n      {/*  </h4>*/}\n      {/*  <Checkbox*/}\n      {/*    label={lang('lng_settings_title_chat_name')}*/}\n      {/*    checked={Boolean(canDisplayChatInTitle)}*/}\n      {/*    onCheck={handleChatInTitleChange}*/}\n      {/*  />*/}\n      {/*</div>*/}\n\n      {/*{canChangeSensitive && (*/}\n      {/*  <div className=\"settings-item\">*/}\n      {/*    <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n      {/*      {lang('lng_settings_sensitive_title')}*/}\n      {/*    </h4>*/}\n      {/*    <Checkbox*/}\n      {/*      label={lang('lng_settings_sensitive_disable_filtering')}*/}\n      {/*      subLabel={lang('lng_settings_sensitive_about')}*/}\n      {/*      checked={Boolean(isSensitiveEnabled)}*/}\n      {/*      disabled={!canChangeSensitive}*/}\n      {/*      onCheck={handleUpdateContentSettings}*/}\n      {/*    />*/}\n      {/*  </div>*/}\n      {/*)}*/}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n      session,\n    } = global;\n\n    return {\n      session,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { unique } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  lastSyncTime?: number;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  languages,\n  language,\n  canTranslate,\n  doNotTranslate,\n  lastSyncTime,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !languages?.length) {\n      loadLanguages();\n    }\n  }, [languages, lastSyncTime, loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  }, [setSettingOption]);\n\n  const doNotTranslateText = useMemo(() => {\n    const allDoNotTranslateLanguages = unique([...doNotTranslate, language]);\n    // Do not translate current language\n    if (allDoNotTranslateLanguages.length === 1) {\n      if (!languages) {\n        return lang('Loading');\n      }\n      return languages.find(({ langCode }) => langCode === language)?.nativeName;\n    }\n\n    return lang('Languages', allDoNotTranslateLanguages.length);\n  }, [doNotTranslate, lang, language, languages]);\n\n  const handleDoNotSelectOpen = useCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('ShowTranslateButton')}\n          checked={canTranslate}\n          onCheck={handleShouldTranslateChange}\n        />\n        {canTranslate && (\n          <ListItem\n            onClick={handleDoNotSelectOpen}\n          >\n            {lang('DoNotTranslate')}\n            <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n          </ListItem>\n        )}\n        <p className=\"settings-item-description mb-0 mt-1\">\n          {lang('lng_translate_settings_about')}\n        </p>\n      </div>\n      <div className=\"settings-item\">\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      languages,\n      language,\n      canTranslate,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const fallbackPhoto = currentUser.fullInfo?.fallbackPhoto;\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!currentUser.fullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [currentUser.fullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: fallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, fallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(fallbackPhoto ? 'Privacy.ProfilePhoto.UpdatePublicPhoto' : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {fallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={fallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(fallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto currentUser={currentUser} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  availableReactions,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n      disabled: langCode === language,\n    }));\n  }, [language]);\n\n  const allSelected = useMemo(() => {\n    return unique([...doNotTranslate, language]);\n  }, [doNotTranslate, language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const [selected, unselected] = partition(options, (option) => allSelected.includes(option.value));\n    const current = selected.find((option) => option.value === language);\n    const selectedFiltered = selected.filter((option) => option.value !== language);\n\n    setDisplayedOptions([current!, ...selectedFiltered, ...unselected]);\n  }, [isActive, allSelected, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={allSelected.includes(option.value)}\n              value={option.value}\n              disabled={option.disabled}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport TextArea from \"../../ui/TextArea\";\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n    createChat,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    createChat();\n    // if (!title.length) {\n    //   setError(chatTitleEmptyError);\n    //   return;\n    // }\n    //\n    // if (maxGroupSize && memberIds.length >= maxGroupSize) {\n    //   setError(chatTooManyUsersError);\n    //   return;\n    // }\n    //\n    // createGroupChat({\n    //   title,\n    //   photo,\n    //   memberIds,\n    // });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n\n    if (!title.length) {\n      setError(\"名称不能为空\");\n      return;\n    }\n    createChat({\n      title,\n      promptInit:about\n    });\n    setTimeout(() => {\n      onReset();\n    }, 500);\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>新建机器人</h3>\n      </div>\n      <div className=\"NewChat-inner step-2 pt-3\">\n        {/*<AvatarEditable*/}\n        {/*  onChange={setPhoto}*/}\n        {/*  title={lang('AddPhoto')}*/}\n        {/*/>*/}\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={\"名称\"}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <TextArea\n              value={about}\n              onChange={handleDescriptionChange}\n              label={\"初始化 prompt\"}\n            />\n            <p className=\"note\">{\"每次请求都会带入该prompt\"}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={handleCreateChannel}\n        disabled={isLoading}\n        ariaLabel={\"Create Bot\"}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  }, [updateArchiveSettings]);\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelOpen && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  chosen?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  previewIndex,\n  isReady,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn('static')}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\n\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { isSameReaction, canSendReaction, getReactionUniqueKey } from '../../../global/helpers';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  onToggleReaction,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  useHorizontalScroll(itemsScrollRef);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY && e.cancelable) {\n      e.preventDefault();\n    }\n  };\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }) || [];\n  }, [availableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions]);\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {reactionsToRender.map((reaction, i) => {\n            if (!reaction) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={getReactionUniqueKey(reaction.reaction)}\n                previewIndex={i}\n                isReady={isReady}\n                onToggleReaction={onToggleReaction}\n                reaction={reaction}\n                chosen={userReactionIndexes.has(i)}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onSpeak?: () => void;\n  onOpenThread?: VoidFunction;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onTranslate?: () => void;\n  onShowOriginal?: () => void;\n  onSelectLanguage?: () => void;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onSpeak,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets,saveMsgToCloud } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n      || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [isMobile, withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleSaveMsgToCloud = useCallback(() => {\n    if (\"id\" in message) {\n      saveMsgToCloud({\n        chatId: message.chatId!,\n        msgId: message.id\n      });\n    }\n    onClose();\n  }, [saveMsgToCloud]);\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {/*{true && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}*/}\n        {/*{true && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}*/}\n        {/*{true && (*/}\n        {/*  <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>*/}\n        {/*)}*/}\n        <MenuItem icon=\"download\" icon_rotate_180 onClick={handleSaveMsgToCloud}>{lang('保存到云端')}</MenuItem>\n        <MenuItem icon=\"allow-speak\" onClick={onSpeak}>{lang('朗读')}</MenuItem>\n\n        {/* {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>} */}\n        {/* {canReschedule && ( */}\n        {/*   <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem> */}\n        {/* )} */}\n        {/* {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}*/}\n        {/* {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (*/}\n        {/*   <MenuItem icon=\"replies\" onClick={onOpenThread}>*/}\n        {/*     {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}*/}\n        {/*   </MenuItem>*/}\n        {/* )}*/}\n\n\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {/* {canFaveSticker && ( */}\n        {/*   <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem> */}\n        {/* )} */}\n        {/* {canUnfaveSticker && ( */}\n        {/*   <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem> */}\n        {/* )} */}\n        {/* {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}*/}\n        {/* {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>} */}\n        {/* {canSelectLanguage && ( */}\n        {/*   <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem> */}\n        {/* )} */}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {/* {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>} */}\n        {/* {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>} */}\n        {/* {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>} */}\n        {/* {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>} */}\n        {/* {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>} */}\n         {canDownload && (\n           <MenuItem icon=\"download\" onClick={onDownload}>\n             {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n           </MenuItem>\n         )}\n         {/*{canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}*/}\n         {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {/* {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>} */}\n        {/* {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && ( */}\n        {/*   <MenuItem */}\n        {/*     className=\"MessageContextMenu--seen-by\" */}\n        {/*     icon={canShowReactionsCount ? 'heart-outline' : 'group'} */}\n        {/*     onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy} */}\n        {/*     disabled={!canShowReactionsCount && !message.seenByUserIds?.length} */}\n        {/*   > */}\n        {/*     <span className=\"MessageContextMenu--seen-by-label\"> */}\n        {/*       {canShowReactionsCount && message.reactors?.count ? ( */}\n        {/*         canShowSeenBy && message.seenByUserIds?.length */}\n        {/*           ? lang( */}\n        {/*             'Chat.OutgoingContextMixedReactionCount', */}\n        {/*             [message.reactors.count, message.seenByUserIds.length], */}\n        {/*           ) */}\n        {/*           : lang('Chat.ContextReactionCount', message.reactors.count, 'i') */}\n        {/*       ) : ( */}\n        {/*         message.seenByUserIds?.length === 1 && seenByRecentUsers */}\n        {/*           ? renderText(getUserFullName(seenByRecentUsers[0])!) */}\n        {/*           : (message.seenByUserIds?.length */}\n        {/*             ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i') */}\n        {/*             : lang('Conversation.ContextMenuNoViews') */}\n        {/*           ) */}\n        {/*       )} */}\n        {/*     </span> */}\n        {/*     <div className=\"avatars\"> */}\n        {/*       {seenByRecentUsers?.map((user) => ( */}\n        {/*         <Avatar */}\n        {/*           size=\"micro\" */}\n        {/*           user={user} */}\n        {/*         /> */}\n        {/*       ))} */}\n        {/*     </div> */}\n        {/*   </MenuItem> */}\n        {/* )} */}\n\n         {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {/* {hasCustomEmoji && ( */}\n        {/*   <> */}\n        {/*     <MenuSeparator /> */}\n        {/*     {!customEmojiSets && ( */}\n        {/*       <> */}\n        {/*         <Skeleton inline className=\"menu-loading-row\" /> */}\n        {/*         <Skeleton inline className=\"menu-loading-row\" /> */}\n        {/*       </> */}\n        {/*     )} */}\n        {/*     {customEmojiSets && customEmojiSets.length === 1 && ( */}\n        {/*       <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\"> */}\n        {/*         {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])} */}\n        {/*       </MenuItem> */}\n        {/*     )} */}\n        {/*     {customEmojiSets && customEmojiSets.length > 1 && ( */}\n        {/*       <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\"> */}\n        {/*         {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])} */}\n        {/*       </MenuItem> */}\n        {/*     )} */}\n        {/*   </> */}\n        {/* )} */}\n         {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {/* {isSponsoredMessage && onSponsoredHide && ( */}\n        {/*   <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem> */}\n        {/* )} */}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedTranslationLanguage,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo, getChatMessageLink,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  repliesThreadInfo?: ApiThreadInfo;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    onSpeak,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleSpeak = useCallback(() => {\n    onSpeak({ messageId: message.id });\n    closeMenu();\n  },  [message.id, closeMenu]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openChat]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const handleTranslate = useCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, requestMessageTranslation]);\n\n  const handleShowOriginal = useCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, showOriginalMessage]);\n\n  const handleSelectLanguage = useCallback(() => {\n    openMessageLanguageModal({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openMessageLanguageModal]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onSpeak={handleSpeak}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n\n    const { canTranslate: isTranslationEnabled, language, doNotTranslate } = global.settings.byKey;\n\n    const canTranslateLanguage = !detectedLanguage\n      || (!doNotTranslate.includes(detectedLanguage) && language !== detectedLanguage);\n    const canTranslate = IS_TRANSLATION_SUPPORTED && isTranslationEnabled && message.content.text\n      && canTranslateLanguage && !isLocal && !isScheduled && !isAction && !hasTranslation && !message.emojiOnlyCount;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation,\n      canSelectLanguage: hasTranslation,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet, selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder: isAdded });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectNotifySettings,\n  selectNotifyExceptions,\n  selectUser,\n  selectChatBot,\n  selectIsPremiumPurchaseBlocked,\n  selectCurrentMessageList, selectTabState,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getCanDeleteChat,\n  selectIsChatMuted,\n  getCanAddContact,\n  isChatChannel,\n  isChatGroup,\n  getCanManageTopic,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleViewAsTopicsClick = useCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  }, [closeMenu, openChat]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, requestMasterAndJoinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleCloseLocalTextSearch = useCallback(() => {\n    closeLocalTextSearch();\n  }, [closeLocalTextSearch]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  }, [threshold]);\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useCallback(() => {\n    onToggleSpoiler?.(index);\n  }, [index, onToggleSpoiler]);\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <i\n            className={buildClassName(\n              attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n              styles.actionItem,\n            )}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n            <i className={buildClassName('icon-delete', styles.actionItem)} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChat, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  }, [\n    isOpen, shouldSchedule, onSendScheduled, onSendSilent, onSend, isSendingCompressed, shouldSendGrouped,\n    updateAttachmentSettings,\n  ]);\n\n  const handleSendSilent = useCallback(() => {\n    sendAttachments(true);\n  }, [sendAttachments]);\n\n  const handleSendClick = useCallback(() => {\n    sendAttachments();\n  }, [sendAttachments]);\n\n  const handleScheduleClick = useCallback(() => {\n    sendAttachments(false, true);\n  }, [sendAttachments]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  }, [handleFileSelect]);\n\n  const handleDelete = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleEnableSpoilers = useCallback(async () => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: true })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleDisableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleToggleSpoiler = useCallback(async (index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id=\"caption-input-text\"\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {lang('Send')}\n              </Button>\n              {/*{canShowCustomSendMenu && (*/}\n              {/*  <CustomSendMenu*/}\n              {/*    isOpen={isCustomSendMenuOpen}*/}\n              {/*    onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}*/}\n              {/*    onSendSchedule={handleScheduleClick}*/}\n              {/*    onClose={handleContextMenuClose}*/}\n              {/*    onCloseAnimationEnd={handleContextMenuHide}*/}\n              {/*    isSavedMessages={isChatWithSelf}*/}\n              {/*  />*/}\n              {/*)}*/}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chat?.fullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    shouldUpdateStickerSetsOrder?: boolean\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || isAttachmentModal) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, shouldUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const handleSelect = useCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  }, [getHtml, handleSendCommand]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoom-fade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoom-fade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat, selectTabState, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\nimport {UserIdFirstBot} from \"../../../worker/setting\";\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    deleteHistory,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({chatId:userId})\n    // deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleUploadPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  let canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n  const personalPhoto = user.fullInfo?.personalPhoto;\n  const notPersonalPhoto = user.fullInfo?.profilePhoto || user.fullInfo?.fallbackPhoto;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            hideName={true}\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            // label={lang('UserInfo.FirstNamePlaceholder')}\n            label={\"名称\"}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          {/*<InputText*/}\n          {/*  id=\"user-last-name\"*/}\n          {/*  label={lang('UserInfo.LastNamePlaceholder')}*/}\n          {/*  onChange={handleLastNameChange}*/}\n          {/*  value={lastName}*/}\n          {/*/>*/}\n          {/*<div className=\"ListItem no-selection narrow\">*/}\n          {/*  <Checkbox*/}\n          {/*    checked={isNotificationsEnabled}*/}\n          {/*    label={lang('Notifications')}*/}\n          {/*    subLabel={lang(isNotificationsEnabled*/}\n          {/*      ? 'UserInfo.NotificationsEnabled'*/}\n          {/*      : 'UserInfo.NotificationsDisabled')}*/}\n          {/*    onChange={handleNotificationChange}*/}\n          {/*  />*/}\n          {/*</div>*/}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"camera-add\" ripple onClick={handleUploadPhoto}>\n            上传头像\n          </ListItem>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              {lang('UserInfo.SuggestPhoto', user.firstName)}\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              {lang('UserInfo.SetCustomPhoto', user.firstName)}\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        {\n          ((UserIdFirstBot !== userId )) &&\n          <div className=\"section\">\n            <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n              {lang(\"删除\")}\n            </ListItem>\n          </div>\n        }\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang(\"确定要删除么？\")}\n        confirmLabel={lang(\"删除\")}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const handleForumToggle = useCallback(() => {\n    toggleForum({ chatId, isEnabled: !chat.isForum });\n  }, [chat.isForum, chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chat, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  }, [chat.fullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={chat.isForum}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (chat.isForum ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={chat.isForum}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem no-selection with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const hasLinkedChat = Boolean(chat?.fullInfo?.linkedChatId);\n\n    return { chat, currentUserId: global.currentUserId, hasLinkedChat };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiAvailableReaction, ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    const text = totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n    return text;\n  }, [availableReactions, chat, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { selectChat, selectTabState, selectManagement } from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? editableUsername : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat?.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? chat.fullInfo?.adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  isBasicGroup?: boolean;\n  areParticipantsHidden?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  isBasicGroup,\n  areParticipantsHidden,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {!isBasicGroup && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      isBasicGroup: Boolean(chat && isChatBasicGroup(chat)),\n      areParticipantsHidden: Boolean(chat && chat.fullInfo?.areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.usernames && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["ANIMATION_DURATION","createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","RADIUS","ITERATIONS","MAX_CACHE_SIZE","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","photosMap","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","DeleteMessageModal","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForSelf","useCallback","messageIds","messages","map","shouldDeleteForAll","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","DeleteProfilePhotoModal","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","MediaViewerActions","canReport","zoomLevelChange","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","setZoomLevelChange","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","length","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","MediaViewerFooter","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","VideoPlayerControls","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","onLeave","isSupported","setIsSupported","setIsInPictureInPicture","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isMoving","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","cancelAnimation","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","getMediaId","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","useFullscreenStatus","fullscreenProp","checkIfFullscreen","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","_transformRef$current","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","MediaViewerContent","isRtl","toFixed","selector","matches","messageId","isAvatar","settings","byKey","sender","selectSender","SenderInfo","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","renderText","formatMediaDateTime","date","shouldSkipHistoryAnimations","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","selectChatScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","MediaViewer","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","disableDirectTextInput","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handleBeforeDelete","ShowTransition","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","name","fullInfo","fallbackPhoto","ReportModal","subject","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","RecipientPicker","filter","API_CHAT_TYPES","searchPlaceholder","loadMore","onSelectRecipient","onCloseAnimationEnd","search","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","getCanPostInChat","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","ChatOrUserPicker","chatOrUserIds","onSearchChange","onSelectChatOrUser","isManyMessages","forwardMessages","ForwardRecipientPicker","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","topicId","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","getReadableErrorText","Notifications","notifications","dismissNotification","localId","actionText","Notification","onDismiss","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","UrlAuthModal","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","request","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","Number","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userId","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","InputText","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","status","payment","paymentStatus","WebAppModal","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","frame","once","contentWindow","postMessage","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","requestId","navigator","clipboard","readText","catch","then","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","destructive","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","BotTrustModal","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","setIsWriteAllowed","prevBot","renderingBot","_bot$shouldRequestWri","shortName","DeleteFolderDialog","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","PremiumLimitPreview","description","colorStepProgress","lerp","PremiumFeaturePreviewVideo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","slice","cycleRestrict","clientWidth","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","PremiumFeatureItem","ListItem","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","PremiumMainModal","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","GiftOption","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","GiftPremiumModal","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","reduce","acc","gift","selectedGift","botUrl","handlePremiumClick","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","StickerSet","stickerSet","loadAndPlay","idPrefix","favoriteStickers","isSavedMessages","isStatusPicker","isCurrentUserPremium","shouldHideRecentHeader","withDefaultTopicIcon","withDefaultStatusIcon","observeIntersection","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","toggleStickerSet","loadStickers","sharedCanvasRef","sharedCanvasHqRef","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","isIntersecting","useIsIntersecting","stickerMarginPx","emojiMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","margin","calculateItemsPerRow","entry","contentRect","useResizeObserver","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","heightWhenCut","shouldHideHeader","favoriteStickerIdsSet","Set","pill","fluid","grey","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","StickerButton","noAnimate","canViewSet","clickArg","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","StickerSetCover","STICKER_SIZE_PICKER_HEADER","hasThumbnail","isVideos","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","isReady","useBoundsInSharedCanvas","sharedCanvas","sharedCanvasCoords","coords","getFirstLetters","stickerSetIntersections","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","addedCustomEmojiIds","added","setIds","canAnimate","shouldLoopStickers","defaultTopicIconsId","defaultStatusIconsId","CustomEmojiPicker","withDefaultTopicIcons","onCustomEmojiSelect","headerRef","activeSetIndex","setActiveSetIndex","values","pickTruthy","observe","useIntersectionObserver","rootRef","throttleMs","entries","forEach","startsWith","intersectingWithIndexes","observeIntersectionForCovers","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","defaultStatusIconsPack","concat","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","shouldRenderContents","useHorizontalScroll","newLeft","offsetWidth","HEADER_BUTTON_WIDTH","selectStickerSet","stickerSetEl","fastSmoothScroll","handleEmojiSelect","emoji","fullClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","faded","noContextMenu","Loading","areFeaturedStickersLoaded","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","AboutAdsModal","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","PinMessageModal","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","DeleteSelectedMessageModal","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","saveMsgToCloud","downloadSelectedMessages","copySelectedMessages","useCopySelectedMessages","useHotkeys","handleExitMessageSelectMode","handleSaveMsgToCloud","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","formattedMessagesCount","renderButton","icon_rotate_180","seenByModal","memberIds","seenByUserIds","SeenByModal","closeSeenByModal","handleCloseSeenByModal","renderingMemberIds","PrivateChatInfo","noStatusOrTyping","reactorModal","reactions","reactors","availableReactions","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","reaction","r","isSameReaction","viewportIds","getMore","useInfiniteScroll","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","getReactionUniqueKey","ReactionStaticEmoji","InfiniteScroll","items","onLoadMore","flatMap","userReactions","reactor","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","messageLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedTranslationLanguage","MessageLanguageModal","requestMessageTranslation","closeMessageLanguageModal","handleSelect","toLanguageCode","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","langCode","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","toLowerCase","isSlim","placeholder","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","LeftSearchResultChat","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","GroupChatInfo","DeleteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","lastSyncTime","privateChatUser","ChatMessage","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","ChatResults","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","TOPIC_ICON_SIZE","topic","topics","LeftSearchResultTopic","TopicIcon","letterClassName","foundTopicIds","searchChatId","ChatMessageResults","handleTopicClick","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","MediaResults","observeIntersectionForMedia","handleSelectMedia","isMediaGrid","isMessageList","itemSelector","Media","LinkResults","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","FileResults","Document","withDate","datetime","smaller","onDateClick","AudioResults","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","TRANSITION_RENDER_COUNT","keys","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSearchDateSelect","tab","useKeyboardListNavigation","onKeyDown","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","SettingsHeader","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","SettingsMain","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","ZERO_POINT","Draggable","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","username","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","handler","ERROR_FIRST_NAME_MISSING","isUsernameAvailable","checkedUsername","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","currentUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","previousIsUsernameAvailable","renderingIsUsernameAvailable","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","maxLengthIndicator","FloatingActionButton","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","getFolderDescriptionText","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","BOT_FOLDER_ID","inactive","isStatic","ShowMoreButton","itemName","itemPluralName","ERROR_NO_TITLE","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","SettingsFoldersEdit","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","SettingsFoldersChatsPicker","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","SettingsFoldersChatFilters","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFolders","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","SettingsGeneral","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","WallpaperTile","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","session","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","SettingsPrivacy","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","updatePageTitle","language","languages","canTranslate","doNotTranslate","SettingsLanguage","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","setLanguage","currentLangCode","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","doNotTranslateText","allDoNotTranslateLanguages","handleDoNotSelectOpen","loadingOption","getPrivacyKey","screen","SelectAvatar","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","SettingsPrivacyPublicProfilePhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","leftElement","privacySettings","SettingsPrivacyVisibility","visibility","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","result","membersCount","blockCount","handleVisibilityChange","getSessionIcon","platform","device","deviceModel","systemVersion","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","SettingsActiveSessions","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveWebsite","terminateWebAuthorization","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","BlockUserModal","setUserSearchQuery","blockContact","query","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","viewportOffset","isPrivate","userOrChat","userMainUsername","CHAT_HEIGHT_PX","renderContact","SettingsTwoFaEnabled","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","SettingsTwoFaStart","onStart","animatedEmoji","selectAnimatedEmoji","SettingsTwoFaSkippableForm","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","SettingsTwoFaCongratulations","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","SettingsTwoFaEmailCode","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","availableReaction","isInactive","emoticon","SettingsPasscodeStart","STICKER_SIZE_PASSCODE","SettingsPasscodeEnabled","SettingsPasscodeCongratulations","fullReset","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeForm","StickerSetCard","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","SettingsStickers","shouldSuggestStickers","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","SettingsCustomEmoji","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","SettingsDoNotTranslate","displayedOptions","setDisplayedOptions","allSelected","useEffectWithPrevDeps","prevIsActive","unselected","partition","selectedFiltered","newDoNotTranslate","v","filteredDisplayedOptions","SettingsExperimental","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","ContactList","openNewContactDialog","filteredIds","sortUserIds","isSearching","NewChatStep1","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","createChat","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateChannel","promptInit","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ArchivedChats","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","onTransitionEnd","ChatList","folderType","ForumPanel","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","ReactionSelectorReaction","previewIndex","chosen","onToggleReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","ReactionSelector","enabledReactions","currentReactions","maxUniqueReactions","itemsScrollRef","handleWheel","cancelable","reactionsToRender","canSendReaction","userReactionIndexes","chosenReactions","chosenOrder","findIndex","onWheelCapture","onTouchMove","MessageContextMenu","anchor","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onOpenThread","onEdit","onPin","onSpeak","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","transformOriginY","menuStyle","withScroll","useContextMenuPosition","msgId","bubbleStyle","detectedLanguage","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isLocal","isMessageLocal","isChatGroup","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","every","translationRequestLanguage","hasTranslation","selectMessageTranslations","isTranslationEnabled","canTranslateLanguage","IS_TRANSLATION_SUPPORTED","emojiOnlyCount","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","ContextMenuContainer","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openMessageLanguageModal","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","recentReactions","uniqueReactors","msg","handleReport","closeMenu","closePinModal","handleSpeak","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","SponsoredMessageContextMenuContainer","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","shouldUpdateStickerSetsOrder","handleButtonClick","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canCreateTopic","isForum","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","MenuSeparator","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","MobileSearchFooter","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","THRESHOLD","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","findInViewport","selectorOrElements","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","VIEWPORT_MARGIN","SCROLL_MARGIN","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","useDerivedState","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","isMultiple","isBottomDividerShown","renderHeader","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","PollModal","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","EmojiButton","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EmojiCategory","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","shouldRenderContent","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","favorite","premiumSet","recentStickers","premiumStickers","StickerPicker","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","PremiumIcon","withGradient","big","GifButton","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSwitchTab","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","SymbolMenu","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","mobileClassName","withPortal","onMouseLeave","BotCommand","withAvatar","botCommand","BotCommandTooltip","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommandMenu","StickerTooltip","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","CustomSendMenu","isOpenToBottom","onSendSchedule","CustomEmojiButton","withSharedAnimation","shouldPreloadPreview","observeIntersectionForPlaying","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","BaseResult","thumbUrl","thumbnailDataUrl","decoding","MediaResult","isForGallery","inlineResult","webThumbnail","ArticleResult","GifResult","_gif","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","InlineBotTooltip","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","rightElement","noFake","messagesById","RightSearch","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","renderSearchResult","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","StickerSetResult","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","StatisticsOverview","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","renderOverviewItemValue","change","isChangeNegative","StatisticsRecentMessage","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","Statistics","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","StatisticsPublicForward","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","total","PollResults","getMessagePoll","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","prev","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","ManageUser","deleteContact","deleteHistory","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleUploadPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","personalPhoto","notPersonalPhoto","hideName","withFullInfo","noPersonalPhoto","UserIdFirstBot","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","invites","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","ManageGroup","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","checkbox","chatReactionsDescription","enabledLength","allowed","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","noReplaceNewlines","joinRequests","FLOATING_BUTTON_ANIMATION_TIMEOUT_MS","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","ManageGroupPermissions","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","rightIcon","onClickLabel","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","RemoveGroupUserModal","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","ManageChatRemovedUsers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","ManageChannel","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","UsernameInput","asLink","checkUsername","checkPublicLink","setUsername","langPrefix","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","selectManagement","maxPublicLinks","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","ManageGroupUserPermissions","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","ManageChatAdministrators","handleRecentActionsClick","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","ManageGroupRecentActions","defaultRights","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","ManageGroupMembers","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","ManageGroupUserPermissionsCreate","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","renderRequesters","requester","JoinRequest","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","Management","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","DEFAULT_DURATION","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","ShippingInfo","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","Shipping","shippingOptions","handleShippingSelect","Checkout","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","Skeleton","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","ExpiryInput","endsWith","formatCardExpiry","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","PaymentInfo","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","ConfirmPayment","noRedirect","SavedPaymentCredentials","onNewCardClick","passwordHint","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","ReceiptModal","fullAddress","croppedBlobUrl","setCroppedBlobUrl","URL","revokeObjectURL","createObjectURL","labelClassName"],"sourceRoot":""}