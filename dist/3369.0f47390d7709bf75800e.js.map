{"version":3,"file":"3369.0f47390d7709bf75800e.js","mappings":"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","sources":["webpack://wai/./node_modules/async-mutex/lib/Mutex.js","webpack://wai/./node_modules/async-mutex/lib/Semaphore.js","webpack://wai/./node_modules/async-mutex/lib/errors.js","webpack://wai/./node_modules/async-mutex/lib/index.js","webpack://wai/./node_modules/async-mutex/lib/tryAcquire.js","webpack://wai/./node_modules/async-mutex/lib/withTimeout.js","webpack://wai/./src/api/gramjs/apiBuilders/helpers.ts","webpack://wai/./src/api/gramjs/apiBuilders/messages.ts","webpack://wai/./src/api/gramjs/localDb.ts","webpack://wai/./src/api/gramjs/methods/media.ts","webpack://wai/./src/api/gramjs/methods/client.ts","webpack://wai/./src/api/gramjs/updater.ts","webpack://wai/./src/global/actions/api/chats.ts","webpack://wai/./src/global/actions/ui/calls.ts","webpack://wai/./src/global/reducers/calls.ts","webpack://wai/./src/global/types.ts","webpack://wai/./src/lib/gramjs/client/uploadFile.ts","webpack://wai/./src/lib/gramjs/errors/index.js","webpack://wai/./src/lib/gramjs/tl/api.js","webpack://wai/./src/lib/ptp/functions/requests.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/AuthNativeReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPCommon/PbMsg.ts","webpack://wai/./src/lib/ptp/protobuf/PTPCommon/PbQrCode.ts","webpack://wai/./src/lib/ptp/protobuf/PTPCommon/PbUser.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/DownloadMsgReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/DownloadMsgRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/GenMsgIdReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/GenMsgIdRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/SendBotMsgReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/SendBotMsgRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/SendRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/UpdateCmdReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/UpdateCmdRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/UploadMsgReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPOther/StopChatStreamReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPUser/DownloadUserReq.ts","webpack://wai/./src/worker/msg/MsgCommand.ts","webpack://wai/./src/worker/msg/MsgCommandChatGpt.ts","webpack://wai/./src/worker/msg/MsgCommandChatLab.ts","webpack://wai/./src/lib/ptp/protobuf/PTPSync/SyncReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPSync/SyncRes.ts","webpack://wai/./src/worker/msg/MsgCommandSetting.ts","webpack://wai/./src/worker/msg/MsgDispatcher.ts","webpack://wai/./src/worker/msg/MsgWorker.ts","webpack://wai/./src/worker/msg/bot/BotWebSocket.ts","webpack://wai/./src/worker/msg/utils.ts","webpack://wai/./src/worker/share/utils/modal.ts","webpack://wai/./src/worker/share/utils/utils.ts","webpack://wai/./node_modules/os-browserify/browser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Semaphore_1 = require(\"./Semaphore\");\nvar Mutex = /** @class */ (function () {\n    function Mutex(cancelError) {\n        this._semaphore = new Semaphore_1.default(1, cancelError);\n    }\n    Mutex.prototype.acquire = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, releaser;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this._semaphore.acquire()];\n                    case 1:\n                        _a = _b.sent(), releaser = _a[1];\n                        return [2 /*return*/, releaser];\n                }\n            });\n        });\n    };\n    Mutex.prototype.runExclusive = function (callback) {\n        return this._semaphore.runExclusive(function () { return callback(); });\n    };\n    Mutex.prototype.isLocked = function () {\n        return this._semaphore.isLocked();\n    };\n    Mutex.prototype.waitForUnlock = function () {\n        return this._semaphore.waitForUnlock();\n    };\n    Mutex.prototype.release = function () {\n        if (this._semaphore.isLocked())\n            this._semaphore.release();\n    };\n    Mutex.prototype.cancel = function () {\n        return this._semaphore.cancel();\n    };\n    return Mutex;\n}());\nexports.default = Mutex;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar errors_1 = require(\"./errors\");\nvar Semaphore = /** @class */ (function () {\n    function Semaphore(_value, _cancelError) {\n        if (_cancelError === void 0) { _cancelError = errors_1.E_CANCELED; }\n        this._value = _value;\n        this._cancelError = _cancelError;\n        this._weightedQueues = [];\n        this._weightedWaiters = [];\n    }\n    Semaphore.prototype.acquire = function (weight) {\n        var _this = this;\n        if (weight === void 0) { weight = 1; }\n        if (weight <= 0)\n            throw new Error(\"invalid weight \".concat(weight, \": must be positive\"));\n        return new Promise(function (resolve, reject) {\n            if (!_this._weightedQueues[weight - 1])\n                _this._weightedQueues[weight - 1] = [];\n            _this._weightedQueues[weight - 1].push({ resolve: resolve, reject: reject });\n            _this._dispatch();\n        });\n    };\n    Semaphore.prototype.runExclusive = function (callback, weight) {\n        if (weight === void 0) { weight = 1; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, value, release;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.acquire(weight)];\n                    case 1:\n                        _a = _b.sent(), value = _a[0], release = _a[1];\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, , 4, 5]);\n                        return [4 /*yield*/, callback(value)];\n                    case 3: return [2 /*return*/, _b.sent()];\n                    case 4:\n                        release();\n                        return [7 /*endfinally*/];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Semaphore.prototype.waitForUnlock = function (weight) {\n        var _this = this;\n        if (weight === void 0) { weight = 1; }\n        if (weight <= 0)\n            throw new Error(\"invalid weight \".concat(weight, \": must be positive\"));\n        return new Promise(function (resolve) {\n            if (!_this._weightedWaiters[weight - 1])\n                _this._weightedWaiters[weight - 1] = [];\n            _this._weightedWaiters[weight - 1].push(resolve);\n            _this._dispatch();\n        });\n    };\n    Semaphore.prototype.isLocked = function () {\n        return this._value <= 0;\n    };\n    Semaphore.prototype.getValue = function () {\n        return this._value;\n    };\n    Semaphore.prototype.setValue = function (value) {\n        this._value = value;\n        this._dispatch();\n    };\n    Semaphore.prototype.release = function (weight) {\n        if (weight === void 0) { weight = 1; }\n        if (weight <= 0)\n            throw new Error(\"invalid weight \".concat(weight, \": must be positive\"));\n        this._value += weight;\n        this._dispatch();\n    };\n    Semaphore.prototype.cancel = function () {\n        var _this = this;\n        this._weightedQueues.forEach(function (queue) { return queue.forEach(function (entry) { return entry.reject(_this._cancelError); }); });\n        this._weightedQueues = [];\n    };\n    Semaphore.prototype._dispatch = function () {\n        var _a;\n        for (var weight = this._value; weight > 0; weight--) {\n            var queueEntry = (_a = this._weightedQueues[weight - 1]) === null || _a === void 0 ? void 0 : _a.shift();\n            if (!queueEntry)\n                continue;\n            var previousValue = this._value;\n            var previousWeight = weight;\n            this._value -= weight;\n            weight = this._value + 1;\n            queueEntry.resolve([previousValue, this._newReleaser(previousWeight)]);\n        }\n        this._drainUnlockWaiters();\n    };\n    Semaphore.prototype._newReleaser = function (weight) {\n        var _this = this;\n        var called = false;\n        return function () {\n            if (called)\n                return;\n            called = true;\n            _this.release(weight);\n        };\n    };\n    Semaphore.prototype._drainUnlockWaiters = function () {\n        for (var weight = this._value; weight > 0; weight--) {\n            if (!this._weightedWaiters[weight - 1])\n                continue;\n            this._weightedWaiters[weight - 1].forEach(function (waiter) { return waiter(); });\n            this._weightedWaiters[weight - 1] = [];\n        }\n    };\n    return Semaphore;\n}());\nexports.default = Semaphore;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.E_CANCELED = exports.E_ALREADY_LOCKED = exports.E_TIMEOUT = void 0;\nexports.E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nexports.E_ALREADY_LOCKED = new Error('mutex already locked');\nexports.E_CANCELED = new Error('request for lock canceled');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tryAcquire = exports.withTimeout = exports.Semaphore = exports.Mutex = void 0;\nvar tslib_1 = require(\"tslib\");\nvar Mutex_1 = require(\"./Mutex\");\nObject.defineProperty(exports, \"Mutex\", { enumerable: true, get: function () { return Mutex_1.default; } });\nvar Semaphore_1 = require(\"./Semaphore\");\nObject.defineProperty(exports, \"Semaphore\", { enumerable: true, get: function () { return Semaphore_1.default; } });\nvar withTimeout_1 = require(\"./withTimeout\");\nObject.defineProperty(exports, \"withTimeout\", { enumerable: true, get: function () { return withTimeout_1.withTimeout; } });\nvar tryAcquire_1 = require(\"./tryAcquire\");\nObject.defineProperty(exports, \"tryAcquire\", { enumerable: true, get: function () { return tryAcquire_1.tryAcquire; } });\ntslib_1.__exportStar(require(\"./errors\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tryAcquire = void 0;\nvar errors_1 = require(\"./errors\");\nvar withTimeout_1 = require(\"./withTimeout\");\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError) {\n    if (alreadyAcquiredError === void 0) { alreadyAcquiredError = errors_1.E_ALREADY_LOCKED; }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (0, withTimeout_1.withTimeout)(sync, 0, alreadyAcquiredError);\n}\nexports.tryAcquire = tryAcquire;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.withTimeout = void 0;\nvar tslib_1 = require(\"tslib\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar errors_1 = require(\"./errors\");\nfunction withTimeout(sync, timeout, timeoutError) {\n    var _this = this;\n    if (timeoutError === void 0) { timeoutError = errors_1.E_TIMEOUT; }\n    return {\n        acquire: function (weight) {\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(\"invalid weight \".concat(weight, \": must be positive\"));\n            }\n            return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var isTimeout, handle, ticket, release, e_1;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            isTimeout = false;\n                            handle = setTimeout(function () {\n                                isTimeout = true;\n                                reject(timeoutError);\n                            }, timeout);\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, sync.acquire(weight)];\n                        case 2:\n                            ticket = _a.sent();\n                            if (isTimeout) {\n                                release = Array.isArray(ticket) ? ticket[1] : ticket;\n                                release();\n                            }\n                            else {\n                                clearTimeout(handle);\n                                resolve(ticket);\n                            }\n                            return [3 /*break*/, 4];\n                        case 3:\n                            e_1 = _a.sent();\n                            if (!isTimeout) {\n                                clearTimeout(handle);\n                                reject(e_1);\n                            }\n                            return [3 /*break*/, 4];\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            }); });\n        },\n        runExclusive: function (callback, weight) {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var release, ticket;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            release = function () { return undefined; };\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, , 7, 8]);\n                            return [4 /*yield*/, this.acquire(weight)];\n                        case 2:\n                            ticket = _a.sent();\n                            if (!Array.isArray(ticket)) return [3 /*break*/, 4];\n                            release = ticket[1];\n                            return [4 /*yield*/, callback(ticket[0])];\n                        case 3: return [2 /*return*/, _a.sent()];\n                        case 4:\n                            release = ticket;\n                            return [4 /*yield*/, callback()];\n                        case 5: return [2 /*return*/, _a.sent()];\n                        case 6: return [3 /*break*/, 8];\n                        case 7:\n                            release();\n                            return [7 /*endfinally*/];\n                        case 8: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n        release: function (weight) {\n            sync.release(weight);\n        },\n        cancel: function () {\n            return sync.cancel();\n        },\n        waitForUnlock: function (weight) {\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(\"invalid weight \".concat(weight, \": must be positive\"));\n            }\n            return new Promise(function (resolve, reject) {\n                sync.waitForUnlock(weight).then(resolve);\n                setTimeout(function () { return reject(timeoutError); }, timeout);\n            });\n        },\n        isLocked: function () { return sync.isLocked(); },\n        getValue: function () { return sync.getValue(); },\n        setValue: function (value) { return sync.setValue(value); },\n    };\n}\nexports.withTimeout = withTimeout;\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiMessage,\n  ApiMessageForwardInfo,\n  ApiPhoto,\n  ApiSticker,\n  ApiVideo,\n  ApiVoice,\n  ApiAudio,\n  ApiDocument,\n  ApiAction,\n  ApiContact,\n  ApiAttachment,\n  ApiPoll,\n  ApiNewPoll,\n  ApiWebPage,\n  ApiMessageEntity,\n  ApiFormattedText,\n  ApiReplyKeyboard,\n  ApiKeyboardButton,\n  ApiChat,\n  ApiThreadInfo,\n  ApiInvoice,\n  ApiGroupCall,\n  ApiReactions,\n  ApiReactionCount,\n  ApiUserReaction,\n  ApiAvailableReaction,\n  ApiSponsoredMessage,\n  ApiUser,\n  ApiLocation,\n  ApiGame,\n  PhoneCallAction,\n  ApiWebDocument,\n  ApiMessageEntityDefault,\n  ApiMessageExtendedMediaPreview,\n  ApiReaction,\n  ApiReactionEmoji,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  LOCAL_MESSAGE_MIN_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  VIDEO_MOV_TYPE,\n  VIDEO_WEBM_TYPE,\n} from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { buildStickerFromDocument } from './symbols';\nimport { buildApiPhoto, buildApiPhotoSize, buildApiThumbnailFromStripped } from './common';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport { addPhotoToLocalDb, resolveMessageApiChatId, serializeBytes } from '../helpers';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer, isPeerUser } from './peers';\nimport { buildApiCallDiscardReason } from './calls';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nconst TIMESTAMP_BASE = 1676e9; // 2023-02-10\nconst TIMESTAMP_PRECISION = 1e2; // 0.1s\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\n\nlet localMessageCounter = LOCAL_MESSAGE_MIN_ID;\n\n// Local IDs need to be fractional to allow service notifications to be placed between real messages.\n// It also allows to avoid collisions when sending messages from multiple tabs due to timestamp-based whole part.\n// To support up to 1M local messages, the whole part must be below 8.5B (https://stackoverflow.com/a/57225494/903919).\n// The overflow will happen when `datePart` is >3.59B which will be in June 2034.\nexport function getNextLocalMessageId() {\n  const datePart = Math.round((Date.now() - TIMESTAMP_BASE) / TIMESTAMP_PRECISION);\n  return LOCAL_MESSAGE_MIN_ID + datePart + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    fromId, message, entities, startParam, channelPost, chatInvite, chatInviteHash, randomId, recommended,\n  } = mtpMessage;\n  const chatId = fromId ? getApiChatIdFromMtpPeer(fromId) : undefined;\n  const chatInviteTitle = chatInvite\n    ? (chatInvite instanceof GramJs.ChatInvite\n      ? chatInvite.title\n      : !(chatInvite.chat instanceof GramJs.ChatEmpty) ? chatInvite.chat.title : undefined)\n    : undefined;\n\n  return {\n    randomId: serializeBytes(randomId),\n    isBot: fromId ? isPeerUser(fromId) : false,\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: Boolean(recommended),\n    ...(chatId && { chatId }),\n    ...(chatInviteHash && { chatInviteHash }),\n    ...(chatInvite && { chatInviteTitle }),\n    ...(startParam && { startParam }),\n    ...(channelPost && { channelPostId: channelPost }),\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\ntype UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards' | 'silent'\n  )>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const {\n    replyToMsgId, replyToTopId, forumTopic, replyToPeerId,\n  } = mtpMessage.replyTo || {};\n  const isEdited = mtpMessage.editDate && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { replies, mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  return {\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    views: mtpMessage.views,\n    forwards: mtpMessage.forwards,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    ...(replyToMsgId && { replyToMessageId: replyToMsgId }),\n    ...(forumTopic && { isTopicReply: true }),\n    ...(replyToPeerId && { replyToChatId: getApiChatIdFromMtpPeer(replyToPeerId) }),\n    ...(replyToTopId && { replyToTopMessageId: replyToTopId }),\n    ...(forwardInfo && { forwardInfo }),\n    ...(isEdited && { isEdited }),\n    ...(mtpMessage.editDate && { editDate: mtpMessage.editDate }),\n    ...(isMediaUnread && { isMediaUnread }),\n    ...(mtpMessage.mentioned && isMediaUnread && { hasUnreadMention: true }),\n    ...(mtpMessage.mentioned && { isMentioned: true }),\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    ...(replies && { repliesThreadInfo: buildThreadInfo(replies, mtpMessage.id, chatId) }),\n    ...(postAuthor && { postAuthorTitle: postAuthor }),\n    isProtected,\n    isForwardingAllowed,\n  };\n}\n\nexport function buildMessageReactions(reactions: GramJs.MessageReactions): ApiReactions {\n  const {\n    recentReactions, results, canSeeList,\n  } = reactions;\n\n  return {\n    canSeeList,\n    results: results.map(buildReactionCount).filter(Boolean).sort(reactionCountComparator),\n    recentReactions: recentReactions?.map(buildMessagePeerReaction).filter(Boolean),\n  };\n}\n\nfunction reactionCountComparator(a: ApiReactionCount, b: ApiReactionCount) {\n  const diff = b.count - a.count;\n  if (diff) return diff;\n  if (a.chosenOrder !== undefined && b.chosenOrder !== undefined) {\n    return a.chosenOrder - b.chosenOrder;\n  }\n  if (a.chosenOrder !== undefined) return 1;\n  if (b.chosenOrder !== undefined) return -1;\n  return 0;\n}\n\nfunction buildReactionCount(reactionCount: GramJs.ReactionCount): ApiReactionCount | undefined {\n  const { chosenOrder, count, reaction } = reactionCount;\n\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    chosenOrder,\n    count,\n    reaction: apiReaction,\n  };\n}\n\nexport function buildMessagePeerReaction(userReaction: GramJs.MessagePeerReaction): ApiUserReaction | undefined {\n  const {\n    peerId, reaction, big, unread,\n  } = userReaction;\n\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    userId: getApiChatIdFromMtpPeer(peerId),\n    reaction: apiReaction,\n    isUnread: unread,\n    isBig: big,\n  };\n}\n\nexport function buildApiReaction(reaction: GramJs.TypeReaction): ApiReaction | undefined {\n  if (reaction instanceof GramJs.ReactionEmoji) {\n    return {\n      emoticon: reaction.emoticon,\n    };\n  }\n\n  if (reaction instanceof GramJs.ReactionCustomEmoji) {\n    return {\n      documentId: reaction.documentId.toString(),\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiAvailableReaction(availableReaction: GramJs.AvailableReaction): ApiAvailableReaction {\n  const {\n    selectAnimation, staticIcon, reaction, title,\n    inactive, aroundAnimation, centerIcon, effectAnimation, activateAnimation,\n    premium,\n  } = availableReaction;\n\n  return {\n    selectAnimation: buildApiDocument(selectAnimation),\n    activateAnimation: buildApiDocument(activateAnimation),\n    effectAnimation: buildApiDocument(effectAnimation),\n    staticIcon: buildApiDocument(staticIcon),\n    aroundAnimation: aroundAnimation ? buildApiDocument(aroundAnimation) : undefined,\n    centerIcon: centerIcon ? buildApiDocument(centerIcon) : undefined,\n    reaction: { emoticon: reaction } as ApiReactionEmoji,\n    title,\n    isInactive: inactive,\n    isPremium: premium,\n  };\n}\n\nexport function buildMessageContent(\n  mtpMessage: UniversalMessage | GramJs.UpdateServiceNotification,\n) {\n  let content: ApiMessage['content'] = {};\n\n  if (mtpMessage.media) {\n    content = {\n      ...buildMessageMediaContent(mtpMessage.media),\n    };\n  }\n\n  const hasUnsupportedMedia = mtpMessage.media instanceof GramJs.MessageMediaUnsupported;\n\n  if (mtpMessage.message && !hasUnsupportedMedia\n    && !content.sticker && !content.poll && !content.contact && !(content.video?.isRound)) {\n    content = {\n      ...content,\n      text: buildMessageTextContent(mtpMessage.message, mtpMessage.entities),\n    };\n  }\n\n  return content;\n}\n\nexport function buildMessageTextContent(\n  message: string,\n  entities?: GramJs.TypeMessageEntity[],\n): ApiFormattedText {\n  return {\n    text: message,\n    ...(entities && { entities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage) {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyToMsgId, date,\n  } = draft;\n\n  return {\n    formattedText: message ? buildMessageTextContent(message, entities) : undefined,\n    replyingToId: replyToMsgId,\n    date,\n  };\n}\n\nexport function buildMessageMediaContent(media: GramJs.TypeMessageMedia): ApiMessage['content'] | undefined {\n  if ('ttlSeconds' in media && media.ttlSeconds) {\n    return undefined;\n  }\n\n  if ('extendedMedia' in media && media.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n    return buildMessageMediaContent(media.extendedMedia.media);\n  }\n\n  const sticker = buildSticker(media);\n  if (sticker) return { sticker };\n\n  const photo = buildPhoto(media);\n  if (photo) return { photo };\n\n  const video = buildVideo(media);\n  if (video) return { video };\n\n  const audio = buildAudio(media);\n  if (audio) return { audio };\n\n  const voice = buildVoice(media);\n  if (voice) return { voice };\n\n  const document = buildDocumentFromMedia(media);\n  if (document) return { document };\n\n  const contact = buildContact(media);\n  if (contact) return { contact };\n\n  const poll = buildPollFromMedia(media);\n  if (poll) return { poll };\n\n  const webPage = buildWebPage(media);\n  if (webPage) return { webPage };\n\n  const invoice = buildInvoiceFromMedia(media);\n  if (invoice) return { invoice };\n\n  const location = buildLocationFromMedia(media);\n  if (location) return { location };\n\n  const game = buildGameFromMedia(media);\n  if (game) return { game };\n\n  return undefined;\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    fromChatId: savedFromPeerId || fromId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    senderUserId: fromId,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildSticker(media: GramJs.TypeMessageMedia): ApiSticker | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  return buildStickerFromDocument(media.document, media.nopremium);\n}\n\nfunction buildPhoto(media: GramJs.TypeMessageMedia): ApiPhoto | undefined {\n  if (!(media instanceof GramJs.MessageMediaPhoto) || !media.photo || !(media.photo instanceof GramJs.Photo)) {\n    return undefined;\n  }\n\n  return buildApiPhoto(media.photo, media.spoiler);\n}\n\nexport function buildVideoFromDocument(document: GramJs.Document, isSpoiler?: boolean): ApiVideo | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const {\n    id, mimeType, thumbs, size, attributes,\n  } = document;\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_WEBM_TYPE && !(self as any).isWebmSupported) {\n    return undefined;\n  }\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_MOV_TYPE && !(self as any).isMovSupported) {\n    return undefined;\n  }\n\n  const videoAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n  if (!videoAttr) {\n    return undefined;\n  }\n\n  const gifAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeAnimated => a instanceof GramJs.DocumentAttributeAnimated);\n\n  const {\n    duration,\n    w: width,\n    h: height,\n    supportsStreaming = false,\n    roundMessage: isRound = false,\n  } = videoAttr;\n\n  return {\n    id: String(id),\n    mimeType,\n    duration,\n    fileName: getFilenameFromDocument(document, 'video'),\n    width,\n    height,\n    supportsStreaming,\n    isRound,\n    isGif: Boolean(gifAttr),\n    thumbnail: buildApiThumbnailFromStripped(thumbs),\n    size: size.toJSNumber(),\n    isSpoiler,\n  };\n}\n\nfunction buildVideo(media: GramJs.TypeMessageMedia): ApiVideo | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !(media.document instanceof GramJs.Document)\n    || !media.document.mimeType.startsWith('video')\n  ) {\n    return undefined;\n  }\n\n  return buildVideoFromDocument(media.document, media.spoiler);\n}\n\nfunction buildAudio(media: GramJs.TypeMessageMedia): ApiAudio | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || audioAttribute.voice) {\n    return undefined;\n  }\n\n  const thumbnailSizes = media.document.thumbs && media.document.thumbs\n    .filter((thumb): thumb is GramJs.PhotoSize => thumb instanceof GramJs.PhotoSize)\n    .map((thumb) => buildApiPhotoSize(thumb));\n\n  return {\n    id: String(media.document.id),\n    fileName: getFilenameFromDocument(media.document, 'audio'),\n    thumbnailSizes,\n    size: media.document.size.toJSNumber(),\n    ...pick(media.document, ['mimeType']),\n    ...pick(audioAttribute, ['duration', 'performer', 'title']),\n  };\n}\n\nfunction buildVoice(media: GramJs.TypeMessageMedia): ApiVoice | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || !audioAttribute.voice) {\n    return undefined;\n  }\n\n  const { duration, waveform } = audioAttribute;\n\n  return {\n    id: String(media.document.id),\n    duration,\n    waveform: waveform ? Array.from(waveform) : undefined,\n  };\n}\n\nfunction buildDocumentFromMedia(media: GramJs.TypeMessageMedia) {\n  if (!(media instanceof GramJs.MessageMediaDocument) || !media.document) {\n    return undefined;\n  }\n\n  return buildApiDocument(media.document);\n}\n\nexport function buildApiDocument(document: GramJs.TypeDocument): ApiDocument | undefined {\n  if (!(document instanceof GramJs.Document)) {\n    return undefined;\n  }\n\n  const {\n    id, size, mimeType, date, thumbs, attributes,\n  } = document;\n\n  const thumbnail = thumbs && buildApiThumbnailFromStripped(thumbs);\n\n  let mediaType: ApiDocument['mediaType'] | undefined;\n  let mediaSize: ApiDocument['mediaSize'] | undefined;\n  const photoSize = thumbs && thumbs.find((s: any): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  if (photoSize) {\n    mediaSize = {\n      width: photoSize.w,\n      height: photoSize.h,\n    };\n\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'photo';\n\n      const imageAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeImageSize => a instanceof GramJs.DocumentAttributeImageSize);\n\n      if (imageAttribute) {\n        const { w: width, h: height } = imageAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'video';\n      const videoAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n      if (videoAttribute) {\n        const { w: width, h: height } = videoAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    }\n  }\n\n  return {\n    id: String(id),\n    size: size.toJSNumber(),\n    mimeType,\n    timestamp: date,\n    fileName: getFilenameFromDocument(document),\n    thumbnail,\n    mediaType,\n    mediaSize,\n  };\n}\n\nfunction buildContact(media: GramJs.TypeMessageMedia): ApiContact | undefined {\n  if (!(media instanceof GramJs.MessageMediaContact)) {\n    return undefined;\n  }\n\n  const {\n    firstName, lastName, phoneNumber, userId,\n  } = media;\n\n  return {\n    firstName, lastName, phoneNumber, userId: buildApiPeerId(userId, 'user'),\n  };\n}\n\nfunction buildPollFromMedia(media: GramJs.TypeMessageMedia): ApiPoll | undefined {\n  if (!(media instanceof GramJs.MessageMediaPoll)) {\n    return undefined;\n  }\n\n  return buildPoll(media.poll, media.results);\n}\n\nfunction buildInvoiceFromMedia(media: GramJs.TypeMessageMedia): ApiInvoice | undefined {\n  if (!(media instanceof GramJs.MessageMediaInvoice)) {\n    return undefined;\n  }\n\n  return buildInvoice(media);\n}\n\nfunction buildLocationFromMedia(media: GramJs.TypeMessageMedia): ApiLocation | undefined {\n  if (media instanceof GramJs.MessageMediaGeo) {\n    return buildGeo(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaVenue) {\n    return buildVenue(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaGeoLive) {\n    return buildGeoLive(media);\n  }\n\n  return undefined;\n}\n\nfunction buildGeo(media: GramJs.MessageMediaGeo): ApiLocation | undefined {\n  const point = buildGeoPoint(media.geo);\n  return point && { type: 'geo', geo: point };\n}\n\nfunction buildVenue(media: GramJs.MessageMediaVenue): ApiLocation | undefined {\n  const {\n    geo, title, provider, address, venueId, venueType,\n  } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'venue',\n    geo: point,\n    title,\n    provider,\n    address,\n    venueId,\n    venueType,\n  };\n}\n\nfunction buildGeoLive(media: GramJs.MessageMediaGeoLive): ApiLocation | undefined {\n  const { geo, period, heading } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'geoLive',\n    geo: point,\n    period,\n    heading,\n  };\n}\n\nfunction buildGeoPoint(geo: GramJs.TypeGeoPoint): ApiLocation['geo'] | undefined {\n  if (geo instanceof GramJs.GeoPointEmpty) return undefined;\n  const {\n    long, lat, accuracyRadius, accessHash,\n  } = geo;\n  return {\n    long,\n    lat,\n    accessHash: accessHash.toString(),\n    accuracyRadius,\n  };\n}\n\nfunction buildGameFromMedia(media: GramJs.TypeMessageMedia): ApiGame | undefined {\n  if (!(media instanceof GramJs.MessageMediaGame)) {\n    return undefined;\n  }\n\n  return buildGame(media);\n}\n\nfunction buildGame(media: GramJs.MessageMediaGame): ApiGame | undefined {\n  const {\n    id, accessHash, shortName, title, description, photo: apiPhoto, document: apiDocument,\n  } = media.game;\n\n  const photo = apiPhoto instanceof GramJs.Photo ? buildApiPhoto(apiPhoto) : undefined;\n  const document = apiDocument instanceof GramJs.Document ? buildApiDocument(apiDocument) : undefined;\n\n  return {\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    shortName,\n    title,\n    description,\n    photo,\n    document,\n  };\n}\n\nexport function buildPoll(poll: GramJs.Poll, pollResults: GramJs.PollResults): ApiPoll {\n  const { id, answers: rawAnswers } = poll;\n  const answers = rawAnswers.map((answer) => ({\n    text: answer.text,\n    option: serializeBytes(answer.option),\n  }));\n\n  return {\n    id: String(id),\n    summary: {\n      isPublic: poll.publicVoters,\n      ...pick(poll, [\n        'closed',\n        'multipleChoice',\n        'quiz',\n        'question',\n        'closePeriod',\n        'closeDate',\n      ]),\n      answers,\n    },\n    results: buildPollResults(pollResults),\n  };\n}\n\nexport function buildInvoice(media: GramJs.MessageMediaInvoice): ApiInvoice {\n  const {\n    description: text, title, photo, test, totalAmount, currency, receiptMsgId, extendedMedia,\n  } = media;\n\n  const preview = extendedMedia instanceof GramJs.MessageExtendedMediaPreview\n    ? buildApiMessageExtendedMediaPreview(extendedMedia) : undefined;\n\n  return {\n    title,\n    text,\n    photo: buildApiWebDocument(photo),\n    receiptMsgId,\n    amount: Number(totalAmount),\n    currency,\n    isTest: test,\n    extendedMedia: preview,\n  };\n}\n\nexport function buildPollResults(pollResults: GramJs.PollResults): ApiPoll['results'] {\n  const {\n    results: rawResults, totalVoters, recentVoters, solution, solutionEntities: entities, min,\n  } = pollResults;\n  const results = rawResults && rawResults.map(({\n    option, chosen, correct, voters,\n  }) => ({\n    isChosen: chosen,\n    isCorrect: correct,\n    option: serializeBytes(option),\n    votersCount: voters,\n  }));\n\n  return {\n    isMin: min,\n    totalVoters,\n    recentVoterIds: recentVoters?.map((id) => buildApiPeerId(id, 'user')),\n    results,\n    solution,\n    ...(entities && { solutionEntities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildWebPage(media: GramJs.TypeMessageMedia): ApiWebPage | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaWebPage)\n    || !(media.webpage instanceof GramJs.WebPage)\n  ) {\n    return undefined;\n  }\n\n  const { id, photo, document } = media.webpage;\n\n  let video;\n  if (document instanceof GramJs.Document && document.mimeType.startsWith('video/')) {\n    video = buildVideoFromDocument(document);\n  }\n\n  return {\n    id: Number(id),\n    ...pick(media.webpage, [\n      'url',\n      'displayUrl',\n      'type',\n      'siteName',\n      'title',\n      'description',\n      'duration',\n    ]),\n    photo: photo instanceof GramJs.Photo ? buildApiPhoto(photo) : undefined,\n    document: !video && document ? buildApiDocument(document) : undefined,\n    video,\n  };\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let text: string;\n  const translationValues = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    text = 'Chat.Service.BotPermissionAllowed';\n    translationValues.push(action.domain);\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionAttachMenuBotAllowed) {\n    text = 'ActionAttachMenuBotAllowed';\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  // TODO Move to the proper button inside preview\n  if (!replyMarkup) {\n    if (media instanceof GramJs.MessageMediaWebPage && media.webpage instanceof GramJs.WebPage) {\n      if (media.webpage.type === 'telegram_message') {\n        return {\n          inlineButtons: [[{\n            type: 'url',\n            text: 'Show Message',\n            url: media.webpage.url,\n          }]],\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  // TODO\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction getFilenameFromDocument(document: GramJs.Document, defaultBase = 'file') {\n  const { mimeType, attributes } = document;\n  const filenameAttribute = attributes\n    .find((a: any): a is GramJs.DocumentAttributeFilename => a instanceof GramJs.DocumentAttributeFilename);\n\n  if (filenameAttribute) {\n    return filenameAttribute.fileName;\n  }\n\n  const extension = mimeType.split('/')[1];\n\n  return `${defaultBase}${String(document.id)}.${extension}`;\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyingTo?: number,\n  replyingToTopId?: number,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiChat | ApiUser,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n  const isForum = chat.isForum;\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    ...(replyingTo && { replyToMessageId: replyingTo }),\n    ...(replyingToTopId && { replyToTopMessageId: replyingToTopId }),\n    ...((replyingTo || replyingToTopId) && isForum && { isTopicReply: true }),\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n}): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyToTopMessageId: toThreadId,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        senderUserId: senderId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildUploadingMedia(\n  attachment: ApiAttachment,\n): ApiMessage['content'] {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: blobUrl },\n            blobUrl,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n        },\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiMessageExtendedMediaPreview(\n  preview: GramJs.MessageExtendedMediaPreview,\n): ApiMessageExtendedMediaPreview {\n  const {\n    w, h, thumb, videoDuration,\n  } = preview;\n\n  return {\n    width: w,\n    height: h,\n    duration: videoDuration,\n    thumbnail: thumb ? buildApiThumbnailFromStripped([thumb]) : undefined,\n  };\n}\n\nexport function buildApiWebDocument(document?: GramJs.TypeWebDocument): ApiWebDocument | undefined {\n  if (!document) return undefined;\n\n  const {\n    url, size, mimeType,\n  } = document;\n  const accessHash = document instanceof GramJs.WebDocument ? document.accessHash.toString() : undefined;\n  const sizeAttr = document.attributes.find((attr): attr is GramJs.DocumentAttributeImageSize => (\n    attr instanceof GramJs.DocumentAttributeImageSize\n  ));\n  const dimensions = sizeAttr && { width: sizeAttr.w, height: sizeAttr.h };\n\n  return {\n    url,\n    accessHash,\n    size,\n    mimeType,\n    dimensions,\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildApiMessageEntity(entity: GramJs.TypeMessageEntity): ApiMessageEntity {\n  const {\n    className: type, offset, length,\n  } = entity;\n\n  if (entity instanceof GramJs.MessageEntityMentionName) {\n    return {\n      type: ApiMessageEntityTypes.MentionName,\n      offset,\n      length,\n      userId: buildApiPeerId(entity.userId, 'user'),\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityTextUrl) {\n    return {\n      type: ApiMessageEntityTypes.TextUrl,\n      offset,\n      length,\n      url: entity.url,\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityPre) {\n    return {\n      type: ApiMessageEntityTypes.Pre,\n      offset,\n      length,\n      language: entity.language,\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityCustomEmoji) {\n    return {\n      type: ApiMessageEntityTypes.CustomEmoji,\n      offset,\n      length,\n      documentId: entity.documentId.toString(),\n    };\n  }\n\n  return {\n    type: type as `${ApiMessageEntityDefault['type']}`,\n    offset,\n    length,\n  };\n}\n\nfunction buildThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const isPostThread = apiChannelId && chatId !== apiChannelId;\n\n  return {\n    isComments: comments,\n    threadId: messageId,\n    ...(isPostThread ? {\n      chatId: apiChannelId,\n      originChannelId: chatId,\n    } : {\n      chatId,\n    }),\n    messagesCount: replies,\n    lastMessageId: maxId,\n    lastReadInboxMessageId: readMaxId,\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n}\n\nexport function buildApiFormattedText(textWithEntities: GramJs.TextWithEntities): ApiFormattedText {\n  const { text, entities } = textWithEntities;\n\n  return {\n    text,\n    entities: entities.map(buildApiMessageEntity),\n  };\n}\n","import BigInt from 'big-integer';\nimport type { Api as GramJs } from '../../lib/gramjs';\nimport type { ApiMessage } from '../types';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { constructors } from '../../lib/gramjs/tl';\nimport { throttle } from '../../util/schedulers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport interface LocalDb {\n  localMessages: Record<string, ApiMessage>;\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  cache: Record<string,any>;\n  botWaitReply: Record<string, undefined | {\n    command:string,\n    payload?:Record<string,any>\n  }>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments','cache','botWaitReply',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const valueVirtualClass = Object.keys(value).reduce((acc2, key2) => {\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, valueVirtualClass)\n        : valueVirtualClass;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import type {TelegramClient} from '../../../lib/gramjs';\nimport {Api as GramJs} from '../../../lib/gramjs';\nimport type {ApiOnProgress, ApiParsedMedia} from '../../types';\nimport {ApiMediaFormat,} from '../../types';\n\nimport {\n  CLOUD_MESSAGE_API,\n  DOWNLOAD_WORKERS,\n  MEDIA_CACHE_DISABLED,\n  MEDIA_CACHE_NAME,\n  MEDIA_CACHE_NAME_AVATARS,\n  MEDIA_CACHE_NAME_WAI,\n} from '../../../config';\nimport localDb from '../localDb';\nimport * as cacheApi from '../../../util/cacheApi';\nimport {Type} from '../../../util/cacheApi';\nimport {getEntityTypeById} from '../gramjsBuilders';\nimport {DownloadReq, DownloadRes} from \"../../../lib/ptp/protobuf/PTPFile\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport Account from \"../../../worker/share/Account\";\nimport {blobToBuffer} from \"../../../worker/share/utils/utils\";\n\nconst MEDIA_ENTITY_TYPES = new Set([\n  'msg', 'sticker', 'gif', 'wallpaper', 'photo', 'webDocument', 'document', 'videoAvatar',\n]);\n\n\nasync function fileToArrayBuffer(file: File): Promise<ArrayBuffer> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      resolve(reader.result as ArrayBuffer);\n    };\n\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n\n    reader.readAsArrayBuffer(file);\n  });\n}\n\nexport default async function downloadMedia(\n  {\n    url, mediaFormat, start, end, isHtmlAllowed,\n  }: {\n    url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean;\n  },\n  client: TelegramClient,\n  isConnected: boolean,\n  onProgress?: ApiOnProgress,\n) {\n  let data:Buffer,fullSize:number,mimeType:string;\n  let flag = false;\n  let id;\n  const t = url.split(\"?\")\n  const t1 = t[0].split(\":\");\n  if(url.indexOf(\"progressive\") > 0 || t1[0].indexOf(\"-\") > 1){\n    id = t1[t1.length - 1];\n  }else{\n    // \"profile623415?7116860199581299000\"\n    if(url.indexOf(\"profile\") === 0){\n      if(url.indexOf(\"?\") > -1){\n        id = url.split(\"?\")[1]\n      }else {\n        id = url.replace(\"profile\",\"\")\n      }\n    }else if(url.indexOf(\"avatar\") === 0){\n      id = url.split(\"?\")[1]\n    }else if(url.indexOf(\"photo\") === 0){\n      id = url.split(\"?\")[0].replace(\"photo\",\"\")\n    }else{\n      console.error(\"[error id] \",url)\n      return undefined\n    }\n  }\n\n  if(localDb.cache[id]){\n    const ab = await fileToArrayBuffer(localDb.cache[id]);\n    mimeType = localDb.cache[id].type;\n    //blob = new Blob([ab], { type: mimeType });\n    fullSize = localDb.cache[id].size\n    data = Buffer.from(ab)\n    flag = true;\n  }\n\n  if(!flag){\n    // const  res = await download(url, client, isConnected, onProgress, start, end, mediaFormat, isHtmlAllowed) || {};\n    // if(!res){\n    //   return undefined\n    // }\n    // data = res.data;\n    // mimeType = res.mimeType;\n    // fullSize = res.fullSize;\n    // if (!data) {\n    //   return undefined;\n    // }\n\n    let downloadReq = new DownloadReq({\n      id,\n    })\n    try {\n      console.log(\"[DOWNLOAD media]\",{url,id})\n      let blob = await cacheApi.fetch(MEDIA_CACHE_NAME_WAI, id, Type.Blob);\n      let downloadRes;\n      let arrayBuffer;\n      if(!blob){\n        let finalBuf = Buffer.alloc(0);\n        while (true){\n          const res = await fetch(`${CLOUD_MESSAGE_API}/proto`,{\n            method: 'POST',\n            body: Buffer.from(downloadReq.pack().getPbData())\n          })\n          arrayBuffer = await res.arrayBuffer();\n          downloadRes = DownloadRes.parseMsg(new Pdu(Buffer.from(arrayBuffer)));\n          if(!downloadRes || downloadRes.err !== ERR.NO_ERROR || !downloadRes.file){\n            return undefined\n          }\n          finalBuf = Buffer.concat([finalBuf,Buffer.from(downloadRes.file.buf)])\n          if(downloadRes.file.part_total && downloadRes.file.part < downloadRes.file.part_total){\n            downloadReq = new DownloadReq({\n              id,\n              part:downloadRes.file.part+1\n            })\n          }else{\n            downloadRes.file!.buf = finalBuf\n            try {\n              const body = new DownloadRes(downloadRes).pack().getPbData()\n              await cacheApi.save(MEDIA_CACHE_NAME_WAI, id, new Blob([Buffer.from(body)]));\n              downloadRes.file.buf = Account.localDecrypt(finalBuf)\n            }catch (e){\n              console.error(e)\n              return undefined\n            }\n            break\n          }\n        }\n      }else{\n        // @ts-ignore\n        const buf = await blobToBuffer(blob)\n        downloadRes = DownloadRes.parseMsg(new Pdu(buf));\n        if(!downloadRes || downloadRes.err !== ERR.NO_ERROR){\n          return undefined\n        }\n        try {\n          downloadRes.file!.buf = Account.localDecrypt(Buffer.from(downloadRes.file!.buf))\n        }catch (e){}\n      }\n      data = Buffer.from(downloadRes.file!.buf);\n      mimeType= downloadRes.file!.type\n      fullSize = downloadRes.file!.size\n    }catch (e){\n      console.error('[DOWNLOAD FAILED]',e,{url,id})\n      return undefined\n    }\n  }\n  const parsed = await parseMedia(data, mediaFormat, mimeType);\n  if (!parsed) {\n    return undefined;\n  }\n  //\n  // const canCache = mediaFormat !== ApiMediaFormat.Progressive && (\n  //   mediaFormat !== ApiMediaFormat.BlobUrl || (parsed as Blob).size <= MEDIA_CACHE_MAX_BYTES\n  // );\n\n  const canCache = mediaFormat !== ApiMediaFormat.Progressive\n  if (!MEDIA_CACHE_DISABLED && cacheApi && canCache) {\n    const cacheName = url.startsWith('avatar') ? MEDIA_CACHE_NAME_AVATARS : MEDIA_CACHE_NAME;\n    void cacheApi.save(cacheName, url, parsed);\n  }\n\n  const dataBlob = mediaFormat === ApiMediaFormat.Progressive ? '' : parsed as string | Blob;\n  const arrayBuffer = mediaFormat === ApiMediaFormat.Progressive ? parsed as ArrayBuffer : undefined;\n\n  return {\n    dataBlob,\n    arrayBuffer,\n    mimeType,\n    fullSize,\n  };\n}\n\nexport type EntityType = (\n  'msg' | 'sticker' | 'wallpaper' | 'gif' | 'channel' | 'chat' | 'user' | 'photo' | 'stickerSet' | 'webDocument' |\n  'document' | 'staticMap' | 'videoAvatar'\n);\n\nasync function download(\n  url: string,\n  client: TelegramClient,\n  isConnected: boolean,\n  onProgress?: ApiOnProgress,\n  start?: number,\n  end?: number,\n  mediaFormat?: ApiMediaFormat,\n  isHtmlAllowed?: boolean,\n) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, sizeType, params, mediaMatchType,\n  } = parsed;\n\n  // if (!isConnected) {\n  //   return Promise.reject(new Error('ERROR: Client is not connected'));\n  // }\n\n  if (entityType === 'staticMap') {\n    const accessHash = entityId;\n    const parsedParams = new URLSearchParams(params);\n    const long = parsedParams.get('long');\n    const lat = parsedParams.get('lat');\n    const w = parsedParams.get('w');\n    const h = parsedParams.get('h');\n    const zoom = parsedParams.get('zoom');\n    const scale = parsedParams.get('scale');\n    const accuracyRadius = parsedParams.get('accuracy_radius');\n\n    const data = await client.downloadStaticMap(accessHash, long, lat, w, h, zoom, scale, accuracyRadius);\n    return {\n      mimeType: 'image/png',\n      data,\n    };\n  }\n\n  let entity: (\n    GramJs.User | GramJs.Chat | GramJs.Channel | GramJs.Photo |\n    GramJs.Message | GramJs.MessageService |\n    GramJs.Document | GramJs.StickerSet | GramJs.TypeWebDocument | undefined\n  );\n\n  switch (entityType) {\n    case 'channel':\n    case 'chat':\n      entity = localDb.chats[entityId];\n      break;\n    case 'user':\n      entity = localDb.users[entityId];\n      break;\n    case 'msg':\n      entity = localDb.messages[entityId];\n      break;\n    case 'sticker':\n    case 'gif':\n    case 'wallpaper':\n      entity = localDb.documents[entityId];\n      break;\n    case 'videoAvatar':\n    case 'photo':\n      entity = localDb.photos[entityId];\n      break;\n    case 'stickerSet':\n      entity = localDb.stickerSets[entityId];\n      break;\n    case 'webDocument':\n      entity = localDb.webDocuments[entityId];\n      break;\n    case 'document':\n      entity = localDb.documents[entityId];\n      break;\n  }\n\n  if (!entity) {\n    return undefined;\n  }\n\n  if (MEDIA_ENTITY_TYPES.has(entityType)) {\n    if (mediaFormat === ApiMediaFormat.Stream) {\n      onProgress!.acceptsBuffer = true;\n    }\n\n    const data = await client.downloadMedia(entity, {\n      sizeType, start, end, progressCallback: onProgress, workers: DOWNLOAD_WORKERS,\n    });\n    let mimeType;\n    let fullSize;\n\n    if (entity instanceof GramJs.MessageService && entity.action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n      mimeType = 'image/jpeg';\n    } else if (entity instanceof GramJs.Message) {\n      mimeType = getMessageMediaMimeType(entity, sizeType);\n      if (entity.media instanceof GramJs.MessageMediaDocument && entity.media.document instanceof GramJs.Document) {\n        fullSize = entity.media.document.size.toJSNumber();\n      }\n      if (entity.media instanceof GramJs.MessageMediaWebPage\n        && entity.media.webpage instanceof GramJs.WebPage\n        && entity.media.webpage.document instanceof GramJs.Document) {\n        fullSize = entity.media.webpage.document.size.toJSNumber();\n      }\n    } else if (entity instanceof GramJs.Photo) {\n      if (entityType === 'videoAvatar') {\n        mimeType = 'video/mp4';\n      } else {\n        mimeType = 'image/jpeg';\n      }\n    } else if (entityType === 'sticker' && sizeType) {\n      mimeType = 'image/webp';\n    } else if (entityType === 'webDocument') {\n      mimeType = (entity as GramJs.TypeWebDocument).mimeType;\n      fullSize = (entity as GramJs.TypeWebDocument).size;\n    } else {\n      mimeType = (entity as GramJs.Document).mimeType;\n      fullSize = (entity as GramJs.Document).size.toJSNumber();\n    }\n\n    // Prevent HTML-in-video attacks\n    if (!isHtmlAllowed && mimeType) {\n      mimeType = mimeType.replace(/html/gi, '');\n    }\n\n    return { mimeType, data, fullSize };\n  } else if (entityType === 'stickerSet') {\n    const data = await client.downloadStickerSetThumb(entity);\n    const mimeType = getMimeType(data);\n\n    return { mimeType, data };\n  } else {\n    const data = await client.downloadProfilePhoto(entity, mediaMatchType === 'profile');\n    const mimeType = getMimeType(data);\n\n    return { mimeType, data };\n  }\n}\n\nfunction getMessageMediaMimeType(message: GramJs.Message, sizeType?: string) {\n  if (!message || !message.media) {\n    return undefined;\n  }\n\n  if (message.media instanceof GramJs.MessageMediaPhoto) {\n    return 'image/jpeg';\n  }\n\n  if (message.media instanceof GramJs.MessageMediaGeo\n    || message.media instanceof GramJs.MessageMediaVenue\n    || message.media instanceof GramJs.MessageMediaGeoLive) {\n    return 'image/png';\n  }\n\n  if (message.media instanceof GramJs.MessageMediaDocument && message.media.document instanceof GramJs.Document) {\n    if (sizeType) {\n      return message.media.document!.attributes.some((a) => a instanceof GramJs.DocumentAttributeSticker)\n        ? 'image/webp'\n        : 'image/jpeg';\n    }\n\n    return message.media.document!.mimeType;\n  }\n\n  if (message.media instanceof GramJs.MessageMediaWebPage\n    && message.media.webpage instanceof GramJs.WebPage\n    && message.media.webpage.document instanceof GramJs.Document) {\n    if (sizeType) {\n      return 'image/jpeg';\n    }\n\n    return message.media.webpage.document.mimeType;\n  }\n\n  return undefined;\n}\n\n// eslint-disable-next-line no-async-without-await/no-async-without-await\nasync function parseMedia(\n  data: Buffer, mediaFormat: ApiMediaFormat, mimeType?: string,\n): Promise<ApiParsedMedia | undefined> {\n  switch (mediaFormat) {\n    case ApiMediaFormat.BlobUrl:\n      return new Blob([data], { type: mimeType });\n    case ApiMediaFormat.Text:\n      return data.toString();\n    case ApiMediaFormat.Progressive:\n    case ApiMediaFormat.DownloadUrl:\n      return data.buffer;\n  }\n\n  return undefined;\n}\n\nfunction getMimeType(data: Uint8Array, fallbackMimeType = 'image/jpeg') {\n  if (data.length < 4) {\n    return fallbackMimeType;\n  }\n\n  let type = fallbackMimeType;\n  const signature = data.subarray(0, 4).reduce((result, byte) => result + byte.toString(16), '');\n\n  // https://en.wikipedia.org/wiki/List_of_file_signatures\n  switch (signature) {\n    case '89504e47':\n      type = 'image/png';\n      break;\n    case '47494638':\n      type = 'image/gif';\n      break;\n    case 'ffd8ffe0':\n    case 'ffd8ffe1':\n    case 'ffd8ffe2':\n    case 'ffd8ffe3':\n    case 'ffd8ffe8':\n      type = 'image/jpeg';\n      break;\n    case '52494646':\n      // In our case only webp is expected\n      type = 'image/webp';\n      break;\n  }\n\n  return type;\n}\n\nexport function parseMediaUrl(url: string) {\n  const mediaMatch = url.startsWith('staticMap')\n    ? url.match(/(staticMap):([0-9-]+)(\\?.+)/)\n    : url.startsWith('webDocument')\n      ? url.match(/(webDocument):(.+)/)\n      : url.match(\n        // eslint-disable-next-line max-len\n        /(avatar|profile|photo|msg|stickerSet|sticker|wallpaper|gif|document|videoAvatar)([-\\d\\w./]+)(?::\\d+)?(\\?size=\\w+)?/,\n      );\n  if (!mediaMatch) {\n    return undefined;\n  }\n\n  const mediaMatchType = mediaMatch[1];\n  const entityId: string | number = mediaMatch[2];\n\n  let entityType: EntityType;\n  const params = mediaMatch[3];\n  const sizeType = params?.replace('?size=', '') || undefined;\n\n  if (mediaMatch[1] === 'avatar' || mediaMatch[1] === 'profile') {\n    entityType = getEntityTypeById(entityId);\n  } else {\n    entityType = mediaMatch[1] as EntityType;\n  }\n\n  return {\n    mediaMatchType,\n    entityType,\n    entityId,\n    sizeType,\n    params,\n  };\n}\n","import {Api as GramJs, connection, TelegramClient,} from '../../../lib/gramjs';\n\nimport {Logger as GramJsLogger} from '../../../lib/gramjs/extensions/index';\nimport type {TwoFaParams} from '../../../lib/gramjs/client/2fa';\n\nimport type {ApiInitialArgs, ApiMediaFormat, ApiOnProgress, ApiSessionData, OnApiUpdate,} from '../../types';\n\nimport {APP_VERSION, CLOUD_MESSAGE_API, DEBUG, DEBUG_GRAMJS, UPLOAD_WORKERS,} from '../../../config';\nimport {onCurrentUserUpdate,} from './auth';\nimport {updater} from '../updater';\nimport {setMessageBuilderCurrentUserId} from '../apiBuilders/messages';\nimport downloadMediaWithClient, {parseMediaUrl} from './media';\nimport {buildApiUserFromFull} from '../apiBuilders/users';\nimport localDb, {clearLocalDb} from '../localDb';\nimport {buildApiPeerId} from '../apiBuilders/peers';\nimport {addMessageToLocalDb, log} from '../helpers';\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport Account from \"../../../worker/share/Account\";\nimport LocalDatabase from \"../../../worker/share/db/LocalDatabase\";\nimport {ActionCommands, getActionCommandsName} from \"../../../lib/ptp/protobuf/ActionCommands\";\nimport {CurrentUserInfo} from \"../../../worker/setting\";\nimport MsgWorker from \"../../../worker/msg/MsgWorker\";\nimport {AuthNativeReq} from \"../../../lib/ptp/protobuf/PTPAuth\";\nimport {ControllerPool} from \"../../../lib/ptp/functions/requests\";\nimport {StopChatStreamReq} from \"../../../lib/ptp/protobuf/PTPOther\";\nimport {SendBotMsgReq, SendBotMsgRes, UpdateCmdReq, UpdateCmdRes} from \"../../../lib/ptp/protobuf/PTPMsg\";\nimport BotWebSocket from \"../../../worker/msg/bot/BotWebSocket\";\n\nconst DEFAULT_USER_AGENT = 'Unknown UserAgent';\nconst DEFAULT_PLATFORM = 'Unknown platform';\nconst APP_CODE_NAME = 'Z';\n\nGramJsLogger.setLevel(DEBUG_GRAMJS ? 'debug' : 'warn');\n\nlet onUpdate: OnApiUpdate;\nlet client: TelegramClient;\nexport let account: Account;\nlet isConnected = false;\nlet currentUserId: string | undefined;\n\nexport async function init(_onUpdate: OnApiUpdate, initialArgs: ApiInitialArgs) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START INIT API');\n  }\n  onUpdate = _onUpdate;\n  const {\n    userAgent, platform, sessionData, isTest, isMovSupported, isWebmSupported, maxBufferSize, webAuthToken, dcId,\n    mockScenario,accountId,entropy,session\n  } = initialArgs;\n  await handleAuthNative(accountId,entropy,session);\n  if(DEBUG){\n    console.log(\"[initialArgs]\",{\n      deviceModel: navigator.userAgent || userAgent || DEFAULT_USER_AGENT,\n      systemVersion: platform || DEFAULT_PLATFORM,\n      appVersion: `${APP_VERSION} ${APP_CODE_NAME}`,\n      useWSS: true,\n    })\n  }\n  try {\n    if (DEBUG) {\n      log('CONNECTING');\n      // eslint-disable-next-line no-restricted-globals\n      (self as any).invoke = invokeRequest;\n    }\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log('>>> FINISH INIT API');\n      log('CONNECTED');\n    }\n\n    onUpdate({ '@type': 'updateApiReady' });\n\n    onUpdate({\n      '@type': 'updateAuthorizationState',\n      authorizationState: \"authorizationStateReady\",\n    });\n    // @ts-ignore\n    onUpdate({'@type': 'updateCurrentUser',currentUser: CurrentUserInfo});\n\n    onUpdate({\n      '@type': 'updateConnectionState',\n      connectionState:\"connectionStateReady\",\n    });\n    // void fetchCurrentUser();\n  } catch (err) {\n    if (DEBUG) {\n      log('CONNECTING ERROR', err);\n    }\n    throw err;\n  }\n}\n\nexport function setIsPremium({ isPremium }: { isPremium: boolean }) {\n  // client.setIsPremium(isPremium);\n}\n\nexport async function destroy(noLogOut = false, noClearLocalDb = false) {\n  // if (!noLogOut) {\n  //   await invokeRequest(new GramJs.auth.LogOut());\n  // }\n  if (!noClearLocalDb) clearLocalDb();\n\n  await client.destroy();\n}\n\nexport async function disconnect() {\n  await client.disconnect();\n}\n\nexport function getClient() {\n  return client;\n\n}\n\nfunction onSessionUpdate(sessionData: ApiSessionData) {\n  onUpdate({\n    '@type': 'updateSession',\n    sessionData,\n  });\n}\n\nfunction handleGramJsUpdate(update: any) {\n  if (update instanceof connection.UpdateConnectionState) {\n    isConnected = update.state === connection.UpdateConnectionState.connected;\n  } else if (update instanceof GramJs.UpdatesTooLong) {\n    void handleTerminatedSession();\n  } else if (update instanceof GramJs.UpdateConfig) {\n    // eslint-disable-next-line no-underscore-dangle\n    const currentUser = (update as GramJs.UpdateConfig & { _entities?: (GramJs.TypeUser | GramJs.TypeChat)[] })\n      ._entities\n      ?.find((entity) => entity instanceof GramJs.User && buildApiPeerId(entity.id, 'user') === currentUserId);\n    if (!(currentUser instanceof GramJs.User)) return;\n\n    setIsPremium({ isPremium: Boolean(currentUser.premium) });\n  }\n}\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue: true,\n  shouldThrow?: boolean,\n  shouldIgnoreUpdates?: undefined,\n  dcId?: number,\n  shouldIgnoreErrors?: boolean,\n): Promise<true | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue?: boolean,\n  shouldThrow?: boolean,\n  shouldIgnoreUpdates?: boolean,\n  dcId?: number,\n  shouldIgnoreErrors?: boolean,\n): Promise<T['__response'] | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue = false,\n  shouldThrow = false,\n  shouldIgnoreUpdates = false,\n  dcId?: number,\n  shouldIgnoreErrors = false,\n) {\n  if (!isConnected) {\n    if (DEBUG) {\n      log('INVOKE ERROR', request.className, 'Client is not connected');\n    }\n\n    return undefined;\n  }\n\n  try {\n    if (DEBUG) {\n      log('INVOKE', request.className);\n    }\n\n    const result = await client.invoke(request, dcId);\n\n    if (DEBUG) {\n      log('RESPONSE', request.className, result);\n    }\n\n    if (!shouldIgnoreUpdates) {\n      handleUpdatesFromRequest(request, result);\n    }\n\n    return shouldReturnTrue ? result && true : result;\n  } catch (err: any) {\n    if (shouldIgnoreErrors) return undefined;\n    if (DEBUG) {\n      log('INVOKE ERROR', request.className);\n      // eslint-disable-next-line no-console\n      console.debug('invokeRequest failed with payload', request);\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n\n    if (shouldThrow) {\n      throw err;\n    }\n\n    dispatchErrorUpdate(err, request);\n\n    return undefined;\n  }\n}\n\nfunction handleUpdatesFromRequest<T extends GramJs.AnyRequest>(request: T, result: T['__response']) {\n  let manyUpdates;\n  let singleUpdate;\n\n  if (result instanceof GramJs.UpdatesCombined || result instanceof GramJs.Updates) {\n    manyUpdates = result;\n  } else if (typeof result === 'object' && 'updates' in result && (\n    result.updates instanceof GramJs.Updates || result.updates instanceof GramJs.UpdatesCombined\n  )) {\n    manyUpdates = result.updates;\n  } else if (\n    result instanceof GramJs.UpdateShortMessage\n    || result instanceof GramJs.UpdateShortChatMessage\n    || result instanceof GramJs.UpdateShort\n    || result instanceof GramJs.UpdateShortSentMessage\n  ) {\n    singleUpdate = result;\n  }\n\n  if (manyUpdates) {\n    injectUpdateEntities(manyUpdates);\n\n    manyUpdates.updates.forEach((update) => {\n      updater(update, request);\n    });\n  } else if (singleUpdate) {\n    updater(singleUpdate, request);\n  }\n}\n\nexport async function downloadMedia(\n  args: { url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean },\n  onProgress?: ApiOnProgress,\n) {\n  try {\n    return (await downloadMediaWithClient(args, client, isConnected, onProgress));\n  } catch (err: any) {\n    if (err.message.startsWith('FILE_REFERENCE')) {\n      const isFileReferenceRepaired = await repairFileReference({ url: args.url });\n      if (isFileReferenceRepaired) {\n        return downloadMediaWithClient(args, client, isConnected, onProgress);\n      }\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to repair file reference', args.url);\n      }\n    }\n\n    throw err;\n  }\n}\n\nexport function uploadFile(file: File, onProgress?: ApiOnProgress) {\n  return client.uploadFile({ file, onProgress, workers: UPLOAD_WORKERS });\n}\n\nexport function updateTwoFaSettings(params: TwoFaParams) {\n  return client.updateTwoFaSettings(params);\n}\n\nexport function getTmpPassword(currentPassword: string, ttl?: number) {\n  return client.getTmpPassword(currentPassword, ttl);\n}\n\nexport async function fetchCurrentUser() {\n  const userFull = await invokeRequest(new GramJs.users.GetFullUser({\n    id: new GramJs.InputUserSelf(),\n  }));\n\n  if (!userFull || !(userFull.users[0] instanceof GramJs.User)) {\n    return;\n  }\n\n  const user = userFull.users[0];\n\n  if (user.photo instanceof GramJs.Photo) {\n    localDb.photos[user.photo.id.toString()] = user.photo;\n  }\n  localDb.users[buildApiPeerId(user.id, 'user')] = user;\n  const currentUser = buildApiUserFromFull(userFull);\n\n  setMessageBuilderCurrentUserId(currentUser.id);\n  onCurrentUserUpdate(currentUser);\n\n  currentUserId = currentUser.id;\n  setIsPremium({ isPremium: Boolean(currentUser.isPremium) });\n}\n\nexport function dispatchErrorUpdate<T extends GramJs.AnyRequest>(err: Error, request: T) {\n  const isSlowMode = err.message.startsWith('A wait of') && (\n    request instanceof GramJs.messages.SendMessage\n    || request instanceof GramJs.messages.SendMedia\n    || request instanceof GramJs.messages.SendMultiMedia\n  );\n\n  const { message } = err;\n\n  onUpdate({\n    '@type': 'error',\n    error: {\n      message,\n      isSlowMode,\n      hasErrorKey: true,\n    },\n  });\n}\n\nfunction injectUpdateEntities(result: GramJs.Updates | GramJs.UpdatesCombined) {\n  const entities = [...result.users, ...result.chats];\n\n  result.updates.forEach((update) => {\n    if (entities) {\n      // eslint-disable-next-line no-underscore-dangle\n      (update as any)._entities = entities;\n    }\n  });\n}\n\nasync function handleTerminatedSession() {\n  try {\n    await invokeRequest(new GramJs.users.GetFullUser({\n      id: new GramJs.InputUserSelf(),\n    }), undefined, true);\n  } catch (err: any) {\n    if (err.message === 'AUTH_KEY_UNREGISTERED') {\n      onUpdate({\n        '@type': 'updateConnectionState',\n        connectionState: 'connectionStateBroken',\n      });\n    }\n  }\n}\n\nexport async function repairFileReference({\n  url,\n}: {\n  url: string;\n}) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, mediaMatchType,\n  } = parsed;\n\n  if (mediaMatchType === 'file') {\n    return false;\n  }\n\n  if (entityType === 'msg') {\n    const entity = localDb.messages[entityId]!;\n    const messageId = entity.id;\n\n    const peer = 'channelId' in entity.peerId ? new GramJs.InputChannel({\n      channelId: entity.peerId.channelId,\n      accessHash: (localDb.chats[buildApiPeerId(entity.peerId.channelId, 'channel')] as GramJs.Channel).accessHash!,\n    }) : undefined;\n    const result = await invokeRequest(\n      peer\n        ? new GramJs.channels.GetMessages({\n          channel: peer,\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        })\n        : new GramJs.messages.GetMessages({\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        }),\n    );\n\n    if (!result || result instanceof GramJs.messages.MessagesNotModified) return false;\n\n    const message = result.messages[0];\n    if (message instanceof GramJs.MessageEmpty) return false;\n    addMessageToLocalDb(message);\n    return true;\n  }\n  return false;\n}\n\nconst handleAuthNative = async (accountId:number,entropy:string,session?:string)=>{\n  const kv = new LocalDatabase();\n  kv.init(localDb);\n  Account.setClientKv(kv)\n  account = Account.getInstance(accountId);\n  await account.setEntropy(entropy)\n  Account.setCurrentAccountId(accountId)\n  if(session){\n    account.saveSession(session)\n  }else{\n    account.delSession()\n  }\n}\n\nconst handleAuthNativeReq = async (pdu:Pdu)=>{\n  const {accountId,entropy,session} = AuthNativeReq.parseMsg(pdu)\n  await handleAuthNative(accountId,entropy,session);\n}\nconst handleStopChatStreamReq = async (pdu:Pdu)=>{\n  const {msgId,chatId} = StopChatStreamReq.parseMsg(pdu)\n  ControllerPool.stop(chatId,msgId)\n}\n\nexport const handleSendBotMsgReq = async (pdu:Pdu)=>{\n  const {botApi,chatId,text} = SendBotMsgReq.parseMsg(pdu)\n  if(botApi){\n    try {\n      if(botApi.startsWith(\"http\")){\n        const res = await fetch(botApi+\"/message\", {\n          method: \"POST\",\n          headers:{\n            Authorization: `Bearer ${account.getSession()}`,\n          },\n          body:JSON.stringify({\n            text,\n            chatId,\n          })\n        });\n        if(!res || res.status !== 200){\n          return;\n        }\n        // @ts-ignore\n        const json = await res.json();\n        // @ts-ignore\n        return new SendBotMsgRes({text:json.text}).pack().getPbData()\n      }else{\n        const botWs = BotWebSocket.getInstance(chatId!)\n        if(!botWs.isLogged()){\n            await MsgWorker.createWsBot(chatId!,botApi)\n        }\n        const res = await botWs.sendPduWithCallback(new SendBotMsgReq({\n          text,\n          chatId\n        }).pack())\n        return res.getPbData()\n      }\n    }catch (e){\n      console.error(e)\n      return\n    }\n  }\n}\n\nconst handleUpdateCmdReq = async (pdu:Pdu)=>{\n  const {botApi,chatId} = UpdateCmdReq.parseMsg(pdu)\n  if(botApi){\n    try {\n      if(botApi.startsWith(\"http\")){\n        const res = await fetch(botApi+\"/commands\", {\n          method: \"GET\",\n          headers:{\n            Authorization: `Bearer ${account.getSession()}`,\n          }\n        });\n        if(!res || res.status !== 200){\n          return;\n        }\n        // @ts-ignore\n        const {commands} = await res.json();\n        return new UpdateCmdRes({\n          commands\n        }).pack().getPbData()\n      }else{\n        const botWs = BotWebSocket.getInstance(chatId!)\n        if(!botWs.isLogged()){\n          await MsgWorker.createWsBot(chatId!,botApi)\n        }\n        const res = await botWs.sendPduWithCallback(new UpdateCmdReq({\n          chatId\n        }).pack())\n        const {commands} = UpdateCmdRes.parseMsg(res)\n        return new UpdateCmdRes({\n          commands\n        }).pack().getPbData()\n      }\n    }catch (e){\n      console.error(e)\n      return\n    }\n  }\n}\n\nexport async function sendWithCallback(buff:Uint8Array){\n\n  let pdu = new Pdu(Buffer.from(buff))\n  if(DEBUG){\n    console.log(pdu.getCommandId(),getActionCommandsName(pdu.getCommandId()))\n  }\n  switch (pdu.getCommandId()) {\n    case ActionCommands.CID_SendBotMsgReq:\n      return await handleSendBotMsgReq(pdu);\n    case ActionCommands.CID_UpdateCmdReq:\n      return await handleUpdateCmdReq(pdu);\n    case ActionCommands.CID_StopChatStreamReq:\n      return await handleStopChatStreamReq(pdu);\n    case ActionCommands.CID_AuthNativeReq:\n      return await handleAuthNativeReq(pdu);\n    case ActionCommands.CID_GenMsgIdReq:\n      return await MsgWorker.genMsgId(pdu);\n    case ActionCommands.CID_UploadMsgReq:\n      pdu = await MsgWorker.beforeUploadMsgReq(pdu);\n      break\n    case ActionCommands.CID_UploadUserReq:\n      pdu = await MsgWorker.beforeUploadUserReq(pdu);\n      break\n  }\n  if(!account.getSession()){\n    return\n  }\n\n  const res = await fetch(`${CLOUD_MESSAGE_API}/proto`, {\n    method: \"POST\",\n    body: Buffer.from(pdu.getPbData()),\n    headers:{\n      Authorization: `Bearer ${account.getSession()}`,\n    }\n  });\n  if(!res || res.status !== 200){\n    return;\n  }\n  const arrayBuffer = await res.arrayBuffer();\n  let buf = Buffer.from(arrayBuffer);\n  const pduRes = new Pdu(buf)\n  switch (pduRes.getCommandId()) {\n    case ActionCommands.CID_DownloadMsgRes:\n      buf = await MsgWorker.afterDownloadMsgReq(pduRes)\n      break\n    case ActionCommands.CID_DownloadUserRes:\n      buf = await MsgWorker.afterDownloadUserReq(pduRes)\n      break\n  }\n  return buf;\n}\n\n","import type { GroupCallConnectionData } from '../../lib/secret-sauce';\nimport { Api as GramJs, connection } from '../../lib/gramjs';\nimport type {\n  ApiMessage, ApiMessageExtendedMediaPreview, ApiUpdateConnectionStateType, OnApiUpdate,\n} from '../types';\n\nimport { DEBUG, GENERAL_TOPIC_ID } from '../../config';\nimport { omit, pick } from '../../util/iteratees';\nimport { getServerTimeOffset, setServerTimeOffset } from '../../util/serverTime';\nimport {\n  buildApiMessage,\n  buildApiMessageFromShort,\n  buildApiMessageFromShortChat,\n  buildMessageMediaContent,\n  buildMessageTextContent,\n  buildPoll,\n  buildPollResults,\n  buildApiMessageFromNotification,\n  buildMessageDraft,\n  buildMessageReactions,\n  buildApiMessageExtendedMediaPreview,\n} from './apiBuilders/messages';\nimport {\n  buildChatMember,\n  buildChatMembers,\n  buildChatTypingStatus,\n  buildAvatarHash,\n  buildApiChatFromPreview,\n  buildApiChatFolder,\n  buildApiChatSettings,\n} from './apiBuilders/chats';\nimport {\n  buildApiUser,\n  buildApiUserEmojiStatus,\n  buildApiUserStatus,\n} from './apiBuilders/users';\nimport {\n  buildMessageFromUpdate,\n  isMessageWithMedia,\n  buildChatPhotoForLocalDb,\n} from './gramjsBuilders';\nimport localDb from './localDb';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\nimport {\n  addMessageToLocalDb,\n  addEntitiesWithPhotosToLocalDb,\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n  log,\n  swapLocalInvoiceMedia,\n} from './helpers';\nimport {\n  buildApiNotifyException,\n  buildApiNotifyExceptionTopic,\n  buildPrivacyKey,\n  buildPrivacyRules,\n} from './apiBuilders/misc';\nimport { buildApiPhoto, buildApiUsernames } from './apiBuilders/common';\nimport {\n  buildApiGroupCall,\n  buildApiGroupCallParticipant,\n  buildPhoneCall,\n  getGroupCallId,\n} from './apiBuilders/calls';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './apiBuilders/peers';\nimport { buildApiEmojiInteraction, buildStickerSet } from './apiBuilders/symbols';\nimport { buildApiBotMenuButton } from './apiBuilders/bots';\n\ntype Update = (\n  (GramJs.TypeUpdate | GramJs.TypeUpdates) & { _entities?: (GramJs.TypeUser | GramJs.TypeChat)[] }\n) | typeof connection.UpdateConnectionState;\n\nconst DELETE_MISSING_CHANNEL_MESSAGE_DELAY = 1000;\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nconst sentMessageIds = new Set();\n\nfunction dispatchUserAndChatUpdates(entities: (GramJs.TypeUser | GramJs.TypeChat)[]) {\n  entities\n    .filter((e) => e instanceof GramJs.User)\n    .map(buildApiUser)\n    .forEach((user) => {\n      if (!user) {\n        return;\n      }\n\n      onUpdate({\n        '@type': 'updateUser',\n        id: user.id,\n        user,\n      });\n    });\n\n  entities\n    .filter((e) => (\n      e instanceof GramJs.Chat || e instanceof GramJs.ChatForbidden\n      || e instanceof GramJs.Channel || e instanceof GramJs.ChannelForbidden\n    ))\n    .map((e) => buildApiChatFromPreview(e))\n    .forEach((chat) => {\n      if (!chat) {\n        return;\n      }\n\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    });\n}\n\nexport function updater(update: Update, originRequest?: GramJs.AnyRequest) {\n  if (update instanceof connection.UpdateServerTimeOffset) {\n    setServerTimeOffset(update.timeOffset);\n\n    onUpdate({\n      '@type': 'updateServerTimeOffset',\n      serverTimeOffset: update.timeOffset,\n    });\n  } else if (update instanceof connection.UpdateConnectionState) {\n    let connectionState: ApiUpdateConnectionStateType;\n\n    switch (update.state) {\n      case connection.UpdateConnectionState.disconnected:\n        connectionState = 'connectionStateConnecting';\n        break;\n      case connection.UpdateConnectionState.broken:\n        connectionState = 'connectionStateBroken';\n        break;\n      case connection.UpdateConnectionState.connected:\n      default:\n        connectionState = 'connectionStateReady';\n        break;\n    }\n\n    onUpdate({\n      '@type': 'updateConnectionState',\n      connectionState,\n    });\n\n    // Messages\n  } else if (\n    update instanceof GramJs.UpdateNewMessage\n    || update instanceof GramJs.UpdateNewScheduledMessage\n    || update instanceof GramJs.UpdateNewChannelMessage\n    || update instanceof GramJs.UpdateShortChatMessage\n    || update instanceof GramJs.UpdateShortMessage\n  ) {\n    let message: ApiMessage | undefined;\n    let shouldForceReply: boolean | undefined;\n\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    if (update instanceof GramJs.UpdateShortChatMessage) {\n      message = buildApiMessageFromShortChat(update);\n    } else if (update instanceof GramJs.UpdateShortMessage) {\n      message = buildApiMessageFromShort(update);\n    } else {\n      // TODO Remove if proven not reproducing\n      if (update.message instanceof GramJs.MessageEmpty) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error('Unexpected update:', update.className, update);\n        }\n\n        return;\n      }\n\n      if ((update.message instanceof GramJs.Message && isMessageWithMedia(update.message))\n      || (update.message instanceof GramJs.MessageService\n          && update.message.action instanceof GramJs.MessageActionSuggestProfilePhoto)\n      ) {\n        addMessageToLocalDb(update.message);\n      }\n\n      message = buildApiMessage(update.message)!;\n      shouldForceReply = 'replyMarkup' in update.message\n        && update.message?.replyMarkup instanceof GramJs.ReplyKeyboardForceReply\n        && (!update.message.replyMarkup.selective || message.isMentioned);\n    }\n\n    if (update instanceof GramJs.UpdateNewScheduledMessage) {\n      onUpdate({\n        '@type': sentMessageIds.has(message.id) ? 'updateScheduledMessage' : 'newScheduledMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n      });\n    } else {\n      onUpdate({\n        '@type': sentMessageIds.has(message.id) ? 'updateMessage' : 'newMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n        shouldForceReply,\n      });\n    }\n\n    // Some updates to a Chat/Channel don't have a dedicated update class.\n    // We can get info on some updates from Service Messages.\n    if (update.message instanceof GramJs.MessageService) {\n      const { action } = update.message;\n\n      if (action instanceof GramJs.MessageActionPaymentSent) {\n        onUpdate({\n          '@type': 'updatePaymentStateCompleted',\n          slug: action.invoiceSlug,\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n        onUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: {\n            title: action.title,\n          },\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n        const photo = buildChatPhotoForLocalDb(action.photo);\n        const avatarHash = buildAvatarHash(photo);\n\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = photo;\n        }\n        addPhotoToLocalDb(action.photo);\n\n        if (avatarHash) {\n          onUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              avatarHash,\n            },\n            ...(action.photo instanceof GramJs.Photo && { newProfilePhoto: buildApiPhoto(action.photo) }),\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = new GramJs.ChatPhotoEmpty();\n        }\n\n        onUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: { avatarHash: undefined },\n        });\n      } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && e.id === action.userId\n        ))) {\n          onUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              isForbidden: true,\n              isNotJoined: true,\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatAddUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && action.users.includes(e.id)\n        ))) {\n          onUpdate({\n            '@type': 'updateChatJoin',\n            id: message.chatId,\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionGroupCall) {\n        if (!action.duration && action.call) {\n          onUpdate({\n            '@type': 'updateGroupCallChatId',\n            chatId: message.chatId,\n            call: {\n              id: action.call.id.toString(),\n              accessHash: action.call.accessHash.toString(),\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionTopicEdit) {\n        const { replyTo } = update.message;\n        const {\n          replyToMsgId, replyToTopId, forumTopic: isTopicReply,\n        } = replyTo || {};\n        const topicId = !isTopicReply ? GENERAL_TOPIC_ID : replyToTopId || replyToMsgId || GENERAL_TOPIC_ID;\n\n        onUpdate({\n          '@type': 'updateTopic',\n          chatId: getApiChatIdFromMtpPeer(update.message.peerId!),\n          topicId,\n        });\n      } else if (action instanceof GramJs.MessageActionTopicCreate) {\n        onUpdate({\n          '@type': 'updateTopics',\n          chatId: getApiChatIdFromMtpPeer(update.message.peerId!),\n        });\n      }\n    }\n  } else if (\n    update instanceof GramJs.UpdateEditMessage\n    || update instanceof GramJs.UpdateEditChannelMessage\n  ) {\n    // TODO Remove if proven not reproducing\n    if (update.message instanceof GramJs.MessageEmpty) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Unexpected update:', update.className, update);\n      }\n\n      return;\n    }\n\n    if (update.message instanceof GramJs.Message && isMessageWithMedia(update.message)) {\n      addMessageToLocalDb(update.message);\n    }\n\n    // Workaround for a weird server behavior when own message is marked as incoming\n    const message = omit(buildApiMessage(update.message)!, ['isOutgoing']);\n\n    onUpdate({\n      '@type': 'updateMessage',\n      id: message.id,\n      chatId: message.chatId,\n      message,\n    });\n  } else if (update instanceof GramJs.UpdateMessageReactions) {\n    onUpdate({\n      '@type': 'updateMessageReactions',\n      id: update.msgId,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      reactions: buildMessageReactions(update.reactions),\n    });\n  } else if (update instanceof GramJs.UpdateMessageExtendedMedia) {\n    let media: ApiMessage['content'] | undefined;\n    if (update.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n      media = buildMessageMediaContent(update.extendedMedia.media);\n    }\n\n    let preview: ApiMessageExtendedMediaPreview | undefined;\n    if (update.extendedMedia instanceof GramJs.MessageExtendedMediaPreview) {\n      preview = buildApiMessageExtendedMediaPreview(update.extendedMedia);\n    }\n\n    if (!media && !preview) return;\n\n    const chatId = getApiChatIdFromMtpPeer(update.peer);\n\n    swapLocalInvoiceMedia(chatId, update.msgId, update.extendedMedia);\n\n    onUpdate({\n      '@type': 'updateMessageExtendedMedia',\n      id: update.msgId,\n      chatId,\n      media,\n      preview,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteMessages) {\n    onUpdate({\n      '@type': 'deleteMessages',\n      ids: update.messages,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteScheduledMessages) {\n    onUpdate({\n      '@type': 'deleteScheduledMessages',\n      ids: update.messages,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n    });\n  } else if (update instanceof GramJs.UpdateDeleteChannelMessages) {\n    const chatId = buildApiPeerId(update.channelId, 'channel');\n    const ids = update.messages;\n    const existingIds = ids.filter((id) => localDb.messages[`${chatId}-${id}`]);\n    const missingIds = ids.filter((id) => !localDb.messages[`${chatId}-${id}`]);\n    const profilePhotoIds = ids.map((id) => {\n      const message = localDb.messages[`${chatId}-${id}`];\n\n      return message && message instanceof GramJs.MessageService && 'photo' in message.action\n        ? String(message.action.photo.id)\n        : undefined;\n    }).filter(Boolean);\n\n    if (existingIds.length) {\n      onUpdate({\n        '@type': 'deleteMessages',\n        ids: existingIds,\n        chatId,\n      });\n    }\n\n    if (profilePhotoIds.length) {\n      onUpdate({\n        '@type': 'deleteProfilePhotos',\n        ids: profilePhotoIds,\n        chatId,\n      });\n    }\n\n    // For some reason delete message update sometimes comes before new message update\n    if (missingIds.length) {\n      setTimeout(() => {\n        onUpdate({\n          '@type': 'deleteMessages',\n          ids: missingIds,\n          chatId,\n        });\n      }, DELETE_MISSING_CHANNEL_MESSAGE_DELAY);\n    }\n  } else if (update instanceof GramJs.UpdateServiceNotification) {\n    if (update.popup) {\n      onUpdate({\n        '@type': 'error',\n        error: {\n          message: update.message,\n        },\n      });\n    } else {\n      const currentDate = Date.now() / 1000 + getServerTimeOffset();\n      const message = buildApiMessageFromNotification(update, currentDate);\n\n      if (isMessageWithMedia(update)) {\n        addMessageToLocalDb(buildMessageFromUpdate(message.id, message.chatId, update));\n      }\n\n      onUpdate({\n        '@type': 'updateServiceNotification',\n        message,\n      });\n    }\n  } else if ((\n    originRequest instanceof GramJs.messages.SendMessage\n    || originRequest instanceof GramJs.messages.SendMedia\n    || originRequest instanceof GramJs.messages.SendMultiMedia\n    || originRequest instanceof GramJs.messages.ForwardMessages\n  ) && (\n    update instanceof GramJs.UpdateMessageID || update instanceof GramJs.UpdateShortSentMessage\n  )) {\n    let randomId;\n    if ('randomId' in update) {\n      randomId = update.randomId;\n    } else if ('randomId' in originRequest) {\n      randomId = originRequest.randomId;\n    }\n\n    const localMessage = randomId && localDb.localMessages[String(randomId)];\n    if (!localMessage) {\n      throw new Error('Local message not found');\n    }\n\n    let newContent: ApiMessage['content'] | undefined;\n    if (update instanceof GramJs.UpdateShortSentMessage) {\n      if (localMessage.content.text && update.entities) {\n        newContent = {\n          text: buildMessageTextContent(localMessage.content.text.text, update.entities),\n        };\n      }\n      if (update.media) {\n        newContent = {\n          ...newContent,\n          ...buildMessageMediaContent(update.media),\n        };\n      }\n\n      const mtpMessage = buildMessageFromUpdate(update.id, localMessage.chatId, update);\n      if (isMessageWithMedia(mtpMessage)) {\n        addMessageToLocalDb(mtpMessage);\n      }\n    }\n\n    sentMessageIds.add(update.id);\n\n    // Edge case for \"Send When Online\"\n    const isAlreadySent = 'date' in update && update.date * 1000 < Date.now() + getServerTimeOffset() * 1000;\n\n    onUpdate({\n      '@type': localMessage.isScheduled && !isAlreadySent\n        ? 'updateScheduledMessageSendSucceeded'\n        : 'updateMessageSendSucceeded',\n      chatId: localMessage.chatId,\n      localId: localMessage.id,\n      message: {\n        ...localMessage,\n        ...(newContent && {\n          content: {\n            ...localMessage.content,\n            ...newContent,\n          },\n        }),\n        id: update.id,\n        sendingState: undefined,\n        ...('date' in update && { date: update.date }),\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadMessagesContents) {\n    onUpdate({\n      '@type': 'updateCommonBoxMessages',\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChannelReadMessagesContents) {\n    onUpdate({\n      '@type': 'updateChannelMessages',\n      channelId: buildApiPeerId(update.channelId, 'channel'),\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateMessagePoll) {\n    const { pollId, poll, results } = update;\n    if (poll) {\n      const apiPoll = buildPoll(poll, results);\n\n      onUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: apiPoll,\n      });\n    } else {\n      const pollResults = buildPollResults(results);\n      onUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: { results: pollResults },\n      });\n    }\n  } else if (update instanceof GramJs.UpdateMessagePollVote) {\n    onUpdate({\n      '@type': 'updateMessagePollVote',\n      pollId: String(update.pollId),\n      userId: buildApiPeerId(update.userId, 'user'),\n      options: update.options.map(serializeBytes),\n    });\n  } else if (update instanceof GramJs.UpdateChannelMessageViews) {\n    onUpdate({\n      '@type': 'updateMessage',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      id: update.id,\n      message: { views: update.views },\n    });\n\n    // Chats\n  } else if (update instanceof GramJs.UpdateReadHistoryInbox) {\n    onUpdate({\n      '@type': 'updateChatInbox',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadHistoryOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelInbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelDiscussionInbox) {\n    onUpdate({\n      '@type': 'updateThreadInfo',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      threadId: update.topMsgId,\n      threadInfo: {\n        lastReadInboxMessageId: update.readMaxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelDiscussionOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.readMaxId,\n      },\n    });\n  } else if (\n    update instanceof GramJs.UpdateDialogPinned\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateChatPinned',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      isPinned: update.pinned || false,\n    });\n  } else if (update instanceof GramJs.UpdatePinnedDialogs) {\n    const ids = update.order\n      ? update.order\n        .filter((dp): dp is GramJs.DialogPeer => dp instanceof GramJs.DialogPeer)\n        .map((dp) => getApiChatIdFromMtpPeer(dp.peer))\n      : [];\n\n    onUpdate({\n      '@type': 'updatePinnedChatIds',\n      ids,\n      folderId: update.folderId || undefined,\n    });\n  } else if (update instanceof GramJs.UpdateFolderPeers) {\n    update.folderPeers.forEach((folderPeer) => {\n      const { folderId, peer } = folderPeer;\n\n      onUpdate({\n        '@type': 'updateChatListType',\n        id: getApiChatIdFromMtpPeer(peer),\n        folderId,\n      });\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilter) {\n    const { id, filter } = update;\n    const folder = filter instanceof GramJs.DialogFilter ? buildApiChatFolder(filter) : undefined;\n\n    onUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder,\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilterOrder) {\n    onUpdate({\n      '@type': 'updateChatFoldersOrder',\n      orderedIds: update.order,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipants) {\n    const replacedMembers = buildChatMembers(update.participants);\n\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.participants.chatId, 'chat'),\n      replacedMembers,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantAdd) {\n    const addedMember = buildChatMember(\n      pick(update, ['userId', 'inviterId', 'date']) as GramJs.ChatParticipant,\n    );\n\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      addedMember,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantDelete) {\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      deletedMemberId: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (\n    update instanceof GramJs.UpdatePinnedMessages\n    || update instanceof GramJs.UpdatePinnedChannelMessages\n  ) {\n    const chatId = update instanceof GramJs.UpdatePinnedMessages\n      ? getApiChatIdFromMtpPeer(update.peer)\n      : buildApiPeerId(update.channelId, 'channel');\n\n    onUpdate({\n      '@type': 'updatePinnedIds',\n      chatId,\n      messageIds: update.messages,\n      isPinned: update.pinned,\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyPeer\n  ) {\n    onUpdate({\n      '@type': 'updateNotifyExceptions',\n      ...buildApiNotifyException(update.notifySettings, update.peer.peer),\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyForumTopic\n  ) {\n    onUpdate({\n      '@type': 'updateTopicNotifyExceptions',\n      ...buildApiNotifyExceptionTopic(\n        update.notifySettings, update.peer.peer, update.peer.topMsgId,\n      ),\n    });\n  } else if (\n    update instanceof GramJs.UpdateUserTyping\n    || update instanceof GramJs.UpdateChatUserTyping\n  ) {\n    const id = update instanceof GramJs.UpdateUserTyping\n      ? buildApiPeerId(update.userId, 'user')\n      : buildApiPeerId(update.chatId, 'chat');\n\n    if (update.action instanceof GramJs.SendMessageEmojiInteraction) {\n      onUpdate({\n        '@type': 'updateStartEmojiInteraction',\n        id,\n        emoji: update.action.emoticon,\n        messageId: update.action.msgId,\n        interaction: buildApiEmojiInteraction(JSON.parse(update.action.interaction.data)),\n      });\n    } else {\n      onUpdate({\n        '@type': 'updateChatTypingStatus',\n        id,\n        typingStatus: buildChatTypingStatus(update),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateChannelUserTyping) {\n    const id = buildApiPeerId(update.channelId, 'channel');\n\n    onUpdate({\n      '@type': 'updateChatTypingStatus',\n      id,\n      threadId: update.topMsgId,\n      typingStatus: buildChatTypingStatus(update),\n    });\n  } else if (update instanceof GramJs.UpdateChannel) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities } = update;\n    if (!_entities) {\n      return;\n    }\n\n    const channel = _entities.find((e): e is GramJs.Channel | GramJs.ChannelForbidden => (\n      e instanceof GramJs.Channel || e instanceof GramJs.ChannelForbidden\n    ));\n\n    if (channel instanceof GramJs.Channel) {\n      const chat = buildApiChatFromPreview(channel);\n      if (chat) {\n        onUpdate({\n          '@type': 'updateChat',\n          id: chat.id,\n          chat,\n        });\n\n        onUpdate({\n          '@type': chat.isNotJoined ? 'updateChatLeave' : 'updateChatJoin',\n          id: buildApiPeerId(update.channelId, 'channel'),\n        });\n      }\n    } else if (channel instanceof GramJs.ChannelForbidden) {\n      const chatId = buildApiPeerId(update.channelId, 'channel');\n\n      onUpdate({\n        '@type': 'updateChat',\n        id: chatId,\n        chat: {\n          isRestricted: true,\n        },\n      });\n\n      onUpdate({\n        '@type': 'updateChatLeave',\n        id: chatId,\n      });\n    } else if (_entities.length === 0) {\n      // The link to the discussion group may have been changed.\n      // No corresponding update available at this moment https://core.telegram.org/type/Updates\n      onUpdate({\n        '@type': 'resetMessages',\n        id: buildApiPeerId(update.channelId, 'channel'),\n      });\n    }\n  } else if (\n    update instanceof GramJs.UpdateDialogUnreadMark\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      chat: {\n        hasUnreadMark: update.unread,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChatDefaultBannedRights) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        defaultBannedRights: omitVirtualClassFields(update.defaultBannedRights),\n      },\n    });\n\n    // Users\n  } else if (update instanceof GramJs.UpdateUserStatus) {\n    onUpdate({\n      '@type': 'updateUserStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      status: buildApiUserStatus(update.status),\n    });\n  } else if (update instanceof GramJs.UpdateUser) {\n    onUpdate({\n      '@type': 'updateRequestUserUpdate',\n      id: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (update instanceof GramJs.UpdateUserEmojiStatus) {\n    const emojiStatus = buildApiUserEmojiStatus(update.emojiStatus);\n    onUpdate({\n      '@type': 'updateUserEmojiStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      emojiStatus,\n    });\n  } else if (update instanceof GramJs.UpdateUserName) {\n    const apiUserId = buildApiPeerId(update.userId, 'user');\n    const updatedUser = localDb.users[apiUserId];\n\n    const user = updatedUser?.mutualContact && !updatedUser.self\n      ? pick(update, [])\n      : pick(update, ['firstName', 'lastName']);\n\n    const usernames = buildApiUsernames(update);\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: apiUserId,\n      user: {\n        ...user,\n        usernames,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateUserPhone) {\n    const { userId, phone } = update;\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: buildApiPeerId(userId, 'user'),\n      user: { phoneNumber: phone },\n    });\n  } else if (update instanceof GramJs.UpdatePeerSettings) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities, settings } = update;\n    if (!_entities) {\n      return;\n    }\n\n    if (_entities?.length) {\n      _entities\n        .filter((e) => e instanceof GramJs.User && !e.contact)\n        .forEach((user) => {\n          onUpdate({\n            '@type': 'deleteContact',\n            id: buildApiPeerId(user.id, 'user'),\n          });\n        });\n\n      _entities\n        .filter((e) => e instanceof GramJs.User && e.contact)\n        .map(buildApiUser)\n        .forEach((user) => {\n          if (!user) {\n            return;\n          }\n\n          onUpdate({\n            '@type': 'updateUser',\n            id: user.id,\n            user: {\n              ...user,\n              ...(settings && { settings: buildApiChatSettings(settings) }),\n            },\n          });\n        });\n    }\n\n    // Settings\n  } else if (update instanceof GramJs.UpdateNotifySettings) {\n    const {\n      notifySettings: {\n        showPreviews, silent, muteUntil,\n      },\n      peer: { className },\n    } = update;\n\n    const peerType = className === 'NotifyUsers'\n      ? 'contact'\n      : (className === 'NotifyChats'\n        ? 'group'\n        : (className === 'NotifyBroadcasts'\n          ? 'broadcast'\n          : undefined\n        )\n      );\n\n    if (!peerType) {\n      return;\n    }\n\n    onUpdate({\n      '@type': 'updateNotifySettings',\n      peerType,\n      isSilent: Boolean(silent\n        || (typeof muteUntil === 'number' && Date.now() + getServerTimeOffset() * 1000 < muteUntil * 1000)),\n      shouldShowPreviews: Boolean(showPreviews),\n    });\n  } else if (update instanceof GramJs.UpdatePeerBlocked) {\n    onUpdate({\n      '@type': 'updatePeerBlocked',\n      id: getApiChatIdFromMtpPeer(update.peerId),\n      isBlocked: update.blocked,\n    });\n  } else if (update instanceof GramJs.UpdatePrivacy) {\n    const key = buildPrivacyKey(update.key);\n    if (key) {\n      onUpdate({\n        '@type': 'updatePrivacy',\n        key,\n        rules: buildPrivacyRules(update.rules),\n      });\n    }\n\n    // Misc\n  } else if (update instanceof GramJs.UpdateDraftMessage) {\n    onUpdate({\n      '@type': 'draftMessage',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      threadId: update.topMsgId,\n      ...buildMessageDraft(update.draft),\n    });\n  } else if (update instanceof GramJs.UpdateContactsReset) {\n    onUpdate({ '@type': 'updateResetContactList' });\n  } else if (update instanceof GramJs.UpdateFavedStickers) {\n    onUpdate({ '@type': 'updateFavoriteStickers' });\n  } else if (update instanceof GramJs.UpdateRecentStickers) {\n    onUpdate({ '@type': 'updateRecentStickers' });\n  } else if (update instanceof GramJs.UpdateMoveStickerSetToTop) {\n    if (!update.masks) {\n      onUpdate({\n        '@type': 'updateMoveStickerSetToTop',\n        isCustomEmoji: update.emojis,\n        id: update.stickerset.toString(),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateStickerSets) {\n    onUpdate({ '@type': 'updateStickerSets' });\n  } else if (update instanceof GramJs.UpdateStickerSetsOrder) {\n    if (!update.masks) {\n      onUpdate({\n        '@type': 'updateStickerSetsOrder',\n        order: update.order.map((n) => n.toString()),\n        isCustomEmoji: update.emojis,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateNewStickerSet) {\n    if (update.stickerset instanceof GramJs.messages.StickerSet) {\n      const stickerSet = buildStickerSet(update.stickerset.set);\n      onUpdate({\n        '@type': 'updateStickerSet',\n        id: stickerSet.id,\n        stickerSet,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateSavedGifs) {\n    onUpdate({ '@type': 'updateSavedGifs' });\n  } else if (update instanceof GramJs.UpdateGroupCall) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateGroupCall',\n      call: buildApiGroupCall(update.call),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallConnection) {\n    onUpdate({\n      '@type': 'updateGroupCallConnection',\n      data: JSON.parse(update.params.data) as GroupCallConnectionData,\n      presentation: Boolean(update.presentation),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallParticipants) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateGroupCallParticipants',\n      groupCallId: getGroupCallId(update.call),\n      participants: update.participants.map(buildApiGroupCallParticipant),\n    });\n  } else if (update instanceof GramJs.UpdatePendingJoinRequests) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updatePendingJoinRequests',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      recentRequesterIds: update.recentRequesters.map((id) => buildApiPeerId(id, 'user')),\n      requestsPending: update.requestsPending,\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCall) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updatePhoneCall',\n      call: buildPhoneCall(update.phoneCall),\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCallSignalingData) {\n    onUpdate({\n      '@type': 'updatePhoneCallSignalingData',\n      callId: update.phoneCallId.toString(),\n      data: Array.from(update.data),\n    });\n  } else if (update instanceof GramJs.UpdateWebViewResultSent) {\n    const { queryId } = update;\n\n    onUpdate({\n      '@type': 'updateWebViewResultSent',\n      queryId: queryId.toString(),\n    });\n  } else if (update instanceof GramJs.UpdateBotMenuButton) {\n    const {\n      botId,\n      button,\n    } = update;\n\n    const id = buildApiPeerId(botId, 'user');\n\n    onUpdate({\n      '@type': 'updateBotMenuButton',\n      botId: id,\n      button: buildApiBotMenuButton(button),\n    });\n  } else if (update instanceof GramJs.UpdateTranscribedAudio) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateTranscribedAudio',\n      transcriptionId: update.transcriptionId.toString(),\n      text: update.text,\n      isPending: update.pending,\n    });\n  } else if (update instanceof GramJs.UpdateConfig) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n    onUpdate({ '@type': 'updateConfig' });\n  } else if (update instanceof GramJs.UpdateChannelPinnedTopic) {\n    onUpdate({\n      '@type': 'updatePinnedTopic',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      topicId: update.topicId,\n      isPinned: Boolean(update.pinned),\n    });\n  } else if (update instanceof GramJs.UpdateChannelPinnedTopics) {\n    onUpdate({\n      '@type': 'updatePinnedTopicsOrder',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      order: update.order || [],\n    });\n  } else if (update instanceof GramJs.UpdateRecentEmojiStatuses) {\n    onUpdate({ '@type': 'updateRecentEmojiStatuses' });\n  } else if (DEBUG) {\n    const params = typeof update === 'object' && 'className' in update ? update.className : update;\n    log('UNEXPECTED UPDATE', params);\n  }\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getActions, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiChat, ApiChatFolder, ApiChatMember, ApiError, ApiUser, ApiUserStatus,} from '../../../api/types';\nimport {ApiAttachment, MAIN_THREAD_ID} from '../../../api/types';\nimport {ChatCreationProgress, ManagementProgress, NewChatMembersProgress} from '../../../types';\nimport type {ActionReturnType, GlobalState, TabArgs,} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  DEBUG, MEDIA_CACHE_NAME_WAI,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  deleteTopic,\n  leaveChat,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatListType,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport {buildCollectionByKey, omit} from '../../../util/iteratees';\nimport {debounce, pause, throttle} from '../../../util/schedulers';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {formatShareText, parseChooseParameter, processDeepLink} from '../../../util/deeplink';\nimport {updateGroupCall} from '../../reducers/calls';\nimport {selectGroupCall} from '../../selectors/calls';\nimport {getOrderedIds} from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport {selectCurrentLimit} from '../../selectors/limits';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport {\n  ChatModelConfig, DEFAULT_CHATGPT_AI_COMMANDS, DEFAULT_AVATARS,\n  DEFAULT_BOT_COMMANDS,\n  DEFAULT_CREATE_USER_BIO, DEFAULT_PROMPT,\n  LoadAllChats, UserIdChatGpt,\n  UserIdFirstBot, UserIdCnPrompt, UserIdEnPrompt\n} from \"../../../worker/setting\";\nimport MsgCommandSetting from \"../../../worker/msg/MsgCommandSetting\";\nimport {generateRandomBytes, readBigIntFromBuffer} from \"../../../lib/gramjs/Helpers\";\nimport * as cacheApi from '../../../util/cacheApi';\nimport {blobToDataUri, fetchBlob} from \"../../../util/files\";\nimport {DownloadRes} from \"../../../lib/ptp/protobuf/PTPFile\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {getFileId} from \"../../../lib/gramjs/client/uploadFile\";\nimport MsgCommandChatLab from \"../../../worker/msg/MsgCommandChatLab\";\nimport { resizeImage } from '../../../util/imageResize';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID,\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    //todo\n    // actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({ id, threadId: result.topMessageId, tabId });\n    } else {\n      actions.openChat({ id, threadId: topMessageId, tabId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  if(listType === \"archived\"){\n    return;\n  }\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n      return;\n    }\n\n    global = getGlobal();\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n    await loadChats(global,\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (global): ActionReturnType => {\n  runThrottledForLoadTopChats(() => loadChats(global, 'active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\n\nconst getAvatarPhoto = async (id:string,url:string)=>{\n  const res = await fetch(url)\n  const ab = await res.arrayBuffer()\n  const type = \"image/\"+url.split(\".\")[url.split(\".\").length - 1]\n  const body = new DownloadRes({\n    file:{\n      id,\n      part:0,\n      part_total:1,\n      buf:Buffer.from(ab),\n      size:Buffer.from(ab).length,\n      type\n    },\n    err:ERR.NO_ERROR\n  }).pack().getPbData()\n  const blob = new Blob([Buffer.from(body)],{type});\n  const blob1= new Blob([Buffer.from(ab)],{type});\n\n  const quality = 0.1;\n  const thumbUrl = await resizeImage(blob1, 40,40, 'image/jpeg',quality);\n  const thumbBlob = await fetchBlob(thumbUrl)\n  const dataUri = await blobToDataUri(thumbBlob);\n  const size = {\n    \"width\": 640,\n    \"height\":  640,\n  }\n  await cacheApi.save(MEDIA_CACHE_NAME_WAI, id, blob);\n\n  return {\n    id:id,\n    thumbnail:{\n      dataUri,\n      ...size\n    },\n    \"sizes\": [\n      {\n        width: 160,\n        height: 160,\n        type: 's',\n      },\n      {\n        width: 320,\n        height: 320,\n        type: 'm',\n      },\n      {\n        width: 640,\n        height: 640,\n        type: 'x',\n      },\n    ],\n  }\n}\naddActionHandler('createChat', async (global, actions, payload)=> {\n  const {\n    title, id,promptInit,about, tabId = getCurrentTabId(),\n  } = payload;\n\n  const userIds = Object.keys(global.users.byId)\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n  try{\n    let userId: string;\n    let userIdInt = parseInt(UserIdFirstBot)\n    if(!id){\n      if(userIds.length > 0){\n        userIds.sort((a,b)=>parseInt(b) - parseInt(a))\n        userIdInt = parseInt(userIds[0]) + 1\n      }\n      if(userIdInt < 100000){\n        userIdInt = 100000\n      }\n      userId = userIdInt.toString()\n    }else{\n      userId = id\n    }\n\n    const chatGptApiKey = localStorage.getItem(\"cg-key\") ? localStorage.getItem(\"cg-key\") : \"\"\n    const init_system_content = promptInit || DEFAULT_PROMPT\n    let avatarHash = \"\";\n    let photo = undefined\n    if(DEFAULT_AVATARS[userId]){\n      avatarHash = getFileId();\n      const avatarUrl = DEFAULT_AVATARS[userId]\n      photo = await getAvatarPhoto(avatarHash,avatarUrl);\n    }\n    const user = {\n      \"canBeInvitedToGroup\": false,\n      \"hasVideoAvatar\": false,\n      \"type\": \"userTypeBot\",\n      id:userId,\n      \"phoneNumber\": \"\",\n      isMin:false,\n      \"noStatus\": true,\n      isSelf:false,\n      avatarHash,\n      accessHash:\"\",\n      isPremium: false,\n      firstName: title,\n      photos:[photo],\n      usernames: [\n        {\n          \"username\": \"Bot_\"+userId,\n          \"isActive\": true,\n          \"isEditable\": true\n        }\n      ],\n      fullInfo: {\n        \"isBlocked\": false,\n        \"noVoiceMessages\": false,\n        bio: about || DEFAULT_CREATE_USER_BIO,\n        botInfo: {\n          aiBot:{\n            enableAi:true,\n            chatGptConfig:{\n              init_system_content,\n              api_key:chatGptApiKey,\n              max_history_length:4,\n              modelConfig:ChatModelConfig\n            }\n          },\n          botId: userId,\n          \"description\": about || DEFAULT_CREATE_USER_BIO,\n          \"menuButton\": {\n            \"type\": \"commands\"\n          },\n          commands:[...DEFAULT_BOT_COMMANDS,...DEFAULT_CHATGPT_AI_COMMANDS].map(cmd=>{\n            // @ts-ignore\n            cmd.botId = userId;\n            return cmd\n          })\n        }\n      }\n    }\n    global = getGlobal()\n    const {chatFolders} = global;\n    // @ts-ignore\n    const users:ApiUser[] = [user]\n\n    // @ts-ignore\n    const chats:ApiChat[] = [MsgCommandSetting.buildDefaultChat(user)]\n\n    let activeChatFolder = window.sessionStorage.getItem(\"activeChatFolder\")\n    let activeChatFolderRow;\n    const chatFolderById:Record<string, ApiChatFolder> = {};\n    if(activeChatFolder){\n      // @ts-ignore\n      Object.values(chatFolders.byId).forEach((row:ApiChatFolder)=>{\n        if(row.id === parseInt(activeChatFolder!)){\n          activeChatFolderRow = row;\n          if(!row.includedChatIds){\n            row.includedChatIds = []\n          }\n          row.includedChatIds.push(userId)\n          chatFolderById[row.id] = row;\n        }\n      })\n    }\n\n    const userStatusesById:Record<string,ApiUserStatus> = {\n      [user.id] : {\n        \"type\": \"userStatusEmpty\"\n      }\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n    global = updateChatListIds(global, \"active\", chats.map(chat=>chat.id));\n    global = addUserStatuses(global, userStatusesById);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: ChatCreationProgress.Complete,\n      },\n    }, tabId);\n\n    setGlobal({\n      ...global,\n      chatFolders:{\n        ...global.chatFolders,\n        byId:{\n          ...global.chatFolders.byId,\n          ...chatFolderById\n        }\n\n      }\n    })\n\n    if(activeChatFolderRow){\n      actions.editChatFolder({ id: activeChatFolderRow.id, folderUpdate: activeChatFolderRow });\n    }\n    if(promptInit || id === UserIdChatGpt){\n      actions.sendBotCommand({chatId:userId,command:\"/initPrompt\",tabId})\n    }\n    // @ts-ignore\n    actions.openChat({id: userId,shouldReplaceHistory: true,});\n\n\n  }catch (e){\n    console.error(e)\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: ChatCreationProgress.Error,\n        error: '创建失败',\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n})\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n  // @ts-ignore\n  actions.setActiveChatFolder({activeChatFolder:0},getCurrentTabId())\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n  window.sessionStorage.setItem(\"activeChatFolder\",activeChatFolder.toString())\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleForum', { chat, isEnabled });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = chat.fullInfo?.areParticipantsHidden;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      areParticipantsHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      fullInfo: {\n        ...chat.fullInfo,\n        areParticipantsHidden: prevIsEnabled,\n      },\n    });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\nexport async function loadChats<T extends GlobalState>(\n  global: T,\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  let firstLoad = false;\n  global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  try {\n    let result: { folderIds?: number[],chatFolders?: any[]; users?: any; userStatusesById?: any; chats?: any; chatIds?: any; draftsById?: any; replyingToById?: any; orderedPinnedIds?: string[] | never[] | undefined; totalChatCount?: number; };\n    if(!global.users.byId[UserIdFirstBot]) {\n      firstLoad = true;\n\n      result = LoadAllChats;\n      for (let i = 0; i < result.users.length; i++) {\n        const user = result.users[i];\n        if(user.id === UserIdFirstBot){\n          if(!user.avatarHash){\n            user.avatarHash = getFileId();\n            const photo = await getAvatarPhoto(user.avatarHash,DEFAULT_AVATARS[user.id])\n            user.photos = [photo]\n            result.users[i] = user\n          }\n        }\n      }\n      for (let i = 0; i < result.chats.length; i++) {\n        const chat = result.chats[i];\n        if (global.messages.byChatId[chat.id]) {\n          const {threadsById, byId} = global.messages.byChatId[chat.id]\n          if (threadsById[-1] && threadsById[-1].lastViewportIds && threadsById[-1].lastViewportIds!.length > 0) {\n            // @ts-ignore\n            result.chats[i].lastMessage = byId[threadsById[-1].lastViewportIds[threadsById[-1].lastViewportIds.length - 1]]\n          }\n        }\n      }\n    }else {\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          isFullyLoaded: {\n            ...global.chats.isFullyLoaded,\n            [listType]: true,\n          },\n        },\n      };\n      setGlobal(global);\n      return\n    }\n    // result = await callApi('fetchChats', {\n    //   limit: CHAT_LIST_LOAD_SLICE,\n    //   offsetDate,\n    //   archived: listType === 'archived',\n    //   withPinned: shouldReplace,\n    //   lastLocalServiceMessage,\n    // });\n    const userStatusesById = {};\n    result.users.forEach((user: ApiUser)=>{\n\n      // @ts-ignore\n      userStatusesById[user.id] = {\n        \"type\": \"userStatusEmpty\"\n      }\n    })\n    result.userStatusesById = userStatusesById;\n\n    global = getGlobal();\n    result.chatIds = result.chats.map((chat: { id: any; }) => chat.id);\n    const { chatIds } = result;\n    if (chatIds.length > 0 && chatIds[0] === offsetId) {\n      chatIds.shift();\n    }\n    result.totalChatCount = result.chats.length;\n    lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n    const chatFoldersById:any = {};\n    result.chatFolders?.forEach(row=>{\n      chatFoldersById[row.id] = row\n    })\n    const orderedIds = result.chatFolders && result.chatFolders.length > 0 ? result.folderIds: [0];\n\n    global = {\n      ...global,\n      chatFolders:{\n        byId:{\n          ...chatFoldersById\n        },\n        orderedIds\n      }\n    }\n    if (shouldReplace && listType === 'active') {\n      // Always include service notifications chat\n      // if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      //   const result2 = await callApi('fetchChat', {\n      //     type: 'user',\n      //     user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      //   });\n      //\n      //   global = getGlobal();\n      //\n      //   const notificationsChat = result2 && selectChat(global, result2.chatId);\n      //   if (notificationsChat) {\n      //     chatIds.unshift(notificationsChat.id);\n      //     result.chats.unshift(notificationsChat);\n      //     if (lastLocalServiceMessage) {\n      //       notificationsChat.lastMessage = lastLocalServiceMessage;\n      //     }\n      //   }\n      // }\n      const tabStates = Object.values(global.byTabId);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n      global = updateChatListIds(global, listType, chatIds);\n    } else if (shouldReplace && listType === 'archived') {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      const newChats = buildCollectionByKey(result.chats, 'id');\n      if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n        if (notificationsChat && lastLocalServiceMessage) {\n          newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n            ...notificationsChat,\n            lastMessage: lastLocalServiceMessage,\n          };\n        }\n      }\n\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, newChats);\n      global = updateChatListIds(global, listType, chatIds);\n\n    }\n\n    global = updateChatListSecondaryInfo(global, listType, result);\n\n    const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n    idsToUpdateDraft.forEach((chatId) => {\n      const draft = result.draftsById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!draft && !thread) return;\n\n      if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n        global = replaceThreadParam(\n          global, chatId, MAIN_THREAD_ID, 'draft', draft,\n        );\n      }\n    });\n\n    const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n    idsToUpdateReplyingToId.forEach((chatId) => {\n      const replyingToById = result.replyingToById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!replyingToById && !thread) return;\n\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n      );\n    });\n\n    // if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    //   global = {\n    //     ...global,\n    //     chats: {\n    //       ...global.chats,\n    //       isFullyLoaded: {\n    //         ...global.chats.isFullyLoaded,\n    //         [listType]: true,\n    //       },\n    //     },\n    //   };\n    // }\n\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n\n    setGlobal(global);\n    if(firstLoad){\n      getActions().sendBotCommand({chatId:UserIdFirstBot,command:\"/start\"})\n      setTimeout(async ()=>{\n        // await MsgCommandChatLab.createPromptChat(UserIdFirstBot,UserIdCnPrompt)\n        // await MsgCommandChatLab.createPromptChat(UserIdFirstBot,UserIdEnPrompt)\n        await MsgCommandChatLab.createChatGpt(UserIdChatGpt)\n      },500)\n\n    }\n  }catch (e){\n    console.error(e)\n  }\n\n  return;\n  // const result = await callApi('fetchChats', {\n  //   limit: CHAT_LIST_LOAD_SLICE,\n  //   offsetDate,\n  //   archived: listType === 'archived',\n  //   withPinned: shouldReplace,\n  //   lastLocalServiceMessage,\n  // });\n  //\n\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","import type {\n  ApiChat,\n  ApiMessage,\n  ApiThreadInfo,\n  ApiUser,\n  ApiUserStatus,\n  ApiUpdateAuthorizationStateType,\n  ApiUpdateConnectionStateType,\n  ApiUpdateMsgClientStateType,\n  ApiStickerSet,\n  ApiSticker,\n  ApiWebPage,\n  ApiVideo,\n  ApiFormattedText,\n  ApiChatFolder,\n  ApiWallpaper,\n  ApiNotification,\n  ApiError,\n  ApiGlobalMessageSearchType,\n  ApiPaymentSavedInfo,\n  ApiSession,\n  ApiNewPoll,\n  ApiInviteInfo,\n  ApiCountryCode,\n  ApiCountry,\n  ApiGroupCall,\n  ApiAvailableReaction,\n  ApiAppConfig,\n  ApiSponsoredMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  ApiMessageStatistics,\n  ApiPaymentFormNativeParams,\n  ApiUpdate,\n  ApiReportReason,\n  ApiPhoto,\n  ApiKeyboardButton,\n  ApiThemeParameters,\n  ApiAttachBot,\n  ApiPhoneCall,\n  ApiWebSession,\n  ApiPremiumPromo,\n  ApiTranscription,\n  ApiInputInvoice,\n  ApiInvoice,\n  ApiStickerSetInfo,\n  ApiChatType,\n  ApiReceipt,\n  ApiPaymentCredentials,\n  ApiConfig,\n  ApiReaction,\n  ApiChatReactions,\n  ApiContact,\n  ApiExportedInvite,\n  ApiSendMessageAction,\n  ApiMessageEntity,\n  ApiAttachment,\n  ApiChatBannedRights,\n  ApiChatAdminRights,\n  ApiSessionData,\n  ApiTypingStatus,\n} from '../api/types';\nimport type {\n  FocusDirection,\n  ISettings,\n  MediaViewerOrigin,\n  ChatCreationProgress,\n  ProfileEditProgress,\n  SharedMediaType,\n  GlobalSearchContent,\n  ManagementProgress,\n  PaymentStep,\n  ShippingOption,\n  ApiInvoiceContainer,\n  ApiPrivacyKey,\n  ApiPrivacySettings,\n  ThemeKey,\n  IThemeSettings,\n  NotifyException,\n  LangCode,\n  EmojiKeywords,\n  InlineBotSettings,\n  NewChatMembersProgress,\n  AudioOrigin,\n  ManagementState,\n  SettingsScreens,\n  ManagementScreens,\n  LoadMoreDirection, PrivacyVisibility,\n} from '../types';\nimport { typify } from '../lib/teact/teactn';\nimport type { P2pMessage } from '../lib/secret-sauce';\nimport type { ApiCredentials } from '../components/payment/PaymentModal';\nimport {PbChatFolder_Type, UserStoreData_Type} from \"../lib/ptp/protobuf/PTPCommon/types\";\n\nexport type MessageListType =\n  'thread'\n  | 'pinned'\n  | 'scheduled';\n\nexport interface MessageList {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n}\n\nexport interface ActiveEmojiInteraction {\n  id: number;\n  x: number;\n  y: number;\n  messageId?: number;\n  startSize?: number;\n  animatedEffect?: string;\n  isReversed?: boolean;\n}\n\nexport type ApiPaymentStatus = 'paid' | 'failed' | 'pending' | 'cancelled';\n\nexport interface ActiveReaction {\n  messageId?: number;\n  reaction?: ApiReaction;\n}\n\nexport interface TabThread {\n  scrollOffset?: number;\n  replyStack?: number[];\n  outlyingIds?: number[];\n  viewportIds?: number[];\n}\n\nexport interface Thread {\n  lastScrollOffset?: number;\n  lastViewportIds?: number[];\n  listedIds?: number[];\n  pinnedIds?: number[];\n  scheduledIds?: number[];\n  editingId?: number;\n  replyingToId?: number;\n  editingScheduledId?: number;\n  editingDraft?: ApiFormattedText;\n  editingScheduledDraft?: ApiFormattedText;\n  draft?: ApiDraft;\n  noWebPage?: boolean;\n  threadInfo?: ApiThreadInfo;\n  firstMessageId?: number;\n  typingStatus?: ApiTypingStatus;\n}\n\nexport interface ServiceNotification {\n  id: number;\n  message: ApiMessage;\n  version?: string;\n  isUnread?: boolean;\n  isDeleted?: boolean;\n}\n\nexport type ApiLimitType = (\n  'uploadMaxFileparts' | 'stickersFaved' | 'savedGifs' | 'dialogFiltersChats' | 'dialogFilters' | 'dialogFolderPinned' |\n  'captionLength' | 'channels' | 'channelsPublic' | 'aboutLength'\n);\n\nexport type ApiLimitTypeWithModal = Exclude<ApiLimitType, (\n  'captionLength' | 'aboutLength' | 'stickersFaved' | 'savedGifs'\n)>;\n\nexport type TranslatedMessage = {\n  isPending?: boolean;\n  text?: ApiFormattedText;\n};\n\nexport type ChatTranslatedMessages = {\n  byLangCode: Record<string, Record<number, TranslatedMessage>>;\n};\n\nexport type ChatRequestedTranslations = {\n  toLanguage?: string;\n  manualMessages?: Record<number, string>;\n};\n\nexport type TabState = {\n  id: number;\n  isMasterTab: boolean;\n  isInactive?: boolean;\n  inviteHash?: string;\n  canInstall?: boolean;\n  isChatInfoShown: boolean;\n  isStatisticsShown?: boolean;\n  isLeftColumnShown: boolean;\n  newChatMembersProgress?: NewChatMembersProgress;\n  uiReadyState: 0 | 1 | 2;\n  shouldInit: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n\n  gifSearch: {\n    query?: string;\n    offset?: string;\n    results?: ApiVideo[];\n  };\n\n  stickerSearch: {\n    query?: string;\n    hash?: string;\n    resultIds?: string[];\n  };\n\n  nextSettingsScreen?: SettingsScreens;\n\n  isCallPanelVisible?: boolean;\n  multitabNextAction?: CallbackAction;\n  ratingPhoneCall?: ApiPhoneCall;\n\n  messageLists: MessageList[];\n\n  contentToBeScheduled?: {\n    gif?: ApiVideo;\n    sticker?: ApiSticker;\n    poll?: ApiNewPoll;\n    isSilent?: boolean;\n    sendGrouped?: boolean;\n    sendCompressed?: boolean;\n  };\n\n  activeChatFolder: number;\n  tabThreads: Record<string, Record<number, TabThread>>;\n  forumPanelChatId?: string;\n\n  focusedMessage?: {\n    chatId?: string;\n    threadId?: number;\n    messageId?: number;\n    direction?: FocusDirection;\n    noHighlight?: boolean;\n    isResizingContainer?: boolean;\n    hasReachedMessage?: boolean;\n  };\n\n  selectedMessages?: {\n    chatId: string;\n    messageIds: number[];\n  };\n\n  seenByModal?: {\n    chatId: string;\n    messageId: number;\n  };\n\n  reactorModal?: {\n    chatId: string;\n    messageId: number;\n  };\n\n  inlineBots: {\n    isLoading: boolean;\n    byUsername: Record<string, false | InlineBotSettings>;\n  };\n\n  globalSearch: {\n    query?: string;\n    date?: number;\n    currentContent?: GlobalSearchContent;\n    chatId?: string;\n    foundTopicIds?: number[];\n    fetchingStatus?: {\n      chats?: boolean;\n      messages?: boolean;\n    };\n    isClosing?: boolean;\n    localResults?: {\n      chatIds?: string[];\n      userIds?: string[];\n    };\n    globalResults?: {\n      chatIds?: string[];\n      userIds?: string[];\n    };\n    resultsByType?: Partial<Record<ApiGlobalMessageSearchType, {\n      totalCount?: number;\n      nextOffsetId: number;\n      foundIds: string[];\n    }>>;\n  };\n\n  userSearch: {\n    query?: string;\n    fetchingStatus?: boolean;\n    localUserIds?: string[];\n    globalUserIds?: string[];\n  };\n\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  activeReactions: Record<number, ActiveReaction[]>;\n\n  localTextSearch: {\n    byChatThreadKey: Record<string, {\n      isActive: boolean;\n      query?: string;\n      results?: {\n        totalCount?: number;\n        nextOffsetId?: number;\n        foundIds?: number[];\n      };\n    }>;\n  };\n\n  localMediaSearch: {\n    byChatThreadKey: Record<string, {\n      currentType?: SharedMediaType;\n      resultsByType?: Partial<Record<SharedMediaType, {\n        totalCount?: number;\n        nextOffsetId: number;\n        foundIds: number[];\n      }>>;\n    }>;\n  };\n\n  management: {\n    progress?: ManagementProgress;\n    byChatId: Record<string, ManagementState>;\n  };\n\n  mediaViewer: {\n    chatId?: string;\n    threadId?: number;\n    mediaId?: number;\n    avatarOwnerId?: string;\n    profilePhotoIndex?: number;\n    origin?: MediaViewerOrigin;\n    volume: number;\n    playbackRate: number;\n    isMuted: boolean;\n    isHidden?: boolean;\n  };\n\n  audioPlayer: {\n    chatId?: string;\n    messageId?: number;\n    threadId?: number;\n    origin?: AudioOrigin;\n    volume: number;\n    playbackRate: number;\n    isPlaybackRateActive?: boolean;\n    isMuted: boolean;\n  };\n\n  webPagePreview?: ApiWebPage;\n\n  forwardMessages: {\n    isModalShown?: boolean;\n    fromChatId?: string;\n    messageIds?: number[];\n    toChatId?: string;\n    toThreadId?: number;\n    withMyScore?: boolean;\n    noAuthors?: boolean;\n    noCaptions?: boolean;\n  };\n\n  pollResults: {\n    chatId?: string;\n    messageId?: number;\n    voters?: Record<string, string[]>; // TODO Rename to `voterIds`\n    offsets?: Record<string, string>;\n  };\n\n  payment: {\n    inputInvoice?: ApiInputInvoice;\n    step?: PaymentStep;\n    status?: ApiPaymentStatus;\n    shippingOptions?: ShippingOption[];\n    formId?: string;\n    requestId?: string;\n    savedInfo?: ApiPaymentSavedInfo;\n    canSaveCredentials?: boolean;\n    invoice?: ApiInvoice;\n    invoiceContainer?: Omit<ApiInvoiceContainer, 'receiptMsgId'>;\n    nativeProvider?: string;\n    providerId?: string;\n    nativeParams?: ApiPaymentFormNativeParams;\n    stripeCredentials?: {\n      type: string;\n      id: string;\n    };\n    smartGlocalCredentials?: {\n      type: string;\n      token: string;\n    };\n    passwordMissing?: boolean;\n    savedCredentials?: ApiPaymentCredentials[];\n    receipt?: ApiReceipt;\n    error?: {\n      field?: string;\n      message?: string;\n      description?: string;\n    };\n    isPaymentModalOpen?: boolean;\n    isExtendedMedia?: boolean;\n    confirmPaymentUrl?: string;\n    temporaryPassword?: {\n      value: string;\n      validUntil: number;\n    };\n  };\n\n  chatCreation?: {\n    progress: ChatCreationProgress;\n    error?: string;\n  };\n\n  profileEdit?: {\n    progress: ProfileEditProgress;\n    checkedUsername?: string;\n    isUsernameAvailable?: boolean;\n    error?: string;\n  };\n\n  notifications: ApiNotification[];\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n\n  safeLinkModalUrl?: string;\n  historyCalendarSelectedAt?: number;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n\n  activeDownloads: {\n    byChatId: Record<string, number[]>;\n  };\n\n  shouldShowContextMenuHint?: boolean;\n\n  statistics: {\n    byChatId: Record<string, ApiChannelStatistics | ApiGroupStatistics>;\n    currentMessage?: ApiMessageStatistics;\n    currentMessageId?: number;\n  };\n\n  newContact?: {\n    userId?: string;\n    isByPhoneNumber?: boolean;\n  };\n\n  openedGame?: {\n    url: string;\n    chatId: string;\n    messageId: number;\n  };\n\n  requestedDraft?: {\n    chatId?: string;\n    text: string;\n    files?: File[];\n  };\n\n  pollModal: {\n    isOpen: boolean;\n    isQuiz?: boolean;\n  };\n\n  webApp?: {\n    url: string;\n    botId: string;\n    buttonText: string;\n    queryId?: string;\n    slug?: string;\n    replyToMessageId?: number;\n    threadId?: number;\n  };\n\n  botTrustRequest?: {\n    botId: string;\n    type: 'game' | 'webApp';\n    onConfirm?: CallbackAction;\n  };\n  requestedAttachBotInstall?: {\n    bot: ApiAttachBot;\n    onConfirm?: CallbackAction;\n  };\n  requestedAttachBotInChat?: {\n    bot: ApiAttachBot;\n    filter: ApiChatType[];\n    startParam?: string;\n  };\n\n  confetti?: {\n    lastConfettiTime?: number;\n    top?: number;\n    left?: number;\n    width?: number;\n    height?: number;\n  };\n\n  urlAuth?: {\n    button?: {\n      chatId: string;\n      messageId: number;\n      buttonId: number;\n    };\n    request?: {\n      domain: string;\n      botId: string;\n      shouldRequestWriteAccess?: boolean;\n    };\n    url: string;\n  };\n\n  premiumModal?: {\n    isOpen?: boolean;\n    isClosing?: boolean;\n    promo: ApiPremiumPromo;\n    initialSection?: string;\n    fromUserId?: string;\n    toUserId?: string;\n    isGift?: boolean;\n    monthsAmount?: number;\n    isSuccess?: boolean;\n  };\n\n  giftPremiumModal?: {\n    isOpen?: boolean;\n    forUserId?: string;\n    monthlyCurrency?: string;\n    monthlyAmount?: string;\n  };\n\n  limitReachedModal?: {\n    limit: ApiLimitTypeWithModal;\n  };\n\n  deleteFolderDialogModal?: number;\n\n  createTopicPanel?: {\n    chatId: string;\n    isLoading?: boolean;\n  };\n\n  editTopicPanel?: {\n    chatId: string;\n    topicId: number;\n    isLoading?: boolean;\n  };\n\n  requestedTranslations: {\n    byChatId: Record<string, ChatRequestedTranslations>;\n  };\n  messageLanguageModal?: {\n    chatId: string;\n    messageId: number;\n    activeLanguage?: string;\n  };\n};\n\nexport type WaitToSyncType = {\n  messagesDownload?:{\n    byId:Record<string, {\n      time:number,\n    }>;\n  };\n  users?:{\n    byId:Record<string, {\n      isDelete:boolean;\n      time:number,\n    }>;\n  };\n  messages?:{\n    byId:Record<string, {\n      isDelete:boolean;\n      chatId:string,\n      time:number\n    }>;\n  };\n  folders?:{\n    folderIds?:number[];\n    chatFolders?:PbChatFolder_Type[];\n    time?:number;\n  },\n}\nexport enum AiReplyHistoryRole{\n  ASSISTANT,\n  USER\n}\n\nexport type AiReplyHistoryType = {msgId:number,role:AiReplyHistoryRole}\n\nexport type GlobalState = {\n  aiReplyHistory:Record<string, AiReplyHistoryType[]>\n  messagesDeleted:Record<string, number[]>\n  chatIdsDeleted:string[],\n  userSetting?:UserStoreData_Type,\n  waitToSync?:Record<string, WaitToSyncType>;\n  showMnemonicModal:boolean;\n  showPickBotModal:boolean;\n  msgClientState?: ApiUpdateMsgClientStateType;\n  config?: ApiConfig;\n  appConfig?: ApiAppConfig;\n  hasWebAuthTokenFailed?: boolean;\n  hasWebAuthTokenPasswordRequired?: true;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentUserId?: string;\n  isSyncing?: boolean;\n  isUpdateAvailable?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  blurredTabTokens: number[];\n  leftColumnWidth?: number;\n  lastIsChatInfoShown?: boolean;\n  initialUnreadNotifications?: number;\n\n  audioPlayer: {\n    lastPlaybackRate: number;\n    isLastPlaybackRateActive?: boolean;\n  };\n\n  mediaViewer: {\n    lastPlaybackRate: number;\n  };\n\n  recentlyFoundChatIds?: string[];\n\n  twoFaSettings: {\n    hint?: string;\n    isLoading?: boolean;\n    error?: string;\n    waitingEmailCodeLength?: number;\n  };\n\n  attachmentSettings: {\n    shouldCompress: boolean;\n    shouldSendGrouped: boolean;\n  };\n\n  attachMenu: {\n    hash?: string;\n    bots: Record<string, ApiAttachBot>;\n  };\n\n  passcode: {\n    isScreenLocked?: boolean;\n    hasPasscode?: boolean;\n    error?: string;\n    invalidAttemptsCount?: number;\n    invalidAttemptError?: string;\n    isLoading?: boolean;\n  };\n\n  // TODO Move to `auth`.\n  isLoggingOut?: boolean;\n  authState?: ApiUpdateAuthorizationStateType;\n  authPhoneNumber?: string;\n  authIsLoading?: boolean;\n  authIsLoadingQrCode?: boolean;\n  authError?: string;\n  authRememberMe?: boolean;\n  authNearestCountry?: string;\n  authIsCodeViaApp?: boolean;\n  authHint?: string;\n  authQrCode?: {\n    token: string;\n    expires: number;\n  };\n  countryList: {\n    phoneCodes: ApiCountryCode[];\n    general: ApiCountry[];\n  };\n\n  contactList?: {\n    userIds: string[];\n  };\n\n  blocked: {\n    ids: string[];\n    totalCount: number;\n  };\n\n  users: {\n    byId: Record<string, ApiUser>;\n    statusesById: Record<string, ApiUserStatus>;\n  };\n\n  chats: {\n    // TODO Replace with `Partial<Record>` to properly handle missing keys\n    byId: Record<string, ApiChat>;\n    listIds: {\n      active?: string[];\n      archived?: string[];\n    };\n    orderedPinnedIds: {\n      active?: string[];\n      archived?: string[];\n    };\n    totalCount: {\n      all?: number;\n      archived?: number;\n    };\n    isFullyLoaded: {\n      active?: boolean;\n      archived?: boolean;\n    };\n    forDiscussionIds?: string[];\n  };\n\n  messages: {\n    byChatId: Record<string, {\n      byId: Record<number, ApiMessage>;\n      threadsById: Record<number, Thread>;\n    }>;\n    sponsoredByChatId: Record<string, ApiSponsoredMessage>;\n  };\n\n  groupCalls: {\n    byId: Record<string, ApiGroupCall>;\n    activeGroupCallId?: string;\n  };\n\n  scheduledMessages: {\n    byChatId: Record<string, {\n      byId: Record<number, ApiMessage>;\n    }>;\n  };\n\n  chatFolders: {\n    orderedIds?: number[];\n    byId: Record<number, ApiChatFolder>;\n    recommended?: ApiChatFolder[];\n  };\n\n  phoneCall?: ApiPhoneCall;\n\n  fileUploads: {\n    byMessageLocalId: Record<string, {\n      progress: number;\n    }>;\n  };\n\n  recentEmojis: string[];\n  recentCustomEmojis: string[];\n\n  stickers: {\n    setsById: Record<string, ApiStickerSet>;\n    added: {\n      hash?: string;\n      setIds?: string[];\n    };\n    recent: {\n      hash?: string;\n      stickers: ApiSticker[];\n    };\n    favorite: {\n      hash?: string;\n      stickers: ApiSticker[];\n    };\n    greeting: {\n      hash?: string;\n      stickers: ApiSticker[];\n    };\n    premium: {\n      hash?: string;\n      stickers: ApiSticker[];\n    };\n    premiumSet: {\n      hash?: string;\n      stickers: ApiSticker[];\n    };\n    featured: {\n      hash?: string;\n      setIds?: string[];\n    };\n    forEmoji: {\n      emoji?: string;\n      stickers?: ApiSticker[];\n      hash?: string;\n    };\n  };\n\n  customEmojis: {\n    added: {\n      hash?: string;\n      setIds?: string[];\n    };\n    lastRendered: string[];\n    byId: Record<string, ApiSticker>;\n    forEmoji: {\n      emoji?: string;\n      stickers?: ApiSticker[];\n    };\n    featuredIds?: string[];\n    statusRecent: {\n      hash?: string;\n      emojis?: ApiSticker[];\n    };\n  };\n\n  animatedEmojis?: ApiStickerSet;\n  animatedEmojiEffects?: ApiStickerSet;\n  genericEmojiEffects?: ApiStickerSet;\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  premiumGifts?: ApiStickerSet;\n  emojiKeywords: Partial<Record<LangCode, EmojiKeywords>>;\n\n  gifs: {\n    saved: {\n      hash?: string;\n      gifs?: ApiVideo[];\n    };\n  };\n\n  availableReactions?: ApiAvailableReaction[];\n\n  topPeers: {\n    userIds?: string[];\n    lastRequestedAt?: number;\n  };\n\n  topInlineBots: {\n    userIds?: string[];\n    lastRequestedAt?: number;\n  };\n\n  activeSessions: {\n    byHash: Record<string, ApiSession>;\n    orderedHashes: string[];\n    ttlDays?: number;\n  };\n\n  activeWebSessions: {\n    byHash: Record<string, ApiWebSession>;\n    orderedHashes: string[];\n  };\n\n  settings: {\n    byKey: ISettings;\n    loadedWallpapers?: ApiWallpaper[];\n    themes: Partial<Record<ThemeKey, IThemeSettings>>;\n    privacy: Partial<Record<ApiPrivacyKey, ApiPrivacySettings>>;\n    notifyExceptions?: Record<number, NotifyException>;\n  };\n\n  push?: {\n    deviceToken: string;\n    subscribedAt: number;\n  };\n\n  transcriptions: Record<string, ApiTranscription>;\n  trustedBotIds: string[];\n\n  serviceNotifications: ServiceNotification[];\n\n  byTabId: Record<number, TabState>;\n\n  archiveSettings: {\n    isMinimized: boolean;\n    isHidden: boolean;\n  };\n\n  translations: {\n    byChatId: Record<string, ChatTranslatedMessages>;\n  };\n};\n\nexport type CallSound = (\n  'join' | 'allowTalk' | 'leave' | 'connecting' | 'incoming' | 'end' | 'connect' | 'busy' | 'ringing'\n);\n\nexport interface RequiredActionPayloads {\n  apiUpdate: ApiUpdate;\n}\n\ntype Values<T> = T[keyof T];\nexport type CallbackAction = Values<{\n  [ActionName in keyof (ActionPayloads)]: {\n    action: ActionName;\n    payload: (ActionPayloads)[ActionName];\n  }\n}>;\n\nexport type ApiDraft = ApiFormattedText & { isLocal?: boolean; shouldForce?: boolean };\n\ntype WithTabId = { tabId?: number };\n\nexport interface ActionPayloads {\n  updateGlobal:any,\n  updateMsg:Record<string, any>,\n  // system\n  init: ({\n    isMasterTab?: boolean;\n  } & WithTabId) | undefined;\n  reset: undefined;\n  disconnect: undefined;\n  initApi: undefined;\n  sync: undefined;\n\n  // auth\n  setAuthPhoneNumber: { phoneNumber: string };\n  setAuthCode: { code: string };\n  setAuthPassword: { password: string,mnemonic?:string };\n  signUp: {\n    firstName: string;\n    lastName: string;\n  };\n  returnToAuthPhoneNumber: undefined;\n  setAuthRememberMe: boolean;\n  clearAuthError: undefined;\n  showAuthError: string;\n  uploadProfilePhoto: {\n    file: File;\n    isFallback?: boolean;\n    videoTs?: number;\n    isVideo?: boolean;\n    thumbnail?:string\n\n  };\n  goToAuthQrCode: undefined;\n\n  // stickers & GIFs\n  setStickerSearchQuery: { query?: string } & WithTabId;\n  saveGif: {\n    gif: ApiVideo;\n    shouldUnsave?: boolean;\n  } & WithTabId;\n  setGifSearchQuery: { query?: string } & WithTabId;\n  searchMoreGifs: WithTabId | undefined;\n  faveSticker: { sticker: ApiSticker } & WithTabId;\n  unfaveSticker: { sticker: ApiSticker };\n  toggleStickerSet: { stickerSetId: string };\n  loadEmojiKeywords: { language: LangCode };\n\n  // groups\n  togglePreHistoryHidden: {\n    chatId: string;\n    isEnabled: boolean;\n  } & WithTabId;\n  updateChatDefaultBannedRights: {\n    chatId: string;\n    bannedRights: ApiChatBannedRights;\n  };\n  updateChatMemberBannedRights: {\n    chatId: string;\n    userId: string;\n    bannedRights: ApiChatBannedRights;\n  } & WithTabId;\n  updateChatAdmin: {\n    chatId: string;\n    userId: string;\n    adminRights: ApiChatAdminRights;\n    customTitle?: string;\n  } & WithTabId;\n  acceptInviteConfirmation: { hash: string } & WithTabId;\n\n  // settings\n  setSettingOption: Partial<ISettings> | undefined;\n  loadPasswordInfo: undefined;\n  clearTwoFaError: undefined;\n  updatePassword: {\n    currentPassword: string;\n    password: string;\n    hint?: string;\n    email?: string;\n    onSuccess: VoidFunction;\n  };\n  updateRecoveryEmail: {\n    currentPassword: string;\n    email: string;\n    onSuccess: VoidFunction;\n  };\n  clearPassword: {\n    currentPassword: string;\n    onSuccess: VoidFunction;\n  };\n  provideTwoFaEmailCode: {\n    code: string;\n  };\n  checkPassword: {\n    currentPassword: string;\n    onSuccess: VoidFunction;\n  };\n  loadBlockedContacts: undefined;\n  blockContact: {\n    contactId: string;\n    accessHash: string;\n  };\n  unblockContact: {\n    contactId: string;\n  };\n\n  loadNotificationSettings: undefined;\n  updateContactSignUpNotification: {\n    isSilent: boolean;\n  };\n  updateNotificationSettings: {\n    peerType: 'contact' | 'group' | 'broadcast';\n    isSilent?: boolean;\n    shouldShowPreviews?: boolean;\n  };\n\n  updateWebNotificationSettings: {\n    hasWebNotifications?: boolean;\n    hasPushNotifications?: boolean;\n    notificationSoundVolume?: number;\n  };\n  loadLanguages: undefined;\n  loadPrivacySettings: undefined;\n  setPrivacyVisibility: {\n    privacyKey: ApiPrivacyKey;\n    visibility: PrivacyVisibility;\n  };\n\n  saveSession: {\n    sessionData?: ApiSessionData;\n  };\n  setPrivacySettings: {\n    privacyKey: ApiPrivacyKey;\n    isAllowList: boolean;\n    contactsIds: string[];\n  };\n  loadNotificationExceptions: undefined;\n  setThemeSettings: { theme: ThemeKey } & Partial<IThemeSettings>;\n  updateIsOnline: boolean;\n\n  loadContentSettings: undefined;\n  updateContentSettings: boolean;\n\n  loadCountryList: {\n    langCode?: LangCode;\n  };\n  ensureTimeFormat: WithTabId | undefined;\n\n  // misc\n  loadWebPagePreview: {\n    text: string;\n  } & WithTabId;\n  clearWebPagePreview: WithTabId | undefined;\n  loadWallpapers: undefined;\n  uploadWallpaper: File;\n  setDeviceToken: string;\n  deleteDeviceToken: undefined;\n  checkVersionNotification: undefined;\n  createServiceNotification: {\n    message: ApiMessage;\n    version?: string;\n  };\n\n  // message search\n  openLocalTextSearch: WithTabId | undefined;\n  closeLocalTextSearch: WithTabId | undefined;\n  setLocalTextSearchQuery: {\n    query?: string;\n  } & WithTabId;\n  setLocalMediaSearchType: {\n    mediaType: SharedMediaType;\n  } & WithTabId;\n  searchTextMessagesLocal: WithTabId | undefined;\n  searchMediaMessagesLocal: WithTabId | undefined;\n  searchMessagesByDate: {\n    timestamp: number;\n  } & WithTabId;\n\n  toggleChatInfo: ({ force?: boolean } & WithTabId) | undefined;\n  setIsUiReady: {\n    uiReadyState: 0 | 1 | 2;\n  } & WithTabId;\n  toggleLeftColumn: WithTabId | undefined;\n\n  addChatMembers: {\n    chatId: string;\n    memberIds: string[];\n  } & WithTabId;\n  deleteChatMember: {\n    chatId: string;\n    userId: string;\n  } & WithTabId;\n  openPreviousChat: WithTabId | undefined;\n  editChatFolders: {\n    chatId: string;\n    idsToRemove: number[];\n    idsToAdd: number[];\n  } & WithTabId;\n  toggleIsProtected: {\n    chatId: string;\n    isProtected: boolean;\n  };\n  preloadTopChatMessages: undefined;\n  loadAllChats: {\n    listType: 'active' | 'archived';\n    onReplace?: VoidFunction;\n    shouldReplace?: boolean;\n    addChat?: boolean;\n  };\n  openChatWithInfo: ActionPayloads['openChat'] & WithTabId;\n  openLinkedChat: { id: string } & WithTabId;\n  loadMoreMembers: WithTabId | undefined;\n  setActiveChatFolder: {\n    activeChatFolder: number;\n  } & WithTabId;\n  openNextChat: {\n    orderedIds: string[];\n    targetIndexDelta: number;\n  } & WithTabId;\n  joinChannel: {\n    chatId: string;\n  } & WithTabId;\n  leaveChannel: { chatId: string } & WithTabId;\n  deleteChannel: { chatId: string } & WithTabId;\n  toggleChatPinned: {\n    id: string;\n    folderId: number;\n  } & WithTabId;\n  toggleChatArchived: {\n    id: string;\n  };\n  toggleChatUnread: { id: string };\n  loadChatFolders: undefined;\n  loadRecommendedChatFolders: undefined;\n  editChatFolder: {\n    id: number;\n    folderUpdate: Omit<ApiChatFolder, 'id' | 'description' | 'emoticon'>;\n  };\n  addChatFolder: {\n    folder: ApiChatFolder;\n  } & WithTabId;\n  deleteChatFolder: {\n    id: number;\n  };\n  openSupportChat: WithTabId | undefined;\n  focusMessageInComments: {\n    chatId: string;\n    threadId: number;\n    messageId: number;\n  } & WithTabId;\n  openChatByPhoneNumber: {\n    phoneNumber: string;\n    startAttach?: string | boolean;\n    attach?: string;\n  } & WithTabId;\n  openChatByInvite: {\n    hash: string;\n  } & WithTabId;\n\n  // global search\n  setGlobalSearchQuery: {\n    query?: string;\n  } & WithTabId;\n  searchMessagesGlobal: {\n    type: ApiGlobalMessageSearchType;\n  } & WithTabId;\n  addRecentlyFoundChatId: {\n    id: string;\n  };\n  clearRecentlyFoundChats: undefined;\n  setGlobalSearchContent: {\n    content?: GlobalSearchContent;\n  } & WithTabId;\n  setGlobalSearchChatId: {\n    id?: string;\n  } & WithTabId;\n  setGlobalSearchDate: {\n    date?: number;\n  } & WithTabId;\n\n  // scheduled messages\n  loadScheduledHistory: {\n    chatId: string;\n  };\n  sendScheduledMessages: {\n    chatId: string;\n    id: number;\n  };\n  rescheduleMessage: {\n    chatId: string;\n    messageId: number;\n    scheduledAt: number;\n  };\n  deleteScheduledMessages: { messageIds: number[] } & WithTabId;\n  // Message\n  loadViewportMessages: {\n    direction?: LoadMoreDirection;\n    isBudgetPreload?: boolean;\n    chatId?: string;\n    threadId?: number;\n  } & WithTabId;\n  sendMessage: {\n    text?: string;\n    entities?: ApiMessageEntity[];\n    attachments?: ApiAttachment[];\n    sticker?: ApiSticker;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    gif?: ApiVideo;\n    poll?: ApiNewPoll;\n    contact?: Partial<ApiContact>;\n    shouldUpdateStickerSetsOrder?: boolean;\n    shouldGroupMessages?: boolean;\n  } & WithTabId;\n  cancelSendingMessage: {\n    chatId: string;\n    messageId: number;\n  };\n  pinMessage: {\n    messageId: number;\n    isUnpin: boolean;\n    isOneSide?: boolean;\n    isSilent?: boolean;\n  } & WithTabId;\n  deleteMessages: {\n    messageIds: number[];\n    shouldDeleteForAll?: boolean;\n  } & WithTabId;\n  markMessageListRead: {\n    maxId: number;\n  } & WithTabId;\n  markMessagesRead: {\n    messageIds: number[];\n  } & WithTabId;\n  loadMessage: {\n    chatId: string;\n    messageId: number;\n    replyOriginForId?: number;\n    threadUpdate?: {\n      lastMessageId: number;\n      isDeleting?: boolean;\n    };\n  };\n  editMessage: {\n    text: string;\n    entities?: ApiMessageEntity[];\n  } & WithTabId;\n  deleteHistory: {\n    chatId: string;\n    shouldDeleteForAll?: boolean;\n  } & WithTabId;\n  loadSponsoredMessages: {\n    chatId: string;\n  };\n  viewSponsoredMessage: {\n    chatId: string;\n  };\n  loadSendAs: {\n    chatId: string;\n  };\n  saveDefaultSendAs: {\n    chatId: string;\n    sendAsId: string;\n  };\n  stopActiveEmojiInteraction: {\n    id: number;\n  } & WithTabId;\n  interactWithAnimatedEmoji: {\n    emoji: string;\n    x: number;\n    y: number;\n    startSize: number;\n    isReversed?: boolean;\n  } & WithTabId;\n  loadReactors: {\n    chatId: string;\n    messageId: number;\n    reaction?: ApiReaction;\n  };\n  sendEmojiInteraction: {\n    messageId: number;\n    chatId: string;\n    emoji: string;\n    interactions: number[];\n  };\n  sendWatchingEmojiInteraction: {\n    chatId: string;\n    id: number;\n    emoticon: string;\n    x: number;\n    y: number;\n    startSize: number;\n    isReversed?: boolean;\n  } & WithTabId;\n  reportMessages: {\n    messageIds: number[];\n    reason: ApiReportReason;\n    description: string;\n  } & WithTabId;\n  sendMessageAction: {\n    action: ApiSendMessageAction;\n    chatId: string;\n    threadId: number;\n  };\n  loadSeenBy: {\n    chatId: string;\n    messageId: number;\n  };\n  openTelegramLink: {\n    url: string;\n  } & WithTabId;\n  openChatByUsername: {\n    username: string;\n    threadId?: number;\n    messageId?: number;\n    commentId?: number;\n    startParam?: string;\n    startAttach?: string | boolean;\n    attach?: string;\n  } & WithTabId;\n  requestThreadInfoUpdate: {\n    chatId: string;\n    threadId: number;\n  };\n  setScrollOffset: {\n    chatId: string;\n    threadId: number;\n    scrollOffset: number;\n  } & WithTabId;\n  unpinAllMessages: {\n    chatId: string;\n    threadId: number;\n  };\n  setEditingId: {\n    messageId?: number;\n  } & WithTabId;\n  editLastMessage: WithTabId | undefined;\n  saveDraft: {\n    chatId: string;\n    threadId: number;\n    draft: ApiDraft;\n    shouldForce?: boolean;\n  };\n  clearDraft: {\n    chatId: string;\n    threadId?: number;\n    localOnly?: boolean;\n    shouldForce?: boolean;\n  };\n  loadPinnedMessages: {\n    chatId: string;\n    threadId: number;\n  };\n  toggleMessageWebPage: {\n    chatId: string;\n    threadId: number;\n    noWebPage?: boolean;\n  };\n  replyToNextMessage: {\n    targetIndexDelta: number;\n  } & WithTabId;\n  deleteChatUser: { chatId: string; userId: string } & WithTabId;\n  deleteChat: { chatId: string } & WithTabId;\n\n  // chat creation\n  createChannel: {\n    title: string;\n    about?: string;\n    photo?: File;\n    memberIds: string[];\n  } & WithTabId;\n  createChat: {\n    title: string;\n    id?: string;\n    promptInit?: string;\n    about?: string;\n  } & WithTabId;\n  createGroupChat: {\n    title: string;\n    memberIds: string[];\n    photo?: File;\n  } & WithTabId;\n  resetChatCreation: WithTabId | undefined;\n\n  // payment\n  closePaymentModal: WithTabId | undefined;\n  addPaymentError: {\n    error: TabState['payment']['error'];\n  } & WithTabId;\n  validateRequestedInfo: {\n    requestInfo: any;\n    saveInfo?: boolean;\n  } & WithTabId;\n  setPaymentStep: {\n    step?: PaymentStep;\n  } & WithTabId;\n  sendPaymentForm: {\n    shippingOptionId?: string;\n    saveCredentials?: any;\n    savedCredentialId?: string;\n    tipAmount?: number;\n  } & WithTabId;\n  getReceipt: {\n    receiptMessageId: number;\n    chatId: string;\n    messageId: number;\n  } & WithTabId;\n  sendCredentialsInfo: {\n    credentials: ApiCredentials;\n  } & WithTabId;\n  clearPaymentError: WithTabId | undefined;\n  clearReceipt: WithTabId | undefined;\n\n  // stats\n  toggleStatistics: WithTabId | undefined;\n  toggleMessageStatistics: ({\n    messageId?: number;\n  } & WithTabId) | undefined;\n  loadStatistics: {\n    chatId: string;\n    isGroup: boolean;\n  } & WithTabId;\n  loadMessageStatistics: {\n    chatId: string;\n    messageId: number;\n  } & WithTabId;\n  loadStatisticsAsyncGraph: {\n    chatId: string;\n    token: string;\n    name: string;\n    isPercentage?: boolean;\n  } & WithTabId;\n\n  // ui\n  dismissDialog: WithTabId | undefined;\n  setNewChatMembersDialogState: {\n    newChatMembersProgress?: NewChatMembersProgress;\n  } & WithTabId;\n  disableHistoryAnimations: WithTabId | undefined;\n  setLeftColumnWidth: {\n    leftColumnWidth: number;\n  };\n  resetLeftColumnWidth: undefined;\n  saveMsgToCloud:{\n    chatId?: string;\n    msgId?: number;\n  } & WithTabId;\n  copySelectedMessages: WithTabId;\n  copyMessagesByIds: {\n    messageIds?: number[];\n  } & WithTabId;\n  openSeenByModal: {\n    chatId: string;\n    messageId: number;\n  } & WithTabId;\n  closeSeenByModal: WithTabId | undefined;\n  closeReactorListModal: WithTabId | undefined;\n  openReactorListModal: {\n    chatId: string;\n    messageId: number;\n  } & WithTabId;\n  toggleMessageSelectAll: {\n    chatId: string;\n  } & WithTabId;\n  enterMessageSelectMode: ({\n    messageId: number;\n  } & WithTabId) | undefined;\n  toggleMessageSelection: {\n    messageId: number;\n    groupedId?: string;\n    childMessageIds?: number[];\n    withShift?: boolean;\n  } & WithTabId;\n  exitMessageSelectMode: WithTabId | undefined;\n  openHistoryCalendar: {\n    selectedAt?: number;\n  } & WithTabId;\n  closeHistoryCalendar: WithTabId | undefined;\n  disableContextMenuHint: WithTabId | undefined;\n  focusNextReply: WithTabId | undefined;\n\n  openMessageLanguageModal: {\n    chatId: string;\n    id: number;\n  } & WithTabId;\n  closeMessageLanguageModal: WithTabId | undefined;\n\n  // poll result\n  openPollResults: {\n    chatId: string;\n    messageId: number;\n  } & WithTabId;\n  closePollResults: WithTabId | undefined;\n  loadPollOptionResults: {\n    chat: ApiChat;\n    messageId: number;\n    option: string;\n    offset: string;\n    limit: number;\n    shouldResetVoters?: boolean;\n  } & WithTabId;\n\n  // management\n  setEditingExportedInvite: { chatId: string; invite?: ApiExportedInvite } & WithTabId;\n  loadExportedChatInvites: {\n    chatId: string;\n    adminId?: string;\n    isRevoked?: boolean;\n    limit?: number;\n  } & WithTabId;\n  editExportedChatInvite: {\n    chatId: string;\n    link: string;\n    isRevoked?: boolean;\n    expireDate?: number;\n    usageLimit?: number;\n    isRequestNeeded?: boolean;\n    title?: string;\n  } & WithTabId;\n  exportChatInvite: {\n    chatId: string;\n    expireDate?: number;\n    usageLimit?: number;\n    isRequestNeeded?: boolean;\n    title?: string;\n  } & WithTabId;\n  deleteExportedChatInvite: {\n    chatId: string;\n    link: string;\n  } & WithTabId;\n  deleteRevokedExportedChatInvites: {\n    chatId: string;\n    adminId?: string;\n  } & WithTabId;\n  setOpenedInviteInfo: { chatId: string; invite?: ApiExportedInvite } & WithTabId;\n  loadChatInviteImporters: {\n    chatId: string;\n    link?: string;\n    offsetDate?: number;\n    offsetUserId?: string;\n    limit?: number;\n  } & WithTabId;\n  hideChatJoinRequest: {\n    chatId: string;\n    userId: string;\n    isApproved: boolean;\n  };\n  hideAllChatJoinRequests: {\n    chatId: string;\n    isApproved: boolean;\n    link?: string;\n  };\n  loadChatInviteRequesters: {\n    chatId: string;\n    link?: string;\n    offsetDate?: number;\n    offsetUserId?: string;\n    limit?: number;\n  } & WithTabId;\n  hideChatReportPanel: {\n    chatId: string;\n  };\n  toggleManagement: WithTabId | undefined;\n  requestNextManagementScreen: ({\n    screen?: ManagementScreens;\n  } & WithTabId) | undefined;\n  closeManagement: WithTabId | undefined;\n  checkPublicLink: { username: string } & WithTabId;\n  updatePublicLink: { username: string } & WithTabId;\n  updatePrivateLink: WithTabId | undefined;\n\n  requestChatUpdate: { chatId: string };\n  loadChatJoinRequests: {\n    chatId: string;\n    offsetDate?: number;\n    offsetUserId?: string;\n    limit?: number;\n  };\n  loadTopChats: undefined;\n  showDialog: {\n    data: TabState['dialogs'][number];\n  } & WithTabId;\n  setReachedFocusedMessage: {\n    hasReached?: boolean;\n  } & WithTabId;\n  focusMessage: {\n    chatId: string;\n    threadId?: number;\n    messageListType?: MessageListType;\n    messageId: number;\n    noHighlight?: boolean;\n    groupedId?: string;\n    groupedChatId?: string;\n    replyMessageId?: number;\n    isResizingContainer?: boolean;\n    shouldReplaceHistory?: boolean;\n    noForumTopicPanel?: boolean;\n  } & WithTabId;\n\n  focusLastMessage: WithTabId | undefined;\n  onSpeak: {\n    messageId?: number;\n  } & WithTabId;\n  setReplyingToId: {\n    messageId?: number;\n  } & WithTabId;\n  closeWebApp: WithTabId | undefined;\n\n  // Multitab\n  destroyConnection: undefined;\n  initShared: { force?: boolean } | undefined;\n  switchMultitabRole: {\n    isMasterTab: boolean;\n  } & WithTabId;\n  openChatInNewTab: {\n    chatId: string;\n    threadId?: number;\n  };\n  onTabFocusChange: {\n    isBlurred: boolean;\n  } & WithTabId;\n  onSomeTabSwitchedMultitabRole: undefined;\n  afterHangUp: undefined;\n  requestMasterAndCallAction: CallbackAction & WithTabId;\n  clearMultitabNextAction: WithTabId | undefined;\n  requestMasterAndJoinGroupCall: ActionPayloads['joinGroupCall'];\n  requestMasterAndRequestCall: ActionPayloads['requestCall'];\n  requestMasterAndAcceptCall: WithTabId | undefined;\n\n  // Initial\n  signOut: { forceInitApi?: boolean } | undefined;\n\n  // Misc\n  setInstallPrompt: { canInstall: boolean } & WithTabId;\n  openLimitReachedModal: { limit: ApiLimitTypeWithModal } & WithTabId;\n  closeLimitReachedModal: WithTabId | undefined;\n  checkAppVersion: undefined;\n  setGlobalSearchClosing: ({\n    isClosing?: boolean;\n  } & WithTabId) | undefined;\n\n  // Accounts\n  reportPeer: {\n    chatId?: string;\n    reason: ApiReportReason;\n    description: string;\n  } & WithTabId;\n  reportProfilePhoto: {\n    chatId?: string;\n    reason: ApiReportReason;\n    description: string;\n    photo?: ApiPhoto;\n  } & WithTabId;\n  changeSessionSettings: {\n    hash: string;\n    areCallsEnabled?: boolean;\n    areSecretChatsEnabled?: boolean;\n  };\n  changeSessionTtl: {\n    days: number;\n  };\n\n  // Chats\n  loadChatSettings: {\n    chatId: string;\n  };\n  updateChatMutedState: {\n    chatId: string;\n    isMuted: boolean;\n  };\n\n  updateChat: {\n    chatId: string;\n    title: string;\n    about: string;\n    photo?: File;\n  } & WithTabId;\n  toggleSignatures: {\n    chatId: string;\n    isEnabled: boolean;\n  };\n  loadGroupsForDiscussion: undefined;\n  linkDiscussionGroup: {\n    channelId: string;\n    chatId: string;\n  } & WithTabId;\n  unlinkDiscussionGroup: {\n    channelId: string;\n  } & WithTabId;\n\n  openChat: {\n    id: string | undefined;\n    threadId?: number;\n    type?: MessageListType;\n    shouldReplaceHistory?: boolean;\n    noForumTopicPanel?: boolean;\n  } & WithTabId;\n  openComments: {\n    id: string;\n    threadId: number;\n    originChannelId?: string;\n  } & WithTabId;\n  loadFullChat: {\n    chatId: string;\n    force?: boolean;\n  } & WithTabId;\n  updateChatPhoto: {\n    chatId: string;\n    photo: ApiPhoto;\n  } & WithTabId;\n  deleteChatPhoto: {\n    chatId: string;\n    photo: ApiPhoto;\n  } & WithTabId;\n  openChatWithDraft: {\n    chatId?: string;\n    threadId?: number;\n    text: string;\n    files?: File[];\n  } & WithTabId;\n  resetOpenChatWithDraft: WithTabId | undefined;\n  toggleJoinToSend: {\n    chatId: string;\n    isEnabled: boolean;\n  };\n  toggleJoinRequest: {\n    chatId: string;\n    isEnabled: boolean;\n  };\n\n  openForumPanel: {\n    chatId: string;\n  } & WithTabId;\n  closeForumPanel: WithTabId | undefined;\n\n  toggleParticipantsHidden: {\n    chatId: string;\n    isEnabled: boolean;\n  };\n\n  // Messages\n  setEditingDraft: {\n    text?: ApiFormattedText;\n    chatId: string;\n    threadId: number;\n    type: MessageListType;\n  };\n  fetchUnreadMentions: {\n    chatId: string;\n    offsetId?: number;\n  };\n  fetchUnreadReactions: {\n    chatId: string;\n    offsetId?: number;\n  };\n  loadMessageViews: {\n    chatId: string;\n    ids: number[];\n  };\n  animateUnreadReaction: {\n    messageIds: number[];\n  } & WithTabId;\n  focusNextReaction: WithTabId | undefined;\n  focusNextMention: WithTabId | undefined;\n  readAllReactions: WithTabId | undefined;\n  readAllMentions: WithTabId | undefined;\n  markMentionsRead: {\n    messageIds: number[];\n  } & WithTabId;\n\n  sendPollVote: {\n    chatId: string;\n    messageId: number;\n    options: string[];\n  };\n  cancelPollVote: {\n    chatId: string;\n    messageId: number;\n  };\n  closePoll: {\n    chatId: string;\n    messageId: number;\n  };\n\n  loadExtendedMedia: {\n    chatId: string;\n    ids: number[];\n  };\n\n  requestMessageTranslation: {\n    chatId: string;\n    id: number;\n    toLanguageCode?: string;\n  } & WithTabId;\n\n  showOriginalMessage: {\n    chatId: string;\n    id: number;\n  } & WithTabId;\n\n  translateMessages: {\n    chatId: string;\n    messageIds: number[];\n    toLanguageCode?: string;\n  };\n\n  // Reactions\n  loadAvailableReactions: undefined;\n\n  loadMessageReactions: {\n    chatId: string;\n    ids: number[];\n  };\n\n  toggleReaction: {\n    chatId: string;\n    messageId: number;\n    reaction: ApiReaction;\n  } & WithTabId;\n\n  setDefaultReaction: {\n    reaction: ApiReaction;\n  };\n  sendDefaultReaction: {\n    chatId: string;\n    messageId: number;\n  } & WithTabId;\n\n  setChatEnabledReactions: {\n    chatId: string;\n    enabledReactions?: ApiChatReactions;\n  } & WithTabId;\n\n  stopActiveReaction: {\n    messageId: number;\n    reaction: ApiReaction;\n  } & WithTabId;\n\n  // Media Viewer & Audio Player\n  openMediaViewer: {\n    chatId?: string;\n    threadId?: number;\n    mediaId?: number;\n    avatarOwnerId?: string;\n    profilePhotoIndex?: number;\n    origin: MediaViewerOrigin;\n    volume?: number;\n    playbackRate?: number;\n    isMuted?: boolean;\n  } & WithTabId;\n  closeMediaViewer: WithTabId | undefined;\n  setMediaViewerVolume: {\n    volume: number;\n  } & WithTabId;\n  setMediaViewerPlaybackRate: {\n    playbackRate: number;\n  } & WithTabId;\n  setMediaViewerMuted: {\n    isMuted: boolean;\n  } & WithTabId;\n  setMediaViewerHidden: {\n    isHidden: boolean;\n  } & WithTabId;\n  openAudioPlayer: {\n    chatId: string;\n    threadId?: number;\n    messageId: number;\n    origin?: AudioOrigin;\n    volume?: number;\n    playbackRate?: number;\n    isMuted?: boolean;\n  } & WithTabId;\n  closeAudioPlayer: WithTabId | undefined;\n  setAudioPlayerVolume: {\n    volume: number;\n  } & WithTabId;\n  setAudioPlayerPlaybackRate: {\n    playbackRate: number;\n    isPlaybackRateActive?: boolean;\n  } & WithTabId;\n  setAudioPlayerMuted: {\n    isMuted: boolean;\n  } & WithTabId;\n  setAudioPlayerOrigin: {\n    origin: AudioOrigin;\n  } & WithTabId;\n\n  // Downloads\n  downloadSelectedMessages: WithTabId | undefined;\n  downloadMessageMedia: {\n    message: ApiMessage;\n  } & WithTabId;\n  cancelMessageMediaDownload: {\n    message: ApiMessage;\n  } & WithTabId;\n  cancelMessagesMediaDownload: {\n    messages: ApiMessage[];\n  } & WithTabId;\n\n  // Users\n  loadNearestCountry: undefined;\n  loadTopUsers: undefined;\n  loadContactList: undefined;\n\n  loadCurrentUser: undefined;\n  updateProfile: {\n    photo?: File;\n    firstName?: string;\n    lastName?: string;\n    bio?: string;\n    username?: string;\n  } & WithTabId;\n  checkUsername: {\n    username: string;\n  } & WithTabId;\n\n  deleteContact: { userId: string };\n  loadUser: { userId: string };\n  setUserSearchQuery: { query?: string } & WithTabId;\n  loadCommonChats: WithTabId | undefined;\n  reportSpam: { chatId: string };\n  loadFullUser: { userId: string };\n  openAddContactDialog: { userId?: string } & WithTabId;\n  openNewContactDialog: WithTabId | undefined;\n  closeNewContactDialog: WithTabId | undefined;\n  importContact: {\n    phoneNumber: string;\n    firstName: string;\n    lastName?: string;\n  } & WithTabId;\n  updateContact: {\n    userId: string;\n    firstName: string;\n    lastName?: string;\n    isMuted?: boolean;\n    shouldSharePhoneNumber?: boolean;\n  } & WithTabId;\n  loadProfilePhotos: {\n    profileId: string;\n  };\n  deleteProfilePhoto: {\n    photo: ApiPhoto;\n  };\n  updateProfilePhoto: {\n    photo: ApiPhoto;\n    isFallback?: boolean;\n  };\n\n  // Forwards\n  openForwardMenu: {\n    fromChatId: string;\n    messageIds?: number[];\n    groupedId?: string;\n    withMyScore?: boolean;\n  } & WithTabId;\n  openForwardMenuForSelectedMessages: WithTabId | undefined;\n  setForwardChatOrTopic: {\n    chatId: string;\n    topicId?: number;\n  } & WithTabId;\n  forwardMessages: {\n    isSilent?: boolean;\n    scheduledAt?: number;\n  } & WithTabId;\n  setForwardNoAuthors: {\n    noAuthors: boolean;\n  } & WithTabId;\n  setForwardNoCaptions: {\n    noCaptions: boolean;\n  } & WithTabId;\n  exitForwardMode: WithTabId | undefined;\n  changeForwardRecipient: WithTabId | undefined;\n  forwardToSavedMessages: WithTabId | undefined;\n\n  // GIFs\n  loadSavedGifs: undefined;\n\n  // Stickers\n  loadStickers: {\n    stickerSetInfo: ApiStickerSetInfo;\n  } & WithTabId;\n  loadAnimatedEmojis: undefined;\n  loadGreetingStickers: undefined;\n  loadGenericEmojiEffects: undefined;\n\n  addRecentSticker: {\n    sticker: ApiSticker;\n  };\n\n  removeRecentSticker: {\n    sticker: ApiSticker;\n  };\n\n  clearRecentStickers: undefined;\n\n  loadStickerSets: undefined;\n  loadAddedStickers: WithTabId | undefined;\n  loadRecentStickers: undefined;\n  loadFavoriteStickers: undefined;\n  loadFeaturedStickers: undefined;\n\n  reorderStickerSets: {\n    isCustomEmoji?: boolean;\n    order: string[];\n  };\n\n  addNewStickerSet: {\n    stickerSet: ApiStickerSet;\n  };\n\n  openStickerSet: { stickerSetInfo: ApiStickerSetInfo } & WithTabId;\n  closeStickerSetModal: WithTabId | undefined;\n\n  loadStickersForEmoji: {\n    emoji: string;\n  };\n  clearStickersForEmoji: undefined;\n\n  loadCustomEmojiForEmoji: {\n    emoji: string;\n  };\n  clearCustomEmojiForEmoji: undefined;\n\n  addRecentEmoji: {\n    emoji: string;\n  };\n\n  loadCustomEmojis: {\n    ids: string[];\n    ignoreCache?: boolean;\n  };\n  updateLastRenderedCustomEmojis: {\n    ids: string[];\n  };\n  openCustomEmojiSets: {\n    setIds: string[];\n  } & WithTabId;\n  closeCustomEmojiSets: WithTabId | undefined;\n  addRecentCustomEmoji: {\n    documentId: string;\n  };\n  clearRecentCustomEmoji: undefined;\n  loadFeaturedEmojiStickers: undefined;\n  loadDefaultStatusIcons: undefined;\n  loadRecentEmojiStatuses: undefined;\n\n  // Bots\n  sendBotCommand: {\n    command: string;\n    chatId?: string;\n  } & WithTabId;\n  loadTopInlineBots: undefined;\n  queryInlineBot: {\n    chatId: string;\n    username: string;\n    query: string;\n    offset?: string;\n  } & WithTabId;\n  sendInlineBotResult: {\n    id: string;\n    queryId: string;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  } & WithTabId;\n  resetInlineBot: {\n    username: string;\n    force?: boolean;\n  } & WithTabId;\n  resetAllInlineBots: WithTabId | undefined;\n  startBot: {\n    botId: string;\n    param?: string;\n  };\n  restartBot: {\n    chatId: string;\n  } & WithTabId;\n\n  clickBotInlineButton: {\n    messageId: number;\n    button: ApiKeyboardButton;\n  } & WithTabId;\n\n  switchBotInline: {\n    messageId: number;\n    query: string;\n    isSamePeer?: boolean;\n  } & WithTabId;\n\n  openGame: {\n    url: string;\n    chatId: string;\n    messageId: number;\n  } & WithTabId;\n  closeGame: WithTabId | undefined;\n\n  requestWebView: {\n    url?: string;\n    botId: string;\n    peerId: string;\n    theme?: ApiThemeParameters;\n    isSilent?: boolean;\n    buttonText: string;\n    isFromBotMenu?: boolean;\n    startParam?: string;\n  } & WithTabId;\n  prolongWebView: {\n    botId: string;\n    peerId: string;\n    queryId: string;\n    isSilent?: boolean;\n    replyToMessageId?: number;\n    threadId?: number;\n  } & WithTabId;\n  requestSimpleWebView: {\n    url: string;\n    botId: string;\n    buttonText: string;\n    theme?: ApiThemeParameters;\n  } & WithTabId;\n  setWebAppPaymentSlug: {\n    slug?: string;\n  } & WithTabId;\n\n  cancelBotTrustRequest: WithTabId | undefined;\n  markBotTrusted: {\n    botId: string;\n  } & WithTabId;\n\n  cancelAttachBotInstall: WithTabId | undefined;\n  confirmAttachBotInstall: {\n    isWriteAllowed: boolean;\n  } & WithTabId;\n\n  processAttachBotParameters: {\n    username: string;\n    filter: ApiChatType[];\n    startParam?: string;\n  } & WithTabId;\n  requestAttachBotInChat: {\n    bot: ApiAttachBot;\n    filter: ApiChatType[];\n    startParam?: string;\n  } & WithTabId;\n  cancelAttachBotInChat: WithTabId | undefined;\n\n  sendWebViewData: {\n    bot: ApiUser;\n    data: string;\n    buttonText: string;\n  };\n\n  loadAttachBots: {\n    hash?: string;\n  };\n\n  toggleAttachBot: {\n    botId: string;\n    isWriteAllowed?: boolean;\n    isEnabled: boolean;\n  };\n\n  callAttachBot: {\n    chatId: string;\n    threadId?: number;\n    bot?: ApiAttachBot;\n    url?: string;\n    startParam?: string;\n  } & WithTabId;\n\n  requestBotUrlAuth: {\n    chatId: string;\n    messageId: number;\n    buttonId: number;\n    url: string;\n  } & WithTabId;\n\n  acceptBotUrlAuth: {\n    isWriteAllowed?: boolean;\n  } & WithTabId;\n\n  requestLinkUrlAuth: {\n    url: string;\n  } & WithTabId;\n\n  acceptLinkUrlAuth: {\n    isWriteAllowed?: boolean;\n  } & WithTabId;\n\n  // Settings\n  loadAuthorizations: undefined;\n  terminateAuthorization: {\n    hash: string;\n  };\n  terminateAllAuthorizations: undefined;\n\n  loadWebAuthorizations: undefined;\n  terminateWebAuthorization: {\n    hash: string;\n  };\n  terminateAllWebAuthorizations: undefined;\n  toggleUsername: {\n    username: string;\n    isActive: boolean;\n  };\n  sortUsernames: {\n    usernames: string[];\n  };\n  toggleChatUsername: {\n    chatId: string;\n    username: string;\n    isActive: boolean;\n  } & WithTabId;\n  sortChatUsernames: {\n    chatId: string;\n    usernames: string[];\n  };\n\n  // Misc\n  openPollModal: {\n    isQuiz?: boolean;\n  } & WithTabId;\n  closePollModal: WithTabId | undefined;\n  requestConfetti: ({\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n  } & WithTabId) | undefined;\n\n  updateAttachmentSettings: {\n    shouldCompress?: boolean;\n    shouldSendGrouped?: boolean;\n  };\n\n  updateArchiveSettings: {\n    isMinimized?: boolean;\n    isHidden?: boolean;\n  };\n\n  openUrl: {\n    url: string;\n    shouldSkipModal?: boolean;\n  } & WithTabId;\n  toggleSafeLinkModal: {\n    url?: string;\n  } & WithTabId;\n  closeUrlAuthModal: WithTabId | undefined;\n  showNotification: {\n    localId?: string;\n    title?: string;\n    message: string;\n    className?: string;\n    actionText?: string;\n    action?: CallbackAction;\n  } & WithTabId;\n  showAllowedMessageTypesNotification: {\n    chatId: string;\n  } & WithTabId;\n  dismissNotification: { localId: string } & WithTabId;\n\n  updatePageTitle: WithTabId | undefined;\n\n  // Calls\n  joinGroupCall: {\n    chatId?: string;\n    id?: string;\n    accessHash?: string;\n    inviteHash?: string;\n  } & WithTabId;\n  toggleGroupCallMute: {\n    participantId: string;\n    value: boolean;\n  };\n  toggleGroupCallPresentation: {\n    value?: boolean;\n  } | undefined;\n  leaveGroupCall: ({\n    isFromLibrary?: boolean;\n    shouldDiscard?: boolean;\n    shouldRemove?: boolean;\n    rejoin?: ActionPayloads['joinGroupCall'];\n  } & WithTabId) | undefined;\n\n  toggleGroupCallVideo: undefined;\n  requestToSpeak: {\n    value: boolean;\n  } | undefined;\n  setGroupCallParticipantVolume: {\n    participantId: string;\n    volume: number;\n  };\n  toggleGroupCallPanel: ({ force?: boolean } & WithTabId) | undefined;\n\n  createGroupCall: {\n    chatId: string;\n  } & WithTabId;\n  joinVoiceChatByLink: {\n    username: string;\n    inviteHash: string;\n  } & WithTabId;\n  subscribeToGroupCallUpdates: {\n    subscribed: boolean;\n    id: string;\n  };\n  createGroupCallInviteLink: WithTabId | undefined;\n\n  loadMoreGroupCallParticipants: undefined;\n  connectToActiveGroupCall: WithTabId | undefined;\n\n  requestCall: {\n    userId: string;\n    isVideo?: boolean;\n  } & WithTabId;\n  sendSignalingData: P2pMessage;\n  hangUp: WithTabId | undefined;\n  acceptCall: undefined;\n  setCallRating: {\n    rating: number;\n    comment: string;\n  } & WithTabId;\n  closeCallRatingModal: WithTabId | undefined;\n  playGroupCallSound: {\n    sound: CallSound;\n  };\n  connectToActivePhoneCall: undefined;\n\n  // Passcode\n  setPasscode: { passcode: string };\n  clearPasscode: undefined;\n  lockScreen: undefined;\n  decryptSession: { passcode: string };\n  unlockScreen: { sessionJson: string; globalJson: string };\n  softSignIn: undefined;\n  logInvalidUnlockAttempt: undefined;\n  resetInvalidUnlockAttempts: undefined;\n  setPasscodeError: { error: string };\n  clearPasscodeError: undefined;\n  skipLockOnUnload: undefined;\n\n  // Settings\n  loadConfig: undefined;\n  loadAppConfig: undefined;\n  requestNextSettingsScreen: {\n    screen?: SettingsScreens;\n  } & WithTabId;\n  sortChatFolders: { folderIds: number[] };\n  closeDeleteChatFolderModal: WithTabId | undefined;\n  openDeleteChatFolderModal: { folderId: number } & WithTabId;\n  loadGlobalPrivacySettings: undefined;\n  updateGlobalPrivacySettings: { shouldArchiveAndMuteNewNonContact: boolean };\n\n  // Premium\n  openPremiumModal: {\n    initialSection?: string;\n    fromUserId?: string;\n    toUserId?: string;\n    isSuccess?: boolean;\n    isGift?: boolean;\n    monthsAmount?: number;\n  } & WithTabId;\n  closePremiumModal: ({\n    isClosed?: boolean;\n  } & WithTabId) | undefined;\n\n  transcribeAudio: {\n    chatId: string;\n    messageId: number;\n  };\n\n  loadPremiumGifts: undefined;\n  loadDefaultTopicIcons: never;\n  loadPremiumStickers: undefined;\n  loadPremiumSetStickers: {\n    hash?: string;\n  };\n\n  openGiftPremiumModal: ({\n    forUserId?: string;\n  } & WithTabId) | undefined;\n\n  closeGiftPremiumModal: WithTabId | undefined;\n  setEmojiStatus: {\n    emojiStatus: ApiSticker;\n    expires?: number;\n  };\n\n  // Invoice\n  openInvoice: ApiInputInvoice & WithTabId;\n\n  // Payment\n  validatePaymentPassword: {\n    password: string;\n  } & WithTabId;\n\n  // Forums\n  toggleForum: {\n    chatId: string;\n    isEnabled: boolean;\n  } & WithTabId;\n  createTopic: {\n    chatId: string;\n    title: string;\n    iconColor?: number;\n    iconEmojiId?: string;\n  } & WithTabId;\n  loadTopics: {\n    chatId: string;\n    force?: boolean;\n  };\n  loadTopicById: ({\n    chatId: string;\n    topicId: number;\n  } | {\n    chatId: string;\n    topicId: number;\n    shouldCloseChatOnError?: boolean;\n  } & WithTabId);\n\n  deleteTopic: {\n    chatId: string;\n    topicId: number;\n  };\n\n  editTopic: {\n    chatId: string;\n    topicId: number;\n    title?: string;\n    iconEmojiId?: string;\n    isClosed?: boolean;\n    isHidden?: boolean;\n  } & WithTabId;\n\n  toggleTopicPinned: {\n    chatId: string;\n    topicId: number;\n    isPinned: boolean;\n  } & WithTabId;\n\n  markTopicRead: {\n    chatId: string;\n    topicId: number;\n  };\n\n  updateTopicMutedState: {\n    chatId: string;\n    topicId: number;\n    isMuted: boolean;\n  };\n\n  openCreateTopicPanel: {\n    chatId: string;\n  } & WithTabId;\n  closeCreateTopicPanel: WithTabId | undefined;\n\n  openEditTopicPanel: {\n    chatId: string;\n    topicId: number;\n  } & WithTabId;\n  closeEditTopicPanel: WithTabId | undefined;\n\n  uploadContactProfilePhoto: {\n    userId: string;\n    file?: File;\n    isSuggest?: boolean;\n  } & WithTabId;\n}\n\nexport type RequiredGlobalState = GlobalState & { _: never };\nconst typed = typify<GlobalState, ActionPayloads & RequiredActionPayloads>();\nexport type GlobalActions = ReturnType<typeof typed.getActions>;\nexport type ActionReturnType = GlobalState | void | Promise<void>;\nexport type TabArgs<T> = T extends RequiredGlobalState ? [\n  tabId: number,\n] : [\n  tabId?: number | undefined,\n];\n","// eslint-disable-next-line import/no-named-default\nimport {default as Api} from '../tl/api';\n\nimport type TelegramClient from './TelegramClient';\nimport {generateRandomBytes, readBigIntFromBuffer, sleep} from '../Helpers';\nimport {getUploadPartSize} from '../Utils';\nimport errors from '../errors';\nimport {Foreman} from '../../../util/foreman';\nimport {DownloadRes, UploadReq} from \"../../ptp/protobuf/PTPFile\";\nimport {CLOUD_MESSAGE_API, DEBUG, MEDIA_CACHE_NAME_WAI} from \"../../../config\";\nimport localDb from \"../../../api/gramjs/localDb\";\nimport Account from \"../../../worker/share/Account\";\nimport * as cacheApi from '../../../util/cacheApi';\nimport {fileToBuffer} from \"../../../worker/share/utils/utils\";\nimport {ERR, FileInfo_Type} from \"../../ptp/protobuf/PTPCommon/types\";\n\ninterface OnProgress {\n    isCanceled?: boolean;\n\n    // Float between 0 and 1.\n    (progress: number): void;\n}\n\nexport interface UploadFileParams {\n    file: File;\n    workers?: number;\n    onProgress?: OnProgress;\n}\n\nconst KB_TO_BYTES = 1024;\nconst LARGE_FILE_THRESHOLD = 10 * 1024 * 1024;\nconst DISCONNECT_SLEEP = 1000;\nconst MAX_CONCURRENT_CONNECTIONS = 3;\nconst MAX_CONCURRENT_CONNECTIONS_PREMIUM = 6;\nconst MAX_WORKERS_PER_CONNECTION = 10;\n\nconst foremans = Array(MAX_CONCURRENT_CONNECTIONS_PREMIUM).fill(undefined)\n    .map(() => new Foreman(MAX_WORKERS_PER_CONNECTION));\n\nexport const getFileId = ()=>{\n    let fileId1 = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    return fileId1.toString()\n        .replace(\"-\", \"\")\n        .replace(\"n\", \"\")\n}\n\nexport async function uploadFileV1(\n    fileParams: UploadFileParams,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n    const { name, size } = file;\n    let fileIdStr = getFileId();\n    const fileId = Number(fileIdStr)\n    fileIdStr = String(fileId)\n    localDb.cache[fileIdStr] = file;\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n    const buf = await fileToBuffer(file)\n    const cipher = Account.localEncrypt(Buffer.from(buf));\n    const body = new DownloadRes({\n        file:{\n            id:fileIdStr,\n            part:0,\n            part_total:1,\n            buf:cipher,\n            size,\n            type:file.type\n        },\n        err:ERR.NO_ERROR\n    }).pack().getPbData()\n\n    const blob = new Blob([Buffer.from(body)]);\n    await cacheApi.save(MEDIA_CACHE_NAME_WAI, fileIdStr, blob);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n\n\nexport async function uploadFileCache(\n    file: FileInfo_Type,\n) {\n    const { buf, id } = file;\n    const size = buf.length\n    const fileIdStr = id;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % MAX_CONCURRENT_CONNECTIONS_PREMIUM;\n        await foremans[senderIndex].requestWorker();\n        const blobSlice = buf.subarray(i * partSize, (i + 1) * partSize);\n        promises.push((async (jMemo: number, blobSliceMemo: Buffer) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                try {\n                    if(CLOUD_MESSAGE_API && Account.getCurrentAccount()?.getSession()){\n                        if(DEBUG){\n                            console.log(\"uploadProfilePhoto\",fileIdStr,jMemo,partCount)\n                        }\n                        const fileInfo = {\n                            id:fileIdStr,\n                            size:file.size,\n                            type:file.type,\n                            part:jMemo+1,\n                            part_total:partCount,\n                            buf:blobSliceMemo\n                        }\n                        const uploadReq = new UploadReq({file:fileInfo})\n                        const body = Buffer.from(uploadReq.pack().getPbData());\n                        await fetch(`${CLOUD_MESSAGE_API}/proto`,{\n                            method: 'POST',\n                            body,\n                            headers:{\n                                Authorization: `Bearer ${Account.getCurrentAccount()?.getSession()}`,\n                            }\n                        })\n                    }\n                } catch (err) {\n                    foremans[senderIndex].releaseWorker();\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n    await Promise.all(promises);\n}\n\n\nexport async function uploadFile(\n    client: TelegramClient,\n    fileParams: UploadFileParams,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n\n    const isPremium = Boolean(client.isPremium);\n\n    const { name, size } = file;\n    const fileId = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    // Pick the least busy foreman\n    // For some reason, fresh connections give out a higher speed for the first couple of seconds\n    // I have no idea why, but this may speed up the download of small files\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % (\n            isPremium ? MAX_CONCURRENT_CONNECTIONS_PREMIUM : MAX_CONCURRENT_CONNECTIONS\n        );\n\n        await foremans[senderIndex].requestWorker();\n\n        if (onProgress?.isCanceled) {\n            foremans[senderIndex].releaseWorker();\n            break;\n        }\n\n        const blobSlice = file.slice(i * partSize, (i + 1) * partSize);\n        // eslint-disable-next-line no-loop-func, @typescript-eslint/no-loop-func\n        promises.push((async (jMemo: number, blobSliceMemo: Blob) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                let sender;\n                try {\n                    // We always upload from the DC we are in\n                    sender = await client.getSender(client.session.dcId, senderIndex, isPremium);\n                    const partBytes = await blobSliceMemo.arrayBuffer();\n                    await sender.send(\n                        isLarge\n                            ? new Api.upload.SaveBigFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                fileTotalParts: partCount,\n                                bytes: Buffer.from(partBytes),\n                            })\n                            : new Api.upload.SaveFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                bytes: Buffer.from(partBytes),\n                            }),\n                    );\n                } catch (err) {\n                    if (sender && !sender.isConnected()) {\n                        await sleep(DISCONNECT_SLEEP);\n                        continue;\n                    } else if (err instanceof errors.FloodWaitError) {\n                        await sleep(err.seconds * 1000);\n                        continue;\n                    }\n                    foremans[senderIndex].releaseWorker();\n\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n\n                if (onProgress) {\n                    if (onProgress.isCanceled) {\n                        throw new Error('USER_CANCELED');\n                    }\n\n                    progress += (1 / partCount);\n                    onProgress(progress);\n                }\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n\n    await Promise.all(promises);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n","/**\n * Converts a Telegram's RPC Error to a Python error.\n * @param rpcError the RPCError instance\n * @param request the request that caused this error\n * @constructor the RPCError as a Python exception that represents this error\n */\nconst { RPCError } = require('./RPCBaseErrors');\nconst { rpcErrorRe } = require('./RPCErrorList');\n\nfunction RPCMessageToError(rpcError, request) {\n    for (const [msgRegex, Cls] of rpcErrorRe) {\n        const m = rpcError.errorMessage.match(msgRegex);\n        if (m) {\n            const capture = m.length === 2 ? parseInt(m[1], 10) : undefined;\n            return new Cls({\n                request,\n                capture,\n            });\n        }\n    }\n\n    return new RPCError(rpcError.errorMessage, request);\n}\n\nconst Common = require('./Common');\nconst RPCBaseErrors = require('./RPCBaseErrors');\nconst RPCErrorList = require('./RPCErrorList');\n\nmodule.exports = {\n    RPCMessageToError,\n    ...Common,\n    ...RPCBaseErrors,\n    ...RPCErrorList,\n};\n","const {\n    parseTl,\n    serializeBytes,\n    serializeDate,\n} = require('./generationHelpers');\nconst {\n    toSignedLittleBuffer,\n} = require('../Helpers');\n\nconst tlContent = require('./apiTl');\nconst schemeContent = require('./schemaTl');\n\n/* CONTEST\nconst NAMED_AUTO_CASTS = new Set([\n    'chatId,int'\n])\nconst NAMED_BLACKLIST = new Set([\n    'discardEncryption'\n])\nconst AUTO_CASTS = new Set([\n    'InputPeer',\n    'InputChannel',\n    'InputUser',\n    'InputDialogPeer',\n    'InputNotifyPeer',\n    'InputMedia',\n    'InputPhoto',\n    'InputMessage',\n    'InputDocument',\n    'InputChatPhoto'\n])\n\n */\n// eslint-disable-next-line no-restricted-globals\nconst CACHING_SUPPORTED = typeof self !== 'undefined' && self.localStorage !== undefined;\n\nconst CACHE_KEY = 'GramJs:apiCache';\n\nfunction buildApiFromTlSchema() {\n    let definitions;\n    const fromCache = CACHING_SUPPORTED && loadFromCache();\n\n    if (fromCache) {\n        definitions = fromCache;\n    } else {\n        definitions = loadFromTlSchemas();\n\n        if (CACHING_SUPPORTED) {\n            localStorage.setItem(CACHE_KEY, JSON.stringify(definitions));\n        }\n    }\n\n    return mergeWithNamespaces(\n        createClasses('constructor', definitions.constructors),\n        createClasses('request', definitions.requests),\n    );\n}\n\nfunction loadFromCache() {\n    const jsonCache = localStorage.getItem(CACHE_KEY);\n    return jsonCache && JSON.parse(jsonCache);\n}\n\nfunction loadFromTlSchemas() {\n    const [constructorParamsApi, functionParamsApi] = extractParams(tlContent);\n    const [constructorParamsSchema, functionParamsSchema] = extractParams(schemeContent);\n    const constructors = [].concat(constructorParamsApi, constructorParamsSchema);\n    const requests = [].concat(functionParamsApi, functionParamsSchema);\n\n    return {\n        constructors,\n        requests,\n    };\n}\n\nfunction mergeWithNamespaces(obj1, obj2) {\n    const result = { ...obj1 };\n\n    Object.keys(obj2)\n        .forEach((key) => {\n            if (typeof obj2[key] === 'function' || !result[key]) {\n                result[key] = obj2[key];\n            } else {\n                Object.assign(result[key], obj2[key]);\n            }\n        });\n\n    return result;\n}\n\nfunction extractParams(fileContent) {\n    const f = parseTl(fileContent);\n    const constructors = [];\n    const functions = [];\n    for (const d of f) {\n        if (d.isFunction) {\n            functions.push(d);\n        } else {\n            constructors.push(d);\n        }\n    }\n    return [constructors, functions];\n}\n\nfunction argToBytes(x, type) {\n    switch (type) {\n        case 'int': {\n            const i = Buffer.alloc(4);\n            i.writeInt32LE(x, 0);\n            return i;\n        }\n        case 'long':\n            return toSignedLittleBuffer(x, 8);\n        case 'int128':\n            return toSignedLittleBuffer(x, 16);\n        case 'int256':\n            return toSignedLittleBuffer(x, 32);\n        case 'double': {\n            const d = Buffer.alloc(8);\n            d.writeDoubleLE(x, 0);\n            return d;\n        }\n        case 'string':\n            return serializeBytes(x);\n        case 'Bool':\n            return x ? Buffer.from('b5757299', 'hex') : Buffer.from('379779bc', 'hex');\n        case 'true':\n            return Buffer.alloc(0);\n        case 'bytes':\n            return serializeBytes(x);\n        case 'date':\n            return serializeDate(x);\n        default:\n            return x.getBytes();\n    }\n}\n\n/*\nCONTEST\nasync function getInputFromResolve(utils, client, peer, peerType) {\n    switch (peerType) {\n        case 'InputPeer':\n            return utils.getInputPeer(await client.getInputEntity(peer))\n        case 'InputChannel':\n            return utils.getInputChannel(await client.getInputEntity(peer))\n        case 'InputUser':\n            return utils.getInputUser(await client.getInputEntity(peer))\n        case 'InputDialogPeer':\n            return await client._getInputDialog(peer)\n        case 'InputNotifyPeer':\n            return await client._getInputNotify(peer)\n        case 'InputMedia':\n            return utils.getInputMedia(peer)\n        case 'InputPhoto':\n            return utils.getInputPhoto(peer)\n        case 'InputMessage':\n            return utils.getInputMessage(peer)\n        case 'InputDocument':\n            return utils.getInputDocument(peer)\n        case 'InputChatPhoto':\n            return utils.getInputChatPhoto(peer)\n        case 'chatId,int' :\n            return await client.getPeerId(peer, false)\n        default:\n            throw new Error('unsupported peer type : ' + peerType)\n    }\n}\n*/\nfunction getArgFromReader(reader, arg) {\n    if (arg.isVector) {\n        if (arg.useVectorId) {\n            reader.readInt();\n        }\n        const temp = [];\n        const len = reader.readInt();\n        arg.isVector = false;\n        for (let i = 0; i < len; i++) {\n            temp.push(getArgFromReader(reader, arg));\n        }\n        arg.isVector = true;\n        return temp;\n    } else if (arg.flagIndicator) {\n        return reader.readInt();\n    } else {\n        switch (arg.type) {\n            case 'int':\n                return reader.readInt();\n            case 'long':\n                return reader.readLong();\n            case 'int128':\n                return reader.readLargeInt(128);\n            case 'int256':\n                return reader.readLargeInt(256);\n            case 'double':\n                return reader.readDouble();\n            case 'string':\n                return reader.tgReadString();\n            case 'Bool':\n                return reader.tgReadBool();\n            case 'true':\n                return true;\n            case 'bytes':\n                return reader.tgReadBytes();\n            case 'date':\n                return reader.tgReadDate();\n            default:\n                if (!arg.skipConstructorId) {\n                    return reader.tgReadObject();\n                } else {\n                    throw new Error(`Unknown type ${arg}`);\n                }\n        }\n    }\n}\n\nfunction createClasses(classesType, params) {\n    const classes = {};\n    for (const classParams of params) {\n        const {\n            name,\n            constructorId,\n            subclassOfId,\n            argsConfig,\n            namespace,\n            result,\n        } = classParams;\n        const fullName = [namespace, name].join('.')\n            .replace(/^\\./, '');\n\n        class VirtualClass {\n            static CONSTRUCTOR_ID = constructorId;\n\n            static SUBCLASS_OF_ID = subclassOfId;\n\n            static className = fullName;\n\n            static classType = classesType;\n\n            CONSTRUCTOR_ID = constructorId;\n\n            SUBCLASS_OF_ID = subclassOfId;\n\n            className = fullName;\n\n            classType = classesType;\n\n            constructor(args) {\n                args = args || {};\n                Object.keys(args)\n                    .forEach((argName) => {\n                        this[argName] = args[argName];\n                    });\n            }\n\n            static fromReader(reader) {\n                const args = {};\n\n                for (const argName in argsConfig) {\n                    if (argsConfig.hasOwnProperty(argName)) {\n                        const arg = argsConfig[argName];\n                        if (arg.isFlag) {\n                            const flagGroupSuffix = arg.flagGroup > 1 ? arg.flagGroup : '';\n                            const flagValue = args[`flags${flagGroupSuffix}`] & (1 << arg.flagIndex);\n                            if (arg.type === 'true') {\n                                args[argName] = Boolean(flagValue);\n                                continue;\n                            }\n\n                            args[argName] = flagValue ? getArgFromReader(reader, arg) : undefined;\n                        } else {\n                            args[argName] = getArgFromReader(reader, arg);\n                        }\n                    }\n                }\n                return new VirtualClass(args);\n            }\n\n            getBytes() {\n                // The next is pseudo-code:\n                const idForBytes = this.CONSTRUCTOR_ID;\n                const c = Buffer.alloc(4);\n                c.writeUInt32LE(idForBytes, 0);\n                const buffers = [c];\n                for (const arg in argsConfig) {\n                    if (argsConfig.hasOwnProperty(arg)) {\n                        if (argsConfig[arg].isFlag) {\n                            if ((this[arg] === false && argsConfig[arg].type === 'true')\n                                || this[arg] === undefined) {\n                                continue;\n                            }\n                        }\n                        if (argsConfig[arg].isVector) {\n                            if (argsConfig[arg].useVectorId) {\n                                buffers.push(Buffer.from('15c4b51c', 'hex'));\n                            }\n                            const l = Buffer.alloc(4);\n                            l.writeInt32LE(this[arg].length, 0);\n                            buffers.push(l, Buffer.concat(this[arg].map((x) => argToBytes(x, argsConfig[arg].type))));\n                        } else if (argsConfig[arg].flagIndicator) {\n                            if (!Object.values(argsConfig)\n                                .some((f) => f.isFlag)) {\n                                buffers.push(Buffer.alloc(4));\n                            } else {\n                                let flagCalculate = 0;\n                                for (const f in argsConfig) {\n                                    if (argsConfig[f].isFlag) {\n                                        if ((this[f] === false && argsConfig[f].type === 'true')\n                                            || this[f] === undefined) {\n                                            flagCalculate |= 0;\n                                        } else {\n                                            flagCalculate |= 1 << argsConfig[f].flagIndex;\n                                        }\n                                    }\n                                }\n                                const f = Buffer.alloc(4);\n                                f.writeUInt32LE(flagCalculate, 0);\n                                buffers.push(f);\n                            }\n                        } else {\n                            buffers.push(argToBytes(this[arg], argsConfig[arg].type));\n\n                            if (this[arg] && typeof this[arg].getBytes === 'function') {\n                                let boxed = (argsConfig[arg].type.charAt(argsConfig[arg].type.indexOf('.') + 1));\n                                boxed = boxed === boxed.toUpperCase();\n                                if (!boxed) {\n                                    buffers.shift();\n                                }\n                            }\n                        }\n                    }\n                }\n                return Buffer.concat(buffers);\n            }\n\n            readResult(reader) {\n                if (classesType !== 'request') {\n                    throw new Error('`readResult()` called for non-request instance');\n                }\n\n                const m = result.match(/Vector<(int|long)>/);\n                if (m) {\n                    reader.readInt();\n                    const temp = [];\n                    const len = reader.readInt();\n                    if (m[1] === 'int') {\n                        for (let i = 0; i < len; i++) {\n                            temp.push(reader.readInt());\n                        }\n                    } else {\n                        for (let i = 0; i < len; i++) {\n                            temp.push(reader.readLong());\n                        }\n                    }\n                    return temp;\n                } else {\n                    return reader.tgReadObject();\n                }\n            }\n\n            /* CONTEST\n            async resolve(client, utils) {\n\n                if (classesType !== 'request') {\n                    throw new Error('`resolve()` called for non-request instance')\n                }\n\n                for (const arg in argsConfig) {\n                    if (argsConfig.hasOwnProperty(arg)) {\n                        if (!AUTO_CASTS.has(argsConfig[arg].type)) {\n                            if (!NAMED_AUTO_CASTS.has(`${argsConfig[arg].name},${argsConfig[arg].type}`)) {\n                                continue\n                            }\n                        }\n                        if (argsConfig[arg].isFlag) {\n                            if (!this[arg]) {\n                                continue\n                            }\n                        }\n                        if (argsConfig[arg].isVector) {\n                            const temp = []\n                            for (const x of this[arg]) {\n                                temp.push(await getInputFromResolve(utils, client, x, argsConfig[arg].type))\n                            }\n                            this[arg] = temp\n                        } else {\n                            this[arg] = await getInputFromResolve(utils, client, this[arg], argsConfig[arg].type)\n                        }\n                    }\n                }\n            } */\n        }\n\n        if (namespace) {\n            if (!classes[namespace]) {\n                classes[namespace] = {};\n            }\n            classes[namespace][name] = VirtualClass;\n        } else {\n            classes[name] = VirtualClass;\n        }\n    }\n\n    return classes;\n}\n\nmodule.exports = buildApiFromTlSchema();\n","import {ChatRequest, ChatResponse, Message} from \"../../../../functions/api/types\";\nimport {AI_PROXY_API} from \"../../../config\";\nimport {PbChatGptModelConfig_Type} from \"../protobuf/PTPCommon/types\";\n\nconst TIME_OUT_MS = 30000;\n\nconst ENABLE_GPT4 = true;\n\nexport const ALL_MODELS = [\n  {\n    name: \"gpt-4\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-0314\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-32k\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-32k-0314\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-3.5-turbo\",\n    available: true,\n  },\n  {\n    name: \"gpt-3.5-turbo-0301\",\n    available: true,\n  },\n];\n\nexport function isValidModel(name: string) {\n  return ALL_MODELS.some((m) => m.name === name && m.available);\n}\n\nexport function isValidNumber(x: number, min: number, max: number) {\n  return typeof x === \"number\" && x <= max && x >= min;\n}\n\n\nconst makeRequestParam = (\n  messages: Message[],\n  options?: {\n    filterBot?: boolean;\n    stream?: boolean;\n  },\n): ChatRequest => {\n  let sendMessages = messages.map((v) => ({\n    role: v.role,\n    content: v.content,\n  }));\n\n  if (options?.filterBot) {\n    sendMessages = sendMessages.filter((m) => m.role !== \"assistant\");\n  }\n\n  return {\n    model: \"gpt-3.5-turbo\",\n    messages: sendMessages,\n    stream: options?.stream,\n  };\n};\n\nfunction getHeaders(apiKey:string) {\n  let headers: Record<string, string> = {};\n  headers[\"token\"] = apiKey;\n  return headers;\n}\n\nexport function requestOpenaiClient(path: string,apiKey:string) {\n  return (body: any, method = \"POST\") =>\n    fetch(AI_PROXY_API +\"/api/openai\", {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        path,\n        ...getHeaders(apiKey),\n      },\n      body: body && JSON.stringify(body),\n    });\n}\n\nexport async function requestChat(messages: Message[],apiKey:string) {\n  const req: ChatRequest = makeRequestParam(messages, { filterBot: true });\n\n  const res = await requestOpenaiClient(\"v1/chat/completions\",apiKey)(req);\n\n  try {\n    return (await res.json()) as ChatResponse;\n  } catch (error) {\n    console.error(\"[Request Chat] \", error, res.body);\n  }\n}\n\nexport function filterConfig(oldConfig: PbChatGptModelConfig_Type): Partial<PbChatGptModelConfig_Type> {\n  const config = Object.assign({}, oldConfig);\n\n  const validator: {\n    [k in keyof PbChatGptModelConfig_Type]: (x: PbChatGptModelConfig_Type[keyof PbChatGptModelConfig_Type]) => boolean;\n  } = {\n    model(x) {\n      return isValidModel(x as string);\n    },\n    max_tokens(x) {\n      return isValidNumber(x as number, 100, 4000);\n    },\n    presence_penalty(x) {\n      return isValidNumber(x as number, -2, 2);\n    },\n    temperature(x) {\n      return isValidNumber(x as number, 0, 2);\n    },\n  };\n\n  Object.keys(validator).forEach((k) => {\n    const key = k as keyof PbChatGptModelConfig_Type;\n    if (!validator[key](config[key])) {\n      delete config[key];\n    }\n  });\n\n  return config;\n}\n\nexport async function requestChatStream(\n  url?:string,\n  messages: Message[],\n  options?: {\n    apiKey:string,\n    filterBot?: boolean;\n    modelConfig?: PbChatGptModelConfig_Type;\n    onMessage: (message: string, done: boolean) => void;\n    onAbort: (error: Error) => void;\n    onError: (error: Error) => void;\n    onController?: (controller: AbortController) => void;\n  },\n) {\n  const req = makeRequestParam(messages, {\n    stream: true,\n    filterBot: options?.filterBot,\n  });\n\n  // valid and assign model config\n  if (options?.modelConfig) {\n    Object.assign(req, filterConfig(options.modelConfig));\n  }\n\n  console.log(\"[Request] \", req);\n\n  const controller = new AbortController();\n  const reqTimeoutId = setTimeout(() => controller.abort(), TIME_OUT_MS);\n\n  try {\n    const res = await fetch(url ? url : AI_PROXY_API + \"/api/chat-stream\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        path: \"v1/chat/completions\",\n        ...getHeaders(options!.apiKey),\n      },\n      body: JSON.stringify(req),\n      signal: controller.signal,\n    });\n\n    clearTimeout(reqTimeoutId);\n\n    let responseText = \"\";\n\n    const finish = () => {\n      options?.onMessage(responseText, true);\n      controller.abort();\n    };\n\n    if (res.ok) {\n      const reader = res.body?.getReader();\n      const decoder = new TextDecoder();\n\n      options?.onController?.(controller);\n      while (true) {\n        // handle time out, will stop if no response in 10 secs\n        const resTimeoutId = setTimeout(() => finish(), TIME_OUT_MS);\n        const content = await reader?.read();\n        clearTimeout(resTimeoutId);\n        const text = decoder.decode(content?.value);\n        responseText += text;\n\n        const done = !content || content.done;\n        options?.onMessage(responseText, false);\n\n        if (done) {\n          break;\n        }\n      }\n\n      finish();\n    } else if (res.status === 401) {\n      console.error(\"Anauthorized\");\n      responseText = \"Unauthorized\";\n      finish();\n    } else {\n      console.error(\"Stream Error\", res.body);\n      options?.onError(new Error(\"Stream Error\"));\n    }\n  } catch (err:any) {\n    debugger\n    if(err.code === 20){\n      console.error(\"onAbort\", err);\n      options?.onAbort(err);\n    }else{\n      // AbortError\n      console.error(\"NetWork Error\", err);\n      options?.onError(err);\n    }\n  }\n}\n\nexport async function requestWithPrompt(messages: Message[], prompt: string,apiKey:string) {\n  messages = messages.concat([\n    {\n      role: \"user\",\n      content: prompt,\n      date: new Date().toLocaleString(),\n    },\n  ]);\n\n  const res = await requestChat(messages,apiKey);\n\n  return res?.choices?.at(0)?.message?.content ?? \"\";\n}\n\n// To store message streaming controller\nexport const ControllerPool = {\n  controllers: {} as Record<string, AbortController>,\n\n  addController(\n    sessionIndex: number,\n    messageIndex: number,\n    controller: AbortController,\n  ) {\n    const key = this.key(sessionIndex, messageIndex);\n    this.controllers[key] = controller;\n    return key;\n  },\n\n  stop(sessionIndex: number, messageIndex: number) {\n    const key = this.key(sessionIndex, messageIndex);\n    if(this.controllers[key]){\n      const controller = this.controllers[key];\n      console.log(controller);\n      controller?.abort();\n    }\n  },\n\n  remove(sessionIndex: number, messageIndex: number) {\n    const key = this.key(sessionIndex, messageIndex);\n    delete this.controllers[key];\n  },\n\n  key(sessionIndex: number, messageIndex: number) {\n    return `${sessionIndex},${messageIndex}`;\n  },\n};\n\nexport async function requestUsage(apiKey:string) {\n  const formatDate = (d: Date) =>\n    `${d.getFullYear()}-${(d.getMonth() + 1).toString().padStart(2, \"0\")}-${d\n      .getDate()\n      .toString()\n      .padStart(2, \"0\")}`;\n  const ONE_DAY = 2 * 24 * 60 * 60 * 1000;\n  const now = new Date(Date.now() + ONE_DAY);\n  const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n  const startDate = formatDate(startOfMonth);\n  const endDate = formatDate(now);\n\n  const [used, subs] = await Promise.all([\n    requestOpenaiClient(\n      `dashboard/billing/usage?start_date=${startDate}&end_date=${endDate}`,\n      apiKey\n    )(null, \"GET\"),\n    requestOpenaiClient(\"dashboard/billing/subscription\",apiKey)(null, \"GET\"),\n  ]);\n\n  const response = (await used.json()) as {\n    total_usage?: number;\n    error?: {\n      type: string;\n      message: string;\n    };\n  };\n\n  const total = (await subs.json()) as {\n    hard_limit_usd?: number;\n  };\n\n  if (response.error && response.error.type) {\n    console.error(response.error)\n    throw new Error(response.error.type)\n  }\n\n  if (response.total_usage) {\n    response.total_usage = Math.round(response.total_usage) / 100;\n  }\n\n  if (total.hard_limit_usd) {\n    total.hard_limit_usd = Math.round(total.hard_limit_usd * 100) / 100;\n  }\n\n  return {\n    used: response.total_usage,\n    subscription: total.hard_limit_usd,\n  };\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { AuthNativeReq_Type } from './types';\n\nexport default class AuthNativeReq extends BaseMsg {\n  public msg?: AuthNativeReq_Type\n  constructor(msg?: AuthNativeReq_Type) {\n    super('PTP.Auth.AuthNativeReq', msg);\n    this.setCommandId(ActionCommands.CID_AuthNativeReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): AuthNativeReq_Type {\n    return new AuthNativeReq().decode(pdu.body());\n  }\n}\n","// DO NOT EDIT\nimport BaseMsg from '../BaseMsg';\nimport type { Pdu } from '../BaseMsg';\nimport type { PbMsg_Type } from './types';\n\nexport default class PbMsg extends BaseMsg {\n  public msg?: PbMsg_Type\n  constructor(msg?: PbMsg_Type) {\n    super('PTP.Common.PbMsg', msg);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): PbMsg_Type {\n    return new PbMsg().decode(pdu.body());\n  }\n}\n","// DO NOT EDIT\nimport BaseMsg from '../BaseMsg';\nimport type { Pdu } from '../BaseMsg';\nimport type { PbQrCode_Type } from './types';\n\nexport default class PbQrCode extends BaseMsg {\n  public msg?: PbQrCode_Type\n  constructor(msg?: PbQrCode_Type) {\n    super('PTP.Common.PbQrCode', msg);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): PbQrCode_Type {\n    return new PbQrCode().decode(pdu.body());\n  }\n}\n","// DO NOT EDIT\nimport BaseMsg from '../BaseMsg';\nimport type { Pdu } from '../BaseMsg';\nimport type { PbUser_Type } from './types';\n\nexport default class PbUser extends BaseMsg {\n  public msg?: PbUser_Type\n  constructor(msg?: PbUser_Type) {\n    super('PTP.Common.PbUser', msg);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): PbUser_Type {\n    return new PbUser().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadMsgReq_Type } from './types';\n\nexport default class DownloadMsgReq extends BaseMsg {\n  public msg?: DownloadMsgReq_Type\n  constructor(msg?: DownloadMsgReq_Type) {\n    super('PTP.Msg.DownloadMsgReq', msg);\n    this.setCommandId(ActionCommands.CID_DownloadMsgReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadMsgReq_Type {\n    return new DownloadMsgReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadMsgRes_Type } from './types';\n\nexport default class DownloadMsgRes extends BaseMsg {\n  public msg?: DownloadMsgRes_Type\n  constructor(msg?: DownloadMsgRes_Type) {\n    super('PTP.Msg.DownloadMsgRes', msg);\n    this.setCommandId(ActionCommands.CID_DownloadMsgRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadMsgRes_Type {\n    return new DownloadMsgRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { GenMsgIdReq_Type } from './types';\n\nexport default class GenMsgIdReq extends BaseMsg {\n  public msg?: GenMsgIdReq_Type\n  constructor(msg?: GenMsgIdReq_Type) {\n    super('PTP.Msg.GenMsgIdReq', msg);\n    this.setCommandId(ActionCommands.CID_GenMsgIdReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): GenMsgIdReq_Type {\n    return new GenMsgIdReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { GenMsgIdRes_Type } from './types';\n\nexport default class GenMsgIdRes extends BaseMsg {\n  public msg?: GenMsgIdRes_Type\n  constructor(msg?: GenMsgIdRes_Type) {\n    super('PTP.Msg.GenMsgIdRes', msg);\n    this.setCommandId(ActionCommands.CID_GenMsgIdRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): GenMsgIdRes_Type {\n    return new GenMsgIdRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SendBotMsgReq_Type } from './types';\n\nexport default class SendBotMsgReq extends BaseMsg {\n  public msg?: SendBotMsgReq_Type\n  constructor(msg?: SendBotMsgReq_Type) {\n    super('PTP.Msg.SendBotMsgReq', msg);\n    this.setCommandId(ActionCommands.CID_SendBotMsgReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SendBotMsgReq_Type {\n    return new SendBotMsgReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SendBotMsgRes_Type } from './types';\n\nexport default class SendBotMsgRes extends BaseMsg {\n  public msg?: SendBotMsgRes_Type\n  constructor(msg?: SendBotMsgRes_Type) {\n    super('PTP.Msg.SendBotMsgRes', msg);\n    this.setCommandId(ActionCommands.CID_SendBotMsgRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SendBotMsgRes_Type {\n    return new SendBotMsgRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SendRes_Type } from './types';\n\nexport default class SendRes extends BaseMsg {\n  public msg?: SendRes_Type\n  constructor(msg?: SendRes_Type) {\n    super('PTP.Msg.SendRes', msg);\n    this.setCommandId(ActionCommands.CID_SendRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SendRes_Type {\n    return new SendRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateCmdReq_Type } from './types';\n\nexport default class UpdateCmdReq extends BaseMsg {\n  public msg?: UpdateCmdReq_Type\n  constructor(msg?: UpdateCmdReq_Type) {\n    super('PTP.Msg.UpdateCmdReq', msg);\n    this.setCommandId(ActionCommands.CID_UpdateCmdReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateCmdReq_Type {\n    return new UpdateCmdReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateCmdRes_Type } from './types';\n\nexport default class UpdateCmdRes extends BaseMsg {\n  public msg?: UpdateCmdRes_Type\n  constructor(msg?: UpdateCmdRes_Type) {\n    super('PTP.Msg.UpdateCmdRes', msg);\n    this.setCommandId(ActionCommands.CID_UpdateCmdRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateCmdRes_Type {\n    return new UpdateCmdRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UploadMsgReq_Type } from './types';\n\nexport default class UploadMsgReq extends BaseMsg {\n  public msg?: UploadMsgReq_Type\n  constructor(msg?: UploadMsgReq_Type) {\n    super('PTP.Msg.UploadMsgReq', msg);\n    this.setCommandId(ActionCommands.CID_UploadMsgReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UploadMsgReq_Type {\n    return new UploadMsgReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { StopChatStreamReq_Type } from './types';\n\nexport default class StopChatStreamReq extends BaseMsg {\n  public msg?: StopChatStreamReq_Type\n  constructor(msg?: StopChatStreamReq_Type) {\n    super('PTP.Other.StopChatStreamReq', msg);\n    this.setCommandId(ActionCommands.CID_StopChatStreamReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): StopChatStreamReq_Type {\n    return new StopChatStreamReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadUserReq_Type } from './types';\n\nexport default class DownloadUserReq extends BaseMsg {\n  public msg?: DownloadUserReq_Type\n  constructor(msg?: DownloadUserReq_Type) {\n    super('PTP.User.DownloadUserReq', msg);\n    this.setCommandId(ActionCommands.CID_DownloadUserReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadUserReq_Type {\n    return new DownloadUserReq().decode(pdu.body());\n  }\n}\n","import MsgDispatcher from \"./MsgDispatcher\";\nimport {selectChatMessage, selectUser} from \"../../global/selectors\";\nimport {updateUser} from \"../../global/reducers\";\nimport {getActions, getGlobal, setGlobal} from \"../../global\";\nimport {ApiBotCommand, ApiKeyboardButton, ApiMessage} from \"../../api/types\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {GlobalState} from \"../../global/types\";\nimport MsgCommandSetting from \"./MsgCommandSetting\";\nimport {ControllerPool} from \"../../lib/ptp/functions/requests\";\nimport MsgCommandChatGpt from \"./MsgCommandChatGpt\";\nimport MsgCommandChatLab from \"./MsgCommandChatLab\";\nimport {UserStoreRow_Type} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport {callApiWithPdu} from \"./utils\";\nimport {DownloadUserReq, DownloadUserRes, UploadUserReq} from \"../../lib/ptp/protobuf/PTPUser\";\nimport BotWebSocket, {BotWebSocketNotifyAction, BotWebSocketState} from \"./bot/BotWebSocket\";\nimport Account from \"../share/Account\";\nimport {Pdu} from \"../../lib/ptp/protobuf/BaseMsg\";\nimport {ActionCommands} from \"../../lib/ptp/protobuf/ActionCommands\";\nimport {SendRes} from \"../../lib/ptp/protobuf/PTPMsg\";\n\nexport default class MsgCommand {\n  private msgDispatcher: MsgDispatcher;\n  constructor(msgDispatcher:MsgDispatcher) {\n    this.msgDispatcher = msgDispatcher;\n  }\n  static async sendText(chatId:string,text:string){\n    const messageId = await MsgDispatcher.genMsgId();\n    MsgDispatcher.newMessage(chatId,messageId,{\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:text\n        }\n      },\n    })\n  }\n\n  static back(global:GlobalState,chatId:string,messageId:number,data:string,path:string){\n    if(path.startsWith(\"/\")){\n      path = path.substring(1)\n    }\n    const btn = data.replace(`${chatId}/${path}/`,\"\")\n    const inlineButtons:ApiKeyboardButton[][] = JSON.parse(btn);\n    MsgDispatcher.updateMessage(chatId, messageId, {\n      inlineButtons\n    });\n  }\n  static buildInlineBackButton(chatId:string,messageId:number,path:string,text:string){\n    if(path.startsWith(\"/\")){\n      path = path.substring(1)\n    }\n    return MsgCommand.buildInlineCallbackButton(chatId,path+\"/\"+JSON.stringify(selectChatMessage(getGlobal(),chatId,messageId)!.inlineButtons),text,\"callback\")\n  }\n\n  static buildInlineCallbackButton(chatId:string,path:string,text:string,type:'callback' = 'callback'){\n    if(path.startsWith(\"/\")){\n      path = path.substring(1)\n    }\n    return [\n      {\n        type,\n        text,\n        data:`${chatId}/${path}`\n      }\n    ]\n  }\n\n  static buildInlineButton(chatId:string,text:string,type:'requestUploadImage'|'unsupported'){\n    return [\n      {\n        type,\n        text,\n      }\n    ]\n  }\n  static async clearHistory(chatId:string){\n    await MsgDispatcher.newTextMessage(chatId,undefined,'确定要清除么？',[\n      [\n        ...MsgCommand.buildInlineCallbackButton(chatId,\"clearHistory/confirm\",\"确定\",\"callback\"),\n        ...MsgCommand.buildInlineCallbackButton(chatId,\"clearHistory/cancel\",\"返回\",\"callback\")\n      ]\n    ])\n\n    return true;\n  }\n\n  async showMnemonic(){\n    await this.msgDispatcher.sendOutgoingMsg();\n    await this.msgDispatcher.replyText(\"显示成功\")\n    getActions().updateGlobal({\n      showMnemonicModal:true\n    })\n  }\n\n  static async reloadCommands(chatId:string,cmds:ApiBotCommand[]){\n    let global = getGlobal();\n    let user = selectUser(global,chatId)\n    const botInfo = user?.fullInfo?.botInfo;\n    if(botInfo){\n      //@ts-ignore\n      const commands:ApiBotCommand[] = cmds.map(cmd => {\n        return {\n          ...cmd,\n          botId: user?.id\n        };\n      });\n      global = updateUser(global,user?.id!,{\n        ...user,\n        fullInfo:{\n          ...user?.fullInfo,\n          botInfo:{\n            ...user?.fullInfo!.botInfo!,\n            commands\n          }\n        }\n      })\n      setGlobal(global)\n      global = getGlobal()\n      user = selectUser(global,chatId)\n      return true;\n    }\n  }\n  static async uploadUser(global:GlobalState,chatId:string){\n    const message1 = await MsgDispatcher.newTextMessage(chatId,undefined,\"正在上传...\")\n\n    const users:UserStoreRow_Type[] = [];\n    const ids = [chatId]\n    for (let i = 0; i < ids.length; i++) {\n      if(i > 0){\n        break\n      }\n      const id = ids[i];\n      users.push({\n        time:currentTs(),\n        userId:id!,\n        user:selectUser(global,chatId)\n      })\n    }\n    await callApiWithPdu(new UploadUserReq({\n      users,\n      time:currentTs()\n    }).pack())\n    await MsgDispatcher.updateMessage(chatId,message1.id,{\n      content:{\n        text:{\n          text:\"上传成功\"\n        }\n      }\n    })\n  }\n  static async downloadUser(global:GlobalState,chatId:string){\n    const message1 = await MsgDispatcher.newTextMessage(chatId,undefined,\"正在下载...\")\n\n    const DownloadUserReqRes = await callApiWithPdu(new DownloadUserReq({\n      userIds:[chatId],\n    }).pack())\n    const downloadUserRes = DownloadUserRes.parseMsg(DownloadUserReqRes?.pdu!)\n    if(downloadUserRes.users){\n      const {user} = downloadUserRes.users[0]\n      global = getGlobal();\n      // @ts-ignore\n      global = updateUser(global,user!.id, user)\n      setGlobal(global)\n    }\n\n    await MsgDispatcher.updateMessage(chatId,message1.id,{\n      content:{\n        text:{\n          text:\"下载成功\"\n        }\n      }\n    })\n  }\n  async setting(){\n    const chatId = this.msgDispatcher.getChatId()\n    await this.msgDispatcher.sendOutgoingMsg();\n    return await MsgCommandSetting.setting(chatId);\n  }\n  static async requestUploadImage(global:GlobalState,chatId:string,messageId:number,files:FileList | null){\n    await MsgCommandSetting.requestUploadImage(global,chatId,messageId,files)\n  }\n  static async answerCallbackButton(global:GlobalState,chatId:string,messageId:number,data:string){\n    await MsgCommandSetting.answerCallbackButton(global,chatId,messageId,data)\n    await MsgCommandChatGpt.answerCallbackButton(global,chatId,messageId,data)\n    await MsgCommandChatLab.answerCallbackButton(global,chatId,messageId,data)\n\n    if(data.endsWith(\"clearHistory/confirm\")){\n      let global = getGlobal();\n      const chatMessages = global.messages.byChatId[chatId];\n      const ids = Object.keys(chatMessages.byId).map(Number);\n      getActions().sendBotCommand({chatId,command:\"/start\"})\n      MsgDispatcher.apiUpdate({\n        \"@type\":\"deleteMessages\",\n        chatId,\n        ids\n      })\n    }\n\n    if(data.endsWith(\"clearHistory/cancel\")){\n      return MsgDispatcher.updateMessage(chatId,messageId, {\n          inlineButtons: []\n        }\n      )\n    }\n\n    if(data.startsWith(\"requestChatStream/stop/\")){\n      const [chatId,messageId] = data.replace(\"requestChatStream/stop/\",\"\").split(\"/\").map(Number)\n      ControllerPool.stop(chatId,messageId);\n    }\n    if(data.startsWith(\"requestChatStream/stop/\")){\n      const [chatId,messageId] = data.replace(\"requestChatStream/stop/\",\"\").split(\"/\").map(Number)\n      ControllerPool.stop(chatId,messageId);\n    }\n  }\n\n  static async handleNewMessage(pdu:Pdu){\n    const {msg,text,chatId} = SendRes.parseMsg(pdu)\n    if(text){\n      return MsgDispatcher.newTextMessage(\n        chatId,undefined,\n        text\n      )\n    }else{\n      // @ts-ignore\n      const message:ApiMessage = msg\n      return MsgDispatcher.newMessage(\n        chatId,message.id,\n        message\n      )\n    }\n  }\n  static async handleUpdateMessage(pdu:Pdu){\n    const {msg,chatId} = SendRes.parseMsg(pdu)\n    // @ts-ignore\n    const message:Partial<ApiMessage> = msg\n    return MsgDispatcher.updateMessage(\n      chatId,message.id!,\n      message\n    )\n  }\n  static async handleWsBotOnData(chatId:string,pdu:Pdu){\n    switch (pdu.getCommandId()){\n      case ActionCommands.CID_SendRes:\n        const {action} = SendRes.parseMsg(pdu)\n        switch (action){\n          case \"newMessage\":\n            return await MsgCommand.handleNewMessage(pdu)\n          case \"updateMessage\":\n            return await MsgCommand.handleUpdateMessage(pdu)\n        }\n        break\n    }\n  }\n}\n","import MsgDispatcher from \"./MsgDispatcher\";\nimport {currentTs, isPositiveInteger} from \"../share/utils/utils\";\nimport {ApiBotInfo, ApiKeyboardButtons, ApiMessage} from \"../../api/types\";\nimport {AiReplyHistoryRole, GlobalState} from \"../../global/types\";\nimport {getGlobal, setGlobal} from \"../../global\";\nimport {selectChatMessage, selectUser} from \"../../global/selectors\";\nimport {updateUser} from \"../../global/reducers\";\nimport {\n  ALL_CHAT_GPT_MODELS,\n  ChatModelConfig,\n  DEFAULT_BOT_COMMANDS,\n  DEFAULT_CHATGPT_AI_COMMANDS,\n  STOP_HANDLE_MESSAGE\n} from \"../setting\";\nimport {callApiWithPdu} from \"./utils\";\nimport {StopChatStreamReq} from \"../../lib/ptp/protobuf/PTPOther\";\nimport Account from \"../share/Account\";\nimport MsgCommand from \"./MsgCommand\";\nimport {showModalFromEvent} from \"../share/utils/modal\";\nimport {PbAiBot_Type, PbChatGpBotConfig_Type, PbChatGptModelConfig_Type} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport {AiHistoryType} from \"./MsgChatGpWorker\";\nimport {UpdateCmdReq, UpdateCmdRes} from \"../../lib/ptp/protobuf/PTPMsg\";\nimport {requestUsage} from \"../../lib/ptp/functions/requests\";\n\nexport default class MsgCommandChatGpt{\n  private chatId: string;\n  private botInfo: ApiBotInfo;\n  constructor(chatId:string,botInfo:ApiBotInfo) {\n    this.chatId = chatId\n    this.botInfo = botInfo;\n  }\n\n  static getAiHistoryList(chatId:string){\n    const global = getGlobal();\n    const {aiReplyHistory} = global\n    const historyList = aiReplyHistory[chatId] || []\n    if (historyList.length>0){\n      // @ts-ignore\n      const max_history_length:number = MsgCommandChatGpt.getChatGptConfig(global,chatId,\"max_history_length\")\n      let rows:AiHistoryType[] = []\n\n      if(max_history_length !== undefined){\n        if(max_history_length){\n          for (let i = 0; i < historyList.length; i++) {\n            const {msgId,role} = historyList[i]\n            const message = selectChatMessage(global,chatId,msgId)\n            if(message && message?.content.text){\n              rows.push({\n                role:role === AiReplyHistoryRole.USER ? \"user\" : \"assistant\",\n                content:message!.content.text!.text,\n                date: new Date(message.date*1000).toLocaleString(),\n              })\n            }\n          }\n          if(rows.length > max_history_length){\n            rows = rows.slice(Math.max(0,historyList.length - max_history_length))\n          }\n        }else {\n          rows = []\n        }\n      }\n      return rows;\n    }else{\n      return []\n    }\n  }\n  static getInlineButtons(chatId:string):ApiKeyboardButtons{\n    const isEnableSync = Account.getCurrentAccount()?.getSession();\n    const global = getGlobal();\n    const isEnableAi = MsgCommandChatGpt.getAiBotConfig(global,chatId,'enableAi')\n    const disableClearHistory = MsgCommandChatGpt.getAiBotConfig(global,chatId,'disableClearHistory')\n    return isEnableSync ? [\n      [\n        {\n          data:`${chatId}/setting/uploadUser`,\n          text:\"上传机器人\",\n          type:\"callback\"\n        },\n        {\n          data:`${chatId}/setting/downloadUser`,\n          text:\"更新机器人\",\n          type:\"callback\"\n        },\n      ],\n      [\n        ...MsgCommand.buildInlineCallbackButton(chatId,`setting/ai/enable/${ isEnableAi ? 0 : 1 }`,isEnableAi ? \"关闭ai\" : \"启用ai\"),\n      ],\n      [\n        ...MsgCommand.buildInlineCallbackButton(chatId,'setting/ai/toggleClearHistory',disableClearHistory ? \"允许清除历史记录\":\"关闭清除历史记录\"),\n        ...(disableClearHistory ? [] : MsgCommand.buildInlineCallbackButton(chatId,'setting/ai/clearHistory',\"清除历史记录\")),\n      ],\n\n      [\n        ...MsgCommand.buildInlineCallbackButton(chatId,'setting/ai/customApi',\"自定义机器人api\"),\n      ],\n    ]:[\n      [\n        ...MsgCommand.buildInlineCallbackButton(chatId,`setting/ai/enable/${ isEnableAi ? 0 : 1 }`,isEnableAi ? \"关闭ai\" : \"启用ai\"),\n      ],\n      [\n        ...MsgCommand.buildInlineCallbackButton(chatId,'setting/ai/toggleClearHistory',disableClearHistory ? \"允许清除历史记录\":\"关闭清除历史记录\"),\n        ...(disableClearHistory ? [] : MsgCommand.buildInlineCallbackButton(chatId,'setting/ai/clearHistory',\"清除历史记录\")),\n\n      ],\n    ]\n  }\n\n  static async toggleClearHistory(chatId:string,messageId:number){\n    const global = getGlobal();\n    const disableClearHistory = MsgCommandChatGpt.getAiBotConfig(global,chatId,'disableClearHistory')\n    await MsgCommandChatGpt.changeAiBotConfig(global,chatId,{\n      \"disableClearHistory\":!disableClearHistory\n    })\n\n    await MsgDispatcher.updateMessage(chatId,messageId,{\n      inlineButtons:MsgCommandChatGpt.getInlineButtons(chatId)\n    })\n  }\n  async setting(){\n    const {chatId} = this;\n    await MsgCommandChatGpt.reloadCommands(chatId)\n    const messageId = await MsgDispatcher.genMsgId();\n    const text = `设置面板`\n    return MsgDispatcher.newMessage(chatId,messageId,{\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text\n        }\n      },\n      inlineButtons:MsgCommandChatGpt.getInlineButtons(chatId),\n    })\n  }\n  async start(){\n    const messageId = await MsgDispatcher.genMsgId();\n    const {chatId} = this\n    await MsgCommandChatGpt.reloadCommands(chatId);\n    const commands = MsgCommandChatGpt.getCommands(chatId);\n    const text = `你可以通过发送以下命令来控制我：\\n\\n` + commands.map(cmd=>{\n      return `/${cmd.command} ${cmd.description}`\n    }).join(\"\\n\") + \"\\n\";\n    const message = {\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text\n        }\n      },\n    }\n    MsgDispatcher.newMessage(chatId,messageId,message)\n    return message\n  }\n  async initPrompt(){\n    const messageId = await MsgDispatcher.genMsgId();\n    const {chatId} = this\n    const init_system_content = MsgCommandChatGpt.getChatGptConfig(getGlobal(),chatId,\"init_system_content\")\n\n    const message:ApiMessage = {\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:`${init_system_content?init_system_content:\"未设置\"}`\n        }\n      },\n      inlineButtons:[\n        [\n          {\n            text:\"点击修改 初始化 Prompt\",\n            type:\"callback\",\n            data:`${chatId}/init_system_content`\n          }\n        ]\n      ]\n    }\n    MsgDispatcher.newMessage(chatId,messageId,message)\n    return message\n  }\n\n  static getAiBotConfig(global:GlobalState,chatId:string,key:'enableAi'|'botApi'|'commandsFromApi'|'chatGptConfig'|'disableClearHistory'){\n    const user = selectUser(global,chatId);\n    if(\n      user?.fullInfo &&\n      user?.fullInfo.botInfo &&\n      user?.fullInfo.botInfo.aiBot\n    ){\n      return user?.fullInfo.botInfo.aiBot[key]\n    }else{\n      return undefined\n    }\n  }\n  static getChatGptConfig(global:GlobalState,chatId:string,key:'api_key'|'max_history_length'|'init_system_content'|'modelConfig'){\n    // @ts-ignore\n    const aiBotConfig:PbChatGptBotConfig_Type = MsgCommandChatGpt.getAiBotConfig(global,chatId,\"chatGptConfig\")\n    if(aiBotConfig && aiBotConfig[key]){\n      return aiBotConfig[key]\n    }else{\n      if(key === \"modelConfig\"){\n        return ChatModelConfig\n      }\n      return \"\"\n    }\n  }\n\n  static getChatGptModelConfig(global:GlobalState,chatId:string,key:'model'|'temperature'|'max_tokens'|'presence_penalty'){\n    // @ts-ignore\n    const modelConfig:PbChatGptModelConfig_Type = MsgCommandChatGpt.getChatGptConfig(global,chatId,\"modelConfig\")\n    if(modelConfig && undefined !== modelConfig[key]){\n      return modelConfig[key]\n    }else{\n      return ChatModelConfig[key]\n    }\n  }\n  static changeAiBotConfig(global:GlobalState,botId:string,aiConfig:Partial<PbAiBot_Type>){\n    global = getGlobal();\n    const user = selectUser(global,botId);\n    global = updateUser(global,botId,{\n      ...user,\n      fullInfo:{\n        ...user?.fullInfo,\n        botInfo:{\n          ...user?.fullInfo?.botInfo!,\n          aiBot:{\n            ...user?.fullInfo?.botInfo?.aiBot,\n            ...aiConfig\n          }\n        }\n      }\n    })\n    setGlobal(global)\n  }\n  static changeChatGptConfig(botId:string,chatGptConfig:Partial<PbChatGpBotConfig_Type>){\n    let global = getGlobal();\n    const user = selectUser(global,botId);\n\n    MsgCommandChatGpt.changeAiBotConfig(global,botId,{\n      ...user?.fullInfo?.botInfo?.aiBot,\n      chatGptConfig:{\n        ...user?.fullInfo?.botInfo?.aiBot?.chatGptConfig,\n        ...chatGptConfig\n      }\n    })\n  }\n\n  static changeChatGptModelConfig(botId:string,chatGptModelConfig:Partial<PbChatGptModelConfig_Type>){\n    let global = getGlobal();\n    const user = selectUser(global,botId);\n    const modelConfig = MsgCommandChatGpt.getChatGptConfig(global,botId,\"modelConfig\")\n    MsgCommandChatGpt.changeChatGptConfig(botId,{\n      modelConfig:{\n        ...modelConfig,\n        ...chatGptModelConfig\n      }\n    })\n  }\n  async maxHistoryLength(){\n    const {chatId} = this\n    let max_history_length = MsgCommandChatGpt.getChatGptConfig(getGlobal(),chatId,\"max_history_length\")\n    const {value} = await showModalFromEvent({\n      initVal:(max_history_length||0).toString(),\n      title:\"请输入携带历史消息数\",\n      placeholder:\"每次提问携带历史消息数,当为 0 时不携带,须为偶数\"\n    })\n    if(value && value!== max_history_length){\n      max_history_length = isPositiveInteger(value) ? parseInt(value) : 0;\n      MsgCommandChatGpt.changeChatGptConfig(chatId,{max_history_length})\n      return await MsgDispatcher.newTextMessage(chatId,undefined,'修改成功')\n    }\n    return STOP_HANDLE_MESSAGE\n  }\n\n  async usage(){\n    const {chatId} = this\n    const api_key = MsgCommandChatGpt.getChatGptConfig(getGlobal(),chatId,\"api_key\")\n    if(api_key){\n      const msg = await MsgDispatcher.newTextMessage(chatId,undefined,'...')\n      try {\n        const {used,subscription} = await requestUsage(api_key)\n        await MsgDispatcher.updateMessage(chatId,msg.id,{\n          content:{\n            text:{\n              text:`本月已用: ${used} / 总: ${subscription} USD`\n            }\n          }\n        })\n      }catch (e){\n        console.error(e)\n        await MsgDispatcher.updateMessage(chatId,msg.id,{\n          content:{\n            text:{\n              text:`查询失败`\n            }\n          }\n        })\n      }\n    }else{\n      await MsgDispatcher.newTextMessage(chatId,undefined,'请先配置 /apiKey')\n    }\n    return STOP_HANDLE_MESSAGE\n  }\n  async apiKey(){\n    const {chatId} = this\n    const api_key = MsgCommandChatGpt.getChatGptConfig(getGlobal(),chatId,\"api_key\")\n    const {value} = await showModalFromEvent({\n      initVal:api_key,\n      title:\"请输入apiKey\"\n    })\n    if(value && value!== api_key){\n      localStorage.setItem(\"cg-key\",value)\n      MsgCommandChatGpt.changeChatGptConfig(chatId,{api_key:value})\n      return await MsgDispatcher.newTextMessage(chatId,undefined,'修改成功')\n    }\n    return STOP_HANDLE_MESSAGE\n  }\n  async reset(){\n    const global = getGlobal();\n    const {chatId} = this\n    setGlobal({\n      ...global,\n      aiReplyHistory:{\n        ...global.aiReplyHistory,\n        [chatId]:[]\n      }\n    })\n    await MsgDispatcher.newTextMessage(chatId,undefined,\"重置成功\")\n    return STOP_HANDLE_MESSAGE\n  }\n  async enableAi(){\n    const messageId = await MsgDispatcher.genMsgId();\n    const {chatId} = this\n    const isEnable = MsgCommandChatGpt.getAiBotConfig(getGlobal(),chatId,\"enableAi\")\n    const message:ApiMessage = {\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:`当前AI状态:【${isEnable ? \"开启\" : \"关闭\"}】，修改请点击下面按钮:`\n        }\n      },\n      inlineButtons:[\n        [\n          {\n            text:isEnable ? \"关闭\" : \"开启\",\n            type:\"callback\",\n            data:`${chatId}/enableAi/${isEnable ? \"0\":\"1\"}`\n          }\n        ]\n      ]\n    }\n    MsgDispatcher.newMessage(chatId,messageId,message)\n    return message\n  }\n\n  static getCustomApiInlineButtons(chatId:string,messageId:number){\n    const botApi = MsgCommandChatGpt.getAiBotConfig(getGlobal(),chatId,'botApi')\n    return [\n      [\n        ...MsgCommand.buildInlineCallbackButton(chatId,'setting/ai/setApi',botApi ? \"修改api\": \"设置api\"),\n        ...(botApi ? MsgCommand.buildInlineCallbackButton(chatId,'setting/ai/disableApi',\"禁用api\"):[]),\n        ...(botApi ? MsgCommand.buildInlineCallbackButton(chatId,'setting/ai/updateCmd',\"更新命令\"):[]),\n      ],\n      [\n        ...MsgCommand.buildInlineBackButton(chatId,messageId,'setting/ai/back',\"< 返回\"),\n      ]\n    ]\n  }\n  static async customApi(chatId:string,messageId:number){\n    await MsgDispatcher.newTextMessage(chatId,undefined,\"通过自定义api，可以使用单独的机器人api\",MsgCommandChatGpt.getCustomApiInlineButtons(chatId,messageId))\n  }\n  static async updateCmd(chatId:string,messageId:number){\n    const botApi = MsgCommandChatGpt.getAiBotConfig(getGlobal(),chatId,'botApi')\n    const res = await callApiWithPdu(new UpdateCmdReq({\n      botApi,\n      chatId,\n    }).pack())\n    if(res){\n      const {commands} = UpdateCmdRes.parseMsg(res.pdu)\n      MsgCommandChatGpt.changeAiBotConfig(getGlobal(),chatId,{\n        commandsFromApi:commands?.map(cmd=>{\n          return{\n            ...cmd,\n            botId:chatId\n          }\n        })\n      })\n      await MsgCommandChatGpt.reloadCommands(chatId)\n      await MsgDispatcher.newTextMessage(chatId,undefined,\"更新成功\")\n    }else{\n      await MsgDispatcher.newTextMessage(chatId,undefined,\"更新失败\")\n    }\n  }\n  static async disableApi(chatId:string,messageId:number){\n\n    MsgCommandChatGpt.changeAiBotConfig(getGlobal(),chatId,{\n      botApi:undefined\n    })\n    const inlineButtons = MsgCommandChatGpt.getCustomApiInlineButtons(chatId,messageId)\n    const message = selectChatMessage(getGlobal(),chatId,messageId)\n    MsgDispatcher.updateMessage(chatId,messageId, {\n        content: {\n          text: {\n            text: \"请输入api地址\"\n          }\n        },\n        inlineButtons: [\n          ...inlineButtons.slice(0,inlineButtons.length-1),\n          ...message!.inlineButtons!.slice(inlineButtons.length-1)\n        ]\n      }\n    )\n  }\n  static async setApi(chatId:string,messageId:number){\n    // @ts-ignore\n    let botApi:string | undefined = MsgCommandChatGpt.getAiBotConfig(getGlobal(),chatId,'botApi')\n    const {value} = await showModalFromEvent({\n      title:\"请输入api地址\",\n      initVal:botApi || \"\"\n    })\n    botApi = value;\n    MsgCommandChatGpt.changeAiBotConfig(getGlobal(),chatId,{\n      botApi:value\n    })\n    const inlineButtons = MsgCommandChatGpt.getCustomApiInlineButtons(chatId,messageId)\n    const message = selectChatMessage(getGlobal(),chatId,messageId)\n    MsgDispatcher.updateMessage(chatId,messageId, {\n        content: {\n          text: {\n            text:botApi ? `地址: ${botApi}` : \"请输入api地址\"\n          }\n        },\n        inlineButtons: [\n          ...inlineButtons.slice(0,inlineButtons.length-1),\n          ...message!.inlineButtons!.slice(inlineButtons.length-1)\n        ]\n      }\n    )\n  }\n  static getAiModelInlineButtons(chatId:string){\n\n    const modelConfig = MsgCommandChatGpt.getChatGptConfig(getGlobal(),chatId,\"modelConfig\")\n    const models =   ALL_CHAT_GPT_MODELS.filter(({name})=>name !== modelConfig.model).map(({name})=>{\n      return MsgCommand.buildInlineCallbackButton(chatId,\"model/switch/\"+name,\"# \"+name)\n    })\n    return [\n      [...MsgCommand.buildInlineCallbackButton(chatId,\"model/property/temperature\",\"> 随机性 (temperature): \"+modelConfig.temperature)],\n      [...MsgCommand.buildInlineCallbackButton(chatId,\"model/property/max_tokens\",\"> 单次回复限制 (max_tokens): \"+modelConfig.max_tokens)],\n      [...MsgCommand.buildInlineCallbackButton(chatId,\"model/property/presence_penalty\",\"> 话题新鲜度 (presence_penalty): \"+modelConfig.presence_penalty)],\n      [...MsgCommand.buildInlineButton(chatId,\"切换其他模型\",\"unsupported\")],\n      ...models\n    ]\n  }\n  async aiModel(){\n    const messageId = await MsgDispatcher.genMsgId();\n    const {chatId} = this\n    const modelConfig = MsgCommandChatGpt.getChatGptConfig(getGlobal(),chatId,\"modelConfig\")\n    const inlineButtons:ApiKeyboardButtons = MsgCommandChatGpt.getAiModelInlineButtons(chatId);\n    const message:ApiMessage = {\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:`当前模型:【${modelConfig.model}】`\n        }\n      },\n      inlineButtons\n    }\n    MsgDispatcher.newMessage(chatId,messageId,message)\n    return message\n  }\n  static async handleChangeModelConfig(chatId:string,messageId:number,key:'model'|'temperature'|'max_tokens'|'presence_penalty'){\n    const val:any = MsgCommandChatGpt.getChatGptModelConfig(getGlobal(),chatId,key)\n    let title = \"\";\n    let placeholder = \"\";\n    let step = 1;\n    let max = 2;\n    let min = 0;\n    switch (key){\n      case \"temperature\":\n        step = 0.1;\n        title = \"随机性 (temperature)\";\n        placeholder = \"值越大，回复越随机\";\n        break\n      case \"max_tokens\":\n        step = 1;\n        max = 4096\n        min = 100;\n        title = \"单次回复限制 (max_tokens)\";\n        placeholder = \"单次交互所用的最大 Token 数\";\n        break\n      case \"presence_penalty\":\n        step = 0.5;\n        max = 2\n        min = -2;\n        title = \"话题新鲜度 (presence_penalty)\";\n        placeholder = \"值越大，越有可能扩展到新话题\";\n        break\n    }\n    const initVal = val === 0 ? \"0\" : val\n    const {value} = await showModalFromEvent({\n      title,\n      placeholder,\n      type:'singleInput',\n      inputType:\"number\",\n      initVal,\n      step,\n      min,\n      max\n    })\n\n    if(value !== val){\n      MsgCommandChatGpt.changeChatGptModelConfig(chatId,{\n        [key]:Number(value)\n      })\n    }\n    const inlineButtons:ApiKeyboardButtons = MsgCommandChatGpt.getAiModelInlineButtons(chatId)\n    MsgDispatcher.updateMessage(chatId,messageId,{\n      inlineButtons\n    })\n\n  }\n  static async switch(global:GlobalState,chatId:string,messageId:number,data:string){\n    const model = data.replace(`${chatId}/model/switch/`,\"\")\n    MsgCommandChatGpt.changeChatGptModelConfig(chatId,{\n      model\n    })\n    const inlineButtons:ApiKeyboardButtons = MsgCommandChatGpt.getAiModelInlineButtons(chatId)\n    MsgDispatcher.updateMessage(chatId,messageId,{\n      content:{\n        text:{\n          text:`当前模型:【${model}】`\n        }\n      },\n      inlineButtons\n    })\n  }\n  static async answerCallbackButton(global:GlobalState,chatId:string,messageId:number,data:string){\n    if(data.startsWith(`${chatId}/setting/ai/back`)){\n      await MsgCommand.back(global,chatId,messageId,data,\"setting/ai/back\")\n      return\n    }\n    if(data.startsWith(`${chatId}/model/switch`)){\n      await MsgCommandChatGpt.switch(global,chatId,messageId,data)\n      return\n    }\n    switch (data){\n      case `${chatId}/model/property/temperature`:\n        await MsgCommandChatGpt.handleChangeModelConfig(chatId,messageId,\"temperature\")\n        return\n      case `${chatId}/model/property/max_tokens`:\n        await MsgCommandChatGpt.handleChangeModelConfig(chatId,messageId,\"max_tokens\")\n        return\n      case `${chatId}/model/property/presence_penalty`:\n        await MsgCommandChatGpt.handleChangeModelConfig(chatId,messageId,\"presence_penalty\")\n        return\n      case `${chatId}/setting/ai/disableApi`:\n        await MsgCommandChatGpt.disableApi(chatId,messageId)\n        return\n      case `${chatId}/setting/ai/setApi`:\n        await MsgCommandChatGpt.setApi(chatId,messageId)\n        return\n      case `${chatId}/setting/ai/updateCmd`:\n        await MsgCommandChatGpt.updateCmd(chatId,messageId)\n        return\n      case `${chatId}/setting/ai/customApi`:\n        await MsgCommandChatGpt.customApi(chatId,messageId)\n        return\n      case `${chatId}/setting/ai/toggleClearHistory`:\n        await MsgCommandChatGpt.toggleClearHistory(chatId,messageId)\n        return\n      case `${chatId}/setting/uploadUser`:\n        await MsgCommand.uploadUser(global,chatId)\n        break\n      case `${chatId}/setting/downloadUser`:\n        await MsgCommand.downloadUser(global,chatId)\n        break\n      case `${chatId}/setting/ai/clearHistory`:\n        await MsgCommand.clearHistory(chatId)\n        break\n      case `${chatId}/setting/ai/reloadCommands`:\n        await MsgCommandChatGpt.reloadCommands(chatId)\n        break\n      case `${chatId}/requestChatStream/stop`:\n        MsgDispatcher.updateMessage(chatId,messageId, {\n          inlineButtons:[\n            [\n              {\n                text: \"已停止输出\",\n                type: \"unsupported\"\n              }\n            ]\n          ]\n        })\n        await callApiWithPdu(new StopChatStreamReq({\n          chatId:parseInt(chatId),\n          msgId:messageId\n        }).pack())\n        break\n      case `${chatId}/init_system_content`:\n        global = getGlobal();\n        let init_system_content = MsgCommandChatGpt.getChatGptConfig(global,chatId,\"init_system_content\")\n        const {value} = await showModalFromEvent({\n          type:\"singleInput\",\n          title:\"请输入 上下文记忆\",\n          placeholder:\"每次请求都会带入 上下文记忆\",\n          initVal:init_system_content\n        });\n        if(value){\n          init_system_content = value\n          MsgCommandChatGpt.changeChatGptConfig(chatId,{\n            init_system_content:value\n          })\n          const message1 = {\n            content:{\n              text:{\n                text:`${init_system_content?init_system_content:\"未设置\"}`\n              }\n            },\n            inlineButtons:[\n              [\n                {\n                  text:\"点击修改 初始化 Prompt\",\n                  type:\"callback\",\n                  data:`${chatId}/init_system_content`\n                }\n              ]\n            ]\n          }\n          // @ts-ignore\n          MsgDispatcher.newMessage(chatId,messageId,message1)\n        }\n\n        break;\n      case `${chatId}/apiKey`:\n        const res = await showModalFromEvent({\n          type:\"singleInput\",\n          title:\"请输入 ApiKey\",\n          placeholder:\"\"\n        });\n        let api_key = res.value\n        if(api_key){\n          global = getGlobal();\n          const user = selectUser(global,chatId);\n          global = updateUser(global,chatId,{\n            ...user,\n            fullInfo:{\n              ...user?.fullInfo,\n              botInfo:{\n                ...user?.fullInfo?.botInfo!,\n                aiBot:{\n                  ...user?.fullInfo?.botInfo?.aiBot,\n                  chatGptConfig:{\n                    ...user?.fullInfo?.botInfo?.aiBot?.chatGptConfig,\n                    api_key\n                  }\n                }\n              }\n            }\n          })\n          setGlobal(global)\n          if(api_key){\n            api_key = \"```\\n\"+api_key+\"```\";\n          }\n          const message2 = {\n            content:{\n              text:{\n                text:`当前 /apiKey:\\n ${api_key? api_key:\"未设置\"}`\n              }\n            },\n            inlineButtons:[\n              [\n                {\n                  text:\"点击修改 apiKey\",\n                  type:\"callback\",\n                  data:`${chatId}/apiKey`\n                }\n              ]\n            ]\n          }\n          // @ts-ignore\n          MsgDispatcher.newMessage(chatId,messageId,message2)\n        }\n\n        break;\n      case `${chatId}/setting/ai/enable/1`:\n      case `${chatId}/setting/ai/enable/0`:\n        const isEnable = data === `${chatId}/setting/ai/enable/1`;\n        MsgCommandChatGpt.changeAiBotConfig(global,chatId,{\n          enableAi:isEnable\n        })\n        await MsgCommandChatGpt.reloadCommands(chatId)\n        MsgDispatcher.updateMessage(chatId,messageId,{\n          inlineButtons:MsgCommandChatGpt.getInlineButtons(chatId,)\n        })\n        break\n    }\n  }\n  static getCommands(chatId:string){\n    const commandsFromApi = MsgCommandChatGpt.getAiBotConfig(getGlobal(),chatId,'commandsFromApi')\n    const isEnable = MsgCommandChatGpt.getAiBotConfig(getGlobal(),chatId,\"enableAi\");\n    let commands = [...DEFAULT_BOT_COMMANDS]\n    if(isEnable){\n      commands = [...commands,...DEFAULT_CHATGPT_AI_COMMANDS]\n    }\n    if(commandsFromApi){\n      // @ts-ignore\n      commands = [...commands,...commandsFromApi]\n    }\n    return commands\n  }\n  private static async reloadCommands(chatId:string) {\n    await MsgCommand.reloadCommands(chatId,MsgCommandChatGpt.getCommands(chatId))\n  }\n}\n","import MsgDispatcher from \"./MsgDispatcher\";\nimport {ApiBotInfo, ApiKeyboardButtons, ApiMessage} from \"../../api/types\";\nimport {DEFAULT_BOT_COMMANDS, UserIdChatGpt, UserIdCnPrompt, UserIdEnPrompt, UserIdFirstBot} from \"../setting\";\nimport {GlobalState} from \"../../global/types\";\nimport {showModalFromEvent} from \"../share/utils/modal\";\nimport {getActions, getGlobal, setGlobal} from \"../../global\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {DEBUG} from \"../../config\";\nimport {selectChatMessage} from \"../../global/selectors\";\nimport {updateChat} from \"../../global/reducers\";\n\nexport default class MsgCommandChatLab{\n  private chatId: string;\n  private botInfo: ApiBotInfo;\n  constructor(chatId:string,botInfo:ApiBotInfo) {\n    this.chatId = chatId\n    this.botInfo = botInfo;\n  }\n  static getInlineButtonsDemo():ApiKeyboardButtons{\n    return [\n\n      [\n        {\n          text:\"command button\",\n          type:'command'\n        },\n        {\n          text:\"unsupported button\",\n          type:'unsupported'\n        },\n        {\n          text:\"buy button\",\n          type:'buy'\n        }\n      ],\n      [\n        {\n          text:\"game button\",\n          type:'game'\n        },\n        {\n          text:\"requestPhone button\",\n          type:'requestPhone'\n        }\n      ],\n      [\n        {\n          text:\"receipt button\",\n          type:'receipt',\n          receiptMessageId:1\n        },\n      ],\n      [\n        {\n          text:\"url button\",\n          type:'url',\n          url:\"http://www.ai.com\"\n        },\n      ],\n      [\n        {\n          text:\"simpleWebView button\",\n          type:'simpleWebView',\n          url:\"http://www.ai.com\"\n        },\n        {\n          text:\"webView button\",\n          type:'webView',\n          url:\"http://www.ai.com\"\n        },\n      ],\n      [\n        {\n          text:\"requestPoll button\",\n          type:'requestPoll',\n          isQuiz:true\n        },\n        {\n          text:\"switchBotInline button\",\n          type:'switchBotInline',\n          query: \"\",\n          isSamePeer: false\n        },\n        {\n          text:\"userProfile button\",\n          type:'userProfile',\n          userId: UserIdFirstBot,\n        },\n      ],\n      [\n        {\n          text:\"requestUploadImage button\",\n          type:'requestUploadImage',\n        },\n      ]\n    ]\n  }\n  static async createChat(botId:string,data:string,msgId:number){\n    const t = data.split(\"/\")\n    const chatId = t[0]\n    const title = t[3]\n    const message = selectChatMessage(getGlobal(),chatId,msgId)\n    if(message){\n      const prompt = message.content.text!.text\n      getActions().createChat({title,promptInit:prompt})\n    }\n  }\n  static async createChatGpt(id:string){\n    let name = \"ChatGpt\";\n    let needCreate = true;\n    let global = getGlobal();\n    if(global.chats.byId[id]){\n      const chat = global.chats.byId[id];\n      if(chat.isNotJoined){\n        delete global.chats.byId[id]\n        delete global.users.byId[id]\n        setGlobal(global)\n      }else{\n        needCreate = false\n      }\n    }\n    if(!needCreate){\n      getActions().openChat({id,shouldReplaceHistory:true})\n      return MsgDispatcher.showNotification(`${name} 已创建`)\n    }\n    getActions().createChat({id,title:name})\n  }\n  static async createPromptChat(chatId:string,id:string){\n    let name: string;\n    const prompts = require('./prompts.json')\n    let tag: string;\n    if(id === UserIdEnPrompt){\n      name = \"英文Prompt大全\"\n      tag = 'en'\n    }else{\n      name = \"中文Prompt大全\"\n      tag = 'cn'\n    }\n    let needCreate = true;\n    let global = getGlobal();\n    if(global.chats.byId[id]){\n      const chat = global.chats.byId[id];\n      if(chat.isNotJoined){\n        delete global.chats.byId[id]\n        delete global.users.byId[id]\n        setGlobal(global)\n      }else{\n        needCreate = false\n      }\n    }\n    if(!needCreate){\n      getActions().openChat({id,shouldReplaceHistory:true})\n      return MsgDispatcher.showNotification(`${name} 已创建`)\n    }\n    const promptRows = prompts[tag]\n    getActions().createChat({id,title:name})\n    const msg0 = await MsgDispatcher.newTextMessage(chatId,undefined,\"正在创建 \"+name+\"...\")\n    setTimeout(async ()=>{\n      promptRows.reverse();\n      for (let i = 0; i < promptRows.length; i++) {\n        const desc = promptRows[i][1]\n        const title = promptRows[i][0]\n        if(desc){\n          await MsgDispatcher.newTextMessage(id,undefined,desc,[\n            [\n              {\n                text:\"创建Gpt聊天\",\n                type:\"callback\",\n                data:`${id}/createChat/${tag}/${title}`\n              }\n            ]\n          ])\n          await MsgDispatcher.updateMessage(chatId,msg0.id,{\n            ...msg0,\n            content:{\n              text:{\n                text:`正在创建 ${name}... ${i+1}/${promptRows.length}`\n              }\n            }\n          })\n        }\n\n      }\n    },500)\n  }\n  static async answerCallbackButton(global:GlobalState,chatId:string,messageId:number,data:string){\n\n    if(data.startsWith(`${chatId}/createChat/cn`)){\n      await MsgCommandChatLab.createChat(UserIdCnPrompt,data,messageId)\n      return\n    }\n    if(data.startsWith(`${chatId}/createChat/en`)){\n      await MsgCommandChatLab.createChat(UserIdEnPrompt,data,messageId)\n      return\n    }\n    switch (data){\n      case `${chatId}/lab/createChatGpt`:\n        await MsgCommandChatLab.createChatGpt(UserIdChatGpt)\n        break\n      case `${chatId}/lab/createEnPrompt`:\n        await MsgCommandChatLab.createPromptChat(chatId,UserIdEnPrompt)\n        break\n      case `${chatId}/lab/createCnPrompt`:\n        await MsgCommandChatLab.createPromptChat(chatId,UserIdCnPrompt)\n        break\n      case `${chatId}/lab/InlineButs`:\n        await MsgDispatcher.newTextMessage(chatId,undefined,\"\",MsgCommandChatLab.getInlineButtonsDemo())\n        break\n\n      case `${chatId}/lab/dumpUsers`:\n        if(DEBUG){\n          await MsgDispatcher.newCodeMessage(chatId,undefined,JSON.stringify(global.messages.byChatId[chatId],null,2))\n        }\n        break\n      case `${chatId}/lab/testMsg`:\n        const {value} = await showModalFromEvent({\n          title: \"输入JSON 格式的 msg\", type: \"singleInput\"\n        })\n        try {\n          if(value){\n            const testMsg = async (value:string)=>{\n              const message:ApiMessage = JSON.parse(value);\n              message.chatId = chatId;\n              message.id = await MsgDispatcher.genMsgId();\n              message.isOutgoing = false\n              message.senderId = chatId\n              message.date = currentTs()\n              await MsgDispatcher.newMessage(chatId,message.id,message)\n            }\n            await testMsg(value);\n          }\n        }catch (e){\n          getActions().showNotification({\n            message:\"解析失败\"\n          })\n        }\n        break\n    }\n  }\n  async lab(){\n    const messageId = await MsgDispatcher.genMsgId();\n    return await MsgDispatcher.newTextMessage(this.chatId,messageId,\"实验室\",[\n      [\n        {\n          data:`${this.chatId}/lab/createChatGpt`,\n          text:\"创建ChatGpt机器人\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${this.chatId}/lab/createCnPrompt`,\n          text:\"中文Prompt大全\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${this.chatId}/lab/createEnPrompt`,\n          text:\"英文Prompt大全\",\n          type:\"callback\"\n        },\n      ],\n      // [\n      //   {\n      //     data:`${this.chatId}/lab/dumpUsers`,\n      //     text:\"DumpUsers\",\n      //     type:\"callback\"\n      //   },\n      // ],\n      // [\n      //   {\n      //     data:`${this.chatId}/lab/InlineButs`,\n      //     text:\"InlineButs Demo\",\n      //     type:\"callback\"\n      //   },\n      // ],\n        // [\n        //   {\n        //     data:`${this.chatId}/temp/PromptDemo`,\n        //     text:\"PromptDemo\",\n        //     type:\"callback\"\n        //   },\n        // ],\n    ])\n  }\n\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SyncReq_Type } from './types';\n\nexport default class SyncReq extends BaseMsg {\n  public msg?: SyncReq_Type\n  constructor(msg?: SyncReq_Type) {\n    super('PTP.Sync.SyncReq', msg);\n    this.setCommandId(ActionCommands.CID_SyncReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SyncReq_Type {\n    return new SyncReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SyncRes_Type } from './types';\n\nexport default class SyncRes extends BaseMsg {\n  public msg?: SyncRes_Type\n  constructor(msg?: SyncRes_Type) {\n    super('PTP.Sync.SyncRes', msg);\n    this.setCommandId(ActionCommands.CID_SyncRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SyncRes_Type {\n    return new SyncRes().decode(pdu.body());\n  }\n}\n","import MsgDispatcher from \"./MsgDispatcher\";\nimport {selectChatMessage, selectChatMessages, selectUser} from \"../../global/selectors\";\nimport {addChats, addUsers, updateChatListIds, updateUser} from \"../../global/reducers\";\nimport {getActions, getGlobal, setGlobal} from \"../../global\";\nimport {ApiKeyboardButtons, ApiUser} from \"../../api/types\";\nimport {callApiWithPdu} from \"./utils\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {\n  MessageStoreRow_Type,\n  PbMsg_Type,\n  QrCodeType,\n  UserStoreData_Type,\n  UserStoreRow_Type\n} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport {DownloadMsgReq, DownloadMsgRes, UploadMsgReq} from \"../../lib/ptp/protobuf/PTPMsg\";\nimport {DownloadUserReq, DownloadUserRes, UploadUserReq} from \"../../lib/ptp/protobuf/PTPUser\";\nimport Mnemonic from \"../../lib/ptp/wallet/Mnemonic\";\nimport Account from \"../share/Account\";\nimport {AuthNativeReq} from \"../../lib/ptp/protobuf/PTPAuth\";\nimport {GlobalState} from \"../../global/types\";\nimport {getPasswordFromEvent} from \"../share/utils/password\";\nimport {hashSha256} from \"../share/utils/helpers\";\nimport {SyncReq, SyncRes} from \"../../lib/ptp/protobuf/PTPSync\";\nimport MsgCommand from \"./MsgCommand\";\nimport {Decoder} from \"@nuintun/qrcode\";\nimport {PbQrCode} from \"../../lib/ptp/protobuf/PTPCommon\";\nimport {Pdu} from \"../../lib/ptp/protobuf/BaseMsg\";\nimport {aesDecrypt} from \"../../util/passcode\";\nimport {DEBUG} from \"../../config\";\nimport {DEFAULT_BOT_COMMANDS, DEFAULT_START_TIPS, UserIdCnPrompt, UserIdEnPrompt} from \"../setting\";\nimport MsgCommandChatLab from \"./MsgCommandChatLab\";\n\nlet currentSyncBotContext:string|undefined;\n\nexport default class MsgCommandSetting{\n  static async start(chatId:string){\n    await MsgCommand.reloadCommands(chatId,DEFAULT_BOT_COMMANDS)\n    const messageId = await MsgDispatcher.genMsgId();\n    const text = DEFAULT_START_TIPS\n    return MsgDispatcher.newMessage(chatId,messageId,{\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text\n        }\n      },\n    })\n  }\n  static async setting(chatId:string){\n    const account = Account.getCurrentAccount();\n    const isEnableSync = account?.getSession();\n    const messageId = await MsgDispatcher.genMsgId();\n    await MsgCommand.reloadCommands(chatId,DEFAULT_BOT_COMMANDS)\n    return MsgDispatcher.newMessage(chatId,messageId,{\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      content:{\n        text:{\n          text:\"设置面板\"\n        }\n      },\n      inlineButtons:MsgCommandSetting.getInlineButtons(chatId,!!isEnableSync),\n    })\n  }\n  static getInlineButtons(chatId:string,isEnableSync:boolean):ApiKeyboardButtons{\n    const res:ApiKeyboardButtons = isEnableSync ? [\n      [\n        {\n          text:\"云同步\",\n          data:`${chatId}/setting/cloud`,\n          type:\"callback\"\n        },\n        {\n          text:\"切换账户\",\n          data:`${chatId}/setting/switchAccount`,\n          type:\"callback\"\n        },\n        {\n          text:\"清除历史记录\",\n          data:`${chatId}/setting/clearHistory`,\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${chatId}/setting/createCnPrompts`,\n          text:\"创建中文Prompts大全\",\n          type:\"callback\"\n        },\n        {\n          data:`${chatId}/setting/createEnPrompts`,\n          text:\"创建英文Prompts大全\",\n          type:\"callback\"\n        },\n      ],\n\n      [\n        {\n          data:`${chatId}/setting/cancel`,\n          text:\"取消\",\n          type:\"callback\"\n        },\n      ],\n    ]:[\n      [\n        {\n          text:\"切换账户\",\n          data:`${chatId}/setting/switchAccount`,\n          type:\"callback\"\n        },\n        {\n          text:\"清除历史记录\",\n          data:`${chatId}/setting/clearHistory`,\n          type:\"callback\"\n        },\n      ],\n\n      [\n        {\n          data:`${chatId}/setting/createCnPrompts`,\n          text:\"创建中文Prompts大全\",\n          type:\"callback\"\n        },\n        {\n          data:`${chatId}/setting/createEnPrompts`,\n          text:\"创建英文Prompts大全\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${chatId}/setting/cancel`,\n          text:\"取消\",\n          type:\"callback\"\n        },\n      ],\n    ]\n    if(DEBUG){\n      res.push(MsgCommand.buildInlineCallbackButton(chatId,\"setting/debug\",\"Debug\",'callback'))\n    }\n    return res;\n  }\n  static async requestUploadImage(global:GlobalState,chatId:string,messageId:number,files:FileList | null){\n    if(files && files.length > 0){\n      const file = files[0]\n      const qrcode = new Decoder();\n      const blob = new Blob([file], { type: file.type });\n      const blobUrl = URL.createObjectURL(blob);\n      try {\n        const result = await qrcode.scan(blobUrl)\n        if(result && result.data.startsWith('wai://')){\n          const mnemonic =  result.data\n          const qrcodeData = mnemonic.replace('wai://','')\n          const qrcodeDataBuf = Buffer.from(qrcodeData,'hex')\n          const decodeRes = PbQrCode.parseMsg(new Pdu(qrcodeDataBuf))\n          if(decodeRes){\n            const {type,data} = decodeRes;\n            if(type !== QrCodeType.QrCodeType_MNEMONIC){\n              throw new Error(\"解析二维码失败\")\n            }\n            const {password} = await getPasswordFromEvent(undefined,true);\n            const res = await aesDecrypt(data,Buffer.from(hashSha256(password),\"hex\"))\n            if(res){\n              await MsgCommandSetting.setMnemonic(chatId,res,password);\n              return;\n            }\n          }\n        }\n      }catch (e){\n      }finally {\n        getActions().showNotification({message:\"解析二维码失败\"})\n      }\n    }\n  }\n\n  static async setMnemonic(chatId:string,data:string,password?:string){\n    const mnemonic = new Mnemonic(data)\n    if(mnemonic.checkMnemonic()){\n      await MsgCommand.sendText(chatId,mnemonic.toEntropy())\n      if(!password){\n        const res = await getPasswordFromEvent(undefined,true)\n        if(res.password){\n          password = res.password\n        }else{\n          return\n        }\n      }\n      if(password){\n        const entropy = mnemonic.toEntropy();\n        let accountId = Account.getAccountIdByEntropy(entropy);\n        if(!accountId){\n          accountId = Account.genAccountId()\n        }\n        const account = Account.getInstance(accountId);\n        Account.setCurrentAccountId(accountId);\n        await account?.setEntropy(entropy)\n        const pwd = hashSha256(password)\n        const ts = +(new Date());\n        const {address, sign} = await account!.signMessage(ts.toString(), pwd);\n        const session = Account.formatSession({address,sign,ts,accountId});\n        account!.saveSession(session)\n        await callApiWithPdu(new AuthNativeReq({\n          accountId,entropy:mnemonic.toEntropy(),session\n        }).pack())\n        window.location.reload()\n      }\n    }else{\n      await MsgCommand.sendText(chatId,\"mnemonic 不合法\")\n    }\n  }\n  static async switchAccount(chatId:string,messageId:number,data:string){\n    const accountAddress = data.replace(`${chatId}/setting/switchAccount/account/`,'')\n    const keys = Account.getKeys();\n    const sessions = Account.getSessions();\n    const global = getGlobal();\n    if(sessions && Object.keys(sessions).length > 0){\n      for (let i = 0; i < Object.keys(sessions).length; i++) {\n        const session = sessions[Object.keys(sessions)[i]]\n        const res = Account.parseSession(session)\n        if(res?.address === accountAddress){\n          const accountId = res.accountId;\n          const account = Account.getInstance(accountId);\n          if(keys[accountId]){\n            const entropy = keys[accountId]\n            account?.setEntropy(entropy,true)\n            const {password} = await getPasswordFromEvent(undefined,true)\n            if(password){\n              const resVerify = await account?.verifySession(session,password);\n              if(resVerify){\n                Account.setCurrentAccountId(accountId)\n                return await MsgCommandSetting.enableSync(global,chatId,messageId,password)\n              }else{\n                return MsgDispatcher.showNotification(\"密码不正确!\")\n              }\n            }\n            break\n          }\n        }\n      }\n    }else{\n      const {password} = await getPasswordFromEvent(undefined,true)\n      if(password){\n        return await MsgCommandSetting.enableSync(global,chatId,messageId,password)\n      }\n    }\n\n  }\n  static async answerCallbackButton(global:GlobalState,chatId:string,messageId:number,data:string){\n    if(data.startsWith(`${chatId}/setting/switchAccount/account/`)){\n      return await MsgCommandSetting.switchAccount(chatId,messageId,data)\n    }\n    if(data.startsWith(`${chatId}/setting/back`)){\n      MsgCommand.back(global,chatId,messageId,data,\"setting/back\")\n      return\n    }\n    if(data.startsWith(`${chatId}/setting/switchAccount/back/`)){\n      const inlineButtons = JSON.parse(data.replace(`${chatId}/setting/switchAccount/back/`,\"\"))\n      return MsgDispatcher.updateMessage(chatId,messageId,{\n        ...selectChatMessage(global,chatId,messageId),\n        content:{\n          text:{\n            text:\"设置面板\"\n          }\n        },\n        inlineButtons\n      })\n    }\n\n    switch (data){\n      case `${chatId}/setting/createCnPrompts`:\n        await MsgCommandChatLab.createPromptChat(chatId,UserIdCnPrompt);\n        break\n      case `${chatId}/setting/createEnPrompts`:\n        await MsgCommandChatLab.createPromptChat(chatId,UserIdEnPrompt);\n        break\n      case `${chatId}/setting/cloud`:\n        await MsgDispatcher.updateMessage(chatId,messageId,{\n          inlineButtons:[\n            [\n              {\n                data:`${chatId}/setting/uploadFolder`,\n                text:\"上传对话\",\n                type:\"callback\"\n              },\n              {\n                data:`${chatId}/setting/downloadFolder`,\n                text:\"下载对话\",\n                type:\"callback\"\n              },\n            ],\n            MsgCommand.buildInlineBackButton(chatId,messageId,'setting/back',\"< 返回\")\n          ],\n        })\n        break\n      case `${chatId}/setting/clearHistory`:\n        await MsgCommand.clearHistory(chatId)\n        break\n      case `${chatId}/setting/reloadCommand`:\n        await MsgCommand.reloadCommands(chatId,DEFAULT_BOT_COMMANDS)\n        break\n      case `${chatId}/setting/debug`:\n        if(DEBUG){\n          console.log(\"=========>>>【start】\",{\n            users:global.users,\n            chats:global.chats,\n            chatIdsDeleted:global.chatIdsDeleted,\n            messages:global.messages,\n            chatFolders:global.chatFolders,\n          })\n        }\n        // await MsgDispatcher.newJsonMessage(chatId,undefined,{chatFolders:global.chatFolders})\n        // await MsgDispatcher.newJsonMessage(chatId,undefined,{chatIdsDeleted:global.chatIdsDeleted})\n        await MsgCommand.createWsBot(chatId)\n        break\n      case `${chatId}/setting/getSession`:\n        const account = Account.getCurrentAccount();\n        const entropy = await account?.getEntropy();\n        const session = account?.getSession()\n        if(session){\n          const {address} = Account.parseSession(session)!\n          await MsgCommand.sendText(chatId,address)\n        }\n        break\n      case `${chatId}/setting/uploadFolder`:\n        const message1 = await MsgDispatcher.newTextMessage(chatId,undefined,\"正在上传...\")\n        await MsgCommandSetting.syncFolders(true)\n        await MsgDispatcher.updateMessage(chatId,message1.id,{\n          content:{\n            text:{\n              text:\"上传成功\"\n            }\n          }\n        })\n        break\n      case `${chatId}/setting/downloadFolder`:\n        const message2 = await MsgDispatcher.newTextMessage(chatId,undefined,\"正在下载...\")\n        await MsgCommandSetting.syncFolders(false)\n        await MsgDispatcher.updateMessage(chatId,message2.id,{\n          content:{\n            text:{\n              text:\"下载成功\"\n            }\n          }\n        })\n        break\n      case `${chatId}/setting/syncMessage`:\n        getActions().updateGlobal({\n          showPickBotModal:true\n        })\n        break\n      case `${chatId}/setting/uploadMessages`:\n      case `${chatId}/setting/downloadMessages`:\n        currentSyncBotContext = data;\n        getActions().updateGlobal({\n          showPickBotModal:true\n        })\n        break\n      case `${chatId}/setting/switchAccount`:\n        const address = Account.getCurrentAccount()?.getSessionAddress()\n        const sessions = Account.getSessions()\n        const accountAddresses = Object.keys(sessions)\n          .filter(adr=>{\n            return sessions[adr].split(\"_\").length === 4 && sessions[adr].split(\"_\")[3] !== \"undefined\"\n          })\n          .filter(adr=>adr !== address)\n\n        if(address){\n          await MsgDispatcher.updateMessage(chatId,messageId,{\n            ...selectChatMessage(global,chatId,messageId),\n            content:{\n              text:{\n                text:\"当前账户:\\n```\\n\"+address+\"```\"\n              }\n            },\n            inlineButtons:[\n              MsgCommand.buildInlineCallbackButton(chatId,\"setting/showMnemonic\",\"导出此账户\",'callback'),\n              accountAddresses.length>0 ?MsgCommand.buildInlineButton(chatId,\"其他账户:\",'unsupported'):[],\n              ...accountAddresses.map(address=>MsgCommand.buildInlineCallbackButton(chatId,\"setting/switchAccount/account/\"+address,` ${address}`,'callback')),\n              MsgCommand.buildInlineButton(chatId,\"\",'unsupported'),\n              MsgCommand.buildInlineCallbackButton(chatId,\"setting/enableSync\",\"密码登录\",'callback'),\n              MsgCommand.buildInlineButton(chatId,\"二维码导入\",'requestUploadImage'),\n              MsgCommand.buildInlineCallbackButton(chatId,\"setting/disableSync\",\"单机模式\",'callback'),\n              MsgCommand.buildInlineCallbackButton(chatId,\"setting/switchAccount/back/\"+JSON.stringify(selectChatMessage(global,chatId,messageId)?.inlineButtons),\"< 返回\",'callback')\n            ]\n          })\n        }else {\n          await MsgDispatcher.updateMessage(chatId,messageId,{\n            ...selectChatMessage(global,chatId,messageId),\n            content:{\n              text:{\n                text:\"当前模式：单机\"\n              }\n            },\n            inlineButtons:[\n              MsgCommand.buildInlineButton(chatId,\" 二维码导入 \",'requestUploadImage'),\n              MsgCommand.buildInlineCallbackButton(chatId,\"setting/enableSync\",\" 密码登录 \",'callback'),\n              MsgCommand.buildInlineCallbackButton(chatId,\"setting/switchAccount/back/\"+JSON.stringify(selectChatMessage(global,chatId,messageId)?.inlineButtons),\"< 返回\",'callback')\n            ]\n          })\n        }\n\n        break\n      case `${chatId}/setting/showMnemonic`:\n        getActions().updateGlobal({\n          showMnemonicModal:true\n        })\n        break\n      case `${chatId}/setting/cancel`:\n        MsgDispatcher.updateMessage(chatId,messageId,{\n          inlineButtons:[],\n        })\n        break\n      case `${chatId}/setting/disableSync`:\n        await MsgCommandSetting.disableSync(global,chatId,messageId)\n        break\n      case `${chatId}/setting/enableSync`:\n        const {password} = await getPasswordFromEvent(undefined,true)\n        if(password){\n          await MsgCommandSetting.enableSync(global,chatId,messageId,password)\n        }\n        break\n    }\n  }\n\n  static buildDefaultChat(user:ApiUser){\n    return {\n      \"id\": user.id,\n      \"title\":  user.firstName,\n      \"type\": \"chatTypePrivate\",\n      \"isMuted\": false,\n      \"isMin\": false,\n      \"hasPrivateLink\": false,\n      \"isSignaturesShown\": false,\n      \"isVerified\": true,\n      \"isJoinToSend\": true,\n      \"isJoinRequest\": true,\n      lastMessage:{\n        id:0,\n        chatId:user.id,\n        isOutgoing:false,\n        date:Math.ceil(+(new Date)/1000),\n        content:{\n          action:{\n            type:\"chatCreate\",\n            text:\"\",\n          }\n        }\n      },\n      \"isForum\": false,\n      \"isListed\": true,\n      \"settings\": {\n        \"isAutoArchived\": false,\n        \"canReportSpam\": false,\n        \"canAddContact\": false,\n        \"canBlockContact\": false\n      },\n      \"accessHash\": \"\"\n    }\n  }\n  static async syncFolders(isUpload:boolean){\n    let global = getGlobal();\n    const chats = global.chats.byId\n    const chatIds = Object.keys(chats).filter(id=>id !== \"1\");\n    const chatIdsDeleted:string[] = global.chatIdsDeleted;\n    console.log(\"【local】\",{chatIds,chatIdsDeleted})\n    const userStoreData:UserStoreData_Type|undefined = isUpload ?{\n      time:currentTs(),\n      chatFolders:JSON.stringify(global.chatFolders),\n      chatIds,\n      chatIdsDeleted\n    } :undefined\n\n    const res = await callApiWithPdu(new SyncReq({\n      userStoreData\n    }).pack())\n    const syncRes = SyncRes.parseMsg(res!.pdu)\n\n    let users:UserStoreRow_Type[] = [];\n    if(isUpload){\n      for (let index = 0; index < chatIds.length; index++) {\n        const userId = chatIds[index];\n        const user = selectUser(global,userId);\n        if(user?.photos && user.photos[0] === null){\n          user.photos = []\n        }\n        users.push({\n          time:currentTs(),\n          userId,\n          user\n        })\n      }\n\n      await callApiWithPdu(new UploadUserReq({\n        users,\n        time:currentTs()\n      }).pack())\n    }\n\n    if(syncRes.userStoreData){\n      let {chatFolders,...res} = syncRes.userStoreData\n      console.log(\"【remote userStoreData】\",res,\"chatFolders:\",chatFolders ? JSON.parse(chatFolders):[])\n      if(!chatFolders){\n        // @ts-ignore\n        chatFolders = global.chatFolders\n      }else{\n        chatFolders = JSON.parse(chatFolders)\n      }\n      res.chatIdsDeleted?.forEach(id=>{\n        if(!chatIdsDeleted.includes(id)){\n          chatIdsDeleted.push(id)\n        }\n      })\n      if(res.chatIds){\n        const DownloadUserReqRes = await callApiWithPdu(new DownloadUserReq({\n          userIds:res.chatIds,\n        }).pack())\n        if(DownloadUserReqRes){\n          const downloadUserRes = DownloadUserRes.parseMsg(DownloadUserReqRes?.pdu!)\n          console.log(\"【DownloadUserRes】\",downloadUserRes.users)\n          global = getGlobal();\n          if(downloadUserRes.users){\n            const addUsersObj = {}\n            const addChatsObj = {}\n            for (let index = 0; index < downloadUserRes.users.length; index++) {\n              const {user} = downloadUserRes.users[index];\n              if(!chatIdsDeleted.includes(user!.id)){\n                if(chatIds.includes(user!.id)){\n                  // @ts-ignore\n                  global = updateUser(global,user!.id, user!)\n                }else{\n                  chatIds.push(user?.id!)\n                  // @ts-ignore\n                  addUsersObj[user!.id] = user!\n                  // @ts-ignore\n                  addChatsObj[user!.id] = MsgCommandSetting.buildDefaultChat(user!)\n                }\n              }\n            }\n            if(Object.keys(addUsersObj).length > 0){\n              global = addUsers(global,addUsersObj)\n              global = addChats(global,addChatsObj)\n            }\n          }\n          global = updateChatListIds(global, \"active\", chatIds);\n          // @ts-ignore\n          global = {...global,chatFolders}\n          setGlobal({\n            ...global,\n            chatIdsDeleted:chatIdsDeleted || [],\n          })\n        }\n      }else{\n        getActions().updateGlobal({\n          chatIdsDeleted:chatIdsDeleted || [],\n          chatFolders\n        })\n      }\n    }\n  }\n  static async enableSync(global:GlobalState,chatId:string,messageId:number,password:string){\n    const account = Account.getCurrentAccount();\n    const pwd = hashSha256(password)\n    const ts = +(new Date());\n    const {address, sign} = await account!.signMessage(ts.toString(), pwd);\n    const session = Account.formatSession({address,sign,ts,accountId:account?.getAccountId()!});\n    account!.saveSession(session)\n    const entropy = await account!.getEntropy()\n    const accountId = account!.getAccountId();\n    MsgDispatcher.updateMessage(chatId,messageId,{\n      inlineButtons:[]\n    })\n    await callApiWithPdu(new AuthNativeReq({\n      accountId,entropy,session\n    }).pack())\n    setTimeout(()=>window.location.reload(),500)\n  }\n  static async disableSync(global:GlobalState,chatId:string,messageId:number){\n    const account = Account.getCurrentAccount();\n    account?.delSession();\n    MsgDispatcher.updateMessage(chatId,messageId,{\n      inlineButtons:[]\n    })\n    await callApiWithPdu(new AuthNativeReq({\n      accountId:account!.getAccountId(),\n      entropy:await account!.getEntropy(),\n      session:undefined\n    }).pack())\n    setTimeout(()=>window.location.reload(),500)\n  }\n  static async onSelectSyncBot(chatId:string){\n    const data = currentSyncBotContext;\n    const isUpload = !data?.endsWith(\"downloadMessages\");\n    currentSyncBotContext = undefined\n    let global = getGlobal();\n    if(isUpload){\n      const messageById = selectChatMessages(global,chatId);\n      const messages:MessageStoreRow_Type[] = [];\n      if(messageById){\n        for (let i = 0; i < Object.keys(messageById).length; i++) {\n          const msgId = parseInt(Object.keys(messageById)[i])\n          // @ts-ignore\n          const message:PbMsg_Type = messageById[msgId]\n          messages.push({\n            time:currentTs(),\n            message,\n            messageId:msgId,\n          })\n        }\n      }\n      await MsgCommandSetting.uploadMsgList(chatId,messages)\n\n    }else{\n      const res = await callApiWithPdu(new DownloadMsgReq({\n        chatId,\n      }).pack())\n      if(res){\n        const {err,messages} = DownloadMsgRes.parseMsg(res?.pdu)\n        console.log(\"messages\",messages)\n        if(messages){\n          for (let i = 0; i < messages?.length; i++) {\n            const {message,messageId} = messages[i]\n            const localMsg = selectChatMessage(global,chatId,messageId)\n            if(!localMsg){\n              // @ts-ignore\n              MsgDispatcher.newMessage(chatId,messageId,message)\n            }else{\n              // @ts-ignore\n              MsgDispatcher.updateMessage(chatId,messageId,message)\n            }\n          }\n        }\n        getActions().showNotification({message:\"更新成功\"})\n      }else{\n        getActions().showNotification({message:\"更新失败\"})\n      }\n    }\n  }\n  static async uploadMsgList(chatId:string,messages:MessageStoreRow_Type[]){\n\n    if(messages.length > 0){\n      const res = await callApiWithPdu(new UploadMsgReq({\n        messages,\n        chatId,\n        time:currentTs(),\n      }).pack())\n      if(!res){\n        getActions().showNotification({message:\"更新失败\"})\n      }else{\n        getActions().showNotification({message:\"更新成功\"})\n      }\n    }\n  }\n}\n","import {\n  ApiAttachment,\n  ApiBotInfo,\n  ApiChat,\n  ApiFormattedText,\n  ApiKeyboardButtons,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiSticker,\n  ApiUser,\n  ApiVideo\n} from \"../../api/types\";\nimport {GlobalState} from \"../../global/types\";\nimport {getActions, getGlobal} from \"../../global\";\nimport {callApiWithPdu} from \"./utils\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {GenMsgIdReq, GenMsgIdRes, SendBotMsgReq, SendBotMsgRes, SendReq} from \"../../lib/ptp/protobuf/PTPMsg\";\nimport MsgCommand from \"./MsgCommand\";\nimport {parseCodeBlock} from \"../share/utils/stringParse\";\nimport MsgWorker from \"./MsgWorker\";\nimport {STOP_HANDLE_MESSAGE, UserIdFirstBot} from \"../setting\";\nimport MsgCommandChatGpt from \"./MsgCommandChatGpt\";\nimport MsgCommandSetting from \"./MsgCommandSetting\";\nimport {selectUser} from \"../../global/selectors\";\nimport MsgCommandChatLab from \"./MsgCommandChatLab\";\nimport BotWebSocket from \"./bot/BotWebSocket\";\n\nexport type ParamsType = {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n  botInfo?: ApiBotInfo\n}\nexport type OptionsType = {\n  senderId?:string,\n  inlineButtons?:ApiKeyboardButtons\n  isLocalMessageId?:boolean,\n}\n\nexport default class MsgDispatcher {\n  private params: ParamsType;\n  private global: GlobalState;\n  private msgCommand: MsgCommand;\n  constructor(global:GlobalState,params: ParamsType) {\n    this.global = global;\n    this.params = params;\n    this.msgCommand = new MsgCommand(this)\n  }\n\n  static apiUpdate(update:any){\n    const {apiUpdate} = getActions()\n    apiUpdate(update)\n  }\n  getMsgSenderAsId(){\n    return this.params.sendAs?.id;\n  }\n  getMsgText(){\n    return this.params.text;\n  }\n\n  getChatId(){\n    return this.params.chat.id;\n  }\n  genMsgDate(){\n    return Math.ceil(+(new Date())/1000);\n  }\n\n  static async genMsgId(isLocal?:boolean){\n    // @ts-ignore\n    const {pdu} = await callApiWithPdu(new GenMsgIdReq({isLocal:!!isLocal}).pack())\n    const {messageId} = GenMsgIdRes.parseMsg(pdu)\n    return messageId\n  }\n\n  updateMessageSendSucceeded(localId:number,message:ApiMessage){\n    MsgDispatcher.apiUpdate({\n      '@type': \"updateMessageSendSucceeded\",\n      localId,\n      chatId: this.params.chat.id,\n      message: message\n    });\n  }\n  updateMessageText(id:number,{text}:{text: any},message:ApiMessage){\n    this.updateMessage(id,{\n      ...message,\n      content:{\n        ...message.content,\n        text: {\n          ...message.content.text,\n          text\n        }\n      }\n    })\n  }\n  updateMessage(id:number,message:Partial<ApiMessage>){\n    return MsgDispatcher.updateMessage(this.getChatId(),id,message)\n  }\n  static updateMessage(chatId:string,messageId:number,message:Partial<ApiMessage>){\n    message = MsgWorker.handleMessageTextCode(message)\n    MsgDispatcher.apiUpdate({\n        '@type': \"updateMessage\",\n        id: messageId,\n        chatId,\n        message,\n      });\n    return message\n  }\n  static async newCodeMessage(chatId:string,messageId?:number,text?:string){\n    text = \"```\\n\"+text!+\"```\"\n    return await MsgDispatcher.newTextMessage(chatId,messageId,text,[])\n  }\n\n  static async newJsonMessage(chatId:string,messageId?:number,json?:object){\n    const text = \"```json\\n\"+JSON.stringify(json,null,2)!+\"```\"\n    return await MsgDispatcher.newTextMessage(chatId,messageId,text,[])\n  }\n\n  static async newTextMessage(chatId:string,messageId?:number,text?:string,inlineButtons?:ApiKeyboardButtons,options?:{isOutgoing?:boolean}){\n    if(!messageId){\n      messageId = await MsgDispatcher.genMsgId();\n    }\n    const global = getGlobal();\n    const user = selectUser(global,chatId)\n    let message:Partial<ApiMessage> = {\n      chatId,\n      id:messageId,\n      senderId:chatId,\n      isOutgoing:false,\n      date:currentTs(),\n      inlineButtons,\n      content:{\n        text:{\n          text:text||\"\"\n        }\n      },\n      ...options\n    }\n    message = MsgWorker.handleMessageTextCode(message)\n    if(user && user.fullInfo?.botInfo){\n      message = MsgWorker.handleBotCmdText(message,user.fullInfo?.botInfo)\n    }\n    MsgDispatcher.apiUpdate({\n      '@type': \"newMessage\",\n      chatId,\n      id:messageId,\n      message,\n      shouldForceReply:false\n    });\n    return MsgDispatcher.newMessage(chatId,messageId,message)\n  }\n  static newMessage(chatId:string,messageId:number,message:ApiMessage){\n    const global = getGlobal();\n    const user = selectUser(global,chatId)\n    if(user && user.fullInfo?.botInfo){\n      message = MsgWorker.handleBotCmdText(message,user.fullInfo?.botInfo)\n    }\n    MsgDispatcher.apiUpdate({\n      '@type': \"newMessage\",\n      chatId,\n      id:messageId,\n      message,\n      shouldForceReply:false\n    });\n    return message\n  }\n  async sendNewMessage(content:{text?:ApiFormattedText},options:OptionsType){\n    const {isLocalMessageId,senderId,inlineButtons} = options || {}\n    const id = await MsgDispatcher.genMsgId(!!isLocalMessageId)\n    const message = {\n      id,\n      content,\n      inlineButtons,\n      chatId: this.getChatId(),\n      date: this.genMsgDate(),\n      senderId:this.getMsgSenderAsId(),\n      isOutgoing:(senderId || this.getMsgSenderAsId()) !== this.getChatId(),\n      sendingState: undefined\n    }\n    if(this.params.botInfo){\n      MsgWorker.handleBotCmdText(message,this.params.botInfo)\n    }\n    return MsgDispatcher.newMessage(this.getChatId(),id,message)\n  }\n  async sendNewTextMessage({text,options}:{text?:string,options?:OptionsType}){\n    const res = parseCodeBlock(text!)\n    // @ts-ignore\n    return await this.sendNewMessage({text:res!,},options)\n  }\n\n  async replyText(text:string){\n    return await this.replyNewTextMessage({text})\n  }\n\n  async replyCode(text:string){\n    return await this.replyNewTextMessage({text:\"```\\n\"+text+\"```\"})\n  }\n\n  async replyNewTextMessage({text,options}:{text?:string,options?:OptionsType}){\n    return await this.sendNewTextMessage({text,options:{\n      ...options,\n        senderId:this.getChatId()\n      }})\n\n  }\n  async sendOutgoingMsg(){\n    return await this.sendNewTextMessage({\n      text: this.getMsgText(),\n    })\n  }\n  static buildMsgHistoryClear(chatId:string):ApiMessage{\n    return {\n      id: 0,\n      chatId,\n      isOutgoing: false,\n      date: currentTs(),\n      content: {\n        action: {\n          text: \"历史记录已清空\",\n          type: 'historyClear',\n          translationValues:[],\n        }\n      }\n    }\n  }\n  getBotCommands(){\n    const {botInfo} = this.params;\n    if(botInfo && botInfo.commands){\n      const commands: string[] = []\n      botInfo.commands.forEach(cmd=>commands.push(\"/\"+cmd.command))\n      return commands\n    }else{\n      return []\n    }\n  }\n  getBot(){\n    const {botInfo} = this.params;\n    return botInfo\n  }\n\n  getBotConfig(){\n    const {botInfo} = this.params;\n    return botInfo ? botInfo.aiBot : undefined\n  }\n\n  async processCmd(){\n    const sendMsgText = this.getMsgText();\n    const commands = this.getBotCommands();\n    console.log(\"processCmd\",this.params.chat.id,sendMsgText,commands)\n    if(sendMsgText && commands.includes(sendMsgText)){\n      if(this.params.botInfo?.botId === UserIdFirstBot){\n        return await this.processFirstBotCmd();\n      }\n      return await this.processAiBotCmd();\n    }\n    return true\n  }\n\n  async processAiBotCmd(){\n    const sendMsgText = this.getMsgText();\n    const msgCommandChatGpt = new MsgCommandChatGpt(this.getChatId(),this.params.botInfo!);\n    if(sendMsgText !== \"/apiKey\"){\n      await this.sendOutgoingMsg();\n    }\n\n    switch(sendMsgText){\n      case \"/start\":\n        return await msgCommandChatGpt.start();\n      case \"/setting\":\n        return msgCommandChatGpt.setting()\n      case \"/reset\":\n        return await msgCommandChatGpt.reset();\n      case \"/aiModel\":\n        return await msgCommandChatGpt.aiModel();\n      case \"/initPrompt\":\n        return await msgCommandChatGpt.initPrompt();\n      case \"/apiKey\":\n        return await msgCommandChatGpt.apiKey();\n      case \"/maxHistoryLength\":\n        return await msgCommandChatGpt.maxHistoryLength();\n      case \"/usage\":\n        return await msgCommandChatGpt.usage();\n      default:\n        return await this.processBotApiCmd();\n    }\n  }\n  async processBotApiCmd(){\n    const sendMsgText = this.getMsgText();\n    const botApi = MsgCommandChatGpt.getAiBotConfig(getGlobal(),this.getChatId(),\"botApi\")\n    if(botApi){\n      const res = await callApiWithPdu(new SendBotMsgReq({botApi,chatId:this.getChatId(),text:sendMsgText}).pack())\n      if(res){\n        const {text} =  SendBotMsgRes.parseMsg(res.pdu)\n        if(text){\n          await MsgDispatcher.newTextMessage(this.getChatId(),undefined,text)\n        }\n      }\n    }\n    return STOP_HANDLE_MESSAGE\n  }\n  async processFirstBotCmd(){\n    const sendMsgText = this.getMsgText();\n    switch(sendMsgText){\n      case \"/start\":\n        await this.sendOutgoingMsg();\n        return MsgCommandSetting.start(this.getChatId())\n      case \"/lab\":\n        return await new MsgCommandChatLab(this.getChatId(),this.params.botInfo!).lab();\n      case \"/setting\":\n        return await this.msgCommand.setting();\n      default:\n        return await this.sendOutgoingMsg();\n    }\n  }\n  async process(){\n    let res;\n    console.log(\"process\",this.getChatId(),this.getMsgText(),this.global.chats.byId[this.getChatId()])\n    if(this.getMsgText()?.startsWith(\"/\")){\n      res = await this.processCmd();\n    }\n    return res\n  }\n  static showNotification(message:string){\n    getActions().showNotification({message})\n  }\n}\n","import {\n  ApiAttachment,\n  ApiBotInfo,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntityTypes,\n  ApiUpdate,\n  OnApiUpdate\n} from \"../../api/types\";\nimport {LOCAL_MESSAGE_MIN_ID, MEDIA_CACHE_NAME_WAI} from \"../../config\";\nimport {DownloadMsgRes, GenMsgIdReq, GenMsgIdRes, UploadMsgReq} from \"../../lib/ptp/protobuf/PTPMsg\";\nimport {getNextLocalMessageId} from \"../../api/gramjs/apiBuilders/messages\";\nimport {\n  Pdu,\n  popByteBuffer,\n  readBytes,\n  readInt16,\n  readInt32,\n  toUint8Array,\n  wrapByteBuffer,\n  writeBytes,\n  writeInt16,\n  writeInt32\n} from \"../../lib/ptp/protobuf/BaseMsg\";\nimport {PbMsg, PbUser} from \"../../lib/ptp/protobuf/PTPCommon\";\nimport {account} from \"../../api/gramjs/methods/client\";\nimport {DownloadUserRes, UploadUserReq} from \"../../lib/ptp/protobuf/PTPUser\";\nimport {sleep} from \"../../lib/gramjs/Helpers\";\nimport {Api as GramJs} from \"../../lib/gramjs\";\nimport {blobToDataUri, fetchBlob} from \"../../util/files\";\nimport {parseCodeBlock, parseEntities} from \"../share/utils/stringParse\";\nimport MsgChatGptWorker, {AiHistoryType} from \"./MsgChatGpWorker\";\nimport * as cacheApi from \"../../util/cacheApi\";\nimport {Type} from \"../../util/cacheApi\";\nimport {DownloadRes} from \"../../lib/ptp/protobuf/PTPFile\";\nimport {uploadFileCache} from \"../../lib/gramjs/client/uploadFile\";\nimport BotWebSocket, {BotWebSocketNotifyAction, BotWebSocketState} from \"./bot/BotWebSocket\";\nimport Account from \"../share/Account\";\n\nlet messageIds:number[] = [];\n\nexport default class MsgWorker {\n  private botInfo?: ApiBotInfo;\n  private chat: ApiChat;\n  private msgSend: ApiMessage;\n  private media: GramJs.TypeInputMedia | undefined;\n  private attachment?: ApiAttachment;\n  public static onUpdate: (update: ApiUpdate) => void;\n  private aiHistoryList:AiHistoryType[];\n  constructor({\n      chat,\n      msgSend,\n      attachment,\n      media,\n      botInfo,\n      aiHistoryList,\n    }:{\n    chat:ApiChat;\n    media: GramJs.TypeInputMedia | undefined;\n    msgSend:ApiMessage;\n    attachment?:ApiAttachment;\n    botInfo?:ApiBotInfo;\n    aiHistoryList?:AiHistoryType[]\n  },onUpdate:OnApiUpdate) {\n    MsgWorker.onUpdate = onUpdate;\n    this.aiHistoryList = aiHistoryList||[]\n    this.botInfo = botInfo;\n    this.chat = chat;\n    this.media = media;\n    this.msgSend = msgSend;\n    this.attachment = attachment;\n  }\n\n  static async createWsBot(chatId:string,botApi?:string){\n    if(botApi && botApi.startsWith(\"ws\")){\n      const botWs = BotWebSocket.getInstance(chatId)\n      if(!botWs.isLogged()){\n        botWs.setMsgHandler(async (chatId, notifies)=>{\n          for (let i = 0; i < notifies.length; i++) {\n            const {action,payload} = notifies[i]\n            switch (action){\n              case BotWebSocketNotifyAction.onConnectionStateChanged:\n                switch (payload.BotWebSocketState){\n                  case BotWebSocketState.connected:\n                    // await MsgDispatcher.newTextMessage(chatId,undefined,\"已连接\")\n                    break;\n                  case BotWebSocketState.closed:\n                    // await MsgDispatcher.newTextMessage(chatId,undefined,\"已断开\")\n                    break;\n                }\n                break\n              case BotWebSocketNotifyAction.onData:\n                // await MsgCommand.handleWsBotOnData(chatId,payload)\n                break\n            }\n          }\n        })\n        botWs.setWsUrl(botApi)\n        botWs.setSession(Account.getCurrentAccount()?.getSession()!)\n        botWs.connect();\n        await botWs.waitForMsgServerState(BotWebSocketState.logged)\n      }\n    }\n  }\n  static async beforeUploadUserReq(pdu:Pdu){\n    const {users,...res} = UploadUserReq.parseMsg(pdu)\n    if(users){\n      for (let i = 0; i < users?.length; i++) {\n        if (users) {\n          if(\n            (users.length === 1 && users[0].user!.photos && users[0].user!.photos.length > 0 )\n          ){\n            const photo = users[0].user!.photos[0];\n            let id;\n            if(photo && photo.id){\n              id = photo.id;\n            }\n            if(id){\n              let arrayBuffer = await cacheApi.fetch(MEDIA_CACHE_NAME_WAI, id, Type.ArrayBuffer);\n              if(arrayBuffer){\n                // @ts-ignore\n                const res = DownloadRes.parseMsg(new Pdu(Buffer.from(arrayBuffer)));\n                if(!res || !res.file){\n                  break\n                }\n                await uploadFileCache(res.file!)\n              }\n            }\n          }\n          const {time,user} = users[i]\n          let buf = Buffer.from(new PbUser(user!).pack().getPbData())\n          const password = \"Wai\" + time!.toString();\n          // console.log(\"accountId\",account.getAccountId())\n          // console.log(\"entropy\",await account.getEntropy())\n          const cipher = await account.encryptData(buf,password)\n          const bb = popByteBuffer();\n          writeInt32(bb, cipher?.length + 4 + 4 + 4 + 2);\n          writeInt16(bb, 1);\n          writeInt32(bb, time!);\n          writeInt32(bb, 0);\n          writeBytes(bb, cipher);\n          users[i].buf = Buffer.from(toUint8Array(bb));\n          users[i].user = undefined\n          // console.log(\"userId\",user?.id)\n          // console.log(\"buf\",buf)\n          // console.log(\"cipher\",cipher)\n          // console.log(\"msg buf\",users[i].buf)\n        }\n      }\n    }\n\n    return new UploadUserReq({users,...res}).pack()\n  }\n  static async afterDownloadUserReq(pdu:Pdu){\n    const {users,...res} = DownloadUserRes.parseMsg(pdu)\n    if(users){\n      for (let i = 0; i < users?.length; i++) {\n        if (users) {\n          const {buf} = users[i]\n          const bbDecode = wrapByteBuffer(Buffer.from(buf!))\n          const len = readInt32(bbDecode);\n          const encrypt = readInt16(bbDecode) === 1;\n          const time = readInt32(bbDecode);\n          const reverse = readInt32(bbDecode);\n          let cipher = readBytes(bbDecode,len - 14);\n          const password = \"Wai\"+time.toString();\n          // console.log(\"encode\",Buffer.from(buf!).toString(\"hex\"))\n          // console.log(\"cipher\",Buffer.from(cipher).toString(\"hex\"))\n          const buf2 = await account.decryptData(Buffer.from(cipher),password)\n          // console.log(\"userId\",user?.id)\n          // console.log(\"buf\",buf)\n          // console.log(\"cipher\",cipher)\n          // console.log(\"msg buf\",user)\n          users[i].user = PbUser.parseMsg(new Pdu(Buffer.from(buf2)));\n          users[i].buf = undefined\n        }\n      }\n    }\n\n    return Buffer.from(new DownloadUserRes({...res,users}).pack().getPbData())\n  }\n  static async afterDownloadMsgReq(pdu:Pdu){\n    const {messages,...res} = DownloadMsgRes.parseMsg(pdu)\n    if(messages){\n      for (let i = 0; i < messages?.length; i++) {\n        const {buf} = messages[i]\n        const bbDecode = wrapByteBuffer(Buffer.from(buf!))\n        const len = readInt32(bbDecode);\n        const encrypt = readInt16(bbDecode) === 1;\n        const time = readInt32(bbDecode);\n        const reverse = readInt32(bbDecode);\n        let cipher = readBytes(bbDecode,len - 14);\n        const password = \"Wai\"+time.toString();\n        // console.log(\"encode\",Buffer.from(buf!).toString(\"hex\"))\n        // console.log(\"cipher\",Buffer.from(cipher).toString(\"hex\"))\n        const buf2 = await account.decryptData(Buffer.from(cipher),password)\n        messages[i].message = PbMsg.parseMsg(new Pdu(Buffer.from(buf2)))\n        messages[i].buf = undefined\n        // console.log(\"userId\",user?.id)\n        // console.log(\"buf\",buf)\n        // console.log(\"cipher\",cipher)\n        // console.log(\"msg buf\",users[i].buf)\n      }\n    }\n    return Buffer.from(new DownloadMsgRes({...res,messages}).pack().getPbData())\n  }\n  static async beforeUploadMsgReq(pdu:Pdu){\n    const {messages,...res} = UploadMsgReq.parseMsg(pdu)\n\n    if(messages){\n      if(messages.length === 1){\n        const {photo,voice,audio,document} = messages[0].message!.content;\n        let id;\n        if(photo && photo.id){\n          id = photo.id;\n        }else if(voice && voice.id){\n          id = voice.id;\n        }else if(audio && audio.id){\n          id = audio.id;\n        }else if(document && document.id){\n          id = document.id;\n        }\n        if(id){\n          let arrayBuffer = await cacheApi.fetch(MEDIA_CACHE_NAME_WAI, id, Type.ArrayBuffer);\n\n          if(arrayBuffer){\n            // @ts-ignore\n            const {file} = DownloadRes.parseMsg(new Pdu(Buffer.from(arrayBuffer)));\n            await uploadFileCache(file!)\n          }\n        }\n      }\n      for (let i = 0; i < messages?.length; i++) {\n        const {time,message} = messages[i]\n        let buf = Buffer.from(new PbMsg(message!).pack().getPbData())\n        const password = \"Wai\"+time!.toString();\n        const cipher = await account.encryptData(buf,password)\n        const bb = popByteBuffer();\n        writeInt32(bb, cipher?.length + 4 + 4 + 4 + 2);\n        writeInt16(bb, 1);\n        writeInt32(bb, time!);\n        writeInt32(bb, 0);\n        writeBytes(bb, cipher);\n        messages[i].buf = Buffer.from(toUint8Array(bb));\n        messages[i].message = undefined\n        // console.log(\"buf\",buf)\n        // console.log(\"cipher\",cipher)\n        // console.log(\"msg buf\",messages[i].buf)\n      }\n    }\n    return new UploadMsgReq({messages,...res}).pack()\n  }\n\n  static async genMessageId(isLocal?:boolean):Promise<number>{\n    let msgId = isLocal ? getNextLocalMessageId() : parseInt(getNextLocalMessageId().toString()) % LOCAL_MESSAGE_MIN_ID;\n    if(messageIds.length > 10){\n      messageIds = messageIds.slice(messageIds.length - 10)\n    }\n    if(messageIds.includes(msgId)){\n      await sleep(100);\n      return MsgWorker.genMessageId(isLocal);\n    }else{\n      messageIds.push(msgId);\n      return msgId\n    }\n  }\n\n  static async genMsgId(pdu:Pdu):Promise<Uint8Array>{\n    const {isLocal} = GenMsgIdReq.parseMsg(pdu)\n    return new GenMsgIdRes({messageId:await MsgWorker.genMessageId(isLocal)}).pack().getPbData()\n  }\n\n  static getMediaFileId(media: GramJs.TypeInputMedia | undefined){\n    let fileId;\n    //@ts-ignore\n    if (media && media!.file && media.file.id) {\n      //@ts-ignore\n      fileId = media!.file.id.toString()\n    }\n    return fileId\n  }\n  async handleMedia(){\n    const {msgSend,attachment} = this;\n    if(attachment){\n      let fileId = MsgWorker.getMediaFileId(this.media);\n\n      if (msgSend.content.photo || msgSend.content.document) {\n        const getPhotoInfo = async (attachment: ApiAttachment) => {\n          const dataUri = await blobToDataUri(await fetchBlob(attachment.thumbBlobUrl!));\n          const size = {\n            \"width\": attachment.quick!.width,\n            \"height\": attachment.quick!.height,\n          }\n          return {\n            dataUri, size\n          }\n        }\n\n        if (msgSend.content.document) {\n          msgSend.content.document.id = fileId\n\n          if (msgSend.content.document.mimeType.split(\"/\")[0] === \"image\") {\n            const {size, dataUri} = await getPhotoInfo(attachment);\n            msgSend.content.document.mediaType = \"photo\";\n            msgSend.content.document.previewBlobUrl = undefined;\n            msgSend.content.document.thumbnail = {\n              ...size,\n              dataUri\n            }\n            msgSend.content.document.mediaSize = size;\n          }\n        }\n\n        if(msgSend.content.photo){\n          const {size,dataUri} = await getPhotoInfo(attachment);\n          msgSend.content.photo = {\n            isSpoiler:msgSend.content.photo.isSpoiler,\n            id:fileId,\n            \"thumbnail\": {\n              ...size,\n              dataUri\n            },\n            \"sizes\": [\n              {\n                ...size,\n                \"type\": \"y\"\n              }\n            ],\n          }\n        }\n      }\n\n      if(msgSend.content.voice){\n        msgSend.content.voice.id = fileId\n      }\n      if(msgSend.content.audio){\n        msgSend.content.audio.id = fileId\n      }\n      this.msgSend = msgSend;\n    }\n  }\n  static handleMessageTextCode(msgSend:Partial<ApiMessage>){\n    if(msgSend.content?.text && msgSend.content.text.text){\n      // @ts-ignore\n      msgSend.content.text = parseCodeBlock(msgSend.content.text?.text)\n    }\n    return msgSend\n  }\n  static handleBotCmdText(msgSend:Partial<ApiMessage>,botInfo:ApiBotInfo){\n    const commands:string[] = []\n    if(botInfo && botInfo.commands){\n      botInfo.commands.forEach(cmd=>commands.push(cmd.command))\n    }\n    if(msgSend.content && msgSend.content.text && msgSend.content.text.text){\n      if(msgSend.content.text!.entities && msgSend.content.text!.entities.find(e=>{\n        // @ts-ignore\n        return e.cipher\n      })){\n      }else{\n        // @ts-ignore\n        msgSend.content.text!.entities = [\n          ...msgSend.content.text!.entities||[],\n          ...parseEntities(msgSend.content.text!.text!,commands)\n        ]\n      }\n    }\n    return msgSend;\n  }\n  static updateMessage(chatId:string,messageId:number,message:Partial<ApiMessage>){\n    MsgWorker.onUpdate({\n      '@type': \"updateMessage\",\n      id: messageId,\n      chatId,\n      message,\n    });\n    return message\n  }\n  static newMessage(chatId:string,messageId:number,message:ApiMessage){\n    MsgWorker.onUpdate({\n      '@type': \"newMessage\",\n      chatId,\n      id:messageId,\n      message,\n      shouldForceReply:false\n    });\n    return message\n  }\n  async processOutGoing(){\n    const {msgSend} = this;\n    const msgId = await MsgWorker.genMessageId();\n    let message = {\n      ...msgSend,\n      id:msgId,\n      sendingState: undefined,\n    };\n    MsgWorker.onUpdate({\n      '@type': \"updateMessageSendSucceeded\",\n      chatId: msgSend.chatId,\n      localId:msgSend.id,\n      message,\n    });\n    this.msgSend = message\n  }\n\n  isMsgCipher(){\n    return this.msgSend.content.text?.entities?.some((e) => e.type === ApiMessageEntityTypes.Spoiler);\n  }\n  async processBotMsg(){\n    const {botInfo,msgSend} =this;\n    if(\n      msgSend.content.text && msgSend.content.text.text &&\n      botInfo?.aiBot\n    ){\n      return await new MsgChatGptWorker(this.msgSend,botInfo,this.aiHistoryList).process()\n    }\n  }\n  async process(){\n    const {msgSend,chat,botInfo} = this;\n\n    try {\n      await this.handleMedia();\n      if(botInfo){\n        this.msgSend = MsgWorker.handleBotCmdText(this.msgSend,botInfo);\n      }\n      await this.processOutGoing();\n      if(this.isMsgCipher()){\n        return\n      }\n      if(this.botInfo){\n        await this.processBotMsg();\n      }\n    }catch (error:any){\n      console.error(error)\n      MsgWorker.onUpdate({\n        '@type': 'updateMessageSendFailed',\n        chatId: chat.id,\n        localId: msgSend.id,\n        error: error.message,\n      });\n    }\n  }\n}\n","import {DEBUG} from '../../../config';\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport {getActionCommandsName} from \"../../../lib/ptp/protobuf/ActionCommands\";\nimport Account from '../../share/Account';\nimport {AuthLoginReq} from \"../../../lib/ptp/protobuf/PTPAuth\";\n\nexport enum BotWebSocketNotifyAction{\n  onConnectionStateChanged,\n  onData,\n}\n\nexport type BotWebSocketNotify = {\n  action: BotWebSocketNotifyAction;\n  payload: any;\n};\n\nexport enum BotWebSocketState {\n  connect_none,\n  closed,\n  connect_error,\n  connecting,\n  connected,\n  logged,\n}\n\nexport type MsgHandleType = (chatId:string,notifies:BotWebSocketNotify[])=>void\n\nlet reconnect_cnt = 0;\nlet seq_num = 0;\nlet clients: Record<string, BotWebSocket> = {};\n\nlet currentMsgConn: BotWebSocket | null = null;\n\nexport default class BotWebSocket {\n  private autoConnect: boolean;\n  public client: WebSocket | any | undefined;\n  private __rev_msg_map: Record<number, Pdu>;\n  private __sending_msg_map: Record<number, boolean>;\n  private __msgHandler?: MsgHandleType;\n  private sendMsgTimer?: NodeJS.Timeout;\n  private state: BotWebSocketState;\n  private chatId: string;\n  private wsUrl?: string;\n  private session?: string;\n  constructor(chatId: string) {\n    currentMsgConn = this;\n    this.chatId = chatId;\n    this.autoConnect = true;\n    this.sendMsgTimer = undefined;\n    this.state = BotWebSocketState.connect_none;\n    this.__rev_msg_map = {};\n    this.__sending_msg_map = {};\n  }\n  setWsUrl(wsUrl:string) {\n    this.wsUrl = wsUrl;\n  }\n  setSession(session:string) {\n    this.session = session;\n  }\n  getState() {\n    return this.state;\n  }\n  getChatId(){\n    return this.chatId;\n  }\n\n  getAutoConnect() {\n    return this.autoConnect;\n  }\n  setAutoConnect(autoConnect: boolean) {\n    this.autoConnect = autoConnect;\n  }\n\n  async close() {\n    this.notifyState(BotWebSocketState.closed);\n    if (this.client && this.isConnect()) {\n      this.client.close();\n    }\n  }\n  connect() {\n    if (!this.wsUrl ) {\n      console.error('no ws url');\n      return;\n    }\n    if (\n      this.state === BotWebSocketState.logged ||\n      this.state === BotWebSocketState.connecting ||\n      this.state === BotWebSocketState.connected\n    ) {\n      return;\n    }\n    try {\n      console.log('connecting', this.chatId,this.wsUrl);\n      this.notifyState(BotWebSocketState.connecting);\n      this.client = new WebSocket(`${this.wsUrl}`);\n      this.client.binaryType = 'arraybuffer';\n      this.client.onopen = this.onConnected.bind(this);\n      this.client.onmessage = this.onData.bind(this);\n      this.client.onclose = this.onClose.bind(this);\n    } catch (e) {\n      console.error('connect error', e);\n      this.reconnect(this.getAutoConnect());\n    }\n  }\n\n  waitForMsgServerState(\n    state: BotWebSocketState,\n    timeout: number = 10000,\n    startTime: number = 0\n  ) {\n    const timeout_ = 500;\n    return new Promise<boolean>((resolve) => {\n      setTimeout(() => {\n        if (this.getState() === state) {\n          resolve(true);\n        } else if (timeout > 0 && startTime >= timeout) {\n          //console.debug('waitForMsgServerState timeout', startTime, timeout);\n          resolve(false);\n        } else {\n          startTime += timeout_;\n          // eslint-disable-next-line promise/catch-or-return\n          this.waitForMsgServerState(state, timeout, startTime).then(resolve);\n        }\n      }, timeout_);\n    });\n  }\n\n  waitTime(timeout: number = 1000, startTime: number = 0) {\n    const timeout_ = 1000;\n    return new Promise<void>((resolve) => {\n      setTimeout(() => {\n        if (startTime >= timeout) {\n          resolve();\n        } else {\n          startTime += timeout_;\n          // eslint-disable-next-line promise/catch-or-return\n          this.waitTime(timeout, startTime).then(resolve);\n        }\n      }, timeout_);\n    });\n  }\n\n  setMsgHandler(msgHandler: MsgHandleType) {\n    this.__msgHandler = msgHandler;\n  }\n\n  onConnected() {\n    reconnect_cnt = 0\n    console.log(\"[onConnected account]\",this.getChatId())\n    this.notifyState(BotWebSocketState.connected);\n    this.login().catch(console.error)\n  }\n  async login(){\n    const {session} = this;\n    await this.sendPduWithCallback(new AuthLoginReq({\n      sign:Account.getCurrentAccount()?.getSession()!\n    }).pack())\n    console.log(\"[onLogin]\")\n    this.notifyState(BotWebSocketState.logged);\n  }\n  notify(notifyList:BotWebSocketNotify[]) {\n    if (this.__msgHandler) {\n      this.__msgHandler(this.chatId,notifyList);\n    }\n  }\n  onData(e: { data: Buffer }) {\n    if(e.data && e.data.byteLength && e.data.byteLength > 16){\n      let pdu = new Pdu(Buffer.from(e.data));\n      const seq_num = pdu.getSeqNum();\n      if(DEBUG){\n        console.log(\"[onData]\",seq_num,pdu.getCommandId(),getActionCommandsName(pdu.getCommandId()))\n      }\n      if(this.__sending_msg_map[seq_num]){\n        this.__rev_msg_map[seq_num] = pdu\n        delete this.__sending_msg_map[seq_num];\n      }else{\n        if (this.__msgHandler) {\n          this.notify([\n            {\n              action: BotWebSocketNotifyAction.onData,\n              payload: pdu,\n            },\n          ]);\n        }\n      }\n    }\n\n  }\n  notifyState(state: BotWebSocketState) {\n    this.state = state;\n    this.notify([\n      {\n        action: BotWebSocketNotifyAction.onConnectionStateChanged,\n        payload: {\n          BotWebSocketState: state,\n        },\n      },\n    ]);\n  }\n  onClose() {\n    if (this.sendMsgTimer) {\n      clearTimeout(this.sendMsgTimer);\n    }\n    console.log('onClose', this.autoConnect);\n    this.notifyState(BotWebSocketState.closed);\n    this.reconnect(this.getAutoConnect());\n  }\n\n  reconnect(autoConnect: boolean) {\n    if (autoConnect) {\n      setTimeout(() => {\n        if (\n          this.state === BotWebSocketState.closed ||\n          this.state === BotWebSocketState.connect_error\n        ) {\n          if (reconnect_cnt > 20) {\n            reconnect_cnt = 0;\n          }\n          if (reconnect_cnt < 5) {\n            reconnect_cnt += 1;\n          } else {\n            reconnect_cnt += 2;\n          }\n          console.log(\"[reconnect_cnt]\",reconnect_cnt)\n          this.connect();\n        }\n      }, 1000 * (reconnect_cnt + 1));\n    }\n  }\n\n  static getInstance(chatId: string): BotWebSocket {\n    if (!clients[chatId]) {\n      clients[chatId] = new BotWebSocket(chatId);\n    }\n    return clients[chatId];\n  }\n\n  waitForMsgCallback(\n    seq_num: number,\n    timeout: number = 5000,\n    startTime: number = 0\n  ) {\n    return new Promise<Pdu>((resolve, reject) => {\n      setTimeout(() => {\n        if (this.__rev_msg_map[seq_num]) {\n          const res = this.__rev_msg_map[seq_num];\n          delete this.__rev_msg_map[seq_num];\n          resolve(res);\n        } else {\n          if (startTime >= timeout) {\n            reject('TIMEOUT');\n          } else {\n            startTime += 200;\n            if (this.isConnect()) {\n              this.waitForMsgCallback(seq_num, timeout, startTime)\n                .then(resolve)\n                .catch(reject);\n            }\n          }\n        }\n      }, 200);\n    });\n  }\n\n  send(data:Buffer|Uint8Array){\n    this.client.send(data);\n  }\n\n  sendPduWithCallback(\n    pdu:Pdu,\n    timeout: number = 10000\n  ) {\n    seq_num += 1;\n    if(seq_num > 100000){\n      seq_num = 1\n    }\n    pdu.updateSeqNo(seq_num)\n    return new Promise<Pdu>((resolve, reject) => {\n      if (this.isConnect()) {\n        if(DEBUG){\n          console.log(\"[sendPduWithCallback]\",pdu.getSeqNum(),pdu.getCommandId(),getActionCommandsName(pdu.getCommandId()))\n        }\n        this.__sending_msg_map[pdu.getSeqNum()] = true;\n        this.send(pdu.getPbData())\n        this.waitForMsgCallback(pdu.getSeqNum(), timeout)\n          .then(resolve)\n          .catch(reject);\n      } else {\n        this.reconnect(this.autoConnect);\n        reject('BotWebSocketState is not connected');\n      }\n    });\n  }\n\n  isLogged() {\n    return [BotWebSocketState.logged].includes(this.state);\n  }\n  isConnect() {\n    return [BotWebSocketState.connected, BotWebSocketState.logged].includes(\n      this.state\n    );\n  }\n  async destroy(){\n    this.client.close()\n    this.setAutoConnect(false)\n    await this.waitForMsgServerState(BotWebSocketState.closed)\n  }\n}\n","import {callApi} from \"../../api/gramjs\";\nimport {Pdu} from \"../../lib/ptp/protobuf/BaseMsg\";\nexport type CallApiWithPduRes = {\n  pdu:Pdu\n}\nexport async function callApiWithPdu(pdu:Pdu):Promise<undefined|CallApiWithPduRes>{\n  //@ts-ignore\n  const buf = await callApi(\"sendWithCallback\",Buffer.from(pdu.getPbData()))\n  if(buf){\n    return {pdu:new Pdu(Buffer.from(buf))}\n  }else{\n    return undefined\n  }\n}\n","export type ShowModalFromEventPayload = {\n  title?:string,\n  type?:'singleInput'|'multipleInput',\n  placeholder?:string,\n  initVal?:string\n  max?:number\n  min?:number\n  step?:number\n  inputType?:string\n}\nexport type ShowModalFromEventResult = {\n  value?:string,\n}\n\nexport async function showModalFromEvent(payload:ShowModalFromEventPayload):Promise<ShowModalFromEventResult>{\n  return new Promise((resolve)=>{\n    const event = new CustomEvent('modal',{\n      detail:{\n        payload,\n        callback:(res:ShowModalFromEventResult)=>{\n          resolve(res)\n        }\n      }\n    });\n    document.dispatchEvent(event);\n  })\n}\n","\nexport function generateRandomString(length:number) {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport function sha1(str: string): string {\n  function utf8_encode(str: string): string {\n    str = str.replace(/\\r\\n/g, '\\n');\n    let utf8str = '';\n    for (let n = 0; n < str.length; n++) {\n      let c = str.charCodeAt(n);\n      if (c < 128) {\n        utf8str += String.fromCharCode(c);\n      } else if ((c > 127) && (c < 2048)) {\n        utf8str += String.fromCharCode((c >> 6) | 192);\n        utf8str += String.fromCharCode((c & 63) | 128);\n      } else {\n        utf8str += String.fromCharCode((c >> 12) | 224);\n        utf8str += String.fromCharCode(((c >> 6) & 63) | 128);\n        utf8str += String.fromCharCode((c & 63) | 128);\n      }\n    }\n    return utf8str;\n  }\n\n  function rotate_left(n: number, s: number): number {\n    return (n << s) | (n >>> (32 - s));\n  }\n\n  function cvt_hex(val: number): string {\n    let str = '';\n    let i;\n    let v;\n    for (i = 7; i >= 0; i--) {\n      v = (val >>> (i * 4)) & 0x0f;\n      str += v.toString(16);\n    }\n    return str;\n  }\n\n  let blockstart;\n\n  let i: number, j: number;\n\n  let W = new Array(80);\n\n  let H0 = 0x67452301;\n  let H1 = 0xEFCDAB89;\n  let H2 = 0x98BADCFE;\n  let H3 = 0x10325476;\n  let H4 = 0xC3D2E1F0;\n\n  let A, B, C, D, E;\n\n  let temp;\n\n  str = utf8_encode(str);\n\n  let len = str.length * 8;\n\n  let K = new Array(\n    0x5A827999,\n    0x6ED9EBA1,\n    0x8F1BBCDC,\n    0xCA62C1D6\n  );\n\n  let str_len = str.length;\n\n  let word_array = new Array();\n\n  for (i = 0; i < str_len - 3; i += 4) {\n    j =\n      (str.charCodeAt(i) << 24) |\n      (str.charCodeAt(i + 1) << 16) |\n      (str.charCodeAt(i + 2) << 8) |\n      str.charCodeAt(i + 3);\n    word_array.push(j);\n  }\n\n  switch (str_len % 4) {\n    case 0:\n      i = 0x080000000;\n      break;\n    case 1:\n      i = (str.charCodeAt(str_len - 1) << 24) | 0x0800000;\n      break;\n\n    case 2:\n      i =\n        (str.charCodeAt(str_len - 2) << 24) |\n        (str.charCodeAt(str_len - 1) << 16) |\n        0x08000;\n      break;\n\n    case 3:\n      i =\n        (str.charCodeAt(str_len - 3) << 24) |\n        (str.charCodeAt(str_len - 2) << 16) |\n        (str.charCodeAt(str_len - 1) << 8) |\n        0x80;\n      break;\n  }\n\n  word_array.push(i);\n\n  while (word_array.length % 16 != 14) word_array.push(0);\n\n  word_array.push(len >>> 32);\n  word_array.push(len & 0xffffffff);\n\n  for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {\n    for (i = 0; i < 16; i++) W[i] = word_array[blockstart + i];\n    for (i = 16; i < 80; i++)\n      W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n    A = H0;\n    B = H1;\n    C = H2;\n    D = H3;\n    E = H4;\n\n    for (i = 0; i < 20; i++) {\n      temp =\n        (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + K[0]) &\n        0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 20; i < 40; i++) {\n      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + K[1]) & 0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 40; i < 60; i++) {\n      temp =\n        (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + K[2]) &\n        0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 60; i < 80; i++) {\n      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + K[3]) & 0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    H0 = (H0 + A) & 0xffffffff;\n    H1 = (H1 + B) & 0xffffffff;\n    H2 = (H2 + C) & 0xffffffff;\n    H3 = (H3 + D) & 0xffffffff;\n    H4 = (H4 + E) & 0xffffffff;\n  }\n\n  let result =\n    cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);\n  return result.toLowerCase();\n}\n\nexport function replaceSubstring(text:string, offset:number, length:number,replace:string) {\n  const prefix = text.substring(0, offset);\n  const suffix = text.substring(offset + length);\n  return prefix + replace + suffix;\n\n}\nexport function fetchWithTimeout(url: RequestInfo | URL, options: RequestInit | undefined, timeout = 10000) {\n  return Promise.race([\n    fetch(url, options),\n    new Promise((_, reject) =>\n      setTimeout(() => reject(new Error(`Timeout: ${timeout}s`)), timeout)\n    )\n  ]);\n}\n\nexport const isEmailValid = (email:string)=>{\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(email);\n}\n\nexport function parseQueryFromUrl(urlStr: string): { url: URL; query: Record<string, string> } {\n  const replacedUrl = urlStr.replace(/#/g, '?');\n  const url = new URL(replacedUrl);\n  const query = Array.from(url.searchParams.entries()).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: value,\n    }),\n    {}\n  );\n\n  return { url, query };\n}\n\n\nexport function getCorsHeader(Access_Control_Allow_Origin: string = '*',ContentType:string = \"application/json;charset=UTF-8\") {\n  return {\n    'content-type': ContentType,\n    'Access-Control-Allow-Origin': Access_Control_Allow_Origin,\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, Accept',\n    'Access-Control-Allow-Credentials': 'true',\n  };\n}\n\nexport function ResponseJson(result: object, status = 200,Access_Control_Allow_Origin: string = '*') {\n  return new Response(JSON.stringify(result), {\n    status,\n    headers: {\n      ...getCorsHeader(Access_Control_Allow_Origin),\n    },\n  });\n}\n\nexport function currentTs(){\n  return Math.ceil(+(new Date)/1000)\n}\n\nexport function currentTs1000(){\n  return Math.ceil(+(new Date))\n}\n\nexport async function fileToArrayBuffer(file:File) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n    reader.readAsArrayBuffer(file);\n  });\n}\nexport async function fileToBuffer(file:File) {\n  return new Promise<Buffer>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      // @ts-ignore\n      const buffer = Buffer.from(reader.result);\n      resolve(buffer);\n    };\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(file);\n  });\n}\n\nfunction downloadText(text:string, filename:string,type = \"text/json\") {\n  var element = document.createElement('a');\n  element.setAttribute('href', 'data:'+type+';charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n}\n\nexport async function blobToArrayBuffer(blob:Blob):Promise<ArrayBuffer> {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', () => {\n      // @ts-ignore\n      resolve(reader.result);\n    });\n    reader.readAsArrayBuffer(blob);\n  });\n}\n\nexport async function blobToBuffer(blob:Blob) {\n  const ab = await blobToArrayBuffer(blob);\n  return Buffer.from(ab)\n}\n\nexport function isPositiveInteger(str: string): boolean {\n  const reg = /^[1-9]\\d*$/; // 正则表达式\n  return reg.test(str);\n}\n","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n"],"names":["Object","defineProperty","exports","value","tslib_1","Semaphore_1","Mutex","cancelError","this","_semaphore","default","prototype","acquire","__awaiter","__generator","_b","label","sent","runExclusive","callback","isLocked","waitForUnlock","release","cancel","errors_1","Semaphore","_value","_cancelError","E_CANCELED","_weightedQueues","_weightedWaiters","weight","_this","Error","concat","Promise","resolve","reject","push","_dispatch","_a","trys","getValue","setValue","forEach","queue","entry","queueEntry","shift","previousValue","previousWeight","_newReleaser","_drainUnlockWaiters","called","waiter","E_ALREADY_LOCKED","E_TIMEOUT","tryAcquire","withTimeout","Mutex_1","enumerable","get","withTimeout_1","tryAcquire_1","__exportStar","sync","alreadyAcquiredError","timeout","timeoutError","undefined","isTimeout","handle","ticket","e_1","setTimeout","Array","isArray","clearTimeout","then","omitVirtualClassFields","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","className","classType","getBytes","rest","TIMESTAMP_BASE","TIMESTAMP_PRECISION","LOCAL_MESSAGES_LIMIT","localMessageCounter","LOCAL_MESSAGE_MIN_ID","getNextLocalMessageId","datePart","Math","round","Date","now","IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","batchedUpdates","throttledLocalDbUpdate","throttle","postMessage","type","convertToVirtualClass","Uint8Array","Buffer","from","keys","length","BigInt","map","VirtualClass","split","reduce","acc","field","constructors","valueOmited","key","_initial","initial","valueVirtualClass","acc2","key2","name","Proxy","target","prop","Reflect","set","Set","account","GramJsLogger","DEBUG_GRAMJS","handleSendBotMsgReq","async","botApi","chatId","text","SendBotMsgReq","pdu","startsWith","res","fetch","method","headers","Authorization","getSession","body","JSON","stringify","status","json","SendBotMsgRes","pack","getPbData","botWs","BotWebSocket","isLogged","MsgWorker","sendPduWithCallback","e","console","error","SERVICE_NOTIFICATIONS_USER_ID","runThrottledForLoadTopChats","cb","runDebouncedForLoadFullChat","debounce","addActionHandler","global","actions","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","getGlobal","currentChatIds","values","byTabId","id","tabId","selectCurrentMessageList","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","threadId","MAIN_THREAD_ID","getCurrentTabId","payload","currentUserId","chat","selectChat","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","isMin","callApi","user","selectUser","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","openChat","selectThreadOriginChat","TMP_CHAT_ID","result","openPreviousChat","addUsers","buildCollectionByKey","users","setGlobal","chatFullInfo","fullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","listType","onReplace","shouldReplace","getOrderDate","lastMessage","date","joinDate","chats","isFullyLoaded","DEBUG","listIds","oldestChat","byId","selectIsChatPinned","sort","chat1","chat2","loadChats","force","loadFullChat","lastLocalMessage","selectLastServiceNotification","message","isMuted","updateChat","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","openLimitReachedModal","limit","showDialog","data","hasErrorKey","channelId","accessHash","selectTabState","userId","leaveChat","getAvatarPhoto","url","ab","arrayBuffer","DownloadRes","file","part","part_total","buf","size","err","ERR","blob","Blob","blob1","thumbUrl","resizeImage","thumbBlob","fetchBlob","dataUri","blobToDataUri","cacheApi","MEDIA_CACHE_NAME_WAI","thumbnail","width","height","offsetId","offsetDate","isFullDraftSync","firstLoad","lastLocalServiceMessage","UserIdFirstBot","LoadAllChats","avatarHash","getFileId","DEFAULT_AVATARS","photos","messages","byChatId","threadsById","lastViewportIds","userStatusesById","chatIds","totalChatCount","chatFoldersById","chatFolders","row","orderedIds","folderIds","tabStates","visibleChats","flatMap","currentChat","selectCurrentChat","visibleUsers","selectVisibleUsers","replaceUsers","replaceUserStatuses","replaceChats","updateChatListIds","addUserStatuses","updateChats","replaceChatListIds","newChats","notificationsChat","updateChatListSecondaryInfo","draftsById","draft","thread","selectThread","selectDraft","isLocal","replaceThreadParam","replyingToById","getActions","sendBotCommand","command","MsgCommandChatLab","UserIdChatGpt","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","stickerSet","loadStickers","stickerSetInfo","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","ensureIsSuperGroup","isChatBasicGroup","newChat","migrateChat","promptInit","userIds","userIdInt","parseInt","a","b","toString","chatGptApiKey","localStorage","getItem","init_system_content","DEFAULT_PROMPT","avatarUrl","isSelf","isPremium","firstName","usernames","bio","DEFAULT_CREATE_USER_BIO","botInfo","aiBot","enableAi","chatGptConfig","api_key","max_history_length","modelConfig","ChatModelConfig","botId","commands","DEFAULT_BOT_COMMANDS","DEFAULT_CHATGPT_AI_COMMANDS","cmd","MsgCommandSetting","activeChatFolderRow","activeChatFolder","window","sessionStorage","chatFolderById","includedChatIds","addChats","editChatFolder","folderUpdate","createdChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","maxId","max","recommendedId","description","newFolder","setActiveChatFolder","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","TME_WEB_DOMAINS","hostname","pathname","open","hostParts","part1","part2","part3","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","c","channelPostId","isCurrentChat","startBot","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","discussionChatId","isEnabled","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","updateManagementProgress","ManagementProgress","all","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","groups","addedById","group","isForum","forDiscussionIds","fullChat","setItem","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","updateTopics","count","updateListedTopicIds","entries","formattedText","replyingToId","readInboxMessageIdByTopicId","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","currentTime","requestAnimationFrame","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","peer","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","AiReplyHistoryRole","typify","KB_TO_BYTES","LARGE_FILE_THRESHOLD","DISCONNECT_SLEEP","MAX_CONCURRENT_CONNECTIONS","MAX_CONCURRENT_CONNECTIONS_PREMIUM","foremans","fill","Foreman","readBigIntFromBuffer","generateRandomBytes","uploadFileV1","fileParams","onProgress","fileIdStr","fileId","String","localDb","isLarge","partSize","getUploadPartSize","partCount","floor","fileToBuffer","cipher","Account","Api","parts","md5Checksum","uploadFileCache","activeCounts","activeWorkers","currentForemanIndex","indexOf","min","promises","senderIndex","requestWorker","blobSlice","subarray","jMemo","blobSliceMemo","CLOUD_MESSAGE_API","log","fileInfo","uploadReq","UploadReq","releaseWorker","uploadFile","client","isCanceled","slice","sender","getSender","session","dcId","partBytes","send","filePart","fileTotalParts","bytes","isConnected","sleep","errors","seconds","RPCError","require","rpcErrorRe","Common","RPCBaseErrors","RPCErrorList","module","RPCMessageToError","rpcError","request","msgRegex","Cls","errorMessage","capture","parseTl","serializeBytes","serializeDate","toSignedLittleBuffer","tlContent","schemeContent","CACHING_SUPPORTED","CACHE_KEY","extractParams","fileContent","f","functions","d","isFunction","argToBytes","x","alloc","writeInt32LE","writeDoubleLE","getArgFromReader","reader","arg","isVector","useVectorId","readInt","temp","len","flagIndicator","readLong","readLargeInt","readDouble","tgReadString","tgReadBool","tgReadBytes","tgReadDate","skipConstructorId","tgReadObject","createClasses","classesType","classes","classParams","constructorId","subclassOfId","argsConfig","namespace","fullName","constructor","args","_defineProperty","argName","static","isFlag","flagValue","flagGroup","flagIndex","idForBytes","writeUInt32LE","buffers","l","flagCalculate","boxed","charAt","toUpperCase","readResult","definitions","fromCache","jsonCache","parse","loadFromCache","constructorParamsApi","functionParamsApi","constructorParamsSchema","functionParamsSchema","requests","loadFromTlSchemas","obj1","obj2","mergeWithNamespaces","buildApiFromTlSchema","TIME_OUT_MS","ENABLE_GPT4","ALL_MODELS","available","isValidNumber","makeRequestParam","options","sendMessages","v","role","content","filterBot","model","getHeaders","apiKey","requestOpenaiClient","path","AI_PROXY_API","requestChatStream","req","oldConfig","config","validator","max_tokens","presence_penalty","temperature","k","filterConfig","controller","AbortController","reqTimeoutId","abort","signal","responseText","finish","onMessage","ok","getReader","decoder","TextDecoder","onController","resTimeoutId","read","decode","done","onError","code","onAbort","ControllerPool","controllers","addController","sessionIndex","messageIndex","stop","requestUsage","formatDate","getFullYear","getMonth","padStart","getDate","startDate","endDate","used","subs","response","total","total_usage","hard_limit_usd","subscription","AuthNativeReq","BaseMsg","msg","super","setCommandId","ActionCommands","PbMsg","PbQrCode","PbUser","DownloadMsgReq","DownloadMsgRes","GenMsgIdReq","GenMsgIdRes","SendRes","UpdateCmdReq","UpdateCmdRes","UploadMsgReq","StopChatStreamReq","DownloadUserReq","MsgCommand","msgDispatcher","MsgDispatcher","senderId","isOutgoing","currentTs","btn","inlineButtons","buildInlineCallbackButton","selectChatMessage","sendOutgoingMsg","replyText","updateGlobal","showMnemonicModal","cmds","message1","time","callApiWithPdu","UploadUserReq","DownloadUserReqRes","downloadUserRes","DownloadUserRes","getChatId","files","MsgCommandChatGpt","endsWith","chatMessages","getCommandId","handleNewMessage","handleUpdateMessage","aiReplyHistory","historyList","getChatGptConfig","rows","msgId","toLocaleString","isEnableSync","isEnableAi","getAiBotConfig","disableClearHistory","changeAiBotConfig","getInlineButtons","reloadCommands","getCommands","aiBotConfig","aiConfig","chatGptModelConfig","changeChatGptConfig","showModalFromEvent","initVal","placeholder","isPositiveInteger","STOP_HANDLE_MESSAGE","isEnable","getCustomApiInlineButtons","commandsFromApi","models","ALL_CHAT_GPT_MODELS","getAiModelInlineButtons","val","getChatGptModelConfig","step","inputType","changeChatGptModelConfig","switch","handleChangeModelConfig","disableApi","setApi","updateCmd","customApi","toggleClearHistory","message2","receiptMessageId","isQuiz","query","isSamePeer","t","prompt","createChat","needCreate","isNotJoined","prompts","tag","UserIdEnPrompt","promptRows","msg0","reverse","desc","UserIdCnPrompt","createChatGpt","createPromptChat","getInlineButtonsDemo","testMsg","SyncReq","SyncRes","currentSyncBotContext","DEFAULT_START_TIPS","qrcode","Decoder","blobUrl","createObjectURL","scan","qrcodeData","qrcodeDataBuf","decodeRes","Pdu","QrCodeType","password","getPasswordFromEvent","aesDecrypt","hashSha256","setMnemonic","mnemonic","Mnemonic","checkMnemonic","toEntropy","entropy","accountId","setEntropy","pwd","ts","address","sign","signMessage","saveSession","location","reload","accountAddress","sessions","verifySession","enableSync","switchAccount","chatIdsDeleted","getEntropy","syncFolders","showPickBotModal","getSessionAddress","accountAddresses","adr","disableSync","ceil","isUpload","userStoreData","syncRes","parseMsg","index","addUsersObj","addChatsObj","buildDefaultChat","getAccountId","delSession","messageById","selectChatMessages","uploadMsgList","msgCommand","update","apiUpdate","getMsgSenderAsId","sendAs","getMsgText","genMsgDate","updateMessageSendSucceeded","localId","updateMessageText","updateMessage","newTextMessage","genMsgId","shouldForceReply","newMessage","isLocalMessageId","sendingState","parseCodeBlock","sendNewMessage","replyNewTextMessage","sendNewTextMessage","translationValues","getBotCommands","getBot","getBotConfig","sendMsgText","processFirstBotCmd","processAiBotCmd","msgCommandChatGpt","setting","reset","aiModel","initPrompt","maxHistoryLength","usage","processBotApiCmd","lab","processCmd","messageIds","msgSend","attachment","media","aiHistoryList","onUpdate","setMsgHandler","notifies","BotWebSocketNotifyAction","BotWebSocketState","setWsUrl","setSession","waitForMsgServerState","Type","bb","popByteBuffer","writeInt32","writeInt16","writeBytes","toUint8Array","bbDecode","wrapByteBuffer","readInt32","readInt16","readBytes","buf2","voice","document","genMessageId","getMediaFileId","getPhotoInfo","thumbBlobUrl","quick","mimeType","mediaType","previewBlobUrl","mediaSize","isSpoiler","entities","parseEntities","isMsgCipher","ApiMessageEntityTypes","MsgChatGptWorker","process","handleMedia","handleBotCmdText","processOutGoing","processBotMsg","reconnect_cnt","seq_num","clients","currentMsgConn","autoConnect","sendMsgTimer","connect_none","__rev_msg_map","__sending_msg_map","wsUrl","getState","getAutoConnect","setAutoConnect","notifyState","closed","isConnect","close","logged","connected","WebSocket","binaryType","onopen","onConnected","bind","onmessage","onData","onclose","onClose","reconnect","startTime","waitTime","msgHandler","__msgHandler","login","AuthLoginReq","notify","notifyList","byteLength","getSeqNum","getActionCommandsName","onConnectionStateChanged","connect_error","waitForMsgCallback","updateSeqNo","event","CustomEvent","detail","dispatchEvent","replaceSubstring","isEmailValid","email","test","parseQueryFromUrl","urlStr","replacedUrl","currentTs1000","FileReader","onload","buffer","onerror","readAsArrayBuffer","str","endianness","loadavg","uptime","freemem","MAX_VALUE","totalmem","cpus","appVersion","networkInterfaces","getNetworkInterfaces","arch","platform","tmpdir","tmpDir","EOL","homedir"],"sourceRoot":""}