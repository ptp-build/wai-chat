{"version":3,"file":"8422.e9e410f4d9e97496f447.js","mappings":"4bAwGMA,EAAAA,IAJN,MAWMC,GAA8BC,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAM,GAC3DC,GAA8BC,EAAAA,EAAAA,KAAUF,GAAOA,KAAM,KAAK,GAAO,IAEvEG,EAAAA,EAAAA,IAAiB,0BAA0BC,MAAOC,EAAQC,KACxD,MAAMC,EAAmB,IAAIC,IAE7B,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAAA,IAAiCD,IAAK,OAClDE,EAAAA,EAAAA,IAlBiC,KAoBvCN,GAASO,EAAAA,EAAAA,MACT,MAAMC,EAAiBC,OAAOC,OAAOV,EAAOW,SAEzCC,KAAI,EAAGC,GAAIC,MAAYC,EAAAA,EAAAA,IAAyBf,EAAQc,IAAQE,SAChEC,OAAOC,SAEJC,GAAsBC,EAAAA,EAAAA,IAAcC,EAAAA,KACpCC,EAAaH,GAAqBI,MAAMV,IAAQL,EAAegB,SAASX,KAAQX,EAAiBuB,IAAIZ,KAC3G,IAAKS,EACH,OAGFpB,EAAiBwB,IAAIJ,GAErBrB,EAAQ0B,qBAAqB,CAAEX,OAAQM,EAAYM,SAAUC,EAAAA,GAAgBf,OAAOgB,EAAAA,EAAAA,OACtF,MAGFhC,EAAAA,EAAAA,IAAiB,YAAY,CAACE,EAAQC,EAAS8B,KAC7C,MAAM,GACJlB,EAAE,SAAEe,EAAWC,EAAAA,IACbE,EACJ,IAAKlB,EACH,OAGF,MAAM,cAAEmB,GAAkBhC,EACpBiC,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQa,GAMhC,GAJIoB,GAAME,eACRlC,EAAQmC,iBAAiB,CAAEvB,OAGxBoB,GASMI,EAAAA,EAAAA,IAAkBJ,IAAUA,EAAKK,WAR1C,GAAIzB,IAAOmB,GACJO,EAAAA,EAAAA,IAAQ,YAAa,CAAEC,KAAM,aAC7B,CACL,MAAMC,GAAOC,EAAAA,EAAAA,IAAW1C,EAAQa,GAC5B4B,IACGF,EAAAA,EAAAA,IAAQ,YAAa,CAAEC,KAAM,OAAQC,QAE9C,CAMEb,IAAaC,EAAAA,IACf5B,EAAQ0C,wBAAwB,CAAE3B,OAAQH,EAAIe,YAChD,KAGF9B,EAAAA,EAAAA,IAAiB,gBAAgBC,MAAOC,EAAQC,EAAS8B,KACvD,MAAM,GACJlB,EAAE,SAAEe,EAAQ,gBAAEgB,EAAe,MAAE9B,GAAQgB,EAAAA,EAAAA,OACrCC,EAEJ,GAAIH,IAAaC,EAAAA,GAAgB,CAC/B,MAAMgB,GAAeC,EAAAA,EAAAA,IAAyB9C,EAAQa,EAAIe,GAC1D,GAAKiB,EAmBH5C,EAAQ8C,SAAS,CAAElC,KAAIe,SAAUiB,EAAc/B,cAnB9B,CACjB,MAAMmB,GAAOe,EAAAA,EAAAA,IAAuBhD,EAAQa,EAAIe,GAChD,IAAKK,EACH,OAGFhC,EAAQ8C,SAAS,CAAElC,GAAIoC,EAAAA,IAAanC,UAEpC,MAAMoC,QAAeX,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEN,OAAML,WAAUgB,oBAC1E,IAAKM,EAEH,YADAjD,EAAQkD,iBAAiB,CAAErC,UAG7Bd,GAASO,EAAAA,EAAAA,MACTP,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOI,MAAO,QAC7DC,EAAAA,EAAAA,IAAUvD,GAEVC,EAAQ8C,SAAS,CAAElC,KAAIe,SAAUsB,EAAOL,aAAc/B,SACxD,CAGF,MAGFhB,EAAAA,EAAAA,IAAiB,kBAAkBC,MAAOC,EAAQC,EAAS8B,KACzD,MAAM,GAAElB,EAAE,MAAEC,GAAQgB,EAAAA,EAAAA,OAAsBC,EACpCE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQa,GAChC,IAAKoB,EACH,OAGF,MAAMuB,QAAqBjB,EAAAA,EAAAA,IAAQ,gBAAiBN,GAEhDuB,GAAcC,UAAUC,cAC1BzD,EAAQ8C,SAAS,CAAElC,GAAI2C,EAAaC,SAASC,aAAc5C,SAC7D,KAGFhB,EAAAA,EAAAA,IAAiB,0BAA0BC,MAAOC,EAAQC,EAAS8B,KACjE,MAAM,OACJf,EAAM,SAAEY,EAAQ,UAAE+B,EAAS,MAAE7C,GAAQgB,EAAAA,EAAAA,OACnCC,EACEE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,EACH,OAGF,MAAMiB,QAAeX,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEN,OAAML,aAC3DsB,IAGLlD,GAASO,EAAAA,EAAAA,MACTP,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOI,MAAO,QAC7DC,EAAAA,EAAAA,IAAUvD,GAEVC,EAAQ2D,aAAa,CACnB5C,SAAQY,WAAU+B,YAAW7C,UAC7B,KAGJhB,EAAAA,EAAAA,IAAiB,mBAAmBC,MAAOC,EAAQC,EAAS8B,KAC1D,MAAM,MAAEjB,GAAQgB,EAAAA,EAAAA,OAAsBC,GAAW,CAAC,EAC5CE,GAAO4B,EAAAA,EAAAA,IAAkB7D,GAC/B,GAAIiC,EAEF,YADAhC,EAAQ8C,SAAS,CAAElC,GAAIoB,EAAKpB,GAAIiD,sBAAsB,EAAMhD,UAI9Db,EAAQ8C,SAAS,CAAElC,GAAIoC,EAAAA,IAAaa,sBAAsB,EAAMhD,UAEhE,MAAMoC,QAAeX,EAAAA,EAAAA,IAAQ,YAAa,CAAEC,KAAM,YAC9CU,GACFjD,EAAQ8C,SAAS,CAAElC,GAAIqC,EAAOlC,OAAQ8C,sBAAsB,EAAMhD,SACpE,KAGFhB,EAAAA,EAAAA,IAAiB,gBAAgBC,MAAOC,EAAQC,EAAS8B,KACvD,MAAMgC,EAAWhC,EAAQgC,SACzB,GAAgB,aAAbA,EACD,OAEF,MAAM,UAAEC,GAAcjC,EACtB,IAAI,cAAEkC,GAAkBlC,EACpB3B,EAAI,EAER,MAAM8D,EAAgBjC,GACbA,EAAKkC,aAAaC,MAAQnC,EAAKoC,SAExC,KAAOJ,IAAkBjE,EAAOsE,MAAMC,cAAcR,IAAW,CAC7D,GAAI3D,KAvKqB,IA4KvB,YAJIoE,EAAAA,KAEFC,QAAQC,MAAM,mDAKlB1E,GAASO,EAAAA,EAAAA,MACT,MAAMoE,GAAWV,GAAiBjE,EAAOsE,MAAMK,QAAQZ,GACjDa,EAAaD,EACfA,EAEC/D,KAAKC,GAAOb,EAAOsE,MAAMO,KAAKhE,KAC9BI,QAAQgB,GACPf,QAAQe,GAAQiC,EAAajC,KAC1BA,EAAKpB,KAAOrB,EAAAA,OACXsF,EAAAA,EAAAA,IAAmB9E,EAAQiC,EAAKpB,MAGrCkE,MAAK,CAACC,EAAOC,IAAUf,EAAac,GAAUd,EAAae,KAAS,QACrEC,QACEC,EAAUnF,EACd+D,EACAa,GAAY/D,GACZ+D,GAAaV,EAAaU,GAC1BX,GACA,GAGEA,IACFD,MACAC,GAAgB,GAGlBjE,GAASO,EAAAA,EAAAA,KACX,MAGFT,EAAAA,EAAAA,IAAiB,gBAAgB,CAACE,EAAQC,EAAS8B,KACjD,MAAM,OAAEf,EAAM,MAAEoE,EAAK,MAAEtE,GAAQgB,EAAAA,EAAAA,OAAsBC,EAC/CE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC3BiB,IAIDmD,EACFC,EAAarF,EAAQC,EAASgC,EAAMnB,GAEpClB,GAA4B,IAAMyF,EAAarF,EAAQC,EAASgC,EAAMnB,KACxE,KAGFhB,EAAAA,EAAAA,IAAiB,gBAAiBE,IAChCP,GAA4B,IAAM0F,EAAUnF,EAAQ,WAAU,KAGhEF,EAAAA,EAAAA,IAAiB,qBAAqB,CAACE,EAAQC,EAAS8B,KACtD,MAAM,OAAEf,GAAWe,EACbE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC3BiB,IAIAM,EAAAA,EAAAA,IAAQ,oBAAqB,CAChCN,UACIjB,IAAWxB,EAAAA,KAAiC,CAC9C8F,kBAAkBC,EAAAA,EAAAA,IAA8BvF,IAASwF,UAE3D,KAGJ1F,EAAAA,EAAAA,IAAiB,wBAAwB,CAACE,EAAQC,EAAS8B,KACzD,MAAM,OAAEf,EAAM,QAAEyE,GAAY1D,EACtBE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC3BiB,IAILjC,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQgB,EAAQ,CAAEyE,aACtClC,EAAAA,EAAAA,IAAUvD,IACLuC,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEN,OAAMwD,YAAU,KAGzD3F,EAAAA,EAAAA,IAAiB,yBAAyB,CAACE,EAAQC,EAAS8B,KAC1D,MAAM,OAAEf,EAAM,QAAEyE,EAAO,QAAEE,GAAY5D,EAC/BE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC3BiB,IAILjC,GAAS4F,EAAAA,EAAAA,IAAY5F,EAAQgB,EAAQ2E,EAAS,CAAEF,aAChDlC,EAAAA,EAAAA,IAAUvD,IACLuC,EAAAA,EAAAA,IAAQ,wBAAyB,CACpCN,OAAM0D,UAASF,YACf,KAGJ3F,EAAAA,EAAAA,IAAiB,iBAAiBC,MAAOC,EAAQC,EAAS8B,KACxD,MAAM,MACJ8D,EAAK,MAAEC,EAAK,MAAEC,EAAK,UAAEC,EAAS,MAAElF,GAAQgB,EAAAA,EAAAA,OACtCC,EAEEuB,EAAS0C,EACZpF,KAAKC,IAAO6B,EAAAA,EAAAA,IAAW1C,EAAQa,KAC/BI,OAAOC,SASV,IAAI+E,EAPJjG,GAASkG,EAAAA,EAAAA,GAAelG,EAAQ,CAC9BmG,aAAc,CACZC,SAAUC,EAAAA,GAAAA,aAEXvF,IACHyC,EAAAA,EAAAA,IAAUvD,GAIV,IACEiG,QAAuB1D,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEsD,QAAOC,QAAOxC,SAClE,CAAE,MAAOoB,GACP1E,GAASO,EAAAA,EAAAA,MAETP,GAASkG,EAAAA,EAAAA,GAAelG,EAAQ,CAC9BmG,aAAc,CACZC,SAAUC,EAAAA,GAAAA,QAEXvF,IAEHyC,EAAAA,EAAAA,IAAUvD,GAE0B,sBAA/B0E,EAAmBc,QACtBvF,EAAQqG,sBAAsB,CAAEC,MAAO,WAAYzF,UAEnDb,EAAQuG,WAAW,CAAEC,KAAM,IAAM/B,EAAoBgC,aAAa,GAAQ5F,SAE9E,CAEA,IAAKmF,EACH,OAGF,MAAQpF,GAAI8F,EAAS,WAAEC,GAAeX,EAEtCjG,GAASO,EAAAA,EAAAA,MACTP,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQ2G,EAAWV,GACvCjG,GAASkG,EAAAA,EAAAA,GAAelG,EAAQ,CAC9BmG,aAAc,KACTU,EAAAA,EAAAA,IAAe7G,EAAQc,GAAOqF,aACjCC,SAAUH,EAAiBI,EAAAA,GAAAA,SAAgCA,EAAAA,GAAAA,QAE5DvF,IACHyC,EAAAA,EAAAA,IAAUvD,GACVC,EAAQ8C,SAAS,CAAElC,GAAI8F,EAAW7C,sBAAsB,EAAMhD,UAE1D6F,GAAaC,GAAcb,SACvBxD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEvB,OAAQ2F,EAAWC,aAAYb,SAClE,KAGFjG,EAAAA,EAAAA,IAAiB,eAAeC,MAAOC,EAAQC,EAAS8B,KACtD,MAAM,OAAEf,EAAM,MAAEF,GAAQgB,EAAAA,EAAAA,OAAsBC,EACxCE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,EACH,OAGF,MAAQpB,GAAI8F,EAAS,WAAEC,GAAe3E,EAEtC,GAAM0E,GAAaC,EAInB,UACQrE,EAAAA,EAAAA,IAAQ,cAAe,CAAEoE,YAAWC,cAC5C,CAAE,MAAOlC,GAC6B,sBAA/BA,EAAmBc,QACtBvF,EAAQqG,sBAAsB,CAAEC,MAAO,WAAYzF,UAEnDb,EAAQuG,WAAW,CAAEC,KAAM,IAAM/B,EAAoBgC,aAAa,GAAQ5F,SAE9E,MAGFhB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACE,EAAQC,EAAS8B,KACnD,MAAM,OAAEf,EAAM,OAAE8F,EAAM,MAAEhG,GAAQgB,EAAAA,EAAAA,OAAsBC,EAChDE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC1ByB,GAAOC,EAAAA,EAAAA,IAAW1C,EAAQ8G,GAC3B7E,GAASQ,IAIdzC,GAAS+G,EAAAA,EAAAA,IAAU/G,EAAQgB,IAC3BuC,EAAAA,EAAAA,IAAUvD,IAENe,EAAAA,EAAAA,IAAyBf,EAAQc,IAAQE,SAAWA,GACtDf,EAAQ8C,SAAS,CAAElC,QAAIqE,EAAWpE,WAG/ByB,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEN,OAAMQ,SAAO,KAGhD3C,EAAAA,EAAAA,IAAiB,cAAc,CAACE,EAAQC,EAAS8B,KAC/C,MAAM,OAAEf,EAAM,MAAEF,GAAQgB,EAAAA,EAAAA,OAAsBC,EACxCE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC3BiB,IAILjC,GAAS+G,EAAAA,EAAAA,IAAU/G,EAAQgB,IAC3BuC,EAAAA,EAAAA,IAAUvD,IAENe,EAAAA,EAAAA,IAAyBf,EAAQc,IAAQE,SAAWA,GACtDf,EAAQ8C,SAAS,CAAElC,QAAIqE,EAAWpE,WAG/ByB,EAAAA,EAAAA,IAAQ,aAAc,CAAEvB,OAAQiB,EAAKpB,KAAK,KAGjDf,EAAAA,EAAAA,IAAiB,gBAAgB,CAACE,EAAQC,EAAS8B,KACjD,MAAM,OAAEf,EAAM,MAAEF,GAAQgB,EAAAA,EAAAA,OAAsBC,EACxCE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,EACH,OAGFjC,GAAS+G,EAAAA,EAAAA,IAAU/G,EAAQgB,IAC3BuC,EAAAA,EAAAA,IAAUvD,IAENe,EAAAA,EAAAA,IAAyBf,EAAQc,IAAQE,SAAWA,GACtDf,EAAQ8C,SAAS,CAAElC,QAAIqE,EAAWpE,UAGpC,MAAQD,GAAI8F,EAAS,WAAEC,GAAe3E,EAClC0E,GAAaC,IACVrE,EAAAA,EAAAA,IAAQ,eAAgB,CAAEoE,YAAWC,cAC5C,KAGF9G,EAAAA,EAAAA,IAAiB,iBAAiB,CAACE,EAAQC,EAAS8B,KAClD,MAAM,OAAEf,EAAM,MAAEF,GAAQgB,EAAAA,EAAAA,OAAsBC,EACxCE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,EACH,OAGFjC,GAAS+G,EAAAA,EAAAA,IAAU/G,EAAQgB,IAC3BuC,EAAAA,EAAAA,IAAUvD,IAENe,EAAAA,EAAAA,IAAyBf,EAAQc,IAAQE,SAAWA,GACtDf,EAAQ8C,SAAS,CAAElC,QAAIqE,EAAWpE,UAGpC,MAAQD,GAAI8F,EAAS,WAAEC,GAAe3E,EAClC0E,GAAaC,IACVrE,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEoE,YAAWC,cAC7C,IAIF,MAAMI,EAAiBjH,MAAOc,EAAUoG,KACtC,MAAMC,QAAYC,MAAMF,GAClBG,QAAWF,EAAIG,cACf7E,EAAO,SAASyE,EAAIK,MAAM,KAAKL,EAAIK,MAAM,KAAKC,OAAS,GACvDC,EAAO,IAAIC,EAAAA,GAAY,CAC3BC,KAAK,CACH7G,KACA8G,KAAK,EACLC,WAAW,EACXC,IAAIC,EAAOC,KAAKX,GAChBY,KAAKF,EAAOC,KAAKX,GAAIG,OACrB/E,QAEFyF,IAAIC,EAAAA,GAAAA,WACHC,OAAOC,YACJC,EAAO,IAAIC,KAAK,CAACR,EAAOC,KAAKP,IAAO,CAAChF,SACrC+F,EAAO,IAAID,KAAK,CAACR,EAAOC,KAAKX,IAAK,CAAC5E,SAGnCgG,QAAiBC,EAAAA,EAAAA,IAAYF,EAAO,GAAG,GAAI,aADjC,IAEVG,QAAkBC,EAAAA,EAAAA,IAAUH,GAC5BI,QAAgBC,EAAAA,EAAAA,IAAcH,GAOpC,aAFMI,EAAAA,KAAcC,EAAAA,IAAsBlI,EAAIwH,GAEvC,CACLxH,GAAGA,EACHmI,UAAU,CACRJ,UARF,MAAS,IACT,OAAW,KAUX,MAAS,CACP,CACEK,MAAO,IACPC,OAAQ,IACR1G,KAAM,KAER,CACEyG,MAAO,IACPC,OAAQ,IACR1G,KAAM,KAER,CACEyG,MAAO,IACPC,OAAQ,IACR1G,KAAM,MAGX,GAEH1C,EAAAA,EAAAA,IAAiB,cAAcC,MAAOC,EAAQC,EAAS8B,KACrD,MAAM,MACJ8D,EAAK,GAAEhF,EAAE,WAACsI,EAAU,MAACrD,EAAK,MAAEhF,GAAQgB,EAAAA,EAAAA,OAClCC,EAEJ,IAAIqH,EAAU3I,OAAO4I,KAAKrJ,EAAOsD,MAAMuB,MAEvC7E,GAASkG,EAAAA,EAAAA,GAAelG,EAAQ,CAC9BmG,aAAc,CACZC,SAAUC,EAAAA,GAAAA,aAEXvF,IACHyC,EAAAA,EAAAA,IAAUvD,GAEV,IACE,IAAI8G,EACAwC,EAAYC,SAASC,EAAAA,IACrB3I,EAWFiG,EAASjG,GAVNuI,EAAQ7B,OAAS,IAClB6B,EAAU,IAAIA,KAAWpJ,EAAOyJ,gBAChCL,EAAQrE,MAAK,CAAC2E,EAAEC,IAAIJ,SAASI,GAAKJ,SAASG,KAC3CJ,EAAYC,SAASH,EAAQ,IAAM,GAElCE,EAAY,MACbA,EAAY,KAEdxC,EAASwC,EAAUM,YAKCC,aAAaC,QAAQ,WAAYD,aAAaC,QAAQ,UAA5E,MACMC,EAAsBZ,GAAca,EAAAA,GAC1C,IAAIC,EAAa,GACbC,EAAS,GACb,GAAGC,EAAAA,GAAgBrD,GAAQ,CACzBmD,GAAaG,EAAAA,EAAAA,aACb,MAAMC,EAAYF,EAAAA,GAAgBrD,GAC5Bf,QAAciB,EAAeiD,EAAWI,GAC9CH,EAAOI,KAAKvE,EACd,CACA,MAAMtD,EAAO,CACX,qBAAuB,EACvB,gBAAkB,EAClB,KAAQ,cACR5B,GAAGiG,EACH,YAAe,GACfxE,OAAM,EACN,UAAY,EACZiI,QAAO,EACPN,aACArD,WAAW,GACX4D,WAAW,EACXC,UAAW5E,EACXqE,SACAQ,UAAW,CACT,CACE,SAAY,OAAO5D,EACnB,UAAY,EACZ,YAAc,IAGlBrD,SAAU,CACR,WAAa,EACb,iBAAmB,EACnBkH,IAAK7E,GAAS8E,EAAAA,GACdC,QAAS,CACPC,MAAM,CACJC,UAAS,EACTC,cAAc,CACZjB,sBACAkB,QAAQ,GACRC,mBAAmB,GACnBC,YAAY,IACPC,EAAAA,MACCtE,IAAWuE,EAAAA,GAAiB,CAACC,MAAM,SAAW,CAAC,KAIzDC,MAAOzE,EACP,YAAehB,GAAS8E,EAAAA,GACxB,WAAc,CACZ,KAAQ,YAEVY,SAAS,IAAIC,EAAAA,MAAwBC,EAAAA,IAA6B9K,KAAI+K,IAEpEA,EAAIJ,MAAQzE,EACL6E,QAKf3L,GAASO,EAAAA,EAAAA,MACT,MAAM,YAACqL,GAAe5L,EAEhBsD,EAAkB,CAACb,GAGnB6B,EAAkB,CAACuH,EAAAA,EAAAA,iBAAmCpJ,IAE5D,IACIqJ,EADAC,EAAmBC,OAAOC,eAAenC,QAAQ,oBAErD,MAAMoC,EAA+C,CAAC,EACnDH,GACDtL,OAAOC,OAAOkL,EAAY/G,MAAMsH,SAASC,IACvC,GAAGR,EAAYS,WAAY9C,SAASwC,IAAoB,CACtD,MAAMO,EAAiBV,EAAYS,WAAY9C,SAASwC,IACrDK,EAAIvL,KAAOyL,IAERF,EAAIG,kBACNH,EAAIG,gBAAkB,IAExBH,EAAIG,gBAAgBjC,KAAKxD,GACzBoF,EAAeE,EAAIvL,IAAMuL,EACzBN,EAAsBM,EAE1B,KAIJ,MAAMI,EAAgD,CACpD,CAAC/J,EAAK5B,IAAM,CACV,KAAQ,oBAIZb,GAASO,EAAAA,EAAAA,MACTP,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBC,EAAO,OACtDtD,GAASyM,EAAAA,EAAAA,IAASzM,GAAQqD,EAAAA,EAAAA,IAAqBiB,EAAO,OACtDtE,GAAS0M,EAAAA,EAAAA,IAAkB1M,EAAQ,SAAUsE,EAAM1D,KAAIqB,GAAMA,EAAKpB,MAClEb,GAAS2M,EAAAA,EAAAA,IAAgB3M,EAAQwM,GACjCxM,GAASkG,EAAAA,EAAAA,GAAelG,EAAQ,CAC9BmG,aAAc,KACTU,EAAAA,EAAAA,IAAe7G,EAAQc,GAAOqF,aACjCC,SAAUC,EAAAA,GAAAA,WAEXvF,IAEHyC,EAAAA,EAAAA,IAAU,IACLvD,EACH4L,YAAY,IACP5L,EAAO4L,YACV/G,KAAK,IACA7E,EAAO4L,YAAY/G,QACnBqH,MAMNJ,GACD7L,EAAQ2M,eAAe,CAAE/L,GAAIiL,EAAoBjL,GAAIgM,aAAcf,KAElE3C,GAAetI,IAAOiM,EAAAA,IAAiBjM,IAAOwK,EAAAA,KAC/CpL,EAAQ8M,eAAe,CAAC/L,OAAO8F,EAAOkG,QAAQ,cAAclM,UAG9Db,EAAQ8C,SAAS,CAAClC,GAAIiG,EAAOhD,sBAAsB,GAGrD,CAAC,MAAOmJ,GACNxI,QAAQC,MAAMuI,GACdjN,GAASO,EAAAA,EAAAA,MACTP,GAASkG,EAAAA,EAAAA,GAAelG,EAAQ,CAC9BmG,aAAc,KACTU,EAAAA,EAAAA,IAAe7G,EAAQc,GAAOqF,aACjCC,SAAUC,EAAAA,GAAAA,MACV3B,MAAO,SAER5D,IACHyC,EAAAA,EAAAA,IAAUvD,EACZ,MAEFF,EAAAA,EAAAA,IAAiB,mBAAmBC,MAAOC,EAAQC,EAAS8B,KAC1D,MAAM,MACJ8D,EAAK,UAAEG,EAAS,MAAED,EAAK,MAAEjF,GAAQgB,EAAAA,EAAAA,OAC/BC,EACEuB,EAAS0C,EACZpF,KAAKC,IAAO6B,EAAAA,EAAAA,IAAW1C,EAAQa,KAC/BI,OAAOC,SAEVlB,GAASkG,EAAAA,EAAAA,GAAelG,EAAQ,CAC9BmG,aAAc,CACZC,SAAUC,EAAAA,GAAAA,aAEXvF,IACHyC,EAAAA,EAAAA,IAAUvD,GAEV,IACE,MAAMkN,QAAoB3K,EAAAA,EAAAA,IAAQ,kBAAmB,CACnDsD,QACAvC,UAGF,IAAK4J,EACH,OAGF,MAAQrM,GAAIG,GAAWkM,EAEvBlN,GAASO,EAAAA,EAAAA,MACTP,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQgB,EAAQkM,GACpClN,GAASkG,EAAAA,EAAAA,GAAelG,EAAQ,CAC9BmG,aAAc,KACTU,EAAAA,EAAAA,IAAe7G,EAAQc,GAAOqF,aACjCC,SAAU8G,EAAc7G,EAAAA,GAAAA,SAAgCA,EAAAA,GAAAA,QAEzDvF,IACHyC,EAAAA,EAAAA,IAAUvD,GACVC,EAAQ8C,SAAS,CACflC,GAAIG,EACJ8C,sBAAsB,EACtBhD,UAGEE,GAAU+E,SACNxD,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7BvB,SACA+E,SAGN,CAAE,MAAOkH,GACW,kBAAdA,EAAEzH,UACJxF,GAASO,EAAAA,EAAAA,MACTP,GAASkG,EAAAA,EAAAA,GAAelG,EAAQ,CAC9BmG,aAAc,KACTU,EAAAA,EAAAA,IAAe7G,EAAQc,GAAOqF,aACjCC,SAAUC,EAAAA,GAAAA,MACV3B,MAAO,qBAER5D,IACHyC,EAAAA,EAAAA,IAAUvD,GAEd,MAGFF,EAAAA,EAAAA,IAAiB,oBAAoB,CAACE,EAAQC,EAAS8B,KACrD,MAAM,GAAElB,EAAE,SAAEsM,EAAQ,MAAErM,GAAQgB,EAAAA,EAAAA,OAAsBC,EAC9CE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQa,GAChC,IAAKoB,EACH,OAGF,MAAMsE,GAAQ6G,EAAAA,EAAAA,GAAmBpN,EAAQ,sBAEzC,GAAImN,EAAU,CACZ,MAAME,GAASC,EAAAA,EAAAA,IAAiBtN,EAAQmN,GACxC,GAAIE,EAAQ,CACV,MAAME,IAAkBzI,EAAAA,EAAAA,IAAmB9E,EAAQa,EAAIsM,IAEjD,cAAEK,EAAa,gBAAEjB,GAAoBc,EACrCI,EAAeF,EACjB,CAAC1M,KAAQ2M,GAAiB,KACzBA,GAAiB,IAAIvM,QAAQyM,GAAaA,IAAa7M,IAGtD8M,EAAqB,CAAC9M,KAAO0L,IAE9BhK,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7B1B,GAAIsM,EACJN,aAAc,IACTQ,EACHG,cAAeC,EACflB,gBAAiBoB,IAGvB,CACF,KAAO,CACL,MAAM5J,GAAW6J,EAAAA,EAAAA,IAAmB5N,EAAQa,GACtCgN,GAAW/I,EAAAA,EAAAA,IAAmB9E,EAAQa,EAAiB,aAAbkD,EAA0B+J,EAAAA,SAAqB5I,GAEzF6I,EAAM/N,EAAOsE,MAAM0J,iBAA8B,aAAbjK,EAA0B,WAAa,UACjF,IAAKgK,GAAKxG,QAAU,IAAMhB,IAAUsH,EAKlC,YAJA5N,EAAQqG,sBAAsB,CAC5BC,MAAO,qBACPzF,WAICyB,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEN,OAAMsL,gBAAiBM,GAC5D,MAGF/N,EAAAA,EAAAA,IAAiB,sBAAsB,CAACE,EAAQC,EAAS8B,KACvD,MAAM,GAAElB,GAAOkB,EACTE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQa,GAC5BoB,IACGM,EAAAA,EAAAA,IAAQ,qBAAsB,CACjCN,OACAkL,UAAUc,EAAAA,EAAAA,IAAehM,GAAQ,EAAI6L,EAAAA,KAEzC,KAGFhO,EAAAA,EAAAA,IAAiB,mBAAmBC,UAClC,MAAM6L,QAAoBrJ,EAAAA,EAAAA,IAAQ,oBAE9BqJ,IACF5L,GAASO,EAAAA,EAAAA,MAETP,EAAS,IACJA,EACH4L,YAAa,IACR5L,EAAO4L,eACPA,KAGPrI,EAAAA,EAAAA,IAAUvD,GACZ,KAGFF,EAAAA,EAAAA,IAAiB,8BAA8BC,UAC7C,MAAMmO,QAA+B3L,EAAAA,EAAAA,IAAQ,+BAEzC2L,IACFlO,GAASO,EAAAA,EAAAA,MAETP,EAAS,IACJA,EACH4L,YAAa,IACR5L,EAAO4L,YACVuC,YAAaD,KAGjB3K,EAAAA,EAAAA,IAAUvD,GACZ,KAGFF,EAAAA,EAAAA,IAAiB,mBAAmB,CAACE,EAAQC,EAAS8B,KACpD,MAAM,OACJf,EAAM,YAAEoN,EAAW,SAAEC,EAAQ,MAAEvN,GAAQgB,EAAAA,EAAAA,OACrCC,EACEwE,GAAQ6G,EAAAA,EAAAA,GAAmBpN,EAAQ,sBAClBqO,EACpBC,MAAMzN,IAAOyM,EAAAA,EAAAA,IAAiBtN,EAAQa,GAAK0L,gBAAgBhF,QAAUhB,IAEtEtG,EAAQqG,sBAAsB,CAAEC,MAAO,qBAAsBzF,WAI/DsN,EAAYjC,SAAQpM,UAClB,MAAMsN,GAASC,EAAAA,EAAAA,IAAiBtN,EAAQa,GACpCwM,SACI9K,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9B1B,KACAgM,aAAc,IACTQ,EACHG,cAAeH,EAAOG,eAAevM,QAAQyM,GAAaA,IAAa1M,IACvEuL,gBAAiBc,EAAOd,gBAAgBtL,QAAQsN,GAAeA,IAAevN,MAGpF,IAGFqN,EAASlC,SAAQpM,UACf,MAAMsN,GAASC,EAAAA,EAAAA,IAAiBtN,EAAQa,GACpCwM,SACI9K,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9B1B,KACAgM,aAAc,IACTQ,EACHd,gBAAiBc,EAAOd,gBAAgBiC,OAAOxN,KAGrD,IACA,KAGJlB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACE,EAAQC,EAAS8B,KACnD,MAAM,GAAElB,EAAE,aAAEgM,GAAiB9K,EACvBsL,GAASC,EAAAA,EAAAA,IAAiBtN,EAAQa,GACpCwM,IACG9K,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7B1B,KACAgM,aAAc,CACZhM,KACA4N,SAAUpB,EAAOoB,SACjBjB,cAAeH,EAAOG,iBACnBX,IAGT,KAGF/M,EAAAA,EAAAA,IAAiB,iBAAiBC,MAAOC,EAAQC,EAAS8B,KACxD,MAAM,OAAEsL,EAAM,MAAEvM,GAAQgB,EAAAA,EAAAA,OAAsBC,GACxC,WAAEsK,EAAU,KAAExH,GAAS7E,EAAO4L,YAE9BrF,GAAQ6G,EAAAA,EAAAA,GAAmBpN,EAAQ,iBACzC,GAAIS,OAAO4I,KAAKxE,GAAM0C,QAAUhB,EAK9B,YAJAtG,EAAQqG,sBAAsB,CAC5BC,MAAO,gBACPzF,UAKJ,MAAM4N,EAAQC,KAAKC,OAAQvC,GAAc,GAAKyB,EAAAA,MAGtCjN,GAAIgO,EAAa,YAAEC,KAAgBC,GAAc1B,EAUzD,SARM9K,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9B1B,GAAI6N,EAAQ,EACZ7B,aAAc,CACZhM,GAAI6N,EAAQ,KACTK,MAIFD,EACH,OAGF9O,GAASO,EAAAA,EAAAA,MACT,MAAM,YAAE4N,GAAgBnO,EAAO4L,YAE3BuC,IACFnO,EAAS,IACJA,EACH4L,YAAa,IACR5L,EAAO4L,YACVuC,YAAaA,EAAYlN,QAAO,EAAGJ,QAASA,IAAOgO,OAGvDtL,EAAAA,EAAAA,IAAUvD,GACZ,KAGFF,EAAAA,EAAAA,IAAiB,mBAAmBC,MAAOC,EAAQC,EAAS8B,KAC1D,MAAM,UAAEiN,GAAcjN,QAEDQ,EAAAA,EAAAA,IAAQ,kBAAmByM,KAE9ChP,GAASO,EAAAA,EAAAA,MACTP,EAAS,IACJA,EACH4L,YAAa,IACR5L,EAAO4L,YACVS,WAAY2C,KAGhBzL,EAAAA,EAAAA,IAAUvD,GACZ,KAGFF,EAAAA,EAAAA,IAAiB,oBAAoBC,MAAOC,EAAQC,EAAS8B,KAC3D,MAAM,GAAElB,GAAOkB,EACTsL,GAASC,EAAAA,EAAAA,IAAiBtN,EAAQa,GAExCZ,EAAQgP,oBAAoB,CAAClD,iBAAiB,IAAGjK,EAAAA,EAAAA,OAC7CuL,SACI9K,EAAAA,EAAAA,IAAQ,mBAAoB1B,EACpC,KAGFf,EAAAA,EAAAA,IAAiB,oBAAoB,CAACE,EAAQC,EAAS8B,KACrD,MAAM,GAAElB,GAAOkB,EACTE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQa,GAC5BoB,IACEA,EAAKiN,aACF3M,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEN,OAAML,SAAUC,EAAAA,MAEjDU,EAAAA,EAAAA,IAAQ,qBAAsB,CACjCN,OACAE,eAAgBF,EAAKE,gBAG3B,KAGFrC,EAAAA,EAAAA,IAAiB,iBAAiB,CAACE,EAAQC,EAAS8B,KAClD,MAAM,OAAEf,EAAM,QAAE2E,GAAY5D,EACtBE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,EAAM,OAEX,MAAMkN,EAAqBlN,EAAKmN,SAASzJ,IAAU0J,cAC9CF,KAEA5M,EAAAA,EAAAA,IAAQ,sBAAuB,CAClCN,OACAL,SAAU+D,EACV+I,MAAOS,IAGTnP,GAASO,EAAAA,EAAAA,MACTP,GAAS4F,EAAAA,EAAAA,IAAY5F,EAAQgB,EAAQ2E,EAAS,CAC5CuJ,YAAa,IAEflP,GAASsP,EAAAA,EAAAA,IAAiBtP,EAAQgB,EAAQ2E,EAAS,CACjD4J,uBAAwBJ,KAE1B5L,EAAAA,EAAAA,IAAUvD,GAAO,KAGnBF,EAAAA,EAAAA,IAAiB,oBAAoBC,MAAOC,EAAQC,EAAS8B,KAC3D,MAAM,KAAEyN,EAAI,MAAE1O,GAAQgB,EAAAA,EAAAA,OAAsBC,EAEtCmB,QAAeX,EAAAA,EAAAA,IAAQ,mBAAoBiN,GAC5CtM,GAILjD,EAAQ8C,SAAS,CAAElC,GAAIqC,EAAOlC,OAAQF,SAAQ,KAGhDhB,EAAAA,EAAAA,IAAiB,yBAAyBC,MAAOC,EAAQC,EAAS8B,KAChE,MAAM,YACJ0N,EAAW,YAAEC,EAAW,OAAEC,EAAM,MAAE7O,GAAQgB,EAAAA,EAAAA,OACxCC,EAGJ9B,EAAQ8C,SAAS,CAAElC,GAAIoC,EAAAA,IAAanC,UAEpC,MAAMmB,QAkxCDlC,eAA6DC,EAAWyP,GAC7EzP,GAASO,EAAAA,EAAAA,MACT,MAAMqP,GAAYC,EAAAA,EAAAA,IAAwB7P,EAAQyP,GAClD,GAAIG,IAAcA,EAAUtN,MAC1B,OAAOJ,EAAAA,EAAAA,IAAWlC,EAAQ4P,EAAU/O,IAGtC,MAAM,KAAEoB,EAAI,KAAEQ,SAAeF,EAAAA,EAAAA,IAAQ,uBAAwBkN,IAAgB,CAAC,EAC9E,OAAKxN,GAILjC,GAASO,EAAAA,EAAAA,MACTP,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQiC,EAAKpB,GAAIoB,IACrCsB,EAAAA,EAAAA,IAAUvD,GAENyC,IACFzC,GAAS8P,EAAAA,EAAAA,IAAW9P,EAAQyC,EAAK5B,GAAI4B,IACrCc,EAAAA,EAAAA,IAAUvD,IAGLiC,QAbP,CAcF,CAxyCqB8N,CAAuB/P,EAAQyP,GAClD,IAAKxN,EAMH,OALAhC,EAAQkD,iBAAiB,CAAErC,eAC3Bb,EAAQ+P,iBAAiB,CACvBxK,QAASyK,EAAAA,GAAuB,mCAAmCC,QAAQ,UAAWT,GACtF3O,UAKJb,EAAQ8C,SAAS,CAAElC,GAAIoB,EAAKpB,GAAIC,UAE5B6O,GAEFQ,EADAnQ,GAASO,EAAAA,EAAAA,MACsBN,EAASgC,EAAKpB,GAAI8O,EAAQD,EAAa5O,EACxE,KAGFhB,EAAAA,EAAAA,IAAiB,oBAAoB,CAACE,EAAQC,EAAS8B,KACrD,MAAM,IACJkF,EAAG,MACHnG,GAAQgB,EAAAA,EAAAA,OACNC,GAEE,sBACJqO,EAAqB,iBACrBC,EAAgB,eAChBC,EAAc,kBACdC,EAAiB,oBACjBC,EAAmB,iBACnBR,EAAgB,aAChBpM,EAAY,YACZ6M,EAAW,2BACXC,EACAC,mBAAoBC,GAClB3Q,EAEJ,GAAIgH,EAAI4J,MAAMC,EAAAA,KAEZ,YADAC,EAAAA,EAAAA,IAAgB9J,GAIlB,MAAM+J,EAAM,IAAIC,IAAIhK,EAAIiK,cAAcC,WAAW,QAAUlK,EAAO,WAAUA,KAC5E,GAAImK,EAAAA,IAAAA,IAAoBJ,EAAIK,WAA8B,MAAjBL,EAAIM,SAE3C,YADAtF,OAAOuF,KAAKP,EAAIpH,WAAY,SAAU,YAIxC,MACM4H,GADWJ,EAAAA,IAAAA,IAAoBJ,EAAIK,UAAY,OAASL,EAAIK,UACvC/J,MAAM,KACjC,GAAIkK,EAAUjK,OAAS,EAAG,OAC1B,MAAM+J,EAAgC,IAArBE,EAAUjK,OAAgB,GAAEiK,EAAU,MAAMR,EAAIM,WAAaN,EAAIM,UAC3EG,EAAOC,EAAOC,GAASL,EAAShK,MAAM,KAAKrG,OAAOC,SAASN,KAAK+G,GAASiK,UAAUjK,KACpFkK,EAASpR,OAAOqR,YAAYd,EAAIe,cAEtC,IAAIvC,EACU,aAAViC,IACFjC,EAAOkC,GAGT,MAAMhC,KAAcmC,EAAOG,eAAe,gBAAmBH,EAAOI,cAAqBJ,EAAOI,YAC1FC,GAASC,EAAAA,EAAAA,IAAqBN,EAAOK,QAE3C,GAAIT,EAAMZ,MAAM,qBAOd,YANAT,EAAsB,CACpBX,YAAagC,EAAMW,OAAO,EAAGX,EAAMlK,OAAS,GAC5CmI,cACAC,OAAQkC,EAAOlC,OACf7O,UASJ,IAJI2Q,EAAMN,WAAW,MAAQM,EAAMN,WAAW,QAC5C3B,EAAOiC,EAAMW,OAAO,EAAGX,EAAMlK,OAAS,IAGpCiI,EAEF,YADAa,EAAiB,CAAEb,OAAM1O,UAI3B,GAAc,gBAAV2Q,GAAqC,aAAVA,EAO7B,YANAnB,EAAe,CACb+B,eAAgB,CACdC,UAAWZ,GAEb5Q,UAKJ,MAAMyR,EAAsBb,QAASxM,EAC/BvB,EAAYgO,EAAQa,OAAOb,QAASzM,EACpCuN,EAAYZ,EAAOa,QAAUF,OAAOX,EAAOa,cAAWxN,EAE5D,GAAc,UAAVuM,EAEFlB,EAAkB,CAAEoC,MADPC,EAAAA,EAAAA,IAAgBf,EAAO5K,IAAK4K,EAAOc,MACtB7R,eACrB,GAAI+Q,EAAOG,eAAe,cAAgBH,EAAOG,eAAe,cACrExB,EAAoB,CAClBqC,SAAUpB,EACVqB,WAAYjB,EAAOkB,WAAalB,EAAOmB,WACvClS,eAEG,GAAc,MAAV2Q,GAAiBc,GAAuB5O,EAAW,CAC5D,MAAM3C,EAAU,IAAGuR,IAEnB,KADarQ,EAAAA,EAAAA,IAAWlC,EAAQgB,GAG9B,YADAgP,EAAiB,CAAExK,QAAS,sBAAuB1E,UAIrD8C,EAAa,CACX5C,SACA2C,YACA7C,SAEJ,MAAW2Q,EAAMN,WAAW,KAC1BV,EAAY,CACVwC,KAAMxB,EAAMyB,UAAU,GACtBpS,UAEiB,YAAV2Q,EACThB,EAAY,CACVwC,KAAMvB,EACN5Q,UAEO4O,GAAewC,EACxBxB,EAA2B,CACzBmC,SAAUpB,EACVxQ,OAAQiR,KACmB,iBAAhBxC,GAA4B,CAAEyD,WAAYzD,GACrD5O,UAGF8P,EAAyB,CACvBiC,SAAUpB,EACV9N,UAAWA,GAAa6O,OAAOD,GAC/B3Q,SAAU+B,EAAY6O,OAAOD,QAAuBrN,EACpDuN,YACAU,WAAYtB,EAAOuB,MACnB1D,cACAC,OAAQkC,EAAOlC,OACf7O,SAEJ,KAGFhB,EAAAA,EAAAA,IAAiB,4BAA4BC,MAAOC,EAAQC,EAAS8B,KACnE,MAAM,KAAEyN,EAAI,MAAE1O,GAAQgB,EAAAA,EAAAA,OAAsBC,EACtCmB,QAAeX,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEiN,SAC9CtM,GAILjD,EAAQ8C,SAAS,CAAElC,GAAIqC,EAAOrC,GAAIC,SAAQ,KAG5ChB,EAAAA,EAAAA,IAAiB,sBAAsBC,MAAOC,EAAQC,EAAS8B,KAC7D,MAAM,SACJ8Q,EAAQ,UAAElP,EAAS,UAAE8O,EAAS,WAAEU,EAAU,YAAEzD,EAAW,OAAEC,EAAM,SAAE/N,EAAQ,MACzEd,GAAQgB,EAAAA,EAAAA,OACNC,EAEEE,GAAOoR,EAAAA,EAAAA,IAAkBrT,EAAQc,GAEvC,IAAK2R,EACH,OAAK/C,GAAe/L,IAAcwP,GAAclR,GAAMyI,WAAW4D,MAAMgF,GAAMA,EAAET,WAAaA,SAC1F5S,EAAQ2D,aAAa,CACnB5C,OAAQiB,EAAKpB,GAAIe,WAAU+B,YAAW7C,qBAiqC9Cf,eACEC,EACAC,EACA4S,EACAjR,EACA2R,EACAJ,EACAzD,EACAC,MACI7O,GAAQgB,EAAAA,EAAAA,QAEZ9B,GAASO,EAAAA,EAAAA,MACT,MAAMiT,GAAcH,EAAAA,EAAAA,IAAkBrT,EAAQc,GAG9C,GAAI4O,IAAgBC,EAAQ,CAC1B,MAAM8D,QAAYC,EAAqB1T,EAAQC,EAAS4S,EAAU/R,GAElE,IAAK0S,IAAgBC,EAAK,OAS1B,YAPAxT,EAAQ0T,cAAc,CACpBF,MACAzS,OAAQwS,EAAY3S,MACO,iBAAhB6O,GAA4B,CAAEyD,WAAYzD,GACrD5O,SAIJ,CAEA,MAAM8S,EAAgBJ,GAAa9I,WAAW4D,MAAMgF,GAAMA,EAAET,WAAaA,IAEpEe,GAEH3T,EAAQ8C,SAAS,CAAElC,GAAIoC,EAAAA,IAAanC,UAGtC,MAAMmB,QAAa4R,EAAoB7T,EAAQ6S,GAC1C5Q,GASDsR,EACFtT,EAAQ2D,aAAa,CACnB5C,OAAQiB,EAAKpB,GAAIe,WAAU+B,UAAW4P,EAAezS,UAE7C8S,GACV3T,EAAQ8C,SAAS,CAAElC,GAAIoB,EAAKpB,GAAIe,WAAUd,UAGxCqS,GACFlT,EAAQ6T,SAAS,CAAEvI,MAAOtJ,EAAKpB,GAAIkT,MAAOZ,IAGxCxD,GAEFQ,EADAnQ,GAASO,EAAAA,EAAAA,MACsBN,EAASgC,EAAKpB,GAAI8O,EAAQD,EAAa5O,IAtBjE8S,IACH3T,EAAQkD,iBAAiB,CAAErC,UAC3Bb,EAAQ+P,iBAAiB,CAAExK,QAAS,sBAAuB1E,UAsBjE,CA5tCU6P,CAAmB3Q,EAAQC,EAAS4S,EAAUjR,EAAU+B,EAAWwP,EAAYzD,EAAaC,EAAQ7O,GAI5G,MAAM,OAAEE,EAAM,KAAEwB,IAASzB,EAAAA,EAAAA,IAAyBf,EAAQc,IAAU,CAAC,EAC/DkT,GAAeC,EAAAA,EAAAA,IAAqBjU,EAAQ6S,GAClD,GAAI7R,GAAU2C,GAAaqQ,GAAyB,WAATxR,EAAmB,CAC5D,MAAM0R,GAAaC,EAAAA,EAAAA,IAAiBnU,EAAQgB,EAAQ2C,GAEpD,GAAIuQ,GAAcA,EAAWlT,SAAWA,EAOtC,YANAf,EAAQ2D,aAAa,CACnB5C,OAAQkT,EAAWlT,OACnBY,SAAUsS,EAAWtS,SACrB+B,UAAW8O,EACX3R,SAIN,CAEA,IAAK6C,EAAW,OAEhB1D,EAAQ8C,SAAS,CAAElC,GAAIoC,EAAAA,IAAanC,UAEpC,MAAMsT,QAAuBP,EAAoB7T,EAAQ6S,GAEzD,IAAKuB,EAAgB,OAErBpU,GAASO,EAAAA,EAAAA,MAET,MAAM2T,GAAaC,EAAAA,EAAAA,IAAiBnU,EAAQoU,EAAevT,GAAI8C,GAC/D,IAAI0Q,EAEJ,GAAKH,EAUHG,EAAmBH,EAAWlT,WAVf,CACf,MAAMkC,QAAeX,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEN,KAAMmS,EAAgBxS,SAAU+B,IAC1F,IAAKT,EAAQ,OAEblD,GAASO,EAAAA,EAAAA,MACTP,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOI,MAAO,QAC7DC,EAAAA,EAAAA,IAAUvD,GAEVqU,EAAmBnR,EAAOmR,gBAC5B,CAIKA,GAELpU,EAAQ2D,aAAa,CACnB5C,OAAQqT,EACRzS,SAAU+B,EACVA,UAAW6O,OAAOC,GAClB3R,SACA,KAGJhB,EAAAA,EAAAA,IAAiB,0BAA0BC,MAAOC,EAAQC,EAAS8B,KACjE,MAAM,OACJf,EAAM,UAAEsT,EAAS,MACjBxT,GAAQgB,EAAAA,EAAAA,OACNC,EAEEE,QAAasS,EAAmBvU,EAAQC,EAASe,EAAQF,GAC1DmB,IAILjC,GAASO,EAAAA,EAAAA,MAETP,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQiC,EAAKpB,GAAI,CACnC4C,SAAU,IACLxB,EAAKwB,SACR+Q,mBAAoBF,MAGxB/Q,EAAAA,EAAAA,IAAUvD,IAELuC,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEN,OAAMqS,cAAY,KAG7DxU,EAAAA,EAAAA,IAAiB,iCAAiC,CAACE,EAAQC,EAAS8B,KAClE,MAAM,OAAEf,EAAM,aAAEyT,GAAiB1S,EAC3BE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAE3BiB,IAIAM,EAAAA,EAAAA,IAAQ,gCAAiC,CAAEN,OAAMwS,gBAAe,KAGvE3U,EAAAA,EAAAA,IAAiB,gCAAgCC,MAAOC,EAAQC,EAAS8B,KACvE,MAAM,OACJf,EAAM,OAAE8F,EAAM,aAAE2N,EAAY,MAC5B3T,GAAQgB,EAAAA,EAAAA,OACNC,EAEEU,GAAOC,EAAAA,EAAAA,IAAW1C,EAAQ8G,GAEhC,IAAKrE,EACH,OAGF,MAAMR,QAAasS,EAAmBvU,EAAQC,EAASe,EAAQF,GAE/D,IAAKmB,EAAM,aAELM,EAAAA,EAAAA,IAAQ,+BAAgC,CAAEN,OAAMQ,OAAMgS,iBAE5DzU,GAASO,EAAAA,EAAAA,MAET,MAAMmU,GAAkBxS,EAAAA,EAAAA,IAAWlC,EAAQgB,GAE3C,IAAK0T,IAAoBA,EAAgBjR,SACvC,OAGF,MAAM,QAAEkR,EAAO,cAAEC,GAAkBF,EAAgBjR,SAE7CoR,EAAW3T,QAAQuT,EAAaK,cAChCC,GAAetU,OAAO4I,KAAKoL,GAAclN,OAE/CvH,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQgB,EAAQ,CAClCyC,SAAU,IACLiR,EAAgBjR,YACfkR,GAAWE,GAAY,CACzBF,QAASA,EAAQ1T,QAAQ+T,GAAMA,EAAElO,SAAWA,QAE1C6N,IAAYE,GAAY,CAC1BF,QAASA,EAAQ/T,KAAKoU,GACpBA,EAAElO,SAAWA,EACT,IAAKkO,EAAGP,gBACRO,QAGJD,GAAeH,GAAiB,CAClCA,cAAeA,EAAc3T,QAAQ+T,GAAMA,EAAElO,SAAWA,SAI9DvD,EAAAA,EAAAA,IAAUvD,EAAO,KAGnBF,EAAAA,EAAAA,IAAiB,mBAAmBC,MAAOC,EAAQC,EAAS8B,KAC1D,MAAM,OACJf,EAAM,OAAE8F,EAAM,YAAEmO,EAAW,YAAEC,EAAW,MACxCpU,GAAQgB,EAAAA,EAAAA,OACNC,EAEEU,GAAOC,EAAAA,EAAAA,IAAW1C,EAAQ8G,GAChC,IAAKrE,EACH,OAGF,MAAMR,QAAasS,EAAmBvU,EAAQC,EAASe,EAAQF,GAE/D,IAAKmB,EAAM,aAELM,EAAAA,EAAAA,IAAQ,kBAAmB,CAC/BN,OAAMQ,OAAMwS,cAAaC,gBAG3B,MAAMR,QAAwBnS,EAAAA,EAAAA,IAAQ,gBAAiBN,GACvD,IAAKyS,GAAiBjR,SACpB,OAGF,MAAM,iBAAE0R,GAAqBT,EAAgBjR,SACvC2R,GAAe3U,OAAO4I,KAAK4L,GAAa1N,OAC9C,IAAI8N,EACJ,GAAIF,EACF,GAAIC,EAAa,CACf,MAAQ,CAACtO,GAASwO,KAAWC,GAASJ,EACtCE,EAAsBE,CACxB,MACEF,EAAsB,IACjBF,EACH,CAACrO,GAAS,IACLqO,EAAiBrO,GACpBmO,cACAC,gBAMRlV,GAASO,EAAAA,EAAAA,MAETP,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQgB,EAAQ,CAClCyC,SAAU,IACLiR,EAAgBjR,YACf4R,GAAuB,CAAEF,iBAAkBE,OAGnD9R,EAAAA,EAAAA,IAAUvD,EAAO,KAGnBF,EAAAA,EAAAA,IAAiB,cAAcC,MAAOC,EAAQC,EAAS8B,KACrD,MAAM,OACJf,EAAM,MAAE6E,EAAK,MAAEC,EAAK,MAAEC,EAAK,MAAEjF,GAAQgB,EAAAA,EAAAA,OACnCC,EAEEE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC3BiB,IAILjC,GAASO,EAAAA,EAAAA,MACTP,GAASwV,EAAAA,EAAAA,IAAyBxV,EAAQyV,EAAAA,GAAAA,WAA+B3U,IACzEyC,EAAAA,EAAAA,IAAUvD,SAEJ0V,QAAQC,IAAI,CAChB1T,EAAK4D,QAAUA,GACXtD,EAAAA,EAAAA,IAAQ,kBAAmBN,EAAM4D,QACjCX,EACJjD,EAAKwB,UAAYxB,EAAKwB,SAASqC,QAAUA,GACrCvD,EAAAA,EAAAA,IAAQ,kBAAmBN,EAAM6D,QACjCZ,EACJa,GACIxD,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEvB,SAAQ4F,WAAY3E,EAAK2E,WAAYb,eAChEb,IAGNlF,GAASO,EAAAA,EAAAA,MACTP,GAASwV,EAAAA,EAAAA,IAAyBxV,EAAQyV,EAAAA,GAAAA,SAA6B3U,IACvEyC,EAAAA,EAAAA,IAAUvD,GAAO,KAGnBF,EAAAA,EAAAA,IAAiB,mBAAmBC,MAAOC,EAAQC,EAAS8B,KAC1D,MAAM,MAAEgE,EAAK,OAAE/E,EAAM,MAAEF,GAAQgB,EAAAA,EAAAA,OAAsBC,EAC/CE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC3BiB,IACLjC,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQgB,EAAQ,CAClCiJ,gBAAY/E,EACZzB,SAAU,IACLxB,EAAKwB,SACRmS,kBAAc1Q,MAGlB3B,EAAAA,EAAAA,IAAUvD,SAEJuC,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7BvB,SACA4F,WAAY3E,EAAK2E,WACjBb,gBAGIxD,EAAAA,EAAAA,IAAQ,sBAAuB,CAACwD,IACtC9F,EAAQoF,aAAa,CAAErE,SAAQF,UAC/Bb,EAAQ4V,kBAAkB,CAAEC,UAAW9U,IAAS,KAGlDlB,EAAAA,EAAAA,IAAiB,mBAAmBC,MAAOC,EAAQC,EAAS8B,KAC1D,MAAM,MAAEgE,EAAK,OAAE/E,EAAM,MAAEF,GAAQgB,EAAAA,EAAAA,OAAsBC,EAC/CE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,EAAM,OACX,MAAM8T,EAAiB,CAAChQ,GACxB,GAAI9D,EAAKgI,aAAelE,EAAMlF,GAAI,CAEhC,MAAMmV,EAAY/T,EAAKiI,SAAS,GAC5B8L,GACFD,EAAezL,KAAK0L,GAEtBhW,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQgB,EAAQ,CAClCiJ,gBAAY/E,EACZzB,SAAU,IACLxB,EAAKwB,SACRmS,kBAAc1Q,MAGlB3B,EAAAA,EAAAA,IAAUvD,SAEJuC,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7BvB,SACA4F,WAAY3E,EAAK2E,WACjBb,MAAOiQ,GAEX,OAEqBzT,EAAAA,EAAAA,IAAQ,sBAAuBwT,KAEpD9V,EAAQoF,aAAa,CAAErE,SAAQF,UAC/Bb,EAAQ4V,kBAAkB,CAAEC,UAAW9U,IAAS,KAGlDlB,EAAAA,EAAAA,IAAiB,oBAAoB,CAACE,EAAQC,EAAS8B,KACrD,MAAM,OAAEf,EAAM,UAAEsT,GAAcvS,EACxBE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAE3BiB,IAIAM,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEN,OAAMqS,aAAY,KAGvDxU,EAAAA,EAAAA,IAAiB,2BAA2BC,UAC1C,MAAMkW,QAAe1T,EAAAA,EAAAA,IAAQ,4BAC7B,IAAK0T,EACH,OAGF,MAAMC,EAAYD,EAAOE,QAAO,CAACjT,EAAQkT,KACnCA,IAAUA,EAAMC,UAClBnT,EAAOkT,EAAMvV,IAAMuV,GAGdlT,IACN,CAAC,GAEJlD,GAASO,EAAAA,EAAAA,MACTP,GAASyM,EAAAA,EAAAA,IAASzM,EAAQkW,GAC1BlW,EAAS,IACJA,EACHsE,MAAO,IACFtE,EAAOsE,MACVgS,iBAAkB7V,OAAO4I,KAAK6M,MAGlC3S,EAAAA,EAAAA,IAAUvD,EAAO,KAGnBF,EAAAA,EAAAA,IAAiB,uBAAuBC,MAAOC,EAAQC,EAAS8B,KAC9D,MAAM,UAAE4E,EAAS,OAAE3F,EAAM,MAAEF,GAAQgB,EAAAA,EAAAA,OAAsBC,GAAW,CAAC,EAE/DwU,GAAUrU,EAAAA,EAAAA,IAAWlC,EAAQ2G,GACnC,IAAK4P,EACH,OAGF,MAAMtU,QAAasS,EAAmBvU,EAAQC,EAASe,EAAQF,GAE/D,IAAKmB,EAAM,OAEX,IAAI,SAAEwB,GAAaxB,EACnB,IAAKwB,EAAU,CACb,MAAM+S,QAAiBjU,EAAAA,EAAAA,IAAQ,gBAAiBN,GAChD,IAAKuU,EACH,OAGF/S,EAAW+S,EAAS/S,QACtB,CAEIA,EAAU+Q,qBACZxU,GAASO,EAAAA,EAAAA,MACTP,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQiC,EAAKpB,GAAI,CACnC4C,SAAU,IACLxB,EAAKwB,SACR+Q,oBAAoB,MAGxBjR,EAAAA,EAAAA,IAAUvD,SAEJuC,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEN,OAAMqS,WAAW,MAGxD/R,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEgU,UAAStU,QAAO,KAGvDnC,EAAAA,EAAAA,IAAiB,yBAAyBC,MAAOC,EAAQC,EAAS8B,KAChE,MAAM,UAAE4E,EAAS,MAAE7F,GAAQgB,EAAAA,EAAAA,OAAsBC,EAE3CwU,GAAUrU,EAAAA,EAAAA,IAAWlC,EAAQ2G,GACnC,IAAK4P,EACH,OAGF,IAAItU,EACAsU,EAAQ9S,UAAUC,eACpBzB,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQuW,EAAQ9S,SAASC,qBAGvCnB,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEgU,YAClCtU,GAEFoD,EADArF,GAASO,EAAAA,EAAAA,MACYN,EAASgC,EAAMnB,EACtC,KAGFhB,EAAAA,EAAAA,IAAiB,uBAAuB,CAACE,EAAQC,EAAS8B,KACxD,MAAM,iBAAEgK,EAAgB,MAAEjL,GAAQgB,EAAAA,EAAAA,OAAsBC,EAKxD,KAFkBgK,EAAmB,GAFlBqB,EAAAA,EAAAA,GAAmBpN,EAAQ,kBAY9C,OADAgM,OAAOC,eAAewK,QAAQ,mBAAmB1K,EAAiBnC,aAC3D1D,EAAAA,EAAAA,GAAelG,EAAQ,CAC5B+L,oBACCjL,GATDb,EAAQqG,sBAAsB,CAC5BC,MAAO,gBACPzF,SAOK,KAGXhB,EAAAA,EAAAA,IAAiB,0BAA0B,CAACE,EAAQC,EAAS8B,KAC3D,MAAM,MAAEjB,GAAQgB,EAAAA,EAAAA,OAAsBC,GAAW,CAAC,EAElD,OAAOmE,EAAAA,EAAAA,GAAelG,EAAQ,CAC5B0W,oBAAgBxR,GACfpE,EAAM,KAGXhB,EAAAA,EAAAA,IAAiB,mBAAmBC,MAAOC,EAAQC,EAAS8B,KAC1D,MAAM,MAAEjB,GAAQgB,EAAAA,EAAAA,OAAsBC,GAAW,CAAC,GAC5C,OAAEf,IAAWD,EAAAA,EAAAA,IAAyBf,EAAQc,IAAU,CAAC,EACzDmB,EAAOjB,GAASkB,EAAAA,EAAAA,IAAWlC,EAAQgB,QAAUkE,EACnD,IAAKjD,IAAQ0U,EAAAA,EAAAA,IAAiB1U,GAC5B,OAGF,MAAM2U,EAAU3U,EAAKwB,UAAUkR,SAASpN,aAAWrC,EACnD,QAAeA,IAAX0R,QAA8C1R,IAAtBjD,EAAK4U,cAA8BD,GAAU3U,EAAK4U,aAAc,OAE5F,MAAM3T,QAAeX,EAAAA,EAAAA,IAAQ,eAAgBN,EAAKpB,GAAIoB,EAAK2E,WAAa,SAAUgQ,GAClF,IAAK1T,EACH,OAGF,MAAM,QAAEyR,EAAO,MAAErR,EAAK,iBAAEkJ,GAAqBtJ,EACxCyR,GAAYA,EAAQpN,SAIzBvH,GAASO,EAAAA,EAAAA,MACTP,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBC,EAAO,OACtDtD,GAAS2M,EAAAA,EAAAA,IAAgB3M,EAAQwM,GACjCxM,GAAS8W,EAAAA,EAAAA,IAAe9W,EAAQiC,EAAM0S,IACtCpR,EAAAA,EAAAA,IAAUvD,GAAO,KAGnBF,EAAAA,EAAAA,IAAiB,kBAAkBC,MAAOC,EAAQC,EAAS8B,KACzD,MAAM,OAAEf,EAAM,UAAEgF,EAAS,MAAElF,GAAQgB,EAAAA,EAAAA,OAAsBC,EACnDE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC1BsC,EAAS0C,EAAuBpF,KAAKkG,IAAWpE,EAAAA,EAAAA,IAAW1C,EAAQ8G,KAAS7F,OAAOC,SAEpFe,GAASqB,EAAMiE,SAIpBtH,EAAQ8W,6BAA6B,CAAEC,uBAAwBC,EAAAA,GAAAA,QAAgCnW,gBACzFyB,EAAAA,EAAAA,IAAQ,iBAAkBN,EAAMqB,GACtCrD,EAAQ8W,6BAA6B,CAAEC,uBAAwBC,EAAAA,GAAAA,OAA+BnW,UAE9FuE,EADArF,GAASO,EAAAA,EAAAA,MACYN,EAASgC,EAAMnB,GAAM,KAG5ChB,EAAAA,EAAAA,IAAiB,oBAAoBC,MAAOC,EAAQC,EAAS8B,KAC3D,MAAM,OAAEf,EAAM,OAAE8F,EAAM,MAAEhG,GAAQgB,EAAAA,EAAAA,OAAsBC,EAChDE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC1ByB,GAAOC,EAAAA,EAAAA,IAAW1C,EAAQ8G,GAE3B7E,GAASQ,UAIRF,EAAAA,EAAAA,IAAQ,mBAAoBN,EAAMQ,GAExC4C,EADArF,GAASO,EAAAA,EAAAA,MACYN,EAASgC,EAAMnB,GAAM,KAG5ChB,EAAAA,EAAAA,IAAiB,qBAAqB,CAACE,EAAQC,EAAS8B,KACtD,MAAM,OAAEf,EAAM,YAAEkW,GAAgBnV,EAC1BE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAE3BiB,IAIAM,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEN,OAAMiV,eAAc,KAG1DpX,EAAAA,EAAAA,IAAiB,2BAA2BC,MAAOC,EAAQC,EAAS8B,KAClE,MAAM,OAAEf,EAAM,iBAAEmW,EAAgB,MAAErW,GAAQgB,EAAAA,EAAAA,OAAsBC,EAC1DE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC3BiB,UAECM,EAAAA,EAAAA,IAAQ,0BAA2B,CACvCN,OACAkV,qBAIG9R,EADLrF,GAASO,EAAAA,EAAAA,MACiBN,EAASgC,EAAMnB,GAAM,KAGjDhB,EAAAA,EAAAA,IAAiB,oBAAoBC,MAAOC,EAAQC,EAAS8B,KAC3D,MAAM,OAAEf,GAAWe,EACbE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,EAAM,OAEX,MAAMiB,QAAeX,EAAAA,EAAAA,IAAQ,oBAAqBN,GAClD,IAAKiB,EAAQ,OACb,MAAM,SAAEkU,EAAQ,MAAE9T,GAAUJ,EAC5BlD,GAASO,EAAAA,EAAAA,MAETP,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBC,EAAO,OAEtDtD,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQiC,EAAKpB,GAAI,CAAEuW,cACvC7T,EAAAA,EAAAA,IAAUvD,EAAO,KAGnBF,EAAAA,EAAAA,IAAiB,oBAAoBC,MAAOC,EAAQC,EAAS8B,KAC3D,MAAM,OAAEf,EAAM,UAAEsT,GAAcvS,EACxBE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC3BiB,KACAoV,EAAAA,EAAAA,IAAiBpV,KAAUqV,EAAAA,EAAAA,IAAcrV,WAExCM,EAAAA,EAAAA,IAAQ,mBAAoBN,EAAMqS,EAAU,KAGpDxU,EAAAA,EAAAA,IAAiB,qBAAqBC,MAAOC,EAAQC,EAAS8B,KAC5D,MAAM,OAAEf,EAAM,UAAEsT,GAAcvS,EACxBE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC3BiB,KACAoV,EAAAA,EAAAA,IAAiBpV,KAAUqV,EAAAA,EAAAA,IAAcrV,WAExCM,EAAAA,EAAAA,IAAQ,oBAAqBN,EAAMqS,EAAU,KAGrDxU,EAAAA,EAAAA,IAAiB,kBAAkB,CAACE,EAAQC,EAAS8B,KACnD,MAAM,OAAEf,EAAM,MAAEF,GAAQgB,EAAAA,EAAAA,OAAsBC,EAC9C,OAAOmE,EAAAA,EAAAA,GAAelG,EAAQ,CAC5BuX,iBAAkBvW,GACjBF,EAAM,KAGXhB,EAAAA,EAAAA,IAAiB,mBAAmB,CAACE,EAAQC,EAAS8B,KACpD,MAAM,MAAEjB,GAAQgB,EAAAA,EAAAA,OAAsBC,GAAW,CAAC,EAClD,OAAOmE,EAAAA,EAAAA,GAAelG,EAAQ,CAC5BuX,sBAAkBrS,GACjBpE,EAAM,KAGXhB,EAAAA,EAAAA,IAAiB,8BAA8BC,MAAOC,EAAQC,EAAS8B,KACrE,MAAM,SACJ8Q,EAAQ,OAAE5R,EAAM,WAAEkS,EAAU,MAAErS,GAAQgB,EAAAA,EAAAA,OACpCC,EACE0R,QAAYC,EAAqB1T,EAAQC,EAAS4S,EAAU/R,GAClE,IAAK2S,EAAK,OAEVzT,GAASO,EAAAA,EAAAA,MACT,MAAQiX,YAAY,KAAEC,IAAWzX,EACjC,IAAKyX,EAAKhE,EAAI5S,IAeZ,OAdAb,GAASkG,EAAAA,EAAAA,GAAelG,EAAQ,CAC9B0X,0BAA2B,CACzBjE,MACAkE,UAAW,CACTC,OAAQ,yBACR7V,QAAS,CACP0R,MACAxS,SACAkS,iBAILrS,QACHyC,EAAAA,EAAAA,IAAUvD,GAIZC,EAAQ4X,uBAAuB,CAC7BpE,MACAxS,SACAkS,aACArS,SACA,KAGJhB,EAAAA,EAAAA,IAAiB,cAAcC,MAAOC,EAAQC,EAAS8B,KACrD,MAAM,OAAEf,EAAM,MAAEoE,GAAUrD,EACpBE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,EAAM,OAEX,IAAKmD,GAASnD,EAAK6V,gBAAkB7V,EAAK6V,eAAevQ,SAAWtF,EAAK8V,YACvE,OAGF,MAAMC,GAAe5S,GAASnD,EAAK6V,eAAiB7V,EAAK6V,eAAe3B,QAAO,CAAC8B,EAAKC,KACnF,MAAMC,EAAQlW,EAAKmN,SAAS8I,GACtBE,EAAWnW,EAAKmN,SAAS6I,GAC/B,OAAKE,KACAC,GAAYD,EAAM9I,cAAgB+I,EAAS/I,eACvC6I,EAFUD,CAIT,SACP/S,GAEGrE,GAAIwX,EAAejU,KAAMkU,EAAYjJ,cAAekJ,GAAcP,GACrE/V,EAAKmN,SAAS4I,IAAiB,CAAC,EAC/B9U,QAAeX,EAAAA,EAAAA,IAAQ,cAAe,CAC1CN,OAAMoW,gBAAeE,WAAUD,aAAY/R,MAAO8R,EAAgBG,EAAAA,IAAeC,EAAAA,MAG9EvV,IAELlD,GAASO,EAAAA,EAAAA,MACTP,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOI,MAAO,OAC7DtD,GAASyM,EAAAA,EAAAA,IAASzM,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOoB,MAAO,OAC7DtE,GAAS0Y,EAAAA,EAAAA,IAAY1Y,EAAQkD,EAAOyV,UACpC3Y,GAAS4Y,EAAAA,EAAAA,IAAa5Y,EAAQgB,EAAQkC,EAAO2V,MAAO3V,EAAOkM,QAC3DpP,GAAS8Y,EAAAA,EAAAA,IAAqB9Y,EAAQgB,EAAQkC,EAAOkM,OAAOxO,KAAKuX,GAAUA,EAAMtX,MACjFJ,OAAOsY,QAAQ7V,EAAO8V,YAAc,CAAC,GAAG7M,SAAQ,EAAEvK,EAAUqX,MAC1DjZ,GAASkZ,EAAAA,EAAAA,IAAmBlZ,EAAQgB,EAAQwR,OAAO5Q,GAAW,QAASqX,GAAOE,eAC9EnZ,GAASkZ,EAAAA,EAAAA,IAAmBlZ,EAAQgB,EAAQwR,OAAO5Q,GAAW,eAAgBqX,GAAOG,aAAa,IAEpG3Y,OAAOsY,QAAQ7V,EAAOmW,6BAA+B,CAAC,GAAGlN,SAAQ,EAAExG,EAAShC,MAC1E3D,GAASsP,EAAAA,EAAAA,IAAiBtP,EAAQgB,EAAQwR,OAAO7M,GAAU,CAAE4J,uBAAwB5L,GAAY,KAGnGJ,EAAAA,EAAAA,IAAUvD,GAAO,KAGnBF,EAAAA,EAAAA,IAAiB,iBAAiBC,MAAOC,EAAQC,EAAS8B,KACxD,MAAM,OAAEf,EAAM,QAAE2E,GAAY5D,EAEtBE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,EAAM,OAEX,MAAMiB,QAAeX,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEN,OAAM0D,YAEvD,GAAKzC,EAQLlD,GAASO,EAAAA,EAAAA,MACTP,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOI,MAAO,OAC7DtD,GAASyM,EAAAA,EAAAA,IAASzM,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOoB,MAAO,OAC7DtE,GAAS0Y,EAAAA,EAAAA,IAAY1Y,EAAQkD,EAAOyV,UACpC3Y,GAAS4F,EAAAA,EAAAA,IAAY5F,EAAQgB,EAAQ2E,EAASzC,EAAOiV,QAErD5U,EAAAA,EAAAA,IAAUvD,QAbR,GAAI,UAAW+B,GAAWA,EAAQuX,uBAAwB,CACxD,MAAM,MAAExY,GAAQgB,EAAAA,EAAAA,OAAsBC,EACtC9B,EAAQ8C,SAAS,CAAElC,QAAIqE,EAAWpE,SACpC,CAUe,KAGnBhB,EAAAA,EAAAA,IAAiB,eAAeC,MAAOC,EAAQC,EAAS8B,KACtD,MAAM,OAAEf,EAAM,UAAEsT,EAAS,MAAExT,GAAQgB,EAAAA,EAAAA,OAAsBC,EAEnDE,QAAasS,EAAmBvU,EAAQC,EAASe,EAAQF,GAC/D,IAAKmB,EACH,OAGFjC,GAASO,EAAAA,EAAAA,MAET,MAAMgZ,EAActX,EAAKoU,QACzBrW,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQgB,EAAQ,CAAEqV,QAAS/B,KAC/C/Q,EAAAA,EAAAA,IAAUvD,SAEWuC,EAAAA,EAAAA,IAAQ,cAAe,CAAEN,OAAMqS,gBAGlDtU,GAASO,EAAAA,EAAAA,MACTP,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQgB,EAAQ,CAAEqV,QAASkD,KAC/ChW,EAAAA,EAAAA,IAAUvD,GACZ,KAGFF,EAAAA,EAAAA,IAAiB,4BAA4BC,MAAOC,EAAQC,EAAS8B,KACnE,MAAM,OAAEf,EAAM,UAAEsT,GAAcvS,EACxBE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,EACH,OAGF,MAAMuX,EAAgBvX,EAAKwB,UAAUgW,sBAErCzZ,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQgB,EAAQ,CAClCyC,SAAU,IACLxB,EAAKwB,SACRgW,sBAAuBnF,MAG3B/Q,EAAAA,EAAAA,IAAUvD,SAEWuC,EAAAA,EAAAA,IAAQ,2BAA4B,CAAEN,OAAMqS,oBAEhCpP,IAAlBsU,IACbxZ,GAASO,EAAAA,EAAAA,MACTP,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQgB,EAAQ,CAClCyC,SAAU,IACLxB,EAAKwB,SACRgW,sBAAuBD,MAG3BjW,EAAAA,EAAAA,IAAUvD,GACZ,KAGFF,EAAAA,EAAAA,IAAiB,eAAeC,MAAOC,EAAQC,EAAS8B,KACtD,MAAM,OACJf,EAAM,MAAE6E,EAAK,UAAE6T,EAAS,YAAEC,EAAW,MACrC7Y,GAAQgB,EAAAA,EAAAA,OACNC,EACEE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,EAAM,QAEP4E,EAAAA,EAAAA,IAAe7G,EAAQc,GAAO8Y,mBAChC5Z,GAASkG,EAAAA,EAAAA,GAAelG,EAAQ,CAC9B4Z,iBAAkB,CAChB5Y,SACA6Y,WAAW,IAEZ/Y,IACHyC,EAAAA,EAAAA,IAAUvD,IAGZ,MAAM2F,QAAgBpD,EAAAA,EAAAA,IAAQ,cAAe,CAC3CN,OAAM4D,QAAO6T,YAAWC,gBAEtBhU,GACF1F,EAAQ8C,SAAS,CACflC,GAAIG,EAAQY,SAAU+D,EAAS7B,sBAAsB,EAAMhD,UAG/Db,EAAQ6Z,sBAAsB,CAAEhZ,SAAQ,KAG1ChB,EAAAA,EAAAA,IAAiB,eAAeC,MAAOC,EAAQC,EAAS8B,KACtD,MAAM,OAAEf,EAAM,QAAE2E,GAAY5D,EACtBE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC3BiB,SAEgBM,EAAAA,EAAAA,IAAQ,cAAe,CAAEN,OAAM0D,cAIpD3F,GAASO,EAAAA,EAAAA,MACTP,GAAS+Z,EAAAA,EAAAA,IAAY/Z,EAAQgB,EAAQ2E,IACrCpC,EAAAA,EAAAA,IAAUvD,GAAO,KAGnBF,EAAAA,EAAAA,IAAiB,aAAaC,MAAOC,EAAQC,EAAS8B,KACpD,MAAM,OACJf,EAAM,QAAE2E,EAAO,MAAE7E,GAAQgB,EAAAA,EAAAA,SAAsByT,GAC7CxT,EACEE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC1BmX,EAAQlW,GAAMmN,SAASzJ,GACxB1D,GAASkW,KAEVtR,EAAAA,EAAAA,IAAe7G,EAAQc,GAAOkZ,iBAChCha,GAASkG,EAAAA,EAAAA,GAAelG,EAAQ,CAC9Bga,eAAgB,CACdhZ,SACA2E,UACAkU,WAAW,IAEZ/Y,IACHyC,EAAAA,EAAAA,IAAUvD,UAGSuC,EAAAA,EAAAA,IAAQ,YAAa,CAAEN,OAAM0D,aAAY4P,MAG9DvV,GAASO,EAAAA,EAAAA,MACTP,GAAS4F,EAAAA,EAAAA,IAAY5F,EAAQgB,EAAQ2E,EAAS4P,IAC9ChS,EAAAA,EAAAA,IAAUvD,GAEVC,EAAQga,oBAAoB,CAAEnZ,WAAQ,KAGxChB,EAAAA,EAAAA,IAAiB,qBAAqB,CAACE,EAAQC,EAAS8B,KACtD,MAAM,OACJf,EAAM,QAAE2E,EAAO,SAAEkI,EAAQ,MAAE/M,GAAQgB,EAAAA,EAAAA,OACjCC,GAEE,kBAAEmY,GAAsBla,EAAOma,WAAa,CAAC,EAC7ClY,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAC3BiB,GAASA,EAAKmN,QAAW8K,IAE1BrM,GAAYpN,OAAOC,OAAOuB,EAAKmN,QAAQnO,QAAQkX,GAAUA,EAAMtK,WAAUtG,QAAU2S,EACrFja,EAAQ+P,iBAAiB,CACvBxK,QAASyK,EAAAA,GAAuB,2BAA4BiK,EAAmB,KAC/EpZ,WAKCyB,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEN,OAAM0D,UAASkI,aAAW,IAIhE,MAAMuM,EAAaC,IAEjBC,YAAWva,UACNsa,IACDE,EAAAA,EAAAA,MAAaxN,eAAe,CAAC/L,OAAOwI,EAAAA,GAAewD,QAAQ,WAE7D,MAAMhN,GAASO,EAAAA,EAAAA,MACXP,EAAOsD,MAAMuB,KAAKiI,EAAAA,WACd0N,EAAAA,EAAAA,cAAgC1N,EAAAA,IAEpC9M,EAAOsD,MAAMuB,KAAKwG,EAAAA,WACdmP,EAAAA,EAAAA,cAAgCnP,EAAAA,GAAe,WACvD,GACA,IAAI,EAGDtL,eAAeoF,EACpBnF,EACA+D,EACAwU,EACAD,EACArU,GAAgB,EAChBwW,GAEA,IAAIJ,GAAY,EAChBra,GAASO,EAAAA,EAAAA,MACT,IAAIma,GAA0BnV,EAAAA,EAAAA,IAA8BvF,IAASwF,QACrE,IACE,IAAItC,EACJ,GAAIlD,EAAOsD,MAAMuB,KAAK2E,EAAAA,IAsCpB,OAZAxJ,EAAS,IACJA,EACHsE,MAAO,IACFtE,EAAOsE,MACVC,cAAe,IACVvE,EAAOsE,MAAMC,cAChB,CAACR,IAAW,MAIlBR,EAAAA,EAAAA,IAAUvD,QACVoa,IApCAC,GAAY,EAEZnX,EAASyX,EAAAA,GACT,IAAK,IAAIva,EAAI,EAAGA,EAAI8C,EAAOI,MAAMiE,OAAQnH,IAAK,CAC5C,MAAMqC,EAAOS,EAAOI,MAAMlD,GAC1B,GAAGqC,EAAK5B,KAAO2I,EAAAA,KACT/G,EAAKwH,WAAW,CAClBxH,EAAKwH,YAAaG,EAAAA,EAAAA,aAClB,MAAMrE,QAAciB,EAAevE,EAAKwH,WAAWE,EAAAA,GAAgB1H,EAAK5B,KACxE4B,EAAKyH,OAAS,CAACnE,GACf7C,EAAOI,MAAMlD,GAAKqC,CACpB,CAEJ,CACA,IAAK,IAAIrC,EAAI,EAAGA,EAAI8C,EAAOoB,MAAMiD,OAAQnH,IAAK,CAC5C,MAAM6B,EAAOiB,EAAOoB,MAAMlE,GAC1B,GAAIJ,EAAO2Y,SAASiC,SAAS3Y,EAAKpB,IAAK,CACrC,MAAM,YAACga,EAAW,KAAEhW,GAAQ7E,EAAO2Y,SAASiC,SAAS3Y,EAAKpB,IACtDga,GAAa,IAAMA,GAAa,GAAGC,iBAAmBD,GAAa,GAAGC,gBAAiBvT,OAAS,IAElGrE,EAAOoB,MAAMlE,GAAG+D,YAAcU,EAAKgW,GAAa,GAAGC,gBAAgBD,GAAa,GAAGC,gBAAgBvT,OAAS,IAEhH,CACF,CAuBF,MAAMiF,EAAmB,CAAC,EAC1BtJ,EAAOI,MAAM6I,SAAS1J,IAGpB+J,EAAiB/J,EAAK5B,IAAM,CAC1B,KAAQ,kBACT,IAEHqC,EAAOsJ,iBAAmBA,EAE1BxM,GAASO,EAAAA,EAAAA,MACT2C,EAAO6X,QAAU7X,EAAOoB,MAAM1D,KAAKqB,GAAuBA,EAAKpB,KAC/D,MAAM,QAAEka,GAAY7X,EAChB6X,EAAQxT,OAAS,GAAKwT,EAAQ,KAAOxC,GACvCwC,EAAQC,QAEV9X,EAAO+X,eAAiB/X,EAAOoB,MAAMiD,OACrCmT,GAA0BnV,EAAAA,EAAAA,IAA8BvF,IAASwF,QACjE,MAAM0V,EAAsB,CAAC,EAC7BhY,EAAO0I,aAAaO,SAAQC,IAC1B8O,EAAgB9O,EAAIvL,IAAMuL,CAAG,IAE/B,MAAMC,EAAanJ,EAAO0I,aAAe1I,EAAO0I,YAAYrE,OAAS,EAAIrE,EAAO8L,UAAW,CAAC,GAW5F,GATAhP,EAAS,IACJA,EACH4L,YAAY,CACV/G,KAAK,IACAqW,GAEL7O,eAGApI,GAA8B,WAAbF,EAAuB,CAmB1C,MAAMoX,EAAY1a,OAAOC,OAAOV,EAAOW,SACjCya,EAAeD,EAAUE,SAAQ,EAAGxa,GAAIC,MAC5C,MAAM0S,GAAcH,EAAAA,EAAAA,IAAkBrT,EAAQc,GAC9C,OAAO0S,EAAc,CAACA,GAAe,EAAE,IAGnC8H,EAAeH,EAAUE,SAAQ,EAAGxa,GAAIC,MACrCya,EAAAA,EAAAA,IAAmBvb,EAAQc,IAAU,KAE1Cd,EAAOgC,eAAiBhC,EAAOsD,MAAMuB,KAAK7E,EAAOgC,gBACnDsZ,EAAahR,KAAKtK,EAAOsD,MAAMuB,KAAK7E,EAAOgC,gBAG7ChC,GAASwb,EAAAA,EAAAA,IAAaxb,GAAQqD,EAAAA,EAAAA,IAAqBiY,EAAa9M,OAAOtL,EAAOI,OAAQ,OACtFtD,GAASyb,EAAAA,EAAAA,IAAoBzb,EAAQkD,EAAOsJ,kBAC5CxM,GAAS0b,EAAAA,EAAAA,IAAa1b,GAAQqD,EAAAA,EAAAA,IAAqB+X,EAAa5M,OAAOtL,EAAOoB,OAAQ,OACtFtE,GAAS0M,EAAAA,EAAAA,IAAkB1M,EAAQ+D,EAAUgX,EAC/C,MAAO,GAAI9W,GAA8B,aAAbF,EAC1B/D,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOI,MAAO,OAC7DtD,GAAS2M,EAAAA,EAAAA,IAAgB3M,EAAQkD,EAAOsJ,kBACxCxM,GAAS2b,EAAAA,EAAAA,IAAY3b,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOoB,MAAO,OAChEtE,GAAS4b,EAAAA,EAAAA,IAAmB5b,EAAQ+D,EAAUgX,OACzC,CACL,MAAMc,GAAWxY,EAAAA,EAAAA,IAAqBH,EAAOoB,MAAO,MACpD,GAAIyW,EAAQvZ,SAAShC,EAAAA,KAAgC,CACnD,MAAMsc,EAAoBD,EAASrc,EAAAA,KAC/Bsc,GAAqBpB,IACvBmB,EAASrc,EAAAA,KAAiC,IACrCsc,EACH3X,YAAauW,GAGnB,CAEA1a,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOI,MAAO,OAC7DtD,GAAS2M,EAAAA,EAAAA,IAAgB3M,EAAQkD,EAAOsJ,kBACxCxM,GAAS2b,EAAAA,EAAAA,IAAY3b,EAAQ6b,GAC7B7b,GAAS0M,EAAAA,EAAAA,IAAkB1M,EAAQ+D,EAAUgX,EAE/C,CAEA/a,GAAS+b,EAAAA,EAAAA,IAA4B/b,EAAQ+D,EAAUb,IAE9BuX,EAAkBvX,EAAO6X,QAAUta,OAAO4I,KAAKnG,EAAO8V,aAC9D7M,SAASnL,IACxB,MAAMiY,EAAQ/V,EAAO8V,WAAWhY,GAC1Bgb,GAASC,EAAAA,EAAAA,IAAajc,EAAQgB,EAAQa,EAAAA,KACvCoX,GAAU+C,MAEVE,EAAAA,EAAAA,IAAYlc,EAAQgB,EAAQa,EAAAA,KAAiBsa,UAChDnc,GAASkZ,EAAAA,EAAAA,IACPlZ,EAAQgB,EAAQa,EAAAA,GAAgB,QAASoX,IAE7C,KAG8BwB,EAAkBvX,EAAO6X,QAAUta,OAAO4I,KAAKnG,EAAOkZ,iBAC9DjQ,SAASnL,IAC/B,MAAMob,EAAiBlZ,EAAOkZ,eAAepb,GACvCgb,GAASC,EAAAA,EAAAA,IAAajc,EAAQgB,EAAQa,EAAAA,KACvCua,GAAmBJ,KAExBhc,GAASkZ,EAAAA,EAAAA,IACPlZ,EAAQgB,EAAQa,EAAAA,GAAgB,eAAgBua,GACjD,IAgBHpc,EAAS,IACJA,EACHsE,MAAO,IACFtE,EAAOsE,MACVC,cAAe,IACVvE,EAAOsE,MAAMC,cAChB,CAACR,IAAW,MAKlBR,EAAAA,EAAAA,IAAUvD,GACVoa,EAAUC,EACZ,CAAC,MAAOpN,GACNxI,QAAQC,MAAMuI,EAChB,CAWF,CAEOlN,eAAesF,EACpBrF,EAAWC,EAAgCgC,MACvCnB,GAAQgB,EAAAA,EAAAA,QAEZ,MAAMoB,QAAeX,EAAAA,EAAAA,IAAQ,gBAAiBN,GAC9C,IAAKiB,EACH,OAGF,MAAM,MACJI,EAAK,iBAAEkJ,EAAgB,SAAE/I,EAAQ,UAAE4Y,EAAS,aAAExF,GAC5C3T,EAWJ,GATAlD,GAASO,EAAAA,EAAAA,MACL+C,IACFtD,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBC,EAAO,QAGpDkJ,IACFxM,GAAS2M,EAAAA,EAAAA,IAAgB3M,EAAQwM,IAG/B6P,EAAW,CACb,MAAMC,GAAoBC,EAAAA,EAAAA,IAAgBvc,EAAQqc,EAAUxb,IAC5Db,GAASwc,EAAAA,EAAAA,IACPxc,EACAqc,EAAUxb,IACV4b,EAAAA,EAAAA,IAAKJ,EAAW,CAAC,yBACjBnX,EACAoX,OAAoBpX,EAAYmX,EAAUK,kBAE9C,CAEA1c,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQiC,EAAKpB,GAAI,CACnC4C,cACIoT,GAAgB,CAAEA,mBAGxBtT,EAAAA,EAAAA,IAAUvD,GAEV,MAAM2c,EAAalZ,EAASkZ,WAW5B,OAVIA,GACF1c,EAAQ2c,aAAa,CACnBvK,eAAgB,CACdxR,GAAI8b,EAAW9b,GACf+F,WAAY+V,EAAW/V,YAEzB9F,UAIGoC,CACT,CAqBOnD,eAAe8T,EACpB7T,EACA6S,GAEA7S,GAASO,EAAAA,EAAAA,MACT,MAAMsc,GAAY5I,EAAAA,EAAAA,IAAqBjU,EAAQ6S,GAC/C,GAAIgK,IAAcA,EAAUva,MAC1B,OAAOua,EAGT,MAAM,KAAE5a,EAAI,KAAEQ,SAAeF,EAAAA,EAAAA,IAAQ,oBAAqBsQ,IAAa,CAAC,EACxE,OAAK5Q,GAILjC,GAASO,EAAAA,EAAAA,MACTP,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQiC,EAAKpB,GAAIoB,GACjCQ,IACFzC,GAAS8P,EAAAA,EAAAA,IAAW9P,EAAQyC,EAAK5B,GAAI4B,KAGvCc,EAAAA,EAAAA,IAAUvD,GAEHiC,QAZP,CAaF,CA0BAlC,eAAe2T,EACb1T,EAAWC,EAAgC4S,MACvC/R,GAAQgB,EAAAA,EAAAA,QAEZ,MAAMG,QAAa4R,EAAoB7T,EAAQ6S,GAC/C,IAAK5Q,EAAM,OAEXjC,GAASO,EAAAA,EAAAA,MACT,MAAMkC,GAAOC,EAAAA,EAAAA,IAAW1C,EAAQiC,EAAKpB,IACrC,IAAK4B,EAAM,OAGX,KADcqa,EAAAA,EAAAA,IAAUra,GACZ,OACZ,MAAMS,QAAeX,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CkR,IAAKhR,IAIP,GADAzC,GAASO,EAAAA,EAAAA,MACJ2C,EAYL,OAHAlD,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOI,MAAO,QAC7DC,EAAAA,EAAAA,IAAUvD,GAEHkD,EAAOuQ,IAXZxT,EAAQ+P,iBAAiB,CACvBxK,QAASyK,EAAAA,GAAuB,0CAChCnP,SAUN,CAmEAf,eAAeoQ,EACbnQ,EACAC,EACAe,EACA2O,EACAD,MACI5O,GAAQgB,EAAAA,EAAAA,QAEZ9B,GAASO,EAAAA,EAAAA,MACT,MAAMkT,QAAYC,EAAqB1T,EAAQC,EAAS0P,EAAQ7O,GAC3D2S,GAELxT,EAAQ0T,cAAc,CACpBF,MACAzS,YAC2B,iBAAhB0O,GAA4B,CAAEyD,WAAYzD,GACrD5O,SAEJ,CAEOf,eAAewU,EACpBvU,EACAC,EACAe,MACIF,GAAQgB,EAAAA,EAAAA,QAEZ,MAAMG,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,KAAS0U,EAAAA,EAAAA,IAAiB1U,GAC7B,OAAOA,EAGT,MAAM8a,QAtMDhd,eACLC,EAAWC,EAAgCgC,MACvCnB,GAAQgB,EAAAA,EAAAA,QAEZ,IAGE,aAFyBS,EAAAA,EAAAA,IAAQ,cAAeN,EAGlD,CAAE,MAAOyC,GAOP,YANoC,sBAA/BA,EAAmBc,QACtBvF,EAAQqG,sBAAsB,CAAEC,MAAO,WAAYzF,UAEnDb,EAAQuG,WAAW,CAAEC,KAAM,IAAM/B,EAAoBgC,aAAa,GAAQ5F,UAI9E,CACF,CAqLwBkc,CAAYhd,EAAQC,EAASgC,EAAMnB,GACzD,OAAKic,GAIL9c,EAAQ8C,SAAS,CAAElC,GAAIkc,EAAQlc,GAAIC,UAE5Bic,QANP,CAOF,C,0PC19EA,MAAME,EAAc,0oBAEpB,IAAIC,EACAC,EACAC,EAKG,SAASC,IAGd,OAFAC,IAEO5H,QAAQC,IAAIlV,OAAOC,OAAO0c,GAAQxc,KAAK2c,IAC5C,MAAMC,EAAUD,EAAME,IAItB,OAHAF,EAAME,IAAMR,EACZM,EAAMG,OAAQ,EACdH,EAAMI,OAAS,KACRJ,EAAMK,OACVC,MAAK,KACJN,EAAMjd,QACNid,EAAMI,OAAS,EACfJ,EAAMO,YAAc,EACpBP,EAAMG,OAAQ,EAEdK,uBAAsB,KACpBR,EAAME,IAAMD,CAAO,GACnB,GACF,IAER,CAEO,SAASF,IACd,GAAIF,EACF,OAEF,MAAMY,EAAY,IAAIC,MAAM,wBACtBC,EAAkB,IAAID,MAAM,8BAClCC,EAAgBC,MAAO,EACvB,MAAMC,EAAa,IAAIH,MAAM,yBACvBI,EAAiB,IAAIJ,MAAM,+BAC3BK,EAAY,IAAIL,MAAM,mBACtBM,EAAe,IAAIN,MAAM,sBACzBO,EAAW,IAAIP,MAAM,kBACrBQ,EAAgB,IAAIR,MAAM,uBAChCQ,EAAcN,MAAO,EACrB,MAAMO,EAAe,IAAIT,MAAM,sBAC/BS,EAAaP,MAAO,EAEpBf,EAAS,CACPuB,KAAMX,EACNY,UAAWP,EACXQ,MAAOT,EACPU,WAAYZ,EACZa,SAAUN,EACVO,IAAKR,EACLS,QAASV,EACTW,KAAMZ,EACNa,QAAST,EAEb,CAEA3e,eAAeqf,EAAsCpf,EAAWqc,GAC9D,MAAMnZ,QAAeX,EAAAA,EAAAA,IAAQ,eAAgB,CAC3C8c,KAAMhD,IAGR,IAAKnZ,EAAQ,OAEblD,GAASO,EAAAA,EAAAA,MAET,MAAM+b,GAAoBC,EAAAA,EAAAA,IAAgBvc,EAAQqc,EAAUxb,IAc5D,OAZAb,GAASwc,EAAAA,EAAAA,IACPxc,EACAqc,EAAUxb,IACV4b,EAAAA,EAAAA,IAAKvZ,EAAOmZ,UAAW,CAAC,yBACxBnX,EACAoX,GAAmBgD,cAAWpa,EAAYhC,EAAOmZ,UAAUK,mBAE7D1c,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOI,MAAO,OAC7DtD,GAASyM,EAAAA,EAAAA,IAASzM,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOoB,MAAO,QAE7Df,EAAAA,EAAAA,IAAUvD,GAEHkD,EAAOmZ,SAChB,CAEAtc,eAAewf,EACbvf,EACAqc,EAAkCmD,GAElC,MAAMtc,QAAeX,EAAAA,EAAAA,IAAQ,6BAA8B,CACzD8c,KAAMhD,EACNzF,OAAQ4I,IAGLtc,IAELlD,GAASO,EAAAA,EAAAA,MAETP,GAASoD,EAAAA,EAAAA,IAASpD,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOI,MAAO,OAC7DtD,GAASyM,EAAAA,EAAAA,IAASzM,GAAQqD,EAAAA,EAAAA,IAAqBH,EAAOoB,MAAO,QAE7Df,EAAAA,EAAAA,IAAUvD,GACZ,EAEAF,EAAAA,EAAAA,IAAiB,wBAAwB,CAACE,EAAQC,EAAS8B,KACzD,MAAM,MAAEqD,EAAK,MAAEtE,GAAQgB,EAAAA,EAAAA,OAAsBC,GAAW,CAAC,EACzD,OAAOmE,EAAAA,EAAAA,GAAelG,EAAQ,CAC5Byf,mBAAoB,UAAY1d,GAAW,CAAC,GAAKqD,IAASyB,EAAAA,EAAAA,IAAe7G,EAAQc,GAAO2e,oBACvF3e,EAAM,KAGXhB,EAAAA,EAAAA,IAAiB,+BAA+BC,MAAOC,EAAQC,EAAS8B,KACtE,MAAM,WAAE2d,EAAU,GAAE7e,GAAOkB,EACrBsa,GAAYE,EAAAA,EAAAA,IAAgBvc,EAAQa,GAErCwb,IAEDqD,UACIN,EAAepf,EAAQqc,GAC7Brc,GAASO,EAAAA,EAAAA,YACHgf,EAA2Bvf,EAAQqc,UAGrC9Z,EAAAA,EAAAA,IAAQ,mCAAoC,CAChDmd,aACAL,KAAMhD,IACN,KAGJvc,EAAAA,EAAAA,IAAiB,mBAAmBC,MAAOC,EAAQC,EAAS8B,KAC1D,MAAM,OAAEf,EAAM,MAAEF,GAAQgB,EAAAA,EAAAA,OAAsBC,EAExCE,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQgB,GAChC,IAAKiB,EACH,OAGF,MAAMiB,QAAeX,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9Cod,KAAM1d,IAGHiB,IAELlD,GAASO,EAAAA,EAAAA,MACTP,GAASwc,EAAAA,EAAAA,IAAgBxc,EAAQkD,EAAOrC,GAAI,IACvCqC,EACHlC,YAEFuC,EAAAA,EAAAA,IAAUvD,GAEVC,EAAQ2f,8BAA8B,CAAE/e,GAAIqC,EAAOrC,GAAI+F,WAAY1D,EAAO0D,WAAY9F,UAAQ,KAGhGhB,EAAAA,EAAAA,IAAiB,6BAA6BC,MAAOC,EAAQC,EAAS8B,KACpE,MAAM,MAAEjB,GAAQgB,EAAAA,EAAAA,OAAsBC,GAAW,CAAC,EAC5Csa,GAAYwD,EAAAA,EAAAA,IAAsB7f,GAExC,IAAKqc,IAAcA,EAAUrb,OAC3B,OAGF,MAAMiB,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQqc,EAAUrb,QAC1C,IAAKiB,EACH,OAGF,MAAM6d,EAAoB5e,SAAQ6e,EAAAA,EAAAA,IAAgB9d,IAElD,IAAI,WAAE+d,GAAe/d,EAAKwB,SACtBqc,IACFE,QAAmBzd,EAAAA,EAAAA,IAAQ,wBAAyB,CAClD8c,KAAMhD,EACN4D,eAAe,KAIdD,KAILE,EAAAA,EAAAA,IAAoBF,GACpB/f,EAAQ+P,iBAAiB,CACvBxK,QAAS,2BACT1E,UACA,KAGJhB,EAAAA,EAAAA,IAAiB,uBAAuBC,MAAOC,EAAQC,EAAS8B,KAC9D,MAAM,SAAE8Q,EAAQ,WAAEC,EAAU,MAAEhS,GAAQgB,EAAAA,EAAAA,OAAsBC,EAEtDE,QAAa4R,EAAAA,EAAAA,IAAoB7T,EAAQ6S,GAE/C,IAAK5Q,EAEH,YADAhC,EAAQ+P,iBAAiB,CAAExK,QAASyK,EAAAA,GAAuB,mBAAoBnP,UAIjFd,GAASO,EAAAA,EAAAA,MACT,MAAM4f,QAAa9a,EAAAA,EAAAA,IAAarF,EAAQC,EAASgC,EAAMnB,GAEnDqf,GAAM9D,WACRpc,EAAQ2f,8BAA8B,CACpC/e,GAAIsf,EAAK9D,UAAUxb,GACnB+F,WAAYuZ,EAAK9D,UAAUzV,WAC3BkM,aACAhS,SAEJ,KAGFhB,EAAAA,EAAAA,IAAiB,iCAAiC,CAACE,EAAQC,EAAS8B,KAClE9B,EAAQmgB,2BAA2B,CACjCxI,OAAQ,gBACR7V,UACAjB,MAAOiB,EAAQjB,QAASgB,EAAAA,EAAAA,OACxB,KAGJhC,EAAAA,EAAAA,IAAiB,8BAA8B,CAACE,EAAQC,EAAS8B,KAC/D9B,EAAQmgB,2BAA2B,CACjCxI,OAAQ,aACR7V,aAASmD,EACTpE,MAAOiB,GAASjB,QAASgB,EAAAA,EAAAA,OACzB,KAGJhC,EAAAA,EAAAA,IAAiB,iBAAiBC,MAAOC,EAAQC,EAAS8B,KACxD,MAAM,OACJf,EAAM,GAAEH,EAAE,WAAE+F,EAAU,WAAEkM,EAAU,MAAEhS,GAAQgB,EAAAA,EAAAA,OAC1CC,EAEJ,IAAKse,EAAAA,GAAqB,OAE1B,GAAIrgB,EAAOsgB,UAET,YADArgB,EAAQsgB,qBAAqB,CAAEzf,WAuJnC,WACE,MAAM0f,EAXE,IAAKxU,OAAOyU,cAAiBzU,OAAe0U,oBAYpDxD,EAAe,IAAIe,MACnBd,EAAeqD,EACftD,EAAayD,UAAYC,EAAQJ,IACjCK,EAAAA,EAAAA,GAAS3D,EACX,CAzJE4D,GAEAxD,IAEKyD,EADL/gB,GAASO,EAAAA,EAAAA,MACuCN,GAAS,EAAMa,GAE/D,MAAQkgB,YAAY,kBAAEC,IAAwBjhB,EAC9C,IAAIqc,EAAYxb,GAAK0b,EAAAA,EAAAA,IAAgBvc,EAAQa,IAAMqgB,EAAAA,EAAAA,IAAoBlhB,EAAQgB,GAE3Eqb,GAAWxb,KAAOogB,EAKlBA,EACE,mBAAoBhhB,GACtBA,EAAQkhB,eAAe,CACrBC,OAAQrf,EACRjB,UAMFub,GAAa4E,IAAsB5E,EAAUxb,GAC/CZ,EAAQsgB,qBAAqB,CAAEzf,WAI5Bub,GAAexb,GAAO+F,IACzByV,QAAkB+C,EAAepf,EAAQ,CACvCa,KACA+F,gBAICyV,IAELrc,GAASO,EAAAA,EAAAA,MACTP,GAASwc,EAAAA,EAAAA,IACPxc,EACAqc,EAAUxb,GACV,IACKwb,EACHvJ,mBAEF5N,EACAmX,EAAUK,kBAAoB,GAEhC1c,EAAS,IACJA,EACHghB,WAAY,IACPhhB,EAAOghB,WACVC,kBAAmB5E,EAAUxb,MAIjC0C,EAAAA,EAAAA,IAAUvD,GAEVC,EAAQsgB,qBAAqB,CAAEnb,OAAO,EAAOtE,YAjD3Cb,EAAQsgB,qBAAqB,CAAEzf,SAiDoB,KAGvDhB,EAAAA,EAAAA,IAAiB,sBAAsB,CAACE,EAAQC,EAAS8B,KACvD,MAAM,MAAEwb,GAAUxb,EAEbqb,EAAOG,KAKI,eAAVA,GACFH,EAAO0B,WAAWxe,QAEN,aAAVid,GACFH,EAAO2B,SAASze,QAEJ,YAAVid,GACFH,EAAO+B,QAAQ7e,SAEjBugB,EAAAA,EAAAA,GAASzD,EAAOG,IAGV,KAGVzd,EAAAA,EAAAA,IAAiB,iCAAkCE,IACjD,MAAMqc,GAAYwD,EAAAA,EAAAA,IAAsB7f,GACnCqc,GAIAkD,EAA2Bvf,EAAQqc,EAAWA,EAAUmD,WAAW,KAG1E1f,EAAAA,EAAAA,IAAiB,+BAA+B,CAACE,EAAQC,EAAS8B,KAChE9B,EAAQmgB,2BAA2B,CACjCxI,OAAQ,cACR7V,UACAjB,MAAOiB,EAAQjB,QAASgB,EAAAA,EAAAA,OACxB,KAGJhC,EAAAA,EAAAA,IAAiB,eAAeC,MAAOC,EAAQC,EAAS8B,KACtD,MAAM,OAAE+E,EAAM,QAAEua,EAAO,MAAEvgB,GAAQgB,EAAAA,EAAAA,OAAsBC,EAEnD/B,EAAOsgB,UACTrgB,EAAQsgB,qBAAqB,CAAEzf,WAIpB4B,EAAAA,EAAAA,IAAW1C,EAAQ8G,KAMhCwW,IAEKyD,EADL/gB,GAASO,EAAAA,EAAAA,MACuCN,EAASohB,EAASvgB,GAElEd,GAASO,EAAAA,EAAAA,MACTP,EAAS,IACJA,EACHsgB,UAAW,CACTzf,GAAI,GACJygB,MAAO,aACPC,cAAeza,EACfua,UACAG,QAASxhB,EAAOgC,iBAGpBuB,EAAAA,EAAAA,IAAUvD,GAEVC,EAAQsgB,qBAAqB,CAAEnb,OAAO,EAAOtE,UAAQ,IAOvD,MAAM8f,EAAWJ,IACf,MAAMiB,EAAajB,EAAIkB,mBACjBC,EAAMF,EAAWxC,QAAQuB,EAAIoB,gCAEnC,OADAH,EAAWrO,QACJ,IAAIyO,YAAY,CAACphB,OAAOqhB,OAAQH,EAAYI,OAAOC,iBAAiB,GAAI,CAAEC,SAAS,KAAU,EAW/F,SAASC,IACd,OAAOhF,CACT,CAEO,SAASiF,IACd,OAAOhF,CACT,CAEO,SAASiF,IACdlF,GAAc5c,QACd6c,OAAejY,EACfgY,OAAehY,CACjB,CAKO,SAAS6b,EACd/gB,EACAC,EAAgCohB,MAC5BvgB,GAAQgB,EAAAA,EAAAA,QAERuf,EACFgB,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAC1C3E,MAAMkE,IACkC,IAAnCA,EAAOU,iBAAiBlb,OAC1BtH,EAAQ+P,iBAAiB,CACvBxK,QAASyK,EAAAA,GAAuB,qBAChCnP,UAGF4hB,EAA0B1iB,EAAQC,EAASa,EAC7C,IAED6hB,OAAM,KACL1iB,EAAQ+P,iBAAiB,CACvBxK,QAASyK,EAAAA,GAAuB,qBAChCnP,SACA,IAGN4hB,EAA0B1iB,EAAQC,EAASa,EAE/C,CAEA,SAAS4hB,EACP1iB,EAAWC,MAAoCa,GAAQgB,EAAAA,EAAAA,QAEvDugB,UAAUC,aAAaC,aAAa,CAAEK,OAAO,IAC1C/E,MAAMkE,IACkC,IAAnCA,EAAOC,iBAAiBza,QAC1BtH,EAAQ+P,iBAAiB,CACvBxK,QAASyK,EAAAA,GAAuB,yCAChCnP,SAEJ,IAED6hB,OAAM,KACL1iB,EAAQ+P,iBAAiB,CACvBxK,QAASyK,EAAAA,GAAuB,yCAChCnP,SACA,GAER,C,+GCheO,SAAS0b,EACdxc,EACA6iB,EACAC,EACAC,EACAC,GAEA,MAKMC,EALaxiB,OAAOC,OAAO,IAC5BV,EAAOghB,WAAWnc,KAAKge,IAAcI,gBACrCH,EAAgBG,eAEOhiB,QAAO,EAAGiiB,aAAcA,IACtB/M,QAAO,CAAC8B,EAA2CC,KAC/ED,EAAIC,EAAGrX,IAAMqX,EACND,IACN,CAAC,GAEJ,MAAO,IACFjY,EACHghB,WAAY,IACPhhB,EAAOghB,WACVnc,KAAM,IACD7E,EAAOghB,WAAWnc,KACrB,CAACge,GAAc,IACV7iB,EAAOghB,WAAWnc,KAAKge,OACvBpG,EAAAA,EAAAA,IAAKqG,EAAiB,CAAC,yBACtBC,GAAyB,CAC3BrG,kBAAmB1c,EAAOghB,WAAWnc,KAAKge,GAAanG,kBAAoBqG,WAE/C7d,IAA1B8d,GAAuC,CACzCtG,kBAAmBsG,GAErBC,kBAKV,CAEO,SAASE,EACdnjB,EACA6iB,GAEA,MAAMxG,GAAYE,EAAAA,EAAAA,IAAgBvc,EAAQ6iB,GAC1C,GAAIxG,GAAaA,EAAUrb,OAAQ,CACjC,MAAMiB,GAAOC,EAAAA,EAAAA,IAAWlC,EAAQqc,EAAUrb,QACtCiB,IACFjC,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQqc,EAAUrb,OAAQ,CAC5CyC,SAAU,IACLxB,EAAKwB,SACRof,iBAAa3d,KAIrB,CAEA,MAAO,IACFlF,EACHghB,WAAY,IACPhhB,EAAOghB,WACVnc,KAAM,KACD4X,EAAAA,EAAAA,IAAKzc,EAAOghB,WAAWnc,KAAM,CAACge,EAAYjZ,eAIrD,CAEO,SAASwZ,EACdpjB,EACA8iB,EACAE,GAEA,OAAKhjB,EAAOghB,WAAWC,kBAIhBzE,EAAgBxc,EACrBA,EAAOghB,WAAWC,kBAClB6B,OACA5d,EACA8d,GAPOhjB,CAQX,CAEO,SAASqjB,EACdrjB,EACA6iB,EACA/b,EACAwc,EACAC,GAAgB,GAEhB,MAAMlH,GAAYE,EAAAA,EAAAA,IAAgBvc,EAAQ6iB,GAC1C,OAAKxG,EAIEG,EAAgBxc,EAAQ6iB,EAAa,CAC1CI,aAAc,IACT5G,EAAU4G,aACb,CAACnc,GAAS,IACLuV,EAAU4G,aAAanc,MACvBwc,KAGNA,EAAkBJ,OAChBK,EAAgB,GAAK,EACrBlH,EAAU4G,aAAanc,IAAWyc,EAAgB,EAAI,GAblDvjB,CAcX,C","sources":["webpack://wai/./src/global/actions/api/chats.ts","webpack://wai/./src/global/actions/ui/calls.ts","webpack://wai/./src/global/reducers/calls.ts"],"sourcesContent":["import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getActions, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiChat, ApiChatFolder, ApiChatMember, ApiError, ApiUser, ApiUserStatus,} from '../../../api/types';\nimport {ApiAttachment, MAIN_THREAD_ID} from '../../../api/types';\nimport {ChatCreationProgress, ManagementProgress, NewChatMembersProgress} from '../../../types';\nimport type {ActionReturnType, GlobalState, TabArgs,} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  DEBUG, MEDIA_CACHE_NAME_WAI,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  deleteTopic,\n  leaveChat,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatListType,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport {buildCollectionByKey, omit} from '../../../util/iteratees';\nimport {debounce, pause, throttle} from '../../../util/schedulers';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {formatShareText, parseChooseParameter, processDeepLink} from '../../../util/deeplink';\nimport {updateGroupCall} from '../../reducers/calls';\nimport {selectGroupCall} from '../../selectors/calls';\nimport {getOrderedIds} from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport {selectCurrentLimit} from '../../selectors/limits';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport {\n  ChatModelConfig, DEFAULT_CHATGPT_AI_COMMANDS, DEFAULT_AVATARS,\n  DEFAULT_BOT_COMMANDS,\n  DEFAULT_CREATE_USER_BIO, DEFAULT_PROMPT,\n  LoadAllChats, UserIdChatGpt,\n  UserIdFirstBot, UserIdCnPrompt, UserIdEnPrompt, UserIdChatGpt4\n} from \"../../../worker/setting\";\nimport MsgCommandSetting from \"../../../worker/msg/MsgCommandSetting\";\nimport {generateRandomBytes, readBigIntFromBuffer} from \"../../../lib/gramjs/Helpers\";\nimport * as cacheApi from '../../../util/cacheApi';\nimport {blobToDataUri, fetchBlob} from \"../../../util/files\";\nimport {DownloadRes} from \"../../../lib/ptp/protobuf/PTPFile\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {getFileId} from \"../../../lib/gramjs/client/uploadFile\";\nimport MsgCommandChatLab from \"../../../worker/msg/MsgCommandChatLab\";\nimport { resizeImage } from '../../../util/imageResize';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID,\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    //todo\n    // actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({ id, threadId: result.topMessageId, tabId });\n    } else {\n      actions.openChat({ id, threadId: topMessageId, tabId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  if(listType === \"archived\"){\n    return;\n  }\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n      return;\n    }\n\n    global = getGlobal();\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n    await loadChats(global,\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (global): ActionReturnType => {\n  runThrottledForLoadTopChats(() => loadChats(global, 'active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\n\nconst getAvatarPhoto = async (id:string,url:string)=>{\n  const res = await fetch(url)\n  const ab = await res.arrayBuffer()\n  const type = \"image/\"+url.split(\".\")[url.split(\".\").length - 1]\n  const body = new DownloadRes({\n    file:{\n      id,\n      part:0,\n      part_total:1,\n      buf:Buffer.from(ab),\n      size:Buffer.from(ab).length,\n      type\n    },\n    err:ERR.NO_ERROR\n  }).pack().getPbData()\n  const blob = new Blob([Buffer.from(body)],{type});\n  const blob1= new Blob([Buffer.from(ab)],{type});\n\n  const quality = 0.1;\n  const thumbUrl = await resizeImage(blob1, 40,40, 'image/jpeg',quality);\n  const thumbBlob = await fetchBlob(thumbUrl)\n  const dataUri = await blobToDataUri(thumbBlob);\n  const size = {\n    \"width\": 640,\n    \"height\":  640,\n  }\n  await cacheApi.save(MEDIA_CACHE_NAME_WAI, id, blob);\n\n  return {\n    id:id,\n    thumbnail:{\n      dataUri,\n      ...size\n    },\n    \"sizes\": [\n      {\n        width: 160,\n        height: 160,\n        type: 's',\n      },\n      {\n        width: 320,\n        height: 320,\n        type: 'm',\n      },\n      {\n        width: 640,\n        height: 640,\n        type: 'x',\n      },\n    ],\n  }\n}\naddActionHandler('createChat', async (global, actions, payload)=> {\n  const {\n    title, id,promptInit,about, tabId = getCurrentTabId(),\n  } = payload;\n\n  let userIds = Object.keys(global.users.byId)\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try{\n    let userId: string;\n    let userIdInt = parseInt(UserIdFirstBot)\n    if(!id){\n      if(userIds.length > 0){\n        userIds = [...userIds,...global.chatIdsDeleted]\n        userIds.sort((a,b)=>parseInt(b) - parseInt(a))\n        userIdInt = parseInt(userIds[0]) + 1\n      }\n      if(userIdInt < 100000){\n        userIdInt = 100000\n      }\n      userId = userIdInt.toString()\n    }else{\n      userId = id\n    }\n\n    const chatGptApiKey = localStorage.getItem(\"cg-key\") ? localStorage.getItem(\"cg-key\") : \"\"\n    const init_system_content = promptInit || DEFAULT_PROMPT\n    let avatarHash = \"\";\n    let photos = []\n    if(DEFAULT_AVATARS[userId]){\n      avatarHash = getFileId();\n      const avatarUrl = DEFAULT_AVATARS[userId]\n      const photo = await getAvatarPhoto(avatarHash,avatarUrl);\n      photos.push(photo)\n    }\n    const user = {\n      \"canBeInvitedToGroup\": false,\n      \"hasVideoAvatar\": false,\n      \"type\": \"userTypeBot\",\n      id:userId,\n      \"phoneNumber\": \"\",\n      isMin:false,\n      \"noStatus\": true,\n      isSelf:false,\n      avatarHash,\n      accessHash:\"\",\n      isPremium: false,\n      firstName: title,\n      photos,\n      usernames: [\n        {\n          \"username\": \"Bot_\"+userId,\n          \"isActive\": true,\n          \"isEditable\": true\n        }\n      ],\n      fullInfo: {\n        \"isBlocked\": false,\n        \"noVoiceMessages\": false,\n        bio: about || DEFAULT_CREATE_USER_BIO,\n        botInfo: {\n          aiBot:{\n            enableAi:true,\n            chatGptConfig:{\n              init_system_content,\n              api_key:\"\",\n              max_history_length:10,\n              modelConfig:{\n                ...ChatModelConfig,\n                ...(userId === UserIdChatGpt4 ? {model:\"gpt-4\"} : {})\n              }\n            }\n          },\n          botId: userId,\n          \"description\": about || DEFAULT_CREATE_USER_BIO,\n          \"menuButton\": {\n            \"type\": \"commands\"\n          },\n          commands:[...DEFAULT_BOT_COMMANDS,...DEFAULT_CHATGPT_AI_COMMANDS].map(cmd=>{\n            // @ts-ignore\n            cmd.botId = userId;\n            return cmd\n          })\n        }\n      }\n    }\n    global = getGlobal()\n    const {chatFolders} = global;\n    // @ts-ignore\n    const users:ApiUser[] = [user]\n\n    // @ts-ignore\n    const chats:ApiChat[] = [MsgCommandSetting.buildDefaultChat(user)]\n\n    let activeChatFolder = window.sessionStorage.getItem(\"activeChatFolder\")\n    let activeChatFolderRow;\n    const chatFolderById:Record<string, ApiChatFolder> = {};\n    if(activeChatFolder){\n      Object.values(chatFolders.byId).forEach((row:ApiChatFolder)=>{\n        if(chatFolders.orderedIds![parseInt(activeChatFolder!)]){\n          const activeFolderId = chatFolders.orderedIds![parseInt(activeChatFolder!)]\n          if(row.id === activeFolderId){\n\n            if(!row.includedChatIds){\n              row.includedChatIds = []\n            }\n            row.includedChatIds.push(userId)\n            chatFolderById[row.id] = row;\n            activeChatFolderRow = row;\n          }\n        }\n      })\n    }\n\n    const userStatusesById:Record<string,ApiUserStatus> = {\n      [user.id] : {\n        \"type\": \"userStatusEmpty\"\n      }\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n    global = updateChatListIds(global, \"active\", chats.map(chat=>chat.id));\n    global = addUserStatuses(global, userStatusesById);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: ChatCreationProgress.Complete,\n      },\n    }, tabId);\n\n    setGlobal({\n      ...global,\n      chatFolders:{\n        ...global.chatFolders,\n        byId:{\n          ...global.chatFolders.byId,\n          ...chatFolderById\n        }\n\n      }\n    })\n\n    if(activeChatFolderRow){\n      actions.editChatFolder({ id: activeChatFolderRow.id, folderUpdate: activeChatFolderRow });\n    }\n    if(promptInit || (id === UserIdChatGpt || id === UserIdChatGpt4)){\n      actions.sendBotCommand({chatId:userId,command:\"/initPrompt\",tabId})\n    }\n    // @ts-ignore\n    actions.openChat({id: userId,shouldReplaceHistory: true,});\n\n\n  }catch (e){\n    console.error(e)\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: ChatCreationProgress.Error,\n        error: '创建失败',\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n})\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n  // @ts-ignore\n  actions.setActiveChatFolder({activeChatFolder:0},getCurrentTabId())\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n  window.sessionStorage.setItem(\"activeChatFolder\",activeChatFolder.toString())\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleForum', { chat, isEnabled });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = chat.fullInfo?.areParticipantsHidden;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      areParticipantsHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      fullInfo: {\n        ...chat.fullInfo,\n        areParticipantsHidden: prevIsEnabled,\n      },\n    });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\n\nconst initChats = (firstLoad?:boolean)=>{\n\n  setTimeout(async ()=>{\n    if(firstLoad){\n      getActions().sendBotCommand({chatId:UserIdFirstBot,command:\"/start\"})\n    }\n    const global = getGlobal();\n    if(!global.users.byId[UserIdChatGpt]){\n      await MsgCommandChatLab.createChatGpt(UserIdChatGpt)\n    }\n    if(!global.users.byId[UserIdChatGpt4]){\n      await MsgCommandChatLab.createChatGpt(UserIdChatGpt4,\"ChatGpt4\")\n    }\n  },500)\n}\n\nexport async function loadChats<T extends GlobalState>(\n  global: T,\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  let firstLoad = false;\n  global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  try {\n    let result: { folderIds?: number[],chatFolders?: any[]; users?: any; userStatusesById?: any; chats?: any; chatIds?: any; draftsById?: any; replyingToById?: any; orderedPinnedIds?: string[] | never[] | undefined; totalChatCount?: number; };\n    if(!global.users.byId[UserIdFirstBot]) {\n      firstLoad = true;\n\n      result = LoadAllChats;\n      for (let i = 0; i < result.users.length; i++) {\n        const user = result.users[i];\n        if(user.id === UserIdFirstBot){\n          if(!user.avatarHash){\n            user.avatarHash = getFileId();\n            const photo = await getAvatarPhoto(user.avatarHash,DEFAULT_AVATARS[user.id])\n            user.photos = [photo]\n            result.users[i] = user\n          }\n        }\n      }\n      for (let i = 0; i < result.chats.length; i++) {\n        const chat = result.chats[i];\n        if (global.messages.byChatId[chat.id]) {\n          const {threadsById, byId} = global.messages.byChatId[chat.id]\n          if (threadsById[-1] && threadsById[-1].lastViewportIds && threadsById[-1].lastViewportIds!.length > 0) {\n            // @ts-ignore\n            result.chats[i].lastMessage = byId[threadsById[-1].lastViewportIds[threadsById[-1].lastViewportIds.length - 1]]\n          }\n        }\n      }\n    }else {\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          isFullyLoaded: {\n            ...global.chats.isFullyLoaded,\n            [listType]: true,\n          },\n        },\n      };\n      setGlobal(global);\n      initChats()\n      return\n    }\n    // result = await callApi('fetchChats', {\n    //   limit: CHAT_LIST_LOAD_SLICE,\n    //   offsetDate,\n    //   archived: listType === 'archived',\n    //   withPinned: shouldReplace,\n    //   lastLocalServiceMessage,\n    // });\n    const userStatusesById = {};\n    result.users.forEach((user: ApiUser)=>{\n\n      // @ts-ignore\n      userStatusesById[user.id] = {\n        \"type\": \"userStatusEmpty\"\n      }\n    })\n    result.userStatusesById = userStatusesById;\n\n    global = getGlobal();\n    result.chatIds = result.chats.map((chat: { id: any; }) => chat.id);\n    const { chatIds } = result;\n    if (chatIds.length > 0 && chatIds[0] === offsetId) {\n      chatIds.shift();\n    }\n    result.totalChatCount = result.chats.length;\n    lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n    const chatFoldersById:any = {};\n    result.chatFolders?.forEach(row=>{\n      chatFoldersById[row.id] = row\n    })\n    const orderedIds = result.chatFolders && result.chatFolders.length > 0 ? result.folderIds: [0];\n\n    global = {\n      ...global,\n      chatFolders:{\n        byId:{\n          ...chatFoldersById\n        },\n        orderedIds\n      }\n    }\n    if (shouldReplace && listType === 'active') {\n      // Always include service notifications chat\n      // if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      //   const result2 = await callApi('fetchChat', {\n      //     type: 'user',\n      //     user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      //   });\n      //\n      //   global = getGlobal();\n      //\n      //   const notificationsChat = result2 && selectChat(global, result2.chatId);\n      //   if (notificationsChat) {\n      //     chatIds.unshift(notificationsChat.id);\n      //     result.chats.unshift(notificationsChat);\n      //     if (lastLocalServiceMessage) {\n      //       notificationsChat.lastMessage = lastLocalServiceMessage;\n      //     }\n      //   }\n      // }\n      const tabStates = Object.values(global.byTabId);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n      global = updateChatListIds(global, listType, chatIds);\n    } else if (shouldReplace && listType === 'archived') {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      const newChats = buildCollectionByKey(result.chats, 'id');\n      if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n        if (notificationsChat && lastLocalServiceMessage) {\n          newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n            ...notificationsChat,\n            lastMessage: lastLocalServiceMessage,\n          };\n        }\n      }\n\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, newChats);\n      global = updateChatListIds(global, listType, chatIds);\n\n    }\n\n    global = updateChatListSecondaryInfo(global, listType, result);\n\n    const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n    idsToUpdateDraft.forEach((chatId) => {\n      const draft = result.draftsById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!draft && !thread) return;\n\n      if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n        global = replaceThreadParam(\n          global, chatId, MAIN_THREAD_ID, 'draft', draft,\n        );\n      }\n    });\n\n    const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n    idsToUpdateReplyingToId.forEach((chatId) => {\n      const replyingToById = result.replyingToById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!replyingToById && !thread) return;\n\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n      );\n    });\n\n    // if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    //   global = {\n    //     ...global,\n    //     chats: {\n    //       ...global.chats,\n    //       isFullyLoaded: {\n    //         ...global.chats.isFullyLoaded,\n    //         [listType]: true,\n    //       },\n    //     },\n    //   };\n    // }\n\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n\n    setGlobal(global);\n    initChats(firstLoad)\n  }catch (e){\n    console.error(e)\n  }\n\n  // const result = await callApi('fetchChats', {\n  //   limit: CHAT_LIST_LOAD_SLICE,\n  //   offsetDate,\n  //   archived: listType === 'archived',\n  //   withPinned: shouldReplace,\n  //   lastLocalServiceMessage,\n  // });\n  //\n\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_ID","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","addActionHandler","async","global","actions","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","getGlobal","currentChatIds","Object","values","byTabId","map","id","tabId","selectCurrentMessageList","chatId","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","threadId","MAIN_THREAD_ID","getCurrentTabId","payload","currentUserId","chat","selectChat","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","isMin","callApi","type","user","selectUser","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","openChat","selectThreadOriginChat","TMP_CHAT_ID","result","openPreviousChat","addUsers","buildCollectionByKey","users","setGlobal","chatFullInfo","fullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","listType","onReplace","shouldReplace","getOrderDate","lastMessage","date","joinDate","chats","isFullyLoaded","DEBUG","console","error","listIds","oldestChat","byId","selectIsChatPinned","sort","chat1","chat2","undefined","loadChats","force","loadFullChat","lastLocalMessage","selectLastServiceNotification","message","isMuted","updateChat","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","openLimitReachedModal","limit","showDialog","data","hasErrorKey","channelId","accessHash","selectTabState","userId","leaveChat","getAvatarPhoto","url","res","fetch","ab","arrayBuffer","split","length","body","DownloadRes","file","part","part_total","buf","Buffer","from","size","err","ERR","pack","getPbData","blob","Blob","blob1","thumbUrl","resizeImage","thumbBlob","fetchBlob","dataUri","blobToDataUri","cacheApi","MEDIA_CACHE_NAME_WAI","thumbnail","width","height","promptInit","userIds","keys","userIdInt","parseInt","UserIdFirstBot","chatIdsDeleted","a","b","toString","localStorage","getItem","init_system_content","DEFAULT_PROMPT","avatarHash","photos","DEFAULT_AVATARS","getFileId","avatarUrl","push","isSelf","isPremium","firstName","usernames","bio","DEFAULT_CREATE_USER_BIO","botInfo","aiBot","enableAi","chatGptConfig","api_key","max_history_length","modelConfig","ChatModelConfig","UserIdChatGpt4","model","botId","commands","DEFAULT_BOT_COMMANDS","DEFAULT_CHATGPT_AI_COMMANDS","cmd","chatFolders","MsgCommandSetting","activeChatFolderRow","activeChatFolder","window","sessionStorage","chatFolderById","forEach","row","orderedIds","activeFolderId","includedChatIds","userStatusesById","addChats","updateChatListIds","addUserStatuses","editChatFolder","folderUpdate","UserIdChatGpt","sendBotCommand","command","e","createdChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","maxId","Math","max","recommendedId","description","newFolder","folderIds","setActiveChatFolder","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","phoneNumber","startAttach","attach","localUser","selectUserByPhoneNumber","updateUser","fetchChatByPhoneNumber","showNotification","langProvider","replace","openAttachMenuFromLink","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","open","hostParts","part1","part2","part3","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","stickerSetInfo","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","username","inviteHash","voicechat","livestream","slug","substring","startParam","start","selectCurrentChat","c","channelPostId","currentChat","bot","getAttachBotOrNotify","callAttachBot","isCurrentChat","fetchChatByUsername","startBot","param","usernameChat","selectChatByUsername","threadInfo","selectThreadInfo","chatByUsername","discussionChatId","isEnabled","ensureIsSuperGroup","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","groups","addedById","reduce","group","isForum","forDiscussionIds","channel","fullChat","setItem","requestedDraft","isChatBasicGroup","offset","membersCount","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","offsetDate","offsetId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","draftsById","draft","replaceThreadParam","formattedText","replyingToId","readInboxMessageIdByTopicId","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","initChats","firstLoad","setTimeout","getActions","MsgCommandChatLab","isFullDraftSync","lastLocalServiceMessage","LoadAllChats","byChatId","threadsById","lastViewportIds","chatIds","shift","totalChatCount","chatFoldersById","tabStates","visibleChats","flatMap","visibleUsers","selectVisibleUsers","replaceUsers","replaceUserStatuses","replaceChats","updateChats","replaceChatListIds","newChats","notificationsChat","updateChatListSecondaryInfo","thread","selectThread","selectDraft","isLocal","replyingToById","groupCall","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","stickerSet","loadStickers","localChat","isUserBot","newChat","migrateChat","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestAnimationFrame","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","peer","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}