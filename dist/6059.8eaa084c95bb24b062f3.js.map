{"version":3,"file":"6059.8eaa084c95bb24b062f3.js","mappings":"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","sources":["webpack://wai/./src/api/gramjs/localDb.ts","webpack://wai/./src/api/gramjs/apiBuilders/helpers.ts","webpack://wai/./src/lib/gramjs/client/uploadFile.ts","webpack://wai/./src/worker/msg/MsgCommandChatLab.ts","webpack://wai/./src/global/actions/api/chats.ts","webpack://wai/./src/global/actions/ui/calls.ts","webpack://wai/./src/global/reducers/calls.ts","webpack://wai/./src/lib/gramjs/Helpers.js","webpack://wai/./src/lib/gramjs/errors/index.js","webpack://wai/./src/lib/gramjs/tl/api.js","webpack://wai/./src/util/Deferred.ts"],"sourcesContent":["import BigInt from 'big-integer';\nimport type { Api as GramJs } from '../../lib/gramjs';\nimport type { ApiMessage } from '../types';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { constructors } from '../../lib/gramjs/tl';\nimport { throttle } from '../../util/schedulers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport interface LocalDb {\n  localMessages: Record<string, ApiMessage>;\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  cache: Record<string,any>;\n  botWaitReply: Record<string, undefined | {\n    command:string,\n    payload?:Record<string,any>\n  }>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments','cache','botWaitReply',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const valueVirtualClass = Object.keys(value).reduce((acc2, key2) => {\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, valueVirtualClass)\n        : valueVirtualClass;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","// eslint-disable-next-line import/no-named-default\nimport {default as Api} from '../tl/api';\n\nimport type TelegramClient from './TelegramClient';\nimport {generateRandomBytes, readBigIntFromBuffer, sleep} from '../Helpers';\nimport {getUploadPartSize} from '../Utils';\nimport errors from '../errors';\nimport {Foreman} from '../../../util/foreman';\nimport {DownloadRes, UploadReq} from \"../../ptp/protobuf/PTPFile\";\nimport {CLOUD_MESSAGE_API, DEBUG, MEDIA_CACHE_NAME_WAI} from \"../../../config\";\nimport localDb from \"../../../api/gramjs/localDb\";\nimport Account from \"../../../worker/share/Account\";\nimport * as cacheApi from '../../../util/cacheApi';\nimport {fileToBuffer} from \"../../../worker/share/utils/utils\";\nimport {ERR, FileInfo_Type} from \"../../ptp/protobuf/PTPCommon/types\";\n\ninterface OnProgress {\n    isCanceled?: boolean;\n\n    // Float between 0 and 1.\n    (progress: number): void;\n}\n\nexport interface UploadFileParams {\n    file: File;\n    workers?: number;\n    onProgress?: OnProgress;\n}\n\nconst KB_TO_BYTES = 1024;\nconst LARGE_FILE_THRESHOLD = 10 * 1024 * 1024;\nconst DISCONNECT_SLEEP = 1000;\nconst MAX_CONCURRENT_CONNECTIONS = 3;\nconst MAX_CONCURRENT_CONNECTIONS_PREMIUM = 6;\nconst MAX_WORKERS_PER_CONNECTION = 10;\n\nconst foremans = Array(MAX_CONCURRENT_CONNECTIONS_PREMIUM).fill(undefined)\n    .map(() => new Foreman(MAX_WORKERS_PER_CONNECTION));\n\nexport const getFileId = ()=>{\n    let fileId1 = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    return fileId1.toString()\n        .replace(\"-\", \"\")\n        .replace(\"n\", \"\")\n}\n\nexport async function uploadFileV1(\n    fileParams: UploadFileParams,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n    const { name, size } = file;\n    let fileIdStr = getFileId();\n    const fileId = Number(fileIdStr)\n    fileIdStr = String(fileId)\n    localDb.cache[fileIdStr] = file;\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n    const buf = await fileToBuffer(file)\n    const cipher = Account.localEncrypt(Buffer.from(buf));\n    const body = new DownloadRes({\n        file:{\n            id:fileIdStr,\n            part:0,\n            part_total:1,\n            buf:cipher,\n            size,\n            type:file.type\n        },\n        err:ERR.NO_ERROR\n    }).pack().getPbData()\n\n    const blob = new Blob([Buffer.from(body)]);\n    await cacheApi.save(MEDIA_CACHE_NAME_WAI, fileIdStr, blob);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n\n\nexport async function uploadFileCache(\n    file: FileInfo_Type,\n) {\n    const { buf, id } = file;\n    const size = buf.length\n    const fileIdStr = id;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % MAX_CONCURRENT_CONNECTIONS_PREMIUM;\n        await foremans[senderIndex].requestWorker();\n        const blobSlice = buf.subarray(i * partSize, (i + 1) * partSize);\n        promises.push((async (jMemo: number, blobSliceMemo: Buffer) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                try {\n                    if(CLOUD_MESSAGE_API && Account.getCurrentAccount()?.getSession()){\n                        if(DEBUG){\n                            console.log(\"uploadProfilePhoto\",fileIdStr,jMemo,partCount)\n                        }\n                        const fileInfo = {\n                            id:fileIdStr,\n                            size:file.size,\n                            type:file.type,\n                            part:jMemo+1,\n                            part_total:partCount,\n                            buf:blobSliceMemo\n                        }\n                        const uploadReq = new UploadReq({file:fileInfo})\n                        const body = Buffer.from(uploadReq.pack().getPbData());\n                        await fetch(`${CLOUD_MESSAGE_API}/proto`,{\n                            method: 'POST',\n                            body,\n                            headers:{\n                                Authorization: `Bearer ${Account.getCurrentAccount()?.getSession()}`,\n                            }\n                        })\n                    }\n                } catch (err) {\n                    foremans[senderIndex].releaseWorker();\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n    await Promise.all(promises);\n}\n\n\nexport async function uploadFile(\n    client: TelegramClient,\n    fileParams: UploadFileParams,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n\n    const isPremium = Boolean(client.isPremium);\n\n    const { name, size } = file;\n    const fileId = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    // Pick the least busy foreman\n    // For some reason, fresh connections give out a higher speed for the first couple of seconds\n    // I have no idea why, but this may speed up the download of small files\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % (\n            isPremium ? MAX_CONCURRENT_CONNECTIONS_PREMIUM : MAX_CONCURRENT_CONNECTIONS\n        );\n\n        await foremans[senderIndex].requestWorker();\n\n        if (onProgress?.isCanceled) {\n            foremans[senderIndex].releaseWorker();\n            break;\n        }\n\n        const blobSlice = file.slice(i * partSize, (i + 1) * partSize);\n        // eslint-disable-next-line no-loop-func, @typescript-eslint/no-loop-func\n        promises.push((async (jMemo: number, blobSliceMemo: Blob) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                let sender;\n                try {\n                    // We always upload from the DC we are in\n                    sender = await client.getSender(client.session.dcId, senderIndex, isPremium);\n                    const partBytes = await blobSliceMemo.arrayBuffer();\n                    await sender.send(\n                        isLarge\n                            ? new Api.upload.SaveBigFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                fileTotalParts: partCount,\n                                bytes: Buffer.from(partBytes),\n                            })\n                            : new Api.upload.SaveFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                bytes: Buffer.from(partBytes),\n                            }),\n                    );\n                } catch (err) {\n                    if (sender && !sender.isConnected()) {\n                        await sleep(DISCONNECT_SLEEP);\n                        continue;\n                    } else if (err instanceof errors.FloodWaitError) {\n                        await sleep(err.seconds * 1000);\n                        continue;\n                    }\n                    foremans[senderIndex].releaseWorker();\n\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n\n                if (onProgress) {\n                    if (onProgress.isCanceled) {\n                        throw new Error('USER_CANCELED');\n                    }\n\n                    progress += (1 / partCount);\n                    onProgress(progress);\n                }\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n\n    await Promise.all(promises);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n","import MsgDispatcher from \"./MsgDispatcher\";\nimport {ApiBotInfo, ApiKeyboardButtons, ApiMessage} from \"../../api/types\";\nimport {UserIdChatGpt, UserIdCnPrompt, UserIdEnPrompt, UserIdFirstBot} from \"../setting\";\nimport {GlobalState} from \"../../global/types\";\nimport {showModalFromEvent} from \"../share/utils/modal\";\nimport {getActions, getGlobal, setGlobal} from \"../../global\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {DEBUG} from \"../../config\";\nimport {selectChatMessage} from \"../../global/selectors\";\n\nexport default class MsgCommandChatLab{\n  private chatId: string;\n  private botInfo: ApiBotInfo;\n  constructor(chatId:string,botInfo:ApiBotInfo) {\n    this.chatId = chatId\n    this.botInfo = botInfo;\n  }\n  static getInlineButtonsDemo():ApiKeyboardButtons{\n    return [\n\n      [\n        {\n          text:\"command button\",\n          type:'command'\n        },\n        {\n          text:\"unsupported button\",\n          type:'unsupported'\n        },\n        {\n          text:\"buy button\",\n          type:'buy'\n        }\n      ],\n      [\n        {\n          text:\"game button\",\n          type:'game'\n        },\n        {\n          text:\"requestPhone button\",\n          type:'requestPhone'\n        }\n      ],\n      [\n        {\n          text:\"receipt button\",\n          type:'receipt',\n          receiptMessageId:1\n        },\n      ],\n      [\n        {\n          text:\"url button\",\n          type:'url',\n          url:\"http://www.ai.com\"\n        },\n      ],\n      [\n        {\n          text:\"simpleWebView button\",\n          type:'simpleWebView',\n          url:\"http://www.ai.com\"\n        },\n        {\n          text:\"webView button\",\n          type:'webView',\n          url:\"http://www.ai.com\"\n        },\n      ],\n      [\n        {\n          text:\"requestPoll button\",\n          type:'requestPoll',\n          isQuiz:true\n        },\n        {\n          text:\"switchBotInline button\",\n          type:'switchBotInline',\n          query: \"\",\n          isSamePeer: false\n        },\n        {\n          text:\"userProfile button\",\n          type:'userProfile',\n          userId: UserIdFirstBot,\n        },\n      ],\n      [\n        {\n          text:\"requestUploadImage button\",\n          type:'requestUploadImage',\n        },\n      ]\n    ]\n  }\n  static async createChat(botId:string,data:string,msgId:number){\n    const t = data.split(\"/\")\n    const chatId = t[0]\n    const title = t[3]\n    const message = selectChatMessage(getGlobal(),chatId,msgId)\n    if(message){\n      const prompt = message.content.text!.text\n      getActions().createChat({title,promptInit:prompt})\n    }\n  }\n  static async createChatGpt(id:string,name:string = \"ChatGpt\"){\n    let needCreate = true;\n    let global = getGlobal();\n    if(global.chats.byId[id]){\n      const chat = global.chats.byId[id];\n      if(chat.isNotJoined){\n        delete global.chats.byId[id]\n        delete global.users.byId[id]\n        setGlobal(global)\n      }else{\n        needCreate = false\n      }\n    }\n    if(!needCreate){\n      getActions().openChat({id,shouldReplaceHistory:true})\n      return\n    }\n    getActions().createChat({id,title:name})\n  }\n  static async createPromptChat(chatId:string,id:string){\n    let name: string;\n    const prompts = require('./prompts.json')\n    let tag: string;\n    if(id === UserIdEnPrompt){\n      name = \"英文Prompt大全\"\n      tag = 'en'\n    }else{\n      name = \"中文Prompt大全\"\n      tag = 'cn'\n    }\n    let needCreate = true;\n    let global = getGlobal();\n    if(global.chats.byId[id]){\n      const chat = global.chats.byId[id];\n      if(chat.isNotJoined){\n        delete global.chats.byId[id]\n        delete global.users.byId[id]\n        setGlobal(global)\n      }else{\n        needCreate = false\n      }\n    }\n    if(!needCreate){\n      getActions().openChat({id,shouldReplaceHistory:true})\n      return MsgDispatcher.showNotification(`${name} 已创建`)\n    }\n    const promptRows = prompts[tag]\n    getActions().createChat({id,title:name})\n    const msg0 = await MsgDispatcher.newTextMessage(chatId,undefined,\"正在创建 \"+name+\"...\")\n    setTimeout(async ()=>{\n      promptRows.reverse();\n      for (let i = 0; i < promptRows.length; i++) {\n        const desc = promptRows[i][1]\n        const title = promptRows[i][0]\n        if(desc){\n          await MsgDispatcher.newTextMessage(id,undefined,desc,[\n            [\n              {\n                text:\"创建Gpt聊天\",\n                type:\"callback\",\n                data:`${id}/createChat/${tag}/${title}`\n              }\n            ]\n          ])\n          await MsgDispatcher.updateMessage(chatId,msg0.id,{\n            ...msg0,\n            content:{\n              text:{\n                text:`正在创建 ${name}... ${i+1}/${promptRows.length}`\n              }\n            }\n          })\n        }\n\n      }\n    },500)\n  }\n  static async answerCallbackButton(global:GlobalState,chatId:string,messageId:number,data:string){\n\n    if(data.startsWith(`${chatId}/createChat/cn`)){\n      await MsgCommandChatLab.createChat(UserIdCnPrompt,data,messageId)\n      return\n    }\n    if(data.startsWith(`${chatId}/createChat/en`)){\n      await MsgCommandChatLab.createChat(UserIdEnPrompt,data,messageId)\n      return\n    }\n    switch (data){\n      case `${chatId}/lab/createChatGpt`:\n        await MsgCommandChatLab.createChatGpt(UserIdChatGpt)\n        break\n      case `${chatId}/lab/createEnPrompt`:\n        await MsgCommandChatLab.createPromptChat(chatId,UserIdEnPrompt)\n        break\n      case `${chatId}/lab/createCnPrompt`:\n        await MsgCommandChatLab.createPromptChat(chatId,UserIdCnPrompt)\n        break\n      case `${chatId}/lab/InlineButs`:\n        await MsgDispatcher.newTextMessage(chatId,undefined,\"\",MsgCommandChatLab.getInlineButtonsDemo())\n        break\n\n      case `${chatId}/lab/dumpUsers`:\n        if(DEBUG){\n          await MsgDispatcher.newCodeMessage(chatId,undefined,JSON.stringify(global.messages.byChatId[chatId],null,2))\n        }\n        break\n      case `${chatId}/lab/testMsg`:\n        const {value} = await showModalFromEvent({\n          title: \"输入JSON 格式的 msg\", type: \"singleInput\"\n        })\n        try {\n          if(value){\n            const testMsg = async (value:string)=>{\n              const message:ApiMessage = JSON.parse(value);\n              message.chatId = chatId;\n              message.id = await MsgDispatcher.genMsgId();\n              message.isOutgoing = false\n              message.senderId = chatId\n              message.date = currentTs()\n              await MsgDispatcher.newMessage(chatId,message.id,message)\n            }\n            await testMsg(value);\n          }\n        }catch (e){\n          getActions().showNotification({\n            message:\"解析失败\"\n          })\n        }\n        break\n    }\n  }\n  async lab(){\n    const messageId = await MsgDispatcher.genMsgId();\n    return await MsgDispatcher.newTextMessage(this.chatId,messageId,\"实验室\",[\n      [\n        {\n          data:`${this.chatId}/lab/createChatGpt`,\n          text:\"创建ChatGpt机器人\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${this.chatId}/lab/createCnPrompt`,\n          text:\"中文Prompt大全\",\n          type:\"callback\"\n        },\n      ],\n      [\n        {\n          data:`${this.chatId}/lab/createEnPrompt`,\n          text:\"英文Prompt大全\",\n          type:\"callback\"\n        },\n      ],\n      // [\n      //   {\n      //     data:`${this.chatId}/lab/dumpUsers`,\n      //     text:\"DumpUsers\",\n      //     type:\"callback\"\n      //   },\n      // ],\n      // [\n      //   {\n      //     data:`${this.chatId}/lab/InlineButs`,\n      //     text:\"InlineButs Demo\",\n      //     type:\"callback\"\n      //   },\n      // ],\n        // [\n        //   {\n        //     data:`${this.chatId}/temp/PromptDemo`,\n        //     text:\"PromptDemo\",\n        //     type:\"callback\"\n        //   },\n        // ],\n    ])\n  }\n\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getActions, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiChat, ApiChatFolder, ApiChatMember, ApiError, ApiUser, ApiUserStatus,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport {ChatCreationProgress, ManagementProgress, NewChatMembersProgress} from '../../../types';\nimport type {ActionReturnType, GlobalState, TabArgs,} from '../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  DEBUG,\n  MEDIA_CACHE_NAME_WAI,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  deleteTopic,\n  leaveChat,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatListType,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport {buildCollectionByKey, omit} from '../../../util/iteratees';\nimport {debounce, pause, throttle} from '../../../util/schedulers';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport {formatShareText, parseChooseParameter, processDeepLink} from '../../../util/deeplink';\nimport {updateGroupCall} from '../../reducers/calls';\nimport {selectGroupCall} from '../../selectors/calls';\nimport {getOrderedIds} from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport {selectCurrentLimit} from '../../selectors/limits';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport {\n  ChatModelConfig,\n  DEFAULT_AVATARS,\n  DEFAULT_BOT_COMMANDS,\n  DEFAULT_CHATGPT_AI_COMMANDS,\n  DEFAULT_CREATE_USER_BIO,\n  DEFAULT_PROMPT,\n  LoadAllChats,\n  UserIdChatGpt,\n  UserIdChatGpt4,\n  UserIdFirstBot\n} from \"../../../worker/setting\";\nimport * as cacheApi from '../../../util/cacheApi';\nimport {blobToDataUri, fetchBlob} from \"../../../util/files\";\nimport {DownloadRes} from \"../../../lib/ptp/protobuf/PTPFile\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {getFileId} from \"../../../lib/gramjs/client/uploadFile\";\nimport ChatMsg from \"../../../worker/msg/ChatMsg\";\n\nimport {resizeImage} from '../../../util/imageResize';\nimport MsgCommandChatLab from \"../../../worker/msg/MsgCommandChatLab\";\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID,\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    //todo\n    // actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({ id, threadId: result.topMessageId, tabId });\n    } else {\n      actions.openChat({ id, threadId: topMessageId, tabId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  if(listType === \"archived\"){\n    return;\n  }\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n      return;\n    }\n\n    global = getGlobal();\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n    await loadChats(global,\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (global): ActionReturnType => {\n  runThrottledForLoadTopChats(() => loadChats(global, 'active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\nconst getAvatarPhoto = async (id:string,url:string)=>{\n  const res = await fetch(url)\n  const ab = await res.arrayBuffer()\n  const type = \"image/\"+url.split(\".\")[url.split(\".\").length - 1]\n  const body = new DownloadRes({\n    file:{\n      id,\n      part:0,\n      part_total:1,\n      buf:Buffer.from(ab),\n      size:Buffer.from(ab).length,\n      type\n    },\n    err:ERR.NO_ERROR\n  }).pack().getPbData()\n  const blob = new Blob([Buffer.from(body)],{type});\n  const blob1= new Blob([Buffer.from(ab)],{type});\n\n  const quality = 0.1;\n  const thumbUrl = await resizeImage(blob1, 40,40, 'image/jpeg',quality);\n  const thumbBlob = await fetchBlob(thumbUrl)\n  const dataUri = await blobToDataUri(thumbBlob);\n  const size = {\n    \"width\": 640,\n    \"height\":  640,\n  }\n\n  await cacheApi.save(MEDIA_CACHE_NAME_WAI, id, blob);\n\n  return {\n    id:id,\n    thumbnail:{\n      dataUri,\n      ...size\n    },\n    \"sizes\": [\n      {\n        width: 160,\n        height: 160,\n        type: 's',\n      },\n      {\n        width: 320,\n        height: 320,\n        type: 'm',\n      },\n      {\n        width: 640,\n        height: 640,\n        type: 'x',\n      },\n    ],\n  }\n}\naddActionHandler('createChat', async (global, actions, payload)=> {\n  const {\n    title, id,promptInit,about, tabId = getCurrentTabId(),\n  } = payload;\n\n  let userIds = Object.keys(global.users.byId)\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try{\n    let userId: string;\n    let userIdInt = parseInt(UserIdFirstBot)\n    if(!id){\n      if(userIds.length > 0){\n        userIds = [...userIds,...global.chatIdsDeleted]\n        userIds.sort((a,b)=>parseInt(b) - parseInt(a))\n        userIdInt = parseInt(userIds[0]) + 1\n      }\n      if(userIdInt < 100000){\n        userIdInt = 100000\n      }\n      userId = userIdInt.toString()\n    }else{\n      userId = id\n    }\n\n    const init_system_content = promptInit || DEFAULT_PROMPT\n    let avatarHash = \"\";\n    let photos = []\n    if(DEFAULT_AVATARS[userId]){\n      avatarHash = getFileId();\n      const avatarUrl = DEFAULT_AVATARS[userId]\n      const photo = await getAvatarPhoto(avatarHash,avatarUrl);\n      photos.push(photo)\n    }\n    const user = {\n      \"canBeInvitedToGroup\": false,\n      \"hasVideoAvatar\": false,\n      \"type\": \"userTypeBot\",\n      id:userId,\n      \"phoneNumber\": \"\",\n      isMin:false,\n      \"noStatus\": true,\n      isSelf:false,\n      avatarHash,\n      accessHash:\"\",\n      isPremium: false,\n      firstName: title,\n      photos,\n      usernames: [\n        {\n          \"username\": \"Bot_\"+userId,\n          \"isActive\": true,\n          \"isEditable\": true\n        }\n      ],\n      fullInfo: {\n        \"isBlocked\": false,\n        \"noVoiceMessages\": false,\n        bio: about || DEFAULT_CREATE_USER_BIO,\n        botInfo: {\n          aiBot:{\n            enableAi:true,\n            chatGptConfig:{\n              init_system_content,\n              api_key:\"\",\n              max_history_length:0,\n              modelConfig:{\n                ...ChatModelConfig,\n                ...(userId === UserIdChatGpt4 ? {model:\"gpt-4\"} : {})\n              }\n            }\n          },\n          botId: userId,\n          \"description\": about || DEFAULT_CREATE_USER_BIO,\n          \"menuButton\": {\n            \"type\": \"commands\"\n          },\n          commands:[...DEFAULT_BOT_COMMANDS,...DEFAULT_CHATGPT_AI_COMMANDS].map(cmd=>{\n            // @ts-ignore\n            cmd.botId = userId;\n            return cmd\n          })\n        }\n      }\n    }\n    global = getGlobal()\n    const {chatFolders} = global;\n    // @ts-ignore\n    const users:ApiUser[] = [user]\n\n    // @ts-ignore\n    const chats:ApiChat[] = [ChatMsg.buildDefaultChat(user)]\n\n    let activeChatFolder = window.sessionStorage.getItem(\"activeChatFolder\")\n    let activeChatFolderRow;\n    const chatFolderById:Record<string, ApiChatFolder> = {};\n    if(activeChatFolder){\n      Object.values(chatFolders.byId).forEach((row:ApiChatFolder)=>{\n        if(chatFolders.orderedIds![parseInt(activeChatFolder!)]){\n          const activeFolderId = chatFolders.orderedIds![parseInt(activeChatFolder!)]\n          if(row.id === activeFolderId){\n\n            if(!row.includedChatIds){\n              row.includedChatIds = []\n            }\n            row.includedChatIds.push(userId)\n            chatFolderById[row.id] = row;\n            activeChatFolderRow = row;\n          }\n        }\n      })\n    }\n\n    const userStatusesById:Record<string,ApiUserStatus> = {\n      [user.id] : {\n        \"type\": \"userStatusEmpty\"\n      }\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n    global = updateChatListIds(global, \"active\", chats.map(chat=>chat.id));\n    global = addUserStatuses(global, userStatusesById);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: ChatCreationProgress.Complete,\n      },\n    }, tabId);\n\n    setGlobal({\n      ...global,\n      chatFolders:{\n        ...global.chatFolders,\n        byId:{\n          ...global.chatFolders.byId,\n          ...chatFolderById\n        }\n\n      }\n    })\n\n    if(activeChatFolderRow){\n      actions.editChatFolder({ id: activeChatFolderRow.id, folderUpdate: activeChatFolderRow });\n    }\n    if(promptInit || (id === UserIdChatGpt)){\n      actions.sendBotCommand({chatId:userId,command:\"/systemPrompt\",tabId})\n    }\n    actions.openChat({id: userId,shouldReplaceHistory: true,});\n  }catch (e){\n    console.error(e)\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: ChatCreationProgress.Error,\n        error: '创建失败',\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n})\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n  // @ts-ignore\n  actions.setActiveChatFolder({activeChatFolder:0},getCurrentTabId())\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n  window.sessionStorage.setItem(\"activeChatFolder\",activeChatFolder.toString())\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleForum', { chat, isEnabled });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = chat.fullInfo?.areParticipantsHidden;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      areParticipantsHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      fullInfo: {\n        ...chat.fullInfo,\n        areParticipantsHidden: prevIsEnabled,\n      },\n    });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\n\nconst initChats = (firstLoad?:boolean)=>{\n\n  setTimeout(async ()=>{\n    if(firstLoad){\n      getActions().sendBotCommand({chatId:UserIdFirstBot,command:\"/start\"})\n    }\n    const global = getGlobal();\n    if(!global.users.byId[UserIdChatGpt]){\n      await MsgCommandChatLab.createChatGpt(UserIdChatGpt)\n    }\n  },500)\n}\n\nexport async function loadChats<T extends GlobalState>(\n  global: T,\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  let firstLoad = false;\n  global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  try {\n    let result: { folderIds?: number[],chatFolders?: any[]; users?: any; userStatusesById?: any; chats?: any; chatIds?: any; draftsById?: any; replyingToById?: any; orderedPinnedIds?: string[] | never[] | undefined; totalChatCount?: number; };\n    if(!global.users.byId[UserIdFirstBot]) {\n      firstLoad = true;\n\n      result = LoadAllChats;\n      for (let i = 0; i < result.users.length; i++) {\n        const user = result.users[i];\n        if(user.id === UserIdFirstBot){\n          if(!user.avatarHash){\n            user.avatarHash = getFileId();\n            const photo = await getAvatarPhoto(user.avatarHash,DEFAULT_AVATARS[user.id])\n            user.photos = [photo]\n            result.users[i] = user\n          }\n        }\n      }\n      for (let i = 0; i < result.chats.length; i++) {\n        const chat = result.chats[i];\n        if (global.messages.byChatId[chat.id]) {\n          const {threadsById, byId} = global.messages.byChatId[chat.id]\n          if (threadsById[-1] && threadsById[-1].lastViewportIds && threadsById[-1].lastViewportIds!.length > 0) {\n            // @ts-ignore\n            result.chats[i].lastMessage = byId[threadsById[-1].lastViewportIds[threadsById[-1].lastViewportIds.length - 1]]\n          }\n        }\n      }\n    }else {\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          isFullyLoaded: {\n            ...global.chats.isFullyLoaded,\n            [listType]: true,\n          },\n        },\n      };\n      setGlobal(global);\n      initChats()\n      return\n    }\n    // result = await callApi('fetchChats', {\n    //   limit: CHAT_LIST_LOAD_SLICE,\n    //   offsetDate,\n    //   archived: listType === 'archived',\n    //   withPinned: shouldReplace,\n    //   lastLocalServiceMessage,\n    // });\n    const userStatusesById = {};\n    result.users.forEach((user: ApiUser)=>{\n\n      // @ts-ignore\n      userStatusesById[user.id] = {\n        \"type\": \"userStatusEmpty\"\n      }\n    })\n    result.userStatusesById = userStatusesById;\n\n    global = getGlobal();\n    result.chatIds = result.chats.map((chat: { id: any; }) => chat.id);\n    const { chatIds } = result;\n    if (chatIds.length > 0 && chatIds[0] === offsetId) {\n      chatIds.shift();\n    }\n    result.totalChatCount = result.chats.length;\n    lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n    const chatFoldersById:any = {};\n    result.chatFolders?.forEach(row=>{\n      chatFoldersById[row.id] = row\n    })\n    const orderedIds = result.chatFolders && result.chatFolders.length > 0 ? result.folderIds: [0];\n\n    global = {\n      ...global,\n      chatFolders:{\n        byId:{\n          ...chatFoldersById\n        },\n        orderedIds\n      }\n    }\n    if (shouldReplace && listType === 'active') {\n      // Always include service notifications chat\n      // if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      //   const result2 = await callApi('fetchChat', {\n      //     type: 'user',\n      //     user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      //   });\n      //\n      //   global = getGlobal();\n      //\n      //   const notificationsChat = result2 && selectChat(global, result2.chatId);\n      //   if (notificationsChat) {\n      //     chatIds.unshift(notificationsChat.id);\n      //     result.chats.unshift(notificationsChat);\n      //     if (lastLocalServiceMessage) {\n      //       notificationsChat.lastMessage = lastLocalServiceMessage;\n      //     }\n      //   }\n      // }\n      const tabStates = Object.values(global.byTabId);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n      global = updateChatListIds(global, listType, chatIds);\n    } else if (shouldReplace && listType === 'archived') {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      const newChats = buildCollectionByKey(result.chats, 'id');\n      if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n        if (notificationsChat && lastLocalServiceMessage) {\n          newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n            ...notificationsChat,\n            lastMessage: lastLocalServiceMessage,\n          };\n        }\n      }\n\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, newChats);\n      global = updateChatListIds(global, listType, chatIds);\n\n    }\n\n    global = updateChatListSecondaryInfo(global, listType, result);\n\n    const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n    idsToUpdateDraft.forEach((chatId) => {\n      const draft = result.draftsById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!draft && !thread) return;\n\n      if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n        global = replaceThreadParam(\n          global, chatId, MAIN_THREAD_ID, 'draft', draft,\n        );\n      }\n    });\n\n    const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n    idsToUpdateReplyingToId.forEach((chatId) => {\n      const replyingToById = result.replyingToById[chatId];\n      const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n      if (!replyingToById && !thread) return;\n\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n      );\n    });\n\n    // if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    //   global = {\n    //     ...global,\n    //     chats: {\n    //       ...global.chats,\n    //       isFullyLoaded: {\n    //         ...global.chats.isFullyLoaded,\n    //         [listType]: true,\n    //       },\n    //     },\n    //   };\n    // }\n\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n\n    setGlobal(global);\n    initChats(firstLoad)\n  }catch (e){\n    console.error(e)\n  }\n\n  // const result = await callApi('fetchChats', {\n  //   limit: CHAT_LIST_LOAD_SLICE,\n  //   offsetDate,\n  //   archived: listType === 'archived',\n  //   withPinned: shouldReplace,\n  //   lastLocalServiceMessage,\n  // });\n  //\n\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","const BigInt = require('big-integer');\nconst crypto = require('./crypto/crypto');\n\n/**\n * converts a buffer to big int\n * @param buffer\n * @param little\n * @param signed\n * @returns {bigInt.BigInteger}\n */\nfunction readBigIntFromBuffer(buffer, little = true, signed = false) {\n    let randBuffer = Buffer.from(buffer);\n    const bytesNumber = randBuffer.length;\n    if (little) {\n        randBuffer = randBuffer.reverse();\n    }\n    let bigInt = BigInt(randBuffer.toString('hex'), 16);\n    if (signed && Math.floor(bigInt.toString('2').length / 8) >= bytesNumber) {\n        bigInt = bigInt.subtract(BigInt(2)\n            .pow(BigInt(bytesNumber * 8)));\n    }\n    return bigInt;\n}\n\n/**\n * Special case signed little ints\n * @param big\n * @param number\n * @returns {Buffer}\n */\nfunction toSignedLittleBuffer(big, number = 8) {\n    const bigNumber = BigInt(big);\n    const byteArray = [];\n    for (let i = 0; i < number; i++) {\n        byteArray[i] = bigNumber.shiftRight(8 * i)\n            .and(255);\n    }\n    return Buffer.from(byteArray);\n}\n\n/**\n * converts a big int to a buffer\n * @param bigInt {bigInt.BigInteger}\n * @param bytesNumber\n * @param little\n * @param signed\n * @returns {Buffer}\n */\nfunction readBufferFromBigInt(bigInt, bytesNumber, little = true, signed = false) {\n    bigInt = BigInt(bigInt);\n    const bitLength = bigInt.bitLength();\n\n    const bytes = Math.ceil(bitLength / 8);\n    if (bytesNumber < bytes) {\n        throw new Error('OverflowError: int too big to convert');\n    }\n    if (!signed && bigInt.lesser(BigInt(0))) {\n        throw new Error('Cannot convert to unsigned');\n    }\n    let below = false;\n    if (bigInt.lesser(BigInt(0))) {\n        below = true;\n        bigInt = bigInt.abs();\n    }\n\n    const hex = bigInt.toString('16')\n        .padStart(bytesNumber * 2, '0');\n    let l = Buffer.from(hex, 'hex');\n    if (little) {\n        l = l.reverse();\n    }\n\n    if (signed && below) {\n        if (little) {\n            let reminder = false;\n            if (l[0] !== 0) {\n                l[0] -= 1;\n            }\n            for (let i = 0; i < l.length; i++) {\n                if (l[i] === 0) {\n                    reminder = true;\n                    continue;\n                }\n                if (reminder) {\n                    l[i] -= 1;\n                    reminder = false;\n                }\n                l[i] = 255 - l[i];\n            }\n        } else {\n            l[l.length - 1] = 256 - l[l.length - 1];\n            for (let i = 0; i < l.length - 1; i++) {\n                l[i] = 255 - l[i];\n            }\n        }\n    }\n    return l;\n}\n\n/**\n * Generates a random long integer (8 bytes), which is optionally signed\n * @returns {BigInteger}\n */\nfunction generateRandomLong(signed = true) {\n    return readBigIntFromBuffer(generateRandomBytes(8), true, signed);\n}\n\n/**\n * .... really javascript\n * @param n {number}\n * @param m {number}\n * @returns {number}\n */\nfunction mod(n, m) {\n    return ((n % m) + m) % m;\n}\n\n/**\n * returns a positive bigInt\n * @param n {BigInt}\n * @param m {BigInt}\n * @returns {BigInt}\n */\nfunction bigIntMod(n, m) {\n    return ((n.remainder(m)).add(m)).remainder(m);\n}\n\n/**\n * Generates a random bytes array\n * @param count\n * @returns {Buffer}\n */\nfunction generateRandomBytes(count) {\n    return Buffer.from(crypto.randomBytes(count));\n}\n\n/**\n * Calculate the key based on Telegram guidelines, specifying whether it's the client or not\n * @param sharedKey\n * @param msgKey\n * @param client\n * @returns {{iv: Buffer, key: Buffer}}\n */\n\n/* CONTEST\nthis is mtproto 1 (mostly used for secret chats)\nasync function calcKey(sharedKey, msgKey, client) {\n    const x = client === true ? 0 : 8\n    const [sha1a, sha1b, sha1c, sha1d] = await Promise.all([\n        sha1(Buffer.concat([msgKey, sharedKey.slice(x, x + 32)])),\n        sha1(Buffer.concat([sharedKey.slice(x + 32, x + 48), msgKey, sharedKey.slice(x + 48, x + 64)])),\n        sha1(Buffer.concat([sharedKey.slice(x + 64, x + 96), msgKey])),\n        sha1(Buffer.concat([msgKey, sharedKey.slice(x + 96, x + 128)]))\n    ])\n    const key = Buffer.concat([sha1a.slice(0, 8), sha1b.slice(8, 20), sha1c.slice(4, 16)])\n    const iv = Buffer.concat([sha1a.slice(8, 20), sha1b.slice(0, 8), sha1c.slice(16, 20), sha1d.slice(0, 8)])\n    return {\n        key,\n        iv\n    }\n}\n\n */\n\n/**\n * Generates the key data corresponding to the given nonces\n * @param serverNonce\n * @param newNonce\n * @returns {{key: Buffer, iv: Buffer}}\n */\nasync function generateKeyDataFromNonce(serverNonce, newNonce) {\n    serverNonce = toSignedLittleBuffer(serverNonce, 16);\n    newNonce = toSignedLittleBuffer(newNonce, 32);\n    const [hash1, hash2, hash3] = await Promise.all([\n        sha1(Buffer.concat([newNonce, serverNonce])),\n        sha1(Buffer.concat([serverNonce, newNonce])),\n        sha1(Buffer.concat([newNonce, newNonce])),\n    ]);\n    const keyBuffer = Buffer.concat([hash1, hash2.slice(0, 12)]);\n    const ivBuffer = Buffer.concat([hash2.slice(12, 20), hash3, newNonce.slice(0, 4)]);\n    return {\n        key: keyBuffer,\n        iv: ivBuffer,\n    };\n}\n\nfunction convertToLittle(buf) {\n    const correct = Buffer.alloc(buf.length * 4);\n\n    for (let i = 0; i < buf.length; i++) {\n        correct.writeUInt32BE(buf[i], i * 4);\n    }\n    return correct;\n}\n\n/**\n * Calculates the SHA1 digest for the given data\n * @param data\n * @returns {Promise}\n */\nfunction sha1(data) {\n    const shaSum = crypto.createHash('sha1');\n    shaSum.update(data);\n    return shaSum.digest();\n}\n\n/**\n * Calculates the SHA256 digest for the given data\n * @param data\n * @returns {Promise}\n */\nfunction sha256(data) {\n    const shaSum = crypto.createHash('sha256');\n    shaSum.update(data);\n    return shaSum.digest();\n}\n\n/**\n * Fast mod pow for RSA calculation. a^b % n\n * @param a\n * @param b\n * @param n\n * @returns {bigInt.BigInteger}\n */\nfunction modExp(a, b, n) {\n    a = a.remainder(n);\n    let result = BigInt.one;\n    let x = a;\n    while (b.greater(BigInt.zero)) {\n        const leastSignificantBit = b.remainder(BigInt(2));\n        b = b.divide(BigInt(2));\n        if (leastSignificantBit.eq(BigInt.one)) {\n            result = result.multiply(x);\n            result = result.remainder(n);\n        }\n        x = x.multiply(x);\n        x = x.remainder(n);\n    }\n    return result;\n}\n\n/**\n * Gets the arbitrary-length byte array corresponding to the given integer\n * @param integer {any}\n * @param signed {boolean}\n * @returns {Buffer}\n */\nfunction getByteArray(integer, signed = false) {\n    const bits = integer.toString(2).length;\n    const byteLength = Math.floor((bits + 8 - 1) / 8);\n    return readBufferFromBigInt(BigInt(integer), byteLength, false, signed);\n}\n\n/**\n * returns a random int from min (inclusive) and max (inclusive)\n * @param min\n * @param max\n * @returns {number}\n */\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Sleeps a specified amount of time\n * @param ms time in milliseconds\n * @returns {Promise}\n */\nconst sleep = (ms) => new Promise((resolve) => {\n    setTimeout(resolve, ms);\n});\n\n/**\n * Helper to export two buffers of same length\n * @returns {Buffer}\n */\n\nfunction bufferXor(a, b) {\n    const res = [];\n    for (let i = 0; i < a.length; i++) {\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res);\n}\n\n/**\n * Checks if the obj is an array\n * @param obj\n * @returns {boolean}\n */\n/*\nCONTEST\nwe do'nt support array requests anyway\nfunction isArrayLike(obj) {\n    if (!obj) return false\n    const l = obj.length\n    if (typeof l != 'number' || l < 0) return false\n    if (Math.floor(l) !== l) return false\n    // fast check\n    if (l > 0 && !(l - 1 in obj)) return false\n    // more complete check (optional)\n    for (let i = 0; i < l; ++i) {\n        if (!(i in obj)) return false\n    }\n    return true\n}\n*/\n\n// Taken from https://stackoverflow.com/questions/18638900/javascript-crc32/18639999#18639999\nfunction makeCRCTable() {\n    let c;\n    const crcTable = [];\n    for (let n = 0; n < 256; n++) {\n        c = n;\n        for (let k = 0; k < 8; k++) {\n            c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n        }\n        crcTable[n] = c;\n    }\n    return crcTable;\n}\n\nlet crcTable;\n\nfunction crc32(buf) {\n    if (!crcTable) {\n        crcTable = makeCRCTable();\n    }\n    if (!Buffer.isBuffer(buf)) {\n        buf = Buffer.from(buf);\n    }\n    let crc = -1;\n\n    for (let index = 0; index < buf.length; index++) {\n        const byte = buf[index];\n        crc = crcTable[(crc ^ byte) & 0xff] ^ (crc >>> 8);\n    }\n    return (crc ^ (-1)) >>> 0;\n}\n\nmodule.exports = {\n    readBigIntFromBuffer,\n    readBufferFromBigInt,\n    generateRandomLong,\n    mod,\n    crc32,\n    generateRandomBytes,\n    // calcKey,\n    generateKeyDataFromNonce,\n    sha1,\n    sha256,\n    bigIntMod,\n    modExp,\n    getRandomInt,\n    sleep,\n    getByteArray,\n    // isArrayLike,\n    toSignedLittleBuffer,\n    convertToLittle,\n    bufferXor,\n};\n","/**\n * Converts a Telegram's RPC Error to a Python error.\n * @param rpcError the RPCError instance\n * @param request the request that caused this error\n * @constructor the RPCError as a Python exception that represents this error\n */\nconst { RPCError } = require('./RPCBaseErrors');\nconst { rpcErrorRe } = require('./RPCErrorList');\n\nfunction RPCMessageToError(rpcError, request) {\n    for (const [msgRegex, Cls] of rpcErrorRe) {\n        const m = rpcError.errorMessage.match(msgRegex);\n        if (m) {\n            const capture = m.length === 2 ? parseInt(m[1], 10) : undefined;\n            return new Cls({\n                request,\n                capture,\n            });\n        }\n    }\n\n    return new RPCError(rpcError.errorMessage, request);\n}\n\nconst Common = require('./Common');\nconst RPCBaseErrors = require('./RPCBaseErrors');\nconst RPCErrorList = require('./RPCErrorList');\n\nmodule.exports = {\n    RPCMessageToError,\n    ...Common,\n    ...RPCBaseErrors,\n    ...RPCErrorList,\n};\n","const {\n    parseTl,\n    serializeBytes,\n    serializeDate,\n} = require('./generationHelpers');\nconst {\n    toSignedLittleBuffer,\n} = require('../Helpers');\n\nconst tlContent = require('./apiTl');\nconst schemeContent = require('./schemaTl');\n\n/* CONTEST\nconst NAMED_AUTO_CASTS = new Set([\n    'chatId,int'\n])\nconst NAMED_BLACKLIST = new Set([\n    'discardEncryption'\n])\nconst AUTO_CASTS = new Set([\n    'InputPeer',\n    'InputChannel',\n    'InputUser',\n    'InputDialogPeer',\n    'InputNotifyPeer',\n    'InputMedia',\n    'InputPhoto',\n    'InputMessage',\n    'InputDocument',\n    'InputChatPhoto'\n])\n\n */\n// eslint-disable-next-line no-restricted-globals\nconst CACHING_SUPPORTED = typeof self !== 'undefined' && self.localStorage !== undefined;\n\nconst CACHE_KEY = 'GramJs:apiCache';\n\nfunction buildApiFromTlSchema() {\n    let definitions;\n    const fromCache = CACHING_SUPPORTED && loadFromCache();\n\n    if (fromCache) {\n        definitions = fromCache;\n    } else {\n        definitions = loadFromTlSchemas();\n\n        if (CACHING_SUPPORTED) {\n            localStorage.setItem(CACHE_KEY, JSON.stringify(definitions));\n        }\n    }\n\n    return mergeWithNamespaces(\n        createClasses('constructor', definitions.constructors),\n        createClasses('request', definitions.requests),\n    );\n}\n\nfunction loadFromCache() {\n    const jsonCache = localStorage.getItem(CACHE_KEY);\n    return jsonCache && JSON.parse(jsonCache);\n}\n\nfunction loadFromTlSchemas() {\n    const [constructorParamsApi, functionParamsApi] = extractParams(tlContent);\n    const [constructorParamsSchema, functionParamsSchema] = extractParams(schemeContent);\n    const constructors = [].concat(constructorParamsApi, constructorParamsSchema);\n    const requests = [].concat(functionParamsApi, functionParamsSchema);\n\n    return {\n        constructors,\n        requests,\n    };\n}\n\nfunction mergeWithNamespaces(obj1, obj2) {\n    const result = { ...obj1 };\n\n    Object.keys(obj2)\n        .forEach((key) => {\n            if (typeof obj2[key] === 'function' || !result[key]) {\n                result[key] = obj2[key];\n            } else {\n                Object.assign(result[key], obj2[key]);\n            }\n        });\n\n    return result;\n}\n\nfunction extractParams(fileContent) {\n    const f = parseTl(fileContent);\n    const constructors = [];\n    const functions = [];\n    for (const d of f) {\n        if (d.isFunction) {\n            functions.push(d);\n        } else {\n            constructors.push(d);\n        }\n    }\n    return [constructors, functions];\n}\n\nfunction argToBytes(x, type) {\n    switch (type) {\n        case 'int': {\n            const i = Buffer.alloc(4);\n            i.writeInt32LE(x, 0);\n            return i;\n        }\n        case 'long':\n            return toSignedLittleBuffer(x, 8);\n        case 'int128':\n            return toSignedLittleBuffer(x, 16);\n        case 'int256':\n            return toSignedLittleBuffer(x, 32);\n        case 'double': {\n            const d = Buffer.alloc(8);\n            d.writeDoubleLE(x, 0);\n            return d;\n        }\n        case 'string':\n            return serializeBytes(x);\n        case 'Bool':\n            return x ? Buffer.from('b5757299', 'hex') : Buffer.from('379779bc', 'hex');\n        case 'true':\n            return Buffer.alloc(0);\n        case 'bytes':\n            return serializeBytes(x);\n        case 'date':\n            return serializeDate(x);\n        default:\n            return x.getBytes();\n    }\n}\n\n/*\nCONTEST\nasync function getInputFromResolve(utils, client, peer, peerType) {\n    switch (peerType) {\n        case 'InputPeer':\n            return utils.getInputPeer(await client.getInputEntity(peer))\n        case 'InputChannel':\n            return utils.getInputChannel(await client.getInputEntity(peer))\n        case 'InputUser':\n            return utils.getInputUser(await client.getInputEntity(peer))\n        case 'InputDialogPeer':\n            return await client._getInputDialog(peer)\n        case 'InputNotifyPeer':\n            return await client._getInputNotify(peer)\n        case 'InputMedia':\n            return utils.getInputMedia(peer)\n        case 'InputPhoto':\n            return utils.getInputPhoto(peer)\n        case 'InputMessage':\n            return utils.getInputMessage(peer)\n        case 'InputDocument':\n            return utils.getInputDocument(peer)\n        case 'InputChatPhoto':\n            return utils.getInputChatPhoto(peer)\n        case 'chatId,int' :\n            return await client.getPeerId(peer, false)\n        default:\n            throw new Error('unsupported peer type : ' + peerType)\n    }\n}\n*/\nfunction getArgFromReader(reader, arg) {\n    if (arg.isVector) {\n        if (arg.useVectorId) {\n            reader.readInt();\n        }\n        const temp = [];\n        const len = reader.readInt();\n        arg.isVector = false;\n        for (let i = 0; i < len; i++) {\n            temp.push(getArgFromReader(reader, arg));\n        }\n        arg.isVector = true;\n        return temp;\n    } else if (arg.flagIndicator) {\n        return reader.readInt();\n    } else {\n        switch (arg.type) {\n            case 'int':\n                return reader.readInt();\n            case 'long':\n                return reader.readLong();\n            case 'int128':\n                return reader.readLargeInt(128);\n            case 'int256':\n                return reader.readLargeInt(256);\n            case 'double':\n                return reader.readDouble();\n            case 'string':\n                return reader.tgReadString();\n            case 'Bool':\n                return reader.tgReadBool();\n            case 'true':\n                return true;\n            case 'bytes':\n                return reader.tgReadBytes();\n            case 'date':\n                return reader.tgReadDate();\n            default:\n                if (!arg.skipConstructorId) {\n                    return reader.tgReadObject();\n                } else {\n                    throw new Error(`Unknown type ${arg}`);\n                }\n        }\n    }\n}\n\nfunction createClasses(classesType, params) {\n    const classes = {};\n    for (const classParams of params) {\n        const {\n            name,\n            constructorId,\n            subclassOfId,\n            argsConfig,\n            namespace,\n            result,\n        } = classParams;\n        const fullName = [namespace, name].join('.')\n            .replace(/^\\./, '');\n\n        class VirtualClass {\n            static CONSTRUCTOR_ID = constructorId;\n\n            static SUBCLASS_OF_ID = subclassOfId;\n\n            static className = fullName;\n\n            static classType = classesType;\n\n            CONSTRUCTOR_ID = constructorId;\n\n            SUBCLASS_OF_ID = subclassOfId;\n\n            className = fullName;\n\n            classType = classesType;\n\n            constructor(args) {\n                args = args || {};\n                Object.keys(args)\n                    .forEach((argName) => {\n                        this[argName] = args[argName];\n                    });\n            }\n\n            static fromReader(reader) {\n                const args = {};\n\n                for (const argName in argsConfig) {\n                    if (argsConfig.hasOwnProperty(argName)) {\n                        const arg = argsConfig[argName];\n                        if (arg.isFlag) {\n                            const flagGroupSuffix = arg.flagGroup > 1 ? arg.flagGroup : '';\n                            const flagValue = args[`flags${flagGroupSuffix}`] & (1 << arg.flagIndex);\n                            if (arg.type === 'true') {\n                                args[argName] = Boolean(flagValue);\n                                continue;\n                            }\n\n                            args[argName] = flagValue ? getArgFromReader(reader, arg) : undefined;\n                        } else {\n                            args[argName] = getArgFromReader(reader, arg);\n                        }\n                    }\n                }\n                return new VirtualClass(args);\n            }\n\n            getBytes() {\n                // The next is pseudo-code:\n                const idForBytes = this.CONSTRUCTOR_ID;\n                const c = Buffer.alloc(4);\n                c.writeUInt32LE(idForBytes, 0);\n                const buffers = [c];\n                for (const arg in argsConfig) {\n                    if (argsConfig.hasOwnProperty(arg)) {\n                        if (argsConfig[arg].isFlag) {\n                            if ((this[arg] === false && argsConfig[arg].type === 'true')\n                                || this[arg] === undefined) {\n                                continue;\n                            }\n                        }\n                        if (argsConfig[arg].isVector) {\n                            if (argsConfig[arg].useVectorId) {\n                                buffers.push(Buffer.from('15c4b51c', 'hex'));\n                            }\n                            const l = Buffer.alloc(4);\n                            l.writeInt32LE(this[arg].length, 0);\n                            buffers.push(l, Buffer.concat(this[arg].map((x) => argToBytes(x, argsConfig[arg].type))));\n                        } else if (argsConfig[arg].flagIndicator) {\n                            if (!Object.values(argsConfig)\n                                .some((f) => f.isFlag)) {\n                                buffers.push(Buffer.alloc(4));\n                            } else {\n                                let flagCalculate = 0;\n                                for (const f in argsConfig) {\n                                    if (argsConfig[f].isFlag) {\n                                        if ((this[f] === false && argsConfig[f].type === 'true')\n                                            || this[f] === undefined) {\n                                            flagCalculate |= 0;\n                                        } else {\n                                            flagCalculate |= 1 << argsConfig[f].flagIndex;\n                                        }\n                                    }\n                                }\n                                const f = Buffer.alloc(4);\n                                f.writeUInt32LE(flagCalculate, 0);\n                                buffers.push(f);\n                            }\n                        } else {\n                            buffers.push(argToBytes(this[arg], argsConfig[arg].type));\n\n                            if (this[arg] && typeof this[arg].getBytes === 'function') {\n                                let boxed = (argsConfig[arg].type.charAt(argsConfig[arg].type.indexOf('.') + 1));\n                                boxed = boxed === boxed.toUpperCase();\n                                if (!boxed) {\n                                    buffers.shift();\n                                }\n                            }\n                        }\n                    }\n                }\n                return Buffer.concat(buffers);\n            }\n\n            readResult(reader) {\n                if (classesType !== 'request') {\n                    throw new Error('`readResult()` called for non-request instance');\n                }\n\n                const m = result.match(/Vector<(int|long)>/);\n                if (m) {\n                    reader.readInt();\n                    const temp = [];\n                    const len = reader.readInt();\n                    if (m[1] === 'int') {\n                        for (let i = 0; i < len; i++) {\n                            temp.push(reader.readInt());\n                        }\n                    } else {\n                        for (let i = 0; i < len; i++) {\n                            temp.push(reader.readLong());\n                        }\n                    }\n                    return temp;\n                } else {\n                    return reader.tgReadObject();\n                }\n            }\n\n            /* CONTEST\n            async resolve(client, utils) {\n\n                if (classesType !== 'request') {\n                    throw new Error('`resolve()` called for non-request instance')\n                }\n\n                for (const arg in argsConfig) {\n                    if (argsConfig.hasOwnProperty(arg)) {\n                        if (!AUTO_CASTS.has(argsConfig[arg].type)) {\n                            if (!NAMED_AUTO_CASTS.has(`${argsConfig[arg].name},${argsConfig[arg].type}`)) {\n                                continue\n                            }\n                        }\n                        if (argsConfig[arg].isFlag) {\n                            if (!this[arg]) {\n                                continue\n                            }\n                        }\n                        if (argsConfig[arg].isVector) {\n                            const temp = []\n                            for (const x of this[arg]) {\n                                temp.push(await getInputFromResolve(utils, client, x, argsConfig[arg].type))\n                            }\n                            this[arg] = temp\n                        } else {\n                            this[arg] = await getInputFromResolve(utils, client, this[arg], argsConfig[arg].type)\n                        }\n                    }\n                }\n            } */\n        }\n\n        if (namespace) {\n            if (!classes[namespace]) {\n                classes[namespace] = {};\n            }\n            classes[namespace][name] = VirtualClass;\n        } else {\n            classes[name] = VirtualClass;\n        }\n    }\n\n    return classes;\n}\n\nmodule.exports = buildApiFromTlSchema();\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n"],"names":["IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","undefined","batchedUpdates","throttledLocalDbUpdate","throttle","postMessage","type","convertToVirtualClass","value","Uint8Array","Buffer","from","Object","keys","length","BigInt","Array","isArray","map","VirtualClass","className","split","reduce","acc","field","constructors","valueOmited","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","classType","getBytes","rest","omitVirtualClassFields","key","initial","_initial","valueVirtualClass","acc2","key2","name","Proxy","get","target","prop","Reflect","set","push","getFileId","fill","Foreman","readBigIntFromBuffer","generateRandomBytes","toString","replace","MsgCommandChatLab","constructor","chatId","botInfo","_defineProperty","this","static","text","receiptMessageId","url","isQuiz","query","isSamePeer","userId","UserIdFirstBot","botId","data","msgId","t","title","message","selectChatMessage","getGlobal","prompt","content","getActions","createChat","promptInit","id","needCreate","global","chats","byId","isNotJoined","users","setGlobal","openChat","shouldReplaceHistory","prompts","require","tag","UserIdEnPrompt","MsgDispatcher","promptRows","msg0","setTimeout","async","reverse","i","desc","messageId","startsWith","UserIdCnPrompt","createChatGpt","UserIdChatGpt","createPromptChat","getInlineButtonsDemo","DEBUG","JSON","stringify","messages","byChatId","showModalFromEvent","testMsg","parse","isOutgoing","senderId","date","currentTs","e","showNotification","SERVICE_NOTIFICATIONS_USER_ID","runThrottledForLoadTopChats","cb","runDebouncedForLoadFullChat","debounce","addActionHandler","actions","preloadedChatIds","Set","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","values","byTabId","tabId","selectCurrentMessageList","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","threadId","MAIN_THREAD_ID","getCurrentTabId","payload","currentUserId","chat","selectChat","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","isMin","callApi","user","selectUser","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","selectThreadOriginChat","TMP_CHAT_ID","result","openPreviousChat","addUsers","buildCollectionByKey","chatFullInfo","fullInfo","linkedChatId","focusMessage","selectSupportChat","listType","onReplace","shouldReplace","getOrderDate","lastMessage","joinDate","isFullyLoaded","console","error","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","loadChats","force","loadFullChat","lastLocalMessage","selectLastServiceNotification","isMuted","updateChat","topicId","updateTopic","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","openLimitReachedModal","limit","showDialog","hasErrorKey","channelId","accessHash","selectTabState","leaveChat","getAvatarPhoto","res","fetch","ab","arrayBuffer","body","DownloadRes","file","part","part_total","buf","size","err","ERR","pack","getPbData","blob","Blob","blob1","thumbUrl","resizeImage","thumbBlob","fetchBlob","dataUri","blobToDataUri","cacheApi","MEDIA_CACHE_NAME_WAI","thumbnail","width","height","userIds","userIdInt","parseInt","chatIdsDeleted","a","b","init_system_content","DEFAULT_PROMPT","avatarHash","photos","DEFAULT_AVATARS","avatarUrl","isSelf","isPremium","firstName","usernames","bio","DEFAULT_CREATE_USER_BIO","aiBot","enableAi","chatGptConfig","api_key","max_history_length","modelConfig","ChatModelConfig","UserIdChatGpt4","model","commands","DEFAULT_BOT_COMMANDS","DEFAULT_CHATGPT_AI_COMMANDS","cmd","chatFolders","ChatMsg","activeChatFolderRow","activeChatFolder","window","sessionStorage","getItem","chatFolderById","forEach","row","orderedIds","activeFolderId","includedChatIds","userStatusesById","addChats","updateChatListIds","addUserStatuses","editChatFolder","folderUpdate","sendBotCommand","command","createdChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","maxId","Math","max","recommendedId","description","newFolder","folderIds","setActiveChatFolder","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","phoneNumber","startAttach","attach","localUser","selectUserByPhoneNumber","updateUser","fetchChatByPhoneNumber","langProvider","openAttachMenuFromLink","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","TME_WEB_DOMAINS","hostname","pathname","open","hostParts","part1","part2","part3","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","stickerSetInfo","shortName","chatOrChannelPostId","Number","commentId","comment","formatShareText","username","inviteHash","voicechat","livestream","slug","substring","startParam","start","selectCurrentChat","c","channelPostId","currentChat","bot","getAttachBotOrNotify","callAttachBot","isCurrentChat","fetchChatByUsername","startBot","param","usernameChat","selectChatByUsername","threadInfo","selectThreadInfo","chatByUsername","discussionChatId","isEnabled","ensureIsSuperGroup","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","updateManagementProgress","ManagementProgress","Promise","all","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","groups","addedById","group","isForum","forDiscussionIds","fullChat","setItem","requestedDraft","isChatBasicGroup","offset","membersCount","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","el","topic","accTopic","offsetTopicId","offsetDate","offsetId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","updateTopics","count","updateListedTopicIds","entries","draftsById","draft","replaceThreadParam","formattedText","replyingToId","readInboxMessageIdByTopicId","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","initChats","firstLoad","isFullDraftSync","lastLocalServiceMessage","LoadAllChats","threadsById","lastViewportIds","chatIds","shift","totalChatCount","chatFoldersById","tabStates","visibleChats","flatMap","visibleUsers","selectVisibleUsers","replaceUsers","replaceUserStatuses","replaceChats","updateChats","replaceChatListIds","newChats","notificationsChat","updateChatListSecondaryInfo","thread","selectThread","selectDraft","isLocal","replyingToById","groupCall","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","stickerSet","loadStickers","localChat","isUserBot","newChat","migrateChat","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestAnimationFrame","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","peer","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","crypto","buffer","little","signed","randBuffer","bytesNumber","bigInt","floor","subtract","pow","toSignedLittleBuffer","big","number","bigNumber","byteArray","shiftRight","and","readBufferFromBigInt","bitLength","ceil","Error","lesser","below","abs","hex","padStart","l","reminder","randomBytes","sha1","shaSum","createHash","update","digest","crcTable","module","exports","generateRandomLong","mod","n","crc32","k","makeCRCTable","isBuffer","crc","index","byte","generateKeyDataFromNonce","serverNonce","newNonce","hash1","hash2","hash3","slice","iv","sha256","bigIntMod","remainder","modExp","one","x","greater","zero","leastSignificantBit","divide","eq","multiply","getRandomInt","min","random","sleep","ms","resolve","getByteArray","integer","bits","byteLength","convertToLittle","correct","alloc","writeUInt32BE","bufferXor","RPCError","rpcErrorRe","Common","RPCBaseErrors","RPCErrorList","RPCMessageToError","rpcError","request","msgRegex","Cls","errorMessage","capture","parseTl","serializeBytes","serializeDate","tlContent","schemeContent","CACHING_SUPPORTED","localStorage","CACHE_KEY","extractParams","fileContent","f","functions","d","isFunction","argToBytes","writeInt32LE","writeDoubleLE","getArgFromReader","reader","arg","isVector","useVectorId","readInt","temp","len","flagIndicator","readLong","readLargeInt","readDouble","tgReadString","tgReadBool","tgReadBytes","tgReadDate","skipConstructorId","tgReadObject","createClasses","classesType","classes","classParams","constructorId","subclassOfId","argsConfig","namespace","fullName","args","argName","isFlag","flagValue","flagGroup","flagIndex","idForBytes","writeUInt32LE","buffers","flagCalculate","boxed","charAt","indexOf","toUpperCase","readResult","definitions","fromCache","jsonCache","loadFromCache","constructorParamsApi","functionParamsApi","constructorParamsSchema","functionParamsSchema","requests","loadFromTlSchemas","obj1","obj2","mergeWithNamespaces","buildApiFromTlSchema","Deferred","promise","reject"],"sourceRoot":""}