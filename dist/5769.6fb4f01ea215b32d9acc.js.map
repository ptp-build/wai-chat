{"version":3,"file":"5769.6fb4f01ea215b32d9acc.js","mappings":"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oCACK3B,GAAiBwB,KAAe,CAAEj+F,aACnCoI,GAAc,CAAEk6E,gBAAgB2c,EAAAA,EAAAA,IAAqB5kG,EAAQkF,EAA6B,cAApBT,OAC5C,iBAAnB65E,GAA+B,CAAEA,qBACxCzI,GAAa,CAAEC,iBAAgBC,mBAAkBprE,uBACtD,GAxJem3C,EAp/BuB+iD,EACzC3/F,UACA88F,gBACA8C,+BACAzoB,gCACAC,gCACAjb,QACA8O,YACAqS,aACAif,iBACAsD,aACA3c,YACApM,kBACA2lB,iBACA/vE,YACAozE,gBACAC,yBACAvD,wBACAxgB,iBACAujB,kBACAxoB,eACA56C,QACA6gE,kBACAv8F,SACAy8F,gBACAC,eACAx/D,YACA2/D,cACAC,kBACApkF,eACAqkF,qBACAza,iBACA3J,iBACAzyC,oBACAgrC,cACAotB,kBACApuB,YACAC,iBACAC,mBACAprE,sBACAs3F,eACAp6B,iBACAg6B,gBACAlqC,YACA/pB,UACAgpC,WACAj+C,gBACAmqE,aACAG,iBACAC,uBACAxE,kBACA/nB,kBACApS,cACA4/B,mBACA/jG,YACAmjG,mBACAz4D,sBACAqC,mBACAjrC,mBACAmpC,2BACA5mC,mBACA4/F,gBACAzlB,iBACAmc,oBACAuJ,oBACAC,sBACAlmB,yBACApwD,qBACAu1E,qBACArnB,wBACA/lE,kBACAksF,qBACAoB,gBACAD,gBACAI,oBACAa,0BACAX,oCAEA,MAAM,uBACJn3F,GAAsB,qBACtBotD,GAAoB,uBACpBltD,GAAsB,sBACtBo4F,GAAqB,iBACrB76F,KACE4uB,EAAAA,EAAAA,MAGEyqB,IAAMtB,EAAAA,EAAAA,IAAuB,MAE7B+iD,IAAkB/iD,EAAAA,EAAAA,IAAuB,MAEzC20B,IAAa30B,EAAAA,EAAAA,IAAuB,MAEpCgjD,IAAmBhjD,EAAAA,EAAAA,IAAO,GAE1B19C,IAAOy7C,EAAAA,GAAAA,MAENghC,GAAuBkkB,KAA0BjmD,EAAAA,EAAAA,KAAS,IAC1DkmD,GAAwBC,GAAoBC,KAAqBhjD,EAAAA,GAAAA,MAClE,SAAEO,KAAaC,EAAAA,EAAAA,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","sources":["webpack://wai/./src/global/actions/ui/localSearch.ts","webpack://wai/./src/global/actions/ui/chats.ts","webpack://wai/./src/global/actions/ui/messages.ts","webpack://wai/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://wai/./src/global/actions/ui/globalSearch.ts","webpack://wai/./src/global/actions/ui/stickerSearch.ts","webpack://wai/./src/global/actions/ui/users.ts","webpack://wai/./src/util/updateIcon.ts","webpack://wai/./src/util/updatePageTitle.ts","webpack://wai/./src/global/actions/ui/misc.ts","webpack://wai/./src/global/actions/ui/payments.ts","webpack://wai/./src/global/actions/ui/mediaViewer.ts","webpack://wai/./src/global/actions/ui/passcode.ts","webpack://wai/./src/global/actions/api/messages.ts","webpack://wai/./src/global/actions/api/symbols.ts","webpack://wai/./src/global/actions/api/globalSearch.ts","webpack://wai/./src/global/actions/api/localSearch.ts","webpack://wai/./src/global/actions/api/management.ts","webpack://wai/./src/global/actions/api/sync.ts","webpack://wai/./src/global/actions/api/accounts.ts","webpack://wai/./src/global/actions/api/users.ts","webpack://wai/./src/global/reducers/bots.ts","webpack://wai/./src/util/PopupManager.ts","webpack://wai/./src/global/actions/api/bots.ts","webpack://wai/./src/global/actions/api/payments.ts","webpack://wai/./src/global/actions/api/twoFaSettings.ts","webpack://wai/./src/util/requestQuery.ts","webpack://wai/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://wai/./src/global/reducers/reactions.ts","webpack://wai/./src/global/actions/api/reactions.ts","webpack://wai/./src/global/actions/api/statistics.ts","webpack://wai/./src/global/actions/apiUpdaters/chats.ts","webpack://wai/./src/worker/share/utils/stringParse.ts","webpack://wai/./src/global/actions/apiUpdaters/messages.ts","webpack://wai/./src/worker/msg/msgHelper.ts","webpack://wai/./src/global/actions/apiUpdaters/users.ts","webpack://wai/./src/global/actions/apiUpdaters/symbols.ts","webpack://wai/./src/global/actions/apiUpdaters/misc.ts","webpack://wai/./src/global/actions/apiUpdaters/settings.ts","webpack://wai/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://wai/./src/global/actions/apiUpdaters/calls.ts","webpack://wai/./src/global/actions/apiUpdaters/payments.ts","webpack://wai/./src/hooks/useBeforeUnload.ts","webpack://wai/./src/hooks/usePreventPinchZoomGesture.ts","webpack://wai/./src/components/common/StickerSetModal.async.tsx","webpack://wai/./src/components/common/UnreadCounter.tsx","webpack://wai/./src/hooks/useConnectionStatus.ts","webpack://wai/./src/hooks/useBrowserOnline.ts","webpack://wai/./src/components/left/ConnectionStatusOverlay.tsx","webpack://wai/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://wai/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://wai/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://wai/./src/components/left/main/StatusButton.tsx","webpack://wai/./src/components/left/main/LeftMainHeader.tsx","webpack://wai/./src/util/permanentWebVersion.ts","webpack://wai/./src/components/left/main/ChatFolders.tsx","webpack://wai/./src/components/left/search/LeftSearch.async.tsx","webpack://wai/./src/components/left/main/ContactList.async.tsx","webpack://wai/./src/components/left/NewChatButton.tsx","webpack://wai/./src/components/left/main/LeftMain.tsx","webpack://wai/./src/components/left/settings/Settings.async.tsx","webpack://wai/./src/components/left/newChat/NewChat.async.tsx","webpack://wai/./src/components/left/ArchivedChats.async.tsx","webpack://wai/./src/components/left/LeftColumn.tsx","webpack://wai/./src/hooks/useResize.ts","webpack://wai/./src/components/middle/PinnedMessageNavigation.tsx","webpack://wai/./src/components/middle/HeaderPinnedMessage.tsx","webpack://wai/./src/util/mediaSession.ts","webpack://wai/./src/hooks/useAudioPlayer.ts","webpack://wai/./src/hooks/useMessageMediaMetadata.ts","webpack://wai/./src/components/middle/AudioPlayer.tsx","webpack://wai/./src/components/middle/ChatReportPanel.tsx","webpack://wai/./src/components/middle/MiddleHeader.tsx","webpack://wai/./src/components/middle/helpers/groupMessages.ts","webpack://wai/./src/components/middle/hooks/useStickyDates.ts","webpack://wai/./src/components/middle/hooks/useScrollHooks.ts","webpack://wai/./src/components/middle/hooks/useMessageObservers.ts","webpack://wai/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://wai/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://wai/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://wai/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://wai/./src/util/languageDetection.ts","webpack://wai/./src/util/Deferred.ts","webpack://wai/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://wai/./src/components/middle/ActionMessage.tsx","webpack://wai/./src/components/common/EmbeddedMessage.tsx","webpack://wai/./src/components/common/Document.tsx","webpack://wai/./src/components/common/Audio.tsx","webpack://wai/./src/components/common/helpers/waveform.ts","webpack://wai/./src/util/waveform.ts","webpack://wai/./src/components/middle/message/MessageMeta.tsx","webpack://wai/./src/components/middle/message/Sticker.tsx","webpack://wai/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://wai/./src/components/middle/message/AnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://wai/./src/components/middle/message/Video.tsx","webpack://wai/./src/components/middle/message/Contact.tsx","webpack://wai/./src/components/middle/message/PollOption.tsx","webpack://wai/./src/components/middle/message/Poll.tsx","webpack://wai/./src/components/middle/message/WebPage.tsx","webpack://wai/./src/components/middle/message/Invoice.tsx","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://wai/./src/util/map.ts","webpack://wai/./src/components/middle/message/Location.tsx","webpack://wai/./src/components/middle/message/Game.tsx","webpack://wai/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://wai/./src/components/middle/message/Album.tsx","webpack://wai/./src/components/middle/message/RoundVideo.tsx","webpack://wai/./src/components/middle/message/InlineButtons.tsx","webpack://wai/./src/components/middle/message/CommentButton.tsx","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/ReactionButton.tsx","webpack://wai/./src/components/middle/message/Reactions.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://wai/./src/components/common/TopicChip.tsx","webpack://wai/./src/components/common/TopicChip.module.scss?5208","webpack://wai/./src/components/middle/message/Message.tsx","webpack://wai/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://wai/./src/hooks/useTextLanguage.ts","webpack://wai/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://wai/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://wai/./src/components/common/AboutAdsModal.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessage.tsx","webpack://wai/./src/components/middle/MessageListContent.tsx","webpack://wai/./src/components/middle/ContactGreeting.tsx","webpack://wai/./src/components/middle/NoMessages.tsx","webpack://wai/./src/components/middle/MessageList.tsx","webpack://wai/./src/hooks/useNativeCopySelectedMessages.ts","webpack://wai/./src/components/middle/ScrollDownButton.tsx","webpack://wai/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://wai/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://wai/./src/components/middle/FloatingActionButtons.tsx","webpack://wai/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://wai/./src/util/audio.ts","webpack://wai/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://wai/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://wai/./src/util/voiceRecording.ts","webpack://wai/./src/lib/cleanDocsHtml.ts","webpack://wai/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://wai/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://wai/./src/components/middle/composer/hooks/useDraft.ts","webpack://wai/./src/components/common/DeleteMessageModal.async.tsx","webpack://wai/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://wai/./src/components/middle/composer/AttachBotIcon.tsx","webpack://wai/./src/components/middle/composer/AttachBotItem.tsx","webpack://wai/./src/components/middle/composer/AttachMenu.tsx","webpack://wai/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://wai/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://wai/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://wai/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://wai/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://wai/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://wai/./src/components/middle/composer/PollModal.async.tsx","webpack://wai/./src/components/middle/composer/DropArea.async.tsx","webpack://wai/./src/components/middle/composer/WebPagePreview.tsx","webpack://wai/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://wai/./src/components/middle/composer/BotMenuButton.tsx","webpack://wai/./src/components/middle/composer/Composer.tsx","webpack://wai/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://wai/./src/components/middle/composer/hooks/useEditing.ts","webpack://wai/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://wai/./src/components/middle/MobileSearch.async.tsx","webpack://wai/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://wai/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://wai/./src/components/common/SeenByModal.async.tsx","webpack://wai/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://wai/./src/components/middle/ReactorListModal.async.tsx","webpack://wai/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://wai/./src/components/middle/MessageLanguageModal.async.tsx","webpack://wai/./src/components/middle/MiddleColumn.tsx","webpack://wai/./src/hooks/useCustomBackground.ts","webpack://wai/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://wai/./src/components/right/RightHeader.tsx","webpack://wai/./src/components/left/search/helpers/getSenderName.ts","webpack://wai/./src/components/right/hooks/useProfileViewportIds.ts","webpack://wai/./src/components/right/hooks/useProfileState.ts","webpack://wai/./src/components/common/Media.tsx","webpack://wai/./src/components/common/WebLink.tsx","webpack://wai/./src/components/right/Profile.tsx","webpack://wai/./src/components/right/hooks/useTransitionFixes.ts","webpack://wai/./src/hooks/useCacheBuster.ts","webpack://wai/./src/components/right/RightSearch.async.tsx","webpack://wai/./src/components/right/management/Management.async.tsx","webpack://wai/./src/components/right/statistics/Statistics.async.tsx","webpack://wai/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://wai/./src/components/right/StickerSearch.async.tsx","webpack://wai/./src/components/right/GifSearch.async.tsx","webpack://wai/./src/components/right/PollResults.async.tsx","webpack://wai/./src/components/right/AddChatMembers.tsx","webpack://wai/./src/components/right/CreateTopic.async.tsx","webpack://wai/./src/components/right/EditTopic.async.tsx","webpack://wai/./src/components/right/RightColumn.tsx","webpack://wai/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://wai/./src/util/download.ts","webpack://wai/./src/components/main/DownloadManager.tsx","webpack://wai/./src/components/main/GameModal.tsx","webpack://wai/./src/components/main/Notifications.async.tsx","webpack://wai/./src/components/main/Dialogs.async.tsx","webpack://wai/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://wai/./src/components/main/SafeLinkModal.async.tsx","webpack://wai/./src/components/main/HistoryCalendar.async.tsx","webpack://wai/./src/components/calls/group/GroupCall.async.tsx","webpack://wai/./src/components/calls/ActiveCallHeader.async.tsx","webpack://wai/./src/components/calls/phone/PhoneCall.async.tsx","webpack://wai/./src/components/middle/MessageListHistoryHandler.tsx","webpack://wai/./src/components/main/NewContactModal.async.tsx","webpack://wai/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://wai/./src/components/main/WebAppModal.async.tsx","webpack://wai/./src/components/main/BotTrustModal.async.tsx","webpack://wai/./src/components/main/AttachBotInstallModal.async.tsx","webpack://wai/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://wai/./src/components/main/ConfettiContainer.tsx","webpack://wai/./src/components/main/UrlAuthModal.async.tsx","webpack://wai/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://wai/./src/components/payment/PaymentModal.async.tsx","webpack://wai/./src/components/payment/ReceiptModal.async.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://wai/./src/components/main/DeleteFolderDialog.async.tsx","webpack://wai/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://wai/./src/components/main/DraftRecipientPicker.async.tsx","webpack://wai/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://wai/./src/components/ui/PasswordModal.tsx","webpack://wai/./src/components/common/QrCode.tsx","webpack://wai/./src/components/ui/MnemonicModal.tsx","webpack://wai/./src/components/ui/PickBotModal.tsx","webpack://wai/./src/components/ui/GlobalModal.tsx","webpack://wai/./src/components/main/Main.tsx","webpack://wai/./src/components/main/LockScreen.tsx","webpack://wai/./src/components/main/LockScreen.module.scss?8252","webpack://wai/./src/bundles/main.ts","webpack://wai/./src/global/actions/ui/calls.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage, updateFocusedMessageReached, toggleMessageSelectAll,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage, selectChatMessage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\nimport {MessageStoreRow_Type, PbMsg_Type} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {currentTs} from \"../../../worker/share/utils/utils\";\nimport MsgCommandSetting from \"../../../worker/msg/MsgCommandSetting\";\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('onSpeak', (global, actions, payload): ActionReturnType => {\n  const { messageId,chatId, tabId = getCurrentTabId() } = payload;\n  const utterance = new SpeechSynthesisUtterance();\n  var selectedText = \"\";\n  if (window.getSelection) {\n    selectedText = window.getSelection().toString();\n  } else if (document.selection && document.selection.type != \"Control\") {\n    selectedText = document.selection.createRange().text;\n  }\n  if(!selectedText){\n    const message = selectChatMessage(global,chatId,messageId)\n    if(message?.content.text?.text){\n      selectedText = message!.content!.text!.text\n    }\n  }\n  if(selectedText){\n    utterance.lang = 'zh-CN';\n    utterance.text = selectedText\n    speechSynthesis.speak(utterance)\n  }\n})\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n  const messages = selectChatMessages(global,chatId);\n  const {content} = messages[lastOwnEditableMessageId]\n  if(content.text && content.text){\n    actions.saveDraft({\n      chatId, threadId,\n      draft:{\n        text:content.text.text,\n        entities:content.text.entities\n      }\n      , shouldForce:true,\n    })\n    // return replaceThreadParam(global, chatId, threadId, 'editingId', {text:lastOwnEditableMessageId.toString()});\n  }\n\n  // return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\n\naddActionHandler('toggleMessageSelectAll', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n  return toggleMessageSelectAll(global, chatId, tabId);\n});\n\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('saveMsgToCloud', async (global, actions, payload): ActionReturnType => {\n  let { chatId,msgId,tabId = getCurrentTabId() } = payload || {};\n  let messageIds = []\n  if(chatId){\n    messageIds = [msgId]\n  }else{\n    const tabState = selectTabState(global, tabId);\n\n    if (!tabState.selectedMessages) {\n      return;\n    }\n    chatId =tabState.selectedMessages.chatId;\n    messageIds =tabState.selectedMessages.messageIds;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId)\n  if (!chatMessages) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id!])\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const messages1:MessageStoreRow_Type[] = [];\n\n  for (let i = 0; i < messages.length; i++) {\n    // @ts-ignore\n    const message:PbMsg_Type = messages[i]\n    messages1.push({\n      time:currentTs(),\n      message,\n      messageId:message.id,\n    })\n  }\n  await new MsgCommandSetting(chatId).uploadMsgList(messages1)\n  if(tabId){\n    global = getGlobal();\n    global = exitMessageSelectMode(global, tabId);\n    setGlobal(global)\n  }\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: false, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, tabId]\n    : global.blurredTabTokens.filter((t) => t !== tabId));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (messageList && canDisplayChatInTitle) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, undefined, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  // storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ActionReturnType, ApiDraft, GlobalState, TabArgs,} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiBotInfo,\n  ApiChat,\n  ApiFormattedText,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {MAIN_THREAD_ID, MESSAGE_DELETED,} from '../../../api/types';\nimport {LoadMoreDirection} from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport {IS_IOS} from '../../../util/environment';\nimport {callApi, cancelApiProgress} from '../../../api/gramjs';\nimport {areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  deleteChat,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingIds,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadTopMessageId,\n  selectUser,\n  selectViewportIds,\n} from '../../selectors';\nimport {debounce, onTickEnd, rafPromise,} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isLocalMessageId,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {translate} from '../../../util/langProvider';\nimport {ensureProtocol} from '../../../util/ensureProtocol';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport Account from \"../../../worker/share/Account\";\nimport {currentTs1000, replaceSubstring} from \"../../../worker/share/utils/utils\";\nimport {blobToBuffer, fetchBlob} from \"../../../util/files\";\nimport {popByteBuffer, toUint8Array, writeBytes, writeInt16} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport {resizeImage} from \"../../../util/imageResize\";\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\nimport {getPasswordFromEvent} from '../../../worker/share/utils/password';\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {SyncReq} from \"../../../lib/ptp/protobuf/PTPSync\";\nimport {UserIdFirstBot} from \"../../../worker/setting\";\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\nlet _userMaxMsgId:number;\n\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n  let { chatId, threadId } = payload || {};\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId, type } = currentMessageList;\n  payload = omit(payload, ['tabId']);\n  const {currentUserId} = getGlobal();\n\n  if(payload.attachments){\n    const hasMessageEntitySpoiler = payload.attachments.find((a:ApiAttachment)=>a.shouldSendAsSpoiler);\n    if(hasMessageEntitySpoiler){\n      const {password,hint} = await getPasswordFromEvent(undefined,false,'messageEncryptPassword');\n      if(password){\n        let {attachments} = payload;\n        for (let i = 0; i < attachments.length; i++) {\n          const attachment = attachments[i];\n          const {blobUrl,mimeType} = attachment;\n          const buf = await blobToBuffer(await fetchBlob(blobUrl));\n          const cipher = await Account.getCurrentAccount()?.encryptData(buf, password)\n          const bb = popByteBuffer();\n          const hintLen = (hint ? hint.length:0)\n          const typeLen = mimeType.length;\n          writeInt16(bb, 2);\n          writeBytes(bb,Buffer.from(\"EN\"));\n          writeInt16(bb, typeLen);\n          writeBytes(bb,Buffer.from(mimeType));\n          writeInt16(bb, hintLen);\n          if(hintLen){\n            writeBytes(bb,Buffer.from(hint||\"\"));\n          }\n          const res = toUint8Array(bb);\n          const blob = new Blob([Buffer.from(res),Buffer.from(cipher!)], { type: attachment.mimeType });\n          payload.attachments[i].encryptUrl = URL.createObjectURL(blob)\n        }\n      }else{\n        return undefined\n      }\n    }\n  }\n  let {attachments} = payload;\n  if(attachments){\n    for (let i = 0; i < attachments.length; i++) {\n      const attachment = attachments[i];\n      const {mimeType,encryptUrl,blobUrl} = attachment;\n      if(mimeType.indexOf(\"image/\") === 0){\n        const size = encryptUrl ? 10 : 40;\n        const quality = 0.1;\n        attachment.thumbBlobUrl = await resizeImage(\n          blobUrl, size,size, 'image/jpeg',quality\n        );\n      }\n    }\n  }\n  if(payload.text && payload.entities && payload.entities!.length > 0){\n    let {entities,text} = payload;\n    const hasMessageEntitySpoiler = entities.find((entity:ApiMessageEntity)=>entity.type === \"MessageEntitySpoiler\");\n    if(hasMessageEntitySpoiler){\n      const {password,hint} = await getPasswordFromEvent(undefined,false,'messageEncryptPassword');\n      if(password){\n        for (let i = 0; i < entities.length; i++) {\n          if(entities[i].type === \"MessageEntitySpoiler\"){\n            const entity = payload.entities[i];\n            const {offset,length} = entity;\n            const cipher = await Account.getCurrentAccount()?.encryptData(Buffer.from(text.substr(offset,length)), password)\n            payload.text = replaceSubstring(payload.text,offset,length,\"x\".repeat(length));\n            //@ts-ignore\n            payload.entities[i] = {...entity,cipher:cipher.toString(\"hex\"),hint}\n          }\n        }\n        console.log(payload)\n      }else{\n        return undefined\n      }\n    }\n  }\n\n  global = getGlobal();\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectUser(global, global.currentUserId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\n// @ts-ignore\naddActionHandler('editMessage', async (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n  await MsgDispatcher.reRunAi(chatId,message.id,text)\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', async (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  try {\n    void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n    const {lastMessage} = global.chats.byId[chatId];\n\n    if(lastMessage && lastMessage.id){\n      if(messageIds.includes(lastMessage.id)){\n        const t = getGlobal()\n        setGlobal({\n          ...t,\n          chats:{\n            ...t.chats,\n            byId:{\n              ...t.chats.byId,\n              [chatId]:{\n                ...t.chats.byId[chatId],\n                lastMessage:undefined\n              }\n            }\n          }\n        })\n      }\n    }\n\n    const editingId = selectEditingId(global, chatId, threadId);\n    if (editingId && messageIds.includes(editingId)) {\n      actions.setEditingId({ messageId: undefined, tabId });\n    }\n  }catch (e){\n    console.error(e)\n  }\n\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat || chatId === UserIdFirstBot) {\n    return;\n  }\n  // await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  global = getGlobal();\n  global = deleteChat(global, chatId);\n  const {chatFolders} = global\n  let {userStoreData} = global;\n\n  Object.values(chatFolders.byId).forEach(folder=>{\n    if(!folder.includedChatIds){\n      folder.includedChatIds = []\n    }\n    if(folder.includedChatIds.includes(chatId)){\n      folder.includedChatIds = folder.includedChatIds.filter(id=>id !== chatId)\n    }\n    if(userStoreData && userStoreData.chatIdsDeleted){\n      if(folder.id === 1){\n        userStoreData.chatIdsDeleted = userStoreData.chatIdsDeleted.filter(id=>id !== UserIdFirstBot)\n      }\n      userStoreData.chatIdsDeleted.forEach(idDeleted=>{\n        if(folder.includedChatIds.includes(idDeleted)){\n          folder.includedChatIds = folder.includedChatIds.filter(id=>id !== idDeleted)\n        }\n      })\n    }\n  })\n\n  if(!userStoreData){\n    userStoreData = {}\n  }\n  if(!userStoreData.chatIdsDeleted){\n    userStoreData.chatIdsDeleted = []\n  }\n  userStoreData.chatIdsDeleted.push(chatId)\n  userStoreData.time = currentTs1000();\n  userStoreData.chatIds = global.chats.listIds.active;\n\n  global = {\n    ...global,\n    userStoreData,\n    chatFolders:{\n      ...global.chatFolders,\n      byId:chatFolders.byId\n    },\n    messagesDeleted:{\n      ...global.messagesDeleted,\n      [chatId]:[]\n    }\n  }\n  userStoreData.chatFolders = JSON.stringify(global.chatFolders)\n  setGlobal(global);\n  callApiWithPdu(new SyncReq({userStoreData:global.userStoreData}).pack()).catch(console.error)\n\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nconst loadViewportMessagesCache:Record<string, boolean> = {};\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  let flag = false;\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].lastViewportIds == undefined){\n    global = safeReplaceViewportIds(global, chatId, threadId, [], tabId);\n    flag = true;\n  }\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].listedIds == undefined){\n    global = updateListedIds(global, chatId, threadId, [])\n    flag = true;\n  }\n\n  if(flag){\n    setGlobal(global)\n  }\n  const lastMessageId = chat?.lastMessage ? chat?.lastMessage.id : 0;\n  const messages1 = selectChatMessages(global,chat!.id)\n\n  let isUp = true;\n  let listedIds1 = selectListedIds(global, chatId, threadId);\n  const ids1:number[]= []\n  listedIds1?.forEach((id:number)=>{\n    if(!isLocalMessageId(id)){\n      ids1.push(id)\n    }\n  })\n\n  if((ids1.length > 1 && ids1[ids1.length - 1] < lastMessageId) || Object.keys(messages1).length === 0){\n    isUp = false;\n  }\n  let result;\n  try{\n    if(loadViewportMessagesCache[chat.id]){\n      return\n    }\n    // console.log(\"[MsgListReq]\",{chatId:chat.id,lastMessageId,isUp})\n    loadViewportMessagesCache[chat.id] = true;\n    result = await callApi('fetchMessages', {\n      chat: selectChat(global, chatId)!,\n      offsetId,\n      addOffset,\n      limit: MESSAGE_LIST_SLICE,\n      threadId,\n      lastMessageId,\n      isUp\n    });\n  }catch (e){\n\n  }\n  setTimeout(()=>{delete loadViewportMessagesCache[chat.id]},1000)\n  if (!result) {\n    return;\n  }\n\n  let {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  if(messages.length > 0 && lastMessageId < messages[messages.length - 1].id){\n    chat.lastMessage = messages[messages.length - 1];\n    if(!chats){\n      chats = []\n    }\n    chats.push(chat)\n  }\n\n  console.log(\"[MsgListRes]\",messages,users)\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nexport function getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n  botInfo?:ApiBotInfo;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? async (progress: number, localMessage: ApiMessage) => {\n    const messageLocalId = localMessage.id;\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : async (progress: number, localMessage: any)=>{\n\n  }\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  const user = selectUser(global,params.chat.id);\n  params.botInfo = user?.fullInfo?.botInfo ? user?.fullInfo?.botInfo:undefined\n\n  const res = await new MsgDispatcher(params).process()\n  if(!res){\n    await callApi('sendMessage', params, progressCallback);\n    // @ts-ignore\n    if (progressCallback && localId) {\n      uploadProgressCallbacks.delete(localId);\n    }\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n  const messages:Record<number, ApiFormattedText> = {}\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n    messages[parseInt(id)] = selectChatMessage(global,chatId,id)?.content.text!\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    messages,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\nimport type {ApiChat, ApiGlobalMessageSearchType, ApiMessage,} from '../../../api/types';\n\nimport {updateGlobalSearch, updateGlobalSearchFetchingStatus, updateGlobalSearchResults,} from '../../reducers';\nimport {throttle} from '../../../util/schedulers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentGlobalSearchQuery,\n  selectTabState,\n  selectUser\n} from '../../selectors';\nimport {timestampPlusDay} from '../../../util/dateFormat';\nimport type {ActionReturnType, GlobalState, TabArgs} from '../../types';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {TopCatsReq} from \"../../../lib/ptp/protobuf/PTPSync\";\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('fetchTopCats', async (global, actions, payload) => {\n  const {topCats} = global\n  let timeBot = 0;\n  topCats.cats.forEach(cat=>{\n    cat.botIds.forEach(botId=>{\n      selectUser(global,botId)\n    })\n  })\n  callApiWithPdu(new TopCatsReq({\n    time:topCats.time || 0,\n  }).pack()).catch(console.error)\n})\n\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  if (query) {\n    //@ts-ignore\n    void searchThrottled(async () => {\n      global = getGlobal();\n      const chatListIdsActive = global.chats.listIds.active;\n      if(!chatListIdsActive){\n        return;\n      }\n      const messagesList:ApiMessage[] = []\n      const chatIds:string[] = [];\n      const userIds:string[] = [];\n      const userIdList = Object.keys(global.users.byId);\n      for (let i = 0; i < userIdList.length; i++) {\n        const userId = userIdList[i]\n        const user = selectUser(global,userId)\n        if(\n          (\n            (user?.firstName && user?.firstName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.lastName && user?.lastName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.fullInfo && user?.fullInfo.bio && user?.fullInfo.bio.toLowerCase().indexOf(query.toLowerCase()) > -1)\n          )\n        ){\n          if(chatListIdsActive.includes(userId)){\n            chatIds.push(userId)\n          }\n          userIds.push(userId)\n        }\n      }\n\n      for (let i = 0; i < chatListIdsActive.length; i++) {\n        const chatId = chatListIdsActive[i]\n        const chat = selectChat(global,chatId)\n        if(chat && chat?.title.indexOf(query) > -1 && !chatIds.includes(chat?.id)){\n          chatIds.push(chat?.id)\n        }\n        const messages = selectChatMessages(global,chatId)\n        if(messages){\n          const messageIds = Object.keys(messages);\n          for (let i = 0; i < messageIds.length; i++) {\n            const messageId = Number(messageIds[i])\n            const message = selectChatMessage(global,chatId,messageId)\n            if(message?.content && message?.content.text && message?.content.text.text){\n              if(message?.content.text.text.toLowerCase().indexOf(query.toLowerCase()) > -1){\n                messagesList.push(message)\n              }\n            }\n          }\n        }\n\n      }\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if ((userIds.length === 0 && chatIds.length === 0 &&  messagesList.length === 0) || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n      global = updateGlobalSearchResults(global,messagesList,messagesList.length,\"text\",0,tabId)\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds,\n          userIds\n        },\n      }, tabId);\n      setGlobal(global);\n    });\n  }\n\n  //\n  // const { query, tabId = getCurrentTabId() } = payload!;\n  // const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  // if (query && !chatId) {\n  //   void searchThrottled(async () => {\n  //     const result = await callApi('searchChats', { query });\n  //\n  //     global = getGlobal();\n  //     const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  //     if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n  //       global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //       setGlobal(global);\n  //       return;\n  //     }\n  //\n  //     const {\n  //       localChats, localUsers, globalChats, globalUsers,\n  //     } = result;\n  //\n  //     if (localChats.length || globalChats.length) {\n  //       global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  //     }\n  //\n  //     if (localUsers.length || globalUsers.length) {\n  //       global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  //     }\n  //\n  //     global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //     global = updateGlobalSearch(global, {\n  //       localResults: {\n  //         chatIds: localChats.map(({ id }) => id),\n  //         userIds: localUsers.map(({ id }) => id),\n  //       },\n  //       globalResults: {\n  //         ...selectTabState(global, tabId).globalSearch.globalResults,\n  //         chatIds: globalChats.map(({ id }) => id),\n  //         userIds: globalUsers.map(({ id }) => id),\n  //       },\n  //     }, tabId);\n  //\n  //     setGlobal(global);\n  //   });\n  // }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  return\n  console.log(\"searchMessagesGlobal\")\n  // let result: {\n  //   messages: ApiMessage[];\n  //   users: ApiUser[];\n  //   chats: ApiChat[];\n  //   topics?: ApiTopic[];\n  //   totalTopicsCount?: number;\n  //   totalCount: number;\n  //   nextRate: number | undefined;\n  // } | undefined;\n  //   console.log(\"searchMessagesGlobal\")\n  // if (chat) {\n  //   const localResultRequest = callApi('searchMessagesLocal', {\n  //     chat,\n  //     query,\n  //     type,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     offsetId: offsetRate,\n  //     minDate,\n  //     maxDate,\n  //   });\n  //   const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n  //     chat,\n  //     query,\n  //     limit: GLOBAL_TOPIC_SEARCH_SLICE,\n  //   }) : undefined;\n  //\n  //   const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n  //\n  //   if (localResult) {\n  //     const {\n  //       messages, users, totalCount, nextOffsetId,\n  //     } = localResult;\n  //\n  //     const { topics: localTopics, count } = topics || {};\n  //\n  //     result = {\n  //       topics: localTopics,\n  //       totalTopicsCount: count,\n  //       messages,\n  //       users,\n  //       chats: [],\n  //       totalCount,\n  //       nextRate: nextOffsetId,\n  //     };\n  //   }\n  // } else {\n  //   result = await callApi('searchMessagesGlobal', {\n  //     query,\n  //     offsetRate,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     type,\n  //     maxDate,\n  //     minDate,\n  //   });\n  // }\n  //\n  // global = getGlobal();\n  // const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  // if (!result || (query !== '' && query !== currentSearchQuery)) {\n  //   global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  //\n  // const {\n  //   messages, users, chats, totalCount, nextRate,\n  // } = result;\n  //\n  // if (chats.length) {\n  //   global = addChats(global, buildCollectionByKey(chats, 'id'));\n  // }\n  //\n  // if (users.length) {\n  //   global = addUsers(global, buildCollectionByKey(users, 'id'));\n  // }\n  //\n  // if (messages.length) {\n  //   global = addMessages(global, messages);\n  // }\n  //\n  // global = updateGlobalSearchResults(\n  //   global,\n  //   messages,\n  //   totalCount,\n  //   type,\n  //   nextRate,\n  //   tabId,\n  // );\n  //\n  // if (result.topics) {\n  //   global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  // }\n  //\n  // const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  // global = updateGlobalSearch(global, {\n  //   foundTopicIds: sortedTopics,\n  // }, tabId);\n  //\n  // setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport {ManagementProgress} from '../../../types';\nimport type {ActionReturnType} from '../../types';\n\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addUsers,\n  updateChat,\n  updateManagement,\n  updateManagementProgress,\n  updateUsers,\n} from '../../reducers';\nimport {selectChat, selectCurrentMessageList, selectTabState, selectUser,} from '../../selectors';\nimport {ensureIsSuperGroup} from './chats';\nimport {getUserFirstOrLastName} from '../../helpers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\nimport {blobToDataUri, fetchBlob, imgToBlob} from \"../../../util/files\";\nimport {resizeImage} from \"../../../util/imageResize\";\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  const blob = await imgToBlob(file!);\n  const thumbnailUrl = await resizeImage(blob,40,40,file!.type,0.1);\n  const thumbnail = await blobToDataUri(await fetchBlob(thumbnailUrl));\n  result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n    thumbnail,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  // @ts-ignore\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  // const newUser = await callApi('fetchFullUser', { id, accessHash });\n  // if (!newUser) {\n  //   global = getGlobal();\n  //   global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  // actions.loadProfilePhotos({ profileId: userId });\n  global = getGlobal();\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getActions, getGlobal, setGlobal,} from '../../index';\nimport {addCallback} from '../../../lib/teact/teactn';\n\nimport type {ApiChat, ApiMessage} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {ActionReturnType, GlobalState, Thread} from '../../types';\n\nimport {DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport {init as initFolderManager} from '../../../util/folderManager';\nimport {updateTabState} from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n  const { loadAllChats, preloadTopChatMessages, } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      // await loadAndReplaceMessages(global, actions);\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState,msgClientState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (\n    previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState\n  )) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (\n    connectionState === 'connectionStateReady' && authState === 'authorizationStateReady'\n  ) {\n    if(DEBUG){\n      console.log({connectionState,msgClientState,authState})\n    }\n    getActions().sync();\n  }\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiUser} from '../../../api/types';\nimport {ManagementProgress} from '../../../types';\n\nimport {throttle} from '../../../util/schedulers';\nimport {buildCollectionByKey, unique} from '../../../util/iteratees';\nimport {isUserBot, isUserId} from '../../helpers';\nimport {callApi} from '../../../api/gramjs';\nimport {selectChat, selectCurrentMessageList, selectTabState, selectUser,} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {getServerTime} from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type {ActionReturnType} from '../../types';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,bio,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  // if (!user.isContact && user.phoneNumber) {\n  //   result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  // } else {\n  //   const { id, accessHash } = user;\n  //   result = await callApi('updateContact', {\n  //     id,\n  //     accessHash,\n  //     phoneNumber: '',\n  //     firstName,\n  //     lastName,\n  //     shouldSharePhoneNumber,\n  //   });\n  // }\n  result = {};\n  global = getGlobal();\n  if (result) {\n    // actions.loadChatSettings({ chatId: userId });\n    let botInfo = user.fullInfo?.botInfo\n    if(botInfo){\n      botInfo = {\n        ...botInfo,\n        description:bio\n      }\n    }\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n        fullInfo:{\n          ...user.fullInfo,\n          bio,\n          botInfo,\n        }\n      },\n    );\n\n    global = updateChat(\n      global,\n      user.id,\n      {\n        title:firstName\n      },\n    );\n  }\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ActionReturnType, GlobalState, TabArgs} from '../../types';\nimport type {ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {InlineBotSettings} from '../../../types';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectReplyingToId,\n  selectSendAs,\n  selectTabState,\n  selectThreadTopMessageId,\n  selectUser,\n} from '../../selectors';\nimport {addChats, addUsers, removeBlockedContact} from '../../reducers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {debounce} from '../../../util/schedulers';\nimport {replaceInlineBotSettings, replaceInlineBotsIsLoading} from '../../reducers/bots';\nimport {getServerTime} from '../../../util/serverTime';\nimport {extractCurrentThemeParams} from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\nimport {openSystemFilesDialog} from \"../../../util/systemFilesDialog\";\nimport {SUPPORTED_IMAGE_CONTENT_TYPES} from \"../../../config\";\nimport MsgCommand from \"../../../worker/msg/MsgCommand\";\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      new MsgCommand(chat.id).answerCallbackButton(global,messageId,button.data);\n      // void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestUploadImage':\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      openSystemFilesDialog(\n        Array.from(SUPPORTED_IMAGE_CONTENT_TYPES).join(','),\n        async (e) => {\n          const { files } = e.target as HTMLInputElement;\n          await new MsgCommand(chat.id).requestUploadImage(global,messageId,files);\n        },\n        true\n      );\n      break;\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n  actions.focusLastMessage()\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  const global = getGlobal();\n  const user = selectUser(global,chat.id)\n  const params = {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n    botInfo:user?.fullInfo?.botInfo\n  }\n  const res = await new MsgDispatcher(params).process()\n  if(!res){\n    await callApi('sendMessage', params);\n  }\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ApiUpdateChat} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\n\nimport {ARCHIVED_FOLDER_ID, CLOUD_MESSAGE_API, MAX_ACTIVE_PINNED_CHATS} from '../../../config';\nimport {buildCollectionByKey, omit, pick} from '../../../util/iteratees';\nimport {closeMessageNotifications, notifyAboutMessage} from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectThreadParam,\n} from '../../selectors';\nimport {updateUnreadReactions} from '../../reducers/reactions';\nimport type {ActionReturnType, GlobalState} from '../../types';\nimport {isLocalMessageId} from \"../../helpers\";\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {SyncReq} from \"../../../lib/ptp/protobuf/PTPSync\";\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n\nconst handleChatFoldersEdit = (global:GlobalState)=>{\n  const {userStoreData} = global\n  console.log(userStoreData?.chatFolders)\n  console.log(JSON.stringify(global.chatFolders))\n  let changed = userStoreData?.chatFolders !== JSON.stringify(global.chatFolders)\n  if(JSON.stringify(global.chats.listIds.active) !== JSON.stringify(userStoreData?.chatIds)){\n    changed = true;\n  }\n  global = {\n    ...global,\n    userStoreData:{\n      ...userStoreData,\n      chatFolders:JSON.stringify(global.chatFolders),\n      chatIds:global.chats.listIds.active\n    }\n  }\n\n  if(changed && CLOUD_MESSAGE_API){\n    callApiWithPdu(new SyncReq({userStoreData:global.userStoreData}).pack()).catch(console.error)\n  }\n  return global\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n      const listActiveIds = global.chats.listIds.active || []\n      if(!listActiveIds.includes(update.chat.id)){\n        listActiveIds.push(update.chat.id)\n        global = {\n          ...global,\n          chats:{\n            ...global.chats,\n            totalCount:{\n              ...global.chats.totalCount,\n              all:listActiveIds.length,\n            },\n            listIds:{\n              ...global.chats.listIds,\n              active:listActiveIds\n            }\n          }\n        }\n      }\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n      if(!isLocalMessageId(message.id!)){\n        // global = updateChat(global, update.chatId, {\n        //   unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        //   ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        // });\n        global = updateChat(global, update.chatId, {\n          unreadCount:0,\n          unreadMentionsCount:0,\n        });\n      }\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      global = {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n\n      return handleChatFoldersEdit(global)\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      global = {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n\n      return handleChatFoldersEdit(global)\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      global = {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n      return handleChatFoldersEdit(global)\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import {ApiMessageEntityTypes} from \"../../../api/types\";\n\nexport function parseCodeBlock(text:string,entities?:any[]) {\n  const reg = /```(.*?)\\n([\\s\\S]*?)```/g;\n  if(text.indexOf(\"```\") >= 0 && text.split(\"```\").length % 2 === 0){\n    text =  text+\"```\";\n  }\n  let result = text;\n  let match;\n  let codeBlock = [];\n  let i = 0;\n  let j = 0;\n  while (match = reg.exec(text)) {\n    codeBlock.push({\n      type:ApiMessageEntityTypes.Pre,\n      language: match[1],\n      offset: match.index - 6 * i - j,\n      length: match[2].length\n    });\n    j += match[1].length+1\n    result = result.replace(match[0],  match[2]);\n    ++i;\n  }\n  if(!entities){\n    entities = []\n  }\n  return {\n    text:result.endsWith(\"```\") ? result.substring(0,result.indexOf(\"```\")): result,\n    entities:[\n      ...codeBlock,\n      ...entities\n    ]\n  };\n}\n\nfunction parseMentionName(text:string) {\n  const regex = /@\\w+/g;\n  let match;\n  let result = [];\n  while ((match = regex.exec(text)) !== null) {\n    result.push({\n      type:ApiMessageEntityTypes.MentionName,\n      offset: match.index,\n      length: match[0].length\n    });\n  }\n  return result\n}\nexport function parseCmd(text: string, commands: string[]) {\n  if (commands.length === 0) return [];\n  const regex = new RegExp(`(?<=\\\\/)(${commands.join('|')})\\\\b`, 'g');\n  const matches = [];\n  let match;\n  while ((match = regex.exec(text)) !== null) {\n    matches.push({\n      type: 'MessageEntityBotCommand',\n      offset: match.index-1,\n      length: match[0].length+1\n    });\n  }\n  return matches;\n}\n\nexport function parseEntities(text:string,commands:string[]){\n  return [\n    ...parseCmd(text,commands),\n    ...parseMentionName(text),\n  ]\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isLocalMessageId,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport parseMessageInput from \"../../../util/parseMessageInput\";\nimport { handleBotCmdText, handleMessageTextCode } from '../../../worker/msg/msgHelper';\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {RemoveMessagesReq} from \"../../../lib/ptp/protobuf/PTPMsg\";\n\nconst ANIMATION_DELAY = 350;\n\nconst handleMessageEntities = (global:GlobalState,chatId:string,message:ApiMessage|Partial<ApiMessage>)=>{\n  if(message.content?.text && (!message.content.text.entities || message.content.text.entities?.length === 0)){\n    const user = selectUser(global,chatId)\n    message = handleMessageTextCode(message)\n    if(user && user.fullInfo?.botInfo){\n      message = handleBotCmdText(message,user.fullInfo.botInfo) as ApiMessage\n    }\n  }\n  message.isOutgoing = false\n  return message\n}\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      let {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      message = handleMessageEntities(global,chatId,message)\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      let { chatId, id, message } = update;\n      message = handleMessageEntities(global,chatId,message)\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      let { chatId, id, message } = update;\n      message = handleMessageEntities(global,chatId,message)\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      let { chatId, localId, message } = update;\n      message = handleMessageEntities(global,chatId,message) as ApiMessage\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n      let messageNew = message\n      if (!messageNew.isOutgoing && messageNew.content\n        && messageNew.content.text && messageNew.content.text.text && !messageNew.content.text!.entities) {\n        const {text, entities} = parseMessageInput(messageNew.content.text.text);\n        messageNew.content.text.text = text;\n        messageNew.content.text.entities = entities\n      }\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...messageNew,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error && error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n\n  // Channel update\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    callApiWithPdu(new RemoveMessagesReq({chatId,messageIds:ids}).pack()).catch(console.error)\n\n    ids.forEach((id) => {\n\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import {ApiBotInfo, ApiMessage} from \"../../api/types\";\nimport {parseCodeBlock, parseEntities} from \"../share/utils/stringParse\";\n\nexport function handleMessageTextCode(msgSend:Partial<ApiMessage> | ApiMessage){\n  if(msgSend.content?.text && msgSend.content.text.text){\n    const {entities} = msgSend.content.text\n    // @ts-ignore\n    msgSend.content.text = {\n      ...parseCodeBlock(msgSend.content.text?.text,entities)\n    }\n  }\n  return msgSend\n}\n\nexport function handleBotCmdText(msgSend:Partial<ApiMessage> | ApiMessage,botInfo:ApiBotInfo){\n  const commands:string[] = []\n  if(botInfo && botInfo.commands){\n    botInfo.commands.forEach(cmd=>commands.push(cmd.command))\n  }\n  if(msgSend.content && msgSend.content.text && msgSend.content.text.text){\n    if(msgSend.content.text!.entities && msgSend.content.text!.entities.find(e=>{\n      // @ts-ignore\n      return e.cipher\n    })){\n    }else{\n      // @ts-ignore\n      msgSend.content.text!.entities = [\n        ...msgSend.content.text!.entities||[],\n        ...parseEntities(msgSend.content.text!.text!,commands)\n      ]\n    }\n  }\n  return msgSend;\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ApiUser, ApiUserStatus} from '../../../api/types';\n\nimport {addUsers, addUserStatuses, deleteContact, replaceUserStatuses, updateUser,} from '../../reducers';\nimport {throttle} from '../../../util/schedulers';\nimport {selectIsCurrentUserPremium, selectUser} from '../../selectors';\nimport type {ActionReturnType, GlobalState, RequiredGlobalState} from '../../types';\nimport {callApiWithPdu} from \"../../../worker/msg/utils\";\nimport {SyncReq} from \"../../../lib/ptp/protobuf/PTPSync\";\nimport {UserStoreData_Type} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {DEBUG} from \"../../../config\";\nimport {currentTs1000} from \"../../../worker/share/utils/utils\";\nimport MsgCommand from \"../../../worker/msg/MsgCommand\";\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\nfunction updateUserStoreData(global:GlobalState,userStoreDataRes?:UserStoreData_Type){\n  // console.log(\"updateUserStoreData\",userStoreDataRes)\n  if (userStoreDataRes){\n    const {chatFolders,...userStoreData} = userStoreDataRes;\n    if(DEBUG){\n      console.log(\"updateUserStoreData\",userStoreDataRes)\n    }\n    return {\n      ...global,\n      userStoreData,\n      chatFolders:{\n        ...global.chatFolders,\n        ...(chatFolders ? JSON.parse(chatFolders!):{})\n      }\n    }\n  }else{\n    return global\n  }\n\n}\n\nfunction handleUpdateBots(global:GlobalState,user:ApiUser){\n  const user1 = selectUser(global,user.id)\n  if(!user1){\n    const statusById:Record<string, ApiUserStatus> = {}\n    statusById[user.id] = {\n      type:'userStatusEmpty'\n    }\n    global = addUserStatuses(global,statusById);\n    global = addUsers(global,{\n      [user.id]:user\n    })\n  }else{\n    return updateUser(global, user.id,{\n      ...user1,\n      avatarHash:user.avatarHash,\n      firstName:user.firstName,\n      fullInfo:{\n        ...user1.fullInfo,\n        bio:user.fullInfo?.bio,\n        botInfo: {\n          ...user1.fullInfo?.botInfo!,\n          description:user.fullInfo?.botInfo?.description,\n          aiBot:{\n            ...user1.fullInfo?.botInfo!.aiBot,\n            chatGptConfig:{\n              ...user1.fullInfo?.botInfo!.aiBot!.chatGptConfig!,\n              welcome:user.fullInfo?.botInfo!.aiBot!.chatGptConfig!.welcome,\n              template:user.fullInfo?.botInfo!.aiBot!.chatGptConfig!.template,\n              templateSubmit:user.fullInfo?.botInfo!.aiBot!.chatGptConfig!.templateSubmit,\n              init_system_content:user.fullInfo?.botInfo!.aiBot!.chatGptConfig!.init_system_content\n            }\n          }\n        }\n      }\n    });\n  }\n  return global\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case \"updateGlobalUpdate\":\n      const {data} = update\n      switch (data.action){\n        case \"updateBots\":\n          return handleUpdateBots(global,data.payload.user);\n        case \"onLogged\":\n          let {userStoreData} = global\n          if(!userStoreData){\n            userStoreData = {\n              time:0,\n              chatIds:Object.keys(global.chats.listIds.active),\n              chatFolders:JSON.stringify(global.chatFolders)\n            }\n          }else{\n            userStoreData = {\n              ...userStoreData,\n              chatIds:Object.keys(global.chats.listIds.active),\n              chatFolders:JSON.stringify(global.chatFolders)\n            }\n          }\n          if(userStoreData.myBots){\n            if(!userStoreData.chatIdsDeleted){\n              userStoreData.chatIdsDeleted = []\n            }\n            const userIds = [];\n            for (let i = 0; i < userStoreData.myBots.length; i++) {\n              const botId = userStoreData.myBots[i]\n              if(!selectUser(global,botId) && !userStoreData.chatIdsDeleted.includes(botId)){\n                userIds.push(botId)\n              }\n            }\n            if(userIds.length > 0){\n              MsgCommand.downloadUsers(global,userIds).catch(console.error);\n            }\n          }\n          callApiWithPdu(new SyncReq({\n            userStoreData,\n          }).pack()).catch(console.error)\n          break\n        case \"updateUserStoreData\":\n          return updateUserStoreData(global,data.payload!.userStoreData)\n        case \"updateTopCats\":\n          return {\n            ...global,\n            topCats:{\n              ...global.topCats,\n              ...data.payload!.topCats,\n              time:currentTs1000()\n            }\n          }\n        case \"updateChatGptHistory\":\n          const chatId = data.payload!.chatId;\n          return {\n            ...global,\n            chatGptAskHistory:{\n              ...global.chatGptAskHistory,\n              [chatId]:{\n                ...global.chatGptAskHistory[chatId],\n                [data.payload!.msgIdAssistant]:data.payload!.msgIdUser\n              }\n            }\n          }\n        case \"updateBot\":\n          const userBotUpdate = {\n            ...global.users.byId[data.payload!.botInfo.botId],\n            bot:data.payload!.bot\n          };\n          if(data.payload!.bot.chatGptConfig && data.payload!.bot.chatGptConfig.api_key){\n            localStorage.setItem(\"open-api-key\" , data.payload!.bot.chatGptConfig.api_key)\n          }\n          return updateUser(global,data.payload!.botInfo.botId,userBotUpdate)\n        case \"clearHistory\":\n          actions.updateGlobal({\n            messages:{\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [data.payload!.chatId]:{\n                  ...global.messages.byChatId[data.payload!.chatId],\n                  byId:{},\n                  threadsById:{\n                    \"-1\":{\n                      ...global.messages.byChatId[data.payload!.chatId].threadsById[\"-1\"],\n                      lastScrollOffset:undefined,\n                      lastViewportIds: [],\n                      listedIds:[]\n                    }\n                  }\n                }\n              }\n            },\n            chats:{\n              ...global.chats,\n              byId:{\n                ...global.chats.byId,\n                [data.payload!.chatId]:{\n                  ...global.chats.byId[data.payload!.chatId],\n                  lastMessage:undefined\n                }\n              }\n            }\n          })\n          break;\n        case \"removeBot\":\n          if(global.chats.listIds && global.chats.listIds.active){\n            let listIds_active = global.chats.listIds.active\n            listIds_active = listIds_active!.filter(id=>id !== data.payload!.chatId)\n            actions.updateGlobal({\n              chats:{\n                ...global.chats,\n                listIds: {\n                  ...global.chats.listIds,\n                  active:listIds_active\n                },\n                totalCount: {\n                  ...global.chats.totalCount,\n                  all:listIds_active.length\n                }\n              }\n            })\n            // @ts-ignore\n            actions.openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n            actions.loadAllChats({ listType: 'active', shouldReplace: true });\n          }\n          return\n      }\n      break\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n      if(selectUser(global,update.id)){\n        return updateUser(global, update.id, update.user);\n      }else{\n        return addUsers(global, {\n          [update.id]:update.user\n        });\n      }\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect] as const);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useMemo,} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {AnimationLevel, ISettings} from '../../../types';\nimport {LeftColumnContent, SettingsScreens} from '../../../types';\nimport type {ApiChat} from '../../../api/types';\nimport type {GlobalState, TabState} from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME,\n  APP_VERSION,\n  ASSET_CACHE_NAME,\n  BETA_CHANGELOG_URL,\n  CLOUD_MESSAGE_ENABLE,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  LANG_CACHE_NAME,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport {IS_PWA} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport {formatDateToString} from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport {setPermanentWebVersion} from '../../../util/permanentWebVersion';\nimport {clearWebsync} from '../../../util/websync';\nimport {\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport {isChatArchived} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport {useHotkeys} from '../../../hooks/useHotkeys';\nimport {getPromptInstall} from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\nimport * as cacheApi from '../../../util/cacheApi';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectFolder: ()=>void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onSelectProfile: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    topSearchPlaceHolder?:string,\n    isLoading: boolean;\n    currentUserId?: string;\n    currentAccountAddress?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  topSearchPlaceHolder,\n  contactsFilter,\n  onSearchQuery,\n  onSelectProfile,\n  onSelectFolder,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n  archiveSettings,\n  currentAccountAddress,\n}) => {\n  const {\n    fetchTopCats,\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    signOut,\n    updateGlobal,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return (chat && chat.unreadCount) ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n    fetchTopCats()\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleClearCache = useCallback(async () => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    await cacheApi.clear(LANG_CACHE_NAME);\n    await cacheApi.clear(ASSET_CACHE_NAME);\n\n    setTimeout(()=>{\n      location.reload();\n    },500)\n  }, [openUrl]);\n\n  const handleSignOutClick = useCallback(() => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    setTimeout(()=>{\n      signOut({ forceInitApi: true });\n      updateGlobal({\n        authState:\"authorizationStateWaitSignPassword\"\n      })\n      },300)\n  }, [openChat,signOut]);\n\n  const handleLoginClick = useCallback(() => {\n\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    updateGlobal({\n      authState:\"authorizationStateWaitSignPassword\"\n    })\n  }, [updateGlobal]);\n\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang(topSearchPlaceHolder || '编程 写作 旅游...');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"folder\"\n        onClick={onSelectFolder}\n      >\n        {lang('Filters')}\n      </MenuItem>\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectProfile}\n      >\n        {lang('个人资料')}\n      </MenuItem>\n      {\n        currentUserId &&\n        <MenuItem\n          icon=\"settings\"\n          onClick={onSelectSettings}\n        >\n          {lang('Settings')}\n        </MenuItem>\n      }\n      {/*{*/}\n      {/*  currentUserId  &&*/}\n      {/*  <MenuItem*/}\n      {/*    icon=\"saved-messages\"*/}\n      {/*    onClick={handleSelectSaved}*/}\n      {/*  >*/}\n      {/*    {lang('SavedMessages')}*/}\n      {/*  </MenuItem>*/}\n      {/*}*/}\n      {/* {archiveSettings.isHidden && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"archive\" */}\n      {/*     onClick={onSelectArchived} */}\n      {/*   > */}\n      {/*     <span className=\"menu-item-name\">{lang('ArchivedChats')}</span> */}\n      {/*     {archivedUnreadChatsCount > 0 && ( */}\n      {/*       <div className=\"right-badge\">{archivedUnreadChatsCount}</div> */}\n      {/*     )} */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* <MenuItem */}\n      {/*   icon=\"user\" */}\n      {/*   onClick={onSelectContacts} */}\n      {/* > */}\n      {/*   {lang('Contacts')} */}\n      {/* </MenuItem> */}\n\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('NightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Animations')}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      {/* <MenuItem */}\n      {/*   icon=\"help\" */}\n      {/*   onClick={handleOpenTipsChat} */}\n      {/* > */}\n      {/*   {lang('TelegramFeatures')} */}\n      {/* </MenuItem> */}\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('ReportBug')}\n      </MenuItem>\n      <MenuItem\n        icon=\"stop\"\n        onClick={handleClearCache}\n      >\n        清除缓存\n      </MenuItem>\n      {/* {IS_BETA && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"permissions\" */}\n      {/*     onClick={handleChangelogClick} */}\n      {/*   > */}\n      {/*     Beta Changelog */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* {withOtherVersions && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"char-K\" */}\n      {/*     href={WEBK_VERSION_URL} */}\n      {/*     onClick={handleSwitchToWebK} */}\n      {/*   > */}\n      {/*     Switch to K Version */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n      {\n        !CLOUD_MESSAGE_ENABLE ?\n          <></>:\n          currentAccountAddress  ?\n        <MenuItem\n          icon=\"logout\"\n          onClick={handleSignOutClick}\n        >\n          {lang('SignOut')}\n        </MenuItem>:\n          <MenuItem\n            icon=\"user\"\n            onClick={handleLoginClick}\n          >\n            {lang('Login')}\n          </MenuItem>\n      }\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,currentAccountAddress\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n    const { topSearchPlaceHolder } = global.topCats;\n\n    return {\n      topSearchPlaceHolder,\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.messages) : false,\n      currentUserId,\n      currentAccountAddress,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\nimport {getActions} from \"../../global\";\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const {loadAllChats,createChat} = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n    onNewChannel();\n    setTimeout(()=>{\n      setIsMenuOpen(false);\n    },200)\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-add\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={false}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useRef, useState,} from '../../../lib/teact/teact';\n\nimport {LeftColumnContent, SettingsScreens} from '../../../types';\nimport type {FolderEditDispatch} from '../../../hooks/reducers/useFoldersReducer';\n\nimport {IS_TOUCH_ENV} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\nimport * as cacheApi from '../../../util/cacheApi';\n\nimport './LeftMain.scss';\nimport {getActions} from '../../../global';\nimport {LANG_CACHE_NAME} from \"../../../config\";\nimport {UserIdFirstBot} from \"../../../worker/setting\";\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel,openChat,sendBotCommand,focusLastMessage } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectProfile = useCallback(() => {\n    onSettingsScreenSelect(SettingsScreens.EditProfile);\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectFolder = useCallback(() => {\n    onSettingsScreenSelect(SettingsScreens.Folders);\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectSettings = useCallback(() => {\n    openChat({ id: UserIdFirstBot, shouldReplaceHistory: true }, { forceOnHeavyAnimation: true });\n    focusLastMessage()\n    setTimeout(()=>{\n      sendBotCommand({\n        chatId:UserIdFirstBot,\n        command:\"/start\"\n      })\n    },300)\n    // onSettingsScreenSelect(SettingsScreens.Main);\n    // onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(async () => {\n    await cacheApi.clear(LANG_CACHE_NAME);\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep2);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectProfile={handleSelectProfile}\n        onSelectFolder={handleSelectFolder}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  chatCreationProgress?:ChatCreationProgress;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\nconst LeftColumnContentStr = window.sessionStorage.getItem(\"LeftColumnContent\");\nlet leftColumnContent = LeftColumnContent.ChatList;\nif(LeftColumnContentStr && LeftColumnContentStr !== '2'){\n  leftColumnContent = parseInt(LeftColumnContentStr)\n}\nconst LeftColumn: FC<StateProps> = ({\n  chatCreationProgress,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n\n  const [content, setContent] = useState<LeftColumnContent>(Number(leftColumnContent));\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n  const setContent_ = (v:LeftColumnContent)=>{\n    setContent(v);\n    window.sessionStorage.setItem(\"LeftColumnContent\",v.toString())\n  }\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent_(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent_(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      // setContent_(LeftColumnContent.NewChannelStep1);\n      // return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.Folders:\n          setContent_(LeftColumnContent.ChatList);\n          return;\n        case SettingsScreens.EditProfile:\n          setContent_(LeftColumnContent.ChatList);\n          return;\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent_(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent_(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent_(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      if(query.length > 0){\n        setGlobalSearchContent({content:0})\n      }\n      setGlobalSearchQuery({ query });\n    }\n\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent_(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent_(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent_(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  foldersDispatch={foldersDispatch}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onLeftColumnContentChange={setContent_}\n                  isForumPanelOpen={isForumPanelOpen}\n                  archiveSettings={archiveSettings}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent_}\n                  onSearchQuery={handleSearchQuery}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      chatCreation,\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      chatCreationProgress:chatCreation?.progress,\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export type MediaSessionHandlers = {\n  play?: () => void;\n  pause?: () => void;\n  stop?: () => void;\n\n  previoustrack?: () => void;\n  nexttrack?: () => void;\n\n  togglemicrophone?: () => void;\n  togglecamera?: () => void;\n  hangup?: () => void;\n\n  seekbackward?: (details: MediaSessionActionDetails) => void;\n  seekforward?: (details: MediaSessionActionDetails) => void;\n  seekTo?: ((details: MediaSessionActionDetails) => void);\n};\n\ninterface MediaMetadataParameters {\n  title?: string;\n  artist?: string;\n  album?: string;\n  artwork?: MediaImage[];\n}\n\nconst DEFAULT_HANDLERS = {\n  play: undefined,\n  pause: undefined,\n  seekbackward: undefined,\n  seekforward: undefined,\n  previoustrack: undefined,\n  nexttrack: undefined,\n  stop: undefined,\n  seekTo: undefined,\n};\n\nexport function registerMediaSession(metadata?: MediaMetadata, handlers?: MediaSessionHandlers) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    if (metadata) updateMetadata(metadata);\n    if (handlers) setMediaSessionHandlers(handlers);\n  } else {\n    // eslint-disable-next-line no-console\n    console.warn('MediaSession API not supported in this browser');\n  }\n}\n\nexport function updateMetadata(metadata?: MediaMetadata) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    // eslint-disable-next-line no-null/no-null\n    mediaSession.metadata = metadata ?? null;\n  }\n}\n\nexport function setMediaSessionHandlers(handlers: MediaSessionHandlers) {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    Object.entries({ ...DEFAULT_HANDLERS, ...handlers }).forEach(([key, handler]) => {\n      try {\n        // @ts-ignore API not standardized yet\n        mediaSession.setActionHandler(key, handler);\n      } catch (err) {\n        // Handler not supported, ignoring\n      }\n    });\n  }\n}\n\nexport function clearMediaSession() {\n  const { mediaSession } = window.navigator;\n  if (mediaSession) {\n    // eslint-disable-next-line no-null/no-null\n    mediaSession.metadata = null;\n    setMediaSessionHandlers(DEFAULT_HANDLERS);\n    if (mediaSession.playbackState) mediaSession.playbackState = 'none';\n    mediaSession.setPositionState?.();\n  }\n}\n\nexport function setPlaybackState(state: 'none' | 'paused' | 'playing' = 'none') {\n  const { mediaSession } = window.navigator;\n  if (mediaSession && mediaSession.playbackState) {\n    mediaSession.playbackState = state;\n  }\n}\n\nexport function setPositionState(state?: MediaPositionState) {\n  if (!state || state.position === undefined || state.duration === undefined) return;\n  state.position = Math.min(state.position, state.duration);\n\n  const { mediaSession } = window.navigator;\n  mediaSession?.setPositionState?.(state);\n}\n\nexport function buildMediaMetadata({\n  title, artist, album, artwork,\n}: MediaMetadataParameters) {\n  if ('MediaMetadata' in window) {\n    return new window.MediaMetadata({\n      title,\n      artist,\n      album,\n      artwork,\n    });\n  }\n  return undefined;\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../lib/teact/teact';\nimport { getActions, getGlobal } from '../global';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../config';\nimport type { Track, TrackId } from '../util/audioPlayer';\nimport { register } from '../util/audioPlayer';\nimport { isSafariPatchInProgress } from '../util/patchSafariProgressiveAudio';\nimport type { MediaSessionHandlers } from '../util/mediaSession';\nimport {\n  registerMediaSession, setPlaybackState, setPositionState, updateMetadata,\n} from '../util/mediaSession';\nimport { selectTabState } from '../global/selectors';\n\nimport useEffectWithPrevDeps from './useEffectWithPrevDeps';\nimport useSyncEffect from './useSyncEffect';\n\ntype Handler = (e: Event) => void;\n\nconst DEFAULT_SKIP_TIME = 10;\n\nconst useAudioPlayer = (\n  trackId: TrackId,\n  originalDuration: number, // Sometimes incorrect for voice messages\n  trackType: Track['type'],\n  src?: string,\n  handlers?: Record<string, Handler>,\n  metadata?: MediaMetadata,\n  onInit?: (element: HTMLAudioElement) => void,\n  shouldPlay = false,\n  onForcePlay?: NoneToVoidFunction,\n  onTrackChange?: NoneToVoidFunction,\n  noPlaylist = false,\n  noProgressUpdates = false,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const controllerRef = useRef<ReturnType<typeof register>>(null);\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  let isPlayingSync = isPlaying;\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n\n  const handleTrackChange = useCallback(() => {\n    setIsPlaying(false);\n    if (onTrackChange) onTrackChange();\n  }, [onTrackChange]);\n\n  useSyncEffect(() => {\n    controllerRef.current = register(trackId, trackType, (eventName, e) => {\n      switch (eventName) {\n        case 'onPlay': {\n          const {\n            setVolume, setPlaybackRate, toggleMuted, proxy,\n          } = controllerRef.current!;\n          setIsPlaying(true);\n\n          registerMediaSession(metadata, makeMediaHandlers(controllerRef));\n          setPlaybackState('playing');\n          const { audioPlayer } = selectTabState(getGlobal());\n          setVolume(audioPlayer.volume);\n          toggleMuted(Boolean(audioPlayer.isMuted));\n          const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n          if (trackType === 'voice' || duration > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION) {\n            setPlaybackRate(audioPlayer.playbackRate);\n          }\n\n          setPositionState({\n            duration: proxy.duration || 0,\n            playbackRate: proxy.playbackRate,\n            position: proxy.currentTime,\n          });\n          break;\n        }\n        case 'onRateChange': {\n          const { proxy } = controllerRef.current!;\n          setPositionState({\n            duration: proxy.duration || 0,\n            playbackRate: proxy.playbackRate,\n            position: proxy.currentTime,\n          });\n          break;\n        }\n        case 'onPause':\n          setIsPlaying(false);\n          setPlaybackState('paused');\n          break;\n        case 'onTimeUpdate': {\n          const { proxy } = controllerRef.current!;\n          const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n          if (!noProgressUpdates) setPlayProgress(proxy.currentTime / duration);\n          break;\n        }\n        case 'onEnded': {\n          setPlaybackState('paused');\n          break;\n        }\n      }\n\n      handlers?.[eventName]?.(e);\n    }, onForcePlay, handleTrackChange);\n\n    const { proxy } = controllerRef.current!;\n\n    if (!isPlaying && !proxy.paused) {\n      setIsPlaying(true);\n      // `isPlayingSync` is only needed to help `setIsPlaying` because it is asynchronous\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      isPlayingSync = true;\n    }\n\n    if (onInit) {\n      onInit(proxy);\n    }\n  }, [trackId]);\n\n  useEffect(() => {\n    if (isPlaying && metadata) updateMetadata(metadata);\n  }, [metadata, isPlaying]);\n\n  const {\n    play,\n    pause,\n    setCurrentTime,\n    proxy,\n    destroy,\n    setVolume,\n    stop,\n    isFirst,\n    isLast,\n    requestNextTrack,\n    requestPreviousTrack,\n    setPlaybackRate,\n    toggleMuted,\n  } = controllerRef.current!;\n  const duration = proxy.duration && Number.isFinite(proxy.duration) ? proxy.duration : originalDuration;\n\n  // RAF progress\n  useEffect(() => {\n    if (duration && !isSafariPatchInProgress(proxy) && !noProgressUpdates) {\n      setPlayProgress(proxy.currentTime / duration);\n    }\n  }, [duration, playProgress, proxy, noProgressUpdates]);\n\n  // Cleanup\n  useEffect(() => () => {\n    destroy(noPlaylist);\n  }, [destroy, noPlaylist]);\n\n  // Autoplay once `src` is present\n  useEffectWithPrevDeps(([prevShouldPlay, prevSrc]) => {\n    if (prevShouldPlay === shouldPlay && src === prevSrc) {\n      return;\n    }\n\n    // When paused by another player\n    if (proxy.src && proxy.paused) {\n      return;\n    }\n\n    if (shouldPlay && src && !isPlaying) {\n      play(src);\n    }\n  }, [shouldPlay, src, isPlaying, play, proxy.src, proxy.paused]);\n\n  const playIfPresent = useCallback(() => {\n    if (src) {\n      play(src);\n    }\n  }, [src, play]);\n\n  const playPause = useCallback(() => {\n    if (isPlaying) {\n      pause();\n    } else {\n      playIfPresent();\n    }\n  }, [pause, playIfPresent, isPlaying]);\n\n  const setTime = useCallback((time: number) => {\n    setCurrentTime(time);\n    if (duration) {\n      setPlayProgress(proxy.currentTime / duration);\n    }\n  }, [duration, proxy, setCurrentTime]);\n\n  return {\n    isPlaying: isPlayingSync,\n    playProgress,\n    playPause,\n    pause,\n    play: playIfPresent,\n    stop,\n    setCurrentTime: setTime,\n    setVolume,\n    audioProxy: proxy,\n    duration,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setPlaybackRate,\n    toggleMuted,\n  };\n};\n\nfunction makeMediaHandlers(controllerRef: React.RefObject<ReturnType<typeof register>>) {\n  let mediaHandlers: MediaSessionHandlers = {};\n  if (controllerRef && controllerRef.current) {\n    const {\n      play, pause, setCurrentTime, proxy, requestNextTrack, requestPreviousTrack, isFirst, isLast,\n    } = controllerRef.current;\n    mediaHandlers = {\n      play: () => {\n        play(proxy.src);\n      },\n      pause: () => {\n        pause();\n      },\n      stop: () => {\n        pause();\n        setCurrentTime(0);\n        getActions().closeAudioPlayer();\n      },\n      seekbackward: (event) => {\n        const skipTime = event.seekOffset || DEFAULT_SKIP_TIME;\n        setCurrentTime(Math.max(proxy.currentTime - skipTime, 0));\n      },\n      seekforward: (event) => {\n        const skipTime = event.seekOffset || DEFAULT_SKIP_TIME;\n        setCurrentTime(Math.min(proxy.currentTime + skipTime, proxy.duration));\n      },\n      seekTo: (event) => {\n        if (event.seekTime) {\n          setCurrentTime(event.seekTime);\n        }\n      },\n    };\n\n    if (!isLast()) {\n      mediaHandlers.nexttrack = () => {\n        requestNextTrack();\n      };\n    }\n    if (!isFirst()) {\n      mediaHandlers.previoustrack = () => {\n        requestPreviousTrack();\n      };\n    }\n  }\n  return mediaHandlers;\n}\n\nexport default useAudioPlayer;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId, selectUser,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  isBot?:boolean;\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  isBot,\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              withDesc={isBot}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n\n    // console.log(chatId,{isChatWithBot,canRestartBot},Boolean(selectIsChatBotNotStarted(global, chatId)),canStartBot)\n\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n    const isBot = Boolean(isUserId(chatId) && selectUser(global,chatId)?.fullInfo?.botInfo)\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isBot,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId,setEditingId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n    setEditingId({ messageId });\n    // setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../config';\nimport { getDocumentExtension, getDocumentHasPreview } from './helpers/documentInfo';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../hooks/useMedia';\nimport useFlag from '../../hooks/useFlag';\n\nimport File from './File';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  smaller?: boolean;\n  isSelected?: boolean;\n  isSelectable?: boolean;\n  canAutoLoad?: boolean;\n  uploadProgress?: number;\n  withDate?: boolean;\n  datetime?: number;\n  className?: string;\n  sender?: string;\n  autoLoadFileMaxSizeMb?: number;\n  isDownloading: boolean;\n  onCancelUpload?: () => void;\n  onMediaClick?: () => void;\n  onDateClick?: (messageId: number, chatId: string) => void;\n};\n\nconst BYTES_PER_MB = 1024 * 1024;\n\nconst Document: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  smaller,\n  canAutoLoad,\n  autoLoadFileMaxSizeMb,\n  uploadProgress,\n  withDate,\n  datetime,\n  className,\n  sender,\n  isSelected,\n  isSelectable,\n  onCancelUpload,\n  onMediaClick,\n  onDateClick,\n  isDownloading,\n}) => {\n  const dispatch = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const document = message.content.document!;\n  const { fileName, size, timestamp } = document;\n  const extension = getDocumentExtension(document) || '';\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const [wasIntersected, markIntersected] = useFlag();\n  useEffect(() => {\n    if (isIntersecting) {\n      markIntersected();\n    }\n  }, [isIntersecting, markIntersected]);\n\n  // Auto-loading does not use global download manager because requires additional click to save files locally\n  const [isLoadAllowed, setIsLoadAllowed] = useState(\n    canAutoLoad && (!autoLoadFileMaxSizeMb || size <= autoLoadFileMaxSizeMb * BYTES_PER_MB),\n  );\n\n  const shouldDownload = Boolean(isDownloading || (isLoadAllowed && wasIntersected));\n\n  const documentHash = getMessageMediaHash(message, 'download');\n  const { loadProgress: downloadProgress, mediaData } = useMediaWithLoadProgress(\n    documentHash, !shouldDownload, getMessageMediaFormat(message, 'download'), undefined, undefined, true,\n  );\n  const isLoaded = Boolean(mediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !isLoaded);\n\n  const hasPreview = getDocumentHasPreview(document);\n  const thumbDataUri = hasPreview ? getMessageMediaThumbDataUri(message) : undefined;\n  const localBlobUrl = hasPreview ? document.previewBlobUrl : undefined;\n  const previewData = useMedia(getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n\n  const withMediaViewer = onMediaClick && Boolean(document.mediaType) && (\n    SUPPORTED_VIDEO_CONTENT_TYPES.has(document.mimeType) || SUPPORTED_IMAGE_CONTENT_TYPES.has(document.mimeType)\n  );\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload();\n      }\n      return;\n    }\n\n    if (isDownloading) {\n      dispatch.cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (isTransferring) {\n      setIsLoadAllowed(false);\n      return;\n    }\n\n    if (withMediaViewer) {\n      onMediaClick!();\n    } else {\n      dispatch.downloadMessageMedia({ message });\n    }\n  }, [\n    isUploading, isDownloading, isTransferring, withMediaViewer, onCancelUpload, dispatch, message, onMediaClick,\n  ]);\n\n  const handleDateClick = useCallback(() => {\n    onDateClick!(message.id, message.chatId);\n  }, [onDateClick, message.id, message.chatId]);\n\n  return (\n    <File\n      ref={ref}\n      name={fileName}\n      extension={extension}\n      size={size}\n      timestamp={withDate ? datetime || timestamp : undefined}\n      thumbnailDataUri={thumbDataUri}\n      previewData={localBlobUrl || previewData}\n      smaller={smaller}\n      isTransferring={isTransferring}\n      isUploading={isUploading}\n      transferProgress={transferProgress}\n      className={className}\n      sender={sender}\n      isSelectable={isSelectable}\n      isSelected={isSelected}\n      actionIcon={withMediaViewer ? (isMessageDocumentVideo(message) ? 'icon-play' : 'icon-eye') : 'icon-download'}\n      onClick={handleClick}\n      onDateClick={onDateClick ? handleDateClick : undefined}\n    />\n  );\n};\n\nexport default memo(Document);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiAudio, ApiMessage, ApiVoice } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\nimport type { ISettings } from '../../types';\nimport { AudioOrigin } from '../../types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { MAX_EMPTY_WAVEFORM_POINTS, renderWaveform } from './helpers/waveform';\nimport renderText from './helpers/renderText';\nimport { getFileSizeString } from './helpers/documentInfo';\nimport {\n  getMediaDuration,\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  isMessageLocal,\n  isOwnMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDateTime, formatMediaDuration, formatPastTimeShort } from '../../util/dateFormat';\nimport { decodeWaveform, interpolateArray } from '../../util/waveform';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport useBuffering from '../../hooks/useBuffering';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport { captureEvents } from '../../util/captureEvents';\nimport useMedia from '../../hooks/useMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Link from '../ui/Link';\n\nimport './Audio.scss';\n\ntype OwnProps = {\n  theme: ISettings['theme'];\n  message: ApiMessage;\n  senderTitle?: string;\n  uploadProgress?: number;\n  origin: AudioOrigin;\n  date?: number;\n  lastSyncTime?: number;\n  noAvatars?: boolean;\n  className?: string;\n  isSelectable?: boolean;\n  isSelected?: boolean;\n  isDownloading: boolean;\n  isTranscribing?: boolean;\n  isTranscribed?: boolean;\n  canDownload?: boolean;\n  canTranscribe?: boolean;\n  isTranscriptionHidden?: boolean;\n  isTranscriptionError?: boolean;\n  onHideTranscription?: (isHidden: boolean) => void;\n  onPlay: (messageId: number, chatId: string) => void;\n  onReadMedia?: () => void;\n  onCancelUpload?: () => void;\n  onDateClick?: (messageId: number, chatId: string) => void;\n};\n\nexport const TINY_SCREEN_WIDTH_MQL = window.matchMedia('(max-width: 375px)');\nexport const WITH_AVATAR_TINY_SCREEN_WIDTH_MQL = window.matchMedia('(max-width: 410px)');\nconst AVG_VOICE_DURATION = 10;\n// This is needed for browsers requiring user interaction before playing.\nconst PRELOAD = true;\n// eslint-disable-next-line max-len\nconst TRANSCRIBE_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 24\" class=\"loading-svg\"><rect class=\"loading-rect\" fill=\"transparent\" width=\"32\" height=\"24\" stroke-width=\"3\" stroke-linejoin=\"round\" rx=\"6\" ry=\"6\" stroke=\"var(--accent-color)\" stroke-dashoffset=\"1\" stroke-dasharray=\"32,68\"></rect></svg>';\n\nconst Audio: FC<OwnProps> = ({\n  theme,\n  message,\n  senderTitle,\n  uploadProgress,\n  origin,\n  date,\n  lastSyncTime,\n  noAvatars,\n  className,\n  isSelectable,\n  isSelected,\n  isDownloading,\n  isTranscribing,\n  isTranscriptionHidden,\n  isTranscribed,\n  isTranscriptionError,\n  canDownload,\n  canTranscribe,\n  onHideTranscription,\n  onPlay,\n  onReadMedia,\n  onCancelUpload,\n  onDateClick,\n}) => {\n  const { cancelMessageMediaDownload, downloadMessageMedia, transcribeAudio } = getActions();\n\n  const { content: { audio, voice, video }, isMediaUnread } = message;\n  const isVoice = Boolean(voice || video);\n  const isSeeking = useRef<boolean>(false);\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isRtl } = lang;\n\n  const { isMobile } = useAppLayout();\n  const [isActivated, setIsActivated] = useState(false);\n  const shouldLoad = (isActivated || PRELOAD) && lastSyncTime;\n  const coverHash = getMessageMediaHash(message, 'pictogram');\n  const coverBlobUrl = useMedia(coverHash, false, ApiMediaFormat.BlobUrl);\n\n  const mediaData = useMedia(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleForcePlay = useCallback(() => {\n    setIsActivated(true);\n    onPlay(message.id, message.chatId);\n  }, [message, onPlay]);\n\n  const handleTrackChange = useCallback(() => {\n    setIsActivated(false);\n  }, []);\n\n  let {\n    isBuffered, bufferedRanges, bufferingHandlers, checkBuffering,\n  } = useBuffering();\n\n  const {\n    isPlaying, playProgress, playPause, setCurrentTime, duration,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    bufferingHandlers,\n    undefined,\n    checkBuffering,\n    isActivated,\n    handleForcePlay,\n    handleTrackChange,\n    isMessageLocal(message),\n  );\n\n  const isOwn = isOwnMessage(message);\n  const waveformCanvasRef = useWaveformCanvas(\n    theme, voice, (isMediaUnread && !isOwn) ? 1 : playProgress, isOwn, !noAvatars, isMobile,\n  );\n\n  const withSeekline = isPlaying || (playProgress > 0 && playProgress < 1);\n\n  useEffect(() => {\n    setIsActivated(isPlaying);\n  }, [isPlaying]);\n\n  const isLoadingForPlaying = isActivated && !isBuffered;\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    isLoadingForPlaying || isDownloading,\n  );\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring);\n\n  const shouldRenderCross = shouldRenderSpinner && (isLoadingForPlaying || isUploading);\n\n  const handleButtonClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.();\n      return;\n    }\n\n    if (!isPlaying) {\n      onPlay(message.id, message.chatId);\n    }\n    console.log(\"[media]\\n\",JSON.stringify(message.content))\n    getActions().setAudioPlayerOrigin({ origin });\n    setIsActivated(!isActivated);\n    playPause();\n  }, [isUploading, isPlaying, isActivated, playPause, onCancelUpload, onPlay, message.id, message.chatId, origin]);\n\n  useEffect(() => {\n    if (onReadMedia && isMediaUnread && (isPlaying || isDownloading)) {\n      onReadMedia();\n    }\n  }, [isPlaying, isMediaUnread, onReadMedia, isDownloading]);\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message });\n    } else {\n      downloadMessageMedia({ message });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      e.stopPropagation(); // Prevent Slide-to-Reply activation\n      // Prevent track skipping while seeking near end\n      setCurrentTime(Math.max(Math.min(duration * ((clientX - left) / width), duration - 0.1), 0.001));\n    }\n  }, [duration, setCurrentTime]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (e instanceof MouseEvent && e.button === 2) return;\n    isSeeking.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n  }, []);\n\n  const handleDateClick = useCallback(() => {\n    onDateClick!(message.id, message.chatId);\n  }, [onDateClick, message.id, message.chatId]);\n\n  const handleTranscribe = useCallback(() => {\n    transcribeAudio({ chatId: message.chatId, messageId: message.id });\n  }, [message.chatId, message.id, transcribeAudio]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !withSeekline) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [withSeekline, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const transcribeSvgMemo = useMemo(() => (\n    <div dangerouslySetInnerHTML={{ __html: TRANSCRIBE_SVG }} />\n  ), []);\n\n  function renderFirstLine() {\n    if (isVoice) {\n      return senderTitle || 'Voice';\n    }\n\n    const { title, fileName } = audio!;\n\n    return title || fileName;\n  }\n\n  function renderSecondLine() {\n    if (isVoice) {\n      return (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          {formatMediaDuration((voice || video)!.duration)}\n        </div>\n      );\n    }\n\n    const { performer } = audio!;\n\n    return (\n      <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n        {formatMediaDuration(duration)}\n        <span className=\"bullet\">&bull;</span>\n        {performer && <span className=\"performer\" title={performer}>{renderText(performer)}</span>}\n        {performer && senderTitle && <span className=\"bullet\">&bull;</span>}\n        {senderTitle && <span title={senderTitle}>{renderText(senderTitle)}</span>}\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'Audio',\n    className,\n    isOwn && origin === AudioOrigin.Inline && 'own',\n    (origin === AudioOrigin.Search || origin === AudioOrigin.SharedMedia) && 'bigger',\n    isSelected && 'audio-is-selected',\n  );\n\n  const buttonClassNames = ['toggle-play'];\n  if (shouldRenderCross) {\n    buttonClassNames.push('loading');\n  } else {\n    buttonClassNames.push(isPlaying ? 'pause' : 'play');\n  }\n\n  const contentClassName = buildClassName('content', withSeekline && 'with-seekline');\n\n  function renderWithTitle() {\n    return (\n      <div className={contentClassName}>\n        <div className=\"content-row\">\n          <p className=\"title\" dir=\"auto\" title={renderFirstLine()}>{renderText(renderFirstLine())}</p>\n\n          <div className=\"message-date\">\n            {Boolean(date) && (\n              <Link\n                className=\"date\"\n                onClick={handleDateClick}\n              >\n                {formatPastTimeShort(lang, date * 1000)}\n              </Link>\n            )}\n          </div>\n        </div>\n\n        {withSeekline && (\n          <div className=\"meta search-result\" dir={isRtl ? 'rtl' : undefined}>\n            <span className=\"duration with-seekline\" dir=\"auto\">\n              {playProgress < 1 && `${formatMediaDuration(duration * playProgress, duration)}`}\n            </span>\n            {renderSeekline(playProgress, bufferedRanges, seekerRef)}\n          </div>\n        )}\n        {!withSeekline && renderSecondLine()}\n      </div>\n    );\n  }\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n      {isSelectable && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color={coverBlobUrl ? 'translucent-white' : 'primary'}\n        className={buttonClassNames.join(' ')}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n        onClick={handleButtonClick}\n        isRtl={lang.isRtl}\n        backgroundImage={coverBlobUrl}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames, shouldRenderCross && 'interactive')}>\n          <ProgressSpinner\n            progress={transferProgress}\n            transparent\n            size=\"m\"\n            onClick={shouldRenderCross ? handleButtonClick : undefined}\n            noCross={!shouldRenderCross}\n          />\n        </div>\n      )}\n      {audio && canDownload && !isUploading && (\n        <Button\n          round\n          size=\"tiny\"\n          className=\"download-button\"\n          ariaLabel={isDownloading ? 'Cancel download' : 'Download'}\n          onClick={handleDownloadClick}\n        >\n          <i className={isDownloading ? 'icon-close' : 'icon-arrow-down'} />\n        </Button>\n      )}\n      {origin === AudioOrigin.Search && renderWithTitle()}\n      {origin !== AudioOrigin.Search && audio && renderAudio(\n        lang,\n        audio,\n        duration,\n        isPlaying,\n        playProgress,\n        bufferedRanges,\n        seekerRef,\n        (isDownloading || isUploading),\n        date,\n        transferProgress,\n        onDateClick ? handleDateClick : undefined,\n      )}\n      {origin === AudioOrigin.SharedMedia && (voice || video) && renderWithTitle()}\n      {origin === AudioOrigin.Inline && voice && (\n        renderVoice(\n          voice,\n          seekerRef,\n          waveformCanvasRef,\n          playProgress,\n          isMediaUnread,\n          isTranscribing,\n          isTranscriptionHidden,\n          isTranscribed,\n          isTranscriptionError,\n          transcribeSvgMemo,\n          canTranscribe ? handleTranscribe : undefined,\n          onHideTranscription,\n        )\n      )}\n    </div>\n  );\n};\n\nfunction getSeeklineSpikeAmounts(isMobile?: boolean, withAvatar?: boolean) {\n  return {\n    MIN_SPIKES: isMobile ? (TINY_SCREEN_WIDTH_MQL.matches ? 16 : 20) : 25,\n    MAX_SPIKES: isMobile\n      ? (TINY_SCREEN_WIDTH_MQL.matches\n        ? 35\n        : (withAvatar && WITH_AVATAR_TINY_SCREEN_WIDTH_MQL.matches ? 40 : 45))\n      : 75,\n  };\n}\n\nfunction renderAudio(\n  lang: LangFn,\n  audio: ApiAudio,\n  duration: number,\n  isPlaying: boolean,\n  playProgress: number,\n  bufferedRanges: BufferedRange[],\n  seekerRef: React.Ref<HTMLElement>,\n  showProgress?: boolean,\n  date?: number,\n  progress?: number,\n  handleDateClick?: NoneToVoidFunction,\n) {\n  const {\n    title, performer, fileName,\n  } = audio;\n  const showSeekline = isPlaying || (playProgress > 0 && playProgress < 1);\n  const { isRtl } = lang;\n\n  return (\n    <div className=\"content\">\n      <p className=\"title\" dir=\"auto\" title={title}>{renderText(title || fileName)}</p>\n      {showSeekline && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          <span className=\"duration with-seekline\" dir=\"auto\">\n            {formatMediaDuration(duration * playProgress, duration)}\n          </span>\n          {renderSeekline(playProgress, bufferedRanges, seekerRef)}\n        </div>\n      )}\n      {!showSeekline && showProgress && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          {progress ? `${getFileSizeString(audio!.size * progress)} / ` : undefined}{getFileSizeString(audio!.size)}\n        </div>\n      )}\n      {!showSeekline && !showProgress && (\n        <div className=\"meta\" dir={isRtl ? 'rtl' : undefined}>\n          <span className=\"duration\" dir=\"auto\">{formatMediaDuration(duration)}</span>\n          {performer && (\n            <>\n              <span className=\"bullet\">&bull;</span>\n              <span className=\"performer\" dir=\"auto\" title={performer}>{renderText(performer)}</span>\n            </>\n          )}\n          {Boolean(date) && (\n            <>\n              <span className=\"bullet\">&bull;</span>\n              <Link className=\"date\" onClick={handleDateClick}>\n                {formatMediaDateTime(lang, date * 1000, true)}\n              </Link>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction renderVoice(\n  voice: ApiVoice,\n  seekerRef: React.Ref<HTMLDivElement>,\n  waveformCanvasRef: React.Ref<HTMLCanvasElement>,\n  playProgress: number,\n  isMediaUnread?: boolean,\n  isTranscribing?: boolean,\n  isTranscriptionHidden?: boolean,\n  isTranscribed?: boolean,\n  isTranscriptionError?: boolean,\n  svgMemo?: React.ReactNode,\n  onClickTranscribe?: VoidFunction,\n  onHideTranscription?: (isHidden: boolean) => void,\n) {\n  return (\n    <div className=\"content\">\n      <div className=\"waveform-wrapper\">\n        <div\n          className=\"waveform\"\n          draggable={false}\n          ref={seekerRef}\n        >\n          <canvas ref={waveformCanvasRef} />\n        </div>\n        {onClickTranscribe && (\n          // eslint-disable-next-line react/jsx-no-bind\n          <Button onClick={() => {\n            if ((isTranscribed || isTranscriptionError) && onHideTranscription) {\n              onHideTranscription(!isTranscriptionHidden);\n            } else if (!isTranscribing) {\n              onClickTranscribe();\n            }\n          }}\n          >\n            <i className={buildClassName(\n              'transcribe-icon',\n              (isTranscribed || isTranscriptionError) ? 'icon-down' : 'icon-transcribe',\n              (isTranscribed || isTranscriptionError) && !isTranscriptionHidden && 'transcribe-shown',\n            )}\n            />\n            {isTranscribing && svgMemo}\n          </Button>\n        )}\n      </div>\n      <p className={buildClassName('voice-duration', isMediaUnread && 'unread')} dir=\"auto\">\n        {playProgress === 0 ? formatMediaDuration(voice.duration) : formatMediaDuration(voice.duration * playProgress)}\n      </p>\n    </div>\n  );\n}\n\nfunction useWaveformCanvas(\n  theme: ISettings['theme'],\n  voice?: ApiVoice,\n  playProgress = 0,\n  isOwn = false,\n  withAvatar = false,\n  isMobile = false,\n) {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const { data: spikes, peak } = useMemo(() => {\n    if (!voice) {\n      return undefined;\n    }\n\n    const { waveform, duration } = voice;\n    if (!waveform) {\n      return {\n        data: new Array(Math.min(duration, MAX_EMPTY_WAVEFORM_POINTS)).fill(0),\n        peak: 0,\n      };\n    }\n\n    const { MIN_SPIKES, MAX_SPIKES } = getSeeklineSpikeAmounts(isMobile, withAvatar);\n    const durationFactor = Math.min(duration / AVG_VOICE_DURATION, 1);\n    const spikesCount = Math.round(MIN_SPIKES + (MAX_SPIKES - MIN_SPIKES) * durationFactor);\n    const decodedWaveform = decodeWaveform(new Uint8Array(waveform));\n\n    return interpolateArray(decodedWaveform, spikesCount);\n  }, [isMobile, voice, withAvatar]) || {};\n\n  useLayoutEffect(() => {\n    const canvas = canvasRef.current;\n\n    if (!canvas || !spikes || peak === undefined) {\n      return;\n    }\n\n    const fillColor = theme === 'dark' ? '#494A78' : '#ADD3F7';\n    const fillOwnColor = theme === 'dark' ? '#B7ABED' : '#AEDFA4';\n    const progressFillColor = theme === 'dark' ? '#8774E1' : '#3390EC';\n    const progressFillOwnColor = theme === 'dark' ? '#FFFFFF' : '#4FAE4E';\n\n    renderWaveform(canvas, spikes, playProgress, {\n      peak,\n      fillStyle: isOwn ? fillOwnColor : fillColor,\n      progressFillStyle: isOwn ? progressFillOwnColor : progressFillColor,\n    });\n  }, [isOwn, peak, playProgress, spikes, theme]);\n\n  return canvasRef;\n}\n\nfunction renderSeekline(\n  playProgress: number,\n  bufferedRanges: BufferedRange[],\n  seekerRef: React.Ref<HTMLElement>,\n) {\n  return (\n    <div\n      className=\"seekline no-selection\"\n      ref={seekerRef as React.Ref<HTMLDivElement>}\n    >\n      {bufferedRanges.map(({ start, end }) => (\n        <div\n          className=\"seekline-buffered-progress\"\n          style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n        />\n      ))}\n      <span className=\"seekline-play-progress\">\n        <i\n          style={`transform: translateX(${playProgress * 100}%)`}\n        />\n      </span>\n      <span className=\"seekline-thumb\">\n        <i\n          style={`transform: translateX(${playProgress * 100}%)`}\n        />\n      </span>\n    </div>\n  );\n}\n\nexport default memo(Audio);\n","type IWaveformProps = {\n  peak: number;\n  fillStyle: string;\n  progressFillStyle: string;\n};\n\nexport const MAX_EMPTY_WAVEFORM_POINTS = 30;\nconst SPIKE_WIDTH = 2;\nconst SPIKE_STEP = 4;\nconst SPIKE_RADIUS = 1;\nconst HEIGHT = 23;\n\nexport function renderWaveform(\n  canvas: HTMLCanvasElement,\n  spikes: number[],\n  progress: number,\n  {\n    peak, fillStyle, progressFillStyle,\n  }: IWaveformProps,\n) {\n  const width = spikes.length * SPIKE_STEP;\n  const height = HEIGHT;\n\n  canvas.width = width * 2;\n  canvas.height = height * 2;\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n\n  const ctx = canvas.getContext('2d')!;\n  ctx.scale(2, 2);\n\n  spikes.forEach((item, i) => {\n    ctx.globalAlpha = (i / spikes.length >= progress) ? 0.5 : 1;\n    ctx.fillStyle = progress > i / spikes.length ? progressFillStyle : fillStyle;\n    const spikeHeight = Math.max(2, HEIGHT * (item / Math.max(1, peak)));\n    roundedRectangle(ctx, i * SPIKE_STEP, (height + spikeHeight) / 2, SPIKE_WIDTH, spikeHeight, SPIKE_RADIUS);\n    ctx.fill();\n  });\n}\n\nfunction roundedRectangle(\n  ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number,\n) {\n  if (width < 2 * radius) {\n    radius = width / 2;\n  }\n  if (height < 2 * radius) {\n    radius = height / 2;\n  }\n\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.arcTo(x + width, y, x + width, y - height, radius);\n  ctx.arcTo(x + width, y - height, x, y - height, radius);\n  ctx.arcTo(x, y - height, x, y, radius);\n  ctx.arcTo(x, y, x + width, y, radius);\n  ctx.closePath();\n}\n","/* eslint-disable no-bitwise */\n\n// Ref: https://github.com/telegramdesktop/tdesktop/blob/0743e71ab6b928d2ee5bae1aed991849b1e2b291/Telegram/SourceFiles/data/data_document.cpp#L1018\nexport function decodeWaveform(encoded5bit: Uint8Array) {\n  const bitsCount = encoded5bit.length * 8;\n  const valuesCount = Math.floor(bitsCount / 5);\n  if (!valuesCount) {\n    return [];\n  }\n\n  // Read each 5 bit of encoded5bit as 0-31 unsigned char.\n  // We count the index of the byte in which the desired 5-bit sequence starts.\n  // And then we read a uint16 starting from that byte to guarantee to get all of those 5 bits.\n  //\n  // BUT! if it is the last byte we have, we're not allowed to read a uint16 starting with it.\n  // Because it will be an overflow (we'll access one byte after the available memory).\n  // We see, that only the last 5 bits could start in the last available byte and be problematic.\n  // So we read in a general way all the entries in a general way except the last one.\n  const result = Array(valuesCount);\n  const bitsData = encoded5bit;\n  for (let i = 0, l = valuesCount - 1; i !== l; ++i) {\n    const byteIndex = Math.floor((i * 5) / 8);\n    const bitShift = Math.floor((i * 5) % 8);\n    const value = bitsData[byteIndex] + (bitsData[byteIndex + 1] << 8);\n    result[i] = ((value >> bitShift) & 0x1F);\n  }\n  const lastByteIndex = Math.floor(((valuesCount - 1) * 5) / 8);\n  const lastBitShift = Math.floor(((valuesCount - 1) * 5) % 8);\n  const lastValue = bitsData[lastByteIndex] + (bitsData[lastByteIndex + 1] << 8);\n  result[valuesCount - 1] = (lastValue >> lastBitShift) & 0x1F;\n\n  return result;\n}\n\nexport function interpolateArray(data: number[], fitCount: number) {\n  let peak = 0;\n  const newData = new Array(fitCount);\n  const springFactor = data.length / fitCount;\n  const leftFiller = data[0];\n  const rightFiller = data[data.length - 1];\n  for (let i = 0; i < fitCount; i++) {\n    const idx = Math.floor(i * springFactor);\n    const val = ((data[idx - 1] ?? leftFiller) + (data[idx] ?? leftFiller) + (data[idx + 1] ?? rightFiller)) / 3;\n    newData[i] = val;\n    if (peak < val) {\n      peak = val;\n    }\n  }\n  return { data: newData, peak };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  noReplies,\n  isTranslated,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'requestUploadImage':\n        return <i className=\"icon-photo\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\" onDoubleClick={(e)=>{\n          e.preventDefault();\n          e.stopPropagation();\n          return false\n        }}>\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={(e) => {\n                onClick({ messageId: message.id, button })\n              }}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\nimport {TEXT_AI_THINKING} from \"../../../worker/setting\";\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    (message.senderId === \"1\") && 'selfSend',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { result: detectedLanguage } = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message) && message.content;\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleEditClick = useCallback(() => {\n    if(message.senderId === \"1\" && message.content.text && message.content.text.text && !message.content.text.text.startsWith(\"/\")){\n      if (handleDoubleClick) {\n        handleDoubleClick();\n      }\n      return false\n    }\n  },[])\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), withCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if(message.content.text?.text === TEXT_AI_THINKING){\n      return <DotAnimation className=\"status\" content={TEXT_AI_THINKING.replace(\"...\",\"\")} />\n    }\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <>\n            <div className={textContentClass} dir=\"auto\"\n                 onDoubleClick={handleEditClick}>\n              {renderMessageText()}\n              {isTranslationPending && (\n                <div className=\"translation-animation\">\n                  <div className=\"text-loading\">\n                    {renderMessageText(true)}\n                  </div>\n                </div>\n              )}\n              {metaPosition === 'in-text' && renderReactionsAndMeta()}\n            </div>\n\n          </>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    if(sender?.id === \"1\"){\n      return\n    }\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    let {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    withAvatar = true;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    let canShowSender = withSenderName || withAvatar || forceSenderName;\n\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { detectLanguage } from '../util/languageDetection';\nimport useAsync from './useAsync';\n\nexport default function useTextLanguage(text?: string) {\n  const language = useAsync(() => (text ? detectLanguage(text) : Promise.resolve(undefined)), [text], undefined);\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      {/*<span>{lang('UnreadMessages')}</span>*/}\n      <span></span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('ChatYourSelfTitle')}</h3>\n        <ul className=\"description\">\n          <li>{lang('ChatYourSelfDescription1')}</li>\n          <li>{lang('ChatYourSelfDescription2')}</li>\n          <li>{lang('ChatYourSelfDescription3')}</li>\n          <li>{lang('ChatYourSelfDescription1')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset, selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,focusMessage\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    // if (areMessagesLoaded) {\n    //   memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    // }\n    memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      // newScrollTop = Math.min(\n      //   unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n      //   scrollHeight - scrollOffset,\n      // );\n      newScrollTop = scrollHeight - scrollOffset;\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  let withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  let noAvatars = Boolean(!withUsers || isChannelChat);\n  noAvatars = false\n  withUsers = true;\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n\n    if (!isShown) {\n      return;\n    }\n    if (messageListType !== 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport {resizeImage, scaleImage} from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let thumbBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n    if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n\n  }\n\n  return {\n    blobUrl,\n    thumbBlobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n  canSendVideos = false;\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n      true\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false),true);\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {/*{canAttachPolls && (*/}\n        {/*  <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>*/}\n        {/*)}*/}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {ApiDraft, GlobalState, MessageListType, TabState,} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiAttachMenuPeerType,\n  ApiBotCommand,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotMenuButton,\n  ApiChat,\n  ApiChatMember,\n  ApiFormattedText,\n  ApiMessage,\n  ApiNewPoll,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type {InlineBotSettings, ISettings} from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  EDITABLE_INPUT_MODAL_ID,\n  MAX_UPLOAD_FILEPART_SIZE,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport {IS_IOS, IS_VOICE_RECORDING_SUPPORTED} from '../../../util/environment';\nimport {MEMO_EMPTY_ARRAY} from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport {formatMediaDuration, formatVoiceRecordDuration} from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, {prepareAttachmentsToSend} from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport {insertHtmlInSelection} from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport {isSelectionInsideInput} from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport {getServerTime} from '../../../util/serverTime';\nimport {selectCurrentLimit} from '../../../global/selectors/limits';\nimport {buildCustomEmojiHtml} from './helpers/customEmoji';\nimport {processMessageInputForCustomEmoji} from '../../../util/customEmojiManager';\nimport {getTextWithEntitiesAsHtml} from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {useStateRef} from '../../../hooks/useStateRef';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, {DropAreaState} from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n  const [speechRecognizing, setSpeechRecognizing] = useState(false);\n\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    // if(speechRecognizing){\n    //   return MainButtonState.Send;\n    // }\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, speechRecognizing,editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n    // if(speechRecognizing){\n    //   recognition.stop();\n    //   setSpeechRecognizing(false);\n    //   return\n    // }\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          // recognition.start().then((res:string)=>{\n          //   setHtml(res);\n          // }).catch((e)=>{\n          //   console.error(e)\n          //   // setSpeechRecognizing(false);\n          // });\n          // setSpeechRecognizing(true);\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n  const [passwordOpen,setPasswordOpen] = useState(true);\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={false}\n              canSendGifs={false}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              (activeVoiceRecording )&& windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {(activeVoiceRecording ) && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {(activeVoiceRecording) && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={ ()=>{\n            // recognition.stop();\n            // setSpeechRecognizing(false)\n            stopRecordingVoice()\n          } }\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState,\"mainSendBtn\", !isReady && 'not-ready', ( activeVoiceRecording) && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport {getActions, getGlobal, withGlobal} from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\nimport Account from \"../../worker/share/Account\";\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\nimport {SERVER_BOT_USER_ID_START, UserIdFirstBot} from \"../../worker/setting\";\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {/* {currentInviteInfo && !currentInviteInfo.isRevoked && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('Edit')} */}\n              {/*     onClick={handleEditInviteClick} */}\n              {/*   > */}\n              {/*     <i className=\"icon-edit\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {/* {canAddContact && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('AddContact')} */}\n              {/*     onClick={handleAddContact} */}\n              {/*   > */}\n              {/*     <i className=\"icon-add-user\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n               {canManage && !isInsideTopic && (\n                 <Button\n                   round\n                   color=\"translucent\"\n                   size=\"smaller\"\n                   ariaLabel={lang('Edit')}\n                   onClick={handleToggleManagement}\n                 >\n                   <i className=\"icon-edit\" />\n                 </Button>\n               )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    let canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    if(isBot){\n      const {userStoreData} = global\n      canManage = false\n      if(chatId && userStoreData && userStoreData.myBots && userStoreData.myBots.includes(chatId)){\n        canManage = true;\n      }\n      if(chatId && parseInt(chatId) == parseInt(SERVER_BOT_USER_ID_START)){\n        canManage = true;\n      }\n    }\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isUserId,\n  isChatGroup,\n} from '../../../../global/helpers';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport function getSenderName(\n  lang: LangFn, message: ApiMessage, chatsById: Record<string, ApiChat>, usersById: Record<string, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isUserId(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(lang, sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isUserId(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `${lang('FromYou')} → ${getChatTitle(lang, chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(lang, chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport {\n  getMessageHtmlId,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\n\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick?: (messageId: number, chatId: string) => void;\n};\n\nconst Media: FC<OwnProps> = ({\n  message,\n  idPrefix = 'shared-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const video = getMessageVideo(message);\n\n  const hasSpoiler = getMessageIsSpoiler(message);\n  const [isSpoilerShown, , hideSpoiler] = useFlag(hasSpoiler);\n\n  const handleClick = useCallback(() => {\n    hideSpoiler();\n    onClick!(message.id, message.chatId);\n  }, [hideSpoiler, message, onClick]);\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${getMessageHtmlId(message.id)}`}\n      className=\"Media scroll-item\"\n      onClick={onClick ? handleClick : undefined}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {hasSpoiler && (\n        <MediaSpoiler\n          thumbDataUri={mediaBlobUrl || thumbDataUri}\n          isVisible={isSpoilerShown}\n          className=\"media-spoiler\"\n        />\n      )}\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(Media);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiMessage, ApiWebPage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getFirstLinkInMessage, getMessageText,\n  getMessageWebPage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport trimText from '../../util/trimText';\nimport renderText from './helpers/renderText';\nimport { formatPastTimeShort } from '../../util/dateFormat';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport Media from './Media';\nimport Link from '../ui/Link';\nimport SafeLink from './SafeLink';\n\nimport './WebLink.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  senderTitle?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onMessageClick: (messageId: number, chatId: string) => void;\n};\n\ntype ApiWebPageWithFormatted =\n  ApiWebPage\n  & { formattedDescription?: TextPart[] };\n\nconst WebLink: FC<OwnProps> = ({\n  message, senderTitle, isProtected, observeIntersection, onMessageClick,\n}) => {\n  const lang = useLang();\n\n  let linkData: ApiWebPageWithFormatted | undefined = getMessageWebPage(message);\n\n  if (!linkData) {\n    const link = getFirstLinkInMessage(message);\n    if (link) {\n      const { url, domain } = link;\n\n      linkData = {\n        siteName: domain.replace(/^www./, ''),\n        url: url.includes('://') ? url : url.includes('@') ? `mailto:${url}` : `http://${url}`,\n        formattedDescription: getMessageText(message) !== url\n          ? renderMessageSummary(lang, message, undefined, undefined, MAX_TEXT_LENGTH)\n          : undefined,\n      } as ApiWebPageWithFormatted;\n    }\n  }\n\n  const handleMessageClick = useCallback(() => {\n    onMessageClick(message.id, message.chatId);\n  }, [onMessageClick, message.id, message.chatId]);\n\n  if (!linkData) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    formattedDescription,\n    photo,\n    video,\n  } = linkData;\n\n  const truncatedDescription = !senderTitle && description && trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebLink scroll-item',\n    (!photo && !video) && 'without-media',\n  );\n\n  const safeLinkContent = url.replace('mailto:', '') || displayUrl;\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {photo && (\n        <Media message={message} isProtected={isProtected} observeIntersection={observeIntersection} />\n      )}\n      <div className=\"content\">\n        <Link isRtl={lang.isRtl} className=\"site-title\" onClick={handleMessageClick}>\n          {renderText(title || siteName || displayUrl)}\n        </Link>\n        {(truncatedDescription || formattedDescription) && (\n          <Link isRtl={lang.isRtl} className=\"site-description\" onClick={handleMessageClick}>\n            {formattedDescription || (truncatedDescription && renderText(truncatedDescription))}\n          </Link>\n        )}\n        <SafeLink\n          url={url}\n          className=\"site-name\"\n          text={safeLinkContent}\n          isRtl={lang.isRtl}\n        />\n        {senderTitle && <div className=\"sender-name\">{renderText(senderTitle)}</div>}\n      </div>\n      {senderTitle && (\n        <div className=\"message-date\">\n          <Link\n            className=\"date\"\n            onClick={handleMessageClick}\n            isRtl={lang.isRtl}\n          >\n            {formatPastTimeShort(lang, message.date * 1000)}\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebLink);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          {/* <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} /> */}\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport Modal from './Modal';\nimport PasswordMonkey from \"../common/PasswordMonkey\";\nimport PasswordForm from \"../common/PasswordForm\";\nimport {passwordCheck} from \"../../worker/share/utils/helpers\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nexport type PasswordHelperType = undefined | \"showMnemonic\" | \"messageEncryptPassword\"\n\nconst PasswordModal: FC<OwnProps> = ({}: OwnProps) => {\n\n  const [open, setOpen] = useState<boolean>(false);\n  const [noBackdropClose, setNoBackdropClose] = useState<boolean>(false);\n\n  const [showHitInput, setShowHitInput] = useState<boolean>(false);\n  const [passwordHelper, setPasswordHelper] = useState<PasswordHelperType>(undefined);\n  const [validationError, setValidationError] = useState<string>('');\n  const [hint, setHint] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const lang = useLang();\n\n  const handleSubmit = useCallback((password) => {\n    if (!passwordCheck(password)) {\n      setValidationError(lang(\"PasswordTipsCheck\"))\n      return\n    }\n    if (onConfirm) {\n      onConfirm({password, hint});\n      setOpen(false)\n    }\n  }, [hint]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        setOpen(true);\n        // @ts-ignore\n        onConfirm = e.detail.callback;\n        // @ts-ignore\n        setNoBackdropClose(e.detail.noBackdropClose)\n        // @ts-ignore\n        setPasswordHelper(e.detail.passwordHelper)\n        // @ts-ignore\n        setHint(e.detail.hint)\n        // @ts-ignore\n        setShowHitInput(!e.detail.hideHitInput);\n      }\n    }\n    document.addEventListener('password', evt);\n    return () => {\n      document.removeEventListener('password', evt);\n    }\n  }, [setHint, setShowHitInput, open])\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  return (\n    <Modal\n      hasCloseButton={!noBackdropClose}\n      isOpen={open}\n      noBackdropClose={noBackdropClose}\n      onClose={() => {\n        if(noBackdropClose){\n          return false\n        }\n        if (onConfirm) {\n          onConfirm({password: \"\", hint: \"\"});\n        }\n        setOpen(false)\n      }}\n      title=\"Password\"\n      className=\"\"\n    >\n      <div className=\"settings-content password-form custom-scroll background\">\n        <div className=\"settings-content-header no-border\">\n          <PasswordMonkey isBig isPasswordVisible={shouldShowPassword}/>\n        </div>\n        <div className=\"pt-0 pb-0 mb-2 background\">\n          {\n            showHitInput &&\n            <InputText\n              id=\"pwd-hint\"\n              type={\"text\"}\n              label={lang(\"PasswordTipsLocalHint\")}\n              onChange={(e) => {\n                setHint(e.target.value)\n              }}\n              value={hint}\n              autoComplete=\"given-name\"\n            />\n          }\n          <PasswordForm\n            error={validationError}\n            hint={(!showHitInput && hint) ? hint : lang(\"PasswordTipsLocalPlaceholder\")}\n            shouldDisablePasswordManager={true}\n            submitLabel={lang('Next')}\n            clearError={handleClearError}\n            isLoading={false}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={true}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n        {\n          passwordHelper === \"messageEncryptPassword\" &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"PasswordTipsLocalStorage\")}</li>\n              <li>{lang(\"PasswordTipsLocalStorage1\")}</li>\n            </ul>\n          </div>\n        }\n        {\n          passwordHelper === \"showMnemonic\" &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"密码不会存储服务器,跟账户助记词直接相关，请牢记密码和妥善保管助记词\")}</li>\n            </ul>\n          </div>\n        }\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PasswordModal);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {useCallback, useEffect, useRef,} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useAsync from '../../hooks/useAsync';\n\nimport Loading from '../ui/Loading';\n\nimport blankUrl from '../../assets/blank.png';\nimport Button from \"../ui/Button\";\n\ntype OwnProps ={ content?:string,tips?:string};\n\nconst DATA_PREFIX = 'wai://';\nconst QR_SIZE = 280;\n\nlet qrCodeStylingPromise: Promise<typeof import('qr-code-styling')>;\n\nfunction ensureQrCodeStyling() {\n  if (!qrCodeStylingPromise) {\n    qrCodeStylingPromise = import('qr-code-styling');\n  }\n  return qrCodeStylingPromise;\n}\n\nconst QrCode: FC<OwnProps> = ({content,tips}) => {\n\n  // @ts-ignore\n  const qrCodeRef = useRef<HTMLDivElement>(null);\n  const [isQrMounted, markQrMounted, unmarkQrMounted] = useFlag();\n\n  const { result: qrCode } = useAsync(async () => {\n    const QrCodeStyling = (await ensureQrCodeStyling()).default;\n    return new QrCodeStyling({\n      width: QR_SIZE,\n      height: QR_SIZE,\n      // image: blankUrl,\n      margin: 10,\n      type: 'svg',\n      dotsOptions: {\n        type: 'rounded',\n      },\n      cornersSquareOptions: {\n        type: 'extra-rounded',\n      },\n      imageOptions: {\n        imageSize: 0.4,\n        margin: 8,\n      },\n      qrOptions: {\n        errorCorrectionLevel: 'M',\n      },\n    });\n  }, []);\n\n  const transitionClassNames = useMediaTransition(isQrMounted);\n\n  useEffect(() => {\n    if (!qrCode) {\n      return () => {\n        unmarkQrMounted();\n      };\n    }\n\n    const container = qrCodeRef.current!;\n    const data = `${DATA_PREFIX}${content}`;\n    qrCode.update({\n      data,\n    });\n\n    if (!isQrMounted) {\n      qrCode.append(container);\n      markQrMounted();\n    }\n    return undefined;\n  }, [content,isQrMounted, markQrMounted, unmarkQrMounted, qrCode]);\n  const onDownload = useCallback(()=>{\n    if(qrCode){\n      qrCode.download()\n    }\n  },[qrCode])\n  return (\n    <div id=\"auth-qr-form\" className=\"custom-scroll\">\n      <div className=\"qr-outer\">\n        <div\n          className={buildClassName('qr-inner', transitionClassNames)}\n          key=\"qr-inner\"\n        >\n          <div\n            key=\"qr-container\"\n            className=\"qr-container\"\n            ref={qrCodeRef}\n            style={`width: ${QR_SIZE}px; height: ${QR_SIZE}px`}\n          />\n        </div>\n        {!isQrMounted && <div className=\"qr-loading\"><Loading /></div>}\n      </div>\n      <div className={'pt-2'} style={\"text-align:center\"}><code>{tips}</code></div>\n      {\n        content &&\n        <div className={'pt-2'} style={\"text-align:center;word-break: break-word;\"}><code>{`${DATA_PREFIX}${content}`}</code></div>\n      }\n\n      <Button isText disabled={!isQrMounted} onClick={onDownload}>下载</Button>\n    </div>\n  );\n};\n\nexport default QrCode;\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport Modal from './Modal';\nimport {getActions, withGlobal} from \"../../global\";\nimport {getPasswordFromEvent} from \"../../worker/share/utils/password\";\nimport Account from \"../../worker/share/Account\";\nimport Mnemonic from \"../../lib/ptp/wallet/Mnemonic\";\nimport {aesEncrypt} from \"../../util/passcode\";\nimport {hashSha256} from \"../../worker/share/utils/helpers\";\nimport {PbQrCode} from \"../../lib/ptp/protobuf/PTPCommon\";\nimport {QrCodeType} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport QrCode from \"../common/QrCode\";\n\ntype OwnProps = {};\ntype StateProps = {\n  showMnemonicModal?:boolean\n};\n\nconst MnemonicModal: FC<OwnProps & StateProps> = ({showMnemonicModal}) => {\n  const {updateGlobal,showNotification} = getActions();\n  const [mnemonic,setMnemonic] = useState(\"\");\n  const [mnemonicEncrypt,setMnemonicEncrypt] = useState(\"\");\n\n  const onCloseModal = useCallback(async ()=>{\n    setMnemonic(\"\")\n    setMnemonicEncrypt(\"\")\n    updateGlobal({showMnemonicModal:undefined})\n  },[])\n\n  useEffect(()=>{\n    const init = async ()=>{\n      const {password} = await getPasswordFromEvent(undefined,true,'showMnemonic')\n      if(!password){\n        updateGlobal({showMnemonicModal:undefined})\n        return\n      }\n      const account = Account.getCurrentAccount();\n      if(!account?.getSession()){\n        updateGlobal({showMnemonicModal:undefined})\n        return showNotification({message:\"没有登录\"})\n      }\n      const res = await account?.verifySession(account?.getSession(),password);\n      if(!res){\n        updateGlobal({showMnemonicModal:undefined})\n        return showNotification({message:\"密码不正确\"})\n      }\n      const entropy = await Account.getCurrentAccount()!.getEntropy();\n      const m = Mnemonic.fromEntropy(entropy);\n      const words = m.getWords();\n      const e = await aesEncrypt(words,Buffer.from(hashSha256(password),'hex'))\n      setMnemonicEncrypt(Buffer.from(new PbQrCode({\n        type:QrCodeType.QrCodeType_MNEMONIC,\n        data:Buffer.from(e)\n      }).pack().getPbData()).toString(\"hex\"))\n      setMnemonic(words);\n    }\n    if(showMnemonicModal){\n      init();\n    }\n\n  },[showMnemonicModal])\n\n  if(!mnemonic){\n    return null\n  }\n  return (\n    <Modal title={\"助记词\"} isOpen={!!showMnemonicModal} hasCloseButton={true} onClose={onCloseModal}>\n      <QrCode content={mnemonicEncrypt} tips={mnemonic} />\n    </Modal>\n  )\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global ): StateProps => {\n    const {\n      showMnemonicModal,\n    } = global;\n    return {\n      showMnemonicModal,\n    };\n  },\n)(MnemonicModal));\n\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from \"../../global\";\nimport ChatOrUserPicker from \"../common/ChatOrUserPicker\";\nimport MsgCommandSetting from '../../worker/msg/MsgCommandSetting';\n\ntype OwnProps = {};\ntype StateProps = {\n  botIds:string[],\n  showPickBotModal?:boolean\n};\n\nconst PickBotModal: FC<OwnProps & StateProps> = ({showPickBotModal,botIds}) => {\n  const [search,setSearch] = useState(\"\");\n  const {updateGlobal} = getActions();\n\n  const handleSelect = useCallback((userId: string) => {\n    MsgCommandSetting.onSelectSyncBot(userId)\n    updateGlobal({\n      showPickBotModal:false\n    })\n  }, []);\n\n  const handleClose = useCallback(() => {\n    updateGlobal({\n      showPickBotModal:false\n    })\n  }, []);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={!!showPickBotModal}\n      chatOrUserIds={botIds}\n      searchPlaceholder={\"请选择要同步的机器人\"}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={()=>{}}\n      onSelectChatOrUser={handleSelect}\n      onClose={handleClose}\n    />\n  )\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global ): StateProps => {\n    const {\n      userStoreData,\n      showPickBotModal,\n      users:{\n        byId:users\n      }\n    } = global;\n    let botIds = Object.keys(users).filter(id=>id !== \"1\");\n    if(userStoreData && userStoreData.chatIdsDeleted){\n      botIds = botIds.filter(id=>!userStoreData.chatIdsDeleted.includes(id))\n    }\n\n    return {\n      botIds,\n      showPickBotModal,\n    };\n  },\n)(PickBotModal));\n\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport Modal from './Modal';\nimport {ShowModalFromEventPayload} from \"../../worker/share/utils/modal\";\nimport Button from \"./Button\";\nimport TextArea from \"./TextArea\";\nimport {ChangeEvent} from \"react\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nconst GlobalModal: FC<OwnProps> = ({}: OwnProps) => {\n  const [payload, setPayload] = useState<ShowModalFromEventPayload|undefined>(undefined);\n  const [open, setOpen] = useState<boolean>(false);\n  const [value, setValue] = useState<string>(\"\");\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    let {value} = e.target\n    setValue(value);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (onConfirm) {\n      if(payload?.inputType === 'number'){\n        onConfirm({value});\n      }else{\n        onConfirm({value:value.trim()});\n      }\n      setOpen(false)\n      setValue(\"\")\n    }\n  }, [value]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        //@ts-ignore\n        const payload = e.detail.payload;\n        setPayload({\n          type:\"singleInput\",\n          title:\"请输入\",\n          ...payload,\n        })\n        //@ts-ignore\n        onConfirm = e.detail.callback;\n        setOpen(true);\n        setValue(payload.initVal|| \"\")\n      }\n    }\n    document.addEventListener('modal', evt);\n    return () => {\n      document.removeEventListener('modal', evt);\n    }\n  }, [open])\n\n  return (\n    <Modal\n      hasCloseButton\n      isOpen={open}\n      onClose={() => {\n        // if (onConfirm) {\n        //   onConfirm({value: \"\"});\n        // }\n        setValue(\"\")\n        setOpen(false)\n      }}\n      title={payload && payload.title}\n      className=\"\"\n    >\n      {\n        payload && (payload.type === 'multipleInput' || payload.type === 'singleInput' )&&\n        <div className=\"settings-content password-form custom-scroll background\">\n          <div className=\"pt-4 pb-4 mb-2 background\">\n            {\n              payload.type !== 'multipleInput' ?\n                <InputText\n                  type={payload.inputType || \"text\"}\n                  label={payload.placeholder||\"\"}\n                  step={payload.step}\n                  min={payload.min}\n                  max={payload.max}\n                  onChange={handleChange}\n                  value={value}\n                  autoComplete=\"given-name\"\n                />:\n                <TextArea\n                  value={value}\n                  onChange={handleChange}\n                  label={payload.placeholder||\"\"}\n                  disabled={false}\n                />\n            }\n          </div>\n          <Button type=\"button\" onClick={handleSubmit} ripple={true} isLoading={false} disabled={false}>\n            下一步\n          </Button>\n        </div>\n      }\n\n    </Modal>\n  );\n};\n\nexport default memo(GlobalModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\nimport PasswordModal from \"../ui/PasswordModal\";\nimport Modal from \"../ui/Modal\";\nimport QrCode from \"../common/QrCode\";\nimport {UserIdFirstBot} from \"../../worker/setting\";\nimport ChatOrUserPicker from \"../common/ChatOrUserPicker\";\nimport MnemonicModal from \"../ui/MnemonicModal\";\nimport PickBotModal from \"../ui/PickBotModal\";\nimport GlobalModal from \"../ui/GlobalModal\";\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n      <PasswordModal/>\n      <GlobalModal/>\n      <MnemonicModal />\n      <PickBotModal />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../global';\n\nimport type {GlobalState} from '../../global/types';\n\nimport {LOCAL_TGS_URLS} from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport {decryptSession} from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return <div className={styles.help}></div>\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","utterance","SpeechSynthesisUtterance","selectedText","getSelection","toString","document","selection","createRange","selectChatMessage","content","speechSynthesis","speak","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","saveDraft","draft","entities","shouldForce","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","length","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","toggleMessageSelectAll","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","async","msgId","messages1","i","time","currentTs","MsgCommandSetting","uploadMsgList","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","currentChat","getChatTitle","topics","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","previousGlobal","parse","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","LoadMoreDirection","isBudgetPreload","isRestricted","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","offsetId","isOutlying","historyIds","newViewportIds","areSomeLocal","areAllLocal","getViewportSlice","safeReplaceViewportIds","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","MESSAGE_LIST_SLICE","replyOriginForId","threadUpdate","callApi","MESSAGE_DELETED","updateChatMessage","addUsers","buildCollectionByKey","users","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","attachments","a","shouldSendAsSpoiler","password","hint","getPasswordFromEvent","attachment","blobUrl","mimeType","buf","blobToBuffer","fetchBlob","cipher","Account","encryptData","bb","popByteBuffer","hintLen","typeLen","writeInt16","writeBytes","Buffer","from","res","toUint8Array","blob","Blob","encryptUrl","URL","createObjectURL","size","quality","thumbBlobUrl","resizeImage","entity","substr","replaceSubstring","repeat","log","scheduledAt","replyingToMessage","replyingToTopId","selectThreadTopMessageId","replyToTopMessageId","params","replyingTo","noWebPage","selectNoWebPage","sendAs","selectUser","clearWebPagePreview","isSingle","isGrouped","shouldGroupMessages","restParams","sendMessage","commonParams","byType","index","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","MsgDispatcher","setEditingId","progressCallback","get","getMessageOriginalId","cancelApiProgress","user","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","byId","editingId","selectEditingId","selectEditingScheduledId","UserIdFirstBot","activeChat","deleteChat","chatFolders","userStoreData","folder","includedChatIds","chatIdsDeleted","idDeleted","currentTs1000","chatIds","listIds","active","messagesDeleted","callApiWithPdu","SyncReq","pack","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","to","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","b","selectSendAs","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadViewportMessagesCache","addOffset","flag","threadsById","lastViewportIds","updateListedIds","isUp","listedIds1","ids1","isLocalMessageId","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","addChatMessagesById","updateOutlyingIds","addChats","updateThreadInfos","areSortedArraysIntersecting","sourceIds","findClosestIndex","indexForDirection","progress","localMessage","messageLocalId","has","set","fileUploads","byMessageLocalId","IS_IOS","rafPromise","botInfo","fullInfo","process","delete","shouldSendAsFile","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","seenByUserIds","sendAsId","sendAsChat","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","parseInt","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","totalCount","nextOffsetId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","topCats","cats","cat","botIds","TopCatsReq","chatListIdsActive","messagesList","userIds","userIdList","firstName","toLowerCase","lastName","bio","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","imgToBlob","thumbnailUrl","thumbnail","blobToDataUri","updateUsers","getUserFirstOrLastName","releaseStatusTimeout","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","lastSyncTime","initFolderManager","addCallback","connectionState","authState","msgClientState","getActions","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","loadProfilePhotos","profileId","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","localUsers","globalUsers","phoneNumber","phone","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openUrl","MsgCommand","answerCallbackButton","openSystemFilesDialog","Array","target","requestUploadImage","openPollModal","receiptMessageId","getReceipt","openInvoice","isGame","openGame","alert","isError","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","currentChatId","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","currentPassword","onSuccess","isSuccess","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","updateStatistics","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","handleChatFoldersEdit","changed","CLOUD_MESSAGE_API","prevIsForum","lastReadOutboxMessageId","listActiveIds","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","pinnedId","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","loadTopicById","loadTopics","parseCodeBlock","reg","codeBlock","j","exec","ApiMessageEntityTypes","endsWith","substring","parseMentionName","regex","parseCmd","commands","RegExp","matches","parseEntities","ANIMATION_DELAY","handleMessageEntities","msgSend","handleMessageTextCode","cmd","handleBotCmdText","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","RemoveMessagesReq","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","messageNew","thread","currentThreadId","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","user1","aiBot","chatGptConfig","welcome","template","templateSubmit","init_system_content","statusById","handleUpdateBots","myBots","userStoreDataRes","updateUserStoreData","chatGptAskHistory","msgIdAssistant","msgIdUser","userBotUpdate","api_key","localStorage","setItem","updateGlobal","lastScrollOffset","listIds_active","forceOnHeavyAnimation","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","CustomEmojiEffect","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","currentAccountAddress","chatsById","isConnectionStatusMinimized","topSearchPlaceHolder","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","LeftMainHeader","shouldHideSearch","contactsFilter","onSearchQuery","onSelectProfile","onSelectFolder","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","fetchTopCats","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","signOut","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleClearCache","cacheApi","clear","LANG_CACHE_NAME","ASSET_CACHE_NAME","reload","handleSignOutClick","history","replaceState","forceInitApi","handleLoginClick","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","CLOUD_MESSAGE_ENABLE","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","archived","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","hasArchivedChats","maxFolders","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","NewChatButton","isShown","onNewPrivateChat","onNewChannel","onNewGroup","createChat","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectProfile","handleSelectFolder","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","LeftColumnContentStr","sessionStorage","getItem","leftColumnContent","nextSettingsScreen","isChatOpen","chatCreationProgress","isFirstChatFolderActive","LeftColumn","setGlobalSearchContent","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","setContent_","v","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","PinnedMessageNavigation","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","HeaderPinnedMessage","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","DEFAULT_HANDLERS","play","seekbackward","seekforward","previoustrack","nexttrack","stop","seekTo","updateMetadata","metadata","mediaSession","setMediaSessionHandlers","handlers","handler","setActionHandler","setPlaybackState","playbackState","setPositionState","duration","useAudioPlayer","trackId","originalDuration","trackType","onInit","shouldPlay","onForcePlay","onTrackChange","noPlaylist","noProgressUpdates","controllerRef","isPlaying","setIsPlaying","isPlayingSync","playProgress","setPlayProgress","handleTrackChange","register","eventName","setVolume","setPlaybackRate","toggleMuted","proxy","warn","registerMediaSession","mediaHandlers","setCurrentTime","requestNextTrack","requestPreviousTrack","isLast","closeAudioPlayer","event","skipTime","seekOffset","currentTime","seekTime","makeMediaHandlers","isFinite","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","paused","destroy","isSafariPatchInProgress","prevShouldPlay","prevSrc","playIfPresent","playPause","setTime","audioProxy","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","ratio","scaleImage","makeGoodArtwork","artwork","MediaMetadata","buildMediaMetadata","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ChatReportPanel","openAddContactDialog","blockContact","reportSpam","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioChatId","audioMessageId","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isBot","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","originChannelId","firstPinnedMessage","MiddleHeader","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDesc","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","isOwn","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","createElement","font","whiteSpace","opacity","appendChild","textContent","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","contains","handleTap","stopEvent","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","_defineProperty","promise","reject","createConnector","Worker","ContextMenuContainer","ActionMessageSuggestedAvatar","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","ActionMessage","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","noLoop","nonInteractive","anchor","EmbeddedMessage","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","Document","observeIntersection","smaller","canAutoLoad","autoLoadFileMaxSizeMb","uploadProgress","withDate","isSelectable","onCancelUpload","onMediaClick","onDateClick","isDownloading","dispatch","extension","getDocumentExtension","wasIntersected","markIntersected","isLoadAllowed","setIsLoadAllowed","shouldDownload","documentHash","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaFormat","isLoaded","isUploading","isTransferring","transferProgress","getMediaTransferState","hasPreview","getDocumentHasPreview","getMessageMediaThumbDataUri","localBlobUrl","previewData","cancelMessageMediaDownload","handleDateClick","thumbnailDataUri","actionIcon","isMessageDocumentVideo","TINY_SCREEN_WIDTH_MQL","matchMedia","WITH_AVATAR_TINY_SCREEN_WIDTH_MQL","renderSeekline","bufferedRanges","seekerRef","start","end","Audio","isTranscribing","isTranscriptionHidden","isTranscribed","canTranscribe","onHideTranscription","onPlay","onReadMedia","transcribeAudio","isMediaUnread","isSeeking","isActivated","setIsActivated","shouldLoad","coverHash","coverBlobUrl","handleForcePlay","isBuffered","bufferingHandlers","checkBuffering","useBuffering","isOwnMessage","waveformCanvasRef","withAvatar","canvasRef","spikes","peak","waveform","fill","MIN_SPIKES","MAX_SPIKES","getSeeklineSpikeAmounts","durationFactor","spikesCount","fitCount","newData","springFactor","leftFiller","rightFiller","_data","_data$idx","_data2","idx","val","interpolateArray","encoded5bit","bitsCount","valuesCount","bitsData","byteIndex","bitShift","lastByteIndex","lastBitShift","lastValue","decodeWaveform","Uint8Array","canvas","fillStyle","progressFillStyle","ctx","getContext","scale","globalAlpha","spikeHeight","SPIKE_WIDTH","beginPath","moveTo","arcTo","closePath","roundedRectangle","renderWaveform","useWaveformCanvas","withSeekline","isLoadingForPlaying","shouldRenderSpinner","spinnerClassNames","shouldRenderCross","handleButtonClick","setAudioPlayerOrigin","handleDownloadClick","handleSeek","MouseEvent","targetTouches","handleStartSeek","handleStopSeek","handleTranscribe","onCapture","onDrag","transcribeSvgMemo","dangerouslySetInnerHTML","__html","renderFirstLine","fullClassName","AudioOrigin","buttonClassNames","contentClassName","renderWithTitle","Link","formatPastTimeShort","formatMediaDuration","renderSecondLine","backgroundImage","ProgressSpinner","transparent","noCross","showProgress","showSeekline","getFileSizeString","formatMediaDateTime","svgMemo","onClickTranscribe","MessageMeta","outgoingStatus","signature","withReactionOffset","noReplies","isTranslated","onTranslationClick","onOpenThread","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","isImported","AnimatedCounter","formatTime","MessageOutgoingStatus","Sticker","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","AnimatedEmoji","forceLoadPreview","forcePreview","LIKE_STICKER_ID","customEmojiId","AnimatedCustomEmoji","getCustomEmojiSize","isBig","Video","canAutoPlay","videoRef","getMessageVideo","getMessageWebPageVideo","isSpoilerShown","hideSpoiler","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","fullMediaData","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","useMediaTransition","noThumb","thumbRef","useBlurredMediaThumbRef","thumbClassNames","isInline","wasLoadDisabled","playButtonClassNames","handleTimeUpdate","isWebPageVideo","calculateVideoDimensions","isAllowed","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","withAnimation","isGif","contact","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","Poll","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","WebPage","inPreview","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Invoice","shouldAffectAppendix","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","Skeleton","forceAspectRatio","InvoiceMediaPreview","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","Location","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","Game","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","Album","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","RoundVideo","playingProgressRef","playerRef","shouldSpinnerRender","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","fastRaf","capturePlaying","stopCurrentAudio","InlineButtons","renderIcon","CommentButton","openComments","recentReplierIds","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","ReactionAnimatedEmoji","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","ReactionButton","withRecentReactors","recentReactors","recentReaction","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","transcribedText","areTranslationsEnabled","canTranslate","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","threshold","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","withCommentButton","withQuickReactionButton","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleEditClick","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","getMinMediaWidth","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","TEXT_AI_THINKING","DotAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","channel","SponsoredMessage","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","MessageListContent","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","MessageList","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","areMessagesLoaded","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","FloatingActionButtons","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","quick","img","preloadImage","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","analyzerCallback","startMediaRecorder","pausedAt","chunks","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","AttachBotIcon","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","AttachBotItem","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","AttachMenu","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","BotKeyboardMenu","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","ComposerEmbeddedMessage","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","WebPagePreview","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","BotMenuButton","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","_ref","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","editingDraft","selectEditingScheduledDraft","selectEditingDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","Composer","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","speechRecognizing","setSpeechRecognizing","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","passwordOpen","setPasswordOpen","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","CustomSendMenu","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","MiddleColumn","unpinAllMessages","loadUser","loadChatSettings","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","SERVER_BOT_USER_ID_START","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","_useCurrentOrPrev","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleDeleteInviteClick","ManagementScreens","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","getSenderName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","Media","idPrefix","hasSpoiler","decoding","WebLink","onMessageClick","linkData","getFirstLinkInMessage","formattedDescription","renderMessageSummary","safeLinkContent","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","ListItem","contextActions","memberId","adminMember","forceShowSelf","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewerAsync","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","GameModal","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","NotificationsAsync","Notifications","DialogsAsync","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","MessageListHistoryHandler","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","ConfettiContainer","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","ellipse","prevConfettiTime","hideTimeout","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","PasswordModal","setOpen","noBackdropClose","setNoBackdropClose","showHitInput","setShowHitInput","passwordHelper","setPasswordHelper","validationError","setValidationError","setHint","shouldShowPassword","setShouldShowPassword","handleSubmit","passwordCheck","evt","detail","hideHitInput","handleClearError","PasswordMonkey","isPasswordVisible","InputText","PasswordForm","shouldDisablePasswordManager","submitLabel","clearError","shouldResetValue","onChangePasswordVisibility","onSubmit","DATA_PREFIX","qrCodeStylingPromise","QrCode","tips","qrCodeRef","isQrMounted","markQrMounted","unmarkQrMounted","qrCode","QrCodeStyling","dotsOptions","cornersSquareOptions","imageOptions","imageSize","qrOptions","errorCorrectionLevel","append","onDownload","showMnemonicModal","MnemonicModal","mnemonic","setMnemonic","mnemonicEncrypt","setMnemonicEncrypt","onCloseModal","account","getSession","verifySession","entropy","getEntropy","words","Mnemonic","getWords","aesEncrypt","hashSha256","PbQrCode","QrCodeType","getPbData","showPickBotModal","PickBotModal","search","setSearch","handleSelect","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","onSearchChange","onSelectChatOrUser","GlobalModal","setPayload","inputType","initVal","TextArea","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","UnreadCount","passcodeSettings","LockScreen","isLocked","resetInvalidUnlockAttempts","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleSignOutMessage","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","shouldShowSubmit","noRipple","IS_MULTITAB_SUPPORTED","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","joinAudio","connectingAudio","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","allowTalk","leave","connecting","incoming","busy","ringing","fetchGroupCall","existingGroupCall","fetchGroupCallParticipants","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","inviteHash","fetchChatByUsername","full","requestMasterAndCallAction","toggleGroupCallPanel","AudioContext","webkitAudioContext","srcObject","silence","createAudioElement","selectChatGroupCall","rejoin","participantId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","mediaDevices","getUserMedia","getVideoTracks","checkMicrophonePermission"],"sourceRoot":""}