{"version":3,"file":"3598.9ad0540da16200b335d1.js","mappings":"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","sources":["webpack://wai/webpack/runtime/chunk loaded","webpack://wai/webpack/runtime/startup chunk dependencies","webpack://wai/./src/api/gramjs/apiBuilders/helpers.ts","webpack://wai/./src/api/gramjs/localDb.ts","webpack://wai/./src/util/iteratees.ts","webpack://wai/./src/util/serverTime.ts","webpack://wai/./src/api/types/messages.ts","webpack://wai/./src/api/types/media.ts","webpack://wai/./src/api/gramjs/apiBuilders/pathBytesToSvg.ts","webpack://wai/./src/api/gramjs/apiBuilders/common.ts","webpack://wai/./src/api/gramjs/apiBuilders/symbols.ts","webpack://wai/./src/util/waveform.ts","webpack://wai/./src/api/gramjs/apiBuilders/peers.ts","webpack://wai/./src/api/gramjs/helpers.ts","webpack://wai/./src/api/gramjs/gramjsBuilders/index.ts","webpack://wai/./src/api/gramjs/apiBuilders/calls.ts","webpack://wai/./src/lib/twemojiRegex.js","webpack://wai/./src/util/parseEmojiOnlyString.ts","webpack://wai/./src/global/helpers/getEmojiOnlyCountForMessage.ts","webpack://wai/./src/api/gramjs/apiBuilders/messages.ts","webpack://wai/./src/api/gramjs/apiBuilders/chats.ts","webpack://wai/./src/api/gramjs/apiBuilders/bots.ts","webpack://wai/./src/api/gramjs/apiBuilders/users.ts","webpack://wai/./src/api/gramjs/apiBuilders/misc.ts","webpack://wai/./src/api/gramjs/updater.ts","webpack://wai/./src/api/gramjs/methods/auth.ts","webpack://wai/./src/api/gramjs/methods/media.ts","webpack://wai/./src/worker/setting.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/AnswerCallbackButtonReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/AnswerCallbackButtonRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/DownloadMsgRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/GenMsgIdReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/GenMsgIdRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/SendBotMsgReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/SendBotMsgRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/UpdateCmdReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/UpdateCmdRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPMsg/UploadMsgReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPCommon/PbMsg.ts","webpack://wai/./src/lib/ptp/protobuf/PTPCommon/PbUser.ts","webpack://wai/./src/lib/ptp/protobuf/PTPUser/DownloadUserRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPUser/UploadUserReq.ts","webpack://wai/./src/util/files.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/AuthLoginReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/AuthNativeReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/InitAppRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/UpdateProfileReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/UpdateProfileRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/UpdateUsernameReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/UpdateUsernameRes.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/UploadProfilePhotoReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPAuth/UploadProfilePhotoRes.ts","webpack://wai/./src/worker/msg/bot/BotWebSocket.ts","webpack://wai/./src/worker/msg/ChatMsg.ts","webpack://wai/./src/worker/msg/MsgWorker.ts","webpack://wai/./src/worker/share/db/LocalDatabase.ts","webpack://wai/./src/lib/ptp/protobuf/PTPOther/StopChatStreamReq.ts","webpack://wai/./src/lib/ptp/functions/requests.ts","webpack://wai/./src/worker/msg/client.ts","webpack://wai/./src/api/gramjs/methods/client.ts","webpack://wai/./src/api/gramjs/methods/chats.ts","webpack://wai/./src/lib/ptp/protobuf/PTPChats/LoadChatsReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPChats/LoadChatsRes.ts","webpack://wai/./src/api/gramjs/methods/messages.ts","webpack://wai/./src/api/gramjs/methods/users.ts","webpack://wai/./src/api/gramjs/methods/symbols.ts","webpack://wai/./src/api/gramjs/methods/management.ts","webpack://wai/./src/api/gramjs/methods/twoFaSettings.ts","webpack://wai/./src/api/gramjs/methods/bots.ts","webpack://wai/./src/api/gramjs/methods/calls.ts","webpack://wai/./src/api/gramjs/methods/payments.ts","webpack://wai/./src/api/gramjs/apiBuilders/payments.ts","webpack://wai/./src/api/gramjs/methods/account.ts","webpack://wai/./src/api/gramjs/apiBuilders/appConfig.ts","webpack://wai/./src/api/gramjs/methods/settings.ts","webpack://wai/./src/api/gramjs/methods/reactions.ts","webpack://wai/./src/api/gramjs/apiBuilders/statistics.ts","webpack://wai/./src/api/gramjs/methods/statistics.ts","webpack://wai/./src/api/gramjs/methods/phoneCallState.ts","webpack://wai/./src/api/gramjs/provider.ts","webpack://wai/./src/api/gramjs/worker/worker.ts","webpack://wai/./src/config.ts","webpack://wai/./src/lib/gramjs/Helpers.js","webpack://wai/./src/lib/gramjs/Password.js","webpack://wai/./src/lib/gramjs/Version.js","webpack://wai/./src/lib/gramjs/client/2fa.ts","webpack://wai/./src/lib/gramjs/client/TelegramClient.js","webpack://wai/./src/lib/gramjs/client/auth.ts","webpack://wai/./src/lib/gramjs/client/downloadFile.ts","webpack://wai/./src/lib/gramjs/client/uploadFile.ts","webpack://wai/./src/lib/gramjs/crypto/AuthKey.js","webpack://wai/./src/lib/gramjs/crypto/CTR.js","webpack://wai/./src/lib/gramjs/crypto/Factorizator.js","webpack://wai/./src/lib/gramjs/crypto/IGE.js","webpack://wai/./src/lib/gramjs/errors/index.js","webpack://wai/./src/lib/gramjs/events/Raw.js","webpack://wai/./src/lib/gramjs/events/common.js","webpack://wai/./src/lib/gramjs/events/index.js","webpack://wai/./src/lib/gramjs/extensions/AsyncQueue.js","webpack://wai/./src/lib/gramjs/extensions/BinaryReader.js","webpack://wai/./src/lib/gramjs/extensions/BinaryWriter.js","webpack://wai/./src/lib/gramjs/extensions/Logger.js","webpack://wai/./src/lib/gramjs/extensions/MessagePacker.js","webpack://wai/./src/lib/gramjs/extensions/PromisedWebSockets.js","webpack://wai/./src/lib/gramjs/extensions/index.js","webpack://wai/./src/lib/gramjs/index.js","webpack://wai/./src/lib/gramjs/crypto/RSA.ts","webpack://wai/./src/lib/gramjs/network/Authenticator.ts","webpack://wai/./src/lib/gramjs/network/MTProtoPlainSender.js","webpack://wai/./src/lib/gramjs/network/MTProtoSender.js","webpack://wai/./src/lib/gramjs/network/MTProtoState.js","webpack://wai/./src/lib/gramjs/network/RequestState.js","webpack://wai/./src/lib/gramjs/network/connection/Connection.js","webpack://wai/./src/lib/gramjs/network/connection/TCPAbridged.js","webpack://wai/./src/lib/gramjs/network/connection/TCPObfuscated.js","webpack://wai/./src/lib/gramjs/network/connection/index.js","webpack://wai/./src/lib/gramjs/network/index.js","webpack://wai/./src/lib/gramjs/network/updates.js","webpack://wai/./src/lib/gramjs/sessions/Abstract.js","webpack://wai/./src/lib/gramjs/sessions/CacheApiSession.js","webpack://wai/./src/lib/gramjs/sessions/CallbackSession.js","webpack://wai/./src/lib/gramjs/sessions/IdbSession.js","webpack://wai/./src/lib/gramjs/sessions/LocalStorageSession.js","webpack://wai/./src/lib/gramjs/sessions/Memory.js","webpack://wai/./src/lib/gramjs/sessions/StorageSession.js","webpack://wai/./src/lib/gramjs/sessions/StringSession.js","webpack://wai/./src/lib/gramjs/sessions/index.js","webpack://wai/./src/lib/gramjs/tl/AllTLObjects.js","webpack://wai/./src/lib/gramjs/tl/api.js","webpack://wai/./src/lib/gramjs/tl/core/GZIPPacked.js","webpack://wai/./src/lib/gramjs/tl/core/MessageContainer.js","webpack://wai/./src/lib/gramjs/tl/core/RPCResult.js","webpack://wai/./src/lib/gramjs/tl/core/TLMessage.js","webpack://wai/./src/lib/gramjs/tl/core/index.js","webpack://wai/./src/lib/ptp/protobuf/ActionCommands.ts","webpack://wai/./src/lib/ptp/protobuf/BaseMsg.ts","webpack://wai/./src/lib/ptp/protobuf/PTPCommon/types.ts","webpack://wai/./src/lib/ptp/protobuf/PTPFile/DownloadReq.ts","webpack://wai/./src/lib/ptp/protobuf/PTPFile/UploadReq.ts","webpack://wai/./src/lib/ptp/protobuf/protobuf.js","webpack://wai/./src/lib/ptp/wallet/Mnemonic.ts","webpack://wai/./src/util/Deferred.ts","webpack://wai/./src/util/cacheApi.ts","webpack://wai/./src/util/schedulers.ts","webpack://wai/./src/lib/ptp/wallet/EthEcies.ts","webpack://wai/./src/lib/ptp/wallet/Wallet.ts","webpack://wai/./src/lib/ptp/wallet/EcdsaHelper.ts","webpack://wai/./src/lib/ptp/wallet/Aes256Gcm.ts","webpack://wai/./src/worker/share/Account.ts","webpack://wai/./src/worker/share/utils/helpers.ts","webpack://wai/./src/worker/share/utils/utils.ts","webpack://wai/webpack/bootstrap","webpack://wai/webpack/runtime/compat get default export","webpack://wai/webpack/runtime/define property getters","webpack://wai/webpack/runtime/ensure chunk","webpack://wai/webpack/runtime/get javascript chunk filename","webpack://wai/webpack/runtime/get mini-css chunk filename","webpack://wai/webpack/runtime/global","webpack://wai/webpack/runtime/hasOwnProperty shorthand","webpack://wai/webpack/runtime/make namespace object","webpack://wai/webpack/runtime/node module decorator","webpack://wai/webpack/runtime/publicPath","webpack://wai/webpack/runtime/importScripts chunk loading","webpack://wai/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\n\t\t__webpack_require__.e(5016),\n\t\t__webpack_require__.e(8893)\n\t]).then(next);\n};","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import BigInt from 'big-integer';\nimport type { Api as GramJs } from '../../lib/gramjs';\nimport type { ApiMessage } from '../types';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { constructors } from '../../lib/gramjs/tl';\nimport { throttle } from '../../util/schedulers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport interface LocalDb {\n  localMessages: Record<string, ApiMessage>;\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  cache: Record<string,any>;\n  botWaitReply: Record<string, undefined | {\n    command:string,\n    payload?:Record<string,any>\n  }>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments','cache','botWaitReply',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const valueVirtualClass = Object.keys(value).reduce((acc2, key2) => {\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, valueVirtualClass)\n        : valueVirtualClass;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","type CollectionByKey<Member> = Record<number | string, Member>;\n\ntype OrderDirection =\n  'asc'\n  | 'desc';\n\ninterface OrderCallback<T> {\n  (member: T): any;\n}\n\nexport function buildCollectionByKey<T extends AnyLiteral>(collection: T[], key: keyof T) {\n  return collection.reduce((byKey: CollectionByKey<T>, member: T) => {\n    byKey[member[key]] = member;\n\n    return byKey;\n  }, {});\n}\n\nexport function mapValues<R extends any, M extends any>(\n  byKey: CollectionByKey<M>,\n  callback: (member: M, key: string, index: number, originalByKey: CollectionByKey<M>) => R,\n): CollectionByKey<R> {\n  return Object.keys(byKey).reduce((newByKey: CollectionByKey<R>, key, index) => {\n    newByKey[key] = callback(byKey[key], key, index, byKey);\n    return newByKey;\n  }, {});\n}\n\nexport function pick<T, K extends keyof T>(object: T, keys: K[]) {\n  return keys.reduce((result, key) => {\n    result[key] = object[key];\n    return result;\n  }, {} as Pick<T, K>);\n}\n\nexport function pickTruthy<T, K extends keyof T>(object: T, keys: K[]) {\n  return keys.reduce((result, key) => {\n    if (object[key]) {\n      result[key] = object[key];\n    }\n\n    return result;\n  }, {} as Pick<T, K>);\n}\n\nexport function omit<T extends object, K extends keyof T>(object: T, keys: K[]): Omit<T, K> {\n  const stringKeys = new Set(keys.map(String));\n  const savedKeys = Object.keys(object)\n    .filter((key) => !stringKeys.has(key)) as Array<Exclude<keyof T, K>>;\n\n  return pick(object, savedKeys);\n}\n\nexport function orderBy<T>(\n  collection: T[],\n  orderRule: (keyof T) | OrderCallback<T> | ((keyof T) | OrderCallback<T>)[],\n  mode: OrderDirection | [OrderDirection, OrderDirection] = 'asc',\n): T[] {\n  function compareValues(a: T, b: T, currentOrderRule: (keyof T) | OrderCallback<T>, isAsc: boolean) {\n    const aValue = (typeof currentOrderRule === 'function' ? currentOrderRule(a) : a[currentOrderRule]) || 0;\n    const bValue = (typeof currentOrderRule === 'function' ? currentOrderRule(b) : b[currentOrderRule]) || 0;\n\n    return isAsc ? aValue - bValue : bValue - aValue;\n  }\n\n  if (Array.isArray(orderRule)) {\n    const [mode1, mode2] = Array.isArray(mode) ? mode : [mode, mode];\n    const [orderRule1, orderRule2] = orderRule;\n    const isAsc1 = mode1 === 'asc';\n    const isAsc2 = mode2 === 'asc';\n\n    return collection.sort((a, b) => {\n      return compareValues(a, b, orderRule1, isAsc1) || compareValues(a, b, orderRule2, isAsc2);\n    });\n  }\n\n  const isAsc = mode === 'asc';\n  return collection.sort((a, b) => {\n    return compareValues(a, b, orderRule, isAsc);\n  });\n}\n\nexport function unique<T extends any>(array: T[]): T[] {\n  return Array.from(new Set(array));\n}\n\nexport function uniqueByField<T extends any>(array: T[], field: keyof T): T[] {\n  return [...new Map(array.map((item) => [item[field], item])).values()];\n}\n\nexport function compact<T extends any>(array: T[]) {\n  return array.filter(Boolean);\n}\n\nexport function areSortedArraysEqual(array1: any[], array2: any[]) {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  return array1.every((item, i) => item === array2[i]);\n}\n\nexport function areSortedArraysIntersecting(array1: any[], array2: any[]) {\n  return array1[0] <= array2[array2.length - 1] && array1[array1.length - 1] >= array2[0];\n}\n\nexport function findIntersectionWithSet<T>(array: T[], set: Set<T>): T[] {\n  return array.filter((a) => set.has(a));\n}\n\nexport function split<T extends any>(array: T[], chunkSize: number) {\n  const result: T[][] = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    result.push(array.slice(i, i + chunkSize));\n  }\n\n  return result;\n}\n\nexport function partition<T extends unknown>(\n  array: T[], filter: (value: T, index: number, array: T[]) => boolean,\n): [T[], T[]] {\n  const pass: T[] = [];\n  const fail: T[] = [];\n\n  array.forEach((e, idx, arr) => (filter(e, idx, arr) ? pass : fail).push(e));\n\n  return [pass, fail];\n}\n\nexport function cloneDeep<T>(value: T): T {\n  if (!isObject(value)) {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(cloneDeep) as typeof value;\n  }\n\n  return Object.keys(value).reduce((acc, key) => {\n    acc[key as keyof T] = cloneDeep(value[key as keyof T]);\n    return acc;\n  }, {} as T);\n}\n\nfunction isObject(value: any): value is object {\n  // eslint-disable-next-line no-null/no-null\n  return typeof value === 'object' && value !== null;\n}\n\nexport function findLast<T>(array: Array<T>, predicate: (value: T, index: number, obj: T[]) => boolean): T | undefined {\n  let cursor = array.length;\n\n  while (cursor--) {\n    if (predicate(array[cursor], cursor, array)) {\n      return array[cursor];\n    }\n  }\n\n  return undefined;\n}\n","let serverTimeOffset = 0;\n\nexport function setServerTimeOffset(_serverTimeOffset: number) {\n  serverTimeOffset = _serverTimeOffset;\n}\n\nexport function getServerTimeOffset() {\n  return serverTimeOffset;\n}\n\nexport function getServerTime() {\n  return Math.floor(Date.now() / 1000) + serverTimeOffset;\n}\n","import type { ApiWebDocument } from './bots';\nimport type { ApiGroupCall, PhoneCallAction } from './calls';\nimport type { ApiChat } from './chats';\n\nexport interface ApiDimensions {\n  width: number;\n  height: number;\n}\n\nexport interface ApiPhotoSize extends ApiDimensions {\n  type: 's' | 'm' | 'x' | 'y' | 'z';\n}\n\nexport interface ApiVideoSize extends ApiDimensions {\n  type: 'u' | 'v';\n  videoStartTs: number;\n  size: number;\n}\n\nexport interface ApiThumbnail extends ApiDimensions {\n  dataUri: string;\n}\n\nexport interface ApiPhoto {\n  id: string;\n  thumbnail?: ApiThumbnail;\n  isVideo?: boolean;\n  sizes: ApiPhotoSize[];\n  videoSizes?: ApiVideoSize[];\n  blobUrl?: string;\n  isSpoiler?: boolean;\n}\n\nexport interface ApiSticker {\n  id: string;\n  stickerSetInfo: ApiStickerSetInfo;\n  emoji?: string;\n  isCustomEmoji?: boolean;\n  isLottie: boolean;\n  isVideo: boolean;\n  width?: number;\n  height?: number;\n  thumbnail?: ApiThumbnail;\n  isPreloadedGlobally?: boolean;\n  hasEffect?: boolean;\n  isFree?: boolean;\n  shouldUseTextColor?: boolean;\n}\n\nexport interface ApiStickerSet {\n  isArchived?: true;\n  isLottie?: true;\n  isVideos?: true;\n  isEmoji?: true;\n  installedDate?: number;\n  id: string;\n  accessHash: string;\n  title: string;\n  hasThumbnail?: boolean;\n  count: number;\n  stickers?: ApiSticker[];\n  packs?: Record<string, ApiSticker[]>;\n  covers?: ApiSticker[];\n  shortName: string;\n}\n\ntype ApiStickerSetInfoShortName = {\n  shortName: string;\n};\n\ntype ApiStickerSetInfoId = {\n  id: string;\n  accessHash: string;\n};\n\ntype ApiStickerSetInfoMissing = {\n  isMissing: true;\n};\n\nexport type ApiStickerSetInfo = ApiStickerSetInfoShortName | ApiStickerSetInfoId | ApiStickerSetInfoMissing;\n\nexport interface ApiVideo {\n  id: string;\n  mimeType: string;\n  duration: number;\n  fileName: string;\n  width?: number;\n  height?: number;\n  supportsStreaming?: boolean;\n  isRound?: boolean;\n  isGif?: boolean;\n  isSpoiler?: boolean;\n  thumbnail?: ApiThumbnail;\n  blobUrl?: string;\n  previewBlobUrl?: string;\n  size: number;\n}\n\nexport interface ApiAudio {\n  id: string;\n  size: number;\n  mimeType: string;\n  fileName: string;\n  duration: number;\n  performer?: string;\n  title?: string;\n  thumbnailSizes?: ApiPhotoSize[];\n}\n\nexport interface ApiVoice {\n  id: string;\n  duration: number;\n  waveform?: number[];\n}\n\nexport interface ApiDocument {\n  id?: string;\n  fileName: string;\n  size: number;\n  timestamp?: number;\n  mimeType: string;\n  thumbnail?: ApiThumbnail;\n  previewBlobUrl?: string;\n  mediaType?: 'photo' | 'video';\n  mediaSize?: ApiDimensions;\n}\n\nexport interface ApiContact {\n  firstName: string;\n  lastName: string;\n  phoneNumber: string;\n  userId: string;\n}\n\nexport interface ApiPollAnswer {\n  text: string;\n  option: string;\n}\n\nexport interface ApiPollResult {\n  isChosen?: true;\n  isCorrect?: true;\n  option: string;\n  votersCount: number;\n}\n\nexport interface ApiPoll {\n  id: string;\n  summary: {\n    closed?: true;\n    isPublic?: true;\n    multipleChoice?: true;\n    quiz?: true;\n    question: string;\n    answers: ApiPollAnswer[];\n    closePeriod?: number;\n    closeDate?: number;\n  };\n  results: {\n    isMin?: true;\n    results?: ApiPollResult[];\n    totalVoters?: number;\n    recentVoterIds?: string[];\n    solution?: string;\n    solutionEntities?: ApiMessageEntity[];\n  };\n}\n\n// First type used for state, second - for API requests\nexport type ApiInputInvoice = {\n  chatId: string;\n  messageId: number;\n  isExtendedMedia?: boolean;\n} | {\n  slug: string;\n};\n\nexport type ApiRequestInputInvoice = {\n  chat: ApiChat;\n  messageId: number;\n} | {\n  slug: string;\n};\n\nexport interface ApiInvoice {\n  text: string;\n  title: string;\n  photo?: ApiWebDocument;\n  amount: number;\n  currency: string;\n  receiptMsgId?: number;\n  isTest?: boolean;\n  isRecurring?: boolean;\n  recurringTermsUrl?: string;\n  extendedMedia?: ApiMessageExtendedMediaPreview;\n  maxTipAmount?: number;\n  suggestedTipAmounts?: number[];\n}\n\nexport interface ApiMessageExtendedMediaPreview {\n  width?: number;\n  height?: number;\n  thumbnail?: ApiThumbnail;\n  duration?: number;\n}\n\nexport interface ApiPaymentCredentials {\n  id: string;\n  title: string;\n}\n\ninterface ApiGeoPoint {\n  long: number;\n  lat: number;\n  accessHash: string;\n  accuracyRadius?: number;\n}\n\ninterface ApiGeo {\n  type: 'geo';\n  geo: ApiGeoPoint;\n}\n\ninterface ApiVenue {\n  type: 'venue';\n  geo: ApiGeoPoint;\n  title: string;\n  address: string;\n  provider: string;\n  venueId: string;\n  venueType: string;\n}\n\ninterface ApiGeoLive {\n  type: 'geoLive';\n  geo: ApiGeoPoint;\n  heading?: number;\n  period: number;\n}\n\nexport type ApiLocation = ApiGeo | ApiVenue | ApiGeoLive;\n\nexport type ApiGame = {\n  title: string;\n  description: string;\n  photo?: ApiPhoto;\n  shortName: string;\n  id: string;\n  accessHash: string;\n  document?: ApiDocument;\n};\n\nexport type ApiNewPoll = {\n  summary: ApiPoll['summary'];\n  quiz?: {\n    correctAnswers: string[];\n    solution?: string;\n    solutionEntities?: ApiMessageEntity[];\n  };\n};\n\nexport interface ApiAction {\n  text: string;\n  targetUserIds?: string[];\n  targetChatId?: string;\n  type: 'historyClear' | 'contactSignUp' | 'chatCreate' | 'topicCreate' | 'suggestProfilePhoto' | 'other';\n  photo?: ApiPhoto;\n  amount?: number;\n  currency?: string;\n  translationValues: string[];\n  call?: Partial<ApiGroupCall>;\n  phoneCall?: PhoneCallAction;\n  score?: number;\n  months?: number;\n  topicEmojiIconId?: string;\n  isTopicAction?: boolean;\n}\n\nexport interface ApiWebPage {\n  id: number;\n  url: string;\n  displayUrl: string;\n  type?: string;\n  siteName?: string;\n  title?: string;\n  description?: string;\n  photo?: ApiPhoto;\n  duration?: number;\n  document?: ApiDocument;\n  video?: ApiVideo;\n}\n\nexport interface ApiMessageForwardInfo {\n  date: number;\n  isImported?: boolean;\n  isChannelPost: boolean;\n  channelPostId?: number;\n  isLinkedChannelPost?: boolean;\n  fromChatId?: string;\n  senderUserId?: string;\n  fromMessageId?: number;\n  hiddenUserName?: string;\n  postAuthorTitle?: string;\n}\n\nexport type ApiMessageEntityDefault = {\n  type: Exclude<\n  `${ApiMessageEntityTypes}`,\n  `${ApiMessageEntityTypes.Pre}` | `${ApiMessageEntityTypes.TextUrl}` | `${ApiMessageEntityTypes.MentionName}` |\n  `${ApiMessageEntityTypes.CustomEmoji}`\n  >;\n  offset: number;\n  length: number;\n};\n\nexport type ApiMessageEntityPre = {\n  type: ApiMessageEntityTypes.Pre;\n  offset: number;\n  length: number;\n  language?: string;\n};\n\nexport type ApiMessageEntityTextUrl = {\n  type: ApiMessageEntityTypes.TextUrl;\n  offset: number;\n  length: number;\n  url: string;\n};\n\nexport type ApiMessageEntityMentionName = {\n  type: ApiMessageEntityTypes.MentionName;\n  offset: number;\n  length: number;\n  userId: string;\n};\n\nexport type ApiMessageEntityCustomEmoji = {\n  type: ApiMessageEntityTypes.CustomEmoji;\n  offset: number;\n  length: number;\n  documentId: string;\n};\n\nexport type ApiMessageEntity = ApiMessageEntityDefault | ApiMessageEntityPre | ApiMessageEntityTextUrl |\nApiMessageEntityMentionName | ApiMessageEntityCustomEmoji;\n\nexport enum ApiMessageEntityTypes {\n  Bold = 'MessageEntityBold',\n  Typing = 'MessageEntityTyping',\n  Blockquote = 'MessageEntityBlockquote',\n  BotCommand = 'MessageEntityBotCommand',\n  Cashtag = 'MessageEntityCashtag',\n  Code = 'MessageEntityCode',\n  Email = 'MessageEntityEmail',\n  Hashtag = 'MessageEntityHashtag',\n  Italic = 'MessageEntityItalic',\n  MentionName = 'MessageEntityMentionName',\n  Mention = 'MessageEntityMention',\n  Phone = 'MessageEntityPhone',\n  Pre = 'MessageEntityPre',\n  Strike = 'MessageEntityStrike',\n  TextUrl = 'MessageEntityTextUrl',\n  Url = 'MessageEntityUrl',\n  Underline = 'MessageEntityUnderline',\n  Spoiler = 'MessageEntitySpoiler',\n  CustomEmoji = 'MessageEntityCustomEmoji',\n  Unknown = 'MessageEntityUnknown',\n}\n\nexport interface ApiFormattedText {\n  text: string;\n  entities?: ApiMessageEntity[];\n}\n\nexport interface ApiMessage {\n  id: number;\n  chatId: string;\n  content: {\n    text?: ApiFormattedText;\n    photo?: ApiPhoto;\n    video?: ApiVideo;\n    document?: ApiDocument;\n    sticker?: ApiSticker;\n    contact?: ApiContact;\n    poll?: ApiPoll;\n    action?: ApiAction;\n    webPage?: ApiWebPage;\n    audio?: ApiAudio;\n    voice?: ApiVoice;\n    invoice?: ApiInvoice;\n    location?: ApiLocation;\n    game?: ApiGame;\n  };\n  date: number;\n  isOutgoing: boolean;\n  senderId?: string;\n  replyToChatId?: string;\n  replyToMessageId?: number;\n  replyToTopMessageId?: number;\n  isTopicReply?: true;\n  sendingState?: 'messageSendingStatePending' | 'messageSendingStateFailed';\n  forwardInfo?: ApiMessageForwardInfo;\n  isDeleting?: boolean;\n  previousLocalId?: number;\n  views?: number;\n  forwards?: number;\n  isEdited?: boolean;\n  editDate?: number;\n  isMentioned?: boolean;\n  isMediaUnread?: boolean;\n  groupedId?: string;\n  isInAlbum?: boolean;\n  hasUnreadMention?: boolean;\n  inlineButtons?: ApiKeyboardButtons;\n  keyboardButtons?: ApiKeyboardButtons;\n  keyboardPlaceholder?: string;\n  isKeyboardSingleUse?: boolean;\n  isKeyboardSelective?: boolean;\n  viaBotId?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  postAuthorTitle?: string;\n  isScheduled?: boolean;\n  shouldHideKeyboardButtons?: boolean;\n  isHideKeyboardSelective?: boolean;\n  isFromScheduled?: boolean;\n  isSilent?: boolean;\n  seenByUserIds?: string[];\n  isProtected?: boolean;\n  isForwardingAllowed?: boolean;\n  transcriptionId?: string;\n  isTranscriptionError?: boolean;\n  emojiOnlyCount?: number;\n  reactors?: {\n    nextOffset?: string;\n    count: number;\n    reactions: ApiUserReaction[];\n  };\n  reactions?: ApiReactions;\n}\n\nexport interface ApiReactions {\n  canSeeList?: boolean;\n  results: ApiReactionCount[];\n  recentReactions?: ApiUserReaction[];\n}\n\nexport interface ApiUserReaction {\n  userId: string;\n  reaction: ApiReaction;\n  isBig?: boolean;\n  isUnread?: boolean;\n}\n\nexport interface ApiReactionCount {\n  chosenOrder?: number;\n  count: number;\n  reaction: ApiReaction;\n}\n\nexport interface ApiAvailableReaction {\n  selectAnimation?: ApiDocument;\n  activateAnimation?: ApiDocument;\n  effectAnimation?: ApiDocument;\n  staticIcon?: ApiDocument;\n  centerIcon?: ApiDocument;\n  aroundAnimation?: ApiDocument;\n  reaction: ApiReactionEmoji;\n  title: string;\n  isInactive?: boolean;\n  isPremium?: boolean;\n}\n\ntype ApiChatReactionsAll = {\n  type: 'all';\n  areCustomAllowed?: true;\n};\n\ntype ApiChatReactionsSome = {\n  type: 'some';\n  allowed: ApiReaction[];\n};\n\nexport type ApiChatReactions = ApiChatReactionsAll | ApiChatReactionsSome;\n\nexport type ApiReactionEmoji = {\n  emoticon: string;\n};\n\nexport type ApiReactionCustomEmoji = {\n  documentId: string;\n};\n\nexport type ApiReaction = ApiReactionEmoji | ApiReactionCustomEmoji;\n\nexport interface ApiThreadInfo {\n  isComments?: boolean;\n  threadId: number;\n  chatId: string;\n  topMessageId?: number;\n  originChannelId?: string;\n  messagesCount: number;\n  lastMessageId?: number;\n  lastReadInboxMessageId?: number;\n  recentReplierIds?: string[];\n}\n\nexport type ApiMessageOutgoingStatus = 'read' | 'succeeded' | 'pending' | 'failed';\n\nexport type ApiSponsoredMessage = {\n  chatId?: string;\n  randomId: string;\n  isRecommended?: boolean;\n  isBot?: boolean;\n  channelPostId?: number;\n  startParam?: string;\n  chatInviteHash?: string;\n  chatInviteTitle?: string;\n  text: ApiFormattedText;\n  expiresAt: number;\n};\n\n// KeyboardButtons\n\ninterface ApiKeyboardButtonSimple {\n  type: 'unsupported' | 'buy' | 'command' | 'requestPhone' | 'game';\n  text: string;\n}\n\ninterface ApiKeyboardButtonReceipt {\n  type: 'receipt';\n  text: string;\n  receiptMessageId: number;\n}\n\ninterface ApiKeyboardButtonUrl {\n  type: 'url';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonSimpleWebView {\n  type: 'simpleWebView';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonWebView {\n  type: 'webView';\n  text: string;\n  url: string;\n}\n\ninterface ApiKeyboardButtonCallback {\n  type: 'callback';\n  text: string;\n  data: string;\n}\n\ninterface ApiKeyboardButtonRequestUploadImage {\n  type: 'requestUploadImage';\n  text: string;\n}\n\ninterface ApiKeyboardButtonRequestPoll {\n  type: 'requestPoll';\n  text: string;\n  isQuiz?: boolean;\n}\n\ninterface ApiKeyboardButtonSwitchBotInline {\n  type: 'switchBotInline';\n  text: string;\n  query: string;\n  isSamePeer?: boolean;\n}\n\ninterface ApiKeyboardButtonUserProfile {\n  type: 'userProfile';\n  text: string;\n  userId: string;\n}\n\ninterface ApiKeyboardButtonUrlAuth {\n  type: 'urlAuth';\n  text: string;\n  url: string;\n  buttonId: number;\n}\n\nexport type ApiTranscription = {\n  text: string;\n  isPending?: boolean;\n  transcriptionId: string;\n};\n\nexport type ApiKeyboardButton = (\n  ApiKeyboardButtonSimple\n  | ApiKeyboardButtonReceipt\n  | ApiKeyboardButtonUrl\n  | ApiKeyboardButtonCallback\n  | ApiKeyboardButtonRequestPoll\n  | ApiKeyboardButtonSwitchBotInline\n  | ApiKeyboardButtonUserProfile\n  | ApiKeyboardButtonWebView\n  | ApiKeyboardButtonSimpleWebView\n  | ApiKeyboardButtonUrlAuth\n  | ApiKeyboardButtonRequestUploadImage\n);\n\nexport type ApiKeyboardButtons = ApiKeyboardButton[][];\nexport type ApiReplyKeyboard = {\n  keyboardPlaceholder?: string;\n  isKeyboardSingleUse?: boolean;\n  isKeyboardSelective?: boolean;\n} & {\n  [K in 'inlineButtons' | 'keyboardButtons']?: ApiKeyboardButtons;\n};\n\nexport type ApiMessageSearchType = 'text' | 'media' | 'documents' | 'links' | 'audio' | 'voice' | 'profilePhoto';\nexport type ApiGlobalMessageSearchType = 'text' | 'media' | 'documents' | 'links' | 'audio' | 'voice';\n\nexport type ApiReportReason = 'spam' | 'violence' | 'pornography' | 'childAbuse'\n| 'copyright' | 'geoIrrelevant' | 'fake' | 'illegalDrugs' | 'personalDetails' | 'other';\n\nexport type ApiSendMessageAction = {\n  type: 'cancel' | 'typing' | 'recordAudio' | 'chooseSticker' | 'playingGame';\n};\n\nexport type ApiThemeParameters = {\n  bg_color: string;\n  text_color: string;\n  hint_color: string;\n  link_color: string;\n  button_color: string;\n  button_text_color: string;\n  secondary_bg_color: string;\n};\n\nexport const MAIN_THREAD_ID = -1;\n\n// `Symbol` can not be transferred from worker\nexport const MESSAGE_DELETED = 'MESSAGE_DELETED';\n","// We cache avatars as Data URI for faster initial load\n// and messages media as Blob for smaller size.\n\nexport enum ApiMediaFormat {\n  BlobUrl,\n  Progressive,\n  Stream,\n  DownloadUrl,\n  Text,\n}\n\nexport type ApiParsedMedia = string | Blob | ArrayBuffer;\nexport type ApiPreparedMedia = string;\n","/* eslint-disable no-bitwise */\n\n// eslint-disable-next-line max-len\nconst TEMPLATE = '<?xml version=\"1.0\" encoding=\"utf-8\"?><svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 {{width}} {{height}}\" xml:space=\"preserve\"><path fill-opacity=\"0.1\" d=\"{{path}}\" /></svg>';\nconst LOOKUP = 'AACAAAAHAAALMAAAQASTAVAAAZaacaaaahaaalmaaaqastava.az0123456789-,';\n\nexport function pathBytesToSvg(bytes: Buffer, width: number, height: number) {\n  return TEMPLATE\n    .replace('{{path}}', buildPath(bytes))\n    .replace('{{width}}', String(width))\n    .replace('{{height}}', String(height));\n}\n\nfunction buildPath(bytes: Buffer) {\n  let path = 'M';\n\n  const len = bytes.length;\n  for (let i = 0; i < len; i++) {\n    const num = bytes[i];\n    if (num >= 128 + 64) {\n      path += LOOKUP[num - 128 - 64];\n    } else {\n      if (num >= 128) {\n        path += ',';\n      } else if (num >= 64) {\n        path += '-';\n      }\n      path += String(num & 63);\n    }\n  }\n\n  path += 'z';\n\n  return path;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport { strippedPhotoToJpg } from '../../../lib/gramjs/Utils';\n\nimport type {\n  ApiPhoto, ApiPhotoSize, ApiThumbnail, ApiVideoSize, ApiUsername,\n} from '../../types';\nimport { bytesToDataUri } from './helpers';\nimport { pathBytesToSvg } from './pathBytesToSvg';\nimport { compact } from '../../../util/iteratees';\n\nconst DEFAULT_THUMB_SIZE = { w: 100, h: 100 };\n\nexport function buildApiThumbnailFromStripped(\n  sizes?: GramJs.TypePhotoSize[], mimeType?: string,\n): ApiThumbnail | undefined {\n  if (!sizes || !sizes.length) {\n    return undefined;\n  }\n\n  const thumb = sizes.find((s: any): s is GramJs.PhotoStrippedSize => s instanceof GramJs.PhotoStrippedSize);\n  if (!thumb) {\n    return undefined;\n  }\n\n  const realSizes = sizes.filter((s): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  const { w, h } = realSizes.length ? realSizes[realSizes.length - 1] : DEFAULT_THUMB_SIZE;\n  const { bytes } = thumb;\n  const dataUri = bytesToDataUri(\n    !mimeType || mimeType === 'image/jpeg' ? strippedPhotoToJpg(bytes) : bytes,\n    undefined,\n    mimeType,\n  );\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiThumbnailFromCached(photoSize: GramJs.PhotoCachedSize): ApiThumbnail | undefined {\n  const { w, h, bytes } = photoSize;\n  const dataUri = bytesToDataUri(bytes, undefined, 'image/webp');\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiThumbnailFromPath(\n  photoSize: GramJs.PhotoPathSize,\n  sizeAttribute: GramJs.DocumentAttributeImageSize | GramJs.DocumentAttributeVideo,\n): ApiThumbnail | undefined {\n  const { w, h } = sizeAttribute;\n  const dataUri = `data:image/svg+xml;utf8,${pathBytesToSvg(photoSize.bytes, w, h)}`;\n\n  return {\n    dataUri,\n    width: w,\n    height: h,\n  };\n}\n\nexport function buildApiPhoto(photo: GramJs.Photo, isSpoiler?: boolean): ApiPhoto {\n  const sizes = photo.sizes\n    .filter((s: any): s is GramJs.PhotoSize => {\n      return s instanceof GramJs.PhotoSize || s instanceof GramJs.PhotoSizeProgressive;\n    })\n    .map(buildApiPhotoSize);\n\n  return {\n    id: String(photo.id),\n    thumbnail: buildApiThumbnailFromStripped(photo.sizes),\n    sizes,\n    isSpoiler,\n    ...(photo.videoSizes && { videoSizes: compact(photo.videoSizes.map(buildApiVideoSize)), isVideo: true }),\n  };\n}\n\nexport function buildApiVideoSize(videoSize: GramJs.TypeVideoSize): ApiVideoSize | undefined {\n  if (!(videoSize instanceof GramJs.VideoSize)) return undefined;\n\n  const {\n    videoStartTs, size, h, w, type,\n  } = videoSize;\n\n  return {\n    videoStartTs,\n    size,\n    height: h,\n    width: w,\n    type: type as ('u' | 'v'),\n  };\n}\n\nexport function buildApiPhotoSize(photoSize: GramJs.PhotoSize): ApiPhotoSize {\n  const { w, h, type } = photoSize;\n\n  return {\n    width: w,\n    height: h,\n    type: type as ('m' | 'x' | 'y'),\n  };\n}\n\nexport function buildApiUsernames(mtpPeer: GramJs.User | GramJs.Channel | GramJs.UpdateUserName) {\n  if (!mtpPeer.usernames && !('username' in mtpPeer && mtpPeer.username)) {\n    return undefined;\n  }\n\n  const usernames: ApiUsername[] = [];\n\n  if ('username' in mtpPeer && mtpPeer.username) {\n    usernames.push({\n      username: mtpPeer.username,\n      isActive: true,\n      isEditable: true,\n    });\n  }\n\n  if (mtpPeer.usernames) {\n    mtpPeer.usernames.forEach(({ username, active, editable }) => {\n      usernames.push({\n        username,\n        ...(active && { isActive: true }),\n        ...(editable && { isEditable: true }),\n      });\n    });\n  }\n\n  return usernames;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiEmojiInteraction, ApiStickerSetInfo, ApiSticker, ApiStickerSet, GramJsEmojiInteraction,\n} from '../../types';\n\nimport { buildApiThumbnailFromCached, buildApiThumbnailFromPath } from './common';\nimport localDb from '../localDb';\nimport { compact } from '../../../util/iteratees';\n\nconst LOTTIE_STICKER_MIME_TYPE = 'application/x-tgsticker';\nconst VIDEO_STICKER_MIME_TYPE = 'video/webm';\n\nexport function buildStickerFromDocument(document: GramJs.TypeDocument, isNoPremium?: boolean): ApiSticker | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const { mimeType, videoThumbs } = document;\n  const stickerAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeSticker => (\n      attr instanceof GramJs.DocumentAttributeSticker\n    ));\n  const customEmojiAttribute = document.attributes\n    .find((attr): attr is GramJs.DocumentAttributeCustomEmoji => attr instanceof GramJs.DocumentAttributeCustomEmoji);\n\n  const fileAttribute = (mimeType === LOTTIE_STICKER_MIME_TYPE || mimeType === VIDEO_STICKER_MIME_TYPE)\n    && document.attributes\n      .find((attr: any): attr is GramJs.DocumentAttributeFilename => (\n        attr instanceof GramJs.DocumentAttributeFilename\n      ));\n\n  if (!(stickerAttribute || customEmojiAttribute) && !fileAttribute) {\n    return undefined;\n  }\n\n  const isLottie = mimeType === LOTTIE_STICKER_MIME_TYPE;\n  const isVideo = mimeType === VIDEO_STICKER_MIME_TYPE;\n  const isCustomEmoji = Boolean(customEmojiAttribute);\n  const shouldUseTextColor = isCustomEmoji && customEmojiAttribute.textColor;\n\n  const imageSizeAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeImageSize => (\n      attr instanceof GramJs.DocumentAttributeImageSize\n    ));\n\n  const videoSizeAttribute = document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeVideo => (\n      attr instanceof GramJs.DocumentAttributeVideo\n    ));\n\n  const sizeAttribute = imageSizeAttribute || videoSizeAttribute;\n\n  const stickerOrEmojiAttribute = (stickerAttribute || customEmojiAttribute)!;\n  const stickerSetInfo = buildApiStickerSetInfo(stickerOrEmojiAttribute?.stickerset);\n  const emoji = stickerOrEmojiAttribute?.alt;\n  const isFree = Boolean(customEmojiAttribute?.free ?? true);\n\n  const cachedThumb = document.thumbs && document.thumbs.find(\n    (s): s is GramJs.PhotoCachedSize => s instanceof GramJs.PhotoCachedSize,\n  );\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_STICKER_MIME_TYPE && !(self as any).isWebmSupported && !cachedThumb) {\n    const staticThumb = document.thumbs && document.thumbs.find(\n      (s): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize,\n    );\n\n    if (!staticThumb) {\n      return undefined;\n    }\n  }\n\n  const pathThumb = document.thumbs && document.thumbs.find(\n    (s): s is GramJs.PhotoPathSize => s instanceof GramJs.PhotoPathSize,\n  );\n\n  const thumbnail = cachedThumb ? (\n    buildApiThumbnailFromCached(cachedThumb)\n  ) : pathThumb && sizeAttribute ? (\n    buildApiThumbnailFromPath(pathThumb, sizeAttribute)\n  ) : undefined;\n\n  const { w: width, h: height } = cachedThumb as GramJs.PhotoCachedSize || sizeAttribute || {};\n\n  const hasEffect = !isNoPremium && videoThumbs && compact(videoThumbs\n    ?.filter((thumb) => thumb instanceof GramJs.VideoSize) as GramJs.VideoSize[])\n    .some(({ type }) => type === 'f');\n\n  return {\n    id: String(document.id),\n    stickerSetInfo,\n    emoji,\n    isCustomEmoji,\n    isLottie,\n    isVideo,\n    width,\n    height,\n    thumbnail,\n    hasEffect,\n    isFree,\n    shouldUseTextColor,\n  };\n}\n\nexport function buildStickerSet(set: GramJs.StickerSet): ApiStickerSet {\n  const {\n    archived,\n    animated,\n    installedDate,\n    videos,\n    id,\n    accessHash,\n    title,\n    thumbs,\n    count,\n    shortName,\n    emojis,\n    thumbDocumentId,\n  } = set;\n\n  return {\n    isArchived: archived,\n    isLottie: animated,\n    isVideos: videos,\n    isEmoji: emojis,\n    installedDate,\n    id: String(id),\n    accessHash: String(accessHash),\n    title,\n    hasThumbnail: Boolean(thumbs?.length || thumbDocumentId),\n    count,\n    shortName,\n  };\n}\n\nfunction buildApiStickerSetInfo(inputSet?: GramJs.TypeInputStickerSet): ApiStickerSetInfo {\n  if (inputSet instanceof GramJs.InputStickerSetID) {\n    return {\n      id: String(inputSet.id),\n      accessHash: String(inputSet.accessHash),\n    };\n  }\n  if (inputSet instanceof GramJs.InputStickerSetShortName) {\n    return {\n      shortName: inputSet.shortName,\n    };\n  }\n\n  return {\n    isMissing: true,\n  };\n}\n\nexport function buildStickerSetCovered(coveredStickerSet: GramJs.TypeStickerSetCovered): ApiStickerSet {\n  const stickerSet = buildStickerSet(coveredStickerSet.set);\n\n  if (coveredStickerSet instanceof GramJs.StickerSetNoCovered) {\n    return stickerSet;\n  }\n\n  const stickerSetCovers = (coveredStickerSet instanceof GramJs.StickerSetCovered) ? [coveredStickerSet.cover]\n    : (coveredStickerSet instanceof GramJs.StickerSetMultiCovered) ? coveredStickerSet.covers\n      : coveredStickerSet.documents;\n\n  const stickers = processStickerResult(stickerSetCovers);\n\n  if (coveredStickerSet instanceof GramJs.StickerSetFullCovered) {\n    return {\n      ...stickerSet,\n      stickers,\n      packs: processStickerPackResult(coveredStickerSet.packs),\n    };\n  }\n\n  return {\n    ...stickerSet,\n    covers: stickers,\n  };\n}\n\nexport function buildApiEmojiInteraction(json: GramJsEmojiInteraction): ApiEmojiInteraction {\n  return {\n    timestamps: json.a.map(({ t }) => t),\n  };\n}\n\nexport function processStickerPackResult(packs: GramJs.StickerPack[]) {\n  return packs.reduce((acc, { emoticon, documents }) => {\n    acc[emoticon] = documents.map((documentId) => buildStickerFromDocument(\n      localDb.documents[String(documentId)],\n    )).filter(Boolean);\n    return acc;\n  }, {} as Record<string, ApiSticker[]>);\n}\n\nexport function processStickerResult(stickers: GramJs.TypeDocument[]) {\n  return stickers\n    .map((document) => {\n      if (document instanceof GramJs.Document) {\n        const sticker = buildStickerFromDocument(document);\n        if (sticker) {\n          localDb.documents[String(document.id)] = document;\n\n          return sticker;\n        }\n      }\n\n      return undefined;\n    })\n    .filter(Boolean);\n}\n","/* eslint-disable no-bitwise */\n\n// Ref: https://github.com/telegramdesktop/tdesktop/blob/0743e71ab6b928d2ee5bae1aed991849b1e2b291/Telegram/SourceFiles/data/data_document.cpp#L1018\nexport function decodeWaveform(encoded5bit: Uint8Array) {\n  const bitsCount = encoded5bit.length * 8;\n  const valuesCount = Math.floor(bitsCount / 5);\n  if (!valuesCount) {\n    return [];\n  }\n\n  // Read each 5 bit of encoded5bit as 0-31 unsigned char.\n  // We count the index of the byte in which the desired 5-bit sequence starts.\n  // And then we read a uint16 starting from that byte to guarantee to get all of those 5 bits.\n  //\n  // BUT! if it is the last byte we have, we're not allowed to read a uint16 starting with it.\n  // Because it will be an overflow (we'll access one byte after the available memory).\n  // We see, that only the last 5 bits could start in the last available byte and be problematic.\n  // So we read in a general way all the entries in a general way except the last one.\n  const result = Array(valuesCount);\n  const bitsData = encoded5bit;\n  for (let i = 0, l = valuesCount - 1; i !== l; ++i) {\n    const byteIndex = Math.floor((i * 5) / 8);\n    const bitShift = Math.floor((i * 5) % 8);\n    const value = bitsData[byteIndex] + (bitsData[byteIndex + 1] << 8);\n    result[i] = ((value >> bitShift) & 0x1F);\n  }\n  const lastByteIndex = Math.floor(((valuesCount - 1) * 5) / 8);\n  const lastBitShift = Math.floor(((valuesCount - 1) * 5) % 8);\n  const lastValue = bitsData[lastByteIndex] + (bitsData[lastByteIndex + 1] << 8);\n  result[valuesCount - 1] = (lastValue >> lastBitShift) & 0x1F;\n\n  return result;\n}\n\nexport function interpolateArray(data: number[], fitCount: number) {\n  let peak = 0;\n  const newData = new Array(fitCount);\n  const springFactor = data.length / fitCount;\n  const leftFiller = data[0];\n  const rightFiller = data[data.length - 1];\n  for (let i = 0; i < fitCount; i++) {\n    const idx = Math.floor(i * springFactor);\n    const val = ((data[idx - 1] ?? leftFiller) + (data[idx] ?? leftFiller) + (data[idx + 1] ?? rightFiller)) / 3;\n    newData[i] = val;\n    if (peak < val) {\n      peak = val;\n    }\n  }\n  return { data: newData, peak };\n}\n","import type BigInt from 'big-integer';\n\nimport type { Api as GramJs } from '../../../lib/gramjs';\n\nexport function isPeerUser(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerUser {\n  return peer.hasOwnProperty('userId');\n}\n\nexport function isPeerChat(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerChat {\n  return peer.hasOwnProperty('chatId');\n}\n\nexport function isPeerChannel(peer: GramJs.TypePeer | GramJs.TypeInputPeer): peer is GramJs.PeerChannel {\n  return peer.hasOwnProperty('channelId');\n}\n\nexport function buildApiPeerId(id: BigInt.BigInteger, type: 'user' | 'chat' | 'channel') {\n  return type === 'user' ? String(id) : `-${id}`;\n}\n\nexport function getApiChatIdFromMtpPeer(peer: GramJs.TypePeer | GramJs.TypeInputPeer) {\n  if (isPeerUser(peer)) {\n    return buildApiPeerId(peer.userId, 'user');\n  } else if (isPeerChat(peer)) {\n    return buildApiPeerId(peer.chatId, 'chat');\n  } else {\n    return buildApiPeerId((peer as GramJs.InputPeerChannel).channelId, 'channel');\n  }\n}\n","import { Api as GramJs } from '../../lib/gramjs';\nimport localDb from './localDb';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './apiBuilders/peers';\n\nconst LOG_BACKGROUND = '#111111DD';\nconst LOG_PREFIX_COLOR = '#E4D00A';\nconst LOG_SUFFIX = {\n  INVOKE: '#49DBF5',\n  RESPONSE: '#6887F7',\n  CONNECTING: '#E4D00A',\n  CONNECTED: '#26D907',\n  'CONNECTING ERROR': '#D1191C',\n  'INVOKE ERROR': '#D1191C',\n  UPDATE: '#0DD151',\n  'UNEXPECTED UPDATE': '#9C9C9C',\n  'UNEXPECTED RESPONSE': '#D1191C',\n};\n\nexport function resolveMessageApiChatId(mtpMessage: GramJs.TypeMessage) {\n  if (!(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return getApiChatIdFromMtpPeer(mtpMessage.peerId);\n}\n\nexport function addMessageToLocalDb(message: GramJs.Message | GramJs.MessageService) {\n  const messageFullId = `${resolveMessageApiChatId(message)}-${message.id}`;\n\n  let mockMessage = message;\n  if (message instanceof GramJs.Message\n    && message.media instanceof GramJs.MessageMediaInvoice\n    && message.media.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n    mockMessage = new GramJs.Message({\n      ...message,\n      media: message.media.extendedMedia.media,\n    });\n  }\n\n  localDb.messages[messageFullId] = mockMessage;\n\n  if (mockMessage instanceof GramJs.Message) {\n    if (mockMessage.media instanceof GramJs.MessageMediaDocument\n      && mockMessage.media.document instanceof GramJs.Document\n    ) {\n      localDb.documents[String(mockMessage.media.document.id)] = mockMessage.media.document;\n    }\n\n    if (mockMessage.media instanceof GramJs.MessageMediaWebPage\n      && mockMessage.media.webpage instanceof GramJs.WebPage\n      && mockMessage.media.webpage.document instanceof GramJs.Document\n    ) {\n      localDb.documents[String(mockMessage.media.webpage.document.id)] = mockMessage.media.webpage.document;\n    }\n\n    if (mockMessage.media instanceof GramJs.MessageMediaGame) {\n      if (mockMessage.media.game.document instanceof GramJs.Document) {\n        localDb.documents[String(mockMessage.media.game.document.id)] = mockMessage.media.game.document;\n      }\n      addPhotoToLocalDb(mockMessage.media.game.photo);\n    }\n\n    if (mockMessage.media instanceof GramJs.MessageMediaInvoice\n      && mockMessage.media.photo) {\n      localDb.webDocuments[String(mockMessage.media.photo.url)] = mockMessage.media.photo;\n    }\n  }\n\n  if (mockMessage instanceof GramJs.MessageService && 'photo' in mockMessage.action) {\n    addPhotoToLocalDb(mockMessage.action.photo);\n  }\n}\n\nexport function addPhotoToLocalDb(photo: GramJs.TypePhoto) {\n  if (photo instanceof GramJs.Photo) {\n    localDb.photos[String(photo.id)] = photo;\n  }\n}\n\nfunction addChatToLocalDb(chat: GramJs.Chat | GramJs.Channel, noOverwrite = false) {\n  const id = buildApiPeerId(chat.id, chat instanceof GramJs.Chat ? 'chat' : 'channel');\n  if (!noOverwrite || !localDb.chats[id]) {\n    localDb.chats[id] = chat;\n  }\n}\n\nexport function addUserToLocalDb(user: GramJs.User, shouldOverwrite = false) {\n  const id = buildApiPeerId(user.id, 'user');\n  if (shouldOverwrite || !localDb.users[id]) {\n    localDb.users[id] = user;\n  }\n}\n\nexport function addEntitiesWithPhotosToLocalDb(entities: (GramJs.TypeUser | GramJs.TypeChat)[]) {\n  entities.forEach((entity) => {\n    if (entity instanceof GramJs.User && entity.photo) {\n      addUserToLocalDb(entity);\n    } else if ((entity instanceof GramJs.Chat || entity instanceof GramJs.Channel) && entity.photo) {\n      addChatToLocalDb(entity);\n    }\n  });\n}\n\nexport function swapLocalInvoiceMedia(\n  chatId: string, messageId: number, extendedMedia: GramJs.TypeMessageExtendedMedia,\n) {\n  const localMessage = localDb.messages[`${chatId}-${messageId}`];\n  if (!(localMessage instanceof GramJs.Message) || !localMessage.media) return;\n\n  if (extendedMedia instanceof GramJs.MessageExtendedMediaPreview) {\n    if (!(localMessage.media instanceof GramJs.MessageMediaInvoice)) {\n      return;\n    }\n    localMessage.media.extendedMedia = extendedMedia;\n  }\n\n  if (extendedMedia instanceof GramJs.MessageExtendedMedia) {\n    localMessage.media = extendedMedia.media;\n  }\n}\n\nexport function serializeBytes(value: Buffer) {\n  return String.fromCharCode(...value);\n}\n\nexport function deserializeBytes(value: string) {\n  return Buffer.from(value, 'binary');\n}\n\nexport function log(suffix: keyof typeof LOG_SUFFIX, ...data: any) {\n  /* eslint-disable max-len */\n  /* eslint-disable no-console */\n  const func = suffix === 'UNEXPECTED RESPONSE' ? console.error\n    : suffix === 'INVOKE ERROR' || suffix === 'UNEXPECTED UPDATE' ? console.warn : console.log;\n  /* eslint-enable no-console */\n  func(\n    `%cGramJS%c${suffix}`,\n    `color: ${LOG_PREFIX_COLOR}; background: ${LOG_BACKGROUND}; padding: 0.25rem; border-radius: 0.25rem;`,\n    `color: ${LOG_SUFFIX[suffix]}; background: ${LOG_BACKGROUND}; padding: 0.25rem; border-radius: 0.25rem; margin-left: 0.25rem;`,\n    ...data,\n  );\n  /* eslint-enable max-len */\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiPrivacyKey } from '../../../types';\n\nimport { generateRandomBytes, readBigIntFromBuffer } from '../../../lib/gramjs/Helpers';\nimport type {\n  ApiChatAdminRights,\n  ApiChatBannedRights,\n  ApiChatFolder,\n  ApiGroupCall,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiPhoto,\n  ApiPhoneCall,\n  ApiReportReason,\n  ApiSendMessageAction,\n  ApiSticker,\n  ApiVideo,\n  ApiThemeParameters,\n  ApiPoll,\n  ApiRequestInputInvoice,\n  ApiChatReactions,\n  ApiReaction,\n  ApiFormattedText,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes,\n} from '../../types';\nimport localDb from '../localDb';\nimport { pick } from '../../../util/iteratees';\nimport { deserializeBytes } from '../helpers';\nimport { DEFAULT_STATUS_ICON_ID } from '../../../config';\n\nconst CHANNEL_ID_MIN_LENGTH = 11; // Example: -1000000000\n\nexport function getEntityTypeById(chatOrUserId: string) {\n  if (typeof chatOrUserId === 'number') {\n    return getEntityTypeByDeprecatedId(chatOrUserId);\n  }\n\n  if (!chatOrUserId.startsWith('-')) {\n    return 'user';\n  } else if (chatOrUserId.length >= CHANNEL_ID_MIN_LENGTH) {\n    return 'channel';\n  } else {\n    return 'chat';\n  }\n}\n\n// Workaround for old-fashioned IDs stored locally\nexport function getEntityTypeByDeprecatedId(chatOrUserId: number) {\n  if (chatOrUserId > 0) {\n    return 'user';\n  } else if (chatOrUserId <= -1000000000) {\n    return 'channel';\n  } else {\n    return 'chat';\n  }\n}\n\nexport function buildPeer(chatOrUserId: string): GramJs.TypePeer {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.PeerUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.PeerChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n    });\n  } else {\n    return new GramJs.PeerChat({\n      chatId: buildMtpPeerId(chatOrUserId, 'chat'),\n    });\n  }\n}\n\nexport function buildInputPeer(chatOrUserId: string, accessHash?: string): GramJs.TypeInputPeer {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.InputPeerUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.InputPeerChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else {\n    return new GramJs.InputPeerChat({\n      chatId: buildMtpPeerId(chatOrUserId, 'chat'),\n    });\n  }\n}\n\nexport function buildInputPeerFromLocalDb(chatOrUserId: string): GramJs.TypeInputPeer | undefined {\n  const type = getEntityTypeById(chatOrUserId);\n  let accessHash: BigInt.BigInteger | undefined;\n\n  if (type === 'user') {\n    accessHash = localDb.users[chatOrUserId]?.accessHash;\n    if (!accessHash) {\n      return undefined;\n    }\n  } else if (type === 'channel') {\n    accessHash = (localDb.chats[chatOrUserId] as GramJs.Channel)?.accessHash;\n    if (!accessHash) {\n      return undefined;\n    }\n  }\n\n  return buildInputPeer(chatOrUserId, String(accessHash));\n}\n\nexport function buildInputEntity(chatOrUserId: string, accessHash?: string) {\n  const type = getEntityTypeById(chatOrUserId);\n\n  if (type === 'user') {\n    return new GramJs.InputUser({\n      userId: buildMtpPeerId(chatOrUserId, 'user'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else if (type === 'channel') {\n    return new GramJs.InputChannel({\n      channelId: buildMtpPeerId(chatOrUserId, 'channel'),\n      accessHash: BigInt(accessHash!),\n    });\n  } else {\n    return buildMtpPeerId(chatOrUserId, 'chat');\n  }\n}\n\nexport function buildInputStickerSet(id: string, accessHash: string) {\n  return new GramJs.InputStickerSetID({\n    id: BigInt(id),\n    accessHash: BigInt(accessHash),\n  });\n}\n\nexport function buildInputStickerSetShortName(shortName: string) {\n  return new GramJs.InputStickerSetShortName({\n    shortName,\n  });\n}\n\nexport function buildInputDocument(media: ApiSticker | ApiVideo) {\n  const document = localDb.documents[media.id];\n\n  if (!document) {\n    return undefined;\n  }\n\n  return new GramJs.InputDocument(pick(document, [\n    'id',\n    'accessHash',\n    'fileReference',\n  ]));\n}\n\nexport function buildInputMediaDocument(media: ApiSticker | ApiVideo) {\n  const inputDocument = buildInputDocument(media);\n\n  if (!inputDocument) {\n    return undefined;\n  }\n\n  return new GramJs.InputMediaDocument({ id: inputDocument });\n}\n\nexport function buildInputPoll(pollParams: ApiNewPoll, randomId: BigInt.BigInteger) {\n  const { summary, quiz } = pollParams;\n\n  const poll = new GramJs.Poll({\n    id: randomId,\n    publicVoters: summary.isPublic,\n    question: summary.question,\n    answers: summary.answers.map(({ text, option }) => {\n      return new GramJs.PollAnswer({ text, option: deserializeBytes(option) });\n    }),\n    quiz: summary.quiz,\n    multipleChoice: summary.multipleChoice,\n  });\n\n  if (!quiz) {\n    return new GramJs.InputMediaPoll({ poll });\n  }\n\n  const correctAnswers = quiz.correctAnswers.map(deserializeBytes);\n  const { solution } = quiz;\n  const solutionEntities = quiz.solutionEntities ? quiz.solutionEntities.map(buildMtpMessageEntity) : [];\n\n  return new GramJs.InputMediaPoll({\n    poll,\n    correctAnswers,\n    ...(solution && {\n      solution,\n      solutionEntities,\n    }),\n  });\n}\n\nexport function buildInputPollFromExisting(poll: ApiPoll, shouldClose = false) {\n  return new GramJs.InputMediaPoll({\n    poll: new GramJs.Poll({\n      id: BigInt(poll.id),\n      publicVoters: poll.summary.isPublic,\n      question: poll.summary.question,\n      answers: poll.summary.answers.map(({ text, option }) => {\n        return new GramJs.PollAnswer({ text, option: deserializeBytes(option) });\n      }),\n      quiz: poll.summary.quiz,\n      multipleChoice: poll.summary.multipleChoice,\n      closeDate: poll.summary.closeDate,\n      closePeriod: poll.summary.closePeriod,\n      closed: shouldClose ? true : poll.summary.closed,\n    }),\n    correctAnswers: poll.results.results?.filter((o) => o.isCorrect).map((o) => deserializeBytes(o.option)),\n    solution: poll.results.solution,\n    solutionEntities: poll.results.solutionEntities?.map(buildMtpMessageEntity),\n  });\n}\n\nexport function buildFilterFromApiFolder(folder: ApiChatFolder): GramJs.DialogFilter {\n  const {\n    emoticon,\n    contacts,\n    nonContacts,\n    groups,\n    channels,\n    bots,\n    excludeArchived,\n    excludeMuted,\n    excludeRead,\n    pinnedChatIds,\n    includedChatIds,\n    excludedChatIds,\n  } = folder;\n\n  const pinnedPeers = pinnedChatIds\n    ? pinnedChatIds.map(buildInputPeerFromLocalDb).filter(Boolean)\n    : [];\n\n  const includePeers = includedChatIds\n    ? includedChatIds.map(buildInputPeerFromLocalDb).filter(Boolean)\n    : [];\n\n  const excludePeers = excludedChatIds\n    ? excludedChatIds.map(buildInputPeerFromLocalDb).filter(Boolean)\n    : [];\n\n  return new GramJs.DialogFilter({\n    id: folder.id,\n    title: folder.title,\n    emoticon: emoticon || undefined,\n    contacts: contacts || undefined,\n    nonContacts: nonContacts || undefined,\n    groups: groups || undefined,\n    bots: bots || undefined,\n    excludeArchived: excludeArchived || undefined,\n    excludeMuted: excludeMuted || undefined,\n    excludeRead: excludeRead || undefined,\n    broadcasts: channels || undefined,\n    pinnedPeers,\n    includePeers,\n    excludePeers,\n  });\n}\n\nexport function generateRandomBigInt() {\n  return readBigIntFromBuffer(generateRandomBytes(8), true, true);\n}\n\nexport function generateRandomInt() {\n  return readBigIntFromBuffer(generateRandomBytes(4), true, true).toJSNumber();\n}\n\nexport function buildMessageFromUpdate(\n  id: number,\n  chatId: string,\n  update: GramJs.UpdateShortSentMessage | GramJs.UpdateServiceNotification,\n) {\n  // This is not a proper message, but we only need these fields for downloading media through `localDb`.\n  return new GramJs.Message({\n    id,\n    peerId: buildPeer(chatId),\n    fromId: buildPeer(chatId),\n    media: update.media,\n  } as GramJs.Message);\n}\n\nexport function buildMtpMessageEntity(entity: ApiMessageEntity): GramJs.TypeMessageEntity {\n  const {\n    type, offset, length,\n  } = entity;\n\n  const user = 'userId' in entity ? localDb.users[entity.userId] : undefined;\n  switch (type) {\n    case ApiMessageEntityTypes.Bold:\n      return new GramJs.MessageEntityBold({ offset, length });\n    case ApiMessageEntityTypes.Italic:\n      return new GramJs.MessageEntityItalic({ offset, length });\n    case ApiMessageEntityTypes.Underline:\n      return new GramJs.MessageEntityUnderline({ offset, length });\n    case ApiMessageEntityTypes.Strike:\n      return new GramJs.MessageEntityStrike({ offset, length });\n    case ApiMessageEntityTypes.Code:\n      return new GramJs.MessageEntityCode({ offset, length });\n    case ApiMessageEntityTypes.Pre:\n      return new GramJs.MessageEntityPre({ offset, length, language: entity.language || '' });\n    case ApiMessageEntityTypes.Blockquote:\n      return new GramJs.MessageEntityBlockquote({ offset, length });\n    case ApiMessageEntityTypes.TextUrl:\n      return new GramJs.MessageEntityTextUrl({ offset, length, url: entity.url });\n    case ApiMessageEntityTypes.Url:\n      return new GramJs.MessageEntityUrl({ offset, length });\n    case ApiMessageEntityTypes.Hashtag:\n      return new GramJs.MessageEntityHashtag({ offset, length });\n    case ApiMessageEntityTypes.MentionName:\n      return new GramJs.InputMessageEntityMentionName({\n        offset,\n        length,\n        userId: new GramJs.InputUser({ userId: BigInt(user!.id), accessHash: user!.accessHash! }),\n      });\n    case ApiMessageEntityTypes.Spoiler:\n      return new GramJs.MessageEntitySpoiler({ offset, length });\n    case ApiMessageEntityTypes.CustomEmoji:\n      return new GramJs.MessageEntityCustomEmoji({ offset, length, documentId: BigInt(entity.documentId) });\n    default:\n      return new GramJs.MessageEntityUnknown({ offset, length });\n  }\n}\n\nexport function isMessageWithMedia(message: GramJs.Message | GramJs.UpdateServiceNotification) {\n  const { media } = message;\n  if (!media) {\n    return false;\n  }\n\n  return (\n    media instanceof GramJs.MessageMediaPhoto\n    || media instanceof GramJs.MessageMediaDocument\n    || (\n      media instanceof GramJs.MessageMediaWebPage\n      && media.webpage instanceof GramJs.WebPage\n      && (\n        media.webpage.photo instanceof GramJs.Photo || (\n          media.webpage.document instanceof GramJs.Document\n          && media.webpage.document.mimeType.startsWith('video')\n        )\n      )\n    ) || (\n      media instanceof GramJs.MessageMediaGame\n      && (media.game.document instanceof GramJs.Document || media.game.photo instanceof GramJs.Photo)\n    ) || (\n      media instanceof GramJs.MessageMediaInvoice && (media.photo || media.extendedMedia)\n    )\n  );\n}\n\nexport function isServiceMessageWithMedia(message: GramJs.MessageService) {\n  return 'photo' in message.action && message.action.photo instanceof GramJs.Photo;\n}\n\nexport function buildChatPhotoForLocalDb(photo: GramJs.TypePhoto) {\n  if (photo instanceof GramJs.PhotoEmpty) {\n    return new GramJs.ChatPhotoEmpty();\n  }\n\n  const { dcId, id: photoId } = photo;\n\n  return new GramJs.ChatPhoto({\n    dcId,\n    photoId,\n  });\n}\n\nexport function buildInputPhoto(photo: ApiPhoto) {\n  const localPhoto = localDb.photos[photo?.id];\n\n  if (!localPhoto) {\n    return undefined;\n  }\n\n  return new GramJs.InputPhoto(pick(localPhoto, [\n    'id',\n    'accessHash',\n    'fileReference',\n  ]));\n}\n\nexport function buildInputContact({\n  phone,\n  firstName,\n  lastName,\n}: {\n  phone: string;\n  firstName: string;\n  lastName: string;\n}) {\n  return new GramJs.InputPhoneContact({\n    clientId: BigInt(1),\n    phone,\n    firstName,\n    lastName,\n  });\n}\n\nexport function buildChatBannedRights(\n  bannedRights: ApiChatBannedRights,\n  untilDate = 0,\n) {\n  return new GramJs.ChatBannedRights({\n    ...bannedRights,\n    untilDate,\n  });\n}\n\nexport function buildChatAdminRights(\n  adminRights: ApiChatAdminRights,\n) {\n  return new GramJs.ChatAdminRights(adminRights);\n}\n\nexport function buildShippingInfo(info: GramJs.PaymentRequestedInfo) {\n  const { shippingAddress } = info;\n  return new GramJs.PaymentRequestedInfo({\n    ...info,\n    shippingAddress: shippingAddress\n      ? new GramJs.PostAddress(shippingAddress)\n      : undefined,\n  });\n}\n\nexport function buildInputPrivacyKey(privacyKey: ApiPrivacyKey) {\n  switch (privacyKey) {\n    case 'phoneNumber':\n      return new GramJs.InputPrivacyKeyPhoneNumber();\n\n    case 'lastSeen':\n      return new GramJs.InputPrivacyKeyStatusTimestamp();\n\n    case 'profilePhoto':\n      return new GramJs.InputPrivacyKeyProfilePhoto();\n\n    case 'forwards':\n      return new GramJs.InputPrivacyKeyForwards();\n\n    case 'chatInvite':\n      return new GramJs.InputPrivacyKeyChatInvite();\n\n    case 'phoneCall':\n      return new GramJs.InputPrivacyKeyPhoneCall();\n\n    case 'phoneP2P':\n      return new GramJs.InputPrivacyKeyPhoneP2P();\n\n    case 'voiceMessages':\n      return new GramJs.InputPrivacyKeyVoiceMessages();\n  }\n\n  return undefined;\n}\n\nexport function buildInputReportReason(reason: ApiReportReason) {\n  switch (reason) {\n    case 'spam':\n      return new GramJs.InputReportReasonSpam();\n    case 'violence':\n      return new GramJs.InputReportReasonViolence();\n    case 'childAbuse':\n      return new GramJs.InputReportReasonChildAbuse();\n    case 'pornography':\n      return new GramJs.InputReportReasonPornography();\n    case 'copyright':\n      return new GramJs.InputReportReasonCopyright();\n    case 'fake':\n      return new GramJs.InputReportReasonFake();\n    case 'geoIrrelevant':\n      return new GramJs.InputReportReasonGeoIrrelevant();\n    case 'illegalDrugs':\n      return new GramJs.InputReportReasonIllegalDrugs();\n    case 'personalDetails':\n      return new GramJs.InputReportReasonPersonalDetails();\n    case 'other':\n      return new GramJs.InputReportReasonOther();\n  }\n\n  return undefined;\n}\n\nexport function buildSendMessageAction(action: ApiSendMessageAction) {\n  switch (action.type) {\n    case 'cancel':\n      return new GramJs.SendMessageCancelAction();\n    case 'typing':\n      return new GramJs.SendMessageTypingAction();\n    case 'recordAudio':\n      return new GramJs.SendMessageRecordAudioAction();\n    case 'chooseSticker':\n      return new GramJs.SendMessageChooseStickerAction();\n    case 'playingGame':\n      return new GramJs.SendMessageGamePlayAction();\n  }\n  return undefined;\n}\n\nexport function buildInputThemeParams(params: ApiThemeParameters) {\n  return new GramJs.DataJSON({\n    data: JSON.stringify(params),\n  });\n}\n\nexport function buildMtpPeerId(id: string, type: 'user' | 'chat' | 'channel') {\n  // Workaround for old-fashioned IDs stored locally\n  if (typeof id === 'number') {\n    return BigInt(Math.abs(id));\n  }\n\n  return type === 'user' ? BigInt(id) : BigInt(id.slice(1));\n}\n\nexport function buildInputGroupCall(groupCall: Partial<ApiGroupCall>) {\n  return new GramJs.InputGroupCall({\n    id: BigInt(groupCall.id!),\n    accessHash: BigInt(groupCall.accessHash!),\n  });\n}\n\nexport function buildInputPhoneCall({ id, accessHash }: ApiPhoneCall) {\n  return new GramJs.InputPhoneCall({\n    id: BigInt(id),\n    accessHash: BigInt(accessHash!),\n  });\n}\n\nexport function buildInputInvoice(invoice: ApiRequestInputInvoice) {\n  if ('slug' in invoice) {\n    return new GramJs.InputInvoiceSlug({\n      slug: invoice.slug,\n    });\n  } else {\n    return new GramJs.InputInvoiceMessage({\n      peer: buildInputPeer(invoice.chat.id, invoice.chat.accessHash),\n      msgId: invoice.messageId,\n    });\n  }\n}\n\nexport function buildInputReaction(reaction?: ApiReaction) {\n  if (reaction && 'emoticon' in reaction) {\n    return new GramJs.ReactionEmoji({\n      emoticon: reaction.emoticon,\n    });\n  }\n\n  if (reaction && 'documentId' in reaction) {\n    return new GramJs.ReactionCustomEmoji({\n      documentId: BigInt(reaction.documentId),\n    });\n  }\n\n  return new GramJs.ReactionEmpty();\n}\n\nexport function buildInputChatReactions(chatReactions?: ApiChatReactions) {\n  if (chatReactions?.type === 'all') {\n    return new GramJs.ChatReactionsAll({\n      allowCustom: chatReactions.areCustomAllowed,\n    });\n  }\n\n  if (chatReactions?.type === 'some') {\n    return new GramJs.ChatReactionsSome({\n      reactions: chatReactions.allowed.map(buildInputReaction),\n    });\n  }\n\n  return new GramJs.ChatReactionsNone();\n}\n\nexport function buildInputEmojiStatus(emojiStatus: ApiSticker, expires?: number) {\n  if (emojiStatus.id === DEFAULT_STATUS_ICON_ID) {\n    return new GramJs.EmojiStatusEmpty();\n  }\n\n  if (expires) {\n    return new GramJs.EmojiStatusUntil({\n      documentId: BigInt(emojiStatus.id),\n      until: expires,\n    });\n  }\n\n  return new GramJs.EmojiStatus({\n    documentId: BigInt(emojiStatus.id),\n  });\n}\n\nexport function buildInputTextWithEntities(formatted: ApiFormattedText) {\n  return new GramJs.TextWithEntities({\n    text: formatted.text,\n    entities: formatted.entities?.map(buildMtpMessageEntity) || [],\n  });\n}\n","import type {\n  ApiCallProtocol,\n  ApiPhoneCallConnection,\n  GroupCallParticipant,\n  GroupCallParticipantVideo,\n  SsrcGroup,\n} from '../../../lib/secret-sauce';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type { ApiGroupCall, ApiPhoneCall } from '../../types';\nimport { getApiChatIdFromMtpPeer, isPeerUser } from './peers';\n\nexport function buildApiGroupCallParticipant(participant: GramJs.GroupCallParticipant): GroupCallParticipant {\n  const {\n    self, min, about, date, versioned, canSelfUnmute, justJoined, left, muted, mutedByYou, source, volume,\n    volumeByAdmin, videoJoined, peer, video, presentation, raiseHandRating,\n  } = participant;\n\n  return {\n    isSelf: self,\n    isMin: min,\n    canSelfUnmute,\n    isLeft: left,\n    isMuted: muted,\n    isMutedByMe: mutedByYou,\n    hasJustJoined: justJoined,\n    isVolumeByAdmin: volumeByAdmin,\n    isVersioned: versioned,\n    isVideoJoined: videoJoined,\n    about,\n    source,\n    raiseHandRating: raiseHandRating?.toString(),\n    volume,\n    date: new Date(date),\n    isUser: isPeerUser(peer),\n    id: getApiChatIdFromMtpPeer(peer),\n    video: video ? buildApiGroupCallParticipantVideo(video) : undefined,\n    presentation: presentation ? buildApiGroupCallParticipantVideo(presentation) : undefined,\n  };\n}\n\nfunction buildApiGroupCallParticipantVideo(\n  participantVideo: GramJs.GroupCallParticipantVideo,\n): GroupCallParticipantVideo {\n  const {\n    audioSource, endpoint, paused, sourceGroups,\n  } = participantVideo;\n  return {\n    audioSource,\n    endpoint,\n    isPaused: paused,\n    sourceGroups: sourceGroups.map(buildApiGroupCallParticipantVideoSourceGroup),\n  };\n}\n\nfunction buildApiGroupCallParticipantVideoSourceGroup(\n  participantVideoSourceGroup: GramJs.GroupCallParticipantVideoSourceGroup,\n): SsrcGroup {\n  return {\n    semantics: participantVideoSourceGroup.semantics,\n    sources: participantVideoSourceGroup.sources,\n  };\n}\n\nexport function buildApiGroupCall(groupCall: GramJs.TypeGroupCall): ApiGroupCall {\n  const {\n    id, accessHash,\n  } = groupCall;\n\n  if (groupCall instanceof GramJs.GroupCallDiscarded) {\n    return {\n      connectionState: 'discarded',\n      id: id.toString(),\n      accessHash: accessHash.toString(),\n      participantsCount: 0,\n      version: 0,\n      participants: {},\n    };\n  }\n\n  const {\n    version, participantsCount, streamDcId, scheduleDate, canChangeJoinMuted, joinMuted, canStartVideo,\n    scheduleStartSubscribed,\n  } = groupCall;\n\n  return {\n    connectionState: 'disconnected',\n    isLoaded: true,\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    version,\n    participantsCount,\n    streamDcId,\n    scheduleDate,\n    canChangeJoinMuted,\n    joinMuted,\n    canStartVideo,\n    scheduleStartSubscribed,\n    participants: {},\n  };\n}\n\nexport function getGroupCallId(groupCall: GramJs.TypeInputGroupCall) {\n  return groupCall.id.toString();\n}\n\nexport function buildPhoneCall(call: GramJs.TypePhoneCall): ApiPhoneCall {\n  const { id } = call;\n\n  let phoneCall: ApiPhoneCall = {\n    id: id.toString(),\n  };\n\n  if (call instanceof GramJs.PhoneCallAccepted\n    || call instanceof GramJs.PhoneCallWaiting\n    || call instanceof GramJs.PhoneCall\n    || call instanceof GramJs.PhoneCallRequested) {\n    const {\n      accessHash, adminId, date, video, participantId, protocol,\n    } = call;\n\n    phoneCall = {\n      ...phoneCall,\n      accessHash: accessHash.toString(),\n      adminId: adminId.toString(),\n      participantId: participantId.toString(),\n      date,\n      isVideo: video,\n      protocol: buildApiCallProtocol(protocol),\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCall) {\n    const {\n      p2pAllowed, gAOrB, keyFingerprint, connections, startDate,\n    } = call;\n\n    phoneCall = {\n      ...phoneCall,\n      state: 'active',\n      gAOrB: Array.from(gAOrB),\n      keyFingerprint: keyFingerprint.toString(),\n      startDate,\n      p2pAllowed,\n      connections: connections.map(buildApiCallConnection).filter(Boolean) as ApiPhoneCallConnection[],\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallDiscarded) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'discarded',\n      duration: call.duration,\n      reason: buildApiCallDiscardReason(call.reason),\n      needRating: call.needRating,\n      needDebug: call.needDebug,\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallWaiting) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'waiting',\n      receiveDate: call.receiveDate,\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallAccepted) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'accepted',\n      gB: Array.from(call.gB),\n    };\n  }\n\n  if (call instanceof GramJs.PhoneCallRequested) {\n    phoneCall = {\n      ...phoneCall,\n      state: 'requested',\n      gAHash: Array.from(call.gAHash),\n    };\n  }\n\n  return phoneCall;\n}\n\nexport function buildApiCallDiscardReason(discardReason?: GramJs.TypePhoneCallDiscardReason) {\n  if (discardReason instanceof GramJs.PhoneCallDiscardReasonMissed) {\n    return 'missed';\n  } else if (discardReason instanceof GramJs.PhoneCallDiscardReasonBusy) {\n    return 'busy';\n  } else if (discardReason instanceof GramJs.PhoneCallDiscardReasonHangup) {\n    return 'hangup';\n  } else {\n    return 'disconnect';\n  }\n}\n\nfunction buildApiCallConnection(connection: GramJs.TypePhoneConnection): ApiPhoneCallConnection | undefined {\n  if (connection instanceof GramJs.PhoneConnectionWebrtc) {\n    const {\n      username, password, turn, stun, ip, ipv6, port,\n    } = connection;\n\n    return {\n      username,\n      password,\n      isTurn: turn,\n      isStun: stun,\n      ip,\n      ipv6,\n      port,\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexport function buildApiCallProtocol(protocol: GramJs.PhoneCallProtocol): ApiCallProtocol {\n  const {\n    libraryVersions, minLayer, maxLayer, udpP2p, udpReflector,\n  } = protocol;\n\n  return {\n    libraryVersions,\n    minLayer,\n    maxLayer,\n    isUdpP2p: udpP2p,\n    isUdpReflector: udpReflector,\n  };\n}\n\nexport function buildCallProtocol() {\n  return new GramJs.PhoneCallProtocol({\n    libraryVersions: ['4.0.0'],\n    minLayer: 92,\n    maxLayer: 92,\n    udpReflector: true,\n    udpP2p: true,\n  });\n}\n","// Copyright Twitter Inc. Licensed under MIT\n// https://github.com/twitter/twemoji-parser/blob/master/LICENSE.md\n// Version f8312f3 12.03.2022\n\nconst vs16RegExp = /\\uFE0F/g;\n// avoid using a string literal like '\\u200D' here because minifiers expand it inline\nconst zeroWidthJoiner = String.fromCharCode(0x200d);\n\nexport function removeVS16s(rawEmoji) {\n  return rawEmoji.indexOf(zeroWidthJoiner) < 0 ? rawEmoji.replace(vs16RegExp, '') : rawEmoji;\n}\n\n// Default Twemoji regex was modified here.\n// An exception for ascii emoji has been added to the beginning of the regular string: 🅰🅱🅾🅿\n// UTF-16 endcoding are \\ud83c\\udd70, \\ud83c\\udd71,\\ud83c\\udd7e and \\ud83c\\udd7f\n// These emojis in the graphic version must end with the `\\ufe0f` symbol.\n\n// This file is generated by source/emoji/scripts/generate.sh\n// eslint-disable-next-line max-len\nexport default /(?:\\ud83c[\\udd70\\udd71\\udd7e\\udd7f]\\ufe0f)|(?:\\ud83d\\udc68\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffc-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc68\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udffe]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffc-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffe]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d[\\udc68\\udc69]|\\ud83e\\udef1\\ud83c\\udffb\\u200d\\ud83e\\udef2\\ud83c[\\udffc-\\udfff]|\\ud83e\\udef1\\ud83c\\udffc\\u200d\\ud83e\\udef2\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\udef1\\ud83c\\udffd\\u200d\\ud83e\\udef2\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\udef1\\ud83c\\udffe\\u200d\\ud83e\\udef2\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\udef1\\ud83c\\udfff\\u200d\\ud83e\\udef2\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1|\\ud83d\\udc6b\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc6c\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc6d\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc8f\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc91\\ud83c[\\udffb-\\udfff]|\\ud83e\\udd1d\\ud83c[\\udffb-\\udfff]|\\ud83d[\\udc6b-\\udc6d\\udc8f\\udc91]|\\ud83e\\udd1d)|(?:\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1)(?:\\ud83c[\\udffb-\\udfff])?\\u200d(?:\\u2695\\ufe0f|\\u2696\\ufe0f|\\u2708\\ufe0f|\\ud83c[\\udf3e\\udf73\\udf7c\\udf84\\udf93\\udfa4\\udfa8\\udfeb\\udfed]|\\ud83d[\\udcbb\\udcbc\\udd27\\udd2c\\ude80\\ude92]|\\ud83e[\\uddaf-\\uddb3\\uddbc\\uddbd])|(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75]|\\u26f9)((?:\\ud83c[\\udffb-\\udfff]|\\ufe0f)\\u200d[\\u2640\\u2642]\\ufe0f)|(?:\\ud83c[\\udfc3\\udfc4\\udfca]|\\ud83d[\\udc6e\\udc70\\udc71\\udc73\\udc77\\udc81\\udc82\\udc86\\udc87\\ude45-\\ude47\\ude4b\\ude4d\\ude4e\\udea3\\udeb4-\\udeb6]|\\ud83e[\\udd26\\udd35\\udd37-\\udd39\\udd3d\\udd3e\\uddb8\\uddb9\\uddcd-\\uddcf\\uddd4\\uddd6-\\udddd])(?:\\ud83c[\\udffb-\\udfff])?\\u200d[\\u2640\\u2642]\\ufe0f|(?:\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83c\\udff3\\ufe0f\\u200d\\u26a7\\ufe0f|\\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08|\\ud83d\\ude36\\u200d\\ud83c\\udf2b\\ufe0f|\\u2764\\ufe0f\\u200d\\ud83d\\udd25|\\u2764\\ufe0f\\u200d\\ud83e\\ude79|\\ud83c\\udff4\\u200d\\u2620\\ufe0f|\\ud83d\\udc15\\u200d\\ud83e\\uddba|\\ud83d\\udc3b\\u200d\\u2744\\ufe0f|\\ud83d\\udc41\\u200d\\ud83d\\udde8|\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc6f\\u200d\\u2640\\ufe0f|\\ud83d\\udc6f\\u200d\\u2642\\ufe0f|\\ud83d\\ude2e\\u200d\\ud83d\\udca8|\\ud83d\\ude35\\u200d\\ud83d\\udcab|\\ud83e\\udd3c\\u200d\\u2640\\ufe0f|\\ud83e\\udd3c\\u200d\\u2642\\ufe0f|\\ud83e\\uddde\\u200d\\u2640\\ufe0f|\\ud83e\\uddde\\u200d\\u2642\\ufe0f|\\ud83e\\udddf\\u200d\\u2640\\ufe0f|\\ud83e\\udddf\\u200d\\u2642\\ufe0f|\\ud83d\\udc08\\u200d\\u2b1b)|[#*0-9]\\ufe0f?\\u20e3|(?:[©®\\u2122\\u265f]\\ufe0f)|(?:\\ud83c[\\udc04\\ude02\\ude1a\\ude2f\\ude37\\udf21\\udf24-\\udf2c\\udf36\\udf7d\\udf96\\udf97\\udf99-\\udf9b\\udf9e\\udf9f\\udfcd\\udfce\\udfd4-\\udfdf\\udff3\\udff5\\udff7]|\\ud83d[\\udc3f\\udc41\\udcfd\\udd49\\udd4a\\udd6f\\udd70\\udd73\\udd76-\\udd79\\udd87\\udd8a-\\udd8d\\udda5\\udda8\\uddb1\\uddb2\\uddbc\\uddc2-\\uddc4\\uddd1-\\uddd3\\udddc-\\uddde\\udde1\\udde3\\udde8\\uddef\\uddf3\\uddfa\\udecb\\udecd-\\udecf\\udee0-\\udee5\\udee9\\udef0\\udef3]|[\\u203c\\u2049\\u2139\\u2194-\\u2199\\u21a9\\u21aa\\u231a\\u231b\\u2328\\u23cf\\u23ed-\\u23ef\\u23f1\\u23f2\\u23f8-\\u23fa\\u24c2\\u25aa\\u25ab\\u25b6\\u25c0\\u25fb-\\u25fe\\u2600-\\u2604\\u260e\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262a\\u262e\\u262f\\u2638-\\u263a\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267b\\u267f\\u2692-\\u2697\\u2699\\u269b\\u269c\\u26a0\\u26a1\\u26a7\\u26aa\\u26ab\\u26b0\\u26b1\\u26bd\\u26be\\u26c4\\u26c5\\u26c8\\u26cf\\u26d1\\u26d3\\u26d4\\u26e9\\u26ea\\u26f0-\\u26f5\\u26f8\\u26fa\\u26fd\\u2702\\u2708\\u2709\\u270f\\u2712\\u2714\\u2716\\u271d\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u2764\\u27a1\\u2934\\u2935\\u2b05-\\u2b07\\u2b1b\\u2b1c\\u2b50\\u2b55\\u3030\\u303d\\u3297\\u3299])(?:\\ufe0f|(?!\\ufe0e))|(?:(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75\\udd90]|[\\u261d\\u26f7\\u26f9\\u270c\\u270d])(?:\\ufe0f|(?!\\ufe0e))|(?:\\ud83c[\\udf85\\udfc2-\\udfc4\\udfc7\\udfca]|\\ud83d[\\udc42\\udc43\\udc46-\\udc50\\udc66-\\udc69\\udc6e\\udc70-\\udc78\\udc7c\\udc81-\\udc83\\udc85-\\udc87\\udcaa\\udd7a\\udd95\\udd96\\ude45-\\ude47\\ude4b-\\ude4f\\udea3\\udeb4-\\udeb6\\udec0\\udecc]|\\ud83e[\\udd0c\\udd0f\\udd18-\\udd1c\\udd1e\\udd1f\\udd26\\udd30-\\udd39\\udd3d\\udd3e\\udd77\\uddb5\\uddb6\\uddb8\\uddb9\\uddbb\\uddcd-\\uddcf\\uddd1-\\udddd\\udec3-\\udec5\\udef0-\\udef6]|[\\u270a\\u270b]))(?:\\ud83c[\\udffb-\\udfff])?|(?:\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc65\\udb40\\udc6e\\udb40\\udc67\\udb40\\udc7f|\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc73\\udb40\\udc63\\udb40\\udc74\\udb40\\udc7f|\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc77\\udb40\\udc6c\\udb40\\udc73\\udb40\\udc7f|\\ud83c\\udde6\\ud83c[\\udde8-\\uddec\\uddee\\uddf1\\uddf2\\uddf4\\uddf6-\\uddfa\\uddfc\\uddfd\\uddff]|\\ud83c\\udde7\\ud83c[\\udde6\\udde7\\udde9-\\uddef\\uddf1-\\uddf4\\uddf6-\\uddf9\\uddfb\\uddfc\\uddfe\\uddff]|\\ud83c\\udde8\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\uddee\\uddf0-\\uddf5\\uddf7\\uddfa-\\uddff]|\\ud83c\\udde9\\ud83c[\\uddea\\uddec\\uddef\\uddf0\\uddf2\\uddf4\\uddff]|\\ud83c\\uddea\\ud83c[\\udde6\\udde8\\uddea\\uddec\\udded\\uddf7-\\uddfa]|\\ud83c\\uddeb\\ud83c[\\uddee-\\uddf0\\uddf2\\uddf4\\uddf7]|\\ud83c\\uddec\\ud83c[\\udde6\\udde7\\udde9-\\uddee\\uddf1-\\uddf3\\uddf5-\\uddfa\\uddfc\\uddfe]|\\ud83c\\udded\\ud83c[\\uddf0\\uddf2\\uddf3\\uddf7\\uddf9\\uddfa]|\\ud83c\\uddee\\ud83c[\\udde8-\\uddea\\uddf1-\\uddf4\\uddf6-\\uddf9]|\\ud83c\\uddef\\ud83c[\\uddea\\uddf2\\uddf4\\uddf5]|\\ud83c\\uddf0\\ud83c[\\uddea\\uddec-\\uddee\\uddf2\\uddf3\\uddf5\\uddf7\\uddfc\\uddfe\\uddff]|\\ud83c\\uddf1\\ud83c[\\udde6-\\udde8\\uddee\\uddf0\\uddf7-\\uddfb\\uddfe]|\\ud83c\\uddf2\\ud83c[\\udde6\\udde8-\\udded\\uddf0-\\uddff]|\\ud83c\\uddf3\\ud83c[\\udde6\\udde8\\uddea-\\uddec\\uddee\\uddf1\\uddf4\\uddf5\\uddf7\\uddfa\\uddff]|\\ud83c\\uddf4\\ud83c\\uddf2|\\ud83c\\uddf5\\ud83c[\\udde6\\uddea-\\udded\\uddf0-\\uddf3\\uddf7-\\uddf9\\uddfc\\uddfe]|\\ud83c\\uddf6\\ud83c\\udde6|\\ud83c\\uddf7\\ud83c[\\uddea\\uddf4\\uddf8\\uddfa\\uddfc]|\\ud83c\\uddf8\\ud83c[\\udde6-\\uddea\\uddec-\\uddf4\\uddf7-\\uddf9\\uddfb\\uddfd-\\uddff]|\\ud83c\\uddf9\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\udded\\uddef-\\uddf4\\uddf7\\uddf9\\uddfb\\uddfc\\uddff]|\\ud83c\\uddfa\\ud83c[\\udde6\\uddec\\uddf2\\uddf3\\uddf8\\uddfe\\uddff]|\\ud83c\\uddfb\\ud83c[\\udde6\\udde8\\uddea\\uddec\\uddee\\uddf3\\uddfa]|\\ud83c\\uddfc\\ud83c[\\uddeb\\uddf8]|\\ud83c\\uddfd\\ud83c\\uddf0|\\ud83c\\uddfe\\ud83c[\\uddea\\uddf9]|\\ud83c\\uddff\\ud83c[\\udde6\\uddf2\\uddfc]|\\ud83c[\\udccf\\udd8e\\udd91-\\udd9a\\udde6-\\uddff\\ude01\\ude32-\\ude36\\ude38-\\ude3a\\ude50\\ude51\\udf00-\\udf20\\udf2d-\\udf35\\udf37-\\udf7c\\udf7e-\\udf84\\udf86-\\udf93\\udfa0-\\udfc1\\udfc5\\udfc6\\udfc8\\udfc9\\udfcf-\\udfd3\\udfe0-\\udff0\\udff4\\udff8-\\udfff]|\\ud83d[\\udc00-\\udc3e\\udc40\\udc44\\udc45\\udc51-\\udc65\\udc6a\\udc6f\\udc79-\\udc7b\\udc7d-\\udc80\\udc84\\udc88-\\udc8e\\udc90\\udc92-\\udca9\\udcab-\\udcfc\\udcff-\\udd3d\\udd4b-\\udd4e\\udd50-\\udd67\\udda4\\uddfb-\\ude44\\ude48-\\ude4a\\ude80-\\udea2\\udea4-\\udeb3\\udeb7-\\udebf\\udec1-\\udec5\\uded0-\\uded2\\uded5-\\uded7\\udedd-\\udedf\\udeeb\\udeec\\udef4-\\udefc\\udfe0-\\udfeb\\udff0]|\\ud83e[\\udd0d\\udd0e\\udd10-\\udd17\\udd20-\\udd25\\udd27-\\udd2f\\udd3a\\udd3c\\udd3f-\\udd45\\udd47-\\udd76\\udd78-\\uddb4\\uddb7\\uddba\\uddbc-\\uddcc\\uddd0\\uddde-\\uddff\\ude70-\\ude74\\ude78-\\ude7c\\ude80-\\ude86\\ude90-\\udeac\\udeb0-\\udeba\\udec0-\\udec2\\uded0-\\uded9\\udee0-\\udee7]|[\\u23e9-\\u23ec\\u23f0\\u23f3\\u267e\\u26ce\\u2705\\u2728\\u274c\\u274e\\u2753-\\u2755\\u2795-\\u2797\\u27b0\\u27bf\\ue50a])|\\ufe0f/g;\n","import twemojiRegex from '../lib/twemojiRegex';\n\nconst DETECT_UP_TO = 100;\nconst MAX_LENGTH = DETECT_UP_TO * 8; // Maximum 8 per one emoji.\nconst RE_EMOJI_ONLY = new RegExp(`^(?:${twemojiRegex.source})+$`, '');\n\nconst parseEmojiOnlyString = (text: string): number | false => {\n  const lines = text.split('\\n');\n  const textWithoutNewlines = lines.join('');\n  if (textWithoutNewlines.length > MAX_LENGTH) {\n    return false;\n  }\n\n  const isEmojiOnly = Boolean(textWithoutNewlines.match(RE_EMOJI_ONLY));\n  if (!isEmojiOnly) {\n    return false;\n  }\n  const countPerLine = lines.map((line) => {\n    let emojiCount = 0;\n    while (twemojiRegex.exec(line)) {\n      emojiCount++;\n\n      if (emojiCount > DETECT_UP_TO) {\n        twemojiRegex.lastIndex = 0;\n        return -1;\n      }\n    }\n\n    return emojiCount;\n  });\n\n  let max = lines.length;\n  for (let i = 0; i < countPerLine.length; i++) {\n    if (countPerLine[i] === -1) {\n      return false;\n    }\n    if (countPerLine[i] > max) {\n      max = countPerLine[i];\n    }\n  }\n\n  return max;\n};\n\nexport default parseEmojiOnlyString;\n","import type { ApiMessage } from '../../api/types';\nimport { ApiMessageEntityTypes } from '../../api/types';\nimport parseEmojiOnlyString from '../../util/parseEmojiOnlyString';\n\nexport function getEmojiOnlyCountForMessage(content: ApiMessage['content'], groupedId?: string): number | undefined {\n  if (!content.text) return undefined;\n  return (\n    !groupedId\n    && Object.keys(content).length === 1 // Only text is present\n    && !content.text.entities?.some((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji)\n    && parseEmojiOnlyString(content.text.text)\n  ) || undefined;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiMessage,\n  ApiMessageForwardInfo,\n  ApiPhoto,\n  ApiSticker,\n  ApiVideo,\n  ApiVoice,\n  ApiAudio,\n  ApiDocument,\n  ApiAction,\n  ApiContact,\n  ApiAttachment,\n  ApiPoll,\n  ApiNewPoll,\n  ApiWebPage,\n  ApiMessageEntity,\n  ApiFormattedText,\n  ApiReplyKeyboard,\n  ApiKeyboardButton,\n  ApiChat,\n  ApiThreadInfo,\n  ApiInvoice,\n  ApiGroupCall,\n  ApiReactions,\n  ApiReactionCount,\n  ApiUserReaction,\n  ApiAvailableReaction,\n  ApiSponsoredMessage,\n  ApiUser,\n  ApiLocation,\n  ApiGame,\n  PhoneCallAction,\n  ApiWebDocument,\n  ApiMessageEntityDefault,\n  ApiMessageExtendedMediaPreview,\n  ApiReaction,\n  ApiReactionEmoji,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  LOCAL_MESSAGE_MIN_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  VIDEO_MOV_TYPE,\n  VIDEO_WEBM_TYPE,\n} from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { buildStickerFromDocument } from './symbols';\nimport { buildApiPhoto, buildApiPhotoSize, buildApiThumbnailFromStripped } from './common';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport { addPhotoToLocalDb, resolveMessageApiChatId, serializeBytes } from '../helpers';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer, isPeerUser } from './peers';\nimport { buildApiCallDiscardReason } from './calls';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nconst TIMESTAMP_BASE = 1676e9; // 2023-02-10\nconst TIMESTAMP_PRECISION = 1e2; // 0.1s\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\n\nlet localMessageCounter = LOCAL_MESSAGE_MIN_ID;\n\n// Local IDs need to be fractional to allow service notifications to be placed between real messages.\n// It also allows to avoid collisions when sending messages from multiple tabs due to timestamp-based whole part.\n// To support up to 1M local messages, the whole part must be below 8.5B (https://stackoverflow.com/a/57225494/903919).\n// The overflow will happen when `datePart` is >3.59B which will be in June 2034.\nexport function getNextLocalMessageId() {\n  const datePart = Math.round((Date.now() - TIMESTAMP_BASE) / TIMESTAMP_PRECISION);\n  return LOCAL_MESSAGE_MIN_ID + datePart + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    fromId, message, entities, startParam, channelPost, chatInvite, chatInviteHash, randomId, recommended,\n  } = mtpMessage;\n  const chatId = fromId ? getApiChatIdFromMtpPeer(fromId) : undefined;\n  const chatInviteTitle = chatInvite\n    ? (chatInvite instanceof GramJs.ChatInvite\n      ? chatInvite.title\n      : !(chatInvite.chat instanceof GramJs.ChatEmpty) ? chatInvite.chat.title : undefined)\n    : undefined;\n\n  return {\n    randomId: serializeBytes(randomId),\n    isBot: fromId ? isPeerUser(fromId) : false,\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: Boolean(recommended),\n    ...(chatId && { chatId }),\n    ...(chatInviteHash && { chatInviteHash }),\n    ...(chatInvite && { chatInviteTitle }),\n    ...(startParam && { startParam }),\n    ...(channelPost && { channelPostId: channelPost }),\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\ntype UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards' | 'silent'\n  )>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const {\n    replyToMsgId, replyToTopId, forumTopic, replyToPeerId,\n  } = mtpMessage.replyTo || {};\n  const isEdited = mtpMessage.editDate && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { replies, mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  return {\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    views: mtpMessage.views,\n    forwards: mtpMessage.forwards,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    ...(replyToMsgId && { replyToMessageId: replyToMsgId }),\n    ...(forumTopic && { isTopicReply: true }),\n    ...(replyToPeerId && { replyToChatId: getApiChatIdFromMtpPeer(replyToPeerId) }),\n    ...(replyToTopId && { replyToTopMessageId: replyToTopId }),\n    ...(forwardInfo && { forwardInfo }),\n    ...(isEdited && { isEdited }),\n    ...(mtpMessage.editDate && { editDate: mtpMessage.editDate }),\n    ...(isMediaUnread && { isMediaUnread }),\n    ...(mtpMessage.mentioned && isMediaUnread && { hasUnreadMention: true }),\n    ...(mtpMessage.mentioned && { isMentioned: true }),\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    ...(replies && { repliesThreadInfo: buildThreadInfo(replies, mtpMessage.id, chatId) }),\n    ...(postAuthor && { postAuthorTitle: postAuthor }),\n    isProtected,\n    isForwardingAllowed,\n  };\n}\n\nexport function buildMessageReactions(reactions: GramJs.MessageReactions): ApiReactions {\n  const {\n    recentReactions, results, canSeeList,\n  } = reactions;\n\n  return {\n    canSeeList,\n    results: results.map(buildReactionCount).filter(Boolean).sort(reactionCountComparator),\n    recentReactions: recentReactions?.map(buildMessagePeerReaction).filter(Boolean),\n  };\n}\n\nfunction reactionCountComparator(a: ApiReactionCount, b: ApiReactionCount) {\n  const diff = b.count - a.count;\n  if (diff) return diff;\n  if (a.chosenOrder !== undefined && b.chosenOrder !== undefined) {\n    return a.chosenOrder - b.chosenOrder;\n  }\n  if (a.chosenOrder !== undefined) return 1;\n  if (b.chosenOrder !== undefined) return -1;\n  return 0;\n}\n\nfunction buildReactionCount(reactionCount: GramJs.ReactionCount): ApiReactionCount | undefined {\n  const { chosenOrder, count, reaction } = reactionCount;\n\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    chosenOrder,\n    count,\n    reaction: apiReaction,\n  };\n}\n\nexport function buildMessagePeerReaction(userReaction: GramJs.MessagePeerReaction): ApiUserReaction | undefined {\n  const {\n    peerId, reaction, big, unread,\n  } = userReaction;\n\n  const apiReaction = buildApiReaction(reaction);\n  if (!apiReaction) return undefined;\n\n  return {\n    userId: getApiChatIdFromMtpPeer(peerId),\n    reaction: apiReaction,\n    isUnread: unread,\n    isBig: big,\n  };\n}\n\nexport function buildApiReaction(reaction: GramJs.TypeReaction): ApiReaction | undefined {\n  if (reaction instanceof GramJs.ReactionEmoji) {\n    return {\n      emoticon: reaction.emoticon,\n    };\n  }\n\n  if (reaction instanceof GramJs.ReactionCustomEmoji) {\n    return {\n      documentId: reaction.documentId.toString(),\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiAvailableReaction(availableReaction: GramJs.AvailableReaction): ApiAvailableReaction {\n  const {\n    selectAnimation, staticIcon, reaction, title,\n    inactive, aroundAnimation, centerIcon, effectAnimation, activateAnimation,\n    premium,\n  } = availableReaction;\n\n  return {\n    selectAnimation: buildApiDocument(selectAnimation),\n    activateAnimation: buildApiDocument(activateAnimation),\n    effectAnimation: buildApiDocument(effectAnimation),\n    staticIcon: buildApiDocument(staticIcon),\n    aroundAnimation: aroundAnimation ? buildApiDocument(aroundAnimation) : undefined,\n    centerIcon: centerIcon ? buildApiDocument(centerIcon) : undefined,\n    reaction: { emoticon: reaction } as ApiReactionEmoji,\n    title,\n    isInactive: inactive,\n    isPremium: premium,\n  };\n}\n\nexport function buildMessageContent(\n  mtpMessage: UniversalMessage | GramJs.UpdateServiceNotification,\n) {\n  let content: ApiMessage['content'] = {};\n\n  if (mtpMessage.media) {\n    content = {\n      ...buildMessageMediaContent(mtpMessage.media),\n    };\n  }\n\n  const hasUnsupportedMedia = mtpMessage.media instanceof GramJs.MessageMediaUnsupported;\n\n  if (mtpMessage.message && !hasUnsupportedMedia\n    && !content.sticker && !content.poll && !content.contact && !(content.video?.isRound)) {\n    content = {\n      ...content,\n      text: buildMessageTextContent(mtpMessage.message, mtpMessage.entities),\n    };\n  }\n\n  return content;\n}\n\nexport function buildMessageTextContent(\n  message: string,\n  entities?: GramJs.TypeMessageEntity[],\n): ApiFormattedText {\n  return {\n    text: message,\n    ...(entities && { entities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage) {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyToMsgId, date,\n  } = draft;\n\n  return {\n    formattedText: message ? buildMessageTextContent(message, entities) : undefined,\n    replyingToId: replyToMsgId,\n    date,\n  };\n}\n\nexport function buildMessageMediaContent(media: GramJs.TypeMessageMedia): ApiMessage['content'] | undefined {\n  if ('ttlSeconds' in media && media.ttlSeconds) {\n    return undefined;\n  }\n\n  if ('extendedMedia' in media && media.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n    return buildMessageMediaContent(media.extendedMedia.media);\n  }\n\n  const sticker = buildSticker(media);\n  if (sticker) return { sticker };\n\n  const photo = buildPhoto(media);\n  if (photo) return { photo };\n\n  const video = buildVideo(media);\n  if (video) return { video };\n\n  const audio = buildAudio(media);\n  if (audio) return { audio };\n\n  const voice = buildVoice(media);\n  if (voice) return { voice };\n\n  const document = buildDocumentFromMedia(media);\n  if (document) return { document };\n\n  const contact = buildContact(media);\n  if (contact) return { contact };\n\n  const poll = buildPollFromMedia(media);\n  if (poll) return { poll };\n\n  const webPage = buildWebPage(media);\n  if (webPage) return { webPage };\n\n  const invoice = buildInvoiceFromMedia(media);\n  if (invoice) return { invoice };\n\n  const location = buildLocationFromMedia(media);\n  if (location) return { location };\n\n  const game = buildGameFromMedia(media);\n  if (game) return { game };\n\n  return undefined;\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    fromChatId: savedFromPeerId || fromId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    senderUserId: fromId,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildSticker(media: GramJs.TypeMessageMedia): ApiSticker | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  return buildStickerFromDocument(media.document, media.nopremium);\n}\n\nfunction buildPhoto(media: GramJs.TypeMessageMedia): ApiPhoto | undefined {\n  if (!(media instanceof GramJs.MessageMediaPhoto) || !media.photo || !(media.photo instanceof GramJs.Photo)) {\n    return undefined;\n  }\n\n  return buildApiPhoto(media.photo, media.spoiler);\n}\n\nexport function buildVideoFromDocument(document: GramJs.Document, isSpoiler?: boolean): ApiVideo | undefined {\n  if (document instanceof GramJs.DocumentEmpty) {\n    return undefined;\n  }\n\n  const {\n    id, mimeType, thumbs, size, attributes,\n  } = document;\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_WEBM_TYPE && !(self as any).isWebmSupported) {\n    return undefined;\n  }\n\n  // eslint-disable-next-line no-restricted-globals\n  if (mimeType === VIDEO_MOV_TYPE && !(self as any).isMovSupported) {\n    return undefined;\n  }\n\n  const videoAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n  if (!videoAttr) {\n    return undefined;\n  }\n\n  const gifAttr = attributes\n    .find((a: any): a is GramJs.DocumentAttributeAnimated => a instanceof GramJs.DocumentAttributeAnimated);\n\n  const {\n    duration,\n    w: width,\n    h: height,\n    supportsStreaming = false,\n    roundMessage: isRound = false,\n  } = videoAttr;\n\n  return {\n    id: String(id),\n    mimeType,\n    duration,\n    fileName: getFilenameFromDocument(document, 'video'),\n    width,\n    height,\n    supportsStreaming,\n    isRound,\n    isGif: Boolean(gifAttr),\n    thumbnail: buildApiThumbnailFromStripped(thumbs),\n    size: size.toJSNumber(),\n    isSpoiler,\n  };\n}\n\nfunction buildVideo(media: GramJs.TypeMessageMedia): ApiVideo | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !(media.document instanceof GramJs.Document)\n    || !media.document.mimeType.startsWith('video')\n  ) {\n    return undefined;\n  }\n\n  return buildVideoFromDocument(media.document, media.spoiler);\n}\n\nfunction buildAudio(media: GramJs.TypeMessageMedia): ApiAudio | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || audioAttribute.voice) {\n    return undefined;\n  }\n\n  const thumbnailSizes = media.document.thumbs && media.document.thumbs\n    .filter((thumb): thumb is GramJs.PhotoSize => thumb instanceof GramJs.PhotoSize)\n    .map((thumb) => buildApiPhotoSize(thumb));\n\n  return {\n    id: String(media.document.id),\n    fileName: getFilenameFromDocument(media.document, 'audio'),\n    thumbnailSizes,\n    size: media.document.size.toJSNumber(),\n    ...pick(media.document, ['mimeType']),\n    ...pick(audioAttribute, ['duration', 'performer', 'title']),\n  };\n}\n\nfunction buildVoice(media: GramJs.TypeMessageMedia): ApiVoice | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaDocument)\n    || !media.document\n    || !(media.document instanceof GramJs.Document)\n  ) {\n    return undefined;\n  }\n\n  const audioAttribute = media.document.attributes\n    .find((attr: any): attr is GramJs.DocumentAttributeAudio => (\n      attr instanceof GramJs.DocumentAttributeAudio\n    ));\n\n  if (!audioAttribute || !audioAttribute.voice) {\n    return undefined;\n  }\n\n  const { duration, waveform } = audioAttribute;\n\n  return {\n    id: String(media.document.id),\n    duration,\n    waveform: waveform ? Array.from(waveform) : undefined,\n  };\n}\n\nfunction buildDocumentFromMedia(media: GramJs.TypeMessageMedia) {\n  if (!(media instanceof GramJs.MessageMediaDocument) || !media.document) {\n    return undefined;\n  }\n\n  return buildApiDocument(media.document);\n}\n\nexport function buildApiDocument(document: GramJs.TypeDocument): ApiDocument | undefined {\n  if (!(document instanceof GramJs.Document)) {\n    return undefined;\n  }\n\n  const {\n    id, size, mimeType, date, thumbs, attributes,\n  } = document;\n\n  const thumbnail = thumbs && buildApiThumbnailFromStripped(thumbs);\n\n  let mediaType: ApiDocument['mediaType'] | undefined;\n  let mediaSize: ApiDocument['mediaSize'] | undefined;\n  const photoSize = thumbs && thumbs.find((s: any): s is GramJs.PhotoSize => s instanceof GramJs.PhotoSize);\n  if (photoSize) {\n    mediaSize = {\n      width: photoSize.w,\n      height: photoSize.h,\n    };\n\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'photo';\n\n      const imageAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeImageSize => a instanceof GramJs.DocumentAttributeImageSize);\n\n      if (imageAttribute) {\n        const { w: width, h: height } = imageAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n      mediaType = 'video';\n      const videoAttribute = attributes\n        .find((a: any): a is GramJs.DocumentAttributeVideo => a instanceof GramJs.DocumentAttributeVideo);\n\n      if (videoAttribute) {\n        const { w: width, h: height } = videoAttribute;\n        mediaSize = {\n          width,\n          height,\n        };\n      }\n    }\n  }\n\n  return {\n    id: String(id),\n    size: size.toJSNumber(),\n    mimeType,\n    timestamp: date,\n    fileName: getFilenameFromDocument(document),\n    thumbnail,\n    mediaType,\n    mediaSize,\n  };\n}\n\nfunction buildContact(media: GramJs.TypeMessageMedia): ApiContact | undefined {\n  if (!(media instanceof GramJs.MessageMediaContact)) {\n    return undefined;\n  }\n\n  const {\n    firstName, lastName, phoneNumber, userId,\n  } = media;\n\n  return {\n    firstName, lastName, phoneNumber, userId: buildApiPeerId(userId, 'user'),\n  };\n}\n\nfunction buildPollFromMedia(media: GramJs.TypeMessageMedia): ApiPoll | undefined {\n  if (!(media instanceof GramJs.MessageMediaPoll)) {\n    return undefined;\n  }\n\n  return buildPoll(media.poll, media.results);\n}\n\nfunction buildInvoiceFromMedia(media: GramJs.TypeMessageMedia): ApiInvoice | undefined {\n  if (!(media instanceof GramJs.MessageMediaInvoice)) {\n    return undefined;\n  }\n\n  return buildInvoice(media);\n}\n\nfunction buildLocationFromMedia(media: GramJs.TypeMessageMedia): ApiLocation | undefined {\n  if (media instanceof GramJs.MessageMediaGeo) {\n    return buildGeo(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaVenue) {\n    return buildVenue(media);\n  }\n\n  if (media instanceof GramJs.MessageMediaGeoLive) {\n    return buildGeoLive(media);\n  }\n\n  return undefined;\n}\n\nfunction buildGeo(media: GramJs.MessageMediaGeo): ApiLocation | undefined {\n  const point = buildGeoPoint(media.geo);\n  return point && { type: 'geo', geo: point };\n}\n\nfunction buildVenue(media: GramJs.MessageMediaVenue): ApiLocation | undefined {\n  const {\n    geo, title, provider, address, venueId, venueType,\n  } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'venue',\n    geo: point,\n    title,\n    provider,\n    address,\n    venueId,\n    venueType,\n  };\n}\n\nfunction buildGeoLive(media: GramJs.MessageMediaGeoLive): ApiLocation | undefined {\n  const { geo, period, heading } = media;\n  const point = buildGeoPoint(geo);\n  return point && {\n    type: 'geoLive',\n    geo: point,\n    period,\n    heading,\n  };\n}\n\nfunction buildGeoPoint(geo: GramJs.TypeGeoPoint): ApiLocation['geo'] | undefined {\n  if (geo instanceof GramJs.GeoPointEmpty) return undefined;\n  const {\n    long, lat, accuracyRadius, accessHash,\n  } = geo;\n  return {\n    long,\n    lat,\n    accessHash: accessHash.toString(),\n    accuracyRadius,\n  };\n}\n\nfunction buildGameFromMedia(media: GramJs.TypeMessageMedia): ApiGame | undefined {\n  if (!(media instanceof GramJs.MessageMediaGame)) {\n    return undefined;\n  }\n\n  return buildGame(media);\n}\n\nfunction buildGame(media: GramJs.MessageMediaGame): ApiGame | undefined {\n  const {\n    id, accessHash, shortName, title, description, photo: apiPhoto, document: apiDocument,\n  } = media.game;\n\n  const photo = apiPhoto instanceof GramJs.Photo ? buildApiPhoto(apiPhoto) : undefined;\n  const document = apiDocument instanceof GramJs.Document ? buildApiDocument(apiDocument) : undefined;\n\n  return {\n    id: id.toString(),\n    accessHash: accessHash.toString(),\n    shortName,\n    title,\n    description,\n    photo,\n    document,\n  };\n}\n\nexport function buildPoll(poll: GramJs.Poll, pollResults: GramJs.PollResults): ApiPoll {\n  const { id, answers: rawAnswers } = poll;\n  const answers = rawAnswers.map((answer) => ({\n    text: answer.text,\n    option: serializeBytes(answer.option),\n  }));\n\n  return {\n    id: String(id),\n    summary: {\n      isPublic: poll.publicVoters,\n      ...pick(poll, [\n        'closed',\n        'multipleChoice',\n        'quiz',\n        'question',\n        'closePeriod',\n        'closeDate',\n      ]),\n      answers,\n    },\n    results: buildPollResults(pollResults),\n  };\n}\n\nexport function buildInvoice(media: GramJs.MessageMediaInvoice): ApiInvoice {\n  const {\n    description: text, title, photo, test, totalAmount, currency, receiptMsgId, extendedMedia,\n  } = media;\n\n  const preview = extendedMedia instanceof GramJs.MessageExtendedMediaPreview\n    ? buildApiMessageExtendedMediaPreview(extendedMedia) : undefined;\n\n  return {\n    title,\n    text,\n    photo: buildApiWebDocument(photo),\n    receiptMsgId,\n    amount: Number(totalAmount),\n    currency,\n    isTest: test,\n    extendedMedia: preview,\n  };\n}\n\nexport function buildPollResults(pollResults: GramJs.PollResults): ApiPoll['results'] {\n  const {\n    results: rawResults, totalVoters, recentVoters, solution, solutionEntities: entities, min,\n  } = pollResults;\n  const results = rawResults && rawResults.map(({\n    option, chosen, correct, voters,\n  }) => ({\n    isChosen: chosen,\n    isCorrect: correct,\n    option: serializeBytes(option),\n    votersCount: voters,\n  }));\n\n  return {\n    isMin: min,\n    totalVoters,\n    recentVoterIds: recentVoters?.map((id) => buildApiPeerId(id, 'user')),\n    results,\n    solution,\n    ...(entities && { solutionEntities: entities.map(buildApiMessageEntity) }),\n  };\n}\n\nexport function buildWebPage(media: GramJs.TypeMessageMedia): ApiWebPage | undefined {\n  if (\n    !(media instanceof GramJs.MessageMediaWebPage)\n    || !(media.webpage instanceof GramJs.WebPage)\n  ) {\n    return undefined;\n  }\n\n  const { id, photo, document } = media.webpage;\n\n  let video;\n  if (document instanceof GramJs.Document && document.mimeType.startsWith('video/')) {\n    video = buildVideoFromDocument(document);\n  }\n\n  return {\n    id: Number(id),\n    ...pick(media.webpage, [\n      'url',\n      'displayUrl',\n      'type',\n      'siteName',\n      'title',\n      'description',\n      'duration',\n    ]),\n    photo: photo instanceof GramJs.Photo ? buildApiPhoto(photo) : undefined,\n    document: !video && document ? buildApiDocument(document) : undefined,\n    video,\n  };\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let text: string;\n  const translationValues = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    text = 'Chat.Service.BotPermissionAllowed';\n    translationValues.push(action.domain);\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionAttachMenuBotAllowed) {\n    text = 'ActionAttachMenuBotAllowed';\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  // TODO Move to the proper button inside preview\n  if (!replyMarkup) {\n    if (media instanceof GramJs.MessageMediaWebPage && media.webpage instanceof GramJs.WebPage) {\n      if (media.webpage.type === 'telegram_message') {\n        return {\n          inlineButtons: [[{\n            type: 'url',\n            text: 'Show Message',\n            url: media.webpage.url,\n          }]],\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  // TODO\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction getFilenameFromDocument(document: GramJs.Document, defaultBase = 'file') {\n  const { mimeType, attributes } = document;\n  const filenameAttribute = attributes\n    .find((a: any): a is GramJs.DocumentAttributeFilename => a instanceof GramJs.DocumentAttributeFilename);\n\n  if (filenameAttribute) {\n    return filenameAttribute.fileName;\n  }\n\n  const extension = mimeType.split('/')[1];\n\n  return `${defaultBase}${String(document.id)}.${extension}`;\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyingTo?: number,\n  replyingToTopId?: number,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiChat | ApiUser,\n): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n  const isForum = chat.isForum;\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    ...(replyingTo && { replyToMessageId: replyingTo }),\n    ...(replyingToTopId && { replyToTopMessageId: replyingToTopId }),\n    ...((replyingTo || replyingToTopId) && isForum && { isTopicReply: true }),\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n}): ApiMessage {\n  const localId = getNextLocalMessageId();\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyToTopMessageId: toThreadId,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        senderUserId: senderId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildUploadingMedia(\n  attachment: ApiAttachment,\n): ApiMessage['content'] {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: blobUrl },\n            blobUrl,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n        },\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiMessageExtendedMediaPreview(\n  preview: GramJs.MessageExtendedMediaPreview,\n): ApiMessageExtendedMediaPreview {\n  const {\n    w, h, thumb, videoDuration,\n  } = preview;\n\n  return {\n    width: w,\n    height: h,\n    duration: videoDuration,\n    thumbnail: thumb ? buildApiThumbnailFromStripped([thumb]) : undefined,\n  };\n}\n\nexport function buildApiWebDocument(document?: GramJs.TypeWebDocument): ApiWebDocument | undefined {\n  if (!document) return undefined;\n\n  const {\n    url, size, mimeType,\n  } = document;\n  const accessHash = document instanceof GramJs.WebDocument ? document.accessHash.toString() : undefined;\n  const sizeAttr = document.attributes.find((attr): attr is GramJs.DocumentAttributeImageSize => (\n    attr instanceof GramJs.DocumentAttributeImageSize\n  ));\n  const dimensions = sizeAttr && { width: sizeAttr.w, height: sizeAttr.h };\n\n  return {\n    url,\n    accessHash,\n    size,\n    mimeType,\n    dimensions,\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildApiMessageEntity(entity: GramJs.TypeMessageEntity): ApiMessageEntity {\n  const {\n    className: type, offset, length,\n  } = entity;\n\n  if (entity instanceof GramJs.MessageEntityMentionName) {\n    return {\n      type: ApiMessageEntityTypes.MentionName,\n      offset,\n      length,\n      userId: buildApiPeerId(entity.userId, 'user'),\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityTextUrl) {\n    return {\n      type: ApiMessageEntityTypes.TextUrl,\n      offset,\n      length,\n      url: entity.url,\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityPre) {\n    return {\n      type: ApiMessageEntityTypes.Pre,\n      offset,\n      length,\n      language: entity.language,\n    };\n  }\n\n  if (entity instanceof GramJs.MessageEntityCustomEmoji) {\n    return {\n      type: ApiMessageEntityTypes.CustomEmoji,\n      offset,\n      length,\n      documentId: entity.documentId.toString(),\n    };\n  }\n\n  return {\n    type: type as `${ApiMessageEntityDefault['type']}`,\n    offset,\n    length,\n  };\n}\n\nfunction buildThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const isPostThread = apiChannelId && chatId !== apiChannelId;\n\n  return {\n    isComments: comments,\n    threadId: messageId,\n    ...(isPostThread ? {\n      chatId: apiChannelId,\n      originChannelId: chatId,\n    } : {\n      chatId,\n    }),\n    messagesCount: replies,\n    lastMessageId: maxId,\n    lastReadInboxMessageId: readMaxId,\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n}\n\nexport function buildApiFormattedText(textWithEntities: GramJs.TextWithEntities): ApiFormattedText {\n  const { text, entities } = textWithEntities;\n\n  return {\n    text,\n    entities: entities.map(buildApiMessageEntity),\n  };\n}\n","import type BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiChat,\n  ApiChatAdminRights,\n  ApiChatBannedRights,\n  ApiBotCommand,\n  ApiChatFolder,\n  ApiChatMember,\n  ApiRestrictionReason,\n  ApiExportedInvite,\n  ApiChatInviteImporter,\n  ApiChatSettings,\n  ApiTopic,\n  ApiSendAsPeerId,\n  ApiChatReactions,\n} from '../../types';\nimport { pick, pickTruthy } from '../../../util/iteratees';\nimport {\n  buildApiPeerId, getApiChatIdFromMtpPeer, isPeerChat, isPeerUser,\n} from './peers';\nimport { omitVirtualClassFields } from './helpers';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { buildApiReaction } from './messages';\nimport { buildApiUsernames } from './common';\n\ntype PeerEntityApiChatFields = Omit<ApiChat, (\n  'id' | 'type' | 'title' |\n  'lastReadOutboxMessageId' | 'lastReadInboxMessageId' |\n  'unreadCount' | 'unreadMentionsCount' | 'isMuted'\n)>;\n\nfunction buildApiChatFieldsFromPeerEntity(\n  peerEntity: GramJs.TypeUser | GramJs.TypeChat,\n  isSupport = false,\n): PeerEntityApiChatFields {\n  const isMin = Boolean('min' in peerEntity && peerEntity.min);\n  const accessHash = ('accessHash' in peerEntity) && String(peerEntity.accessHash);\n  const hasVideoAvatar = 'photo' in peerEntity && peerEntity.photo && 'hasVideo' in peerEntity.photo\n    && peerEntity.photo.hasVideo;\n  const avatarHash = ('photo' in peerEntity) && peerEntity.photo && buildAvatarHash(peerEntity.photo);\n  const isSignaturesShown = Boolean('signatures' in peerEntity && peerEntity.signatures);\n  const hasPrivateLink = Boolean('hasLink' in peerEntity && peerEntity.hasLink);\n  const isScam = Boolean('scam' in peerEntity && peerEntity.scam);\n  const isFake = Boolean('fake' in peerEntity && peerEntity.fake);\n  const isJoinToSend = Boolean('joinToSend' in peerEntity && peerEntity.joinToSend);\n  const isJoinRequest = Boolean('joinRequest' in peerEntity && peerEntity.joinRequest);\n  const usernames = buildApiUsernames(peerEntity);\n  const isForum = Boolean('forum' in peerEntity && peerEntity.forum);\n\n  return {\n    isMin,\n    hasPrivateLink,\n    isSignaturesShown,\n    usernames,\n    ...(accessHash && { accessHash }),\n    hasVideoAvatar,\n    ...(avatarHash && { avatarHash }),\n    ...('verified' in peerEntity && { isVerified: peerEntity.verified }),\n    ...('callActive' in peerEntity && { isCallActive: peerEntity.callActive }),\n    ...('callNotEmpty' in peerEntity && { isCallNotEmpty: peerEntity.callNotEmpty }),\n    ...('date' in peerEntity && { joinDate: peerEntity.date }),\n    ...('participantsCount' in peerEntity && peerEntity.participantsCount !== undefined && {\n      membersCount: peerEntity.participantsCount,\n    }),\n    ...('noforwards' in peerEntity && { isProtected: Boolean(peerEntity.noforwards) }),\n    ...(isSupport && { isSupport: true }),\n    ...buildApiChatPermissions(peerEntity),\n    ...('creator' in peerEntity && { isCreator: peerEntity.creator }),\n    ...buildApiChatRestrictions(peerEntity),\n    ...buildApiChatMigrationInfo(peerEntity),\n    fakeType: isScam ? 'scam' : (isFake ? 'fake' : undefined),\n    isJoinToSend,\n    isJoinRequest,\n    isForum,\n  };\n}\n\nexport function buildApiChatFromDialog(\n  dialog: GramJs.Dialog,\n  peerEntity: GramJs.TypeUser | GramJs.TypeChat,\n): ApiChat {\n  const {\n    peer, folderId, unreadMark, unreadCount, unreadMentionsCount, unreadReactionsCount,\n    notifySettings: { silent, muteUntil },\n    readOutboxMaxId, readInboxMaxId, draft,\n  } = dialog;\n  const isMuted = silent || (typeof muteUntil === 'number' && getServerTime() < muteUntil);\n\n  return {\n    id: getApiChatIdFromMtpPeer(peer),\n    ...(folderId && { folderId }),\n    type: getApiChatTypeFromPeerEntity(peerEntity),\n    title: getApiChatTitleFromMtpPeer(peer, peerEntity),\n    lastReadOutboxMessageId: readOutboxMaxId,\n    lastReadInboxMessageId: readInboxMaxId,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    isMuted,\n    ...(unreadMark && { hasUnreadMark: true }),\n    ...(draft instanceof GramJs.DraftMessage && { draftDate: draft.date }),\n    ...buildApiChatFieldsFromPeerEntity(peerEntity),\n  };\n}\n\nfunction buildApiChatPermissions(peerEntity: GramJs.TypeUser | GramJs.TypeChat): {\n  adminRights?: ApiChatAdminRights;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n} {\n  if (!(peerEntity instanceof GramJs.Chat || peerEntity instanceof GramJs.Channel)) {\n    return {};\n  }\n\n  return {\n    adminRights: peerEntity.adminRights ? omitVirtualClassFields(peerEntity.adminRights) : undefined,\n    currentUserBannedRights: 'bannedRights' in peerEntity && peerEntity.bannedRights\n      ? omitVirtualClassFields(peerEntity.bannedRights)\n      : undefined,\n    defaultBannedRights: peerEntity.defaultBannedRights\n      ? omitVirtualClassFields(peerEntity.defaultBannedRights)\n      : undefined,\n  };\n}\n\nfunction buildApiChatRestrictions(peerEntity: GramJs.TypeUser | GramJs.TypeChat): {\n  isNotJoined?: boolean;\n  isForbidden?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n} {\n  if (peerEntity instanceof GramJs.ChatForbidden) {\n    return {\n      isForbidden: true,\n    };\n  }\n\n  if (peerEntity instanceof GramJs.ChannelForbidden) {\n    return {\n      isRestricted: true,\n    };\n  }\n\n  const restrictions = {};\n\n  if ('restricted' in peerEntity) {\n    const restrictionReason = peerEntity.restricted\n      ? buildApiChatRestrictionReason(peerEntity.restrictionReason)\n      : undefined;\n\n    if (restrictionReason) {\n      Object.assign(restrictions, {\n        isRestricted: true,\n        restrictionReason,\n      });\n    }\n  }\n\n  if (peerEntity instanceof GramJs.Chat) {\n    Object.assign(restrictions, {\n      isNotJoined: peerEntity.left,\n    });\n  }\n\n  if (peerEntity instanceof GramJs.Channel) {\n    Object.assign(restrictions, {\n      // `left` is weirdly set to `true` on all channels never joined before\n      isNotJoined: peerEntity.left,\n    });\n  }\n\n  return restrictions;\n}\n\nfunction buildApiChatMigrationInfo(peerEntity: GramJs.TypeChat): {\n  migratedTo?: {\n    chatId: string;\n    accessHash?: string;\n  };\n} {\n  if (\n    'migratedTo' in peerEntity\n    && peerEntity.migratedTo\n    && !(peerEntity.migratedTo instanceof GramJs.InputChannelEmpty)\n  ) {\n    return {\n      migratedTo: {\n        chatId: getApiChatIdFromMtpPeer(peerEntity.migratedTo),\n        ...(peerEntity.migratedTo instanceof GramJs.InputChannel && {\n          accessHash: String(peerEntity.migratedTo.accessHash),\n        }),\n      },\n    };\n  }\n\n  return {};\n}\n\nfunction buildApiChatRestrictionReason(\n  restrictionReasons?: GramJs.RestrictionReason[],\n): ApiRestrictionReason | undefined {\n  if (!restrictionReasons) {\n    return undefined;\n  }\n\n  const targetReason = restrictionReasons.find(({ platform }) => platform === 'all');\n  return targetReason ? pick(targetReason, ['reason', 'text']) : undefined;\n}\n\nexport function buildApiChatFromPreview(\n  preview: GramJs.TypeChat | GramJs.TypeUser,\n  isSupport = false,\n): ApiChat | undefined {\n  if (preview instanceof GramJs.ChatEmpty || preview instanceof GramJs.UserEmpty) {\n    return undefined;\n  }\n\n  return {\n    id: buildApiPeerId(preview.id, preview instanceof GramJs.User ? 'user' : 'chat'),\n    type: getApiChatTypeFromPeerEntity(preview),\n    title: preview instanceof GramJs.User ? getUserName(preview) : preview.title,\n    ...buildApiChatFieldsFromPeerEntity(preview, isSupport),\n  };\n}\n\nexport function getApiChatTypeFromPeerEntity(peerEntity: GramJs.TypeChat | GramJs.TypeUser) {\n  if (peerEntity instanceof GramJs.User || peerEntity instanceof GramJs.UserEmpty) {\n    return 'chatTypePrivate';\n  } else if (\n    peerEntity instanceof GramJs.Chat\n    || peerEntity instanceof GramJs.ChatForbidden\n    || peerEntity instanceof GramJs.ChatEmpty\n  ) {\n    return 'chatTypeBasicGroup';\n  } else {\n    return peerEntity.megagroup ? 'chatTypeSuperGroup' : 'chatTypeChannel';\n  }\n}\n\nexport function getPeerKey(peer: GramJs.TypePeer) {\n  if (isPeerUser(peer)) {\n    return `user${peer.userId}`;\n  } else if (isPeerChat(peer)) {\n    return `chat${peer.chatId}`;\n  } else {\n    return `chat${peer.channelId}`;\n  }\n}\n\nexport function getApiChatTitleFromMtpPeer(peer: GramJs.TypePeer, peerEntity: GramJs.User | GramJs.Chat) {\n  if (isPeerUser(peer)) {\n    return getUserName(peerEntity as GramJs.User);\n  } else {\n    return (peerEntity as GramJs.Chat).title;\n  }\n}\n\nfunction getUserName(user: GramJs.User) {\n  return user.firstName\n    ? `${user.firstName}${user.lastName ? ` ${user.lastName}` : ''}`\n    : (user.lastName || '');\n}\n\nexport function buildAvatarHash(photo: GramJs.TypeUserProfilePhoto | GramJs.TypeChatPhoto) {\n  if ('photoId' in photo) {\n    return String(photo.photoId);\n  }\n\n  return undefined;\n}\n\nexport function buildChatMember(\n  member: GramJs.TypeChatParticipant | GramJs.TypeChannelParticipant,\n): ApiChatMember | undefined {\n  const userId = (member instanceof GramJs.ChannelParticipantBanned || member instanceof GramJs.ChannelParticipantLeft)\n    ? getApiChatIdFromMtpPeer(member.peer)\n    : buildApiPeerId(member.userId, 'user');\n\n  return {\n    userId,\n    inviterId: 'inviterId' in member && member.inviterId\n      ? buildApiPeerId(member.inviterId as BigInt.BigInteger, 'user')\n      : undefined,\n    joinedDate: 'date' in member ? member.date : undefined,\n    kickedByUserId: 'kickedBy' in member && member.kickedBy ? buildApiPeerId(member.kickedBy, 'user') : undefined,\n    promotedByUserId: 'promotedBy' in member && member.promotedBy\n      ? buildApiPeerId(member.promotedBy, 'user')\n      : undefined,\n    bannedRights: 'bannedRights' in member ? omitVirtualClassFields(member.bannedRights) : undefined,\n    adminRights: 'adminRights' in member ? omitVirtualClassFields(member.adminRights) : undefined,\n    customTitle: 'rank' in member ? member.rank : undefined,\n    ...((member instanceof GramJs.ChannelParticipantAdmin || member instanceof GramJs.ChatParticipantAdmin) && {\n      isAdmin: true,\n    }),\n    ...((member instanceof GramJs.ChannelParticipantCreator || member instanceof GramJs.ChatParticipantCreator) && {\n      isOwner: true,\n    }),\n  };\n}\n\nexport function buildChatMembers(\n  participants: GramJs.TypeChatParticipants | GramJs.channels.ChannelParticipants,\n) {\n  // Duplicate code because of TS union-type shenanigans\n  if (participants instanceof GramJs.ChatParticipants) {\n    return participants.participants.map(buildChatMember).filter(Boolean);\n  }\n  if (participants instanceof GramJs.channels.ChannelParticipants) {\n    return participants.participants.map(buildChatMember).filter(Boolean);\n  }\n\n  return undefined;\n}\n\nexport function buildChatTypingStatus(\n  update: GramJs.UpdateUserTyping | GramJs.UpdateChatUserTyping | GramJs.UpdateChannelUserTyping,\n) {\n  let action: string = '';\n  let emoticon: string | undefined;\n  if (update.action instanceof GramJs.SendMessageCancelAction) {\n    return undefined;\n  } else if (update.action instanceof GramJs.SendMessageTypingAction) {\n    action = 'lng_user_typing';\n  } else if (update.action instanceof GramJs.SendMessageRecordVideoAction) {\n    action = 'lng_send_action_record_video';\n  } else if (update.action instanceof GramJs.SendMessageUploadVideoAction) {\n    action = 'lng_send_action_upload_video';\n  } else if (update.action instanceof GramJs.SendMessageRecordAudioAction) {\n    action = 'lng_send_action_record_audio';\n  } else if (update.action instanceof GramJs.SendMessageUploadAudioAction) {\n    action = 'lng_send_action_upload_audio';\n  } else if (update.action instanceof GramJs.SendMessageUploadPhotoAction) {\n    action = 'lng_send_action_upload_photo';\n  } else if (update.action instanceof GramJs.SendMessageUploadDocumentAction) {\n    action = 'lng_send_action_upload_file';\n  } else if (update.action instanceof GramJs.SendMessageGeoLocationAction) {\n    action = 'selecting a location to share';\n  } else if (update.action instanceof GramJs.SendMessageChooseContactAction) {\n    action = 'selecting a contact to share';\n  } else if (update.action instanceof GramJs.SendMessageGamePlayAction) {\n    action = 'lng_playing_game';\n  } else if (update.action instanceof GramJs.SendMessageRecordRoundAction) {\n    action = 'lng_send_action_record_round';\n  } else if (update.action instanceof GramJs.SendMessageUploadRoundAction) {\n    action = 'lng_send_action_upload_round';\n  } else if (update.action instanceof GramJs.SendMessageChooseStickerAction) {\n    action = 'lng_send_action_choose_sticker';\n  } else if (update.action instanceof GramJs.SpeakingInGroupCallAction) {\n    return undefined;\n  } else if (update.action instanceof GramJs.SendMessageEmojiInteractionSeen) {\n    action = 'lng_user_action_watching_animations';\n    emoticon = update.action.emoticon;\n  } else if (update.action instanceof GramJs.SendMessageEmojiInteraction) {\n    return undefined;\n  }\n\n  return {\n    action,\n    ...(emoticon && { emoji: emoticon }),\n    ...(!(update instanceof GramJs.UpdateUserTyping) && { userId: getApiChatIdFromMtpPeer(update.fromId) }),\n    timestamp: Date.now() + getServerTimeOffset() * 1000,\n  };\n}\n\nexport function buildApiChatFolder(filter: GramJs.DialogFilter): ApiChatFolder {\n  return {\n    ...pickTruthy(filter, [\n      'id', 'title', 'emoticon', 'contacts', 'nonContacts', 'groups', 'bots',\n      'excludeMuted', 'excludeRead', 'excludeArchived',\n    ]),\n    channels: filter.broadcasts,\n    pinnedChatIds: filter.pinnedPeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    includedChatIds: filter.includePeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n    excludedChatIds: filter.excludePeers.map(getApiChatIdFromMtpPeer).filter(Boolean),\n  };\n}\n\nexport function buildApiChatFolderFromSuggested({\n  filter, description,\n}: {\n  filter: GramJs.TypeDialogFilter;\n  description: string;\n}): ApiChatFolder | undefined {\n  if (!(filter instanceof GramJs.DialogFilter)) return undefined;\n  return {\n    ...buildApiChatFolder(filter),\n    description,\n  };\n}\n\nexport function buildApiChatBotCommands(botInfos: GramJs.BotInfo[]) {\n  return botInfos.reduce((botCommands, botInfo) => {\n    const botId = buildApiPeerId(botInfo.userId!, 'user');\n\n    if (botInfo.commands) {\n      botCommands = botCommands.concat(botInfo.commands.map((mtpCommand) => ({\n        botId,\n        ...omitVirtualClassFields(mtpCommand),\n      })));\n    }\n\n    return botCommands;\n  }, [] as ApiBotCommand[]);\n}\n\nexport function buildApiExportedInvite(invite: GramJs.ChatInviteExported): ApiExportedInvite {\n  const {\n    revoked,\n    date,\n    expireDate,\n    link,\n    permanent,\n    startDate,\n    usage,\n    usageLimit,\n    requested,\n    requestNeeded,\n    title,\n    adminId,\n  } = invite;\n  return {\n    isRevoked: revoked,\n    date,\n    expireDate,\n    link,\n    isPermanent: permanent,\n    startDate,\n    usage,\n    usageLimit,\n    isRequestNeeded: requestNeeded,\n    requested,\n    title,\n    adminId: buildApiPeerId(adminId, 'user'),\n  };\n}\n\nexport function buildChatInviteImporter(importer: GramJs.ChatInviteImporter): ApiChatInviteImporter {\n  const {\n    userId,\n    date,\n    about,\n    requested,\n  } = importer;\n  return {\n    userId: buildApiPeerId(userId, 'user'),\n    date,\n    about,\n    isRequested: requested,\n  };\n}\n\nexport function buildApiChatSettings({\n  autoarchived,\n  reportSpam,\n  addContact,\n  blockContact,\n}: GramJs.PeerSettings): ApiChatSettings {\n  return {\n    isAutoArchived: Boolean(autoarchived),\n    canReportSpam: Boolean(reportSpam),\n    canAddContact: Boolean(addContact),\n    canBlockContact: Boolean(blockContact),\n  };\n}\n\nexport function buildApiChatReactions(chatReactions?: GramJs.TypeChatReactions): ApiChatReactions | undefined {\n  if (chatReactions instanceof GramJs.ChatReactionsAll) {\n    return {\n      type: 'all',\n      areCustomAllowed: chatReactions.allowCustom,\n    };\n  }\n  if (chatReactions instanceof GramJs.ChatReactionsSome) {\n    return {\n      type: 'some',\n      allowed: chatReactions.reactions.map(buildApiReaction).filter(Boolean),\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildApiSendAsPeerId(sendAs: GramJs.SendAsPeer): ApiSendAsPeerId {\n  return {\n    id: getApiChatIdFromMtpPeer(sendAs.peer),\n    isPremium: sendAs.premiumRequired,\n  };\n}\n\nexport function buildApiTopic(forumTopic: GramJs.TypeForumTopic): ApiTopic | undefined {\n  if (forumTopic instanceof GramJs.ForumTopicDeleted) {\n    return undefined;\n  }\n\n  const {\n    id,\n    my,\n    closed,\n    pinned,\n    hidden,\n    short,\n    date,\n    title,\n    iconColor,\n    iconEmojiId,\n    topMessage,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    fromId,\n    notifySettings: {\n      silent, muteUntil,\n    },\n  } = forumTopic;\n\n  return {\n    id,\n    isClosed: closed,\n    isPinned: pinned,\n    isHidden: hidden,\n    isOwner: my,\n    isMin: short,\n    date,\n    title,\n    iconColor,\n    iconEmojiId: iconEmojiId?.toString(),\n    lastMessageId: topMessage,\n    unreadCount,\n    unreadMentionsCount,\n    unreadReactionsCount,\n    fromId: getApiChatIdFromMtpPeer(fromId),\n    // TODO[forums] `muteUntil` should not really be parsed here\n    isMuted: silent || (muteUntil !== undefined ? muteUntil > 0 : undefined),\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiAttachBot,\n  ApiAttachBotIcon,\n  ApiAttachMenuPeerType,\n  ApiBotCommand,\n  ApiBotInfo,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotInlineSwitchPm,\n  ApiBotMenuButton,\n  ApiInlineResultType,\n} from '../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { buildApiPhoto, buildApiThumbnailFromStripped } from './common';\nimport { buildApiDocument, buildApiWebDocument, buildVideoFromDocument } from './messages';\nimport { buildStickerFromDocument } from './symbols';\nimport localDb from '../localDb';\nimport { buildApiPeerId } from './peers';\nimport { omitVirtualClassFields } from './helpers';\n\nexport function buildApiBotInlineResult(result: GramJs.BotInlineResult, queryId: string): ApiBotInlineResult {\n  const {\n    id, type, title, description, url, thumb,\n  } = result;\n\n  return {\n    id,\n    queryId,\n    type: type as ApiInlineResultType,\n    title,\n    description,\n    url,\n    webThumbnail: buildApiWebDocument(thumb),\n  };\n}\n\nexport function buildApiBotInlineMediaResult(\n  result: GramJs.BotInlineMediaResult, queryId: string,\n): ApiBotInlineMediaResult {\n  const {\n    id, type, title, description, photo, document,\n  } = result;\n\n  return {\n    id,\n    queryId,\n    type: type as ApiInlineResultType,\n    title,\n    description,\n    ...(type === 'sticker' && document instanceof GramJs.Document && { sticker: buildStickerFromDocument(document) }),\n    ...(photo instanceof GramJs.Photo && { photo: buildApiPhoto(photo) }),\n    ...(type === 'gif' && document instanceof GramJs.Document && { gif: buildVideoFromDocument(document) }),\n    ...(type === 'video' && document instanceof GramJs.Document && {\n      thumbnail: buildApiThumbnailFromStripped(document.thumbs),\n    }),\n  };\n}\n\nexport function buildBotSwitchPm(switchPm?: GramJs.InlineBotSwitchPM) {\n  return switchPm ? pick(switchPm, ['text', 'startParam']) as ApiBotInlineSwitchPm : undefined;\n}\n\nexport function buildApiAttachBot(bot: GramJs.AttachMenuBot): ApiAttachBot {\n  return {\n    id: bot.botId.toString(),\n    hasSettings: bot.hasSettings,\n    shouldRequestWriteAccess: bot.requestWriteAccess,\n    shortName: bot.shortName,\n    peerTypes: bot.peerTypes.map(buildApiAttachMenuPeerType),\n    icons: bot.icons.map(buildApiAttachMenuIcon).filter(Boolean),\n  };\n}\n\nfunction buildApiAttachMenuPeerType(peerType: GramJs.TypeAttachMenuPeerType): ApiAttachMenuPeerType {\n  if (peerType instanceof GramJs.AttachMenuPeerTypeBotPM) return 'bots';\n  if (peerType instanceof GramJs.AttachMenuPeerTypePM) return 'users';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeChat) return 'chats';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeBroadcast) return 'channels';\n  if (peerType instanceof GramJs.AttachMenuPeerTypeSameBotPM) return 'self';\n  return undefined!; // Never reached\n}\n\nfunction buildApiAttachMenuIcon(icon: GramJs.AttachMenuBotIcon): ApiAttachBotIcon | undefined {\n  if (!(icon.icon instanceof GramJs.Document)) return undefined;\n\n  const document = buildApiDocument(icon.icon);\n\n  if (!document) return undefined;\n\n  localDb.documents[String(icon.icon.id)] = icon.icon;\n\n  return {\n    name: icon.name,\n    document,\n  };\n}\n\nexport function buildApiBotInfo(botInfo: GramJs.BotInfo, chatId: string): ApiBotInfo {\n  const {\n    description, descriptionPhoto, descriptionDocument, userId, commands, menuButton,\n  } = botInfo;\n\n  const botId = userId && buildApiPeerId(userId, 'user');\n  const photo = descriptionPhoto instanceof GramJs.Photo ? buildApiPhoto(descriptionPhoto) : undefined;\n  const gif = descriptionDocument instanceof GramJs.Document ? buildVideoFromDocument(descriptionDocument) : undefined;\n\n  const commandsArray = commands?.map((command) => buildApiBotCommand(botId || chatId, command));\n\n  return {\n    botId: botId || chatId,\n    description,\n    gif,\n    photo,\n    menuButton: buildApiBotMenuButton(menuButton),\n    commands: commandsArray?.length ? commandsArray : undefined,\n  };\n}\n\nfunction buildApiBotCommand(botId: string, command: GramJs.BotCommand): ApiBotCommand {\n  return {\n    botId,\n    ...omitVirtualClassFields(command),\n  };\n}\n\nexport function buildApiBotMenuButton(menuButton?: GramJs.TypeBotMenuButton): ApiBotMenuButton {\n  if (menuButton instanceof GramJs.BotMenuButton) {\n    return {\n      type: 'webApp',\n      text: menuButton.text,\n      url: menuButton.url,\n    };\n  }\n\n  return {\n    type: 'commands',\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiEmojiStatus,\n  ApiPremiumGiftOption,\n  ApiUser,\n  ApiUserStatus,\n  ApiUserType,\n} from '../../types';\nimport { buildApiPeerId } from './peers';\nimport { buildApiBotInfo } from './bots';\nimport { buildApiPhoto, buildApiUsernames } from './common';\n\nexport function buildApiUserFromFull(mtpUserFull: GramJs.users.UserFull): ApiUser {\n  const {\n    fullUser: {\n      about, commonChatsCount, pinnedMsgId, botInfo, blocked,\n      profilePhoto, voiceMessagesForbidden, premiumGifts,\n      fallbackPhoto, personalPhoto,\n    },\n    users,\n  } = mtpUserFull;\n\n  const user = buildApiUser(users[0])!;\n\n  return {\n    ...user,\n    fullInfo: {\n      ...(profilePhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(profilePhoto) }),\n      ...(fallbackPhoto instanceof GramJs.Photo && { fallbackPhoto: buildApiPhoto(fallbackPhoto) }),\n      ...(personalPhoto instanceof GramJs.Photo && { personalPhoto: buildApiPhoto(personalPhoto) }),\n      bio: about,\n      commonChatsCount,\n      pinnedMessageId: pinnedMsgId,\n      isBlocked: Boolean(blocked),\n      noVoiceMessages: voiceMessagesForbidden,\n      ...(premiumGifts && { premiumGifts: premiumGifts.map((gift) => buildApiPremiumGiftOption(gift)) }),\n      ...(botInfo && { botInfo: buildApiBotInfo(botInfo, user.id) }),\n    },\n  };\n}\n\nexport function buildApiUser(mtpUser: GramJs.TypeUser): ApiUser | undefined {\n  if (!(mtpUser instanceof GramJs.User)) {\n    return undefined;\n  }\n\n  const {\n    id, firstName, lastName, fake, scam,\n  } = mtpUser;\n  const hasVideoAvatar = mtpUser.photo instanceof GramJs.UserProfilePhoto\n    ? Boolean(mtpUser.photo.hasVideo)\n    : undefined;\n  const avatarHash = mtpUser.photo instanceof GramJs.UserProfilePhoto\n    ? String(mtpUser.photo.photoId)\n    : undefined;\n  const userType = buildApiUserType(mtpUser);\n  const usernames = buildApiUsernames(mtpUser);\n  const emojiStatus = mtpUser.emojiStatus ? buildApiUserEmojiStatus(mtpUser.emojiStatus) : undefined;\n\n  return {\n    id: buildApiPeerId(id, 'user'),\n    isMin: Boolean(mtpUser.min),\n    fakeType: scam ? 'scam' : (fake ? 'fake' : undefined),\n    ...(mtpUser.self && { isSelf: true }),\n    isPremium: Boolean(mtpUser.premium),\n    ...(mtpUser.verified && { isVerified: true }),\n    ...((mtpUser.contact || mtpUser.mutualContact) && { isContact: true }),\n    type: userType,\n    ...(firstName && { firstName }),\n    ...(userType === 'userTypeBot' && { canBeInvitedToGroup: !mtpUser.botNochats }),\n    ...(lastName && { lastName }),\n    ...(usernames && { usernames }),\n    phoneNumber: mtpUser.phone || '',\n    noStatus: !mtpUser.status,\n    ...(mtpUser.accessHash && { accessHash: String(mtpUser.accessHash) }),\n    ...(avatarHash && { avatarHash }),\n    emojiStatus,\n    hasVideoAvatar,\n    ...(mtpUser.bot && mtpUser.botInlinePlaceholder && { botPlaceholder: mtpUser.botInlinePlaceholder }),\n    ...(mtpUser.bot && mtpUser.botAttachMenu && { isAttachBot: mtpUser.botAttachMenu }),\n  };\n}\n\nfunction buildApiUserType(user: GramJs.User): ApiUserType {\n  if (user.bot) {\n    return 'userTypeBot';\n  }\n  if (user.deleted) {\n    return 'userTypeDeleted';\n  }\n\n  return 'userTypeRegular';\n}\n\nexport function buildApiUserStatus(mtpStatus?: GramJs.TypeUserStatus): ApiUserStatus {\n  if (!mtpStatus || mtpStatus instanceof GramJs.UserStatusEmpty) {\n    return { type: 'userStatusEmpty' };\n  } else if (mtpStatus instanceof GramJs.UserStatusOnline) {\n    return { type: 'userStatusOnline', expires: mtpStatus.expires };\n  } else if (mtpStatus instanceof GramJs.UserStatusOffline) {\n    return { type: 'userStatusOffline', wasOnline: mtpStatus.wasOnline };\n  } else if (mtpStatus instanceof GramJs.UserStatusRecently) {\n    return { type: 'userStatusRecently' };\n  } else if (mtpStatus instanceof GramJs.UserStatusLastWeek) {\n    return { type: 'userStatusLastWeek' };\n  } else {\n    return { type: 'userStatusLastMonth' };\n  }\n}\n\nexport function buildApiUserEmojiStatus(mtpEmojiStatus: GramJs.TypeEmojiStatus): ApiEmojiStatus | undefined {\n  if (mtpEmojiStatus instanceof GramJs.EmojiStatus) {\n    return { documentId: mtpEmojiStatus.documentId.toString() };\n  }\n\n  if (mtpEmojiStatus instanceof GramJs.EmojiStatusUntil) {\n    return { documentId: mtpEmojiStatus.documentId.toString(), until: mtpEmojiStatus.until };\n  }\n\n  return undefined;\n}\n\nexport function buildApiUsersAndStatuses(mtpUsers: GramJs.TypeUser[]) {\n  const userStatusesById: Record<string, ApiUserStatus> = {};\n  const users: ApiUser[] = [];\n\n  mtpUsers.forEach((mtpUser) => {\n    const user = buildApiUser(mtpUser);\n    if (!user) {\n      return;\n    }\n\n    users.push(user);\n\n    if ('status' in mtpUser) {\n      userStatusesById[user.id] = buildApiUserStatus(mtpUser.status);\n    }\n  });\n\n  return { users, userStatusesById };\n}\n\nexport function buildApiPremiumGiftOption(option: GramJs.TypePremiumGiftOption): ApiPremiumGiftOption {\n  const {\n    months, currency, amount, botUrl,\n  } = option;\n\n  return {\n    months,\n    currency,\n    amount: amount.toJSNumber(),\n    botUrl,\n  };\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiConfig,\n  ApiCountry, ApiSession, ApiUrlAuthResult, ApiWallpaper, ApiWebSession,\n} from '../../types';\nimport type { ApiPrivacySettings, ApiPrivacyKey, PrivacyVisibility } from '../../../types';\n\nimport { buildApiDocument, buildApiReaction } from './messages';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './peers';\nimport { pick } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\nimport { buildApiUser } from './users';\nimport { addUserToLocalDb } from '../helpers';\n\nexport function buildApiWallpaper(wallpaper: GramJs.TypeWallPaper): ApiWallpaper | undefined {\n  if (wallpaper instanceof GramJs.WallPaperNoFile) {\n    // TODO: Plain color wallpapers\n    return undefined;\n  }\n\n  const { slug } = wallpaper;\n\n  const document = buildApiDocument(wallpaper.document);\n\n  if (!document) {\n    return undefined;\n  }\n\n  return {\n    slug,\n    document,\n  };\n}\n\nexport function buildApiSession(session: GramJs.Authorization): ApiSession {\n  return {\n    isCurrent: Boolean(session.current),\n    isOfficialApp: Boolean(session.officialApp),\n    isPasswordPending: Boolean(session.passwordPending),\n    hash: String(session.hash),\n    areCallsEnabled: !session.callRequestsDisabled,\n    areSecretChatsEnabled: !session.encryptedRequestsDisabled,\n    ...pick(session, [\n      'deviceModel', 'platform', 'systemVersion', 'appName', 'appVersion', 'dateCreated', 'dateActive',\n      'ip', 'country', 'region',\n    ]),\n  };\n}\n\nexport function buildApiWebSession(session: GramJs.WebAuthorization): ApiWebSession {\n  return {\n    hash: String(session.hash),\n    botId: buildApiPeerId(session.botId, 'user'),\n    ...pick(session, [\n      'platform', 'browser', 'dateCreated', 'dateActive', 'ip', 'region', 'domain',\n    ]),\n  };\n}\n\nexport function buildPrivacyKey(key: GramJs.TypePrivacyKey): ApiPrivacyKey | undefined {\n  switch (key.className) {\n    case 'PrivacyKeyPhoneNumber':\n      return 'phoneNumber';\n    case 'PrivacyKeyStatusTimestamp':\n      return 'lastSeen';\n    case 'PrivacyKeyProfilePhoto':\n      return 'profilePhoto';\n    case 'PrivacyKeyPhoneCall':\n      return 'phoneCall';\n    case 'PrivacyKeyPhoneP2P':\n      return 'phoneP2P';\n    case 'PrivacyKeyForwards':\n      return 'forwards';\n    case 'PrivacyKeyVoiceMessages':\n      return 'voiceMessages';\n    case 'PrivacyKeyChatInvite':\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n\nexport function buildPrivacyRules(rules: GramJs.TypePrivacyRule[]): ApiPrivacySettings {\n  let visibility: PrivacyVisibility | undefined;\n  let allowUserIds: string[] | undefined;\n  let allowChatIds: string[] | undefined;\n  let blockUserIds: string[] | undefined;\n  let blockChatIds: string[] | undefined;\n\n  rules.forEach((rule) => {\n    if (rule instanceof GramJs.PrivacyValueAllowAll) {\n      visibility = visibility || 'everybody';\n    } else if (rule instanceof GramJs.PrivacyValueAllowContacts) {\n      visibility = visibility || 'contacts';\n    } else if (rule instanceof GramJs.PrivacyValueDisallowContacts) {\n      visibility = visibility || 'nonContacts';\n    } else if (rule instanceof GramJs.PrivacyValueDisallowAll) {\n      visibility = visibility || 'nobody';\n    } else if (rule instanceof GramJs.PrivacyValueAllowUsers) {\n      allowUserIds = rule.users.map((chatId) => buildApiPeerId(chatId, 'user'));\n    } else if (rule instanceof GramJs.PrivacyValueDisallowUsers) {\n      blockUserIds = rule.users.map((chatId) => buildApiPeerId(chatId, 'user'));\n    } else if (rule instanceof GramJs.PrivacyValueAllowChatParticipants) {\n      allowChatIds = rule.chats.map((chatId) => buildApiPeerId(chatId, 'chat'));\n    } else if (rule instanceof GramJs.PrivacyValueDisallowChatParticipants) {\n      blockChatIds = rule.chats.map((chatId) => buildApiPeerId(chatId, 'chat'));\n    }\n  });\n\n  if (!visibility) {\n    // disallow by default.\n    visibility = 'nobody';\n  }\n\n  return {\n    visibility,\n    allowUserIds: allowUserIds || [],\n    allowChatIds: allowChatIds || [],\n    blockUserIds: blockUserIds || [],\n    blockChatIds: blockChatIds || [],\n  };\n}\n\nexport function buildApiNotifyException(\n  notifySettings: GramJs.TypePeerNotifySettings, peer: GramJs.TypePeer,\n) {\n  const {\n    silent, muteUntil, showPreviews, otherSound,\n  } = notifySettings;\n\n  const hasSound = Boolean(otherSound && !(otherSound instanceof GramJs.NotificationSoundNone));\n\n  return {\n    chatId: getApiChatIdFromMtpPeer(peer),\n    isMuted: silent || (typeof muteUntil === 'number' && getServerTime() < muteUntil),\n    ...(!hasSound && { isSilent: true }),\n    ...(showPreviews !== undefined && { shouldShowPreviews: Boolean(showPreviews) }),\n  };\n}\n\nexport function buildApiNotifyExceptionTopic(\n  notifySettings: GramJs.TypePeerNotifySettings, peer: GramJs.TypePeer, topicId: number,\n) {\n  const {\n    silent, muteUntil, showPreviews, otherSound,\n  } = notifySettings;\n\n  const hasSound = Boolean(otherSound && !(otherSound instanceof GramJs.NotificationSoundNone));\n\n  return {\n    chatId: getApiChatIdFromMtpPeer(peer),\n    topicId,\n    isMuted: silent || (typeof muteUntil === 'number' && getServerTime() < muteUntil),\n    ...(!hasSound && { isSilent: true }),\n    ...(showPreviews !== undefined && { shouldShowPreviews: Boolean(showPreviews) }),\n  };\n}\n\nfunction buildApiCountry(country: GramJs.help.Country, code: GramJs.help.CountryCode) {\n  const {\n    hidden, iso2, defaultName, name,\n  } = country;\n  const { countryCode, prefixes, patterns } = code || {};\n\n  return {\n    isHidden: hidden,\n    iso2,\n    defaultName,\n    name,\n    countryCode,\n    prefixes,\n    patterns,\n  };\n}\n\nexport function buildApiCountryList(countries: GramJs.help.Country[]) {\n  const nonHiddenCountries = countries.filter(({ hidden }) => !hidden);\n  const listByCode = nonHiddenCountries\n    .map((country) => (\n      country.countryCodes.map((code) => buildApiCountry(country, code))\n    ))\n    .flat()\n    .sort((a: ApiCountry, b: ApiCountry) => (\n      a.name ? a.name.localeCompare(b.name!) : a.defaultName.localeCompare(b.defaultName)\n    ));\n\n  const generalList = nonHiddenCountries\n    .map((country) => buildApiCountry(country, country.countryCodes[0]))\n    .sort((a, b) => (\n      a.name ? a.name.localeCompare(b.name!) : a.defaultName.localeCompare(b.defaultName)\n    ));\n\n  return {\n    phoneCodes: listByCode,\n    general: generalList,\n  };\n}\n\nexport function buildJson(json: GramJs.TypeJSONValue): any {\n  if (json instanceof GramJs.JsonNull) return undefined;\n  if (json instanceof GramJs.JsonString\n    || json instanceof GramJs.JsonBool\n    || json instanceof GramJs.JsonNumber) return json.value;\n  if (json instanceof GramJs.JsonArray) return json.value.map(buildJson);\n\n  return json.value.reduce((acc: Record<string, any>, el) => {\n    acc[el.key] = buildJson(el.value);\n    return acc;\n  }, {});\n}\n\nexport function buildApiUrlAuthResult(result: GramJs.TypeUrlAuthResult): ApiUrlAuthResult | undefined {\n  if (result instanceof GramJs.UrlAuthResultRequest) {\n    const { bot, domain, requestWriteAccess } = result;\n    const user = buildApiUser(bot);\n    if (!user) return undefined;\n\n    addUserToLocalDb(bot);\n\n    return {\n      type: 'request',\n      domain,\n      shouldRequestWriteAccess: requestWriteAccess,\n      bot: user,\n    };\n  }\n\n  if (result instanceof GramJs.UrlAuthResultAccepted) {\n    return {\n      type: 'accepted',\n      url: result.url,\n    };\n  }\n\n  if (result instanceof GramJs.UrlAuthResultDefault) {\n    return {\n      type: 'default',\n    };\n  }\n  return undefined;\n}\n\nexport function buildApiConfig(config: GramJs.Config): ApiConfig {\n  const defaultReaction = config.reactionsDefault && buildApiReaction(config.reactionsDefault);\n  return {\n    expiresAt: config.expires,\n    gifSearchUsername: config.gifSearchUsername,\n    defaultReaction,\n    maxGroupSize: config.chatSizeMax,\n  };\n}\n","import type { GroupCallConnectionData } from '../../lib/secret-sauce';\nimport { Api as GramJs, connection } from '../../lib/gramjs';\nimport type {\n  ApiMessage, ApiMessageExtendedMediaPreview, ApiUpdateConnectionStateType, OnApiUpdate,\n} from '../types';\n\nimport { DEBUG, GENERAL_TOPIC_ID } from '../../config';\nimport { omit, pick } from '../../util/iteratees';\nimport { getServerTimeOffset, setServerTimeOffset } from '../../util/serverTime';\nimport {\n  buildApiMessage,\n  buildApiMessageFromShort,\n  buildApiMessageFromShortChat,\n  buildMessageMediaContent,\n  buildMessageTextContent,\n  buildPoll,\n  buildPollResults,\n  buildApiMessageFromNotification,\n  buildMessageDraft,\n  buildMessageReactions,\n  buildApiMessageExtendedMediaPreview,\n} from './apiBuilders/messages';\nimport {\n  buildChatMember,\n  buildChatMembers,\n  buildChatTypingStatus,\n  buildAvatarHash,\n  buildApiChatFromPreview,\n  buildApiChatFolder,\n  buildApiChatSettings,\n} from './apiBuilders/chats';\nimport {\n  buildApiUser,\n  buildApiUserEmojiStatus,\n  buildApiUserStatus,\n} from './apiBuilders/users';\nimport {\n  buildMessageFromUpdate,\n  isMessageWithMedia,\n  buildChatPhotoForLocalDb,\n} from './gramjsBuilders';\nimport localDb from './localDb';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\nimport {\n  addMessageToLocalDb,\n  addEntitiesWithPhotosToLocalDb,\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n  log,\n  swapLocalInvoiceMedia,\n} from './helpers';\nimport {\n  buildApiNotifyException,\n  buildApiNotifyExceptionTopic,\n  buildPrivacyKey,\n  buildPrivacyRules,\n} from './apiBuilders/misc';\nimport { buildApiPhoto, buildApiUsernames } from './apiBuilders/common';\nimport {\n  buildApiGroupCall,\n  buildApiGroupCallParticipant,\n  buildPhoneCall,\n  getGroupCallId,\n} from './apiBuilders/calls';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from './apiBuilders/peers';\nimport { buildApiEmojiInteraction, buildStickerSet } from './apiBuilders/symbols';\nimport { buildApiBotMenuButton } from './apiBuilders/bots';\n\ntype Update = (\n  (GramJs.TypeUpdate | GramJs.TypeUpdates) & { _entities?: (GramJs.TypeUser | GramJs.TypeChat)[] }\n) | typeof connection.UpdateConnectionState;\n\nconst DELETE_MISSING_CHANNEL_MESSAGE_DELAY = 1000;\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nconst sentMessageIds = new Set();\n\nfunction dispatchUserAndChatUpdates(entities: (GramJs.TypeUser | GramJs.TypeChat)[]) {\n  entities\n    .filter((e) => e instanceof GramJs.User)\n    .map(buildApiUser)\n    .forEach((user) => {\n      if (!user) {\n        return;\n      }\n\n      onUpdate({\n        '@type': 'updateUser',\n        id: user.id,\n        user,\n      });\n    });\n\n  entities\n    .filter((e) => (\n      e instanceof GramJs.Chat || e instanceof GramJs.ChatForbidden\n      || e instanceof GramJs.Channel || e instanceof GramJs.ChannelForbidden\n    ))\n    .map((e) => buildApiChatFromPreview(e))\n    .forEach((chat) => {\n      if (!chat) {\n        return;\n      }\n\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    });\n}\n\nexport function updater(update: Update, originRequest?: GramJs.AnyRequest) {\n  if (update instanceof connection.UpdateServerTimeOffset) {\n    setServerTimeOffset(update.timeOffset);\n\n    onUpdate({\n      '@type': 'updateServerTimeOffset',\n      serverTimeOffset: update.timeOffset,\n    });\n  } else if (update instanceof connection.UpdateConnectionState) {\n    let connectionState: ApiUpdateConnectionStateType;\n\n    switch (update.state) {\n      case connection.UpdateConnectionState.disconnected:\n        connectionState = 'connectionStateConnecting';\n        break;\n      case connection.UpdateConnectionState.broken:\n        connectionState = 'connectionStateBroken';\n        break;\n      case connection.UpdateConnectionState.connected:\n      default:\n        connectionState = 'connectionStateReady';\n        break;\n    }\n\n    onUpdate({\n      '@type': 'updateConnectionState',\n      connectionState,\n    });\n\n    // Messages\n  } else if (\n    update instanceof GramJs.UpdateNewMessage\n    || update instanceof GramJs.UpdateNewScheduledMessage\n    || update instanceof GramJs.UpdateNewChannelMessage\n    || update instanceof GramJs.UpdateShortChatMessage\n    || update instanceof GramJs.UpdateShortMessage\n  ) {\n    let message: ApiMessage | undefined;\n    let shouldForceReply: boolean | undefined;\n\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    if (update instanceof GramJs.UpdateShortChatMessage) {\n      message = buildApiMessageFromShortChat(update);\n    } else if (update instanceof GramJs.UpdateShortMessage) {\n      message = buildApiMessageFromShort(update);\n    } else {\n      // TODO Remove if proven not reproducing\n      if (update.message instanceof GramJs.MessageEmpty) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error('Unexpected update:', update.className, update);\n        }\n\n        return;\n      }\n\n      if ((update.message instanceof GramJs.Message && isMessageWithMedia(update.message))\n      || (update.message instanceof GramJs.MessageService\n          && update.message.action instanceof GramJs.MessageActionSuggestProfilePhoto)\n      ) {\n        addMessageToLocalDb(update.message);\n      }\n\n      message = buildApiMessage(update.message)!;\n      shouldForceReply = 'replyMarkup' in update.message\n        && update.message?.replyMarkup instanceof GramJs.ReplyKeyboardForceReply\n        && (!update.message.replyMarkup.selective || message.isMentioned);\n    }\n\n    if (update instanceof GramJs.UpdateNewScheduledMessage) {\n      onUpdate({\n        '@type': sentMessageIds.has(message.id) ? 'updateScheduledMessage' : 'newScheduledMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n      });\n    } else {\n      onUpdate({\n        '@type': sentMessageIds.has(message.id) ? 'updateMessage' : 'newMessage',\n        id: message.id,\n        chatId: message.chatId,\n        message,\n        shouldForceReply,\n      });\n    }\n\n    // Some updates to a Chat/Channel don't have a dedicated update class.\n    // We can get info on some updates from Service Messages.\n    if (update.message instanceof GramJs.MessageService) {\n      const { action } = update.message;\n\n      if (action instanceof GramJs.MessageActionPaymentSent) {\n        onUpdate({\n          '@type': 'updatePaymentStateCompleted',\n          slug: action.invoiceSlug,\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n        onUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: {\n            title: action.title,\n          },\n        });\n      } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n        const photo = buildChatPhotoForLocalDb(action.photo);\n        const avatarHash = buildAvatarHash(photo);\n\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = photo;\n        }\n        addPhotoToLocalDb(action.photo);\n\n        if (avatarHash) {\n          onUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              avatarHash,\n            },\n            ...(action.photo instanceof GramJs.Photo && { newProfilePhoto: buildApiPhoto(action.photo) }),\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n        const localDbChatId = resolveMessageApiChatId(update.message)!;\n        if (localDb.chats[localDbChatId]) {\n          localDb.chats[localDbChatId].photo = new GramJs.ChatPhotoEmpty();\n        }\n\n        onUpdate({\n          '@type': 'updateChat',\n          id: message.chatId,\n          chat: { avatarHash: undefined },\n        });\n      } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && e.id === action.userId\n        ))) {\n          onUpdate({\n            '@type': 'updateChat',\n            id: message.chatId,\n            chat: {\n              isForbidden: true,\n              isNotJoined: true,\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionChatAddUser) {\n        // eslint-disable-next-line no-underscore-dangle\n        if (update._entities && update._entities.some((e): e is GramJs.User => (\n          e instanceof GramJs.User && Boolean(e.self) && action.users.includes(e.id)\n        ))) {\n          onUpdate({\n            '@type': 'updateChatJoin',\n            id: message.chatId,\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionGroupCall) {\n        if (!action.duration && action.call) {\n          onUpdate({\n            '@type': 'updateGroupCallChatId',\n            chatId: message.chatId,\n            call: {\n              id: action.call.id.toString(),\n              accessHash: action.call.accessHash.toString(),\n            },\n          });\n        }\n      } else if (action instanceof GramJs.MessageActionTopicEdit) {\n        const { replyTo } = update.message;\n        const {\n          replyToMsgId, replyToTopId, forumTopic: isTopicReply,\n        } = replyTo || {};\n        const topicId = !isTopicReply ? GENERAL_TOPIC_ID : replyToTopId || replyToMsgId || GENERAL_TOPIC_ID;\n\n        onUpdate({\n          '@type': 'updateTopic',\n          chatId: getApiChatIdFromMtpPeer(update.message.peerId!),\n          topicId,\n        });\n      } else if (action instanceof GramJs.MessageActionTopicCreate) {\n        onUpdate({\n          '@type': 'updateTopics',\n          chatId: getApiChatIdFromMtpPeer(update.message.peerId!),\n        });\n      }\n    }\n  } else if (\n    update instanceof GramJs.UpdateEditMessage\n    || update instanceof GramJs.UpdateEditChannelMessage\n  ) {\n    // TODO Remove if proven not reproducing\n    if (update.message instanceof GramJs.MessageEmpty) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Unexpected update:', update.className, update);\n      }\n\n      return;\n    }\n\n    if (update.message instanceof GramJs.Message && isMessageWithMedia(update.message)) {\n      addMessageToLocalDb(update.message);\n    }\n\n    // Workaround for a weird server behavior when own message is marked as incoming\n    const message = omit(buildApiMessage(update.message)!, ['isOutgoing']);\n\n    onUpdate({\n      '@type': 'updateMessage',\n      id: message.id,\n      chatId: message.chatId,\n      message,\n    });\n  } else if (update instanceof GramJs.UpdateMessageReactions) {\n    onUpdate({\n      '@type': 'updateMessageReactions',\n      id: update.msgId,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      reactions: buildMessageReactions(update.reactions),\n    });\n  } else if (update instanceof GramJs.UpdateMessageExtendedMedia) {\n    let media: ApiMessage['content'] | undefined;\n    if (update.extendedMedia instanceof GramJs.MessageExtendedMedia) {\n      media = buildMessageMediaContent(update.extendedMedia.media);\n    }\n\n    let preview: ApiMessageExtendedMediaPreview | undefined;\n    if (update.extendedMedia instanceof GramJs.MessageExtendedMediaPreview) {\n      preview = buildApiMessageExtendedMediaPreview(update.extendedMedia);\n    }\n\n    if (!media && !preview) return;\n\n    const chatId = getApiChatIdFromMtpPeer(update.peer);\n\n    swapLocalInvoiceMedia(chatId, update.msgId, update.extendedMedia);\n\n    onUpdate({\n      '@type': 'updateMessageExtendedMedia',\n      id: update.msgId,\n      chatId,\n      media,\n      preview,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteMessages) {\n    onUpdate({\n      '@type': 'deleteMessages',\n      ids: update.messages,\n    });\n  } else if (update instanceof GramJs.UpdateDeleteScheduledMessages) {\n    onUpdate({\n      '@type': 'deleteScheduledMessages',\n      ids: update.messages,\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n    });\n  } else if (update instanceof GramJs.UpdateDeleteChannelMessages) {\n    const chatId = buildApiPeerId(update.channelId, 'channel');\n    const ids = update.messages;\n    const existingIds = ids.filter((id) => localDb.messages[`${chatId}-${id}`]);\n    const missingIds = ids.filter((id) => !localDb.messages[`${chatId}-${id}`]);\n    const profilePhotoIds = ids.map((id) => {\n      const message = localDb.messages[`${chatId}-${id}`];\n\n      return message && message instanceof GramJs.MessageService && 'photo' in message.action\n        ? String(message.action.photo.id)\n        : undefined;\n    }).filter(Boolean);\n\n    if (existingIds.length) {\n      onUpdate({\n        '@type': 'deleteMessages',\n        ids: existingIds,\n        chatId,\n      });\n    }\n\n    if (profilePhotoIds.length) {\n      onUpdate({\n        '@type': 'deleteProfilePhotos',\n        ids: profilePhotoIds,\n        chatId,\n      });\n    }\n\n    // For some reason delete message update sometimes comes before new message update\n    if (missingIds.length) {\n      setTimeout(() => {\n        onUpdate({\n          '@type': 'deleteMessages',\n          ids: missingIds,\n          chatId,\n        });\n      }, DELETE_MISSING_CHANNEL_MESSAGE_DELAY);\n    }\n  } else if (update instanceof GramJs.UpdateServiceNotification) {\n    if (update.popup) {\n      onUpdate({\n        '@type': 'error',\n        error: {\n          message: update.message,\n        },\n      });\n    } else {\n      const currentDate = Date.now() / 1000 + getServerTimeOffset();\n      const message = buildApiMessageFromNotification(update, currentDate);\n\n      if (isMessageWithMedia(update)) {\n        addMessageToLocalDb(buildMessageFromUpdate(message.id, message.chatId, update));\n      }\n\n      onUpdate({\n        '@type': 'updateServiceNotification',\n        message,\n      });\n    }\n  } else if ((\n    originRequest instanceof GramJs.messages.SendMessage\n    || originRequest instanceof GramJs.messages.SendMedia\n    || originRequest instanceof GramJs.messages.SendMultiMedia\n    || originRequest instanceof GramJs.messages.ForwardMessages\n  ) && (\n    update instanceof GramJs.UpdateMessageID || update instanceof GramJs.UpdateShortSentMessage\n  )) {\n    let randomId;\n    if ('randomId' in update) {\n      randomId = update.randomId;\n    } else if ('randomId' in originRequest) {\n      randomId = originRequest.randomId;\n    }\n\n    const localMessage = randomId && localDb.localMessages[String(randomId)];\n    if (!localMessage) {\n      throw new Error('Local message not found');\n    }\n\n    let newContent: ApiMessage['content'] | undefined;\n    if (update instanceof GramJs.UpdateShortSentMessage) {\n      if (localMessage.content.text && update.entities) {\n        newContent = {\n          text: buildMessageTextContent(localMessage.content.text.text, update.entities),\n        };\n      }\n      if (update.media) {\n        newContent = {\n          ...newContent,\n          ...buildMessageMediaContent(update.media),\n        };\n      }\n\n      const mtpMessage = buildMessageFromUpdate(update.id, localMessage.chatId, update);\n      if (isMessageWithMedia(mtpMessage)) {\n        addMessageToLocalDb(mtpMessage);\n      }\n    }\n\n    sentMessageIds.add(update.id);\n\n    // Edge case for \"Send When Online\"\n    const isAlreadySent = 'date' in update && update.date * 1000 < Date.now() + getServerTimeOffset() * 1000;\n\n    onUpdate({\n      '@type': localMessage.isScheduled && !isAlreadySent\n        ? 'updateScheduledMessageSendSucceeded'\n        : 'updateMessageSendSucceeded',\n      chatId: localMessage.chatId,\n      localId: localMessage.id,\n      message: {\n        ...localMessage,\n        ...(newContent && {\n          content: {\n            ...localMessage.content,\n            ...newContent,\n          },\n        }),\n        id: update.id,\n        sendingState: undefined,\n        ...('date' in update && { date: update.date }),\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadMessagesContents) {\n    onUpdate({\n      '@type': 'updateCommonBoxMessages',\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChannelReadMessagesContents) {\n    onUpdate({\n      '@type': 'updateChannelMessages',\n      channelId: buildApiPeerId(update.channelId, 'channel'),\n      ids: update.messages,\n      messageUpdate: {\n        hasUnreadMention: false,\n        isMediaUnread: false,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateMessagePoll) {\n    const { pollId, poll, results } = update;\n    if (poll) {\n      const apiPoll = buildPoll(poll, results);\n\n      onUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: apiPoll,\n      });\n    } else {\n      const pollResults = buildPollResults(results);\n      onUpdate({\n        '@type': 'updateMessagePoll',\n        pollId: String(pollId),\n        pollUpdate: { results: pollResults },\n      });\n    }\n  } else if (update instanceof GramJs.UpdateMessagePollVote) {\n    onUpdate({\n      '@type': 'updateMessagePollVote',\n      pollId: String(update.pollId),\n      userId: buildApiPeerId(update.userId, 'user'),\n      options: update.options.map(serializeBytes),\n    });\n  } else if (update instanceof GramJs.UpdateChannelMessageViews) {\n    onUpdate({\n      '@type': 'updateMessage',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      id: update.id,\n      message: { views: update.views },\n    });\n\n    // Chats\n  } else if (update instanceof GramJs.UpdateReadHistoryInbox) {\n    onUpdate({\n      '@type': 'updateChatInbox',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadHistoryOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelInbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadInboxMessageId: update.maxId,\n        unreadCount: update.stillUnreadCount,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.maxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelDiscussionInbox) {\n    onUpdate({\n      '@type': 'updateThreadInfo',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      threadId: update.topMsgId,\n      threadInfo: {\n        lastReadInboxMessageId: update.readMaxId,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateReadChannelDiscussionOutbox) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: buildApiPeerId(update.channelId, 'channel'),\n      chat: {\n        lastReadOutboxMessageId: update.readMaxId,\n      },\n    });\n  } else if (\n    update instanceof GramJs.UpdateDialogPinned\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateChatPinned',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      isPinned: update.pinned || false,\n    });\n  } else if (update instanceof GramJs.UpdatePinnedDialogs) {\n    const ids = update.order\n      ? update.order\n        .filter((dp): dp is GramJs.DialogPeer => dp instanceof GramJs.DialogPeer)\n        .map((dp) => getApiChatIdFromMtpPeer(dp.peer))\n      : [];\n\n    onUpdate({\n      '@type': 'updatePinnedChatIds',\n      ids,\n      folderId: update.folderId || undefined,\n    });\n  } else if (update instanceof GramJs.UpdateFolderPeers) {\n    update.folderPeers.forEach((folderPeer) => {\n      const { folderId, peer } = folderPeer;\n\n      onUpdate({\n        '@type': 'updateChatListType',\n        id: getApiChatIdFromMtpPeer(peer),\n        folderId,\n      });\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilter) {\n    const { id, filter } = update;\n    const folder = filter instanceof GramJs.DialogFilter ? buildApiChatFolder(filter) : undefined;\n\n    onUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder,\n    });\n  } else if (update instanceof GramJs.UpdateDialogFilterOrder) {\n    onUpdate({\n      '@type': 'updateChatFoldersOrder',\n      orderedIds: update.order,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipants) {\n    const replacedMembers = buildChatMembers(update.participants);\n\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.participants.chatId, 'chat'),\n      replacedMembers,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantAdd) {\n    const addedMember = buildChatMember(\n      pick(update, ['userId', 'inviterId', 'date']) as GramJs.ChatParticipant,\n    );\n\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      addedMember,\n    });\n  } else if (update instanceof GramJs.UpdateChatParticipantDelete) {\n    onUpdate({\n      '@type': 'updateChatMembers',\n      id: buildApiPeerId(update.chatId, 'chat'),\n      deletedMemberId: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (\n    update instanceof GramJs.UpdatePinnedMessages\n    || update instanceof GramJs.UpdatePinnedChannelMessages\n  ) {\n    const chatId = update instanceof GramJs.UpdatePinnedMessages\n      ? getApiChatIdFromMtpPeer(update.peer)\n      : buildApiPeerId(update.channelId, 'channel');\n\n    onUpdate({\n      '@type': 'updatePinnedIds',\n      chatId,\n      messageIds: update.messages,\n      isPinned: update.pinned,\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyPeer\n  ) {\n    onUpdate({\n      '@type': 'updateNotifyExceptions',\n      ...buildApiNotifyException(update.notifySettings, update.peer.peer),\n    });\n  } else if (\n    update instanceof GramJs.UpdateNotifySettings\n    && update.peer instanceof GramJs.NotifyForumTopic\n  ) {\n    onUpdate({\n      '@type': 'updateTopicNotifyExceptions',\n      ...buildApiNotifyExceptionTopic(\n        update.notifySettings, update.peer.peer, update.peer.topMsgId,\n      ),\n    });\n  } else if (\n    update instanceof GramJs.UpdateUserTyping\n    || update instanceof GramJs.UpdateChatUserTyping\n  ) {\n    const id = update instanceof GramJs.UpdateUserTyping\n      ? buildApiPeerId(update.userId, 'user')\n      : buildApiPeerId(update.chatId, 'chat');\n\n    if (update.action instanceof GramJs.SendMessageEmojiInteraction) {\n      onUpdate({\n        '@type': 'updateStartEmojiInteraction',\n        id,\n        emoji: update.action.emoticon,\n        messageId: update.action.msgId,\n        interaction: buildApiEmojiInteraction(JSON.parse(update.action.interaction.data)),\n      });\n    } else {\n      onUpdate({\n        '@type': 'updateChatTypingStatus',\n        id,\n        typingStatus: buildChatTypingStatus(update),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateChannelUserTyping) {\n    const id = buildApiPeerId(update.channelId, 'channel');\n\n    onUpdate({\n      '@type': 'updateChatTypingStatus',\n      id,\n      threadId: update.topMsgId,\n      typingStatus: buildChatTypingStatus(update),\n    });\n  } else if (update instanceof GramJs.UpdateChannel) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities } = update;\n    if (!_entities) {\n      return;\n    }\n\n    const channel = _entities.find((e): e is GramJs.Channel | GramJs.ChannelForbidden => (\n      e instanceof GramJs.Channel || e instanceof GramJs.ChannelForbidden\n    ));\n\n    if (channel instanceof GramJs.Channel) {\n      const chat = buildApiChatFromPreview(channel);\n      if (chat) {\n        onUpdate({\n          '@type': 'updateChat',\n          id: chat.id,\n          chat,\n        });\n\n        onUpdate({\n          '@type': chat.isNotJoined ? 'updateChatLeave' : 'updateChatJoin',\n          id: buildApiPeerId(update.channelId, 'channel'),\n        });\n      }\n    } else if (channel instanceof GramJs.ChannelForbidden) {\n      const chatId = buildApiPeerId(update.channelId, 'channel');\n\n      onUpdate({\n        '@type': 'updateChat',\n        id: chatId,\n        chat: {\n          isRestricted: true,\n        },\n      });\n\n      onUpdate({\n        '@type': 'updateChatLeave',\n        id: chatId,\n      });\n    } else if (_entities.length === 0) {\n      // The link to the discussion group may have been changed.\n      // No corresponding update available at this moment https://core.telegram.org/type/Updates\n      onUpdate({\n        '@type': 'resetMessages',\n        id: buildApiPeerId(update.channelId, 'channel'),\n      });\n    }\n  } else if (\n    update instanceof GramJs.UpdateDialogUnreadMark\n    && update.peer instanceof GramJs.DialogPeer\n  ) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer.peer),\n      chat: {\n        hasUnreadMark: update.unread,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateChatDefaultBannedRights) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: getApiChatIdFromMtpPeer(update.peer),\n      chat: {\n        defaultBannedRights: omitVirtualClassFields(update.defaultBannedRights),\n      },\n    });\n\n    // Users\n  } else if (update instanceof GramJs.UpdateUserStatus) {\n    onUpdate({\n      '@type': 'updateUserStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      status: buildApiUserStatus(update.status),\n    });\n  } else if (update instanceof GramJs.UpdateUser) {\n    onUpdate({\n      '@type': 'updateRequestUserUpdate',\n      id: buildApiPeerId(update.userId, 'user'),\n    });\n  } else if (update instanceof GramJs.UpdateUserEmojiStatus) {\n    const emojiStatus = buildApiUserEmojiStatus(update.emojiStatus);\n    onUpdate({\n      '@type': 'updateUserEmojiStatus',\n      userId: buildApiPeerId(update.userId, 'user'),\n      emojiStatus,\n    });\n  } else if (update instanceof GramJs.UpdateUserName) {\n    const apiUserId = buildApiPeerId(update.userId, 'user');\n    const updatedUser = localDb.users[apiUserId];\n\n    const user = updatedUser?.mutualContact && !updatedUser.self\n      ? pick(update, [])\n      : pick(update, ['firstName', 'lastName']);\n\n    const usernames = buildApiUsernames(update);\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: apiUserId,\n      user: {\n        ...user,\n        usernames,\n      },\n    });\n  } else if (update instanceof GramJs.UpdateUserPhone) {\n    const { userId, phone } = update;\n\n    onUpdate({\n      '@type': 'updateUser',\n      id: buildApiPeerId(userId, 'user'),\n      user: { phoneNumber: phone },\n    });\n  } else if (update instanceof GramJs.UpdatePeerSettings) {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _entities, settings } = update;\n    if (!_entities) {\n      return;\n    }\n\n    if (_entities?.length) {\n      _entities\n        .filter((e) => e instanceof GramJs.User && !e.contact)\n        .forEach((user) => {\n          onUpdate({\n            '@type': 'deleteContact',\n            id: buildApiPeerId(user.id, 'user'),\n          });\n        });\n\n      _entities\n        .filter((e) => e instanceof GramJs.User && e.contact)\n        .map(buildApiUser)\n        .forEach((user) => {\n          if (!user) {\n            return;\n          }\n\n          onUpdate({\n            '@type': 'updateUser',\n            id: user.id,\n            user: {\n              ...user,\n              ...(settings && { settings: buildApiChatSettings(settings) }),\n            },\n          });\n        });\n    }\n\n    // Settings\n  } else if (update instanceof GramJs.UpdateNotifySettings) {\n    const {\n      notifySettings: {\n        showPreviews, silent, muteUntil,\n      },\n      peer: { className },\n    } = update;\n\n    const peerType = className === 'NotifyUsers'\n      ? 'contact'\n      : (className === 'NotifyChats'\n        ? 'group'\n        : (className === 'NotifyBroadcasts'\n          ? 'broadcast'\n          : undefined\n        )\n      );\n\n    if (!peerType) {\n      return;\n    }\n\n    onUpdate({\n      '@type': 'updateNotifySettings',\n      peerType,\n      isSilent: Boolean(silent\n        || (typeof muteUntil === 'number' && Date.now() + getServerTimeOffset() * 1000 < muteUntil * 1000)),\n      shouldShowPreviews: Boolean(showPreviews),\n    });\n  } else if (update instanceof GramJs.UpdatePeerBlocked) {\n    onUpdate({\n      '@type': 'updatePeerBlocked',\n      id: getApiChatIdFromMtpPeer(update.peerId),\n      isBlocked: update.blocked,\n    });\n  } else if (update instanceof GramJs.UpdatePrivacy) {\n    const key = buildPrivacyKey(update.key);\n    if (key) {\n      onUpdate({\n        '@type': 'updatePrivacy',\n        key,\n        rules: buildPrivacyRules(update.rules),\n      });\n    }\n\n    // Misc\n  } else if (update instanceof GramJs.UpdateDraftMessage) {\n    onUpdate({\n      '@type': 'draftMessage',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      threadId: update.topMsgId,\n      ...buildMessageDraft(update.draft),\n    });\n  } else if (update instanceof GramJs.UpdateContactsReset) {\n    onUpdate({ '@type': 'updateResetContactList' });\n  } else if (update instanceof GramJs.UpdateFavedStickers) {\n    onUpdate({ '@type': 'updateFavoriteStickers' });\n  } else if (update instanceof GramJs.UpdateRecentStickers) {\n    onUpdate({ '@type': 'updateRecentStickers' });\n  } else if (update instanceof GramJs.UpdateMoveStickerSetToTop) {\n    if (!update.masks) {\n      onUpdate({\n        '@type': 'updateMoveStickerSetToTop',\n        isCustomEmoji: update.emojis,\n        id: update.stickerset.toString(),\n      });\n    }\n  } else if (update instanceof GramJs.UpdateStickerSets) {\n    onUpdate({ '@type': 'updateStickerSets' });\n  } else if (update instanceof GramJs.UpdateStickerSetsOrder) {\n    if (!update.masks) {\n      onUpdate({\n        '@type': 'updateStickerSetsOrder',\n        order: update.order.map((n) => n.toString()),\n        isCustomEmoji: update.emojis,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateNewStickerSet) {\n    if (update.stickerset instanceof GramJs.messages.StickerSet) {\n      const stickerSet = buildStickerSet(update.stickerset.set);\n      onUpdate({\n        '@type': 'updateStickerSet',\n        id: stickerSet.id,\n        stickerSet,\n      });\n    }\n  } else if (update instanceof GramJs.UpdateSavedGifs) {\n    onUpdate({ '@type': 'updateSavedGifs' });\n  } else if (update instanceof GramJs.UpdateGroupCall) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateGroupCall',\n      call: buildApiGroupCall(update.call),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallConnection) {\n    onUpdate({\n      '@type': 'updateGroupCallConnection',\n      data: JSON.parse(update.params.data) as GroupCallConnectionData,\n      presentation: Boolean(update.presentation),\n    });\n  } else if (update instanceof GramJs.UpdateGroupCallParticipants) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateGroupCallParticipants',\n      groupCallId: getGroupCallId(update.call),\n      participants: update.participants.map(buildApiGroupCallParticipant),\n    });\n  } else if (update instanceof GramJs.UpdatePendingJoinRequests) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updatePendingJoinRequests',\n      chatId: getApiChatIdFromMtpPeer(update.peer),\n      recentRequesterIds: update.recentRequesters.map((id) => buildApiPeerId(id, 'user')),\n      requestsPending: update.requestsPending,\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCall) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updatePhoneCall',\n      call: buildPhoneCall(update.phoneCall),\n    });\n  } else if (update instanceof GramJs.UpdatePhoneCallSignalingData) {\n    onUpdate({\n      '@type': 'updatePhoneCallSignalingData',\n      callId: update.phoneCallId.toString(),\n      data: Array.from(update.data),\n    });\n  } else if (update instanceof GramJs.UpdateWebViewResultSent) {\n    const { queryId } = update;\n\n    onUpdate({\n      '@type': 'updateWebViewResultSent',\n      queryId: queryId.toString(),\n    });\n  } else if (update instanceof GramJs.UpdateBotMenuButton) {\n    const {\n      botId,\n      button,\n    } = update;\n\n    const id = buildApiPeerId(botId, 'user');\n\n    onUpdate({\n      '@type': 'updateBotMenuButton',\n      botId: id,\n      button: buildApiBotMenuButton(button),\n    });\n  } else if (update instanceof GramJs.UpdateTranscribedAudio) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n\n    onUpdate({\n      '@type': 'updateTranscribedAudio',\n      transcriptionId: update.transcriptionId.toString(),\n      text: update.text,\n      isPending: update.pending,\n    });\n  } else if (update instanceof GramJs.UpdateConfig) {\n    // eslint-disable-next-line no-underscore-dangle\n    const entities = update._entities;\n    if (entities) {\n      addEntitiesWithPhotosToLocalDb(entities);\n      dispatchUserAndChatUpdates(entities);\n    }\n    onUpdate({ '@type': 'updateConfig' });\n  } else if (update instanceof GramJs.UpdateChannelPinnedTopic) {\n    onUpdate({\n      '@type': 'updatePinnedTopic',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      topicId: update.topicId,\n      isPinned: Boolean(update.pinned),\n    });\n  } else if (update instanceof GramJs.UpdateChannelPinnedTopics) {\n    onUpdate({\n      '@type': 'updatePinnedTopicsOrder',\n      chatId: buildApiPeerId(update.channelId, 'channel'),\n      order: update.order || [],\n    });\n  } else if (update instanceof GramJs.UpdateRecentEmojiStatuses) {\n    onUpdate({ '@type': 'updateRecentEmojiStatuses' });\n  } else if (DEBUG) {\n    const params = typeof update === 'object' && 'className' in update ? update.className : update;\n    log('UNEXPECTED UPDATE', params);\n  }\n}\n","import { errors } from '../../../lib/gramjs';\nimport type {\n  ApiUpdateAuthorizationState,\n  ApiUpdateAuthorizationStateType,\n  OnApiUpdate,\n  ApiUser,\n} from '../../types';\n\nimport { DEBUG } from '../../../config';\n\nconst ApiErrors: { [k: string]: string } = {\n  PHONE_NUMBER_INVALID: 'Invalid phone number.',\n  PHONE_CODE_INVALID: 'Invalid code.',\n  PASSWORD_HASH_INVALID: 'Incorrect password.',\n  PHONE_PASSWORD_FLOOD: 'Limit exceeded. Please try again later.',\n  PHONE_NUMBER_BANNED: 'This phone number is banned.',\n};\n\nconst authController: {\n  resolve?: Function;\n  reject?: Function;\n} = {};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport function onWebAuthTokenFailed() {\n  onUpdate({\n    '@type': 'updateWebAuthTokenFailed',\n  });\n}\n\nexport function onRequestPhoneNumber() {\n  onUpdate(buildAuthStateUpdate('authorizationStateWaitPhoneNumber'));\n\n  return new Promise<string>((resolve, reject) => {\n    authController.resolve = resolve;\n    authController.reject = reject;\n  });\n}\n\nexport function onRequestCode(isCodeViaApp = false) {\n  onUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitCode'),\n    isCodeViaApp,\n  });\n\n  return new Promise<string>((resolve, reject) => {\n    authController.resolve = resolve;\n    authController.reject = reject;\n  });\n}\n\nexport function onRequestPassword(hint?: string, noReset?: boolean) {\n  onUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitPassword'),\n    hint,\n    noReset,\n  });\n\n  return new Promise<string>((resolve) => {\n    authController.resolve = resolve;\n  });\n}\n\nexport function onRequestRegistration() {\n  onUpdate(buildAuthStateUpdate('authorizationStateWaitRegistration'));\n\n  return new Promise<[string, string?]>((resolve) => {\n    authController.resolve = resolve;\n  });\n}\n\nexport function onRequestQrCode(qrCode: { token: Buffer; expires: number }) {\n  onUpdate({\n    ...buildAuthStateUpdate('authorizationStateWaitQrCode'),\n    qrCode: {\n      token: btoa(String.fromCharCode(...qrCode.token)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, ''),\n      expires: qrCode.expires,\n    },\n  });\n\n  return new Promise<void>((resolve, reject) => {\n    authController.reject = reject;\n  });\n}\n\nexport function onAuthError(err: Error) {\n  let message: string;\n\n  if (err instanceof errors.FloodWaitError) {\n    const hours = Math.ceil(Number(err.seconds) / 60 / 60);\n    message = `Too many attempts. Try again in ${hours > 1 ? `${hours} hours` : 'an hour'}`;\n  } else {\n    message = ApiErrors[err.message];\n  }\n\n  if (!message) {\n    message = 'Unexpected Error';\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n\n  onUpdate({\n    '@type': 'updateAuthorizationError',\n    message,\n  });\n}\n\nexport function onAuthReady() {\n  onUpdate(buildAuthStateUpdate('authorizationStateReady'));\n}\n\nexport function onCurrentUserUpdate(currentUser: ApiUser) {\n  onUpdate({\n    '@type': 'updateCurrentUser',\n    currentUser,\n  });\n}\n\nexport function buildAuthStateUpdate(authorizationState: ApiUpdateAuthorizationStateType): ApiUpdateAuthorizationState {\n  return {\n    '@type': 'updateAuthorizationState',\n    authorizationState,\n  };\n}\n\nexport function provideAuthPhoneNumber(phoneNumber: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(phoneNumber);\n}\n\nexport function provideAuthCode(code: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(code);\n}\n\nexport function provideAuthPassword(password: string) {\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve(password);\n}\n\nexport function provideAuthRegistration(registration: { firstName: string; lastName: string }) {\n  const { firstName, lastName } = registration;\n\n  if (!authController.resolve) {\n    return;\n  }\n\n  authController.resolve([firstName, lastName]);\n}\n\nexport function restartAuth() {\n  if (!authController.reject) {\n    return;\n  }\n\n  authController.reject(new Error('RESTART_AUTH'));\n}\n\nexport function restartAuthWithQr() {\n  if (!authController.reject) {\n    return;\n  }\n\n  authController.reject(new Error('RESTART_AUTH_WITH_QR'));\n}\n","import type {TelegramClient} from '../../../lib/gramjs';\nimport {Api as GramJs} from '../../../lib/gramjs';\nimport type {ApiOnProgress, ApiParsedMedia} from '../../types';\nimport {ApiMediaFormat,} from '../../types';\n\nimport {\n  CLOUD_MESSAGE_API,\n  DOWNLOAD_WORKERS,\n  MEDIA_CACHE_DISABLED,\n  MEDIA_CACHE_NAME,\n  MEDIA_CACHE_NAME_AVATARS,\n  MEDIA_CACHE_NAME_WAI,\n} from '../../../config';\nimport localDb from '../localDb';\nimport * as cacheApi from '../../../util/cacheApi';\nimport {Type} from '../../../util/cacheApi';\nimport {getEntityTypeById} from '../gramjsBuilders';\nimport {DownloadReq, DownloadRes} from \"../../../lib/ptp/protobuf/PTPFile\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport Account from \"../../../worker/share/Account\";\nimport {blobToBuffer} from \"../../../worker/share/utils/utils\";\n\nconst MEDIA_ENTITY_TYPES = new Set([\n  'msg', 'sticker', 'gif', 'wallpaper', 'photo', 'webDocument', 'document', 'videoAvatar',\n]);\n\n\nasync function fileToArrayBuffer(file: File): Promise<ArrayBuffer> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      resolve(reader.result as ArrayBuffer);\n    };\n\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n\n    reader.readAsArrayBuffer(file);\n  });\n}\n\nexport default async function downloadMedia(\n  {\n    url, mediaFormat, start, end, isHtmlAllowed,\n  }: {\n    url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean;\n  },\n  client: TelegramClient,\n  isConnected: boolean,\n  onProgress?: ApiOnProgress,\n) {\n  let data:Buffer,fullSize:number,mimeType:string;\n  let flag = false;\n  let id;\n  const t = url.split(\"?\")\n  const t1 = t[0].split(\":\");\n\n  if(url.indexOf(\"progressive\") > 0 || t1[0].indexOf(\"-\") > 1){\n    if(t1[0].indexOf(\"avatar-\") === 0){\n      id = t[1]\n    } else if(t1[0].indexOf(\"profile-\") === 0){\n      id = t[1]\n    }else{\n      id = t1[t1.length - 1];\n    }\n  }else{\n    if(url.indexOf(\"profile\") === 0){\n      if(url.indexOf(\"?\") > -1){\n        id = url.split(\"?\")[1]\n      }else {\n        id = url.replace(\"profile\",\"\")\n      }\n    }else if(url.indexOf(\"avatar\") === 0){\n      id = url.split(\"?\")[1]\n    }else if(url.indexOf(\"photo\") === 0){\n      id = url.split(\"?\")[0].replace(\"photo\",\"\")\n    }else{\n      console.error(\"[error id] \",url)\n      return undefined\n    }\n  }\n\n  if(localDb.cache[id]){\n    const ab = await fileToArrayBuffer(localDb.cache[id]);\n    mimeType = localDb.cache[id].type;\n    //blob = new Blob([ab], { type: mimeType });\n    fullSize = localDb.cache[id].size\n    data = Buffer.from(ab)\n    flag = true;\n  }\n\n  if(!flag){\n    // const  res = await download(url, client, isConnected, onProgress, start, end, mediaFormat, isHtmlAllowed) || {};\n    // if(!res){\n    //   return undefined\n    // }\n    // data = res.data;\n    // mimeType = res.mimeType;\n    // fullSize = res.fullSize;\n    // if (!data) {\n    //   return undefined;\n    // }\n    if(!CLOUD_MESSAGE_API){\n      return undefined\n    }\n    let downloadReq = new DownloadReq({\n      id,\n    })\n    try {\n      console.log(\"[DOWNLOAD media]\",{url,id})\n      let blob = await cacheApi.fetch(MEDIA_CACHE_NAME_WAI, id, Type.Blob);\n      let downloadRes;\n      let arrayBuffer;\n      if(!blob){\n        let finalBuf = Buffer.alloc(0);\n        while (true){\n          const res = await fetch(`${CLOUD_MESSAGE_API}/proto`,{\n            method: 'POST',\n            body: Buffer.from(downloadReq.pack().getPbData())\n          })\n          arrayBuffer = await res.arrayBuffer();\n          downloadRes = DownloadRes.parseMsg(new Pdu(Buffer.from(arrayBuffer)));\n          if(!downloadRes || downloadRes.err !== ERR.NO_ERROR || !downloadRes.file){\n            return undefined\n          }\n          finalBuf = Buffer.concat([finalBuf,Buffer.from(downloadRes.file.buf)])\n          if(downloadRes.file.part_total && downloadRes.file.part < downloadRes.file.part_total){\n            downloadReq = new DownloadReq({\n              id,\n              part:downloadRes.file.part+1\n            })\n          }else{\n            downloadRes.file!.buf = finalBuf\n            try {\n              const body = new DownloadRes(downloadRes).pack().getPbData()\n              await cacheApi.save(MEDIA_CACHE_NAME_WAI, id, new Blob([Buffer.from(body)]));\n              downloadRes.file.buf = Account.localDecrypt(finalBuf)\n            }catch (e){\n              console.error(e)\n              return undefined\n            }\n            break\n          }\n        }\n      }else{\n        // @ts-ignore\n        const buf = await blobToBuffer(blob)\n        downloadRes = DownloadRes.parseMsg(new Pdu(buf));\n        if(!downloadRes || downloadRes.err !== ERR.NO_ERROR){\n          return undefined\n        }\n        try {\n          downloadRes.file!.buf = Account.localDecrypt(Buffer.from(downloadRes.file!.buf))\n        }catch (e){}\n      }\n      data = Buffer.from(downloadRes.file!.buf);\n      mimeType= downloadRes.file!.type\n      fullSize = downloadRes.file!.size\n    }catch (e){\n      console.error('[DOWNLOAD FAILED]',e,{url,id})\n      return undefined\n    }\n  }\n  const parsed = await parseMedia(data, mediaFormat, mimeType);\n  if (!parsed) {\n    return undefined;\n  }\n  //\n  // const canCache = mediaFormat !== ApiMediaFormat.Progressive && (\n  //   mediaFormat !== ApiMediaFormat.BlobUrl || (parsed as Blob).size <= MEDIA_CACHE_MAX_BYTES\n  // );\n\n  const canCache = mediaFormat !== ApiMediaFormat.Progressive\n  if (!MEDIA_CACHE_DISABLED && cacheApi && canCache) {\n    const cacheName = url.startsWith('avatar') ? MEDIA_CACHE_NAME_AVATARS : MEDIA_CACHE_NAME;\n    void cacheApi.save(cacheName, url, parsed);\n  }\n\n  const dataBlob = mediaFormat === ApiMediaFormat.Progressive ? '' : parsed as string | Blob;\n  const arrayBuffer = mediaFormat === ApiMediaFormat.Progressive ? parsed as ArrayBuffer : undefined;\n\n  return {\n    dataBlob,\n    arrayBuffer,\n    mimeType,\n    fullSize,\n  };\n}\n\nexport type EntityType = (\n  'msg' | 'sticker' | 'wallpaper' | 'gif' | 'channel' | 'chat' | 'user' | 'photo' | 'stickerSet' | 'webDocument' |\n  'document' | 'staticMap' | 'videoAvatar'\n);\n\nasync function download(\n  url: string,\n  client: TelegramClient,\n  isConnected: boolean,\n  onProgress?: ApiOnProgress,\n  start?: number,\n  end?: number,\n  mediaFormat?: ApiMediaFormat,\n  isHtmlAllowed?: boolean,\n) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, sizeType, params, mediaMatchType,\n  } = parsed;\n\n  // if (!isConnected) {\n  //   return Promise.reject(new Error('ERROR: Client is not connected'));\n  // }\n\n  if (entityType === 'staticMap') {\n    const accessHash = entityId;\n    const parsedParams = new URLSearchParams(params);\n    const long = parsedParams.get('long');\n    const lat = parsedParams.get('lat');\n    const w = parsedParams.get('w');\n    const h = parsedParams.get('h');\n    const zoom = parsedParams.get('zoom');\n    const scale = parsedParams.get('scale');\n    const accuracyRadius = parsedParams.get('accuracy_radius');\n\n    const data = await client.downloadStaticMap(accessHash, long, lat, w, h, zoom, scale, accuracyRadius);\n    return {\n      mimeType: 'image/png',\n      data,\n    };\n  }\n\n  let entity: (\n    GramJs.User | GramJs.Chat | GramJs.Channel | GramJs.Photo |\n    GramJs.Message | GramJs.MessageService |\n    GramJs.Document | GramJs.StickerSet | GramJs.TypeWebDocument | undefined\n  );\n\n  switch (entityType) {\n    case 'channel':\n    case 'chat':\n      entity = localDb.chats[entityId];\n      break;\n    case 'user':\n      entity = localDb.users[entityId];\n      break;\n    case 'msg':\n      entity = localDb.messages[entityId];\n      break;\n    case 'sticker':\n    case 'gif':\n    case 'wallpaper':\n      entity = localDb.documents[entityId];\n      break;\n    case 'videoAvatar':\n    case 'photo':\n      entity = localDb.photos[entityId];\n      break;\n    case 'stickerSet':\n      entity = localDb.stickerSets[entityId];\n      break;\n    case 'webDocument':\n      entity = localDb.webDocuments[entityId];\n      break;\n    case 'document':\n      entity = localDb.documents[entityId];\n      break;\n  }\n\n  if (!entity) {\n    return undefined;\n  }\n\n  if (MEDIA_ENTITY_TYPES.has(entityType)) {\n    if (mediaFormat === ApiMediaFormat.Stream) {\n      onProgress!.acceptsBuffer = true;\n    }\n\n    const data = await client.downloadMedia(entity, {\n      sizeType, start, end, progressCallback: onProgress, workers: DOWNLOAD_WORKERS,\n    });\n    let mimeType;\n    let fullSize;\n\n    if (entity instanceof GramJs.MessageService && entity.action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n      mimeType = 'image/jpeg';\n    } else if (entity instanceof GramJs.Message) {\n      mimeType = getMessageMediaMimeType(entity, sizeType);\n      if (entity.media instanceof GramJs.MessageMediaDocument && entity.media.document instanceof GramJs.Document) {\n        fullSize = entity.media.document.size.toJSNumber();\n      }\n      if (entity.media instanceof GramJs.MessageMediaWebPage\n        && entity.media.webpage instanceof GramJs.WebPage\n        && entity.media.webpage.document instanceof GramJs.Document) {\n        fullSize = entity.media.webpage.document.size.toJSNumber();\n      }\n    } else if (entity instanceof GramJs.Photo) {\n      if (entityType === 'videoAvatar') {\n        mimeType = 'video/mp4';\n      } else {\n        mimeType = 'image/jpeg';\n      }\n    } else if (entityType === 'sticker' && sizeType) {\n      mimeType = 'image/webp';\n    } else if (entityType === 'webDocument') {\n      mimeType = (entity as GramJs.TypeWebDocument).mimeType;\n      fullSize = (entity as GramJs.TypeWebDocument).size;\n    } else {\n      mimeType = (entity as GramJs.Document).mimeType;\n      fullSize = (entity as GramJs.Document).size.toJSNumber();\n    }\n\n    // Prevent HTML-in-video attacks\n    if (!isHtmlAllowed && mimeType) {\n      mimeType = mimeType.replace(/html/gi, '');\n    }\n\n    return { mimeType, data, fullSize };\n  } else if (entityType === 'stickerSet') {\n    const data = await client.downloadStickerSetThumb(entity);\n    const mimeType = getMimeType(data);\n\n    return { mimeType, data };\n  } else {\n    const data = await client.downloadProfilePhoto(entity, mediaMatchType === 'profile');\n    const mimeType = getMimeType(data);\n\n    return { mimeType, data };\n  }\n}\n\nfunction getMessageMediaMimeType(message: GramJs.Message, sizeType?: string) {\n  if (!message || !message.media) {\n    return undefined;\n  }\n\n  if (message.media instanceof GramJs.MessageMediaPhoto) {\n    return 'image/jpeg';\n  }\n\n  if (message.media instanceof GramJs.MessageMediaGeo\n    || message.media instanceof GramJs.MessageMediaVenue\n    || message.media instanceof GramJs.MessageMediaGeoLive) {\n    return 'image/png';\n  }\n\n  if (message.media instanceof GramJs.MessageMediaDocument && message.media.document instanceof GramJs.Document) {\n    if (sizeType) {\n      return message.media.document!.attributes.some((a) => a instanceof GramJs.DocumentAttributeSticker)\n        ? 'image/webp'\n        : 'image/jpeg';\n    }\n\n    return message.media.document!.mimeType;\n  }\n\n  if (message.media instanceof GramJs.MessageMediaWebPage\n    && message.media.webpage instanceof GramJs.WebPage\n    && message.media.webpage.document instanceof GramJs.Document) {\n    if (sizeType) {\n      return 'image/jpeg';\n    }\n\n    return message.media.webpage.document.mimeType;\n  }\n\n  return undefined;\n}\n\n// eslint-disable-next-line no-async-without-await/no-async-without-await\nasync function parseMedia(\n  data: Buffer, mediaFormat: ApiMediaFormat, mimeType?: string,\n): Promise<ApiParsedMedia | undefined> {\n  switch (mediaFormat) {\n    case ApiMediaFormat.BlobUrl:\n      return new Blob([data], { type: mimeType });\n    case ApiMediaFormat.Text:\n      return data.toString();\n    case ApiMediaFormat.Progressive:\n    case ApiMediaFormat.DownloadUrl:\n      return data.buffer;\n  }\n\n  return undefined;\n}\n\nfunction getMimeType(data: Uint8Array, fallbackMimeType = 'image/jpeg') {\n  if (data.length < 4) {\n    return fallbackMimeType;\n  }\n\n  let type = fallbackMimeType;\n  const signature = data.subarray(0, 4).reduce((result, byte) => result + byte.toString(16), '');\n\n  // https://en.wikipedia.org/wiki/List_of_file_signatures\n  switch (signature) {\n    case '89504e47':\n      type = 'image/png';\n      break;\n    case '47494638':\n      type = 'image/gif';\n      break;\n    case 'ffd8ffe0':\n    case 'ffd8ffe1':\n    case 'ffd8ffe2':\n    case 'ffd8ffe3':\n    case 'ffd8ffe8':\n      type = 'image/jpeg';\n      break;\n    case '52494646':\n      // In our case only webp is expected\n      type = 'image/webp';\n      break;\n  }\n\n  return type;\n}\n\nexport function parseMediaUrl(url: string) {\n  const mediaMatch = url.startsWith('staticMap')\n    ? url.match(/(staticMap):([0-9-]+)(\\?.+)/)\n    : url.startsWith('webDocument')\n      ? url.match(/(webDocument):(.+)/)\n      : url.match(\n        // eslint-disable-next-line max-len\n        /(avatar|profile|photo|msg|stickerSet|sticker|wallpaper|gif|document|videoAvatar)([-\\d\\w./]+)(?::\\d+)?(\\?size=\\w+)?/,\n      );\n  if (!mediaMatch) {\n    return undefined;\n  }\n\n  const mediaMatchType = mediaMatch[1];\n  const entityId: string | number = mediaMatch[2];\n\n  let entityType: EntityType;\n  const params = mediaMatch[3];\n  const sizeType = params?.replace('?size=', '') || undefined;\n\n  if (mediaMatch[1] === 'avatar' || mediaMatch[1] === 'profile') {\n    entityType = getEntityTypeById(entityId);\n  } else {\n    entityType = mediaMatch[1] as EntityType;\n  }\n\n  return {\n    mediaMatchType,\n    entityType,\n    entityId,\n    sizeType,\n    params,\n  };\n}\n","import {PbChatGptModelConfig_Type} from \"../lib/ptp/protobuf/PTPCommon/types\";\n\nexport const UserIdFirstBot = \"1000\";\nexport const UserIdCnPrompt = \"1010\";\nexport const UserIdEnPrompt = \"1011\";\nexport const UserIdChatGpt = \"1012\";\nexport const UserIdChatGpt4 = \"1013\";\n\nexport const DEFAULT_AVATARS:Record<string, string> = {\n  [UserIdFirstBot]:'icon-square-dev-512x512.png',\n  [UserIdChatGpt]:'avatar/ChatGPT_logo.png',\n  [UserIdChatGpt4]:'avatar/chatgpt4.png'\n}\n\nexport const NameFirstBot = \"Wai\";\nexport const DEFAULT_CREATE_USER_BIO = '我是一个AI机器人'\nexport const DEFAULT_PROMPT = '你现在是一个优秀的助手，请用中文回答我的问题。'\nexport const BOT_FOLDER_TITLE = 'Wai'\nexport const BOT_FOLDER_ID = 1\n\nexport const WaterMark = 'https://wai.chat'\nconst ENABLE_GPT4 = true;\n\nexport const ALL_CHAT_GPT_MODELS = [\n  {\n    name: \"gpt-4\",\n    available: ENABLE_GPT4,\n  },\n  // {\n  //   name: \"gpt-4-0314\",\n  //   available: ENABLE_GPT4,\n  // },\n  // {\n  //   name: \"gpt-4-32k\",\n  //   available: ENABLE_GPT4,\n  // },\n  // {\n  //   name: \"gpt-4-32k-0314\",\n  //   available: ENABLE_GPT4,\n  // },\n  {\n    name: \"gpt-3.5-turbo\",\n    available: true,\n  },\n  // {\n  //   name: \"gpt-3.5-turbo-0301\",\n  //   available: true,\n  // },\n];\n\nexport const ChatModelConfig:PbChatGptModelConfig_Type = {\n  model: \"gpt-3.5-turbo\",\n  temperature: 1,\n  max_tokens: 1000,\n  presence_penalty: 0,\n}\n\nexport const DEFAULT_BOT_COMMANDS = [\n  {\n    \"botId\": UserIdFirstBot,\n    \"command\": \"start\",\n    \"description\": \"开始对话\"\n  },\n  {\n    \"botId\": UserIdFirstBot,\n    \"command\": \"setting\",\n    \"description\": \"设置面板\"\n  },\n]\n\nexport const DEFAULT_CHATGPT_AI_COMMANDS = [\n  {\n    \"botId\": UserIdChatGpt,\n    \"command\": \"reset\",\n    \"description\": \"重置ai记忆,提问只携带 初始化Prompt\"\n  },\n  {\n    \"botId\": UserIdChatGpt,\n    \"command\": \"aiModel\",\n    \"description\": \"设置AI模型\"\n  },\n  {\n    \"botId\": UserIdChatGpt,\n    \"command\": \"apiKey\",\n    \"description\": \"自定义apiKey\"\n  },\n  {\n    \"botId\": UserIdChatGpt,\n    \"command\": \"systemPrompt\",\n    \"description\": \"初始化 上下文 Prompt\"\n  },\n  {\n    \"botId\": UserIdChatGpt,\n    \"command\": \"maxHistoryLength\",\n    \"description\": \"每次提问携带历史消息数\"\n  },\n  {\n    \"botId\": UserIdChatGpt,\n    \"command\": \"usage\",\n    \"description\": \"账户余额\"\n  },\n]\n\nexport const DEFAULT_START_TIPS =    `你可以通过发送以下命令来控制我：\n\n/setting - 设置面板\n\n`\n\nexport const CurrentUserInfo = {\n  \"id\": \"1\",\n  \"accessHash\": \"\",\n  \"firstName\": \"me\",\n  \"lastName\": \"\",\n  \"canBeInvitedToGroup\": false,\n  \"hasVideoAvatar\": false,\n  \"isMin\": false,\n  \"isPremium\": false,\n  \"noStatus\": true,\n  \"fullInfo\": {\n    \"isBlocked\": false,\n    \"noVoiceMessages\": false,\n    \"bio\": \"\",\n  },\n  \"usernames\": [\n    {\n      \"username\": \"my-self\",\n      \"isActive\": true,\n      \"isEditable\": true\n    }\n  ],\n  \"type\": \"userTypeBot\",\n  \"phoneNumber\": \"\",\n  \"avatarHash\": \"\",\n  \"isSelf\": true\n}\n\nexport let LoadAllChats = {\n  \"users\": [\n    {...CurrentUserInfo},\n    {\n      \"id\": UserIdFirstBot,\n      \"fullInfo\": {\n        \"isBlocked\": false,\n        \"noVoiceMessages\": false,\n        \"bio\": DEFAULT_CREATE_USER_BIO,\n        \"botInfo\": {\n          \"botId\": UserIdFirstBot,\n          \"description\": DEFAULT_CREATE_USER_BIO,\n          aiType:\"ChatGpt\",\n          \"menuButton\": {\n            \"type\": \"commands\"\n          },\n          \"commands\": DEFAULT_BOT_COMMANDS\n        }\n      },\n      bot:{\n        chatGptConfig:{\n          modelConfig:ChatModelConfig,\n          api_key:\"\",\n          init_system_content:DEFAULT_PROMPT,\n          max_history_length:4,\n        },\n        enableAi:true,\n      },\n      \"accessHash\": \"\",\n      \"firstName\": NameFirstBot,\n      \"lastName\": \"\",\n      \"canBeInvitedToGroup\": false,\n      \"hasVideoAvatar\": false,\n      \"isMin\": false,\n      \"isPremium\": true,\n      \"noStatus\": true,\n      \"usernames\": [\n        {\n          \"username\": \"first_bot\",\n          \"isActive\": true,\n          \"isEditable\": true\n        }\n      ],\n      \"type\": \"userTypeBot\",\n      \"phoneNumber\": \"\",\n      \"avatarHash\": \"\",\n      \"isSelf\": false\n    }\n  ],\n  \"chats\": [\n    {\n      \"id\": UserIdFirstBot,\n      \"title\":  NameFirstBot,\n      \"type\": \"chatTypePrivate\",\n      \"isMuted\": false,\n      \"isMin\": false,\n      \"hasPrivateLink\": false,\n      \"isSignaturesShown\": false,\n      \"isVerified\": true,\n      \"isJoinToSend\": true,\n      \"isJoinRequest\": true,\n      \"isForum\": false,\n      \"isListed\": true,\n      \"settings\": {\n        \"isAutoArchived\": false,\n        \"canReportSpam\": false,\n        \"canAddContact\": false,\n        \"canBlockContact\": false\n      },\n      \"accessHash\": \"\"\n    }\n  ],\n  \"chatFolders\": [\n    {\n      \"id\": BOT_FOLDER_ID,\n      \"title\": BOT_FOLDER_TITLE,\n      \"includedChatIds\": [\n        UserIdFirstBot\n      ],\n      \"channels\": false,\n      \"pinnedChatIds\": [],\n      \"excludedChatIds\": []\n    },\n    {\n      \"id\": 2,\n      \"title\": \"ChatGpt\",\n      \"includedChatIds\": [\n        UserIdChatGpt,UserIdChatGpt4\n      ],\n      \"channels\": false,\n      \"pinnedChatIds\": [],\n      \"excludedChatIds\": []\n    }\n  ],\n  folderIds:[\n    0,\n    BOT_FOLDER_ID,\n    2\n  ],\n  \"draftsById\": {},\n  \"replyingToById\": {},\n  \"orderedPinnedIds\": [],\n}\nexport const TEXT_AI_THINKING = \"...\"\nexport const BYPASS_API = [\n  \"translateText\",\n  \"editChatFolder\",\"sortChatFolders\",\"deleteChatFolder\",\n  \"requestWebView\",\"uploadContactProfilePhoto\",\n  \"sendMessage\",\"editMessage\",\"deleteMessages\",\"downloadMedia\",\"destroy\",\"fetchMessages\",\"answerCallbackButton\",\n  \"uploadProfilePhoto\",\"fetchChats\",\"sendWithCallback\",\"msgClientLogin\",\"updateProfile\",\"updateUsername\"\n]\n\nexport const STOP_HANDLE_MESSAGE = true\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { AnswerCallbackButtonReq_Type } from './types';\n\nexport default class AnswerCallbackButtonReq extends BaseMsg {\n  public msg?: AnswerCallbackButtonReq_Type\n  constructor(msg?: AnswerCallbackButtonReq_Type) {\n    super('PTP.Msg.AnswerCallbackButtonReq', msg);\n    this.setCommandId(ActionCommands.CID_AnswerCallbackButtonReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): AnswerCallbackButtonReq_Type {\n    return new AnswerCallbackButtonReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { AnswerCallbackButtonRes_Type } from './types';\n\nexport default class AnswerCallbackButtonRes extends BaseMsg {\n  public msg?: AnswerCallbackButtonRes_Type\n  constructor(msg?: AnswerCallbackButtonRes_Type) {\n    super('PTP.Msg.AnswerCallbackButtonRes', msg);\n    this.setCommandId(ActionCommands.CID_AnswerCallbackButtonRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): AnswerCallbackButtonRes_Type {\n    return new AnswerCallbackButtonRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadMsgRes_Type } from './types';\n\nexport default class DownloadMsgRes extends BaseMsg {\n  public msg?: DownloadMsgRes_Type\n  constructor(msg?: DownloadMsgRes_Type) {\n    super('PTP.Msg.DownloadMsgRes', msg);\n    this.setCommandId(ActionCommands.CID_DownloadMsgRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadMsgRes_Type {\n    return new DownloadMsgRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { GenMsgIdReq_Type } from './types';\n\nexport default class GenMsgIdReq extends BaseMsg {\n  public msg?: GenMsgIdReq_Type\n  constructor(msg?: GenMsgIdReq_Type) {\n    super('PTP.Msg.GenMsgIdReq', msg);\n    this.setCommandId(ActionCommands.CID_GenMsgIdReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): GenMsgIdReq_Type {\n    return new GenMsgIdReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { GenMsgIdRes_Type } from './types';\n\nexport default class GenMsgIdRes extends BaseMsg {\n  public msg?: GenMsgIdRes_Type\n  constructor(msg?: GenMsgIdRes_Type) {\n    super('PTP.Msg.GenMsgIdRes', msg);\n    this.setCommandId(ActionCommands.CID_GenMsgIdRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): GenMsgIdRes_Type {\n    return new GenMsgIdRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SendBotMsgReq_Type } from './types';\n\nexport default class SendBotMsgReq extends BaseMsg {\n  public msg?: SendBotMsgReq_Type\n  constructor(msg?: SendBotMsgReq_Type) {\n    super('PTP.Msg.SendBotMsgReq', msg);\n    this.setCommandId(ActionCommands.CID_SendBotMsgReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SendBotMsgReq_Type {\n    return new SendBotMsgReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { SendBotMsgRes_Type } from './types';\n\nexport default class SendBotMsgRes extends BaseMsg {\n  public msg?: SendBotMsgRes_Type\n  constructor(msg?: SendBotMsgRes_Type) {\n    super('PTP.Msg.SendBotMsgRes', msg);\n    this.setCommandId(ActionCommands.CID_SendBotMsgRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): SendBotMsgRes_Type {\n    return new SendBotMsgRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateCmdReq_Type } from './types';\n\nexport default class UpdateCmdReq extends BaseMsg {\n  public msg?: UpdateCmdReq_Type\n  constructor(msg?: UpdateCmdReq_Type) {\n    super('PTP.Msg.UpdateCmdReq', msg);\n    this.setCommandId(ActionCommands.CID_UpdateCmdReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateCmdReq_Type {\n    return new UpdateCmdReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateCmdRes_Type } from './types';\n\nexport default class UpdateCmdRes extends BaseMsg {\n  public msg?: UpdateCmdRes_Type\n  constructor(msg?: UpdateCmdRes_Type) {\n    super('PTP.Msg.UpdateCmdRes', msg);\n    this.setCommandId(ActionCommands.CID_UpdateCmdRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateCmdRes_Type {\n    return new UpdateCmdRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UploadMsgReq_Type } from './types';\n\nexport default class UploadMsgReq extends BaseMsg {\n  public msg?: UploadMsgReq_Type\n  constructor(msg?: UploadMsgReq_Type) {\n    super('PTP.Msg.UploadMsgReq', msg);\n    this.setCommandId(ActionCommands.CID_UploadMsgReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UploadMsgReq_Type {\n    return new UploadMsgReq().decode(pdu.body());\n  }\n}\n","// DO NOT EDIT\nimport BaseMsg from '../BaseMsg';\nimport type { Pdu } from '../BaseMsg';\nimport type { PbMsg_Type } from './types';\n\nexport default class PbMsg extends BaseMsg {\n  public msg?: PbMsg_Type\n  constructor(msg?: PbMsg_Type) {\n    super('PTP.Common.PbMsg', msg);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): PbMsg_Type {\n    return new PbMsg().decode(pdu.body());\n  }\n}\n","// DO NOT EDIT\nimport BaseMsg from '../BaseMsg';\nimport type { Pdu } from '../BaseMsg';\nimport type { PbUser_Type } from './types';\n\nexport default class PbUser extends BaseMsg {\n  public msg?: PbUser_Type\n  constructor(msg?: PbUser_Type) {\n    super('PTP.Common.PbUser', msg);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): PbUser_Type {\n    return new PbUser().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadUserRes_Type } from './types';\n\nexport default class DownloadUserRes extends BaseMsg {\n  public msg?: DownloadUserRes_Type\n  constructor(msg?: DownloadUserRes_Type) {\n    super('PTP.User.DownloadUserRes', msg);\n    this.setCommandId(ActionCommands.CID_DownloadUserRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadUserRes_Type {\n    return new DownloadUserRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UploadUserReq_Type } from './types';\n\nexport default class UploadUserReq extends BaseMsg {\n  public msg?: UploadUserReq_Type\n  constructor(msg?: UploadUserReq_Type) {\n    super('PTP.User.UploadUserReq', msg);\n    this.setCommandId(ActionCommands.CID_UploadUserReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UploadUserReq_Type {\n    return new UploadUserReq().decode(pdu.body());\n  }\n}\n","import { CONTENT_TYPES_WITH_PREVIEW } from '../config';\nimport { pause } from './schedulers';\n\n// Polyfill for Safari: `File` is not available in web worker\nif (typeof File === 'undefined') {\n  // eslint-disable-next-line no-global-assign, no-restricted-globals, func-names\n  self.File = class extends Blob {\n    name: string;\n\n    constructor(fileBits: BlobPart[], fileName: string, options?: FilePropertyBag) {\n      if (options) {\n        const { type, ...rest } = options;\n        super(fileBits, { type });\n        Object.assign(this, rest);\n      } else {\n        super(fileBits);\n      }\n\n      this.name = fileName;\n    }\n  } as typeof File;\n}\n\nexport function dataUriToBlob(dataUri: string) {\n  const arr = dataUri.split(',');\n  const mime = arr[0].match(/:(.*?);/)![1];\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n\n  return new Blob([u8arr], { type: mime });\n}\n\nexport function blobToDataUri(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = (e: ProgressEvent<FileReader>) => {\n      const { result } = e.target || {};\n      if (typeof result === 'string') {\n        resolve(result);\n      }\n\n      reject(new Error('Failed to read blob'));\n    };\n\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n}\n\n\nexport function blobToBuffer(blob: Blob): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = (e: ProgressEvent<FileReader>) => {\n      const { result } = e.target || {};\n      if (typeof result === 'object' && result && result.byteLength > 9) {\n        resolve(Buffer.from(result));\n      }\n\n      reject(new Error('Failed to read blob'));\n    };\n\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(blob);\n  });\n}\n\nexport function blobToFile(blob: Blob, fileName: string) {\n  return new File([blob], fileName, {\n    lastModified: Date.now(),\n    type: blob.type,\n  });\n}\n\nexport function preloadImage(url: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n    img.src = url;\n  });\n}\n\nexport function preloadVideo(url: string): Promise<HTMLVideoElement> {\n  return new Promise((resolve, reject) => {\n    const video = document.createElement('video');\n    video.volume = 0;\n    video.onloadedmetadata = () => resolve(video);\n    video.onerror = reject;\n    video.src = url;\n  });\n}\n\nexport async function createPosterForVideo(url: string): Promise<string | undefined> {\n  const video = await preloadVideo(url);\n\n  return Promise.race([\n    pause(2000) as Promise<undefined>,\n    new Promise<string | undefined>((resolve, reject) => {\n      video.onseeked = () => {\n        if (!video.videoWidth || !video.videoHeight) {\n          resolve(undefined);\n        }\n\n        const canvas = document.createElement('canvas');\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        const ctx = canvas.getContext('2d')!;\n        ctx.drawImage(video, 0, 0);\n        resolve(canvas.toDataURL('image/jpeg'));\n      };\n      video.onerror = reject;\n      video.currentTime = Math.min(video.duration, 1);\n    }),\n  ]);\n}\n\nexport async function fetchBlob(blobUrl: string) {\n  const response = await fetch(blobUrl);\n  return response.blob();\n}\n\nexport async function fetchFile(blobUrl: string, fileName: string) {\n  const blob = await fetchBlob(blobUrl);\n  return blobToFile(blob, fileName);\n}\n\nexport function imgToCanvas(img: HTMLImageElement) {\n  const canvas = document.createElement('canvas');\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  const ctx = canvas.getContext('2d')!;\n  ctx.drawImage(img, 0, 0);\n\n  return canvas;\n}\n\nexport function imgToBlob(imageFile:File) {\n  const reader = new FileReader();\n  return new Promise<Blob>((resolve, reject) => {\n    reader.onload = () => {\n      const blob = new Blob([reader.result!], {type: imageFile.type});\n      resolve(blob);\n    };\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(imageFile);\n  });\n}\n\nexport function hasPreview(file: File) {\n  return CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n}\n\nexport function validateFiles(files: File[] | FileList | null): File[] | undefined {\n  if (!files?.length) {\n    return undefined;\n  }\n  return Array.from(files).map(fixMovMime).filter((file) => file.size);\n}\n\n// .mov MIME type not reported sometimes https://developer.mozilla.org/en-US/docs/Web/API/File/type#sect1\nfunction fixMovMime(file: File) {\n  const ext = file.name.split('.').pop()!;\n  if (!file.type && ext.toLowerCase() === 'mov') {\n    return new File([file], file.name, { type: 'video/quicktime' });\n  }\n  return file;\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { AuthLoginReq_Type } from './types';\n\nexport default class AuthLoginReq extends BaseMsg {\n  public msg?: AuthLoginReq_Type\n  constructor(msg?: AuthLoginReq_Type) {\n    super('PTP.Auth.AuthLoginReq', msg);\n    this.setCommandId(ActionCommands.CID_AuthLoginReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): AuthLoginReq_Type {\n    return new AuthLoginReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { AuthNativeReq_Type } from './types';\n\nexport default class AuthNativeReq extends BaseMsg {\n  public msg?: AuthNativeReq_Type\n  constructor(msg?: AuthNativeReq_Type) {\n    super('PTP.Auth.AuthNativeReq', msg);\n    this.setCommandId(ActionCommands.CID_AuthNativeReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): AuthNativeReq_Type {\n    return new AuthNativeReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { InitAppRes_Type } from './types';\n\nexport default class InitAppRes extends BaseMsg {\n  public msg?: InitAppRes_Type\n  constructor(msg?: InitAppRes_Type) {\n    super('PTP.Auth.InitAppRes', msg);\n    this.setCommandId(ActionCommands.CID_InitAppRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): InitAppRes_Type {\n    return new InitAppRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateProfileReq_Type } from './types';\n\nexport default class UpdateProfileReq extends BaseMsg {\n  public msg?: UpdateProfileReq_Type\n  constructor(msg?: UpdateProfileReq_Type) {\n    super('PTP.Auth.UpdateProfileReq', msg);\n    this.setCommandId(ActionCommands.CID_UpdateProfileReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateProfileReq_Type {\n    return new UpdateProfileReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateProfileRes_Type } from './types';\n\nexport default class UpdateProfileRes extends BaseMsg {\n  public msg?: UpdateProfileRes_Type\n  constructor(msg?: UpdateProfileRes_Type) {\n    super('PTP.Auth.UpdateProfileRes', msg);\n    this.setCommandId(ActionCommands.CID_UpdateProfileRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateProfileRes_Type {\n    return new UpdateProfileRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateUsernameReq_Type } from './types';\n\nexport default class UpdateUsernameReq extends BaseMsg {\n  public msg?: UpdateUsernameReq_Type\n  constructor(msg?: UpdateUsernameReq_Type) {\n    super('PTP.Auth.UpdateUsernameReq', msg);\n    this.setCommandId(ActionCommands.CID_UpdateUsernameReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateUsernameReq_Type {\n    return new UpdateUsernameReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UpdateUsernameRes_Type } from './types';\n\nexport default class UpdateUsernameRes extends BaseMsg {\n  public msg?: UpdateUsernameRes_Type\n  constructor(msg?: UpdateUsernameRes_Type) {\n    super('PTP.Auth.UpdateUsernameRes', msg);\n    this.setCommandId(ActionCommands.CID_UpdateUsernameRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UpdateUsernameRes_Type {\n    return new UpdateUsernameRes().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UploadProfilePhotoReq_Type } from './types';\n\nexport default class UploadProfilePhotoReq extends BaseMsg {\n  public msg?: UploadProfilePhotoReq_Type\n  constructor(msg?: UploadProfilePhotoReq_Type) {\n    super('PTP.Auth.UploadProfilePhotoReq', msg);\n    this.setCommandId(ActionCommands.CID_UploadProfilePhotoReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UploadProfilePhotoReq_Type {\n    return new UploadProfilePhotoReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UploadProfilePhotoRes_Type } from './types';\n\nexport default class UploadProfilePhotoRes extends BaseMsg {\n  public msg?: UploadProfilePhotoRes_Type\n  constructor(msg?: UploadProfilePhotoRes_Type) {\n    super('PTP.Auth.UploadProfilePhotoRes', msg);\n    this.setCommandId(ActionCommands.CID_UploadProfilePhotoRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UploadProfilePhotoRes_Type {\n    return new UploadProfilePhotoRes().decode(pdu.body());\n  }\n}\n","import {DEBUG} from '../../../config';\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport {getActionCommandsName} from \"../../../lib/ptp/protobuf/ActionCommands\";\nimport Account from '../../share/Account';\nimport {AuthLoginReq} from \"../../../lib/ptp/protobuf/PTPAuth\";\n\nexport enum BotWebSocketNotifyAction{\n  onConnectionStateChanged,\n  onData,\n}\n\nexport type BotWebSocketNotify = {\n  action: BotWebSocketNotifyAction;\n  payload: any;\n};\n\nexport enum BotWebSocketState {\n  connect_none,\n  closed,\n  connect_error,\n  connecting,\n  connected,\n  logged,\n}\n\nexport type MsgHandleType = (msgConnId:number,notifies:BotWebSocketNotify[])=>void\n\nlet reconnect_cnt = 0;\nlet seq_num = 0;\nlet clients: Record<string, BotWebSocket> = {};\n\nlet currentMsgConn: BotWebSocket | null = null;\n\nexport default class BotWebSocket {\n  private autoConnect: boolean;\n  public client: WebSocket | any | undefined;\n  private __rev_msg_map: Record<number, Pdu>;\n  private __sending_msg_map: Record<number, boolean>;\n  private __msgHandler?: MsgHandleType;\n  private sendMsgTimer?: NodeJS.Timeout;\n  private state: BotWebSocketState;\n  private msgConnId: number;\n  private wsUrl?: string;\n  private session?: string;\n  constructor(msgConnId: number) {\n    currentMsgConn = this;\n    this.msgConnId = msgConnId;\n    this.autoConnect = true;\n    this.sendMsgTimer = undefined;\n    this.state = BotWebSocketState.connect_none;\n    this.__rev_msg_map = {};\n    this.__sending_msg_map = {};\n  }\n  setWsUrl(wsUrl:string) {\n    this.wsUrl = wsUrl;\n  }\n  setSession(session:string) {\n    this.session = session;\n  }\n  getState() {\n    return this.state;\n  }\n  getMsgConnId(){\n    return this.msgConnId;\n  }\n\n  getAutoConnect() {\n    return this.autoConnect;\n  }\n  setAutoConnect(autoConnect: boolean) {\n    this.autoConnect = autoConnect;\n  }\n\n  async close() {\n    this.notifyState(BotWebSocketState.closed);\n    if (this.client && this.isConnect()) {\n      this.client.close();\n    }\n  }\n  connect() {\n    if (!this.wsUrl ) {\n      console.error('no ws url');\n      return;\n    }\n    if (\n      this.state === BotWebSocketState.logged ||\n      this.state === BotWebSocketState.connecting ||\n      this.state === BotWebSocketState.connected\n    ) {\n      return;\n    }\n    try {\n      console.log('connecting', this.msgConnId,this.wsUrl);\n      this.notifyState(BotWebSocketState.connecting);\n      this.client = new WebSocket(`${this.wsUrl}`);\n      this.client.binaryType = 'arraybuffer';\n      this.client.onopen = this.onConnected.bind(this);\n      this.client.onmessage = this.onData.bind(this);\n      this.client.onclose = this.onClose.bind(this);\n    } catch (e) {\n      console.error('connect error', e);\n      this.reconnect(this.getAutoConnect());\n    }\n  }\n\n  waitForMsgServerState(\n    state: BotWebSocketState,\n    timeout: number = 10000,\n    startTime: number = 0\n  ) {\n    const timeout_ = 500;\n    return new Promise<boolean>((resolve) => {\n      setTimeout(() => {\n        if (this.getState() === state) {\n          resolve(true);\n        } else if (timeout > 0 && startTime >= timeout) {\n          //console.debug('waitForMsgServerState timeout', startTime, timeout);\n          resolve(false);\n        } else {\n          startTime += timeout_;\n          // eslint-disable-next-line promise/catch-or-return\n          this.waitForMsgServerState(state, timeout, startTime).then(resolve);\n        }\n      }, timeout_);\n    });\n  }\n\n  waitTime(timeout: number = 1000, startTime: number = 0) {\n    const timeout_ = 1000;\n    return new Promise<void>((resolve) => {\n      setTimeout(() => {\n        if (startTime >= timeout) {\n          resolve();\n        } else {\n          startTime += timeout_;\n          // eslint-disable-next-line promise/catch-or-return\n          this.waitTime(timeout, startTime).then(resolve);\n        }\n      }, timeout_);\n    });\n  }\n\n  setMsgHandler(msgHandler: MsgHandleType) {\n    this.__msgHandler = msgHandler;\n  }\n\n  onConnected() {\n    reconnect_cnt = 0\n    console.log(\"[onConnected account]\",this.getMsgConnId())\n    this.notifyState(BotWebSocketState.connected);\n    this.login().catch(console.error)\n  }\n  async login(){\n    await this.sendPduWithCallback(new AuthLoginReq({\n      clientInfo:Account.getCurrentAccount()!.getClientInfo(),\n      sign:Account.getCurrentAccount()?.getSession()!\n    }).pack())\n    console.log(\"[onLogin]\")\n    this.notifyState(BotWebSocketState.logged);\n  }\n  notify(notifyList:BotWebSocketNotify[]) {\n    if (this.__msgHandler) {\n      this.__msgHandler(this.msgConnId,notifyList);\n    }\n  }\n  onData(e: { data: Buffer }) {\n    if(e.data && e.data.byteLength && e.data.byteLength > 16){\n      let pdu = new Pdu(Buffer.from(e.data));\n      const seq_num = pdu.getSeqNum();\n      if(DEBUG){\n        console.log(\"[onData]\",seq_num,pdu.getCommandId(),getActionCommandsName(pdu.getCommandId()))\n      }\n      if(this.__sending_msg_map[seq_num]){\n        this.__rev_msg_map[seq_num] = pdu\n        delete this.__sending_msg_map[seq_num];\n      }else{\n        if (this.__msgHandler) {\n          this.notify([\n            {\n              action: BotWebSocketNotifyAction.onData,\n              payload: pdu,\n            },\n          ]);\n        }\n      }\n    }\n\n  }\n  notifyState(state: BotWebSocketState) {\n    this.state = state;\n    this.notify([\n      {\n        action: BotWebSocketNotifyAction.onConnectionStateChanged,\n        payload: {\n          BotWebSocketState: state,\n        },\n      },\n    ]);\n  }\n  onClose() {\n    if (this.sendMsgTimer) {\n      clearTimeout(this.sendMsgTimer);\n    }\n    console.log('onClose', this.autoConnect);\n    this.notifyState(BotWebSocketState.closed);\n    this.reconnect(this.getAutoConnect());\n  }\n\n  reconnect(autoConnect: boolean) {\n    if (autoConnect) {\n      setTimeout(() => {\n        if (\n          this.state === BotWebSocketState.closed ||\n          this.state === BotWebSocketState.connect_error\n        ) {\n          if (reconnect_cnt > 20) {\n            reconnect_cnt = 0;\n          }\n          if (reconnect_cnt < 5) {\n            reconnect_cnt += 1;\n          } else {\n            reconnect_cnt += 2;\n          }\n          console.log(\"[reconnect_cnt]\",reconnect_cnt)\n          this.connect();\n        }\n      }, 1000 * (reconnect_cnt + 1));\n    }\n  }\n\n  static getInstance(msgConnId: number): BotWebSocket {\n    if (!clients[msgConnId]) {\n      clients[msgConnId] = new BotWebSocket(msgConnId);\n    }\n    return clients[msgConnId];\n  }\n\n  waitForMsgCallback(\n    seq_num: number,\n    timeout: number = 5000,\n    startTime: number = 0\n  ) {\n    return new Promise<Pdu>((resolve, reject) => {\n      setTimeout(() => {\n        if (this.__rev_msg_map[seq_num]) {\n          const res = this.__rev_msg_map[seq_num];\n          delete this.__rev_msg_map[seq_num];\n          resolve(res);\n        } else {\n          if (startTime >= timeout) {\n            reject('TIMEOUT');\n          } else {\n            startTime += 200;\n            if (this.isConnect()) {\n              this.waitForMsgCallback(seq_num, timeout, startTime)\n                .then(resolve)\n                .catch(reject);\n            }\n          }\n        }\n      }, 200);\n    });\n  }\n\n  send(data:Buffer|Uint8Array){\n    this.client.send(data);\n  }\n\n  sendPduWithCallback(\n    pdu:Pdu,\n    timeout: number = 10000\n  ) {\n    seq_num += 1;\n    if(seq_num > 100000){\n      seq_num = 1\n    }\n    pdu.updateSeqNo(seq_num)\n    return new Promise<Pdu>((resolve, reject) => {\n      if (this.isConnect()) {\n        if(DEBUG){\n          console.log(\"[sendPduWithCallback]\",pdu.getSeqNum(),pdu.getCommandId(),getActionCommandsName(pdu.getCommandId()))\n        }\n        this.__sending_msg_map[pdu.getSeqNum()] = true;\n        this.send(pdu.getPbData())\n        this.waitForMsgCallback(pdu.getSeqNum(), timeout)\n          .then(resolve)\n          .catch(reject);\n      } else {\n        this.reconnect(this.autoConnect);\n        reject('BotWebSocketState is not connected');\n      }\n    });\n  }\n\n  isLogged() {\n    return [BotWebSocketState.logged].includes(this.state);\n  }\n  isConnect() {\n    return [BotWebSocketState.connected, BotWebSocketState.logged].includes(\n      this.state\n    );\n  }\n  async destroy(){\n    this.client.close()\n    this.setAutoConnect(false)\n    await this.waitForMsgServerState(BotWebSocketState.closed)\n  }\n}\n","\nimport {\n  ApiAction, ApiAudio, ApiBotInfo,\n  ApiContact,\n  ApiDocument,\n  ApiFormattedText, ApiGame, ApiInvoice,\n  ApiKeyboardButtons, ApiLocation,\n  ApiMessage,\n  ApiPhoto, ApiPoll,\n  ApiSticker, ApiUpdate, ApiUser,\n  ApiVideo, ApiVoice, ApiWebPage, OnApiUpdate\n} from \"../../api/types\";\nimport { GenMsgIdReq, GenMsgIdRes } from \"../../lib/ptp/protobuf/PTPMsg\";\nimport {currentTs} from \"../share/utils/utils\";\nimport {handleBotCmdText, handleMessageTextCode} from \"./msgHelper\";\nimport MsgWorker from \"./MsgWorker\";\n\nexport default class ChatMsg {\n  static _apiUpdate:OnApiUpdate;\n  static genMessageId:(isLocal?:boolean)=>number;\n  static isWorker:boolean = false\n  private chatId: string;\n  private id?:number\n  private inlineButtons?:ApiKeyboardButtons\n  private senderId?:string\n  private isOutgoing?:boolean\n  private botInfo?:ApiBotInfo\n  private content?:{\n    text?: ApiFormattedText;\n    photo?: ApiPhoto;\n    video?: ApiVideo;\n    document?: ApiDocument;\n    sticker?: ApiSticker;\n    contact?: ApiContact;\n    poll?: ApiPoll;\n    action?: ApiAction;\n    webPage?: ApiWebPage;\n    audio?: ApiAudio;\n    voice?: ApiVoice;\n    invoice?: ApiInvoice;\n    location?: ApiLocation;\n    game?: ApiGame;\n  }\n  constructor(chatId:string) {\n    this.chatId = chatId\n  }\n  setBotInfo(botInfo:ApiBotInfo){\n    this.botInfo = botInfo\n  }\n  async updateText(id:number,text:string){\n    return this.update(id,{\n      content: {\n        text: {\n          text\n        }\n      }\n    })\n  }\n  setInlineButtons(inlineButtons:ApiKeyboardButtons){\n    this.inlineButtons = inlineButtons\n    return this\n  }\n  setThinking(){\n    return this.setText(\"...\")\n  }\n  setText(text:string){\n    let {content} = this;\n    if(!content){\n      content = {\n        text:{\n          text:\"\"\n        }\n      }\n    }\n    if(!content.text){\n      content = {\n        ...content,\n        text:{\n          text:\"\"\n        }\n      }\n    }\n    this.content = {\n      ...content,\n      text:{\n        ...content.text,\n        text,\n      }\n    }\n    return this\n  }\n\n  setSenderId(senderId:string){\n    this.senderId = senderId\n    return this\n  }\n\n  async genMsgId(isLocal?:boolean){\n    return ChatMsg.genMessageId(isLocal)\n  }\n\n  async reply(){\n    let {id,chatId,senderId,isOutgoing,content,inlineButtons} = this;\n    if(!senderId){\n      senderId = chatId\n    }\n    if(!isOutgoing){\n      isOutgoing = false\n    }\n    if(!id){\n      id = await this.genMsgId()\n    }\n    let message:ApiMessage = {\n      chatId,\n      id,\n      senderId,\n      isOutgoing,\n      date:currentTs(),\n      inlineButtons,\n      content:content!,\n    }\n    return this.sendNewMessage(message)\n  }\n\n  async updateMessageSendSucceeded(localId:number,message:ApiMessage){\n    ChatMsg.apiUpdate({\n      '@type': \"updateMessageSendSucceeded\",\n      localId,\n      chatId: this.chatId,\n      message: message\n    });\n    return message\n  }\n  async update(id:number,message:Partial<ApiMessage>){\n    ChatMsg.apiUpdate({\n      '@type': \"updateMessage\",\n      id,\n      chatId:this.chatId,\n      message,\n    });\n    return message\n  }\n  async sendNewMessage(message:ApiMessage){\n    const id = message.id\n    if(!id){\n      message.id = await ChatMsg.genMessageId()\n    }\n    ChatMsg.apiUpdate({\n      '@type': \"newMessage\",\n      chatId:this.chatId,\n      id,\n      message,\n      shouldForceReply:false\n    });\n    return message\n  }\n\n  static buildDefaultChat(user:ApiUser){\n    return {\n      \"id\": user.id,\n      \"title\":  user.firstName,\n      \"type\": \"chatTypePrivate\",\n      \"isMuted\": false,\n      \"isMin\": false,\n      \"hasPrivateLink\": false,\n      \"isSignaturesShown\": false,\n      \"isVerified\": true,\n      \"isJoinToSend\": true,\n      \"isJoinRequest\": true,\n      lastMessage:{\n        id:0,\n        chatId:user.id,\n        isOutgoing:false,\n        date:Math.ceil(+(new Date)/1000),\n        content:{\n          action:{\n            type:\"chatCreate\",\n            text:\"\",\n          }\n        }\n      },\n      \"isForum\": false,\n      \"isListed\": true,\n      \"settings\": {\n        \"isAutoArchived\": false,\n        \"canReportSpam\": false,\n        \"canAddContact\": false,\n        \"canBlockContact\": false\n      },\n      \"accessHash\": \"\"\n    }\n  }\n\n  static buildMsgHistoryClear(chatId:string):ApiMessage{\n    return {\n      id: 0,\n      chatId,\n      isOutgoing: false,\n      date: currentTs(),\n      content: {\n        action: {\n          text: \"历史记录已清空\",\n          type: 'historyClear',\n          translationValues:[],\n        }\n      }\n    }\n  }\n  static apiUpdate(update:ApiUpdate){\n    ChatMsg._apiUpdate(update)\n  }\n  static setApiUpdate(apiUpdate:OnApiUpdate,genMessageId:any){\n    ChatMsg._apiUpdate = apiUpdate\n    ChatMsg.genMessageId = genMessageId\n  }\n}\n","import {ApiAttachment, ApiBotInfo, ApiChat, ApiChatFolder, ApiMessage, ApiUpdate, OnApiUpdate} from \"../../api/types\";\nimport {CLOUD_WS_URL, LOCAL_MESSAGE_MIN_ID, MEDIA_CACHE_NAME_WAI} from \"../../config\";\nimport {DownloadMsgRes, GenMsgIdReq, GenMsgIdRes, SendBotMsgRes, UploadMsgReq} from \"../../lib/ptp/protobuf/PTPMsg\";\nimport {getNextLocalMessageId} from \"../../api/gramjs/apiBuilders/messages\";\nimport {\n  Pdu,\n  popByteBuffer,\n  readBytes,\n  readInt16,\n  readInt32,\n  toUint8Array,\n  wrapByteBuffer,\n  writeBytes,\n  writeInt16,\n  writeInt32\n} from \"../../lib/ptp/protobuf/BaseMsg\";\nimport {PbMsg, PbUser} from \"../../lib/ptp/protobuf/PTPCommon\";\nimport {account} from \"../../api/gramjs/methods/client\";\nimport {DownloadUserRes, UploadUserReq} from \"../../lib/ptp/protobuf/PTPUser\";\nimport {sleep} from \"../../lib/gramjs/Helpers\";\nimport {Api as GramJs} from \"../../lib/gramjs\";\nimport {blobToDataUri, fetchBlob} from \"../../util/files\";\nimport * as cacheApi from \"../../util/cacheApi\";\nimport {Type} from \"../../util/cacheApi\";\nimport {DownloadRes} from \"../../lib/ptp/protobuf/PTPFile\";\nimport {uploadFileCache} from \"../../lib/gramjs/client/uploadFile\";\nimport BotWebSocket, {BotWebSocketNotifyAction, BotWebSocketState} from \"./bot/BotWebSocket\";\nimport Account from \"../share/Account\";\nimport {ActionCommands} from \"../../lib/ptp/protobuf/ActionCommands\";\nimport ChatMsg from \"./ChatMsg\";\nimport {InitAppRes} from \"../../lib/ptp/protobuf/PTPAuth\";\n\nlet messageIds:number[] = [];\n\nexport default class MsgWorker {\n  private botInfo?: ApiBotInfo;\n  private chat: ApiChat;\n  private msgSend: ApiMessage;\n  private media: GramJs.TypeInputMedia | undefined;\n  private attachment?: ApiAttachment;\n  private chatMsg: ChatMsg;\n  constructor({\n      chat,\n      msgSend,\n      attachment,\n      media,\n      botInfo,\n    }:{\n    chat:ApiChat;\n    media: GramJs.TypeInputMedia | undefined;\n    msgSend:ApiMessage;\n    attachment?:ApiAttachment;\n    botInfo?:ApiBotInfo;\n  }) {\n    this.botInfo = botInfo;\n    this.chat = chat;\n    this.media = media;\n    this.msgSend = msgSend;\n    this.attachment = attachment;\n    this.chatMsg = new ChatMsg(chat.id)\n  }\n  static async handleSendBotMsgRes(pdu:Pdu){\n    const {reply,msgId,message,chatId} = SendBotMsgRes.parseMsg(pdu)\n    console.log(\"[SendBotMsgRes]\",reply,message)\n    if(reply){\n      if(msgId){\n        await new ChatMsg(chatId!).update(msgId,{\n          content:{\n            text:{\n              text:reply\n            }\n          }\n        })\n      }else{\n        await new ChatMsg(chatId!).setText(reply).reply();\n      }\n    }\n    if(message){\n      if(msgId){\n        await new ChatMsg(chatId!).update(msgId,message as ApiMessage)\n      }else{\n        await new ChatMsg(chatId!).sendNewMessage(message as ApiMessage);\n      }\n    }\n  }\n  static async handleInitAppRes(pdu:Pdu){\n    let {chats,messages,chatFolders} = InitAppRes.parseMsg(pdu)\n    if(chats){\n      chats = JSON.parse(chats)\n    }\n    if(messages){\n      messages = JSON.parse(messages)\n    }\n    if(chatFolders){\n      chatFolders = JSON.parse(chatFolders)\n    }\n    for (let i = 0; i < chats?.length; i++) {\n      if (chats != null) {\n        const chat = chats[i] as ApiChat;\n        ChatMsg.apiUpdate({\n          \"@type\":\"updateChat\",\n          id:chat.id,\n          chat\n        })\n      }\n    }\n\n    for (let i = 0; i < chatFolders?.length; i++) {\n      if (chatFolders != null) {\n        const folder = chatFolders[i] as ApiChatFolder;\n        ChatMsg.apiUpdate({\n          \"@type\":\"updateChatFolder\",\n          id:folder.id,\n          folder\n        })\n      }\n    }\n\n    for (let i = 0; i < messages?.length; i++) {\n      if (messages != null) {\n        const message = messages[i] as ApiMessage;\n        await new ChatMsg(message.chatId).sendNewMessage(message)\n      }\n    }\n    console.log(\"handleInitAppRes\",{chats,messages})\n  }\n  static async handleRecvMsg(pdu:Pdu){\n    switch (pdu.getCommandId()) {\n      case ActionCommands.CID_SendBotMsgRes:\n        await MsgWorker.handleSendBotMsgRes(pdu);\n        break\n      case ActionCommands.CID_InitAppRes:\n        await MsgWorker.handleInitAppRes(pdu);\n        break\n    }\n  }\n\n  static async createWsBot(accountId:number,botApi?:string){\n    if(botApi && botApi.startsWith(\"ws\")){\n      const botWs = BotWebSocket.getInstance(accountId)\n      if(!botWs.isLogged()){\n        botWs.setMsgHandler(async (msgConnId, notifies)=>{\n          for (let i = 0; i < notifies.length; i++) {\n            const {action,payload} = notifies[i]\n            switch (action){\n              case BotWebSocketNotifyAction.onConnectionStateChanged:\n                switch (payload.BotWebSocketState){\n                  case BotWebSocketState.connected:\n                    break;\n                  case BotWebSocketState.closed:\n                    break;\n                }\n                break\n              case BotWebSocketNotifyAction.onData:\n                console.log(\"[onData]\",{accountId,payload})\n                await MsgWorker.handleRecvMsg(payload)\n                break\n            }\n          }\n        })\n        botWs.setWsUrl(botApi ? botApi : CLOUD_WS_URL)\n        botWs.setSession(Account.getCurrentAccount()?.getSession()!)\n        if(!botWs.isConnect()){\n          botWs.connect();\n        }\n        if(botWs.isConnect() && !botWs.isLogged()){\n          await botWs.login();\n        }\n        await botWs.waitForMsgServerState(BotWebSocketState.logged)\n      }\n    }\n  }\n  static async beforeUploadUserReq(pdu:Pdu){\n    const {users,...res} = UploadUserReq.parseMsg(pdu)\n    if(users){\n      for (let i = 0; i < users?.length; i++) {\n        if (users) {\n          if(\n            (users.length === 1 && users[0].user!.photos && users[0].user!.photos.length > 0 )\n          ){\n            const photo = users[0].user!.photos[0];\n            let id;\n            if(photo && photo.id){\n              id = photo.id;\n            }\n            if(id){\n              let arrayBuffer = await cacheApi.fetch(MEDIA_CACHE_NAME_WAI, id, Type.ArrayBuffer);\n              if(arrayBuffer){\n                // @ts-ignore\n                const res = DownloadRes.parseMsg(new Pdu(Buffer.from(arrayBuffer)));\n                if(!res || !res.file){\n                  break\n                }\n                await uploadFileCache(res.file!)\n              }\n            }\n          }\n          const {time,user} = users[i]\n          let buf = Buffer.from(new PbUser(user!).pack().getPbData())\n          const password = \"Wai\" + time!.toString();\n          // console.log(\"accountId\",account.getAccountId())\n          // console.log(\"entropy\",await Account.getCurrentAccount()!.getEntropy())\n          const cipher = await Account.getCurrentAccount()!.encryptData(buf,password)\n          const bb = popByteBuffer();\n          writeInt32(bb, cipher?.length + 4 + 4 + 4 + 2);\n          writeInt16(bb, 1);\n          writeInt32(bb, time!);\n          writeInt32(bb, 0);\n          writeBytes(bb, cipher);\n          users[i].buf = Buffer.from(toUint8Array(bb));\n          users[i].user = undefined\n          // console.log(\"userId\",user?.id)\n          // console.log(\"buf\",buf)\n          // console.log(\"cipher\",cipher)\n          // console.log(\"msg buf\",users[i].buf)\n        }\n      }\n    }\n\n    return new UploadUserReq({users,...res}).pack()\n  }\n  static async afterDownloadUserReq(pdu:Pdu){\n    const {users,...res} = DownloadUserRes.parseMsg(pdu)\n    if(users){\n      for (let i = 0; i < users?.length; i++) {\n        if (users) {\n          const {buf} = users[i]\n          const bbDecode = wrapByteBuffer(Buffer.from(buf!))\n          const len = readInt32(bbDecode);\n          const encrypt = readInt16(bbDecode) === 1;\n          const time = readInt32(bbDecode);\n          const reverse = readInt32(bbDecode);\n          let cipher = readBytes(bbDecode,len - 14);\n          const password = \"Wai\"+time.toString();\n          // console.log(\"encode\",Buffer.from(buf!).toString(\"hex\"))\n          // console.log(\"cipher\",Buffer.from(cipher).toString(\"hex\"))\n          const buf2 = await Account.getCurrentAccount()!.decryptData(Buffer.from(cipher),password)\n          // console.log(\"userId\",user?.id)\n          // console.log(\"buf\",buf)\n          // console.log(\"cipher\",cipher)\n          // console.log(\"msg buf\",user)\n          users[i].user = PbUser.parseMsg(new Pdu(Buffer.from(buf2)));\n          users[i].buf = undefined\n        }\n      }\n    }\n\n    return Buffer.from(new DownloadUserRes({...res,users}).pack().getPbData())\n  }\n  static async afterDownloadMsgReq(pdu:Pdu){\n    const {messages,...res} = DownloadMsgRes.parseMsg(pdu)\n    if(messages){\n      for (let i = 0; i < messages?.length; i++) {\n        const {buf} = messages[i]\n        const bbDecode = wrapByteBuffer(Buffer.from(buf!))\n        const len = readInt32(bbDecode);\n        const encrypt = readInt16(bbDecode) === 1;\n        const time = readInt32(bbDecode);\n        const reverse = readInt32(bbDecode);\n        let cipher = readBytes(bbDecode,len - 14);\n        const password = \"Wai\"+time.toString();\n        // console.log(\"encode\",Buffer.from(buf!).toString(\"hex\"))\n        // console.log(\"cipher\",Buffer.from(cipher).toString(\"hex\"))\n        const buf2 = await Account.getCurrentAccount()!.decryptData(Buffer.from(cipher),password)\n        messages[i].message = PbMsg.parseMsg(new Pdu(Buffer.from(buf2)))\n        messages[i].buf = undefined\n        // console.log(\"userId\",user?.id)\n        // console.log(\"buf\",buf)\n        // console.log(\"cipher\",cipher)\n        // console.log(\"msg buf\",users[i].buf)\n      }\n    }\n    return Buffer.from(new DownloadMsgRes({...res,messages}).pack().getPbData())\n  }\n  static async beforeUploadMsgReq(pdu:Pdu){\n    const {messages,...res} = UploadMsgReq.parseMsg(pdu)\n\n    if(messages){\n      if(messages.length === 1){\n        const {photo,voice,audio,document} = messages[0].message!.content;\n        let id;\n        if(photo && photo.id){\n          id = photo.id;\n        }else if(voice && voice.id){\n          id = voice.id;\n        }else if(audio && audio.id){\n          id = audio.id;\n        }else if(document && document.id){\n          id = document.id;\n        }\n        if(id){\n          let arrayBuffer = await cacheApi.fetch(MEDIA_CACHE_NAME_WAI, id, Type.ArrayBuffer);\n\n          if(arrayBuffer){\n            // @ts-ignore\n            const {file} = DownloadRes.parseMsg(new Pdu(Buffer.from(arrayBuffer)));\n            await uploadFileCache(file!)\n          }\n        }\n      }\n      for (let i = 0; i < messages?.length; i++) {\n        const {time,message} = messages[i]\n        let buf = Buffer.from(new PbMsg(message!).pack().getPbData())\n        const password = \"Wai\"+time!.toString();\n        const cipher = await Account.getCurrentAccount()!.encryptData(buf,password)\n        const bb = popByteBuffer();\n        writeInt32(bb, cipher?.length + 4 + 4 + 4 + 2);\n        writeInt16(bb, 1);\n        writeInt32(bb, time!);\n        writeInt32(bb, 0);\n        writeBytes(bb, cipher);\n        messages[i].buf = Buffer.from(toUint8Array(bb));\n        messages[i].message = undefined\n        // console.log(\"buf\",buf)\n        // console.log(\"cipher\",cipher)\n        // console.log(\"msg buf\",messages[i].buf)\n      }\n    }\n    return new UploadMsgReq({messages,...res}).pack()\n  }\n  static async genMessageId(isLocal?:boolean):Promise<number>{\n    let msgId = isLocal ? getNextLocalMessageId() : parseInt(getNextLocalMessageId().toString()) % LOCAL_MESSAGE_MIN_ID;\n    if(messageIds.length > 10){\n      messageIds = messageIds.slice(messageIds.length - 10)\n    }\n    if(messageIds.includes(msgId)){\n      await sleep(100);\n      return MsgWorker.genMessageId(isLocal);\n    }else{\n      messageIds.push(msgId);\n      return msgId\n    }\n  }\n\n  static async genMsgId(pdu:Pdu):Promise<Uint8Array>{\n    const {isLocal} = GenMsgIdReq.parseMsg(pdu)\n    return new GenMsgIdRes({messageId:await MsgWorker.genMessageId(isLocal)}).pack().getPbData()\n  }\n\n  static getMediaFileId(media: GramJs.TypeInputMedia | undefined){\n    let fileId;\n    //@ts-ignore\n    if (media && media!.file && media.file.id) {\n      //@ts-ignore\n      fileId = media!.file.id.toString()\n    }\n    return fileId\n  }\n\n  async handleMedia(){\n    const {msgSend,attachment} = this;\n    if(attachment){\n      let fileId = MsgWorker.getMediaFileId(this.media);\n\n      if (msgSend.content.photo || msgSend.content.document) {\n        const getPhotoInfo = async (attachment: ApiAttachment) => {\n          const dataUri = await blobToDataUri(await fetchBlob(attachment.thumbBlobUrl!));\n          const size = {\n            \"width\": attachment.quick!.width,\n            \"height\": attachment.quick!.height,\n          }\n          return {\n            dataUri, size\n          }\n        }\n\n        if (msgSend.content.document) {\n          msgSend.content.document.id = fileId\n\n          if (msgSend.content.document.mimeType.split(\"/\")[0] === \"image\") {\n            const {size, dataUri} = await getPhotoInfo(attachment);\n            msgSend.content.document.mediaType = \"photo\";\n            msgSend.content.document.previewBlobUrl = undefined;\n            msgSend.content.document.thumbnail = {\n              ...size,\n              dataUri\n            }\n            msgSend.content.document.mediaSize = size;\n          }\n        }\n\n        if(msgSend.content.photo){\n          const {size,dataUri} = await getPhotoInfo(attachment);\n          msgSend.content.photo = {\n            isSpoiler:msgSend.content.photo.isSpoiler,\n            id:fileId,\n            \"thumbnail\": {\n              ...size,\n              dataUri\n            },\n            \"sizes\": [\n              {\n                ...size,\n                \"type\": \"y\"\n              }\n            ],\n          }\n        }\n      }\n\n      if(msgSend.content.voice){\n        msgSend.content.voice.id = fileId\n      }\n      if(msgSend.content.audio){\n        msgSend.content.audio.id = fileId\n      }\n      this.msgSend = msgSend;\n    }\n  }\n\n  async processOutGoing(){\n    const {msgSend} = this;\n    const msgId = await MsgWorker.genMessageId();\n    let message = {\n      ...msgSend,\n      id:msgId,\n      isOutGoing:false,\n      sendingState: undefined,\n    };\n\n    ChatMsg.apiUpdate({\n      '@type': \"updateMessageSendSucceeded\",\n      chatId: msgSend.chatId,\n      localId:msgSend.id,\n      message,\n    })\n    this.msgSend = message\n  }\n\n  async process(){\n    const {msgSend,chat} = this;\n\n    try {\n      await this.handleMedia();\n      await this.processOutGoing();\n    }catch (error:any){\n      console.error(error)\n      ChatMsg.apiUpdate({\n        '@type': 'updateMessageSendFailed',\n        chatId: chat.id,\n        localId: msgSend.id,\n        error: error.message,\n      })\n    }\n  }\n}\n","import {LocalDb} from \"../../../api/gramjs/localDb\";\n\nexport default class LocalDatabase {\n  private db: LocalDb | undefined;\n  constructor() {}\n  init(db:LocalDb) {\n    this.db = db;\n  }\n\n  put(key: string, value: any) {\n    this.db!.cache[key] = value;\n  }\n\n  get(key: string) {\n    return this.db!.cache[key]\n  }\n\n  delete(key: string) {\n    delete this.db!.cache[key];\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { StopChatStreamReq_Type } from './types';\n\nexport default class StopChatStreamReq extends BaseMsg {\n  public msg?: StopChatStreamReq_Type\n  constructor(msg?: StopChatStreamReq_Type) {\n    super('PTP.Other.StopChatStreamReq', msg);\n    this.setCommandId(ActionCommands.CID_StopChatStreamReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): StopChatStreamReq_Type {\n    return new StopChatStreamReq().decode(pdu.body());\n  }\n}\n","import {CHATGPT_PROXY_API} from \"../../../config\";\nimport {PbChatGptModelConfig_Type} from \"../protobuf/PTPCommon/types\";\nimport Account from \"../../../worker/share/Account\";\nimport type {\n  ChatCompletionResponseMessage,\n  CreateChatCompletionRequest,\n  CreateChatCompletionResponse,\n} from \"openai\";\n\n\nexport type Message = ChatCompletionResponseMessage & {\n  date: string;\n  streaming?: boolean;\n};\n\nexport type ChatRequest = CreateChatCompletionRequest;\nexport type ChatResponse = CreateChatCompletionResponse;\n\nconst TIME_OUT_MS = 30000;\n\nconst ENABLE_GPT4 = true;\n\nexport const ALL_MODELS = [\n  {\n    name: \"gpt-4\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-0314\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-32k\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-4-32k-0314\",\n    available: ENABLE_GPT4,\n  },\n  {\n    name: \"gpt-3.5-turbo\",\n    available: true,\n  },\n  {\n    name: \"gpt-3.5-turbo-0301\",\n    available: true,\n  },\n];\n\nexport function isValidModel(name: string) {\n  return ALL_MODELS.some((m) => m.name === name && m.available);\n}\n\nexport function isValidNumber(x: number, min: number, max: number) {\n  return typeof x === \"number\" && x <= max && x >= min;\n}\n\n\nconst makeRequestParam = (\n  messages: Message[],\n  options?: {\n    filterBot?: boolean;\n    stream?: boolean;\n  },\n): ChatRequest => {\n  let sendMessages = messages.map((v) => ({\n    role: v.role,\n    content: v.content,\n  }));\n\n  if (options?.filterBot) {\n    sendMessages = sendMessages.filter((m) => m.role !== \"assistant\");\n  }\n\n  return {\n    model: \"gpt-3.5-turbo\",\n    messages: sendMessages,\n    stream: options?.stream,\n  };\n};\n\nfunction getHeaders(apiKey:string) {\n  let headers: Record<string, string> = {};\n  headers[\"token\"] = apiKey;\n  return headers;\n}\n\nexport function requestOpenaiClient(path: string,body:any) {\n  return fetch(CHATGPT_PROXY_API+\"/\" +path, {\n    method:\"POST\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n      \"Authorization\": \"Bearer \"+(Account.getCurrentAccount()?.getSession() || \"\"),\n    },\n    body: body && JSON.stringify(body),\n  })\n}\n\nexport async function requestChat(messages: Message[],apiKey:string) {\n  const req: ChatRequest = makeRequestParam(messages, { filterBot: true });\n\n  const res = await requestOpenaiClient(\"v1/chat/completions\",{\n    apiKey\n  });\n\n  try {\n    return (await res.json()) as ChatResponse;\n  } catch (error) {\n    console.error(\"[Request Chat] \", error, res.body);\n  }\n}\n\nexport function filterConfig(oldConfig: PbChatGptModelConfig_Type): Partial<PbChatGptModelConfig_Type> {\n  const config = Object.assign({}, oldConfig);\n\n  const validator: {\n    [k in keyof PbChatGptModelConfig_Type]: (x: PbChatGptModelConfig_Type[keyof PbChatGptModelConfig_Type]) => boolean;\n  } = {\n    model(x) {\n      return isValidModel(x as string);\n    },\n    max_tokens(x) {\n      return isValidNumber(x as number, 100, 4000);\n    },\n    presence_penalty(x) {\n      return isValidNumber(x as number, -2, 2);\n    },\n    temperature(x) {\n      return isValidNumber(x as number, 0, 2);\n    },\n  };\n\n  Object.keys(validator).forEach((k) => {\n    const key = k as keyof PbChatGptModelConfig_Type;\n    if (!validator[key](config[key])) {\n      delete config[key];\n    }\n  });\n\n  return config;\n}\n\nexport async function requestChatStream(\n  url:string,\n  options: {\n    body:Record<string, any>,\n    onMessage?: (message: string, done: boolean) => void;\n    onAbort?: (error: Error) => void;\n    onError?: (error: Error) => void;\n    onController?: (controller: AbortController) => void;\n  },\n) {\n  const req = makeRequestParam(options.body.messages, {\n    stream: options.body.stream,\n    filterBot:false,\n  });\n\n  console.log(\"[Request] \", options.body);\n\n  const controller = new AbortController();\n  const reqTimeoutId = setTimeout(() => controller.abort(), TIME_OUT_MS);\n  let isDone = false;\n  try {\n    const res = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        \"Authorization\": \"Bearer \"+(Account.getCurrentAccount()?.getSession() || \"\"),\n      },\n      body: JSON.stringify(options.body),\n      signal: options.body.stream ? controller.signal : undefined,\n    });\n\n    clearTimeout(reqTimeoutId);\n\n    let responseText = \"\";\n\n    const finish = () => {\n      isDone = true;\n      if(options.onMessage){\n        options.onMessage(responseText, true);\n      }\n      controller.abort();\n    };\n\n    if (res.ok) {\n      if(options.body.stream){\n        const reader = res.body?.getReader();\n        const decoder = new TextDecoder();\n\n        options.onController?.(controller);\n        while (true) {\n          // handle time out, will stop if no response in 10 secs\n          const resTimeoutId = setTimeout(() => finish(), TIME_OUT_MS);\n          const content = await reader?.read();\n          clearTimeout(resTimeoutId);\n          const text = decoder.decode(content?.value);\n          if(text.startsWith(\"ERROR:\")){\n            options.onError && options.onError(new Error(text.replace(\"ERROR:\",\"\")));\n          }\n          responseText += text;\n\n          const done = !content || content.done;\n          options?.onMessage && options?.onMessage(responseText, false);\n\n          if (done) {\n            break;\n          }\n        }\n        finish();\n      }else{\n        finish();\n        const json = await res.json()\n        return json.choices[0].message.content\n      }\n    } else if (res.status === 401) {\n      console.error(\"Anauthorized\");\n      responseText = \"sign://401/你需要 点击下方生成签名登录, 并告知管理员,加入授权列表\";\n      finish();\n    } else {\n      console.error(\"Stream Error\", res.body);\n      options.onError && options.onError(new Error(\"Stream Error\"));\n      finish();\n    }\n  } catch (err:any) {\n    if(err.code === 20){\n      if(!isDone){\n        console.error(\"onAbort\", err);\n        options.onAbort && options.onAbort(err);\n      }\n    }else{\n      // AbortError\n      console.error(\"NetWork Error\", err);\n      options.onError && options.onError(err);\n    }\n  }\n}\n\nexport async function requestWithPrompt(messages: Message[], prompt: string,apiKey:string) {\n  messages = messages.concat([\n    {\n      role: \"user\",\n      content: prompt,\n      date: new Date().toLocaleString(),\n    },\n  ]);\n\n  const res = await requestChat(messages,apiKey);\n\n  return res?.choices?.at(0)?.message?.content ?? \"\";\n}\n\n// To store message streaming controller\nexport const ControllerPool = {\n  controllers: {} as Record<string, AbortController>,\n\n  addController(\n    sessionIndex: number,\n    messageIndex: number,\n    controller: AbortController,\n  ) {\n    const key = this.key(sessionIndex, messageIndex);\n    this.controllers[key] = controller;\n    return key;\n  },\n\n  stop(sessionIndex: number, messageIndex: number) {\n    const key = this.key(sessionIndex, messageIndex);\n    if(this.controllers[key]){\n      const controller = this.controllers[key];\n      console.log(controller);\n      controller?.abort();\n    }\n  },\n\n  remove(sessionIndex: number, messageIndex: number) {\n    const key = this.key(sessionIndex, messageIndex);\n    delete this.controllers[key];\n  },\n\n  key(sessionIndex: number, messageIndex: number) {\n    return `${sessionIndex},${messageIndex}`;\n  },\n};\n\nexport async function requestUsage(apiKey:string) {\n  const formatDate = (d: Date) =>\n    `${d.getFullYear()}-${(d.getMonth() + 1).toString().padStart(2, \"0\")}-${d\n      .getDate()\n      .toString()\n      .padStart(2, \"0\")}`;\n  const ONE_DAY = 2 * 24 * 60 * 60 * 1000;\n  const now = new Date(Date.now() + ONE_DAY);\n  const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n  const startDate = formatDate(startOfMonth);\n  const endDate = formatDate(now);\n  const res = await requestOpenaiClient(`usage?start_date=${startDate}&end_date=${endDate}`,{apiKey})\n  return await res.json();\n}\n","import {ClientInfo_Type} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport LocalDatabase from \"../share/db/LocalDatabase\";\nimport localDb from \"../../api/gramjs/localDb\";\nimport Account from \"../share/Account\";\nimport BotWebSocket from \"./bot/BotWebSocket\";\nimport {CHATGPT_PROXY_API, MSG_SERVER} from \"../../config\";\nimport MsgWorker from \"./MsgWorker\";\nimport {Pdu} from \"../../lib/ptp/protobuf/BaseMsg\";\nimport {AuthNativeReq} from \"../../lib/ptp/protobuf/PTPAuth\";\nimport {StopChatStreamReq} from \"../../lib/ptp/protobuf/PTPOther\";\nimport {ControllerPool, requestChatStream} from \"../../lib/ptp/functions/requests\";\nimport {ApiKeyboardButtons} from \"../../api/types\";\nimport ChatMsg from \"./ChatMsg\";\nimport {SendBotMsgReq, SendBotMsgRes, UpdateCmdReq, UpdateCmdRes} from \"../../lib/ptp/protobuf/PTPMsg\";\n\nexport const handleAuthNative = async (accountId:number,entropy:string,session?:string,clientInfo?:ClientInfo_Type)=>{\n  const kv = new LocalDatabase();\n  kv.init(localDb);\n  Account.setClientKv(kv)\n  const account = Account.getInstance(accountId);\n  account.setClientInfo(clientInfo)\n  await account.setEntropy(entropy)\n  Account.setCurrentAccountId(accountId)\n  if(session){\n    account.saveSession(session)\n\n    const botWs = BotWebSocket.getInstance(accountId)\n    if(!botWs.isLogged() && MSG_SERVER){\n      MsgWorker.createWsBot(accountId,MSG_SERVER)\n    }\n  }else{\n    account.delSession()\n  }\n}\n\nexport const handleAuthNativeReq = async (pdu:Pdu)=>{\n  const {accountId,entropy,session} = AuthNativeReq.parseMsg(pdu)\n  await handleAuthNative(accountId,entropy,session);\n}\n\nexport const handleStopChatStreamReq = async (pdu:Pdu)=>{\n  const {msgId,chatId} = StopChatStreamReq.parseMsg(pdu)\n  ControllerPool.stop(chatId,msgId)\n}\n\nasync function handleChatGpt(url:string,chatGpt:string,chatId?:string,msgId?:number){\n  requestChatStream(\n    url,\n    {\n      body:{\n        ...JSON.parse(chatGpt)\n        ,msgId,\n        chatId,\n        stream:true\n      },\n      onMessage:(content, done) =>{\n        console.log(content)\n        let inlineButtons:ApiKeyboardButtons = []\n        if(content.startsWith(\"sign://401/\")){\n          inlineButtons = [\n            [\n              {\n                text:\"签名\",\n                data:\"sign://401\",\n                type:\"callback\",\n              }\n            ]\n          ]\n          content = content.replace(\"sign://401/\",\"\")\n          new ChatMsg(chatId!).update(msgId!,{\n            content:{\n              text:{\n                text:content\n              }\n            },\n            inlineButtons\n          })\n          return\n        }\n        new ChatMsg(chatId!).update(msgId!,{\n          content:{\n            text:{\n              text:content\n            }\n          },\n        })\n        if(done){\n          ControllerPool.remove(parseInt(chatId!), msgId!);\n        }\n      },\n      onAbort:(error) =>{\n        new ChatMsg(chatId!).update(msgId!,{\n          content:{\n            text:{\n              text:\"user abort\"\n            }\n          },\n        })\n        ChatMsg.apiUpdate({\n          \"@type\":\"updateGlobalUpdate\",\n          data:{\n            action:\"updateChatGptHistory\",\n            payload:{\n              chatId,\n              msgIdAssistant:undefined,\n            }\n          }\n        })\n        ControllerPool.remove(parseInt(chatId!), msgId!);\n      },\n      onError:(error) =>{\n        new ChatMsg(chatId!).update(msgId!,{\n          content:{\n            text:{\n              text:error.message\n            }\n          },\n        })\n\n        ChatMsg.apiUpdate({\n          \"@type\":\"updateGlobalUpdate\",\n          data:{\n            action:\"updateChatGptHistory\",\n            payload:{\n              chatId,\n              msgIdAssistant:undefined,\n            }\n          }\n        })\n        ControllerPool.remove(parseInt(chatId!), msgId!);\n      },\n      onController:(controller) =>{\n        ControllerPool.addController(\n          parseInt(chatId!),\n          msgId!,\n          controller,\n        );\n      },\n    }).catch(console.error);\n}\nexport const handleSendBotMsgReq = async (pdu:Pdu)=>{\n  const account = Account.getCurrentAccount()!\n  let {botApi,chatId,msgId,chatGpt,text} = SendBotMsgReq.parseMsg(pdu)\n  try {\n    if(botApi && botApi.startsWith(\"http\")){\n      if(!botApi){\n        botApi = CHATGPT_PROXY_API\n      }\n      if(chatGpt){\n        let url =  botApi+\"/v1/chat/completions\";\n        await handleChatGpt(url,chatGpt,chatId,msgId)\n        return new SendBotMsgRes({\n          reply:\"...\"\n        }).pack().getPbData()\n      }else{\n        let url = botApi+\"/message\";\n        try {\n          const res = await fetch(url, {\n            method: \"POST\",\n            headers:{\n              \"Content-Type\": \"application/json; charset=utf-8\",\n              Authorization: `Bearer ${account.getSession()}`,\n            },\n            body:JSON.stringify({\n              chatId,\n              msgId,\n              text\n            })\n          });\n          if(!res || res.status !== 200){\n            return;\n          }\n          return new SendBotMsgRes({\n            reply:await res.text()\n          }).pack().getPbData()\n        }catch (e:any){\n          return new SendBotMsgRes({\n            reply:\"Error invoke api,\" + e.message\n          }).pack().getPbData()\n        }\n      }\n    }else{\n      const connId =botApi ? parseInt(chatId!) : Account.getCurrentAccountId()\n      if(!botApi){\n        botApi = CHATGPT_PROXY_API\n      }\n      const botWs = BotWebSocket.getInstance(connId)\n      if(!botWs.isLogged()){\n        await MsgWorker.createWsBot(connId,botApi)\n      }\n      const res = await botWs.sendPduWithCallback(new SendBotMsgReq({\n        text,\n        chatId,\n        msgId,\n        chatGpt\n      }).pack())\n      return res.getPbData()\n    }\n  }catch (e){\n    console.error(e)\n    return\n  }\n}\n\nexport const handleUpdateCmdReq = async (pdu:Pdu)=>{\n  const account = Account.getCurrentAccount()!\n  const {botApi,chatId} = UpdateCmdReq.parseMsg(pdu)\n  if(botApi){\n    try {\n      if(botApi.startsWith(\"http\")){\n        const res = await fetch(botApi+\"/commands\", {\n          method: \"POST\",\n          headers:{\n            Authorization: `Bearer ${account.getSession()}`,\n          }\n        });\n        if(!res || res.status !== 200){\n          return;\n        }\n        // @ts-ignore\n        const {commands} = await res.json();\n        return new UpdateCmdRes({\n          commands\n        }).pack().getPbData()\n      }else{\n        const botWs = BotWebSocket.getInstance(parseInt(chatId!))\n        if(!botWs.isLogged()){\n          await MsgWorker.createWsBot(parseInt(chatId!),botApi)\n        }\n        const res = await botWs.sendPduWithCallback(new UpdateCmdReq({\n          chatId\n        }).pack())\n        const {commands} = UpdateCmdRes.parseMsg(res)\n        return new UpdateCmdRes({\n          commands\n        }).pack().getPbData()\n      }\n    }catch (e){\n      console.error(e)\n      return\n    }\n  }\n}\n","import {Api as GramJs, connection, TelegramClient,} from '../../../lib/gramjs';\n\nimport {Logger as GramJsLogger} from '../../../lib/gramjs/extensions/index';\nimport type {TwoFaParams} from '../../../lib/gramjs/client/2fa';\n\nimport type {ApiInitialArgs, ApiMediaFormat, ApiOnProgress, ApiSessionData, OnApiUpdate,} from '../../types';\n\nimport {APP_VERSION, CLOUD_MESSAGE_API, DEBUG, DEBUG_GRAMJS, UPLOAD_WORKERS,} from '../../../config';\nimport {onCurrentUserUpdate,} from './auth';\nimport {updater} from '../updater';\nimport {setMessageBuilderCurrentUserId} from '../apiBuilders/messages';\nimport downloadMediaWithClient, {parseMediaUrl} from './media';\nimport {buildApiUserFromFull} from '../apiBuilders/users';\nimport localDb, {clearLocalDb} from '../localDb';\nimport {buildApiPeerId} from '../apiBuilders/peers';\nimport {addMessageToLocalDb, log} from '../helpers';\nimport Account from \"../../../worker/share/Account\";\nimport {CurrentUserInfo} from \"../../../worker/setting\";\nimport MsgWorker from \"../../../worker/msg/MsgWorker\";\nimport ChatMsg from '../../../worker/msg/ChatMsg';\nimport {\n  handleAuthNative,\n  handleAuthNativeReq,\n  handleSendBotMsgReq, handleStopChatStreamReq,\n  handleUpdateCmdReq\n} from '../../../worker/msg/client';\nimport {Pdu} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport {ActionCommands, getActionCommandsName} from \"../../../lib/ptp/protobuf/ActionCommands\";\n\n\nconst DEFAULT_USER_AGENT = 'Unknown UserAgent';\nconst DEFAULT_PLATFORM = 'Unknown platform';\nconst APP_CODE_NAME = 'Z';\n\nGramJsLogger.setLevel(DEBUG_GRAMJS ? 'debug' : 'warn');\n\nlet onUpdate: OnApiUpdate;\nlet client: TelegramClient;\nexport let account: Account;\nlet isConnected = false;\nlet currentUserId: string | undefined;\n\nexport async function init(_onUpdate: OnApiUpdate, initialArgs: ApiInitialArgs) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START INIT API');\n  }\n  onUpdate = _onUpdate;\n  ChatMsg.setApiUpdate(_onUpdate,MsgWorker.genMessageId)\n  const {\n    userAgent, platform, sessionData, isTest, isMovSupported, isWebmSupported, maxBufferSize, webAuthToken, dcId,\n    mockScenario,accountId,entropy,session\n  } = initialArgs;\n  await handleAuthNative(accountId,entropy,session,{\n    deviceModel: navigator.userAgent || userAgent || DEFAULT_USER_AGENT,\n    systemVersion: platform || DEFAULT_PLATFORM,\n    appVersion: `${APP_VERSION} ${APP_CODE_NAME}`,\n  });\n  try {\n    if (DEBUG) {\n      log('CONNECTING');\n      // eslint-disable-next-line no-restricted-globals\n      (self as any).invoke = invokeRequest;\n    }\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log('>>> FINISH INIT API');\n      log('CONNECTED');\n    }\n\n    onUpdate({ '@type': 'updateApiReady' });\n\n    onUpdate({\n      '@type': 'updateAuthorizationState',\n      authorizationState: \"authorizationStateReady\",\n    });\n    // @ts-ignore\n    onUpdate({'@type': 'updateCurrentUser',currentUser: CurrentUserInfo});\n\n    onUpdate({\n      '@type': 'updateConnectionState',\n      connectionState:\"connectionStateReady\",\n    });\n    // void fetchCurrentUser();\n  } catch (err) {\n    if (DEBUG) {\n      log('CONNECTING ERROR', err);\n    }\n    throw err;\n  }\n}\n\nexport function setIsPremium({ isPremium }: { isPremium: boolean }) {\n  // client.setIsPremium(isPremium);\n}\n\nexport async function destroy(noLogOut = false, noClearLocalDb = false) {\n  // if (!noLogOut) {\n  //   await invokeRequest(new GramJs.auth.LogOut());\n  // }\n  if (!noClearLocalDb) clearLocalDb();\n\n  // await client.destroy();\n}\n\nexport async function disconnect() {\n  // await client.disconnect();\n}\n\nexport function getClient() {\n  return client;\n\n}\n\nfunction onSessionUpdate(sessionData: ApiSessionData) {\n  onUpdate({\n    '@type': 'updateSession',\n    sessionData,\n  });\n}\n\nfunction handleGramJsUpdate(update: any) {\n  if (update instanceof connection.UpdateConnectionState) {\n    isConnected = update.state === connection.UpdateConnectionState.connected;\n  } else if (update instanceof GramJs.UpdatesTooLong) {\n    void handleTerminatedSession();\n  } else if (update instanceof GramJs.UpdateConfig) {\n    // eslint-disable-next-line no-underscore-dangle\n    const currentUser = (update as GramJs.UpdateConfig & { _entities?: (GramJs.TypeUser | GramJs.TypeChat)[] })\n      ._entities\n      ?.find((entity) => entity instanceof GramJs.User && buildApiPeerId(entity.id, 'user') === currentUserId);\n    if (!(currentUser instanceof GramJs.User)) return;\n\n    setIsPremium({ isPremium: Boolean(currentUser.premium) });\n  }\n}\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue: true,\n  shouldThrow?: boolean,\n  shouldIgnoreUpdates?: undefined,\n  dcId?: number,\n  shouldIgnoreErrors?: boolean,\n): Promise<true | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue?: boolean,\n  shouldThrow?: boolean,\n  shouldIgnoreUpdates?: boolean,\n  dcId?: number,\n  shouldIgnoreErrors?: boolean,\n): Promise<T['__response'] | undefined>;\n\nexport async function invokeRequest<T extends GramJs.AnyRequest>(\n  request: T,\n  shouldReturnTrue = false,\n  shouldThrow = false,\n  shouldIgnoreUpdates = false,\n  dcId?: number,\n  shouldIgnoreErrors = false,\n) {\n  if (!isConnected) {\n    if (DEBUG) {\n      log('INVOKE ERROR', request.className, 'Client is not connected');\n    }\n\n    return undefined;\n  }\n\n  try {\n    if (DEBUG) {\n      log('INVOKE', request.className);\n    }\n\n    const result = await client.invoke(request, dcId);\n\n    if (DEBUG) {\n      log('RESPONSE', request.className, result);\n    }\n\n    if (!shouldIgnoreUpdates) {\n      handleUpdatesFromRequest(request, result);\n    }\n\n    return shouldReturnTrue ? result && true : result;\n  } catch (err: any) {\n    if (shouldIgnoreErrors) return undefined;\n    if (DEBUG) {\n      log('INVOKE ERROR', request.className);\n      // eslint-disable-next-line no-console\n      console.debug('invokeRequest failed with payload', request);\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n\n    if (shouldThrow) {\n      throw err;\n    }\n\n    dispatchErrorUpdate(err, request);\n\n    return undefined;\n  }\n}\n\nfunction handleUpdatesFromRequest<T extends GramJs.AnyRequest>(request: T, result: T['__response']) {\n  let manyUpdates;\n  let singleUpdate;\n\n  if (result instanceof GramJs.UpdatesCombined || result instanceof GramJs.Updates) {\n    manyUpdates = result;\n  } else if (typeof result === 'object' && 'updates' in result && (\n    result.updates instanceof GramJs.Updates || result.updates instanceof GramJs.UpdatesCombined\n  )) {\n    manyUpdates = result.updates;\n  } else if (\n    result instanceof GramJs.UpdateShortMessage\n    || result instanceof GramJs.UpdateShortChatMessage\n    || result instanceof GramJs.UpdateShort\n    || result instanceof GramJs.UpdateShortSentMessage\n  ) {\n    singleUpdate = result;\n  }\n\n  if (manyUpdates) {\n    injectUpdateEntities(manyUpdates);\n\n    manyUpdates.updates.forEach((update) => {\n      updater(update, request);\n    });\n  } else if (singleUpdate) {\n    updater(singleUpdate, request);\n  }\n}\n\nexport async function downloadMedia(\n  args: { url: string; mediaFormat: ApiMediaFormat; start?: number; end?: number; isHtmlAllowed?: boolean },\n  onProgress?: ApiOnProgress,\n) {\n  try {\n    return (await downloadMediaWithClient(args, client, isConnected, onProgress));\n  } catch (err: any) {\n    if (err.message.startsWith('FILE_REFERENCE')) {\n      const isFileReferenceRepaired = await repairFileReference({ url: args.url });\n      if (isFileReferenceRepaired) {\n        return downloadMediaWithClient(args, client, isConnected, onProgress);\n      }\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to repair file reference', args.url);\n      }\n    }\n\n    throw err;\n  }\n}\n\nexport function uploadFile(file: File, onProgress?: ApiOnProgress) {\n  return client.uploadFile({ file, onProgress, workers: UPLOAD_WORKERS });\n}\n\nexport function updateTwoFaSettings(params: TwoFaParams) {\n  return client.updateTwoFaSettings(params);\n}\n\nexport function getTmpPassword(currentPassword: string, ttl?: number) {\n  return client.getTmpPassword(currentPassword, ttl);\n}\n\nexport async function fetchCurrentUser() {\n  const userFull = await invokeRequest(new GramJs.users.GetFullUser({\n    id: new GramJs.InputUserSelf(),\n  }));\n\n  if (!userFull || !(userFull.users[0] instanceof GramJs.User)) {\n    return;\n  }\n\n  const user = userFull.users[0];\n\n  if (user.photo instanceof GramJs.Photo) {\n    localDb.photos[user.photo.id.toString()] = user.photo;\n  }\n  localDb.users[buildApiPeerId(user.id, 'user')] = user;\n  const currentUser = buildApiUserFromFull(userFull);\n\n  setMessageBuilderCurrentUserId(currentUser.id);\n  onCurrentUserUpdate(currentUser);\n\n  currentUserId = currentUser.id;\n  setIsPremium({ isPremium: Boolean(currentUser.isPremium) });\n}\n\nexport function dispatchErrorUpdate<T extends GramJs.AnyRequest>(err: Error, request: T) {\n  const isSlowMode = err.message.startsWith('A wait of') && (\n    request instanceof GramJs.messages.SendMessage\n    || request instanceof GramJs.messages.SendMedia\n    || request instanceof GramJs.messages.SendMultiMedia\n  );\n\n  const { message } = err;\n\n  onUpdate({\n    '@type': 'error',\n    error: {\n      message,\n      isSlowMode,\n      hasErrorKey: true,\n    },\n  });\n}\n\nfunction injectUpdateEntities(result: GramJs.Updates | GramJs.UpdatesCombined) {\n  const entities = [...result.users, ...result.chats];\n\n  result.updates.forEach((update) => {\n    if (entities) {\n      // eslint-disable-next-line no-underscore-dangle\n      (update as any)._entities = entities;\n    }\n  });\n}\n\nasync function handleTerminatedSession() {\n  try {\n    await invokeRequest(new GramJs.users.GetFullUser({\n      id: new GramJs.InputUserSelf(),\n    }), undefined, true);\n  } catch (err: any) {\n    if (err.message === 'AUTH_KEY_UNREGISTERED') {\n      onUpdate({\n        '@type': 'updateConnectionState',\n        connectionState: 'connectionStateBroken',\n      });\n    }\n  }\n}\n\nexport async function repairFileReference({\n  url,\n}: {\n  url: string;\n}) {\n  const parsed = parseMediaUrl(url);\n\n  if (!parsed) return undefined;\n\n  const {\n    entityType, entityId, mediaMatchType,\n  } = parsed;\n\n  if (mediaMatchType === 'file') {\n    return false;\n  }\n\n  if (entityType === 'msg') {\n    const entity = localDb.messages[entityId]!;\n    const messageId = entity.id;\n\n    const peer = 'channelId' in entity.peerId ? new GramJs.InputChannel({\n      channelId: entity.peerId.channelId,\n      accessHash: (localDb.chats[buildApiPeerId(entity.peerId.channelId, 'channel')] as GramJs.Channel).accessHash!,\n    }) : undefined;\n    const result = await invokeRequest(\n      peer\n        ? new GramJs.channels.GetMessages({\n          channel: peer,\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        })\n        : new GramJs.messages.GetMessages({\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        }),\n    );\n\n    if (!result || result instanceof GramJs.messages.MessagesNotModified) return false;\n\n    const message = result.messages[0];\n    if (message instanceof GramJs.MessageEmpty) return false;\n    addMessageToLocalDb(message);\n    return true;\n  }\n  return false;\n}\n\nexport async function sendWithCallback(buff:Uint8Array){\n  const account = Account.getCurrentAccount()!\n  let pdu = new Pdu(Buffer.from(buff))\n  if(DEBUG){\n    console.log(pdu.getCommandId(),getActionCommandsName(pdu.getCommandId()))\n  }\n  switch (pdu.getCommandId()) {\n    case ActionCommands.CID_SendBotMsgReq:\n      return await handleSendBotMsgReq(pdu);\n    case ActionCommands.CID_UpdateCmdReq:\n      return await handleUpdateCmdReq(pdu);\n    case ActionCommands.CID_StopChatStreamReq:\n      return await handleStopChatStreamReq(pdu);\n    case ActionCommands.CID_AuthNativeReq:\n      return await handleAuthNativeReq(pdu);\n    case ActionCommands.CID_GenMsgIdReq:\n      return await MsgWorker.genMsgId(pdu);\n    case ActionCommands.CID_UploadMsgReq:\n      pdu = await MsgWorker.beforeUploadMsgReq(pdu);\n      break\n    case ActionCommands.CID_UploadUserReq:\n      pdu = await MsgWorker.beforeUploadUserReq(pdu);\n      break\n  }\n  if(!account.getSession()){\n    return\n  }\n\n  const res = await fetch(`${CLOUD_MESSAGE_API}/proto`, {\n    method: \"POST\",\n    body: Buffer.from(pdu.getPbData()),\n    headers:{\n      Authorization: `Bearer ${account.getSession()}`,\n    }\n  });\n  if(!res || res.status !== 200){\n    return;\n  }\n  const arrayBuffer = await res.arrayBuffer();\n  let buf = Buffer.from(arrayBuffer);\n  const pduRes = new Pdu(buf)\n  switch (pduRes.getCommandId()) {\n    case ActionCommands.CID_DownloadMsgRes:\n      buf = await MsgWorker.afterDownloadMsgReq(pduRes)\n      break\n    case ActionCommands.CID_DownloadUserRes:\n      buf = await MsgWorker.afterDownloadUserReq(pduRes)\n      break\n  }\n  return buf;\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  OnApiUpdate,\n  ApiChat,\n  ApiMessage,\n  ApiUser,\n  ApiMessageEntity,\n  ApiFormattedText,\n  ApiChatFullInfo,\n  ApiChatFolder,\n  ApiChatBannedRights,\n  ApiChatAdminRights,\n  ApiGroupCall,\n  ApiUserStatus,\n  ApiPhoto,\n  ApiTopic,\n  ApiChatReactions,\n} from '../../types';\n\nimport {\n  DEBUG,\n  ARCHIVED_FOLDER_ID,\n  MEMBERS_LOAD_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  ALL_FOLDER_ID,\n  MAX_INT_32,\n  TOPICS_SLICE,\n  GENERAL_TOPIC_ID, CHAT_LIST_LOAD_SLICE,\n} from '../../../config';\nimport {getClient, invokeRequest, uploadFile} from './client';\nimport {\n  buildApiChatFromDialog,\n  getPeerKey,\n  buildChatMembers,\n  buildApiChatFromPreview,\n  buildApiChatFolder,\n  buildApiChatFolderFromSuggested,\n  buildApiChatBotCommands,\n  buildApiChatSettings,\n  buildApiChatReactions,\n  buildApiTopic,\n} from '../apiBuilders/chats';\nimport { buildApiMessage, buildMessageDraft } from '../apiBuilders/messages';\nimport { buildApiUser, buildApiUsersAndStatuses } from '../apiBuilders/users';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  buildInputEntity,\n  buildInputPeer,\n  buildMtpMessageEntity,\n  buildFilterFromApiFolder,\n  isMessageWithMedia,\n  buildChatBannedRights,\n  buildChatAdminRights,\n  buildInputChatReactions,\n  buildInputPhoto,\n  generateRandomBigInt,\n} from '../gramjsBuilders';\nimport { addEntitiesWithPhotosToLocalDb, addMessageToLocalDb, addPhotoToLocalDb } from '../helpers';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer } from '../apiBuilders/peers';\nimport { buildApiPhoto } from '../apiBuilders/common';\nimport { buildStickerSet } from '../apiBuilders/symbols';\nimport localDb from '../localDb';\nimport Account from \"../../../worker/share/Account\";\nimport {LoadChatsReq, LoadChatsRes} from \"../../../lib/ptp/protobuf/PTPChats\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\n\ntype FullChatData = {\n  fullInfo: ApiChatFullInfo;\n  users?: ApiUser[];\n  userStatusesById: { [userId: string]: ApiUserStatus };\n  groupCall?: Partial<ApiGroupCall>;\n  membersCount?: number;\n};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchChats({\n  limit,\n  offsetDate,\n  archived,\n  withPinned,\n  lastLocalServiceMessage,\n}: {\n  limit: number;\n  offsetDate?: number;\n  archived?: boolean;\n  withPinned?: boolean;\n  lastLocalServiceMessage?: ApiMessage;\n}) {\n  const loadChatsRes = await Account.getCurrentAccount()?.sendPduWithCallback(new LoadChatsReq({\n    limit,\n    offsetDate,\n    archived,\n    withPinned,\n  }).pack())\n\n  if(!loadChatsRes){\n    return;\n  }\n  const res = LoadChatsRes.parseMsg(loadChatsRes);\n  if (!res || res.err !== ERR.NO_ERROR) {\n    return;\n  }\n  const result = JSON.parse(res.payload);\n  console.log('[LoadChatsRes]',result)\n  return result;\n  //\n  // const result = await invokeRequest(new GramJs.messages.GetDialogs({\n  //   offsetPeer: new GramJs.InputPeerEmpty(),\n  //   limit,\n  //   offsetDate,\n  //   folderId: archived ? ARCHIVED_FOLDER_ID : undefined,\n  //   ...(withPinned && { excludePinned: true }),\n  // }));\n  // const resultPinned = withPinned\n  //   ? await invokeRequest(new GramJs.messages.GetPinnedDialogs({\n  //     folderId: archived ? ARCHIVED_FOLDER_ID : undefined,\n  //   }))\n  //   : undefined;\n  //\n  // if (!result || result instanceof GramJs.messages.DialogsNotModified) {\n  //   return undefined;\n  // }\n  //\n  // if (resultPinned) {\n  //   updateLocalDb(resultPinned);\n  // }\n  // updateLocalDb(result);\n  //\n  // const lastMessagesByChatId = buildCollectionByKey(\n  //   (resultPinned ? resultPinned.messages : []).concat(result.messages)\n  //     .map(buildApiMessage)\n  //     .filter(Boolean),\n  //   'chatId',\n  // );\n  //\n  // const peersByKey = preparePeers(result);\n  // if (resultPinned) {\n  //   Object.assign(peersByKey, preparePeers(resultPinned, peersByKey));\n  // }\n  //\n  // const chats: ApiChat[] = [];\n  // const draftsById: Record<string, ApiFormattedText> = {};\n  // const replyingToById: Record<string, number> = {};\n  //\n  // const dialogs = (resultPinned ? resultPinned.dialogs : []).concat(result.dialogs);\n  //\n  // const orderedPinnedIds: string[] = [];\n  //\n  // dialogs.forEach((dialog) => {\n  //   if (\n  //     !(dialog instanceof GramJs.Dialog)\n  //     // This request can return dialogs not belonging to specified folder\n  //     || (!archived && dialog.folderId === ARCHIVED_FOLDER_ID)\n  //     || (archived && dialog.folderId !== ARCHIVED_FOLDER_ID)\n  //   ) {\n  //     return;\n  //   }\n  //\n  //   const peerEntity = peersByKey[getPeerKey(dialog.peer)];\n  //   const chat = buildApiChatFromDialog(dialog, peerEntity);\n  //\n  //   if (\n  //     chat.id === SERVICE_NOTIFICATIONS_USER_ID\n  //     && lastLocalServiceMessage\n  //     && (!lastMessagesByChatId[chat.id] || lastLocalServiceMessage.date > lastMessagesByChatId[chat.id].date)\n  //   ) {\n  //     chat.lastMessage = lastLocalServiceMessage;\n  //   } else {\n  //     chat.lastMessage = lastMessagesByChatId[chat.id];\n  //   }\n  //\n  //   chat.isListed = true;\n  //\n  //   chats.push(chat);\n  //\n  //   if (withPinned && dialog.pinned) {\n  //     orderedPinnedIds.push(chat.id);\n  //   }\n  //\n  //   if (dialog.draft) {\n  //     const { formattedText, replyingToId } = buildMessageDraft(dialog.draft) || {};\n  //     if (formattedText) {\n  //       draftsById[chat.id] = formattedText;\n  //     }\n  //     if (replyingToId) {\n  //       replyingToById[chat.id] = replyingToId;\n  //     }\n  //   }\n  // });\n  //\n  // const chatIds = chats.map((chat) => chat.id);\n  //\n  // const { users, userStatusesById } = buildApiUsersAndStatuses((resultPinned?.users || []).concat(result.users));\n  //\n  // let totalChatCount: number;\n  // if (result instanceof GramJs.messages.DialogsSlice) {\n  //   totalChatCount = result.count;\n  // } else {\n  //   totalChatCount = chatIds.length;\n  // }\n  //\n  // return {\n  //   chatIds,\n  //   chats,\n  //   users,\n  //   userStatusesById,\n  //   draftsById,\n  //   replyingToById,\n  //   orderedPinnedIds: withPinned ? orderedPinnedIds : undefined,\n  //   totalChatCount,\n  // };\n}\n\nexport function fetchFullChat(chat: ApiChat) {\n  const { id, accessHash, adminRights } = chat;\n\n  const input = buildInputEntity(id, accessHash);\n\n  return input instanceof GramJs.InputChannel\n    ? getFullChannelInfo(id, accessHash!, adminRights)\n    : getFullChatInfo(id);\n}\n\nexport async function fetchChatSettings(chat: ApiChat) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPeerSettings({\n    peer: buildInputPeer(id, accessHash),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    settings: buildApiChatSettings(result.settings),\n  };\n}\n\nexport async function searchChats({ query }: { query: string }) {\n  const result = await invokeRequest(new GramJs.contacts.Search({ q: query }));\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const localPeerIds = result.myResults.map(getApiChatIdFromMtpPeer);\n  const allChats = result.chats.concat(result.users)\n    .map((user) => buildApiChatFromPreview(user))\n    .filter(Boolean);\n  const allUsers = result.users.map(buildApiUser).filter((user) => Boolean(user) && !user.isSelf) as ApiUser[];\n\n  return {\n    localChats: allChats.filter((r) => localPeerIds.includes(r.id)),\n    localUsers: allUsers.filter((u) => localPeerIds.includes(u.id)),\n    globalChats: allChats.filter((r) => !localPeerIds.includes(r.id)),\n    globalUsers: allUsers.filter((u) => !localPeerIds.includes(u.id)),\n  };\n}\n\nexport async function fetchChat({\n  type, user,\n}: {\n  type: 'user' | 'self' | 'support'; user?: ApiUser;\n}) {\n  let mtpUser: GramJs.User | undefined;\n\n  if (type === 'self' || type === 'user') {\n    const result = await invokeRequest(new GramJs.users.GetUsers({\n      id: [\n        type === 'user' && user\n          ? buildInputEntity(user.id, user.accessHash) as GramJs.InputUser\n          : new GramJs.InputUserSelf(),\n      ],\n    }));\n    if (!result || !result.length) {\n      return undefined;\n    }\n\n    [mtpUser] = result;\n  } else if (type === 'support') {\n    const result = await invokeRequest(new GramJs.help.GetSupport());\n    if (!result || !result.user) {\n      return undefined;\n    }\n\n    mtpUser = result.user;\n  }\n\n  const chat = buildApiChatFromPreview(mtpUser!, type === 'support');\n  if (!chat) {\n    return undefined;\n  }\n\n  onUpdate({\n    '@type': 'updateChat',\n    id: chat.id,\n    chat,\n  });\n\n  return { chatId: chat.id };\n}\n\nexport async function requestChatUpdate({\n  chat,\n  lastLocalMessage,\n  noLastMessage,\n}: {\n  chat: ApiChat; lastLocalMessage?: ApiMessage; noLastMessage?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPeerDialogs({\n    peers: [new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    })],\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  const dialog = result.dialogs[0];\n  if (!dialog || !(dialog instanceof GramJs.Dialog)) {\n    return;\n  }\n\n  const peersByKey = preparePeers(result);\n  const peerEntity = peersByKey[getPeerKey(dialog.peer)];\n  if (!peerEntity) {\n    return;\n  }\n\n  updateLocalDb(result);\n\n  const lastRemoteMessage = buildApiMessage(result.messages[0]);\n  const lastMessage = lastLocalMessage && (!lastRemoteMessage || (lastLocalMessage.date > lastRemoteMessage.date))\n    ? lastLocalMessage\n    : lastRemoteMessage;\n\n  onUpdate({\n    '@type': 'updateChat',\n    id,\n    chat: {\n      ...buildApiChatFromDialog(dialog, peerEntity),\n      ...(!noLastMessage && { lastMessage }),\n    },\n  });\n}\n\nexport function saveDraft({\n  chat,\n  text,\n  entities,\n  threadId,\n  replyToMsgId,\n}: {\n  chat: ApiChat;\n  text: string;\n  entities?: ApiMessageEntity[];\n  threadId?: number;\n  replyToMsgId?: number;\n}) {\n  return invokeRequest(new GramJs.messages.SaveDraft({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    message: text,\n    ...(entities && {\n      entities: entities.map(buildMtpMessageEntity),\n    }),\n    replyToMsgId,\n    topMsgId: threadId,\n  }));\n}\n\nexport function clearDraft(chat: ApiChat, threadId?: number) {\n  return invokeRequest(new GramJs.messages.SaveDraft({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    message: '',\n    ...(threadId && { topMsgId: threadId }),\n  }));\n}\n\nasync function getFullChatInfo(chatId: string): Promise<FullChatData | undefined> {\n  const result = await invokeRequest(new GramJs.messages.GetFullChat({\n    chatId: buildInputEntity(chatId) as BigInt.BigInteger,\n  }));\n\n  if (!result || !(result.fullChat instanceof GramJs.ChatFull)) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const {\n    about,\n    participants,\n    exportedInvite,\n    botInfo,\n    call,\n    availableReactions,\n    recentRequesters,\n    requestsPending,\n    chatPhoto,\n  } = result.fullChat;\n\n  if (chatPhoto instanceof GramJs.Photo) {\n    localDb.photos[chatPhoto.id.toString()] = chatPhoto;\n  }\n\n  const members = buildChatMembers(participants);\n  const adminMembers = members ? members.filter(({ isAdmin, isOwner }) => isAdmin || isOwner) : undefined;\n  const botCommands = botInfo ? buildApiChatBotCommands(botInfo) : undefined;\n  const inviteLink = exportedInvite instanceof GramJs.ChatInviteExported ? exportedInvite.link : undefined;\n  const { users, userStatusesById } = buildApiUsersAndStatuses(result.users);\n\n  return {\n    fullInfo: {\n      ...(chatPhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(chatPhoto) }),\n      about,\n      members,\n      adminMembersById: adminMembers ? buildCollectionByKey(adminMembers, 'userId') : undefined,\n      canViewMembers: true,\n      botCommands,\n      inviteLink,\n      groupCallId: call?.id.toString(),\n      enabledReactions: buildApiChatReactions(availableReactions),\n      requestsPending,\n      recentRequesterIds: recentRequesters?.map((userId) => buildApiPeerId(userId, 'user')),\n    },\n    users,\n    userStatusesById,\n    groupCall: call ? {\n      chatId,\n      isLoaded: false,\n      id: call.id.toString(),\n      accessHash: call.accessHash.toString(),\n      connectionState: 'disconnected',\n      participantsCount: 0,\n      version: 0,\n      participants: {},\n    } : undefined,\n    membersCount: members?.length,\n  };\n}\n\nasync function getFullChannelInfo(\n  id: string,\n  accessHash: string,\n  adminRights?: ApiChatAdminRights,\n): Promise<FullChatData | undefined> {\n  const result = await invokeRequest(new GramJs.channels.GetFullChannel({\n    channel: buildInputEntity(id, accessHash) as GramJs.InputChannel,\n  }));\n\n  if (!result || !(result.fullChat instanceof GramJs.ChannelFull)) {\n    return undefined;\n  }\n\n  const {\n    about,\n    onlineCount,\n    exportedInvite,\n    slowmodeSeconds,\n    slowmodeNextSendDate,\n    migratedFromChatId,\n    migratedFromMaxId,\n    canViewParticipants,\n    canViewStats,\n    linkedChatId,\n    hiddenPrehistory,\n    call,\n    botInfo,\n    availableReactions,\n    defaultSendAs,\n    requestsPending,\n    recentRequesters,\n    statsDc,\n    participantsCount,\n    stickerset,\n    chatPhoto,\n    participantsHidden,\n  } = result.fullChat;\n\n  if (chatPhoto instanceof GramJs.Photo) {\n    localDb.photos[chatPhoto.id.toString()] = chatPhoto;\n  }\n\n  const inviteLink = exportedInvite instanceof GramJs.ChatInviteExported\n    ? exportedInvite.link\n    : undefined;\n\n  const { members, users, userStatusesById } = (canViewParticipants && await fetchMembers(id, accessHash)) || {};\n  const { members: kickedMembers, users: bannedUsers, userStatusesById: bannedStatusesById } = (\n    canViewParticipants && adminRights && await fetchMembers(id, accessHash, 'kicked')\n  ) || {};\n  const { members: adminMembers, users: adminUsers, userStatusesById: adminStatusesById } = (\n    canViewParticipants && await fetchMembers(id, accessHash, 'admin')\n  ) || {};\n  const botCommands = botInfo ? buildApiChatBotCommands(botInfo) : undefined;\n\n  if (result?.chats?.length > 1) {\n    updateLocalDb(result);\n\n    const [, mtpLinkedChat] = result.chats;\n    const chat = buildApiChatFromPreview(mtpLinkedChat);\n    if (chat) {\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    }\n  }\n\n  const statusesById = {\n    ...userStatusesById,\n    ...bannedStatusesById,\n    ...adminStatusesById,\n  };\n\n  return {\n    fullInfo: {\n      ...(chatPhoto instanceof GramJs.Photo && { profilePhoto: buildApiPhoto(chatPhoto) }),\n      about,\n      onlineCount,\n      inviteLink,\n      slowMode: slowmodeSeconds ? {\n        seconds: slowmodeSeconds,\n        nextSendDate: slowmodeNextSendDate,\n      } : undefined,\n      migratedFrom: migratedFromChatId ? {\n        chatId: buildApiPeerId(migratedFromChatId, 'chat'),\n        maxMessageId: migratedFromMaxId,\n      } : undefined,\n      canViewMembers: canViewParticipants,\n      canViewStatistics: canViewStats,\n      isPreHistoryHidden: hiddenPrehistory,\n      members,\n      kickedMembers,\n      adminMembersById: adminMembers ? buildCollectionByKey(adminMembers, 'userId') : undefined,\n      groupCallId: call ? String(call.id) : undefined,\n      linkedChatId: linkedChatId ? buildApiPeerId(linkedChatId, 'chat') : undefined,\n      botCommands,\n      enabledReactions: buildApiChatReactions(availableReactions),\n      sendAsId: defaultSendAs ? getApiChatIdFromMtpPeer(defaultSendAs) : undefined,\n      requestsPending,\n      recentRequesterIds: recentRequesters?.map((userId) => buildApiPeerId(userId, 'user')),\n      statisticsDcId: statsDc,\n      stickerSet: stickerset ? buildStickerSet(stickerset) : undefined,\n      areParticipantsHidden: participantsHidden,\n    },\n    users: [...(users || []), ...(bannedUsers || []), ...(adminUsers || [])],\n    userStatusesById: statusesById,\n    groupCall: call ? {\n      chatId: id,\n      isLoaded: false,\n      id: call.id.toString(),\n      accessHash: call?.accessHash.toString(),\n      participants: {},\n      version: 0,\n      participantsCount: 0,\n      connectionState: 'disconnected',\n    } : undefined,\n    membersCount: participantsCount,\n  };\n}\n\nexport async function updateChatMutedState({\n  chat, isMuted,\n}: {\n  chat: ApiChat; isMuted: boolean;\n}) {\n  await invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer: new GramJs.InputNotifyPeer({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n    }),\n    settings: new GramJs.InputPeerNotifySettings({ muteUntil: isMuted ? MAX_INT_32 : 0 }),\n  }));\n\n  onUpdate({\n    '@type': 'updateNotifyExceptions',\n    chatId: chat.id,\n    isMuted,\n  });\n\n  void requestChatUpdate({\n    chat,\n    noLastMessage: true,\n  });\n}\n\nexport async function updateTopicMutedState({\n  chat, topicId, isMuted,\n}: {\n  chat: ApiChat; topicId: number; isMuted: boolean;\n}) {\n  await invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer: new GramJs.InputNotifyForumTopic({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      topMsgId: topicId,\n    }),\n    settings: new GramJs.InputPeerNotifySettings({ muteUntil: isMuted ? MAX_INT_32 : 0 }),\n  }));\n\n  onUpdate({\n    '@type': 'updateTopicNotifyExceptions',\n    chatId: chat.id,\n    topicId,\n    isMuted,\n  });\n\n  // TODO[forums] Request forum topic thread update\n}\n\nexport async function createChannel({\n  title, about = '', users,\n}: {\n  title: string; about?: string; users?: ApiUser[];\n}, noErrorUpdate = false): Promise<ApiChat | undefined> {\n  const result = await invokeRequest(new GramJs.channels.CreateChannel({\n    broadcast: true,\n    title,\n    about,\n  }), undefined, true);\n\n  // `createChannel` can return a lot of different update types according to docs,\n  // but currently channel creation returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected channel creation update', result);\n    }\n    return undefined;\n  }\n\n  const newChannel = result.chats[0];\n  if (!newChannel || !(newChannel instanceof GramJs.Channel)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Created channel not found', result);\n    }\n    return undefined;\n  }\n\n  const channel = buildApiChatFromPreview(newChannel)!;\n\n  if (users?.length) {\n    try {\n      await invokeRequest(new GramJs.channels.InviteToChannel({\n        channel: buildInputEntity(channel.id, channel.accessHash) as GramJs.InputChannel,\n        users: users.map(({ id, accessHash }) => buildInputEntity(id, accessHash)) as GramJs.InputUser[],\n      }), undefined, noErrorUpdate);\n    } catch (err) {\n      // `noErrorUpdate` will cause an exception which we don't want either\n    }\n  }\n\n  return channel;\n}\n\nexport function joinChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.JoinChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), true, true);\n}\n\nexport function deleteChatUser({\n  chat, user,\n}: {\n  chat: ApiChat; user: ApiUser;\n}) {\n  if (chat.type !== 'chatTypeBasicGroup') return undefined;\n  return invokeRequest(new GramJs.messages.DeleteChatUser({\n    chatId: buildInputEntity(chat.id, chat.accessHash) as BigInt.BigInteger,\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n  }), true);\n}\n\nexport function deleteChat({\n  chatId,\n}: {\n  chatId: string;\n}) {\n  return invokeRequest(new GramJs.messages.DeleteChat({\n    chatId: buildInputEntity(chatId) as BigInt.BigInteger,\n  }), true);\n}\n\nexport function leaveChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.LeaveChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), true);\n}\n\nexport function deleteChannel({\n  channelId, accessHash,\n}: {\n  channelId: string; accessHash: string;\n}) {\n  return invokeRequest(new GramJs.channels.DeleteChannel({\n    channel: buildInputEntity(channelId, accessHash) as GramJs.InputChannel,\n  }), true);\n}\n\nexport async function createGroupChat({\n  title, users,\n}: {\n  title: string; users: ApiUser[];\n}): Promise<ApiChat | undefined> {\n  const result = await invokeRequest(new GramJs.messages.CreateChat({\n    title,\n    users: users.map(({ id, accessHash }) => buildInputEntity(id, accessHash)) as GramJs.InputUser[],\n  }), undefined, true);\n\n  // `createChat` can return a lot of different update types according to docs,\n  // but currently chat creation returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected chat creation update', result);\n    }\n    return undefined;\n  }\n\n  const newChat = result.chats[0];\n  if (!newChat || !(newChat instanceof GramJs.Chat)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Created chat not found', result);\n    }\n    return undefined;\n  }\n\n  return buildApiChatFromPreview(newChat);\n}\n\nexport async function editChatPhoto({\n  chatId, accessHash, photo,\n}: {\n  chatId: string; accessHash?: string; photo?: File | ApiPhoto;\n}) {\n  const inputEntity = buildInputEntity(chatId, accessHash);\n  let inputPhoto: GramJs.TypeInputChatPhoto;\n  if (photo instanceof File) {\n    const uploadedPhoto = await uploadFile(photo);\n    inputPhoto = new GramJs.InputChatUploadedPhoto({\n      file: uploadedPhoto,\n    });\n  } else if (photo) {\n    const photoId = buildInputPhoto(photo);\n    if (!photoId) return false;\n    inputPhoto = new GramJs.InputChatPhoto({\n      id: photoId,\n    });\n  } else {\n    inputPhoto = new GramJs.InputChatPhotoEmpty();\n  }\n  return invokeRequest(\n    inputEntity instanceof GramJs.InputChannel\n      ? new GramJs.channels.EditPhoto({\n        channel: inputEntity as GramJs.InputChannel,\n        photo: inputPhoto,\n      })\n      : new GramJs.messages.EditChatPhoto({\n        chatId: inputEntity as BigInt.BigInteger,\n        photo: inputPhoto,\n      }),\n    true,\n  );\n}\n\nexport async function toggleChatPinned({\n  chat,\n  shouldBePinned,\n}: {\n  chat: ApiChat;\n  shouldBePinned: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.ToggleDialogPin({\n    peer: new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    }),\n    pinned: shouldBePinned || undefined,\n  }));\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChatPinned',\n      id: chat.id,\n      isPinned: shouldBePinned,\n    });\n  }\n}\n\nexport function toggleChatArchived({\n  chat, folderId,\n}: {\n  chat: ApiChat; folderId: number;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.folders.EditPeerFolders({\n    folderPeers: [new GramJs.InputFolderPeer({\n      peer: buildInputPeer(id, accessHash),\n      folderId,\n    })],\n  }), true);\n}\n\nexport async function fetchChatFolders() {\n  const result = await invokeRequest(new GramJs.messages.GetDialogFilters());\n\n  if (!result) {\n    return undefined;\n  }\n\n  const defaultFolderPosition = result.findIndex((folder) => folder instanceof GramJs.DialogFilterDefault);\n  const dialogFilters = result.filter((df): df is GramJs.DialogFilter => df instanceof GramJs.DialogFilter);\n  const orderedIds = dialogFilters.map(({ id }) => id);\n  if (defaultFolderPosition !== -1) {\n    orderedIds.splice(defaultFolderPosition, 0, ALL_FOLDER_ID);\n  }\n  return {\n    byId: buildCollectionByKey(\n      dialogFilters\n        .map(buildApiChatFolder), 'id',\n    ) as Record<number, ApiChatFolder>,\n    orderedIds,\n  };\n}\n\nexport async function fetchRecommendedChatFolders() {\n  const results = await invokeRequest(new GramJs.messages.GetSuggestedDialogFilters());\n\n  if (!results) {\n    return undefined;\n  }\n\n  return results.map(buildApiChatFolderFromSuggested).filter(Boolean);\n}\n\nexport async function editChatFolder({\n  id,\n  folderUpdate,\n}: {\n  id: number;\n  folderUpdate: ApiChatFolder;\n}) {\n  // // Telegram ignores excluded chats if they also present in the included list\n  if(folderUpdate.excludedChatIds){\n    folderUpdate.excludedChatIds = folderUpdate.excludedChatIds.filter((chatId) => {\n      return !folderUpdate.includedChatIds.includes(chatId);\n    });\n  }\n\n  // const filter = buildFilterFromApiFolder(folderUpdate);\n\n  // const isActionSuccessful = await invokeRequest(new GramJs.messages.UpdateDialogFilter({\n  //   id,\n  //   filter,\n  // }));\n  const isActionSuccessful = true;\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChatFolder',\n      id,\n      folder: folderUpdate,\n    });\n  }\n}\n\nexport async function deleteChatFolder(id: number) {\n\n  onUpdate({\n    '@type': 'updateChatFolder',\n    id,\n    folder: undefined,\n  });\n\n  //\n  // const isActionSuccessful = await invokeRequest(new GramJs.messages.UpdateDialogFilter({\n  //   id,\n  //   filter: undefined,\n  // }));\n  // const recommendedChatFolders = await fetchRecommendedChatFolders();\n  //\n  // if (isActionSuccessful) {\n  //   onUpdate({\n  //     '@type': 'updateChatFolder',\n  //     id,\n  //     folder: undefined,\n  //   });\n  // }\n  // if (recommendedChatFolders) {\n  //   onUpdate({\n  //     '@type': 'updateRecommendedChatFolders',\n  //     folders: recommendedChatFolders,\n  //   });\n  // }\n}\n\nexport function sortChatFolders(ids: number[]) {\n  onUpdate({\n    '@type': 'updateChatFoldersOrder',\n    orderedIds:ids\n  });\n  // return invokeRequest(new GramJs.messages.UpdateDialogFiltersOrder({\n  //   order: ids,\n  // }));\n}\n\nexport async function toggleDialogUnread({\n  chat, hasUnreadMark,\n}: {\n  chat: ApiChat; hasUnreadMark: boolean | undefined;\n}) {\n  const { id, accessHash } = chat;\n\n  const isActionSuccessful = await invokeRequest(new GramJs.messages.MarkDialogUnread({\n    peer: new GramJs.InputDialogPeer({\n      peer: buildInputPeer(id, accessHash),\n    }),\n    unread: hasUnreadMark || undefined,\n  }));\n\n  if (isActionSuccessful) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: chat.id,\n      chat: { hasUnreadMark },\n    });\n  }\n}\n\nexport async function getChatByPhoneNumber(phoneNumber: string) {\n  const result = await invokeRequest(new GramJs.contacts.ResolvePhone({\n    phone: phoneNumber,\n  }));\n\n  return processResolvedPeer(result);\n}\n\nexport async function getChatByUsername(username: string) {\n  const result = await invokeRequest(new GramJs.contacts.ResolveUsername({\n    username,\n  }));\n\n  return processResolvedPeer(result);\n}\n\nfunction processResolvedPeer(result?: GramJs.contacts.TypeResolvedPeer) {\n  if (!result) {\n    return undefined;\n  }\n\n  const { users, chats } = result;\n\n  const chat = chats.length\n    ? buildApiChatFromPreview(chats[0])\n    : buildApiChatFromPreview(users[0]);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    chat,\n    user: buildApiUser(users[0]),\n  };\n}\n\nexport function togglePreHistoryHidden({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  return invokeRequest(new GramJs.channels.TogglePreHistoryHidden({\n    channel: channel as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), true);\n}\n\nexport function updateChatDefaultBannedRights({\n  chat, bannedRights,\n}: { chat: ApiChat; bannedRights: ApiChatBannedRights }) {\n  const { id, accessHash } = chat;\n  const peer = buildInputPeer(id, accessHash);\n\n  return invokeRequest(new GramJs.messages.EditChatDefaultBannedRights({\n    peer,\n    bannedRights: buildChatBannedRights(bannedRights),\n  }), true);\n}\n\nexport function updateChatMemberBannedRights({\n  chat, user, bannedRights, untilDate,\n}: { chat: ApiChat; user: ApiUser; bannedRights: ApiChatBannedRights; untilDate?: number }) {\n  const channel = buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel;\n  const participant = buildInputPeer(user.id, user.accessHash) as GramJs.InputUser;\n\n  return invokeRequest(new GramJs.channels.EditBanned({\n    channel,\n    participant,\n    bannedRights: buildChatBannedRights(bannedRights, untilDate),\n  }), true);\n}\n\nexport function updateChatAdmin({\n  chat, user, adminRights, customTitle = '',\n}: { chat: ApiChat; user: ApiUser; adminRights: ApiChatAdminRights; customTitle?: string }) {\n  const channel = buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel;\n  const userId = buildInputEntity(user.id, user.accessHash) as GramJs.InputUser;\n\n  return invokeRequest(new GramJs.channels.EditAdmin({\n    channel,\n    userId,\n    adminRights: buildChatAdminRights(adminRights),\n    rank: customTitle,\n  }), true);\n}\n\nexport async function updateChatTitle(chat: ApiChat, title: string) {\n  const inputEntity = buildInputEntity(chat.id, chat.accessHash);\n  await invokeRequest(\n    inputEntity instanceof GramJs.InputChannel\n      ? new GramJs.channels.EditTitle({\n        channel: inputEntity as GramJs.InputChannel,\n        title,\n      }) : new GramJs.messages.EditChatTitle({\n        chatId: inputEntity as BigInt.BigInteger,\n        title,\n      }),\n    true,\n  );\n}\n\nexport async function updateChatAbout(chat: ApiChat, about: string) {\n  const result = await invokeRequest(new GramJs.messages.EditChatAbout({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    about,\n  }));\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'updateChatFullInfo',\n    id: chat.id,\n    fullInfo: {\n      about,\n    },\n  });\n}\n\nexport function toggleSignatures({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n  const channel = buildInputEntity(id, accessHash);\n\n  return invokeRequest(new GramJs.channels.ToggleSignatures({\n    channel: channel as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), true);\n}\n\ntype ChannelMembersFilter =\n  'kicked'\n  | 'admin'\n  | 'recent';\n\nexport async function fetchMembers(\n  chatId: string,\n  accessHash: string,\n  memberFilter: ChannelMembersFilter = 'recent',\n  offset?: number,\n) {\n  let filter: GramJs.TypeChannelParticipantsFilter;\n\n  switch (memberFilter) {\n    case 'kicked':\n      filter = new GramJs.ChannelParticipantsKicked({ q: '' });\n      break;\n    case 'admin':\n      filter = new GramJs.ChannelParticipantsAdmins();\n      break;\n    default:\n      filter = new GramJs.ChannelParticipantsRecent();\n      break;\n  }\n\n  const result = await invokeRequest(new GramJs.channels.GetParticipants({\n    channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n    filter,\n    offset,\n    limit: MEMBERS_LOAD_SLICE,\n  }));\n\n  if (!result || result instanceof GramJs.channels.ChannelParticipantsNotModified) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n  const { users, userStatusesById } = buildApiUsersAndStatuses(result.users);\n\n  return {\n    members: buildChatMembers(result),\n    users,\n    userStatusesById,\n  };\n}\n\nexport async function fetchGroupsForDiscussion() {\n  const result = await invokeRequest(new GramJs.channels.GetGroupsForDiscussion());\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return result.chats.map((chat) => buildApiChatFromPreview(chat));\n}\n\nexport function setDiscussionGroup({\n  channel,\n  chat,\n}: {\n  channel: ApiChat;\n  chat?: ApiChat;\n}) {\n  return invokeRequest(new GramJs.channels.SetDiscussionGroup({\n    broadcast: buildInputPeer(channel.id, channel.accessHash),\n    group: chat ? buildInputPeer(chat.id, chat.accessHash) : new GramJs.InputChannelEmpty(),\n  }), true);\n}\n\nexport async function migrateChat(chat: ApiChat) {\n  const result = await invokeRequest(\n    new GramJs.messages.MigrateChat({ chatId: buildInputEntity(chat.id) as BigInt.BigInteger }),\n    undefined,\n    true,\n  );\n\n  // `migrateChat` can return a lot of different update types according to docs,\n  // but currently chat migrations returns only `Updates` type.\n  // Errors are added to catch unexpected cases in future testing\n  if (!result || !(result instanceof GramJs.Updates)) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('Unexpected channel creation update', result);\n    }\n\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return buildApiChatFromPreview(result.chats[1]);\n}\n\nexport async function openChatByInvite(hash: string) {\n  const result = await invokeRequest(new GramJs.messages.CheckChatInvite({ hash }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  let chat: ApiChat | undefined;\n\n  if (result instanceof GramJs.ChatInvite) {\n    const {\n      photo, participantsCount, title, channel, requestNeeded, about, megagroup,\n    } = result;\n\n    if (photo instanceof GramJs.Photo) {\n      addPhotoToLocalDb(result.photo);\n    }\n\n    onUpdate({\n      '@type': 'showInvite',\n      data: {\n        title,\n        about,\n        hash,\n        participantsCount,\n        isChannel: channel && !megagroup,\n        isRequestNeeded: requestNeeded,\n        ...(photo instanceof GramJs.Photo && { photo: buildApiPhoto(photo) }),\n      },\n    });\n  } else {\n    chat = buildApiChatFromPreview(result.chat);\n\n    if (chat) {\n      onUpdate({\n        '@type': 'updateChat',\n        id: chat.id,\n        chat,\n      });\n    }\n  }\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return { chatId: chat.id };\n}\n\nexport async function addChatMembers(chat: ApiChat, users: ApiUser[], noErrorUpdate = false) {\n  try {\n    if (chat.type === 'chatTypeChannel' || chat.type === 'chatTypeSuperGroup') {\n      return await invokeRequest(new GramJs.channels.InviteToChannel({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        users: users.map((user) => buildInputEntity(user.id, user.accessHash)) as GramJs.InputUser[],\n      }), true, noErrorUpdate);\n    }\n\n    return await Promise.all(users.map((user) => {\n      return invokeRequest(new GramJs.messages.AddChatUser({\n        chatId: buildInputEntity(chat.id) as BigInt.BigInteger,\n        userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n      }), true, noErrorUpdate);\n    }));\n  } catch (err) {\n    // `noErrorUpdate` will cause an exception which we don't want either\n    return undefined;\n  }\n}\n\nexport function deleteChatMember(chat: ApiChat, user: ApiUser) {\n  if (chat.type === 'chatTypeChannel' || chat.type === 'chatTypeSuperGroup') {\n    return updateChatMemberBannedRights({\n      chat,\n      user,\n      bannedRights: {\n        viewMessages: true,\n        sendMessages: true,\n        sendMedia: true,\n        sendStickers: true,\n        sendGifs: true,\n        sendGames: true,\n        sendInline: true,\n        embedLinks: true,\n        sendPolls: true,\n        changeInfo: true,\n        inviteUsers: true,\n        pinMessages: true,\n        manageTopics: true,\n        sendPhotos: true,\n        sendVideos: true,\n        sendRoundvideos: true,\n        sendAudios: true,\n        sendVoices: true,\n        sendDocs: true,\n        sendPlain: true,\n      },\n      untilDate: MAX_INT_32,\n    });\n  } else {\n    return invokeRequest(new GramJs.messages.DeleteChatUser({\n      chatId: buildInputEntity(chat.id) as BigInt.BigInteger,\n      userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    }), true);\n  }\n}\n\nexport function toggleJoinToSend(chat: ApiChat, isEnabled: boolean) {\n  return invokeRequest(new GramJs.channels.ToggleJoinToSend({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), true);\n}\n\nexport function toggleJoinRequest(chat: ApiChat, isEnabled: boolean) {\n  return invokeRequest(new GramJs.channels.ToggleJoinRequest({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    enabled: isEnabled,\n  }), true);\n}\n\nfunction preparePeers(\n  result: GramJs.messages.Dialogs | GramJs.messages.DialogsSlice | GramJs.messages.PeerDialogs,\n  currentStore?: Record<string, GramJs.TypeChat | GramJs.TypeUser>,\n) {\n  const store: Record<string, GramJs.TypeChat | GramJs.TypeUser> = {};\n\n  result.chats?.forEach((chat) => {\n    const key = `chat${chat.id}`;\n\n    if (currentStore?.[key] && 'min' in chat && chat.min) {\n      return;\n    }\n\n    store[key] = chat;\n  });\n\n  result.users?.forEach((user) => {\n    const key = `user${user.id}`;\n\n    if (currentStore?.[key] && 'min' in user && user.min) {\n      return;\n    }\n\n    store[key] = user;\n  });\n\n  return store;\n}\n\nfunction updateLocalDb(result: (\n  GramJs.messages.Dialogs | GramJs.messages.DialogsSlice | GramJs.messages.PeerDialogs |\n  GramJs.messages.ChatFull | GramJs.contacts.Found |\n  GramJs.contacts.ResolvedPeer | GramJs.channels.ChannelParticipants |\n  GramJs.messages.Chats | GramJs.messages.ChatsSlice | GramJs.TypeUpdates | GramJs.messages.ForumTopics\n)) {\n  if ('users' in result) {\n    addEntitiesWithPhotosToLocalDb(result.users);\n  }\n\n  if ('chats' in result) {\n    addEntitiesWithPhotosToLocalDb(result.chats);\n  }\n\n  if ('messages' in result) {\n    result.messages.forEach((message) => {\n      if (message instanceof GramJs.Message && isMessageWithMedia(message)) {\n        addMessageToLocalDb(message);\n      }\n    });\n  }\n}\n\nexport async function importChatInvite({ hash }: { hash: string }) {\n  const updates = await invokeRequest(new GramJs.messages.ImportChatInvite({ hash }));\n  if (!(updates instanceof GramJs.Updates) || !updates.chats.length) {\n    return undefined;\n  }\n\n  return buildApiChatFromPreview(updates.chats[0]);\n}\n\nexport function setChatEnabledReactions({\n  chat, enabledReactions,\n}: {\n  chat: ApiChat; enabledReactions?: ApiChatReactions;\n}) {\n  return invokeRequest(new GramJs.messages.SetChatAvailableReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    availableReactions: buildInputChatReactions(enabledReactions),\n  }), true);\n}\n\nexport function toggleIsProtected({\n  chat, isProtected,\n}: { chat: ApiChat; isProtected: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.messages.ToggleNoForwards({\n    peer: buildInputPeer(id, accessHash),\n    enabled: isProtected,\n  }), true);\n}\n\nexport function toggleParticipantsHidden({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.ToggleParticipantsHidden({\n    channel: buildInputPeer(id, accessHash),\n    enabled: isEnabled,\n  }), true);\n}\n\nexport function toggleForum({\n  chat, isEnabled,\n}: { chat: ApiChat; isEnabled: boolean }) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.ToggleForum({\n    channel: buildInputPeer(id, accessHash),\n    enabled: isEnabled,\n  }), true);\n}\n\nexport async function createTopic({\n  chat, title, iconColor, iconEmojiId, sendAs,\n}: {\n  chat: ApiChat;\n  title: string;\n  iconColor?: number;\n  iconEmojiId?: string;\n  sendAs?: ApiUser | ApiChat;\n}) {\n  const { id, accessHash } = chat;\n\n  const updates = await invokeRequest(new GramJs.channels.CreateForumTopic({\n    channel: buildInputPeer(id, accessHash),\n    title,\n    iconColor,\n    iconEmojiId: iconEmojiId ? BigInt(iconEmojiId) : undefined,\n    sendAs: sendAs ? buildInputPeer(sendAs.id, sendAs.accessHash) : undefined,\n    randomId: generateRandomBigInt(),\n  }));\n\n  if (!(updates instanceof GramJs.Updates) || !updates.updates.length) {\n    return undefined;\n  }\n\n  // Finding topic id in updates\n  return updates.updates?.find((update): update is GramJs.UpdateMessageID => (\n    update instanceof GramJs.UpdateMessageID\n  ))?.id;\n}\n\nexport async function fetchTopics({\n  chat, query, offsetTopicId, offsetId, offsetDate, limit = TOPICS_SLICE,\n}: {\n  chat: ApiChat;\n  query?: string;\n  offsetTopicId?: number;\n  offsetId?: number;\n  offsetDate?: number;\n  limit?: number;\n}): Promise<{\n    topics: ApiTopic[];\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    count: number;\n    shouldOrderByCreateDate?: boolean;\n    draftsById: Record<number, ReturnType<typeof buildMessageDraft>>;\n    readInboxMessageIdByTopicId: Record<number, number>;\n  } | undefined> {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.channels.GetForumTopics({\n    channel: buildInputPeer(id, accessHash),\n    limit,\n    q: query,\n    offsetTopic: offsetTopicId,\n    offsetId,\n    offsetDate,\n  }));\n\n  if (!result) return undefined;\n\n  updateLocalDb(result);\n\n  const { count, orderByCreateDate } = result;\n\n  const topics = result.topics.map(buildApiTopic).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const draftsById = result.topics.reduce((acc, topic) => {\n    if (topic instanceof GramJs.ForumTopic && topic.draft) {\n      acc[topic.id] = buildMessageDraft(topic.draft);\n    }\n    return acc;\n  }, {} as Record<number, ReturnType<typeof buildMessageDraft>>);\n  const readInboxMessageIdByTopicId = result.topics.reduce((acc, topic) => {\n    if (topic instanceof GramJs.ForumTopic && topic.readInboxMaxId) {\n      acc[topic.id] = topic.readInboxMaxId;\n    }\n    return acc;\n  }, {} as Record<number, number>);\n\n  return {\n    topics,\n    messages,\n    users,\n    chats,\n    // Include general topic\n    count: count + 1,\n    shouldOrderByCreateDate: orderByCreateDate,\n    draftsById,\n    readInboxMessageIdByTopicId,\n  };\n}\n\nexport async function fetchTopicById({\n  chat, topicId,\n}: {\n  chat: ApiChat;\n  topicId: number;\n}): Promise<{\n    topic: ApiTopic;\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n  } | undefined> {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.channels.GetForumTopicsByID({\n    channel: buildInputPeer(id, accessHash),\n    topics: [topicId],\n  }));\n\n  if (!result?.topics.length || !(result.topics[0] instanceof GramJs.ForumTopic)) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    topic: buildApiTopic(result.topics[0])!,\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport function deleteTopic({\n  chat, topicId,\n}: {\n  chat: ApiChat;\n  topicId: number;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.DeleteTopicHistory({\n    channel: buildInputPeer(id, accessHash),\n    topMsgId: topicId,\n  }), true);\n}\n\nexport function togglePinnedTopic({\n  chat, topicId, isPinned,\n}: {\n  chat: ApiChat;\n  topicId: number;\n  isPinned: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.UpdatePinnedForumTopic({\n    channel: buildInputPeer(id, accessHash),\n    topicId,\n    pinned: isPinned,\n  }), true);\n}\n\nexport function editTopic({\n  chat, topicId, title, iconEmojiId, isClosed, isHidden,\n}: {\n  chat: ApiChat;\n  topicId: number;\n  title?: string;\n  iconEmojiId?: string;\n  isClosed?: boolean;\n  isHidden?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.channels.EditForumTopic({\n    channel: buildInputPeer(id, accessHash),\n    topicId,\n    title,\n    iconEmojiId: topicId !== GENERAL_TOPIC_ID && iconEmojiId ? BigInt(iconEmojiId) : undefined,\n    closed: isClosed,\n    hidden: isHidden,\n  }), true);\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { LoadChatsReq_Type } from './types';\n\nexport default class LoadChatsReq extends BaseMsg {\n  public msg?: LoadChatsReq_Type\n  constructor(msg?: LoadChatsReq_Type) {\n    super('PTP.Chats.LoadChatsReq', msg);\n    this.setCommandId(ActionCommands.CID_LoadChatsReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): LoadChatsReq_Type {\n    return new LoadChatsReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { LoadChatsRes_Type } from './types';\n\nexport default class LoadChatsRes extends BaseMsg {\n  public msg?: LoadChatsRes_Type\n  constructor(msg?: LoadChatsRes_Type) {\n    super('PTP.Chats.LoadChatsRes', msg);\n    this.setCommandId(ActionCommands.CID_LoadChatsRes);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): LoadChatsRes_Type {\n    return new LoadChatsRes().decode(pdu.body());\n  }\n}\n","import {Api as GramJs} from '../../../lib/gramjs';\nimport type {\n  ApiAttachment,\n  ApiBotInfo,\n  ApiChat,\n  ApiContact,\n  ApiFormattedText,\n  ApiGlobalMessageSearchType,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageSearchType,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPoll,\n  ApiReportReason,\n  ApiSendMessageAction,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  OnApiUpdate,\n} from '../../types';\nimport {ApiKeyboardButtons, MAIN_THREAD_ID, MESSAGE_DELETED,} from '../../types';\n\nimport {\n  ALL_FOLDER_ID, CHATGPT_PROXY_API,\n  DEBUG,\n  GIF_MIME_TYPE,\n  MAX_INT_32,\n  MENTION_UNREAD_SLICE,\n  MESSAGE_LIST_SLICE,\n  PINNED_MESSAGES_LIMIT,\n  REACTION_UNREAD_SLICE,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  UPLOAD_WORKERS,\n} from '../../../config';\nimport {invokeRequest} from './client';\nimport {\n  buildApiFormattedText,\n  buildApiMessage,\n  buildApiSponsoredMessage,\n  buildLocalForwardedMessage,\n  buildLocalMessage,\n  buildWebPage,\n} from '../apiBuilders/messages';\nimport {buildApiUser} from '../apiBuilders/users';\nimport {\n  buildInputEntity,\n  buildInputMediaDocument,\n  buildInputPeer,\n  buildInputPoll,\n  buildInputPollFromExisting,\n  buildInputReportReason,\n  buildInputTextWithEntities,\n  buildMtpMessageEntity,\n  buildSendMessageAction,\n  generateRandomBigInt,\n  getEntityTypeById,\n  isMessageWithMedia,\n  isServiceMessageWithMedia,\n} from '../gramjsBuilders';\nimport localDb from '../localDb';\nimport {buildApiChatFromPreview, buildApiSendAsPeerId} from '../apiBuilders/chats';\nimport {blobToDataUri, fetchBlob, fetchFile} from '../../../util/files';\nimport {\n  addEntitiesWithPhotosToLocalDb,\n  addMessageToLocalDb,\n  deserializeBytes,\n  resolveMessageApiChatId,\n} from '../helpers';\nimport {interpolateArray} from '../../../util/waveform';\nimport {requestChatUpdate} from './chats';\nimport {getEmojiOnlyCountForMessage} from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport {getServerTimeOffset} from '../../../util/serverTime';\nimport {uploadFileV1} from \"../../../lib/gramjs/client/uploadFile\";\nimport {MsgListReq, MsgListRes} from \"../../../lib/ptp/protobuf/PTPMsg\";\nimport Account from '../../../worker/share/Account';\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport MsgWorker from \"../../../worker/msg/MsgWorker\";\nimport {ControllerPool, requestChatStream} from \"../../../lib/ptp/functions/requests\";\nimport ChatMsg from \"../../../worker/msg/ChatMsg\";\nimport {ChatModelConfig} from \"../../../worker/setting\";\n\nconst FAST_SEND_TIMEOUT = 1000;\nconst INPUT_WAVEFORM_LENGTH = 63;\n\ntype TranslateTextParams = ({\n  text: ApiFormattedText[];\n} | {\n  chat: ApiChat;\n  messageIds: number[];\n  messages?:Record<number, ApiFormattedText>\n}) & {\n  toLanguageCode: string;\n};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchMessages({\n  chat,\n  threadId,\n  offsetId,\n  lastMessageId,isUp,\n  ...pagination\n}: {\n  chat: ApiChat;\n  threadId?: number;\n  offsetId?: number;\n  addOffset?: number;\n  limit: number;\n  lastMessageId?:number,\n  isUp?:boolean\n}) {\n  return\n  // const pdu = await Account.getCurrentAccount()?.sendPduWithCallback(new MsgListReq({\n  //   lastMessageId:lastMessageId!,\n  //   chatId:chat.id,\n  //   limit: MESSAGE_LIST_SLICE,\n  //   isUp\n  // }).pack());\n  // if(!pdu){\n  //   return\n  // }\n  // const res = MsgListRes.parseMsg(pdu!)\n  // if(res.err !== ERR.NO_ERROR){\n  //   return;\n  // }\n  // const result = JSON.parse(res!.payload)\n  // if(!result){\n  //   return\n  // }\n  // return result\n  // const RequestClass = threadId === MAIN_THREAD_ID ? GramJs.messages.GetHistory : GramJs.messages.GetReplies;\n  // let result;\n  //\n  // try {\n  //   result = await invokeRequest(new RequestClass({\n  //     peer: buildInputPeer(chat.id, chat.accessHash),\n  //     ...(threadId !== MAIN_THREAD_ID && {\n  //       msgId: Number(threadId),\n  //     }),\n  //     ...(offsetId && {\n  //       // Workaround for local message IDs overflowing some internal `Buffer` range check\n  //       offsetId: Math.min(offsetId, MAX_INT_32),\n  //     }),\n  //     ...pagination,\n  //   }), undefined, true);\n  // } catch (err: any) {\n  //   if (err.message === 'CHANNEL_PRIVATE') {\n  //     onUpdate({\n  //       '@type': 'updateChat',\n  //       id: chat.id,\n  //       chat: {\n  //         isRestricted: true,\n  //       },\n  //     });\n  //   }\n  // }\n  //\n  // if (\n  //   !result\n  //   || result instanceof GramJs.messages.MessagesNotModified\n  //   || !result.messages\n  // ) {\n  //   return undefined;\n  // }\n  //\n  // updateLocalDb(result);\n  //\n  // const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  // const users = result.users.map(buildApiUser).filter(Boolean);\n  // const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  // const repliesThreadInfos = messages.map(({ repliesThreadInfo }) => repliesThreadInfo).filter(Boolean);\n  //\n  // return {\n  //   messages,\n  //   users,\n  //   chats,\n  //   repliesThreadInfos,\n  // };\n}\n\nexport async function fetchMessage({ chat, messageId }: { chat: ApiChat; messageId: number }) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  let result;\n  try {\n    result = await invokeRequest(\n      isChannel\n        ? new GramJs.channels.GetMessages({\n          channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        })\n        : new GramJs.messages.GetMessages({\n          id: [new GramJs.InputMessageID({ id: messageId })],\n        }),\n      undefined,\n      true,\n    );\n  } catch (err: any) {\n    const { message } = err;\n\n    // When fetching messages for the bot @replies, there may be situations when the user was banned\n    // in the comment group or this group was deleted\n    if (message !== 'CHANNEL_PRIVATE') {\n      onUpdate({\n        '@type': 'error',\n        error: {\n          message,\n          isSlowMode: false,\n          hasErrorKey: true,\n        },\n      });\n    }\n  }\n\n  if (!result || result instanceof GramJs.messages.MessagesNotModified) {\n    return undefined;\n  }\n\n  const mtpMessage = result.messages[0];\n  if (!mtpMessage) {\n    return undefined;\n  }\n\n  if (mtpMessage instanceof GramJs.MessageEmpty) {\n    return MESSAGE_DELETED;\n  }\n\n  const message = mtpMessage && buildApiMessage(mtpMessage);\n  if (!message) {\n    return undefined;\n  }\n\n  if (mtpMessage instanceof GramJs.Message) {\n    addMessageToLocalDb(mtpMessage);\n  }\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n\n  return { message, users };\n}\n\nlet queue = Promise.resolve();\n\n\nexport function sendMessage(\n  {\n    chat,\n    text,\n    entities,\n    replyingTo,\n    replyingToTopId,\n    attachment,\n    sticker,\n    gif,\n    poll,\n    contact,\n    isSilent,\n    scheduledAt,\n    groupedId,\n    noWebPage,\n    sendAs,\n    shouldUpdateStickerSetsOrder,\n    botInfo,\n  }: {\n    chat: ApiChat;\n    text?: string;\n    entities?: ApiMessageEntity[];\n    replyingTo?: number;\n    replyingToTopId?: number;\n    attachment?: ApiAttachment;\n    sticker?: ApiSticker;\n    gif?: ApiVideo;\n    poll?: ApiNewPoll;\n    contact?: ApiContact;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    groupedId?: string;\n    noWebPage?: boolean;\n    sendAs?: ApiUser | ApiChat;\n    shouldUpdateStickerSetsOrder?: boolean;\n    botInfo?: ApiBotInfo;\n  },\n  onProgress?: ApiOnProgress,\n) {\n  const localMessage = buildLocalMessage(\n    chat,\n    text,\n    entities,\n    replyingTo,\n    replyingToTopId,\n    attachment,\n    sticker,\n    gif,\n    poll,\n    contact,\n    groupedId,\n    scheduledAt,\n    sendAs,\n  );\n\n  onUpdate({\n    '@type': localMessage.isScheduled ? 'newScheduledMessage' : 'newMessage',\n    id: localMessage.id,\n    chatId: chat.id,\n    message: {\n      ...localMessage,\n      sendingState: 'messageSendingStatePending',\n    },\n  });\n\n\n  const randomId = generateRandomBigInt();\n  localDb.localMessages[String(randomId)] = localMessage;\n\n  if (groupedId) {\n    return sendGroupedMedia({\n      chat,\n      text,\n      entities,\n      replyingTo,\n      replyingToTopId,\n      attachment: attachment!,\n      groupedId,\n      isSilent,\n      scheduledAt,\n    }, randomId, localMessage, onProgress);\n  }\n\n  const prevQueue = queue;\n  queue = (async () => {\n    let media: GramJs.TypeInputMedia | undefined;\n    if (attachment) {\n      try {\n        media = await uploadMedia(localMessage, attachment, onProgress!);\n      } catch (err) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.warn(err);\n        }\n        await prevQueue;\n        return;\n      }\n    } else if (sticker) {\n      media = buildInputMediaDocument(sticker);\n    } else if (gif) {\n      media = buildInputMediaDocument(gif);\n    } else if (poll) {\n      media = buildInputPoll(poll, randomId);\n    } else if (contact) {\n      media = new GramJs.InputMediaContact({\n        phoneNumber: contact.phoneNumber,\n        firstName: contact.firstName,\n        lastName: contact.lastName,\n        vcard: '',\n      });\n    }\n    await prevQueue;\n    await new MsgWorker({\n      chat,\n      msgSend:localMessage,\n      attachment,\n      media,\n      botInfo,\n    }).process()\n  })();\n\n  return queue;\n}\n\nconst groupedUploads: Record<string, {\n  counter: number;\n  singleMediaByIndex: Record<number, GramJs.InputSingleMedia>;\n}> = {};\n\nfunction sendGroupedMedia(\n  {\n    chat,\n    text,\n    entities,\n    replyingTo,\n    replyingToTopId,\n    attachment,\n    groupedId,\n    isSilent,\n    scheduledAt,\n    sendAs,\n  }: {\n    chat: ApiChat;\n    text?: string;\n    entities?: ApiMessageEntity[];\n    replyingTo?: number;\n    replyingToTopId?: number;\n    attachment: ApiAttachment;\n    groupedId: string;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    sendAs?: ApiUser | ApiChat;\n  },\n  randomId: GramJs.long,\n  localMessage: ApiMessage,\n  onProgress?: ApiOnProgress,\n) {\n  let groupIndex = -1;\n  if (!groupedUploads[groupedId]) {\n    groupedUploads[groupedId] = {\n      counter: 0,\n      singleMediaByIndex: {},\n    };\n  }\n\n  groupIndex = groupedUploads[groupedId].counter++;\n\n  const prevQueue = queue;\n  queue = (async () => {\n    let media;\n    try {\n      media = await uploadMedia(localMessage, attachment, onProgress!);\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.warn(err);\n      }\n\n      groupedUploads[groupedId].counter--;\n\n      await prevQueue;\n\n      return;\n    }\n\n    // const inputMedia = await fetchInputMedia(\n    //   buildInputPeer(chat.id, chat.accessHash),\n    //   media as GramJs.InputMediaUploadedPhoto | GramJs.InputMediaUploadedDocument,\n    // );\n\n    await prevQueue;\n\n    // if (!inputMedia) {\n    //   groupedUploads[groupedId].counter--;\n    //\n    //   if (DEBUG) {\n    //     // eslint-disable-next-line no-console\n    //     console.warn('Failed to upload grouped media');\n    //   }\n    //\n    //   return;\n    // }\n\n    // groupedUploads[groupedId].singleMediaByIndex[groupIndex] = new GramJs.InputSingleMedia({\n    //   media: inputMedia,\n    //   randomId,\n    //   message: text || '',\n    //   entities: entities ? entities.map(buildMtpMessageEntity) : undefined,\n    // });\n    //\n    // if (Object.keys(groupedUploads[groupedId].singleMediaByIndex).length < groupedUploads[groupedId].counter) {\n    //   return;\n    // }\n\n    // const { singleMediaByIndex } = groupedUploads[groupedId];\n    delete groupedUploads[groupedId];\n    if (onProgress) {\n      let fileId: string | undefined;\n      //@ts-ignore\n      if(media && media!.file && media.file.id) {\n        //@ts-ignore\n        fileId = media!.file.id.toString()\n      }\n\n      if(localMessage.content.photo || localMessage.content.document){\n\n        const getPhotoInfo = async (attachment:ApiAttachment)=>{\n          const dataUri = await blobToDataUri(await fetchBlob(attachment.thumbBlobUrl! ));\n          const size = {\n            \"width\": attachment.quick!.width,\n            \"height\":  attachment.quick!.height,\n          }\n          return{\n            dataUri,size\n          }\n        }\n\n        if(localMessage.content.document){\n          localMessage.content.document.id = fileId\n\n          if(localMessage.content.document.mimeType.split(\"/\")[0] === \"image\"){\n            const {size,dataUri} = await getPhotoInfo(attachment);\n            localMessage.content.document.mediaType = \"photo\";\n            localMessage.content.document.previewBlobUrl = undefined;\n            localMessage.content.document.thumbnail = {\n              ...size,\n              dataUri\n            }\n            localMessage.content.document.mediaSize = size;\n          }\n        }\n\n        if(localMessage.content.photo){\n          const {size,dataUri} = await getPhotoInfo(attachment);\n          localMessage.content.photo = {\n            isSpoiler:localMessage.content.photo.isSpoiler,\n            id:fileId!,\n            \"thumbnail\": {\n              ...size,\n              dataUri\n            },\n            \"sizes\": [\n              {\n                ...size,\n                \"type\": \"y\"\n              }\n            ],\n          }\n        }\n      }\n\n      await onProgress(2, localMessage)\n    }\n    // await invokeRequest(new GramJs.messages.SendMultiMedia({\n    //   clearDraft: true,\n    //   peer: buildInputPeer(chat.id, chat.accessHash),\n    //   multiMedia: Object.values(singleMediaByIndex), // Object keys are usually ordered\n    //   replyToMsgId: replyingTo,\n    //   ...(replyingToTopId && { topMsgId: replyingToTopId }),\n    //   ...(isSilent && { silent: isSilent }),\n    //   ...(scheduledAt && { scheduleDate: scheduledAt }),\n    //   ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n    // }), true);\n  })();\n\n  return queue;\n}\n\nasync function fetchInputMedia(\n  peer: GramJs.TypeInputPeer,\n  uploadedMedia: GramJs.InputMediaUploadedPhoto | GramJs.InputMediaUploadedDocument,\n) {\n  const messageMedia = await invokeRequest(new GramJs.messages.UploadMedia({\n    peer,\n    media: uploadedMedia,\n  }));\n  const isSpoiler = uploadedMedia.spoiler;\n\n  if ((\n    messageMedia instanceof GramJs.MessageMediaPhoto\n    && messageMedia.photo\n    && messageMedia.photo instanceof GramJs.Photo)\n  ) {\n    const { photo: { id, accessHash, fileReference } } = messageMedia;\n\n    return new GramJs.InputMediaPhoto({\n      id: new GramJs.InputPhoto({ id, accessHash, fileReference }),\n      spoiler: isSpoiler,\n    });\n  }\n\n  if ((\n    messageMedia instanceof GramJs.MessageMediaDocument\n    && messageMedia.document\n    && messageMedia.document instanceof GramJs.Document)\n  ) {\n    const { document: { id, accessHash, fileReference } } = messageMedia;\n\n    return new GramJs.InputMediaDocument({\n      id: new GramJs.InputDocument({ id, accessHash, fileReference }),\n      spoiler: isSpoiler,\n    });\n  }\n\n  return undefined;\n}\n\nexport async function editMessage({\n  chat,\n  message,\n  text,\n  entities,\n  noWebPage,\n}: {\n  chat: ApiChat;\n  message: ApiMessage;\n  text: string;\n  entities?: ApiMessageEntity[];\n  noWebPage?: boolean;\n}) {\n  const isScheduled = message.date * 1000 > Date.now() + getServerTimeOffset() * 1000;\n  let messageUpdate: Partial<ApiMessage> = {\n    content: {\n      ...message.content,\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n    },\n  };\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(messageUpdate.content!, messageUpdate.groupedId);\n  messageUpdate = {\n    ...messageUpdate,\n    emojiOnlyCount,\n  };\n  onUpdate({\n    '@type': isScheduled ? 'updateScheduledMessage' : 'updateMessage',\n    id: message.id,\n    chatId: chat.id,\n    message: messageUpdate,\n  });\n\n  // TODO Revise intersecting with scheduled\n  localDb.localMessages[message.id] = { ...message, ...messageUpdate };\n\n  const mtpEntities = entities && entities.map(buildMtpMessageEntity);\n\n  // await invokeRequest(new GramJs.messages.EditMessage({\n  //   message: text || '',\n  //   entities: mtpEntities,\n  //   peer: buildInputPeer(chat.id, chat.accessHash),\n  //   id: message.id,\n  //   ...(isScheduled && { scheduleDate: message.date }),\n  //   ...(noWebPage && { noWebpage: noWebPage }),\n  // }), true);\n  // await Account.getCurrentAccount()!.sendPdu(new MsgUpdateReq({\n  //   msg_id:message.id,\n  //   chat_id:chat.id,\n  //   user_id:Account.getCurrentAccount()?.getUid()!,\n  //   text\n  // }).pack(),0)\n}\n\nexport async function rescheduleMessage({\n  chat,\n  message,\n  scheduledAt,\n}: {\n  chat: ApiChat;\n  message: ApiMessage;\n  scheduledAt: number;\n}) {\n  await invokeRequest(new GramJs.messages.EditMessage({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: message.id,\n    scheduleDate: scheduledAt,\n  }), true);\n}\n\nasync function uploadMedia(localMessage: ApiMessage, attachment: ApiAttachment, onProgress: ApiOnProgress) {\n  const {\n    filename, blobUrl, encryptUrl,mimeType, quick, voice, audio, previewBlobUrl, shouldSendAsFile, shouldSendAsSpoiler,\n  } = attachment;\n\n  const patchedOnProgress: ApiOnProgress = (progress) => {\n    if (onProgress.isCanceled) {\n      patchedOnProgress.isCanceled = true;\n    } else {\n      onProgress(progress, localMessage);\n    }\n  };\n\n  let file;\n  if(encryptUrl){\n    file = await fetchFile(encryptUrl, \"EN_\"+filename);\n  }else{\n    file = await fetchFile(blobUrl, filename);\n  }\n  const inputFile = await uploadFileV1({file, onProgress:patchedOnProgress,workers: UPLOAD_WORKERS});\n  // const thumbFile = previewBlobUrl && await fetchFile(previewBlobUrl, filename);\n  //const thumb = thumbFile ? await uploadFileV1({file:thumbFile,workers: UPLOAD_WORKERS}) : undefined;\n  const thumb = undefined;\n  const attributes: GramJs.TypeDocumentAttribute[] = [new GramJs.DocumentAttributeFilename({ fileName: filename })];\n  if (!shouldSendAsFile) {\n    if (quick) {\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) && mimeType !== GIF_MIME_TYPE) {\n        return new GramJs.InputMediaUploadedPhoto({\n          file: inputFile,\n          spoiler: shouldSendAsSpoiler,\n        });\n      }\n\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = quick;\n        if (duration !== undefined) {\n          attributes.push(new GramJs.DocumentAttributeVideo({\n            duration,\n            w: width,\n            h: height,\n            supportsStreaming: true,\n          }));\n        }\n      }\n    }\n\n    if (audio) {\n      const { duration, title, performer } = audio;\n      attributes.push(new GramJs.DocumentAttributeAudio({\n        duration,\n        title,\n        performer,\n      }));\n    }\n\n    if (voice) {\n      const { duration, waveform } = voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      attributes.push(new GramJs.DocumentAttributeAudio({\n        voice: true,\n        duration,\n        waveform: Buffer.from(inputWaveform),\n      }));\n    }\n  }\n\n  return new GramJs.InputMediaUploadedDocument({\n    file: inputFile,\n    mimeType,\n    attributes,\n    thumb,\n    forceFile: shouldSendAsFile,\n    spoiler: shouldSendAsSpoiler,\n  });\n}\n\nexport async function pinMessage({\n  chat, messageId, isUnpin, isOneSide, isSilent,\n}: { chat: ApiChat; messageId: number; isUnpin: boolean; isOneSide?: boolean; isSilent?: boolean }) {\n  await invokeRequest(new GramJs.messages.UpdatePinnedMessage({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageId,\n    ...(isUnpin && { unpin: true }),\n    ...(isOneSide && { pmOneside: true }),\n    ...(isSilent && { silent: true }),\n  }), true);\n}\n\nexport async function unpinAllMessages({ chat, threadId }: { chat: ApiChat; threadId?: number }) {\n  await invokeRequest(new GramJs.messages.UnpinAllMessages({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    ...(threadId && { topMsgId: threadId }),\n  }), true);\n}\n\nexport async function deleteMessages({\n  chat, messageIds, shouldDeleteForAll,\n}: {\n  chat: ApiChat; messageIds: number[]; shouldDeleteForAll?: boolean;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  // await Account.getCurrentAccount()?.sendPduWithCallback(new MsgDeleteReq({\n  //   msg_ids:messageIds,\n  //   chat_id:chat.id,\n  //   user_id:Account.getCurrentAccount()?.getUid()!,\n  //   revoke: shouldDeleteForAll\n  // }).pack())\n\n  // const result = await invokeRequest(\n  //   isChannel\n  //     ? new GramJs.channels.DeleteMessages({\n  //       channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  //       id: messageIds,\n  //     })\n  //     : new GramJs.messages.DeleteMessages({\n  //       id: messageIds,\n  //       ...(shouldDeleteForAll && { revoke: true }),\n  //     }),\n  // );\n  //\n  // if (!result) {\n  //   return;\n  // }\n  onUpdate({\n    '@type': 'deleteMessages',\n    ids: messageIds,\n    ...{ chatId: chat.id },\n    ...(isChannel && { chatId: chat.id }),\n  });\n}\n\nexport async function deleteScheduledMessages({\n  chat, messageIds,\n}: {\n  chat: ApiChat; messageIds: number[];\n}) {\n  const result = await invokeRequest(\n    new GramJs.messages.DeleteScheduledMessages({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      id: messageIds,\n    }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'deleteScheduledMessages',\n    ids: messageIds,\n    chatId: chat.id,\n  });\n}\n\nexport async function deleteHistory({\n  chat, shouldDeleteForAll,\n}: {\n  chat: ApiChat; shouldDeleteForAll?: boolean; maxId?: number;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n  const result = await invokeRequest(\n    isChannel\n      ? new GramJs.channels.DeleteHistory({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n      })\n      : new GramJs.messages.DeleteHistory({\n        peer: buildInputPeer(chat.id, chat.accessHash),\n        ...(shouldDeleteForAll && { revoke: true }),\n        ...(!shouldDeleteForAll && { just_clear: true }),\n      }),\n  );\n\n  if (!result) {\n    return;\n  }\n\n  if ('offset' in result && result.offset) {\n    await deleteHistory({ chat, shouldDeleteForAll });\n    return;\n  }\n\n  onUpdate({\n    '@type': 'deleteHistory',\n    chatId: chat.id,\n  });\n}\n\nexport async function reportMessages({\n  peer, messageIds, reason, description,\n}: {\n  peer: ApiChat | ApiUser; messageIds: number[]; reason: ApiReportReason; description?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.Report({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    id: messageIds,\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function sendMessageAction({\n  peer, threadId, action,\n}: {\n  peer: ApiChat | ApiUser; threadId?: number; action: ApiSendMessageAction;\n}) {\n  const gramAction = buildSendMessageAction(action);\n  if (!gramAction) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn('Unsupported message action', action);\n    }\n    return undefined;\n  }\n\n  try {\n    const result = await invokeRequest(new GramJs.messages.SetTyping({\n      peer: buildInputPeer(peer.id, peer.accessHash),\n      topMsgId: threadId,\n      action: gramAction,\n    }), undefined, true);\n    return result;\n  } catch (error) {\n    // Prevent error from being displayed in UI\n  }\n  return undefined;\n}\n\nexport async function markMessageListRead({\n  chat, threadId, maxId = -1,\n}: {\n  chat: ApiChat; threadId: number; maxId?: number;\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  // Workaround for local message IDs overflowing some internal `Buffer` range check\n  const fixedMaxId = Math.min(maxId, MAX_INT_32);\n  // if (isChannel && threadId === MAIN_THREAD_ID) {\n  //   await invokeRequest(new GramJs.channels.ReadHistory({\n  //     channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  //     maxId: fixedMaxId,\n  //   }));\n  // } else if (isChannel) {\n  //   await invokeRequest(new GramJs.messages.ReadDiscussion({\n  //     peer: buildInputPeer(chat.id, chat.accessHash),\n  //     msgId: threadId,\n  //     readMaxId: fixedMaxId,\n  //   }));\n  // } else {\n  //   await invokeRequest(new GramJs.messages.ReadHistory({\n  //     peer: buildInputPeer(chat.id, chat.accessHash),\n  //     maxId: fixedMaxId,\n  //   }));\n  // }\n\n  if (threadId === MAIN_THREAD_ID) {\n    void requestChatUpdate({ chat, noLastMessage: true });\n  } else {\n    void requestThreadInfoUpdate({ chat, threadId });\n  }\n}\n\nexport async function markMessagesRead({\n  chat, messageIds,\n}: {\n  chat: ApiChat; messageIds: number[];\n}) {\n  const isChannel = getEntityTypeById(chat.id) === 'channel';\n\n  await invokeRequest(\n    isChannel\n      ? new GramJs.channels.ReadMessageContents({\n        channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n        id: messageIds,\n      })\n      : new GramJs.messages.ReadMessageContents({\n        id: messageIds,\n      }),\n  );\n\n  onUpdate({\n    ...(isChannel ? {\n      '@type': 'updateChannelMessages',\n      channelId: chat.id,\n    } : {\n      '@type': 'updateCommonBoxMessages',\n    }),\n    ids: messageIds,\n    messageUpdate: {\n      hasUnreadMention: false,\n      isMediaUnread: false,\n    },\n  });\n}\n\nexport async function fetchMessageViews({\n  chat, ids,\n}: {\n  chat: ApiChat; ids: number[];\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetMessagesViews({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: ids,\n    increment: false,\n  }));\n\n  if (!result) return undefined;\n\n  return ids.map((id, index) => {\n    const { views, forwards, replies } = result.views[index];\n    return {\n      id,\n      views,\n      forwards,\n      messagesCount: replies?.replies,\n    };\n  });\n}\n\nexport async function requestThreadInfoUpdate({\n  chat, threadId, originChannelId,\n}: {\n  chat: ApiChat; threadId: number; originChannelId?: string;\n}) {\n  if (threadId === MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  const [topMessageResult, repliesResult] = await Promise.all([\n    invokeRequest(new GramJs.messages.GetDiscussionMessage({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: Number(threadId),\n    })),\n    invokeRequest(new GramJs.messages.GetReplies({\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      msgId: Number(threadId),\n      offsetId: 1,\n      addOffset: -1,\n      limit: 1,\n    })),\n  ]);\n\n  if (!topMessageResult || !topMessageResult.messages.length) {\n    return undefined;\n  }\n\n  const discussionChatId = resolveMessageApiChatId(topMessageResult.messages[0]);\n  if (!discussionChatId) {\n    return undefined;\n  }\n\n  const topMessageId = topMessageResult.messages[topMessageResult.messages.length - 1].id;\n\n  onUpdate({\n    '@type': 'updateThreadInfo',\n    chatId: discussionChatId,\n    threadId: topMessageId,\n    threadInfo: {\n      threadId: topMessageId,\n      topMessageId,\n      lastReadInboxMessageId: topMessageResult.readInboxMaxId,\n      messagesCount: (repliesResult instanceof GramJs.messages.ChannelMessages) ? repliesResult.count : undefined,\n      lastMessageId: topMessageResult.maxId,\n      ...(originChannelId ? { originChannelId } : undefined),\n    },\n    firstMessageId: repliesResult && 'messages' in repliesResult && repliesResult.messages.length\n      ? repliesResult.messages[0].id\n      : undefined,\n  });\n\n  const chats = topMessageResult.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  chats.forEach((newChat) => {\n    onUpdate({\n      '@type': 'updateChat',\n      id: newChat.id,\n      chat: newChat,\n      noTopChatsRequest: true,\n    });\n  });\n\n  if (chat.isForum) {\n    onUpdate({\n      '@type': 'updateTopic',\n      chatId: chat.id,\n      topicId: threadId,\n    });\n  }\n\n  addEntitiesWithPhotosToLocalDb(topMessageResult.users);\n  addEntitiesWithPhotosToLocalDb(topMessageResult.chats);\n\n  const users = topMessageResult.users.map(buildApiUser).filter(Boolean);\n\n  return {\n    topMessageId,\n    discussionChatId,\n    users,\n  };\n}\n\nexport async function searchMessagesLocal({\n  chat, type, query, topMessageId, minDate, maxDate, ...pagination\n}: {\n  chat: ApiChat;\n  type?: ApiMessageSearchType | ApiGlobalMessageSearchType;\n  query?: string;\n  topMessageId?: number;\n  offsetId?: number;\n  addOffset?: number;\n  limit: number;\n  minDate?: number;\n  maxDate?: number;\n}) {\n  let filter;\n  switch (type) {\n    case 'media':\n      filter = new GramJs.InputMessagesFilterPhotoVideo();\n      break;\n    case 'documents':\n      filter = new GramJs.InputMessagesFilterDocument();\n      break;\n    case 'links':\n      filter = new GramJs.InputMessagesFilterUrl();\n      break;\n    case 'audio':\n      filter = new GramJs.InputMessagesFilterMusic();\n      break;\n    case 'voice':\n      filter = new GramJs.InputMessagesFilterRoundVoice();\n      break;\n    case 'profilePhoto':\n      filter = new GramJs.InputMessagesFilterChatPhotos();\n      break;\n    case 'text':\n    default: {\n      filter = new GramJs.InputMessagesFilterEmpty();\n    }\n  }\n\n  const result = await invokeRequest(new GramJs.messages.Search({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    topMsgId: topMessageId,\n    filter,\n    q: query || '',\n    minDate,\n    maxDate,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  let totalCount = messages.length;\n  let nextOffsetId: number | undefined;\n  if (result instanceof GramJs.messages.MessagesSlice || result instanceof GramJs.messages.ChannelMessages) {\n    totalCount = result.count;\n\n    if (messages.length) {\n      nextOffsetId = messages[messages.length - 1].id;\n    }\n  }\n\n  return {\n    chats,\n    users,\n    messages,\n    totalCount,\n    nextOffsetId,\n  };\n}\n\nexport async function searchMessagesGlobal({\n  query, offsetRate = 0, limit, type = 'text', minDate, maxDate,\n}: {\n  query: string;\n  offsetRate?: number;\n  limit: number;\n  type?: ApiGlobalMessageSearchType;\n  minDate?: number;\n  maxDate?: number;\n}) {\n  let filter;\n  switch (type) {\n    case 'media':\n      filter = new GramJs.InputMessagesFilterPhotoVideo();\n      break;\n    case 'documents':\n      filter = new GramJs.InputMessagesFilterDocument();\n      break;\n    case 'links':\n      filter = new GramJs.InputMessagesFilterUrl();\n      break;\n    case 'audio':\n      filter = new GramJs.InputMessagesFilterMusic();\n      break;\n    case 'voice':\n      filter = new GramJs.InputMessagesFilterRoundVoice();\n      break;\n    case 'text':\n    default: {\n      if (!query && !(maxDate && minDate)) {\n        return undefined;\n      }\n\n      filter = new GramJs.InputMessagesFilterEmpty();\n    }\n  }\n\n  const result = await invokeRequest(new GramJs.messages.SearchGlobal({\n    q: query,\n    offsetRate,\n    offsetPeer: new GramJs.InputPeerEmpty(),\n    limit,\n    filter,\n    folderId: ALL_FOLDER_ID,\n    minDate,\n    maxDate,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb({\n    chats: result.chats,\n    users: result.users,\n    messages: result.messages,\n  } as GramJs.messages.Messages);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  let totalCount = messages.length;\n  let nextRate: number | undefined;\n  if (result instanceof GramJs.messages.MessagesSlice || result instanceof GramJs.messages.ChannelMessages) {\n    totalCount = result.count;\n\n    if (messages.length) {\n      nextRate = messages[messages.length - 1].id;\n    }\n  }\n\n  return {\n    messages,\n    users,\n    chats,\n    totalCount,\n    nextRate: 'nextRate' in result && result.nextRate ? result.nextRate : nextRate,\n  };\n}\n\nexport async function fetchWebPagePreview({ message }: { message: string }) {\n  const preview = await invokeRequest(new GramJs.messages.GetWebPagePreview({\n    message,\n  }));\n\n  return preview && buildWebPage(preview);\n}\n\nexport async function sendPollVote({\n  chat, messageId, options,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  options: string[];\n}) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.SendVote({\n    peer: buildInputPeer(id, accessHash),\n    msgId: messageId,\n    options: options.map(deserializeBytes),\n  }), true);\n}\n\nexport async function closePoll({\n  chat, messageId, poll,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  poll: ApiPoll;\n}) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.EditMessage({\n    peer: buildInputPeer(id, accessHash),\n    id: messageId,\n    media: buildInputPollFromExisting(poll, true),\n  }));\n}\n\nexport async function loadPollOptionResults({\n  chat, messageId, option, offset, limit, shouldResetVoters,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  option?: string;\n  offset?: string;\n  limit?: number;\n  shouldResetVoters?: boolean;\n}) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetPollVotes({\n    peer: buildInputPeer(id, accessHash),\n    id: messageId,\n    ...(option && { option: deserializeBytes(option) }),\n    ...(offset && { offset }),\n    ...(limit && { limit }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb({\n    chats: [] as GramJs.TypeChat[],\n    users: result.users,\n    messages: [] as GramJs.Message[],\n  } as GramJs.messages.Messages);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const votes = result.votes.map((vote) => ({\n    userId: vote.userId,\n    date: vote.date,\n  }));\n\n  return {\n    count: result.count,\n    votes,\n    users,\n    nextOffset: result.nextOffset,\n    shouldResetVoters,\n  };\n}\n\nexport async function fetchExtendedMedia({\n  chat, ids,\n}: {\n  chat: ApiChat;\n  ids: number[];\n}) {\n  await invokeRequest(new GramJs.messages.GetExtendedMedia({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: ids,\n  }));\n}\n\nexport async function forwardMessages({\n  fromChat,\n  toChat,\n  toThreadId,\n  messages,\n  isSilent,\n  scheduledAt,\n  sendAs,\n  withMyScore,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n}: {\n  fromChat: ApiChat;\n  toChat: ApiChat;\n  toThreadId?: number;\n  messages: ApiMessage[];\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiUser | ApiChat;\n  withMyScore?: boolean;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n}) {\n  const messageIds = messages.map(({ id }) => id);\n  const randomIds = messages.map(generateRandomBigInt);\n\n  messages.forEach((message, index) => {\n    const localMessage = buildLocalForwardedMessage({\n      toChat,\n      toThreadId,\n      message,\n      scheduledAt,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n\n    localDb.localMessages[String(randomIds[index])] = localMessage;\n\n    onUpdate({\n      '@type': localMessage.isScheduled ? 'newScheduledMessage' : 'newMessage',\n      id: localMessage.id,\n      chatId: toChat.id,\n      message: localMessage,\n    });\n  });\n\n  //\n  // await invokeRequest(new GramJs.messages.ForwardMessages({\n  //   fromPeer: buildInputPeer(fromChat.id, fromChat.accessHash),\n  //   toPeer: buildInputPeer(toChat.id, toChat.accessHash),\n  //   randomId: randomIds,\n  //   id: messageIds,\n  //   withMyScore: withMyScore || undefined,\n  //   silent: isSilent || undefined,\n  //   dropAuthor: noAuthors || undefined,\n  //   dropMediaCaptions: noCaptions || undefined,\n  //   ...(toThreadId && { topMsgId: toThreadId }),\n  //   ...(scheduledAt && { scheduleDate: scheduledAt }),\n  //   ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  // }), true);\n}\n\nexport async function findFirstMessageIdAfterDate({\n  chat,\n  timestamp,\n}: {\n  chat: ApiChat;\n  timestamp: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetHistory({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    offsetDate: timestamp,\n    addOffset: -1,\n    limit: 1,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages || !result.messages.length\n  ) {\n    return undefined;\n  }\n\n  return result.messages[0].id;\n}\n\nexport async function fetchScheduledHistory({ chat }: { chat: ApiChat }) {\n  const { id, accessHash } = chat;\n\n  const result = await invokeRequest(new GramJs.messages.GetScheduledHistory({\n    peer: buildInputPeer(id, accessHash),\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  return {\n    messages,\n  };\n}\n\nexport async function sendScheduledMessages({ chat, ids }: { chat: ApiChat; ids: number[] }) {\n  const { id, accessHash } = chat;\n\n  await invokeRequest(new GramJs.messages.SendScheduledMessages({\n    peer: buildInputPeer(id, accessHash),\n    id: ids,\n  }), true);\n}\n\nfunction updateLocalDb(result: (\n  GramJs.messages.MessagesSlice | GramJs.messages.Messages | GramJs.messages.ChannelMessages |\n  GramJs.messages.DiscussionMessage | GramJs.messages.SponsoredMessages\n)) {\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n\n  result.messages.forEach((message) => {\n    if ((message instanceof GramJs.Message && isMessageWithMedia(message))\n      || (message instanceof GramJs.MessageService && isServiceMessageWithMedia(message))\n    ) {\n      addMessageToLocalDb(message);\n    }\n  });\n}\n\nexport async function fetchPinnedMessages({ chat, threadId }: { chat: ApiChat; threadId: number }) {\n  const result = await invokeRequest(new GramJs.messages.Search(\n    {\n      peer: buildInputPeer(chat.id, chat.accessHash),\n      filter: new GramJs.InputMessagesFilterPinned(),\n      q: '',\n      limit: PINNED_MESSAGES_LIMIT,\n      topMsgId: threadId,\n    },\n  ));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function fetchSeenBy({ chat, messageId }: { chat: ApiChat; messageId: number }) {\n  const result = await invokeRequest(new GramJs.messages.GetMessageReadParticipants({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n  }));\n\n  return result ? result.map(String) : undefined;\n}\n\nexport async function fetchSendAs({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  const result = await invokeRequest(new GramJs.channels.GetSendAs({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), undefined, undefined, undefined, undefined, true);\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    users,\n    chats,\n    sendAs: result.peers.map(buildApiSendAsPeerId),\n  };\n}\n\nexport function saveDefaultSendAs({\n  sendAs, chat,\n}: {\n  sendAs: ApiChat | ApiUser; chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.SaveDefaultSendAs({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    sendAs: buildInputPeer(sendAs.id, sendAs.accessHash),\n  }));\n}\n\nexport async function fetchSponsoredMessages({ chat }: { chat: ApiChat }) {\n  const result = await invokeRequest(new GramJs.channels.GetSponsoredMessages({\n    channel: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.SponsoredMessagesEmpty || !result.messages.length) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiSponsoredMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function viewSponsoredMessage({ chat, random }: { chat: ApiChat; random: string }) {\n  await invokeRequest(new GramJs.channels.ViewSponsoredMessage({\n    channel: buildInputPeer(chat.id, chat.accessHash),\n    randomId: deserializeBytes(random),\n  }));\n}\n\nexport function readAllMentions({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.ReadMentions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), true);\n}\n\nexport function readAllReactions({\n  chat,\n}: {\n  chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.ReadReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), true);\n}\n\nexport async function fetchUnreadMentions({\n  chat, ...pagination\n}: {\n  chat: ApiChat;\n  offsetId?: number;\n  addOffset?: number;\n  maxId?: number;\n  minId?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetUnreadMentions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    limit: MENTION_UNREAD_SLICE,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function fetchUnreadReactions({\n  chat, ...pagination\n}: {\n  chat: ApiChat;\n  offsetId?: number;\n  addOffset?: number;\n  maxId?: number;\n  minId?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetUnreadReactions({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    limit: REACTION_UNREAD_SLICE,\n    ...pagination,\n  }));\n\n  if (\n    !result\n    || result instanceof GramJs.messages.MessagesNotModified\n    || !result.messages\n  ) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  const messages = result.messages.map(buildApiMessage).filter(Boolean);\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    messages,\n    users,\n    chats,\n  };\n}\n\nexport async function transcribeAudio({\n  chat, messageId,\n}: {\n  chat: ApiChat; messageId: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.TranscribeAudio({\n    msgId: messageId,\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }));\n\n  if (!result) return undefined;\n\n  onUpdate({\n    '@type': 'updateTranscribedAudio',\n    isPending: result.pending,\n    transcriptionId: result.transcriptionId.toString(),\n    text: result.text,\n  });\n\n  return result.transcriptionId.toString();\n}\n\nexport async function translateText(params: TranslateTextParams) {\n  let result;\n  const isMessageTranslation = 'chat' in params;\n  if (isMessageTranslation) {\n    const { chat, messageIds,messages, toLanguageCode } = params;\n    // result = await invokeRequest(new GramJs.messages.TranslateText({\n    //   peer: buildInputPeer(chat.id, chat.accessHash),\n    //   id: messageIds,\n    //   toLang: toLanguageCode,\n    // }));\n\n    const chatId = chat.id\n\n    const res = await requestChatStream(\n      CHATGPT_PROXY_API+\"/v1/chat/completions\",\n      {\n        body:{\n          ...ChatModelConfig,\n          apiKey:\"\",\n          systemPrompt:\"你现在是一名专业的翻译官\",\n          messages:[\n            {\n              role:\"user\",\n              content:`我需要将：${messages[messageIds[0]].text},翻译成:${toLanguageCode},你的回答格式是：原文:xxx\\n译文:xxx,不要做过多解释`\n            }\n          ],\n          chatId,\n          msgId:0,\n          stream:false\n        },\n      })\n    if(res){\n      result = {\n        result:[\n          {\n            text:res,\n            entities:[]\n          }\n        ]\n      }\n    }\n  } else {\n    const { text, toLanguageCode } = params;\n    result = await invokeRequest(new GramJs.messages.TranslateText({\n      text: text.map((t) => buildInputTextWithEntities(t)),\n      toLang: toLanguageCode,\n    }));\n  }\n\n  if (!result) return undefined;\n\n  const formattedText = result.result.map((r) => buildApiFormattedText(r));\n\n  if (isMessageTranslation) {\n    onUpdate({\n      '@type': 'updateMessageTranslations',\n      chatId: params.chat.id,\n      messageIds: params.messageIds,\n      translations: formattedText,\n      toLanguageCode: params.toLanguageCode,\n    });\n  }\n\n  return formattedText;\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  OnApiUpdate, ApiUser, ApiChat, ApiSticker,\n} from '../../types';\n\nimport { COMMON_CHATS_LIMIT, PROFILE_PHOTOS_LIMIT } from '../../../config';\nimport { invokeRequest } from './client';\nimport { searchMessagesLocal } from './messages';\nimport {\n  buildInputEntity,\n  buildInputPeer,\n  buildInputContact,\n  buildMtpPeerId,\n  getEntityTypeById,\n  buildInputEmojiStatus,\n} from '../gramjsBuilders';\nimport { buildApiUser, buildApiUserFromFull, buildApiUsersAndStatuses } from '../apiBuilders/users';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { buildApiPhoto } from '../apiBuilders/common';\nimport { addEntitiesWithPhotosToLocalDb, addPhotoToLocalDb, addUserToLocalDb } from '../helpers';\nimport { buildApiPeerId } from '../apiBuilders/peers';\nimport localDb from '../localDb';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchFullUser({\n  id,\n  accessHash,\n}: {\n  id: string;\n  accessHash?: string;\n}) {\n  const input = buildInputEntity(id, accessHash);\n  if (!(input instanceof GramJs.InputUser)) {\n    return undefined;\n  }\n\n  const fullInfo = await invokeRequest(new GramJs.users.GetFullUser({ id: input }));\n\n  if (!fullInfo) {\n    return undefined;\n  }\n\n  updateLocalDb(fullInfo);\n  addUserToLocalDb(fullInfo.users[0], true);\n\n  if (fullInfo.fullUser.profilePhoto instanceof GramJs.Photo) {\n    localDb.photos[fullInfo.fullUser.profilePhoto.id.toString()] = fullInfo.fullUser.profilePhoto;\n  }\n\n  if (fullInfo.fullUser.personalPhoto instanceof GramJs.Photo) {\n    localDb.photos[fullInfo.fullUser.personalPhoto.id.toString()] = fullInfo.fullUser.personalPhoto;\n  }\n\n  if (fullInfo.fullUser.fallbackPhoto instanceof GramJs.Photo) {\n    localDb.photos[fullInfo.fullUser.fallbackPhoto.id.toString()] = fullInfo.fullUser.fallbackPhoto;\n  }\n\n  const botInfo = fullInfo.fullUser.botInfo;\n  if (botInfo?.descriptionPhoto instanceof GramJs.Photo) {\n    localDb.photos[botInfo.descriptionPhoto.id.toString()] = botInfo.descriptionPhoto;\n  }\n  if (botInfo?.descriptionDocument instanceof GramJs.Document) {\n    localDb.documents[botInfo.descriptionDocument.id.toString()] = botInfo.descriptionDocument;\n  }\n\n  const userWithFullInfo = buildApiUserFromFull(fullInfo);\n  const user = buildApiUser(fullInfo.users[0]);\n\n  onUpdate({\n    '@type': 'updateUser',\n    id,\n    user: {\n      ...user,\n      avatarHash: user?.avatarHash || undefined,\n      fullInfo: userWithFullInfo.fullInfo,\n    },\n  });\n\n  return userWithFullInfo;\n}\n\nexport async function fetchCommonChats(id: string, accessHash?: string, maxId?: string) {\n  const commonChats = await invokeRequest(new GramJs.messages.GetCommonChats({\n    userId: buildInputEntity(id, accessHash) as GramJs.InputUser,\n    maxId: maxId ? buildMtpPeerId(maxId, getEntityTypeById(maxId)) : undefined,\n    limit: COMMON_CHATS_LIMIT,\n  }));\n\n  if (!commonChats) {\n    return undefined;\n  }\n\n  updateLocalDb(commonChats);\n\n  const chatIds: string[] = [];\n  const chats: ApiChat[] = [];\n\n  commonChats.chats.forEach((mtpChat) => {\n    const chat = buildApiChatFromPreview(mtpChat);\n\n    if (chat) {\n      chats.push(chat);\n      chatIds.push(chat.id);\n    }\n  });\n\n  return { chats, chatIds, isFullyLoaded: chatIds.length < COMMON_CHATS_LIMIT };\n}\n\nexport async function fetchNearestCountry() {\n  const dcInfo = await invokeRequest(new GramJs.help.GetNearestDc());\n\n  return dcInfo?.country;\n}\n\nexport async function fetchTopUsers() {\n  const topPeers = await invokeRequest(new GramJs.contacts.GetTopPeers({\n    correspondents: true,\n  }));\n  if (!(topPeers instanceof GramJs.contacts.TopPeers)) {\n    return undefined;\n  }\n\n  const users = topPeers.users.map(buildApiUser).filter((user) => Boolean(user) && !user.isSelf) as ApiUser[];\n  const ids = users.map(({ id }) => id);\n\n  return {\n    ids,\n    users,\n  };\n}\n\nexport async function fetchContactList() {\n  const result = await invokeRequest(new GramJs.contacts.GetContacts({ hash: BigInt('0') }));\n  if (!result || result instanceof GramJs.contacts.ContactsNotModified) {\n    return undefined;\n  }\n\n  result.users.forEach((user) => {\n    if (user instanceof GramJs.User) {\n      addUserToLocalDb(user, true);\n    }\n  });\n\n  const { users, userStatusesById } = buildApiUsersAndStatuses(result.users);\n\n  return {\n    users,\n    userStatusesById,\n    chats: result.users.map((user) => buildApiChatFromPreview(user)).filter(Boolean),\n  };\n}\n\nexport async function fetchUsers({ users }: { users: ApiUser[] }) {\n  const result = await invokeRequest(new GramJs.users.GetUsers({\n    id: users.map(({ id, accessHash }) => buildInputPeer(id, accessHash)),\n  }));\n  if (!result || !result.length) {\n    return undefined;\n  }\n\n  result.forEach((user) => {\n    if (user instanceof GramJs.User) {\n      addUserToLocalDb(user, true);\n    }\n  });\n\n  return buildApiUsersAndStatuses(result);\n}\n\nexport async function importContact({\n  phone,\n  firstName,\n  lastName,\n}: {\n  phone?: string;\n  firstName?: string;\n  lastName?: string;\n}) {\n  const result = await invokeRequest(new GramJs.contacts.ImportContacts({\n    contacts: [buildInputContact({\n      phone: phone || '',\n      firstName: firstName || '',\n      lastName: lastName || '',\n    })],\n  }));\n\n  if (result instanceof GramJs.contacts.ImportedContacts && result.users.length) {\n    addUserToLocalDb(result.users[0]);\n  }\n\n  return result?.imported.length ? buildApiPeerId(result.imported[0].userId, 'user') : undefined;\n}\n\nexport function updateContact({\n  id,\n  accessHash,\n  phoneNumber = '',\n  firstName = '',\n  lastName = '',\n  shouldSharePhoneNumber = false,\n}: {\n  id: string;\n  accessHash?: string;\n  phoneNumber?: string;\n  firstName?: string;\n  lastName?: string;\n  shouldSharePhoneNumber?: boolean;\n}) {\n  return invokeRequest(new GramJs.contacts.AddContact({\n    id: buildInputEntity(id, accessHash) as GramJs.InputUser,\n    firstName,\n    lastName,\n    phone: phoneNumber,\n    ...(shouldSharePhoneNumber && { addPhonePrivacyException: shouldSharePhoneNumber }),\n  }), true);\n}\n\nexport async function deleteContact({\n  id,\n  accessHash,\n}: {\n  id: string;\n  accessHash?: string;\n}) {\n  const input = buildInputEntity(id, accessHash);\n  if (!(input instanceof GramJs.InputUser)) {\n    return;\n  }\n\n  const result = await invokeRequest(new GramJs.contacts.DeleteContacts({ id: [input] }));\n\n  if (!result) {\n    return;\n  }\n\n  onUpdate({\n    '@type': 'deleteContact',\n    id,\n  });\n}\n\nexport async function fetchProfilePhotos(user?: ApiUser, chat?: ApiChat) {\n  if (user) {\n    const { id, accessHash } = user;\n\n    const result = await invokeRequest(new GramJs.photos.GetUserPhotos({\n      userId: buildInputEntity(id, accessHash) as GramJs.InputUser,\n      limit: PROFILE_PHOTOS_LIMIT,\n      offset: 0,\n      maxId: BigInt('0'),\n    }));\n\n    if (!result) {\n      return undefined;\n    }\n\n    updateLocalDb(result);\n\n    return {\n      photos: result.photos\n        .filter((photo): photo is GramJs.Photo => photo instanceof GramJs.Photo)\n        .map((photo) => buildApiPhoto(photo)),\n      users: result.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n\n  const result = await searchMessagesLocal({\n    chat: chat!,\n    type: 'profilePhoto',\n    limit: PROFILE_PHOTOS_LIMIT,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  const { messages, users } = result;\n\n  return {\n    photos: messages.map((message) => message.content.action!.photo).filter(Boolean),\n    users,\n  };\n}\n\nexport function reportSpam(userOrChat: ApiUser | ApiChat) {\n  const { id, accessHash } = userOrChat;\n\n  return invokeRequest(new GramJs.messages.ReportSpam({\n    peer: buildInputPeer(id, accessHash),\n  }), true);\n}\n\nexport function updateEmojiStatus(emojiStatus: ApiSticker, expires?: number) {\n  return invokeRequest(new GramJs.account.UpdateEmojiStatus({\n    emojiStatus: buildInputEmojiStatus(emojiStatus, expires),\n  }), true);\n}\n\nfunction updateLocalDb(result: (GramJs.photos.Photos | GramJs.photos.PhotosSlice | GramJs.messages.Chats)) {\n  if ('chats' in result) {\n    addEntitiesWithPhotosToLocalDb(result.chats);\n  }\n\n  if ('photos' in result) {\n    result.photos.forEach(addPhotoToLocalDb);\n  }\n\n  if ('users' in result) {\n    addEntitiesWithPhotosToLocalDb(result.users);\n  }\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiStickerSetInfo, ApiSticker, ApiVideo, OnApiUpdate,\n} from '../../types';\n\nimport { invokeRequest } from './client';\nimport {\n  buildStickerSet, buildStickerSetCovered, processStickerPackResult, processStickerResult,\n} from '../apiBuilders/symbols';\nimport { buildApiUserEmojiStatus } from '../apiBuilders/users';\nimport { buildInputStickerSet, buildInputDocument, buildInputStickerSetShortName } from '../gramjsBuilders';\nimport { buildVideoFromDocument } from '../apiBuilders/messages';\nimport { DEFAULT_GIF_SEARCH_BOT_USERNAME, RECENT_STATUS_LIMIT, RECENT_STICKERS_LIMIT } from '../../../config';\n\nimport localDb from '../localDb';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function fetchCustomEmojiSets({ hash = '0' }: { hash?: string }) {\n  const allStickers = await invokeRequest(new GramJs.messages.GetEmojiStickers({ hash: BigInt(hash) }));\n\n  if (!allStickers || allStickers instanceof GramJs.messages.AllStickersNotModified) {\n    return undefined;\n  }\n\n  allStickers.sets.forEach((stickerSet) => {\n    if (stickerSet.thumbs?.length || stickerSet.thumbDocumentId) {\n      localDb.stickerSets[String(stickerSet.id)] = stickerSet;\n    }\n  });\n\n  return {\n    hash: String(allStickers.hash),\n    sets: allStickers.sets.map(buildStickerSet),\n  };\n}\n\nexport async function fetchStickerSets({ hash = '0' }: { hash?: string }) {\n  const allStickers = await invokeRequest(new GramJs.messages.GetAllStickers({ hash: BigInt(hash) }));\n\n  if (!allStickers || allStickers instanceof GramJs.messages.AllStickersNotModified) {\n    return undefined;\n  }\n\n  allStickers.sets.forEach((stickerSet) => {\n    if (stickerSet.thumbs?.length) {\n      localDb.stickerSets[String(stickerSet.id)] = stickerSet;\n    }\n  });\n\n  return {\n    hash: String(allStickers.hash),\n    sets: allStickers.sets.map(buildStickerSet),\n  };\n}\n\nexport async function fetchRecentStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetRecentStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.RecentStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    stickers: processStickerResult(result.stickers.slice(0, RECENT_STICKERS_LIMIT)),\n  };\n}\n\nexport async function fetchFavoriteStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetFavedStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.FavedStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    stickers: processStickerResult(result.stickers),\n  };\n}\n\nexport async function fetchFeaturedStickers({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetFeaturedStickers({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.FeaturedStickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    isPremium: Boolean(result.premium),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function fetchFeaturedEmojiStickers() {\n  const result = await invokeRequest(new GramJs.messages.GetFeaturedEmojiStickers({ hash: BigInt(0) }));\n\n  if (!result || result instanceof GramJs.messages.FeaturedStickersNotModified) {\n    return undefined;\n  }\n\n  result.sets.forEach(({ set }) => {\n    if (set.thumbDocumentId) {\n      localDb.stickerSets[String(set.id)] = set;\n    }\n  });\n\n  return {\n    isPremium: Boolean(result.premium),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function faveSticker({\n  sticker,\n  unfave,\n}: {\n  sticker: ApiSticker;\n  unfave?: boolean;\n}) {\n  const request = new GramJs.messages.FaveSticker({\n    id: buildInputDocument(sticker),\n    unfave,\n  });\n\n  const result = await invokeRequest(request);\n  if (result) {\n    onUpdate({\n      '@type': 'updateFavoriteStickers',\n    });\n  }\n}\n\nexport function removeRecentSticker({\n  sticker,\n}: {\n  sticker: ApiSticker;\n}) {\n  const request = new GramJs.messages.SaveRecentSticker({\n    id: buildInputDocument(sticker),\n    unsave: true,\n  });\n\n  return invokeRequest(request);\n}\n\nexport function clearRecentStickers() {\n  return invokeRequest(new GramJs.messages.ClearRecentStickers());\n}\n\nexport async function fetchStickers(\n  { stickerSetInfo }:\n  { stickerSetInfo: ApiStickerSetInfo },\n) {\n  if ('isMissing' in stickerSetInfo) return undefined;\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: 'id' in stickerSetInfo\n      ? buildInputStickerSet(stickerSetInfo.id, stickerSetInfo.accessHash)\n      : buildInputStickerSetShortName(stickerSetInfo.shortName),\n  }), undefined, true);\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  localDb.stickerSets[String(result.set.id)] = result.set;\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n    packs: processStickerPackResult(result.packs),\n  };\n}\n\nexport async function fetchCustomEmoji({ documentId }: { documentId: string[] }) {\n  if (!documentId.length) return undefined;\n  const result = await invokeRequest(new GramJs.messages.GetCustomEmojiDocuments({\n    documentId: documentId.map((id) => BigInt(id)),\n  }));\n  if (!result) return undefined;\n\n  return processStickerResult(result);\n}\n\nexport async function fetchAnimatedEmojis() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetAnimatedEmoji(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchAnimatedEmojiEffects() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetAnimatedEmojiAnimations(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchGenericEmojiEffects() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetEmojiGenericAnimations(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchPremiumGifts() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetPremiumGifts(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchDefaultTopicIcons() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetEmojiDefaultTopicIcons(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function fetchDefaultStatusEmojis() {\n  const result = await invokeRequest(new GramJs.messages.GetStickerSet({\n    stickerset: new GramJs.InputStickerSetEmojiDefaultStatuses(),\n  }));\n\n  if (!(result instanceof GramJs.messages.StickerSet)) {\n    return undefined;\n  }\n\n  return {\n    set: buildStickerSet(result.set),\n    stickers: processStickerResult(result.documents),\n  };\n}\n\nexport async function searchStickers({ query, hash = '0' }: { query: string; hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.SearchStickerSets({\n    q: query,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.FoundStickerSetsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    sets: result.sets.map(buildStickerSetCovered),\n  };\n}\n\nexport async function fetchSavedGifs({ hash = '0' }: { hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetSavedGifs({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.messages.SavedGifsNotModified) {\n    return undefined;\n  }\n\n  return {\n    hash: String(result.hash),\n    gifs: processGifResult(result.gifs),\n  };\n}\n\nexport function saveGif({ gif, shouldUnsave }: { gif: ApiVideo; shouldUnsave?: boolean }) {\n  const request = new GramJs.messages.SaveGif({\n    id: buildInputDocument(gif),\n    unsave: shouldUnsave,\n  });\n\n  return invokeRequest(request, true);\n}\n\nexport async function installStickerSet({ stickerSetId, accessHash }: { stickerSetId: string; accessHash: string }) {\n  const result = await invokeRequest(new GramJs.messages.InstallStickerSet({\n    stickerset: buildInputStickerSet(stickerSetId, accessHash),\n  }));\n\n  if (result) {\n    onUpdate({\n      '@type': 'updateStickerSet',\n      id: stickerSetId,\n      stickerSet: { installedDate: Date.now() },\n    });\n  }\n}\n\nexport async function uninstallStickerSet({ stickerSetId, accessHash }: { stickerSetId: string; accessHash: string }) {\n  const result = await invokeRequest(new GramJs.messages.UninstallStickerSet({\n    stickerset: buildInputStickerSet(stickerSetId, accessHash),\n  }));\n\n  if (result) {\n    onUpdate({\n      '@type': 'updateStickerSet',\n      id: stickerSetId,\n      stickerSet: { installedDate: undefined },\n    });\n  }\n}\n\nlet inputGifBot: GramJs.InputUser | undefined;\n\nexport async function searchGifs({\n  query,\n  offset = '',\n  username = DEFAULT_GIF_SEARCH_BOT_USERNAME,\n}: { query: string; offset?: string; username?: string }) {\n  if (!inputGifBot) {\n    const resolvedPeer = await invokeRequest(new GramJs.contacts.ResolveUsername({\n      username,\n    }));\n    if (!resolvedPeer || !(resolvedPeer.users[0] instanceof GramJs.User)) {\n      return undefined;\n    }\n\n    inputGifBot = new GramJs.InputUser({\n      userId: (resolvedPeer.peer as GramJs.PeerUser).userId,\n      accessHash: resolvedPeer.users[0].accessHash!,\n    });\n  }\n\n  const result = await invokeRequest(new GramJs.messages.GetInlineBotResults({\n    bot: inputGifBot,\n    peer: new GramJs.InputPeerEmpty(),\n    query,\n    offset,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const documents = result.results\n    .map((foundGif) => {\n      if (foundGif instanceof GramJs.BotInlineMediaResult) {\n        return foundGif.document;\n      }\n\n      return undefined;\n    })\n    .filter(Boolean);\n\n  return {\n    nextOffset: result.nextOffset,\n    gifs: processGifResult(documents),\n  };\n}\n\nexport async function fetchStickersForEmoji({\n  emoji, hash = '0',\n}: { emoji: string; hash?: string }) {\n  const result = await invokeRequest(new GramJs.messages.GetStickers({\n    emoticon: emoji,\n    hash: BigInt(hash),\n  }));\n\n  if (!result || result instanceof GramJs.messages.StickersNotModified) {\n    return undefined;\n  }\n\n  return {\n    stickers: processStickerResult(result.stickers),\n    hash: String(result.hash),\n  };\n}\n\nexport async function fetchEmojiKeywords({ language, fromVersion }: {\n  language: string;\n  fromVersion?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetEmojiKeywordsDifference({\n    langCode: language,\n    fromVersion,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    language: result.langCode,\n    version: result.version,\n    keywords: result.keywords.reduce((acc, emojiKeyword) => {\n      acc[emojiKeyword.keyword] = emojiKeyword.emoticons;\n\n      return acc;\n    }, {} as Record<string, string[]>),\n  };\n}\n\nexport async function fetchRecentEmojiStatuses(hash = '0') {\n  const result = await invokeRequest(new GramJs.account.GetRecentEmojiStatuses({ hash: BigInt(hash) }));\n\n  if (!result || result instanceof GramJs.account.EmojiStatusesNotModified) {\n    return undefined;\n  }\n\n  const documentIds = result.statuses\n    .slice(0, RECENT_STATUS_LIMIT)\n    .map(buildApiUserEmojiStatus)\n    .filter(Boolean)\n    .map(({ documentId }) => documentId);\n  const emojiStatuses = await fetchCustomEmoji({ documentId: documentIds });\n\n  return {\n    hash: String(result.hash),\n    emojiStatuses,\n  };\n}\n\nfunction processGifResult(gifs: GramJs.TypeDocument[]) {\n  return gifs\n    .map((document) => {\n      if (document instanceof GramJs.Document) {\n        const gif = buildVideoFromDocument(document);\n        if (gif) {\n          localDb.documents[String(document.id)] = document;\n\n          return gif;\n        }\n      }\n\n      return undefined;\n    })\n    .filter(Boolean);\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport { invokeRequest } from './client';\nimport { buildInputEntity, buildInputPeer } from '../gramjsBuilders';\nimport type {\n  ApiChat, ApiError, ApiUser, OnApiUpdate,\n} from '../../types';\n\nimport { USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { buildApiExportedInvite, buildChatInviteImporter } from '../apiBuilders/chats';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\nlet onUpdate: OnApiUpdate;\n\nexport const ACCEPTABLE_USERNAME_ERRORS = new Set([USERNAME_PURCHASE_ERROR, 'USERNAME_INVALID']);\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function checkChatUsername({ username }: { username: string }) {\n  try {\n    const result = await invokeRequest(new GramJs.channels.CheckUsername({\n      channel: new GramJs.InputChannelEmpty(),\n      username,\n    }), undefined, true);\n\n    return { result, error: undefined };\n  } catch (error) {\n    const errorMessage = (error as ApiError).message;\n\n    if (ACCEPTABLE_USERNAME_ERRORS.has(errorMessage)) {\n      return {\n        result: false,\n        error: errorMessage,\n      };\n    }\n\n    throw error;\n  }\n}\n\nexport async function setChatUsername(\n  { chat, username }: { chat: ApiChat; username: string },\n) {\n  const result = await invokeRequest(new GramJs.channels.UpdateUsername({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    username,\n  }));\n\n  const usernames = chat.usernames\n    ? chat.usernames.map((u) => (u.isEditable ? { ...u, username } : u))\n    : [{ username, isEditable: true, isActive: true }];\n\n  if (result) {\n    onUpdate({\n      '@type': 'updateChat',\n      id: chat.id,\n      chat: { usernames },\n    });\n  }\n\n  return result;\n}\n\nexport async function updatePrivateLink({\n  chat, usageLimit, expireDate,\n}: {\n  chat: ApiChat; usageLimit?: number; expireDate?: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.ExportChatInvite({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    usageLimit,\n    expireDate,\n  }));\n\n  if (!(result instanceof GramJs.ChatInviteExported)) return undefined;\n\n  onUpdate({\n    '@type': 'updateChatFullInfo',\n    id: chat.id,\n    fullInfo: {\n      inviteLink: result.link,\n    },\n  });\n\n  return result.link;\n}\n\nexport async function fetchExportedChatInvites({\n  peer, admin, limit = 0, isRevoked,\n}: { peer: ApiChat; admin: ApiUser; limit?: number; isRevoked?: boolean }) {\n  const exportedInvites = await invokeRequest(new GramJs.messages.GetExportedChatInvites({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    adminId: buildInputEntity(admin.id, admin.accessHash) as GramJs.InputUser,\n    limit,\n    revoked: isRevoked || undefined,\n  }));\n\n  if (!exportedInvites) return undefined;\n  addEntitiesWithPhotosToLocalDb(exportedInvites.users);\n\n  const invites = (exportedInvites.invites\n    .filter((invite): invite is GramJs.ChatInviteExported => invite instanceof GramJs.ChatInviteExported))\n    .map(buildApiExportedInvite);\n\n  return {\n    invites,\n    users: exportedInvites.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport async function editExportedChatInvite({\n  peer, isRevoked, link, expireDate, usageLimit, isRequestNeeded, title,\n}: {\n  peer: ApiChat;\n  isRevoked?: boolean;\n  link: string;\n  expireDate?: number;\n  usageLimit?: number;\n  isRequestNeeded?: boolean;\n  title?: string;\n}) {\n  const invite = await invokeRequest(new GramJs.messages.EditExportedChatInvite({\n    link,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    expireDate,\n    usageLimit: !isRequestNeeded ? usageLimit : undefined,\n    requestNeeded: isRequestNeeded,\n    title,\n    revoked: isRevoked || undefined,\n  }));\n\n  if (!invite) return undefined;\n\n  addEntitiesWithPhotosToLocalDb(invite.users);\n  if (invite instanceof GramJs.messages.ExportedChatInvite && invite.invite instanceof GramJs.ChatInviteExported) {\n    const replaceInvite = buildApiExportedInvite(invite.invite);\n    return {\n      oldInvite: replaceInvite,\n      newInvite: replaceInvite,\n      users: invite.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n\n  if (invite instanceof GramJs.messages.ExportedChatInviteReplaced\n    && invite.invite instanceof GramJs.ChatInviteExported\n    && invite.newInvite instanceof GramJs.ChatInviteExported) {\n    const oldInvite = buildApiExportedInvite(invite.invite);\n    const newInvite = buildApiExportedInvite(invite.newInvite);\n    return {\n      oldInvite,\n      newInvite,\n      users: invite.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n  return undefined;\n}\n\nexport async function exportChatInvite({\n  peer, expireDate, usageLimit, isRequestNeeded, title,\n}: {\n  peer: ApiChat;\n  expireDate?: number;\n  usageLimit?: number;\n  isRequestNeeded?: boolean;\n  title?: string;\n}) {\n  const invite = await invokeRequest(new GramJs.messages.ExportChatInvite({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    expireDate,\n    usageLimit: !isRequestNeeded ? usageLimit : undefined,\n    requestNeeded: isRequestNeeded || undefined,\n    title,\n  }));\n\n  if (!(invite instanceof GramJs.ChatInviteExported)) return undefined;\n  return buildApiExportedInvite(invite);\n}\n\nexport async function deleteExportedChatInvite({\n  peer, link,\n}: {\n  peer: ApiChat; link: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.DeleteExportedChatInvite({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    link,\n  }));\n\n  return result;\n}\n\nexport async function deleteRevokedExportedChatInvites({\n  peer, admin,\n}: {\n  peer: ApiChat; admin: ApiUser;\n}) {\n  const result = await invokeRequest(new GramJs.messages.DeleteRevokedExportedChatInvites({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    adminId: buildInputEntity(admin.id, admin.accessHash) as GramJs.InputUser,\n  }));\n\n  return result;\n}\n\nexport async function fetchChatInviteImporters({\n  peer, link, offsetDate = 0, offsetUser, limit = 0, isRequested,\n}: {\n  peer: ApiChat; link?: string; offsetDate?: number; offsetUser?: ApiUser; limit?: number; isRequested?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetChatInviteImporters({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    link,\n    offsetDate,\n    offsetUser: offsetUser\n      ? buildInputEntity(offsetUser.id, offsetUser.accessHash) as GramJs.InputUser : new GramJs.InputUserEmpty(),\n    limit,\n    requested: isRequested || undefined,\n  }));\n\n  if (!result) return undefined;\n  const users = result.users.map((user) => buildApiUser(user)).filter(Boolean);\n  addEntitiesWithPhotosToLocalDb(result.users);\n  return {\n    importers: result.importers.map((importer) => buildChatInviteImporter(importer)),\n    users: buildCollectionByKey(users, 'id'),\n  };\n}\n\nexport function hideChatJoinRequest({\n  peer,\n  user,\n  isApproved,\n}: {\n  peer: ApiChat;\n  user: ApiUser;\n  isApproved: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.HideChatJoinRequest({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    approved: isApproved || undefined,\n  }), true);\n}\n\nexport function hideAllChatJoinRequests({\n  peer,\n  isApproved,\n  link,\n}: {\n  peer: ApiChat;\n  isApproved: boolean;\n  link?: string;\n}) {\n  return invokeRequest(new GramJs.messages.HideAllChatJoinRequests({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    approved: isApproved || undefined,\n    link,\n  }), true);\n}\n\nexport function hideChatReportPanel(chat: ApiChat) {\n  const { id, accessHash } = chat;\n\n  return invokeRequest(new GramJs.messages.HidePeerSettingsBar({\n    peer: buildInputPeer(id, accessHash),\n  }));\n}\n","import { Api as GramJs, errors } from '../../../lib/gramjs';\n\nimport type { OnApiUpdate } from '../../types';\n\nimport { DEBUG } from '../../../config';\nimport { invokeRequest, updateTwoFaSettings, getTmpPassword } from './client';\n\nconst ApiErrors: { [k: string]: string } = {\n  EMAIL_UNCONFIRMED: 'Email unconfirmed',\n  EMAIL_HASH_EXPIRED: 'Email hash expired',\n  NEW_SALT_INVALID: 'The new salt is invalid',\n  NEW_SETTINGS_INVALID: 'The new password settings are invalid',\n  CODE_INVALID: 'Invalid Code',\n  PASSWORD_HASH_INVALID: 'Invalid Password',\n};\n\nconst emailCodeController: {\n  resolve?: Function;\n  reject?: Function;\n} = {};\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function getPasswordInfo() {\n  const result = await invokeRequest(new GramJs.account.GetPassword());\n  if (!result) {\n    return undefined;\n  }\n\n  const { hint, hasPassword } = result;\n\n  return { hint, hasPassword };\n}\n\nfunction onRequestEmailCode(length: number) {\n  onUpdate({\n    '@type': 'updateTwoFaStateWaitCode',\n    length,\n  });\n\n  return new Promise<string>((resolve, reject) => {\n    emailCodeController.resolve = resolve;\n    emailCodeController.reject = reject;\n  });\n}\n\nexport function getTemporaryPaymentPassword(password: string, ttl?: number) {\n  return getTmpPassword(password, ttl);\n}\n\nexport async function checkPassword(currentPassword: string) {\n  try {\n    await updateTwoFaSettings({ isCheckPassword: true, currentPassword });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function clearPassword(currentPassword: string) {\n  try {\n    await updateTwoFaSettings({ currentPassword });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function updatePassword(currentPassword: string, password: string, hint?: string, email?: string) {\n  try {\n    await updateTwoFaSettings({\n      currentPassword,\n      newPassword: password,\n      hint,\n      email,\n      emailCodeCallback: onRequestEmailCode,\n      onEmailCodeError: onError,\n    });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport async function updateRecoveryEmail(currentPassword: string, email: string) {\n  try {\n    await updateTwoFaSettings({\n      currentPassword,\n      newPassword: currentPassword,\n      email,\n      emailCodeCallback: onRequestEmailCode,\n      onEmailCodeError: onError,\n    });\n\n    return true;\n  } catch (err: any) {\n    onError(err);\n\n    return false;\n  }\n}\n\nexport function provideRecoveryEmailCode(code: string) {\n  emailCodeController.resolve!(code);\n}\n\nfunction onError(err: Error) {\n  let message: string;\n\n  if (err instanceof errors.FloodWaitError) {\n    const hours = Math.ceil(Number(err.seconds) / 60 / 60);\n    message = `Too many attempts. Try again in ${hours > 1 ? `${hours} hours` : 'an hour'}`;\n  } else {\n    message = ApiErrors[err.message];\n  }\n\n  if (!message) {\n    message = 'Unexpected Error';\n\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n\n  onUpdate({\n    '@type': 'updateTwoFaError',\n    message,\n  });\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiThemeParameters, ApiUser, OnApiUpdate,\n} from '../../types';\n\nimport localDb from '../localDb';\nimport { invokeRequest } from './client';\nimport { buildInputPeer, buildInputThemeParams, generateRandomBigInt } from '../gramjsBuilders';\nimport { buildApiUser } from '../apiBuilders/users';\nimport {\n  buildApiAttachBot, buildApiBotInlineMediaResult, buildApiBotInlineResult, buildBotSwitchPm,\n} from '../apiBuilders/bots';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { addEntitiesWithPhotosToLocalDb, addUserToLocalDb, deserializeBytes } from '../helpers';\nimport { omitVirtualClassFields } from '../apiBuilders/helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { buildApiUrlAuthResult } from '../apiBuilders/misc';\nimport Account from \"../../../worker/share/Account\";\nimport AnswerCallbackButtonRes from '../../../lib/ptp/protobuf/PTPMsg/AnswerCallbackButtonRes';\nimport {AnswerCallbackButtonReq} from \"../../../lib/ptp/protobuf/PTPMsg\";\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function answerCallbackButton({\n  chatId, accessHash, messageId, data, isGame,\n}: {\n  chatId: string; accessHash?: string; messageId: number; data?: string; isGame?: boolean;\n}) {\n  const pdu = await Account.getCurrentAccount()?.sendPduWithCallback(new AnswerCallbackButtonReq({\n    chatId,accessHash,messageId,data,isGame\n  }).pack())\n  if(!pdu){\n    return undefined\n  }\n  const result = AnswerCallbackButtonRes.parseMsg(pdu)\n  return result\n}\n\nexport async function fetchTopInlineBots() {\n  const topPeers = await invokeRequest(new GramJs.contacts.GetTopPeers({\n    botsInline: true,\n  }));\n\n  if (!(topPeers instanceof GramJs.contacts.TopPeers)) {\n    return undefined;\n  }\n\n  const users = topPeers.users.map(buildApiUser).filter(Boolean);\n  const ids = users.map(({ id }) => id);\n\n  return {\n    ids,\n    users,\n  };\n}\n\nexport async function fetchInlineBot({ username }: { username: string }) {\n  const resolvedPeer = await invokeRequest(new GramJs.contacts.ResolveUsername({ username }));\n\n  if (\n    !resolvedPeer\n    || !(\n      resolvedPeer.users[0] instanceof GramJs.User\n      && resolvedPeer.users[0].bot\n      && resolvedPeer.users[0].botInlinePlaceholder\n    )\n  ) {\n    return undefined;\n  }\n\n  addUserToLocalDb(resolvedPeer.users[0]);\n\n  return {\n    user: buildApiUser(resolvedPeer.users[0]),\n    chat: buildApiChatFromPreview(resolvedPeer.users[0]),\n  };\n}\n\nexport async function fetchInlineBotResults({\n  bot, chat, query, offset = '',\n}: {\n  bot: ApiUser; chat: ApiChat; query: string; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetInlineBotResults({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    query,\n    offset,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    isGallery: Boolean(result.gallery),\n    help: bot.botPlaceholder,\n    nextOffset: getInlineBotResultsNextOffset(bot.usernames![0].username, result.nextOffset),\n    switchPm: buildBotSwitchPm(result.switchPm),\n    users: result.users.map(buildApiUser).filter(Boolean),\n    results: processInlineBotResult(String(result.queryId), result.results),\n    cacheTime: result.cacheTime,\n  };\n}\n\nexport async function sendInlineBotResult({\n  chat, replyingToTopId, resultId, queryId, replyingTo, sendAs, isSilent, scheduleDate,\n}: {\n  chat: ApiChat;\n  replyingToTopId?: number;\n  resultId: string;\n  queryId: string;\n  replyingTo?: number;\n  sendAs?: ApiUser | ApiChat;\n  isSilent?: boolean;\n  scheduleDate?: number;\n}) {\n  const randomId = generateRandomBigInt();\n\n  await invokeRequest(new GramJs.messages.SendInlineBotResult({\n    clearDraft: true,\n    randomId,\n    queryId: BigInt(queryId),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: resultId,\n    scheduleDate,\n    ...(replyingToTopId && { topMsgId: replyingToTopId }),\n    ...(isSilent && { silent: true }),\n    ...(replyingTo && { replyToMsgId: replyingTo }),\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }), true);\n}\n\nexport async function startBot({\n  bot, startParam,\n}: {\n  bot: ApiUser;\n  startParam?: string;\n}) {\n  const randomId = generateRandomBigInt();\n\n  await invokeRequest(new GramJs.messages.StartBot({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    peer: buildInputPeer(bot.id, bot.accessHash),\n    randomId,\n    startParam,\n  }), true);\n}\n\nexport async function requestWebView({\n  isSilent,\n  peer,\n  bot,\n  url,\n  startParam,\n  replyToMessageId,\n  threadId,\n  theme,\n  sendAs,\n  isFromBotMenu,\n}: {\n  isSilent?: boolean;\n  peer: ApiChat | ApiUser;\n  bot: ApiUser;\n  url?: string;\n  startParam?: string;\n  replyToMessageId?: number;\n  threadId?: number;\n  theme?: ApiThemeParameters;\n  sendAs?: ApiUser | ApiChat;\n  isFromBotMenu?: boolean;\n}) {\n  // const result = await invokeRequest(new GramJs.messages.RequestWebView({\n  //   silent: isSilent || undefined,\n  //   peer: buildInputPeer(peer.id, peer.accessHash),\n  //   bot: buildInputPeer(bot.id, bot.accessHash),\n  //   replyToMsgId: replyToMessageId,\n  //   url,\n  //   startParam,\n  //   themeParams: theme ? buildInputThemeParams(theme) : undefined,\n  //   fromBotMenu: isFromBotMenu || undefined,\n  //   platform: 'webz',\n  //   ...(threadId && { topMsgId: threadId }),\n  //   ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  // }));\n  //\n  // if (result instanceof GramJs.WebViewResultUrl) {\n  //   return {\n  //     url: result.url,\n  //     queryId: result.queryId.toString(),\n  //   };\n  // }\n  return {\n      url: `https://webappcontent.telegram.org/cafe/?mode=menu#tgWebAppData=query_id%3DAAHFY2V2AgAAAMVjZXb0KFJb%26user%3D%257B%2522id%2522%253A6281323461%252C%2522first_name%2522%253A%2522Wai%2522%252C%2522last_name%2522%253A%2522Chat%2522%252C%2522username%2522%253A%2522wai_chat%2522%252C%2522language_code%2522%253A%2522en%2522%257D%26auth_date%3D1680293757%26hash%3D513a7167671bc1e80c1d95c168231a1a4f32511942a2bfae25c2640e1c925a7f&tgWebAppVersion=6.4&tgWebAppPlatform=webz&tgWebAppThemeParams=%7B\"bg_color\"%3A\"%23212121\"%2C\"text_color\"%3A\"%23ffffff\"%2C\"hint_color\"%3A\"%23aaaaaa\"%2C\"link_color\"%3A\"%238774e1\"%2C\"button_color\"%3A\"%238774e1\"%2C\"button_text_color\"%3A\"%23ffffff\"%2C\"secondary_bg_color\"%3A\"%230f0f0f\"%7D`,\n      queryId: \"sss\",\n    };\n  return undefined;\n}\n\nexport async function requestSimpleWebView({\n  bot, url, theme,\n}: {\n  bot: ApiUser;\n  url: string;\n  theme?: ApiThemeParameters;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestSimpleWebView({\n    url,\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    themeParams: theme ? buildInputThemeParams(theme) : undefined,\n    platform: 'webz',\n  }));\n\n  return result?.url;\n}\n\nexport function prolongWebView({\n  isSilent,\n  peer,\n  bot,\n  queryId,\n  replyToMessageId,\n  threadId,\n  sendAs,\n}: {\n  isSilent?: boolean;\n  peer: ApiChat | ApiUser;\n  bot: ApiUser;\n  queryId: string;\n  replyToMessageId?: number;\n  threadId?: number;\n  sendAs?: ApiUser | ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.ProlongWebView({\n    silent: isSilent || undefined,\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    queryId: BigInt(queryId),\n    replyToMsgId: replyToMessageId,\n    ...(threadId && { topMsgId: threadId }),\n    ...(sendAs && { sendAs: buildInputPeer(sendAs.id, sendAs.accessHash) }),\n  }));\n}\n\nexport async function sendWebViewData({\n  bot, buttonText, data,\n}: {\n  bot: ApiUser;\n  buttonText: string;\n  data: string;\n}) {\n  const randomId = generateRandomBigInt();\n  await invokeRequest(new GramJs.messages.SendWebViewData({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    buttonText,\n    data,\n    randomId,\n  }), true);\n}\n\nexport async function loadAttachBots({\n  hash,\n}: {\n  hash?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetAttachMenuBots({\n    hash: hash ? BigInt(hash) : undefined,\n  }));\n\n  if (result instanceof GramJs.AttachMenuBots) {\n    addEntitiesWithPhotosToLocalDb(result.users);\n    return {\n      hash: result.hash.toString(),\n      bots: buildCollectionByKey(result.bots.map(buildApiAttachBot), 'id'),\n      users: result.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n  return undefined;\n}\n\nexport async function loadAttachBot({\n  bot,\n}: {\n  bot: ApiUser;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetAttachMenuBot({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n  }));\n\n  if (result instanceof GramJs.AttachMenuBotsBot) {\n    addEntitiesWithPhotosToLocalDb(result.users);\n    return {\n      bot: buildApiAttachBot(result.bot),\n      users: result.users.map(buildApiUser).filter(Boolean),\n    };\n  }\n  return undefined;\n}\n\nexport function toggleAttachBot({\n  bot,\n  isWriteAllowed,\n  isEnabled,\n}: {\n  bot: ApiUser;\n  isWriteAllowed?: boolean;\n  isEnabled: boolean;\n}) {\n  return invokeRequest(new GramJs.messages.ToggleBotInAttachMenu({\n    bot: buildInputPeer(bot.id, bot.accessHash),\n    writeAllowed: isWriteAllowed || undefined,\n    enabled: isEnabled,\n  }));\n}\n\nexport async function requestBotUrlAuth({\n  chat, buttonId, messageId,\n}: {\n  chat: ApiChat;\n  buttonId: number;\n  messageId: number;\n}) {\n  const result = await invokeRequest(new GramJs.messages.RequestUrlAuth({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    buttonId,\n    msgId: messageId,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function acceptBotUrlAuth({\n  chat,\n  messageId,\n  buttonId,\n  isWriteAllowed,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  buttonId: number;\n  isWriteAllowed?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.messages.AcceptUrlAuth({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n    buttonId,\n    writeAllowed: isWriteAllowed || undefined,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function requestLinkUrlAuth({ url }: { url: string }) {\n  const result = await invokeRequest(new GramJs.messages.RequestUrlAuth({\n    url,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nexport async function acceptLinkUrlAuth({ url, isWriteAllowed }: { url: string; isWriteAllowed?: boolean }) {\n  const result = await invokeRequest(new GramJs.messages.AcceptUrlAuth({\n    url,\n    writeAllowed: isWriteAllowed || undefined,\n  }));\n\n  if (!result) return undefined;\n\n  const authResult = buildApiUrlAuthResult(result);\n  if (authResult?.type === 'request') {\n    onUpdate({\n      '@type': 'updateUser',\n      id: authResult.bot.id,\n      user: authResult.bot,\n    });\n  }\n  return authResult;\n}\n\nfunction processInlineBotResult(queryId: string, results: GramJs.TypeBotInlineResult[]) {\n  return results.map((result) => {\n    if (result instanceof GramJs.BotInlineMediaResult) {\n      if (result.document instanceof GramJs.Document) {\n        addDocumentToLocalDb(result.document);\n      }\n\n      if (result.photo instanceof GramJs.Photo) {\n        addPhotoToLocalDb(result.photo);\n      }\n\n      return buildApiBotInlineMediaResult(result, queryId);\n    }\n\n    if (result.thumb) {\n      addWebDocumentToLocalDb(result.thumb);\n    }\n\n    return buildApiBotInlineResult(result, queryId);\n  });\n}\n\nfunction getInlineBotResultsNextOffset(username: string, nextOffset?: string) {\n  return username === 'gif' && nextOffset === '0' ? '' : nextOffset;\n}\n\nfunction addDocumentToLocalDb(document: GramJs.Document) {\n  localDb.documents[String(document.id)] = document;\n}\n\nfunction addPhotoToLocalDb(photo: GramJs.Photo) {\n  localDb.photos[String(photo.id)] = photo;\n}\n\nfunction addWebDocumentToLocalDb(webDocument: GramJs.TypeWebDocument) {\n  localDb.webDocuments[webDocument.url] = webDocument;\n}\n","import BigInt from 'big-integer';\nimport type { JoinGroupCallPayload } from '../../../lib/secret-sauce';\nimport type {\n  ApiChat, ApiUser, OnApiUpdate, ApiGroupCall, ApiPhoneCall,\n} from '../../types';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport { invokeRequest } from './client';\nimport {\n  buildInputGroupCall, buildInputPeer, buildInputPhoneCall, generateRandomInt,\n} from '../gramjsBuilders';\nimport {\n  buildCallProtocol,\n  buildApiGroupCall,\n  buildApiGroupCallParticipant, buildPhoneCall,\n\n} from '../apiBuilders/calls';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { buildApiChatFromPreview } from '../apiBuilders/chats';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { GROUP_CALL_PARTICIPANTS_LIMIT } from '../../../config';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function getGroupCall({\n  call,\n}: {\n  call: Partial<ApiGroupCall>;\n}) {\n  const result = await invokeRequest(new GramJs.phone.GetGroupCall({\n    call: buildInputGroupCall(call),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  return {\n    groupCall: buildApiGroupCall(result.call),\n    users,\n    chats,\n  };\n}\n\nexport function discardGroupCall({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.DiscardGroupCall({\n    call: buildInputGroupCall(call),\n  }), true);\n}\n\nexport function editGroupCallParticipant({\n  call, participant, muted, presentationPaused, videoStopped, videoPaused, volume,\n  raiseHand,\n}: {\n  call: ApiGroupCall; participant: ApiUser; muted?: boolean; presentationPaused?: boolean;\n  videoStopped?: boolean; videoPaused?: boolean; raiseHand?: boolean; volume?: number;\n}) {\n  return invokeRequest(new GramJs.phone.EditGroupCallParticipant({\n    call: buildInputGroupCall(call),\n    participant: buildInputPeer(participant.id, participant.accessHash),\n    ...(videoStopped !== undefined && { videoStopped }),\n    ...(videoPaused !== undefined && { videoPaused }),\n    ...(muted !== undefined && { muted }),\n    ...(presentationPaused !== undefined && { presentationPaused }),\n    ...(raiseHand !== undefined && { raiseHand }),\n    ...(volume !== undefined && { volume }),\n  }), true);\n}\n\nexport function editGroupCallTitle({\n  groupCall, title,\n}: {\n  groupCall: ApiGroupCall; title: string;\n}) {\n  return invokeRequest(new GramJs.phone.EditGroupCallTitle({\n    title,\n    call: buildInputGroupCall(groupCall),\n  }), true);\n}\n\nexport async function exportGroupCallInvite({\n  call, canSelfUnmute,\n}: {\n  call: ApiGroupCall; canSelfUnmute: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.phone.ExportGroupCallInvite({\n    canSelfUnmute: canSelfUnmute || undefined,\n    call: buildInputGroupCall(call),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.link;\n}\n\nexport async function fetchGroupCallParticipants({\n  call, offset,\n}: {\n  call: ApiGroupCall; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.phone.GetGroupParticipants({\n    call: buildInputGroupCall(call),\n    ids: [],\n    sources: [],\n    offset: offset || '',\n    limit: GROUP_CALL_PARTICIPANTS_LIMIT,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  const chats = result.chats.map((c) => buildApiChatFromPreview(c)).filter(Boolean);\n\n  onUpdate({\n    '@type': 'updateGroupCallParticipants',\n    groupCallId: call.id,\n    participants: result.participants.map(buildApiGroupCallParticipant),\n    nextOffset: result.nextOffset,\n  });\n\n  return {\n    users, chats,\n  };\n}\n\nexport function leaveGroupCall({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.LeaveGroupCall({\n    call: buildInputGroupCall(call),\n  }), true);\n}\n\nexport async function joinGroupCall({\n  call, inviteHash, params,\n}: {\n  call: ApiGroupCall; inviteHash?: string; params: JoinGroupCallPayload;\n}) {\n  const result = await invokeRequest(new GramJs.phone.JoinGroupCall({\n    call: buildInputGroupCall(call),\n    joinAs: new GramJs.InputPeerSelf(),\n    muted: true,\n    videoStopped: true,\n    params: new GramJs.DataJSON({\n      data: JSON.stringify(params),\n    }),\n    inviteHash,\n  }));\n\n  if (!result) return undefined;\n\n  if (result instanceof GramJs.Updates) {\n    const update = result.updates.find((u) => u instanceof GramJs.UpdateGroupCall);\n    if (!(update instanceof GramJs.UpdateGroupCall)) return undefined;\n\n    return buildApiGroupCall(update.call);\n  }\n\n  return undefined;\n}\n\nexport async function createGroupCall({\n  peer,\n}: {\n  peer: ApiChat;\n}) {\n  const randomId = generateRandomInt();\n  const result = await invokeRequest(new GramJs.phone.CreateGroupCall({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    randomId,\n  }));\n\n  if (!result) return undefined;\n\n  if (result instanceof GramJs.Updates) {\n    const update = result.updates[0];\n    if (update instanceof GramJs.UpdateGroupCall) {\n      return buildApiGroupCall(update.call);\n    }\n  }\n\n  return undefined;\n}\n\nexport function joinGroupCallPresentation({\n  call, params,\n}: {\n  call: ApiGroupCall; params: JoinGroupCallPayload;\n}) {\n  return invokeRequest(new GramJs.phone.JoinGroupCallPresentation({\n    call: buildInputGroupCall(call),\n    params: new GramJs.DataJSON({\n      data: JSON.stringify(params),\n    }),\n  }), true);\n}\n\nexport function toggleGroupCallStartSubscription({\n  call, subscribed,\n}: {\n  call: ApiGroupCall; subscribed: boolean;\n}) {\n  return invokeRequest(new GramJs.phone.ToggleGroupCallStartSubscription({\n    call: buildInputGroupCall(call),\n    subscribed,\n  }), true, undefined, undefined, undefined, true);\n}\n\nexport function leaveGroupCallPresentation({\n  call,\n}: {\n  call: ApiGroupCall;\n}) {\n  return invokeRequest(new GramJs.phone.LeaveGroupCallPresentation({\n    call: buildInputGroupCall(call),\n  }), true);\n}\n\nexport async function getDhConfig() {\n  const dhConfig = await invokeRequest(new GramJs.messages.GetDhConfig({}));\n\n  if (!dhConfig || dhConfig instanceof GramJs.messages.DhConfigNotModified) return undefined;\n\n  return {\n    g: dhConfig.g,\n    p: Array.from(dhConfig.p),\n    random: Array.from(dhConfig.random),\n  };\n}\n\nexport function discardCall({\n  call, isBusy,\n}: {\n  call: ApiPhoneCall; isBusy?: boolean;\n}) {\n  return invokeRequest(new GramJs.phone.DiscardCall({\n    peer: buildInputPhoneCall(call),\n    reason: isBusy ? new GramJs.PhoneCallDiscardReasonBusy() : new GramJs.PhoneCallDiscardReasonHangup(),\n  }), true);\n}\n\nexport async function requestCall({\n  user, gAHash, isVideo,\n}: {\n  user: ApiUser; gAHash: number[]; isVideo?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.phone.RequestCall({\n    randomId: generateRandomInt(),\n    userId: buildInputPeer(user.id, user.accessHash),\n    gAHash: Buffer.from(gAHash),\n    ...(isVideo && { video: true }),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  const call = buildPhoneCall(result.phoneCall);\n\n  onUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport function setCallRating({\n  call, rating, comment,\n}: {\n  call: ApiPhoneCall; rating: number; comment: string;\n}) {\n  return invokeRequest(new GramJs.phone.SetCallRating({\n    rating,\n    peer: buildInputPhoneCall(call),\n    comment,\n  }), true);\n}\n\nexport function receivedCall({\n  call,\n}: {\n  call: ApiPhoneCall;\n}) {\n  return invokeRequest(new GramJs.phone.ReceivedCall({\n    peer: buildInputPhoneCall(call),\n  }));\n}\n\nexport async function acceptCall({\n  call, gB,\n}: {\n  call: ApiPhoneCall; gB: number[];\n}) {\n  const result = await invokeRequest(new GramJs.phone.AcceptCall({\n    peer: buildInputPhoneCall(call),\n    gB: Buffer.from(gB),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  call = buildPhoneCall(result.phoneCall);\n\n  onUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport async function confirmCall({\n  call, gA, keyFingerprint,\n}: {\n  call: ApiPhoneCall; gA: number[]; keyFingerprint: string;\n}) {\n  const result = await invokeRequest(new GramJs.phone.ConfirmCall({\n    peer: buildInputPhoneCall(call),\n    gA: Buffer.from(gA),\n    keyFingerprint: BigInt(keyFingerprint),\n    protocol: buildCallProtocol(),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  call = buildPhoneCall(result.phoneCall);\n\n  onUpdate({\n    '@type': 'updatePhoneCall',\n    call,\n  });\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport function sendSignalingData({\n  data, call,\n}: {\n  data: number[]; call: ApiPhoneCall;\n}) {\n  return invokeRequest(new GramJs.phone.SendSignalingData({\n    data: Buffer.from(data),\n    peer: buildInputPhoneCall(call),\n  }));\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { invokeRequest } from './client';\nimport { buildInputInvoice, buildInputPeer, buildShippingInfo } from '../gramjsBuilders';\nimport {\n  buildApiInvoiceFromForm,\n  buildApiPremiumPromo,\n  buildApiPaymentForm,\n  buildApiReceipt,\n  buildShippingOptions,\n} from '../apiBuilders/payments';\nimport type {\n  ApiChat, OnApiUpdate, ApiRequestInputInvoice,\n} from '../../types';\nimport localDb from '../localDb';\nimport {\n  addEntitiesWithPhotosToLocalDb,\n  deserializeBytes,\n  serializeBytes,\n} from '../helpers';\nimport { buildApiUser } from '../apiBuilders/users';\nimport { getTemporaryPaymentPassword } from './twoFaSettings';\n\nlet onUpdate: OnApiUpdate;\n\nexport function init(_onUpdate: OnApiUpdate) {\n  onUpdate = _onUpdate;\n}\n\nexport async function validateRequestedInfo({\n  inputInvoice,\n  requestInfo,\n  shouldSave,\n}: {\n  inputInvoice: ApiRequestInputInvoice;\n  requestInfo: GramJs.TypePaymentRequestedInfo;\n  shouldSave?: boolean;\n}): Promise<{\n    id: string;\n    shippingOptions: any;\n  } | undefined> {\n  const result = await invokeRequest(new GramJs.payments.ValidateRequestedInfo({\n    invoice: buildInputInvoice(inputInvoice),\n    save: shouldSave || undefined,\n    info: buildShippingInfo(requestInfo),\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return undefined;\n  }\n\n  return {\n    id,\n    shippingOptions: buildShippingOptions(shippingOptions),\n  };\n}\n\nexport async function sendPaymentForm({\n  inputInvoice,\n  formId,\n  requestedInfoId,\n  shippingOptionId,\n  credentials,\n  savedCredentialId,\n  temporaryPassword,\n  tipAmount,\n}: {\n  inputInvoice: ApiRequestInputInvoice;\n  formId: string;\n  credentials: any;\n  requestedInfoId?: string;\n  shippingOptionId?: string;\n  savedCredentialId?: string;\n  temporaryPassword?: string;\n  tipAmount?: number;\n}) {\n  const inputCredentials = temporaryPassword && savedCredentialId\n    ? new GramJs.InputPaymentCredentialsSaved({\n      id: savedCredentialId,\n      tmpPassword: deserializeBytes(temporaryPassword),\n    })\n    : new GramJs.InputPaymentCredentials({\n      save: credentials.save,\n      data: new GramJs.DataJSON({ data: JSON.stringify(credentials.data) }),\n    });\n  const result = await invokeRequest(new GramJs.payments.SendPaymentForm({\n    formId: BigInt(formId),\n    invoice: buildInputInvoice(inputInvoice),\n    requestedInfoId,\n    shippingOptionId,\n    credentials: inputCredentials,\n    ...(tipAmount && { tipAmount: BigInt(tipAmount) }),\n  }));\n\n  if (result instanceof GramJs.payments.PaymentVerificationNeeded) {\n    onUpdate({\n      '@type': 'updatePaymentVerificationNeeded',\n      url: result.url,\n    });\n\n    return undefined;\n  }\n\n  return Boolean(result);\n}\n\nexport async function getPaymentForm(inputInvoice: ApiRequestInputInvoice) {\n  const result = await invokeRequest(new GramJs.payments.GetPaymentForm({\n    invoice: buildInputInvoice(inputInvoice),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  if (result.photo) {\n    localDb.webDocuments[result.photo.url] = result.photo;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    form: buildApiPaymentForm(result),\n    invoice: buildApiInvoiceFromForm(result),\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport async function getReceipt(chat: ApiChat, msgId: number) {\n  const result = await invokeRequest(new GramJs.payments.GetPaymentReceipt({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    receipt: buildApiReceipt(result),\n    users: result.users.map(buildApiUser).filter(Boolean),\n  };\n}\n\nexport async function fetchPremiumPromo() {\n  const result = await invokeRequest(new GramJs.help.GetPremiumPromo());\n  if (!result) return undefined;\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n  result.videos.forEach((video) => {\n    if (video instanceof GramJs.Document) {\n      localDb.documents[video.id.toString()] = video;\n    }\n  });\n\n  return {\n    promo: buildApiPremiumPromo(result),\n    users,\n  };\n}\n\nexport async function fetchTemporaryPaymentPassword(password: string) {\n  const result = await getTemporaryPaymentPassword(password);\n\n  if (!result) {\n    return undefined;\n  }\n\n  if ('error' in result) {\n    return result;\n  }\n\n  return {\n    value: serializeBytes(result.tmpPassword),\n    validUntil: result.validUntil,\n  };\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiInvoice, ApiPaymentSavedInfo, ApiPremiumPromo, ApiPremiumSubscriptionOption,\n  ApiPaymentForm, ApiReceipt, ApiLabeledPrice, ApiPaymentCredentials,\n} from '../../types';\n\nimport { buildApiDocument, buildApiMessageEntity, buildApiWebDocument } from './messages';\nimport { omitVirtualClassFields } from './helpers';\n\nexport function buildShippingOptions(shippingOptions: GramJs.ShippingOption[] | undefined) {\n  if (!shippingOptions) {\n    return undefined;\n  }\n\n  return Object.values(shippingOptions).map((option) => {\n    return {\n      id: option.id,\n      title: option.title,\n      amount: option.prices.reduce((ac, cur) => ac + cur.amount.toJSNumber(), 0),\n      prices: option.prices.map(({ label, amount }) => {\n        return {\n          label,\n          amount: amount.toJSNumber(),\n        };\n      }),\n    };\n  });\n}\n\nexport function buildApiReceipt(receipt: GramJs.payments.PaymentReceipt): ApiReceipt {\n  const {\n    invoice,\n    info,\n    shipping,\n    currency,\n    totalAmount,\n    credentialsTitle,\n    tipAmount,\n  } = receipt;\n\n  const { shippingAddress, phone, name } = (info || {});\n\n  const { prices } = invoice;\n  const mappedPrices: ApiLabeledPrice[] = prices.map(({ label, amount }) => ({\n    label,\n    amount: amount.toJSNumber(),\n  }));\n\n  let shippingPrices: ApiLabeledPrice[] | undefined;\n  let shippingMethod: string | undefined;\n\n  if (shipping) {\n    shippingPrices = shipping.prices.map(({ label, amount }) => {\n      return {\n        label,\n        amount: amount.toJSNumber(),\n      };\n    });\n    shippingMethod = shipping.title;\n  }\n\n  return {\n    currency,\n    prices: mappedPrices,\n    info: { shippingAddress, phone, name },\n    totalAmount: totalAmount.toJSNumber(),\n    credentialsTitle,\n    shippingPrices,\n    shippingMethod,\n    tipAmount: tipAmount ? tipAmount.toJSNumber() : 0,\n  };\n}\n\nexport function buildApiPaymentForm(form: GramJs.payments.PaymentForm): ApiPaymentForm {\n  const {\n    formId,\n    canSaveCredentials,\n    passwordMissing: isPasswordMissing,\n    providerId,\n    nativeProvider,\n    nativeParams,\n    savedInfo,\n    invoice,\n    savedCredentials,\n  } = form;\n\n  const {\n    test: isTest,\n    nameRequested: isNameRequested,\n    phoneRequested: isPhoneRequested,\n    emailRequested: isEmailRequested,\n    shippingAddressRequested: isShippingAddressRequested,\n    flexible: isFlexible,\n    phoneToProvider: shouldSendPhoneToProvider,\n    emailToProvider: shouldSendEmailToProvider,\n    currency,\n    prices,\n  } = invoice;\n\n  const mappedPrices: ApiLabeledPrice[] = prices.map(({ label, amount }) => ({\n    label,\n    amount: amount.toJSNumber(),\n  }));\n  const { shippingAddress } = savedInfo || {};\n  const cleanedInfo: ApiPaymentSavedInfo | undefined = savedInfo ? omitVirtualClassFields(savedInfo) : undefined;\n  if (cleanedInfo && shippingAddress) {\n    cleanedInfo.shippingAddress = omitVirtualClassFields(shippingAddress);\n  }\n\n  const nativeData = nativeParams ? JSON.parse(nativeParams.data) : {};\n\n  return {\n    canSaveCredentials,\n    isPasswordMissing,\n    formId: String(formId),\n    providerId: String(providerId),\n    nativeProvider,\n    savedInfo: cleanedInfo,\n    invoiceContainer: {\n      isTest,\n      isNameRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      isShippingAddressRequested,\n      isFlexible,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices: mappedPrices,\n    },\n    nativeParams: {\n      needCardholderName: Boolean(nativeData?.need_cardholder_name),\n      needCountry: Boolean(nativeData?.need_country),\n      needZip: Boolean(nativeData?.need_zip),\n      publishableKey: nativeData?.publishable_key,\n      publicToken: nativeData?.public_token,\n    },\n    ...(savedCredentials && { savedCredentials: buildApiPaymentCredentials(savedCredentials) }),\n  };\n}\n\nexport function buildApiInvoiceFromForm(form: GramJs.payments.PaymentForm): ApiInvoice {\n  const {\n    invoice, description: text, title, photo,\n  } = form;\n  const {\n    test, currency, prices, recurring, recurringTermsUrl, maxTipAmount, suggestedTipAmounts,\n  } = invoice;\n\n  const totalAmount = prices.reduce((ac, cur) => ac + cur.amount.toJSNumber(), 0);\n\n  return {\n    text,\n    title,\n    photo: buildApiWebDocument(photo),\n    amount: totalAmount,\n    currency,\n    isTest: test,\n    isRecurring: recurring,\n    recurringTermsUrl,\n    maxTipAmount: maxTipAmount?.toJSNumber(),\n    ...(suggestedTipAmounts && { suggestedTipAmounts: suggestedTipAmounts.map((tip) => tip.toJSNumber()) }),\n  };\n}\n\nexport function buildApiPremiumPromo(promo: GramJs.help.PremiumPromo): ApiPremiumPromo {\n  const {\n    statusText, statusEntities, videos, videoSections, periodOptions,\n  } = promo;\n\n  return {\n    statusText,\n    statusEntities: statusEntities.map(buildApiMessageEntity),\n    videoSections,\n    videos: videos.map(buildApiDocument).filter(Boolean),\n    options: periodOptions.map(buildApiPremiumSubscriptionOption),\n  };\n}\n\nfunction buildApiPremiumSubscriptionOption(option: GramJs.PremiumSubscriptionOption): ApiPremiumSubscriptionOption {\n  const {\n    current, canPurchaseUpgrade, currency, amount, botUrl, months,\n  } = option;\n\n  return {\n    isCurrent: current,\n    canPurchaseUpgrade,\n    currency,\n    amount: amount.toString(),\n    botUrl,\n    months,\n  };\n}\n\nexport function buildApiPaymentCredentials(credentials: GramJs.PaymentSavedCredentialsCard[]): ApiPaymentCredentials[] {\n  return credentials.map(({ id, title }) => ({ id, title }));\n}\n","import BigInt from 'big-integer';\nimport type {\n  ApiChat, ApiPhoto, ApiReportReason, ApiUser,\n} from '../../types';\nimport { invokeRequest } from './client';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { buildInputPeer, buildInputReportReason, buildInputPhoto } from '../gramjsBuilders';\n\nexport async function reportPeer({\n  peer,\n  reason,\n  description,\n}: {\n  peer: ApiChat | ApiUser; reason: ApiReportReason; description?: string;\n}) {\n  const result = await invokeRequest(new GramJs.account.ReportPeer({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function reportProfilePhoto({\n  peer,\n  photo,\n  reason,\n  description,\n}: {\n  peer: ApiChat | ApiUser; photo: ApiPhoto; reason: ApiReportReason; description?: string;\n}) {\n  const photoId = buildInputPhoto(photo);\n  if (!photoId) return undefined;\n\n  const result = await invokeRequest(new GramJs.account.ReportProfilePhoto({\n    peer: buildInputPeer(peer.id, peer.accessHash),\n    photoId,\n    reason: buildInputReportReason(reason),\n    message: description,\n  }));\n\n  return result;\n}\n\nexport async function changeSessionSettings({\n  hash, areCallsEnabled, areSecretChatsEnabled,\n}: {\n  hash: string; areCallsEnabled?: boolean; areSecretChatsEnabled?: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.account.ChangeAuthorizationSettings({\n    hash: BigInt(hash),\n    ...(areCallsEnabled !== undefined ? { callRequestsDisabled: !areCallsEnabled } : undefined),\n    ...(areSecretChatsEnabled !== undefined ? { encryptedRequestsDisabled: !areSecretChatsEnabled } : undefined),\n  }));\n\n  return result;\n}\n\nexport async function changeSessionTtl({\n  days,\n}: {\n  days: number;\n}) {\n  const result = await invokeRequest(new GramJs.account.SetAuthorizationTTL({\n    authorizationTtlDays: days,\n  }));\n\n  return result;\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport BigInt from 'big-integer';\nimport localDb from '../localDb';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport type { ApiAppConfig } from '../../types';\nimport type { ApiLimitType } from '../../../global/types';\nimport { buildJson } from './misc';\nimport { DEFAULT_LIMITS } from '../../../config';\n\ntype LimitType = 'default' | 'premium';\ntype Limit = 'upload_max_fileparts' | 'stickers_faved_limit' | 'saved_gifs_limit' | 'dialog_filters_chats_limit' |\n'dialog_filters_limit' | 'dialogs_folder_pinned_limit' | 'dialogs_pinned_limit' | 'caption_length_limit' |\n'channels_limit' | 'channels_public_limit' | 'about_length_limit';\ntype LimitKey = `${Limit}_${LimitType}`;\ntype LimitsConfig = Record<LimitKey, number>;\n\nexport interface GramJsAppConfig extends LimitsConfig {\n  emojies_sounds: Record<string, {\n    id: string;\n    access_hash: string;\n    file_reference_base64: string;\n  }>;\n  emojies_send_dice: string[];\n  groupcall_video_participants_max: number;\n  reactions_uniq_max: number;\n  chat_read_mark_size_threshold: number;\n  chat_read_mark_expire_period: number;\n  reactions_user_max_default: number;\n  reactions_user_max_premium: number;\n  autologin_domains: string[];\n  autologin_token: string;\n  url_auth_domains: string[];\n  premium_purchase_blocked: boolean;\n  premium_bot_username: string;\n  premium_invoice_slug: string;\n  premium_promo_order: string[];\n  default_emoji_statuses_stickerset_id: string;\n  hidden_members_group_size_min: number;\n  autoarchive_setting_available: boolean;\n  // Forums\n  topics_pinned_limit: number;\n}\n\nfunction buildEmojiSounds(appConfig: GramJsAppConfig) {\n  const { emojies_sounds } = appConfig;\n  return emojies_sounds ? Object.keys(emojies_sounds).reduce((acc: Record<string, string>, key) => {\n    const l = emojies_sounds[key];\n    localDb.documents[l.id] = new GramJs.Document({\n      id: BigInt(l.id),\n      accessHash: BigInt(l.access_hash),\n      dcId: 1,\n      mimeType: 'audio/ogg',\n      fileReference: Buffer.from(atob(l.file_reference_base64\n        .replace(/-/g, '+')\n        .replace(/_/g, '/'))),\n      size: BigInt(0),\n    } as GramJs.Document);\n\n    acc[key] = l.id;\n    return acc;\n  }, {}) : {};\n}\n\nfunction getLimit(appConfig: GramJsAppConfig, key: Limit, fallbackKey: ApiLimitType) {\n  const defaultLimit = appConfig[`${key}_default`] || DEFAULT_LIMITS[fallbackKey][0];\n  const premiumLimit = appConfig[`${key}_premium`] || DEFAULT_LIMITS[fallbackKey][1];\n  return [defaultLimit, premiumLimit] as const;\n}\n\nexport function buildAppConfig(json: GramJs.TypeJSONValue): ApiAppConfig {\n  const appConfig = buildJson(json) as GramJsAppConfig;\n\n  return {\n    emojiSounds: buildEmojiSounds(appConfig),\n    seenByMaxChatMembers: appConfig.chat_read_mark_size_threshold,\n    seenByExpiresAt: appConfig.chat_read_mark_expire_period,\n    autologinDomains: appConfig.autologin_domains || [],\n    autologinToken: appConfig.autologin_token || '',\n    urlAuthDomains: appConfig.url_auth_domains || [],\n    maxUniqueReactions: appConfig.reactions_uniq_max,\n    premiumBotUsername: appConfig.premium_bot_username,\n    premiumInvoiceSlug: appConfig.premium_invoice_slug,\n    premiumPromoOrder: appConfig.premium_promo_order,\n    isPremiumPurchaseBlocked: appConfig.premium_purchase_blocked,\n    defaultEmojiStatusesStickerSetId: appConfig.default_emoji_statuses_stickerset_id,\n    topicsPinnedLimit: appConfig.topics_pinned_limit,\n    maxUserReactionsDefault: appConfig.reactions_user_max_default,\n    maxUserReactionsPremium: appConfig.reactions_user_max_premium,\n    hiddenMembersMinCount: appConfig.hidden_members_group_size_min,\n    canDisplayAutoarchiveSetting: appConfig.autoarchive_setting_available,\n    limits: {\n      uploadMaxFileparts: getLimit(appConfig, 'upload_max_fileparts', 'uploadMaxFileparts'),\n      stickersFaved: getLimit(appConfig, 'stickers_faved_limit', 'stickersFaved'),\n      savedGifs: getLimit(appConfig, 'saved_gifs_limit', 'savedGifs'),\n      dialogFiltersChats: getLimit(appConfig, 'dialog_filters_chats_limit', 'dialogFiltersChats'),\n      dialogFilters: getLimit(appConfig, 'dialog_filters_limit', 'dialogFilters'),\n      dialogFolderPinned: getLimit(appConfig, 'dialogs_pinned_limit', 'dialogFolderPinned'),\n      captionLength: getLimit(appConfig, 'caption_length_limit', 'captionLength'),\n      channels: getLimit(appConfig, 'channels_limit', 'channels'),\n      channelsPublic: getLimit(appConfig, 'channels_public_limit', 'channelsPublic'),\n      aboutLength: getLimit(appConfig, 'about_length_limit', 'aboutLength'),\n    },\n  };\n}\n","import BigInt from 'big-integer';\nimport {Api as GramJs} from '../../../lib/gramjs';\n\nimport type {\n  ApiAppConfig,\n  ApiConfig,\n  ApiError,\n  ApiLangString,\n  ApiLanguage,\n  ApiNotifyException,\n  ApiPhoto,\n  ApiUser,\n} from '../../types';\nimport type {ApiPrivacyKey, InputPrivacyRules, LangCode} from '../../../types';\nimport type {LANG_PACKS} from '../../../config';\nimport {BLOCKED_LIST_LIMIT, DEFAULT_LANG_PACK, MAX_INT_32, UPLOAD_WORKERS} from '../../../config';\nimport {ACCEPTABLE_USERNAME_ERRORS} from './management';\nimport {\n  buildApiConfig,\n  buildApiCountryList,\n  buildApiNotifyException,\n  buildApiSession,\n  buildApiWallpaper,\n  buildApiWebSession,\n  buildPrivacyRules,\n} from '../apiBuilders/misc';\n\nimport {buildApiPhoto} from '../apiBuilders/common';\nimport {buildApiUser} from '../apiBuilders/users';\nimport {buildApiChatFromPreview} from '../apiBuilders/chats';\nimport {getApiChatIdFromMtpPeer} from '../apiBuilders/peers';\nimport {buildAppConfig} from '../apiBuilders/appConfig';\nimport {omitVirtualClassFields} from '../apiBuilders/helpers';\nimport {buildInputEntity, buildInputPeer, buildInputPhoto, buildInputPrivacyKey,} from '../gramjsBuilders';\nimport {getClient, invokeRequest, uploadFile} from './client';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {getServerTime} from '../../../util/serverTime';\nimport {addEntitiesWithPhotosToLocalDb, addPhotoToLocalDb} from '../helpers';\nimport localDb from '../localDb';\nimport {uploadFileV1} from \"../../../lib/gramjs/client/uploadFile\";\nimport {\n  UpdateProfileReq,\n  UpdateProfileRes,\n  UpdateUsernameReq,\n  UpdateUsernameRes,\n  UploadProfilePhotoReq,\n  UploadProfilePhotoRes\n} from \"../../../lib/ptp/protobuf/PTPAuth\";\nimport {ERR} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport Account from \"../../../worker/share/Account\";\n\nconst BETA_LANG_CODES = ['ar', 'fa', 'id', 'ko', 'uz', 'en'];\n\nexport async function updateProfile({\n  firstName,\n  lastName,\n  about,\n}: {\n  firstName?: string;\n  lastName?: string;\n  about?: string;\n}) {\n\n  // return invokeRequest(new GramJs.account.UpdateProfile({\n  //   firstName: firstName || '',\n  //   lastName: lastName || '',\n  //   about: about || '',\n  // }), true);\n\n  let pdu = await Account.getCurrentAccount()?.sendPduWithCallback(new UpdateProfileReq({\n      firstName: firstName || '',\n      lastName: lastName || '',\n      about: about || '',\n  }).pack())\n  if(!pdu){\n    return false\n  }\n  const {err} = UpdateProfileRes.parseMsg(pdu)\n  return err === ERR.NO_ERROR\n}\n\nexport async function checkUsername(username: string) {\n  try {\n    const result = await invokeRequest(new GramJs.account.CheckUsername({\n      username,\n    }), undefined, true);\n\n    return { result, error: undefined };\n  } catch (error) {\n    const errorMessage = (error as ApiError).message;\n\n    if (ACCEPTABLE_USERNAME_ERRORS.has(errorMessage)) {\n      return {\n        result: false,\n        error: errorMessage,\n      };\n    }\n\n    throw error;\n  }\n}\n\nexport async function updateUsername(username: string) {\n  const pdu = await  Account.getCurrentAccount()?.sendPduWithCallback(new UpdateUsernameReq({\n    username\n  }).pack())\n  if(!pdu){\n    return false\n  }\n  const {err} = UpdateUsernameRes.parseMsg(pdu)\n  return err === ERR.NO_ERROR\n  // return invokeRequest(new GramJs.account.UpdateUsername({ username }), true);\n}\n\nexport async function updateProfilePhoto(photo?: ApiPhoto, isFallback?: boolean) {\n  const photoId = photo ? buildInputPhoto(photo) : new GramJs.InputPhotoEmpty();\n  const result = await invokeRequest(new GramJs.photos.UpdateProfilePhoto({\n    id: photoId,\n    ...(isFallback ? { fallback: true } : undefined),\n  }));\n  if (!result) return undefined;\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n  if (result.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(result.photo);\n    return {\n      users: result.users.map(buildApiUser).filter(Boolean),\n      photo: buildApiPhoto(result.photo),\n    };\n  }\n  return undefined;\n}\n\nexport async function uploadProfilePhoto(file: File, isFallback?: boolean, isVideo = false, videoTs = 0,thumbnail?:string) {\n  const inputFile = await uploadFileV1({file,workers: UPLOAD_WORKERS});\n  const id = inputFile.id.toString();\n  if(Account.getCurrentAccount()?.getSession()){\n    return {\n      avatarHash: id,\n      photos: [\n        {\n          id: id,\n          thumbnail: {\n            dataUri: thumbnail,\n            width: 640,\n            height: 640,\n          },\n          sizes: [\n            {\n              width: 160,\n              height: 160,\n              type: 's',\n            },\n            {\n              width: 320,\n              height: 320,\n              type: 'm',\n            },\n            {\n              width: 640,\n              height: 640,\n              type: 'x',\n            },\n          ],\n        },\n      ],\n    }\n  }\n  let pdu = await Account.getCurrentAccount()?.sendPduWithCallback(new UploadProfilePhotoReq({\n    id:inputFile.id.toString(),\n    is_video:isVideo,\n    thumbnail:thumbnail!\n  }).pack())\n  if(!pdu){\n    return false\n  }\n  const {err,payload} = UploadProfilePhotoRes.parseMsg(pdu);\n\n  if(err != ERR.NO_ERROR){\n    return false\n  }\n  return JSON.parse(payload!);\n\n  // const params = {\n  //   ...(isVideo ? { video: inputFile, videoStartTs: videoTs } : { file: inputFile }),\n  //   ...(isFallback ? { fallback: true } : undefined),\n  // }\n  // const result = await invokeRequest(new GramJs.photos.UploadProfilePhoto(params));\n  //\n  // if (!result) return undefined;\n  //\n  // addEntitiesWithPhotosToLocalDb(result.users);\n  // if (result.photo instanceof GramJs.Photo) {\n  //   addPhotoToLocalDb(result.photo);\n  //   return {\n  //     users: result.users.map(buildApiUser).filter(Boolean),\n  //     photo: buildApiPhoto(result.photo),\n  //   };\n  // }\n  // return undefined;\n}\n\nexport async function uploadContactProfilePhoto({\n  file, isSuggest, user,thumbnail\n}: {\n  file?: File;\n  isSuggest?: boolean;\n  user: ApiUser;\n  thumbnail?:string\n}) {\n  const inputFile = file ? await uploadFileV1({file}) : undefined;\n  if(Account.getCurrentAccount()?.getSession()){\n    const id = inputFile?.id.toString()\n    return {\n      users: [\n        {\n          ...user,\n          avatarHash: id,\n          photos: [\n            {\n              id: id,\n              thumbnail: {\n                dataUri: thumbnail,\n                width: 640,\n                height: 640,\n              },\n              sizes: [\n                {\n                  width: 160,\n                  height: 160,\n                  type: 's',\n                },\n                {\n                  width: 320,\n                  height: 320,\n                  type: 'm',\n                },\n                {\n                  width: 640,\n                  height: 640,\n                  type: 'x',\n                },\n              ],\n            }\n            ]\n        }\n      ]\n    }\n  }\n\n\n  const result = await invokeRequest(new GramJs.photos.UploadContactProfilePhoto({\n    userId: buildInputEntity(user.id, user.accessHash) as GramJs.InputUser,\n    file: inputFile,\n    ...(isSuggest ? { suggest: true } : { save: true }),\n  }));\n\n  if (!result) return undefined;\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  const users = result.users.map(buildApiUser).filter(Boolean);\n\n  if (result.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(result.photo);\n    return {\n      users,\n      photo: buildApiPhoto(result.photo),\n    };\n  }\n\n  return {\n    users,\n    photo: undefined,\n  };\n}\n\nexport async function deleteProfilePhotos(photos: ApiPhoto[]) {\n  const photoIds = photos.map(buildInputPhoto).filter(Boolean);\n  const isDeleted = await invokeRequest(new GramJs.photos.DeletePhotos({ id: photoIds }), true);\n  if (isDeleted) {\n    photos.forEach((photo) => {\n      delete localDb.photos[photo.id];\n    });\n  }\n  return isDeleted;\n}\n\nexport async function fetchWallpapers() {\n  const result = await invokeRequest(new GramJs.account.GetWallPapers({ hash: BigInt('0') }));\n\n  if (!result || result instanceof GramJs.account.WallPapersNotModified) {\n    return undefined;\n  }\n\n  const filteredWallpapers = result.wallpapers.filter((wallpaper) => {\n    if (\n      !(wallpaper instanceof GramJs.WallPaper)\n      || !(wallpaper.document instanceof GramJs.Document)\n    ) {\n      return false;\n    }\n\n    return !wallpaper.pattern && wallpaper.document.mimeType !== 'application/x-tgwallpattern';\n  }) as GramJs.WallPaper[];\n\n  filteredWallpapers.forEach((wallpaper) => {\n    localDb.documents[String(wallpaper.document.id)] = wallpaper.document as GramJs.Document;\n  });\n\n  return {\n    wallpapers: filteredWallpapers.map(buildApiWallpaper).filter(Boolean),\n  };\n}\n\nexport async function uploadWallpaper(file: File) {\n  const inputFile = await uploadFile(file);\n\n  const result = await invokeRequest(new GramJs.account.UploadWallPaper({\n    file: inputFile,\n    mimeType: file.type,\n    settings: new GramJs.WallPaperSettings(),\n  }));\n\n  if (!result || !(result instanceof GramJs.WallPaper)) {\n    return undefined;\n  }\n\n  const wallpaper = buildApiWallpaper(result);\n  if (!wallpaper) {\n    return undefined;\n  }\n\n  localDb.documents[String(result.document.id)] = result.document as GramJs.Document;\n\n  return { wallpaper };\n}\n\nexport async function fetchBlockedContacts() {\n  const result = await invokeRequest(new GramJs.contacts.GetBlocked({\n    limit: BLOCKED_LIST_LIMIT,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    chats: result.chats.map((chat) => buildApiChatFromPreview(chat)).filter(Boolean),\n    blockedIds: result.blocked.map((blocked) => getApiChatIdFromMtpPeer(blocked.peerId)),\n    totalCount: result instanceof GramJs.contacts.BlockedSlice ? result.count : result.blocked.length,\n  };\n}\n\nexport function blockContact(chatOrUserId: string, accessHash?: string) {\n  return invokeRequest(new GramJs.contacts.Block({\n    id: buildInputPeer(chatOrUserId, accessHash),\n  }));\n}\n\nexport function unblockContact(chatOrUserId: string, accessHash?: string) {\n  return invokeRequest(new GramJs.contacts.Unblock({\n    id: buildInputPeer(chatOrUserId, accessHash),\n  }));\n}\n\nexport async function fetchAuthorizations() {\n  const result = await invokeRequest(new GramJs.account.GetAuthorizations());\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    authorizations: buildCollectionByKey(result.authorizations.map(buildApiSession), 'hash'),\n    ttlDays: result.authorizationTtlDays,\n  };\n}\n\nexport function terminateAuthorization(hash: string) {\n  return invokeRequest(new GramJs.account.ResetAuthorization({ hash: BigInt(hash) }));\n}\n\nexport function terminateAllAuthorizations() {\n  return invokeRequest(new GramJs.auth.ResetAuthorizations());\n}\n\nexport async function fetchWebAuthorizations() {\n  const result = await invokeRequest(new GramJs.account.GetWebAuthorizations());\n  if (!result) {\n    return undefined;\n  }\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    webAuthorizations: buildCollectionByKey(result.authorizations.map(buildApiWebSession), 'hash'),\n  };\n}\n\nexport function terminateWebAuthorization(hash: string) {\n  return invokeRequest(new GramJs.account.ResetWebAuthorization({ hash: BigInt(hash) }));\n}\n\nexport function terminateAllWebAuthorizations() {\n  return invokeRequest(new GramJs.account.ResetWebAuthorizations());\n}\n\nexport async function fetchNotificationExceptions() {\n  const result = await invokeRequest(new GramJs.account.GetNotifyExceptions({\n    compareSound: true,\n  }), undefined, undefined, true);\n\n  if (!(result instanceof GramJs.Updates || result instanceof GramJs.UpdatesCombined)) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return result.updates.reduce((acc, update) => {\n    if (!(update instanceof GramJs.UpdateNotifySettings && update.peer instanceof GramJs.NotifyPeer)) {\n      return acc;\n    }\n\n    acc.push(buildApiNotifyException(update.notifySettings, update.peer.peer));\n\n    return acc;\n  }, [] as ApiNotifyException[]);\n}\n\nexport async function fetchNotificationSettings() {\n  const [\n    isMutedContactSignUpNotification,\n    privateContactNotificationsSettings,\n    groupNotificationsSettings,\n    broadcastNotificationsSettings,\n  ] = await Promise.all([\n    invokeRequest(new GramJs.account.GetContactSignUpNotification()),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyUsers(),\n    })),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyChats(),\n    })),\n    invokeRequest(new GramJs.account.GetNotifySettings({\n      peer: new GramJs.InputNotifyBroadcasts(),\n    })),\n  ]);\n\n  if (!privateContactNotificationsSettings || !groupNotificationsSettings || !broadcastNotificationsSettings) {\n    return false;\n  }\n\n  const {\n    silent: privateSilent, muteUntil: privateMuteUntil, showPreviews: privateShowPreviews,\n  } = privateContactNotificationsSettings;\n  const {\n    silent: groupSilent, muteUntil: groupMuteUntil, showPreviews: groupShowPreviews,\n  } = groupNotificationsSettings;\n  const {\n    silent: broadcastSilent, muteUntil: broadcastMuteUntil, showPreviews: broadcastShowPreviews,\n  } = broadcastNotificationsSettings;\n\n  return {\n    hasContactJoinedNotifications: !isMutedContactSignUpNotification,\n    hasPrivateChatsNotifications: !(\n      privateSilent\n      || (typeof privateMuteUntil === 'number' && getServerTime() < privateMuteUntil)\n    ),\n    hasPrivateChatsMessagePreview: privateShowPreviews,\n    hasGroupNotifications: !(\n      groupSilent || (typeof groupMuteUntil === 'number'\n        && getServerTime() < groupMuteUntil)\n    ),\n    hasGroupMessagePreview: groupShowPreviews,\n    hasBroadcastNotifications: !(\n      broadcastSilent || (typeof broadcastMuteUntil === 'number'\n        && getServerTime() < broadcastMuteUntil)\n    ),\n    hasBroadcastMessagePreview: broadcastShowPreviews,\n  };\n}\n\nexport function updateContactSignUpNotification(isSilent: boolean) {\n  return invokeRequest(new GramJs.account.SetContactSignUpNotification({ silent: isSilent }));\n}\n\nexport function updateNotificationSettings(peerType: 'contact' | 'group' | 'broadcast', {\n  isSilent,\n  shouldShowPreviews,\n}: {\n  isSilent?: boolean;\n  shouldShowPreviews?: boolean;\n}) {\n  let peer: GramJs.TypeInputNotifyPeer;\n  if (peerType === 'contact') {\n    peer = new GramJs.InputNotifyUsers();\n  } else if (peerType === 'group') {\n    peer = new GramJs.InputNotifyChats();\n  } else {\n    peer = new GramJs.InputNotifyBroadcasts();\n  }\n\n  const settings = {\n    showPreviews: shouldShowPreviews,\n    silent: isSilent,\n    muteUntil: isSilent ? MAX_INT_32 : 0,\n  };\n\n  return invokeRequest(new GramJs.account.UpdateNotifySettings({\n    peer,\n    settings: new GramJs.InputPeerNotifySettings(settings),\n  }));\n}\n\nexport async function fetchLanguages(): Promise<ApiLanguage[] | undefined> {\n  const result = await invokeRequest(new GramJs.langpack.GetLanguages({\n    langPack: DEFAULT_LANG_PACK,\n  }));\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(omitVirtualClassFields);\n}\n\nexport async function fetchLangPack({ sourceLangPacks, langCode }: {\n  sourceLangPacks: typeof LANG_PACKS;\n  langCode: string;\n}) {\n  const results = await Promise.all(sourceLangPacks.map((langPack) => {\n    return invokeRequest(new GramJs.langpack.GetLangPack({\n      langPack,\n      langCode: BETA_LANG_CODES.includes(langCode) ? `${langCode}-raw` : langCode,\n    }));\n  }));\n\n  const collections = results\n    .filter(Boolean)\n    .map((result) => {\n      return buildCollectionByKey(result.strings.map<ApiLangString>(omitVirtualClassFields), 'key');\n    });\n\n  if (!collections.length) {\n    return undefined;\n  }\n\n  return { langPack: Object.assign({}, ...collections.reverse()) as typeof collections[0] };\n}\n\nexport async function fetchLangStrings({ langPack, langCode, keys }: {\n  langPack: string; langCode: string; keys: string[];\n}) {\n  const result = await invokeRequest(new GramJs.langpack.GetStrings({\n    langPack,\n    langCode: BETA_LANG_CODES.includes(langCode) ? `${langCode}-raw` : langCode,\n    keys,\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return result.map(omitVirtualClassFields);\n}\n\nexport async function fetchPrivacySettings(privacyKey: ApiPrivacyKey) {\n  const key = buildInputPrivacyKey(privacyKey);\n  const result = await invokeRequest(new GramJs.account.GetPrivacy({ key }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    rules: buildPrivacyRules(result.rules),\n  };\n}\n\nexport function registerDevice(token: string) {\n  const client = getClient();\n  const secret = client.session.getAuthKey().getKey();\n  return invokeRequest(new GramJs.account.RegisterDevice({\n    tokenType: 10,\n    secret,\n    appSandbox: false,\n    otherUids: [],\n    token,\n  }));\n}\n\nexport function unregisterDevice(token: string) {\n  return invokeRequest(new GramJs.account.UnregisterDevice({\n    tokenType: 10,\n    otherUids: [],\n    token,\n  }));\n}\n\nexport async function setPrivacySettings(\n  privacyKey: ApiPrivacyKey, rules: InputPrivacyRules,\n) {\n  const key = buildInputPrivacyKey(privacyKey);\n  const privacyRules: GramJs.TypeInputPrivacyRule[] = [];\n\n  if (rules.allowedUsers) {\n    privacyRules.push(new GramJs.InputPrivacyValueAllowUsers({\n      users: rules.allowedUsers.map(({ id, accessHash }) => buildInputEntity(id, accessHash) as GramJs.InputUser),\n    }));\n  }\n  if (rules.allowedChats) {\n    privacyRules.push(new GramJs.InputPrivacyValueAllowChatParticipants({\n      chats: rules.allowedChats.map(({ id }) => buildInputEntity(id) as BigInt.BigInteger),\n    }));\n  }\n  if (rules.blockedUsers) {\n    privacyRules.push(new GramJs.InputPrivacyValueDisallowUsers({\n      users: rules.blockedUsers.map(({ id, accessHash }) => buildInputEntity(id, accessHash) as GramJs.InputUser),\n    }));\n  }\n  if (rules.blockedChats) {\n    privacyRules.push(new GramJs.InputPrivacyValueDisallowChatParticipants({\n      chats: rules.blockedChats.map(({ id }) => buildInputEntity(id) as BigInt.BigInteger),\n    }));\n  }\n  switch (rules.visibility) {\n    case 'everybody':\n      privacyRules.push(new GramJs.InputPrivacyValueAllowAll());\n      break;\n\n    case 'contacts':\n      privacyRules.push(new GramJs.InputPrivacyValueAllowContacts());\n      break;\n\n    case 'nonContacts':\n      privacyRules.push(new GramJs.InputPrivacyValueDisallowContacts());\n      break;\n\n    case 'nobody':\n      privacyRules.push(new GramJs.InputPrivacyValueDisallowAll());\n      break;\n  }\n\n  const result = await invokeRequest(new GramJs.account.SetPrivacy({ key, rules: privacyRules }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  updateLocalDb(result);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    rules: buildPrivacyRules(result.rules),\n  };\n}\n\nexport async function updateIsOnline(isOnline: boolean) {\n  await invokeRequest(new GramJs.account.UpdateStatus({ offline: !isOnline }));\n}\n\nexport async function fetchContentSettings() {\n  const result = await invokeRequest(new GramJs.account.GetContentSettings());\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    isSensitiveEnabled: Boolean(result.sensitiveEnabled),\n    canChangeSensitive: Boolean(result.sensitiveCanChange),\n  };\n}\n\nexport function updateContentSettings(isEnabled: boolean) {\n  return invokeRequest(new GramJs.account.SetContentSettings({\n    sensitiveEnabled: isEnabled || undefined,\n  }));\n}\n\nexport async function fetchAppConfig(): Promise<ApiAppConfig | undefined> {\n  const result = await invokeRequest(new GramJs.help.GetAppConfig());\n  if (!result) return undefined;\n\n  return buildAppConfig(result);\n}\n\nexport async function fetchConfig(): Promise<ApiConfig | undefined> {\n  const result = await invokeRequest(new GramJs.help.GetConfig());\n  if (!result) return undefined;\n\n  return buildApiConfig(result);\n}\n\nfunction updateLocalDb(\n  result: (\n    GramJs.account.PrivacyRules | GramJs.contacts.Blocked | GramJs.contacts.BlockedSlice |\n    GramJs.Updates | GramJs.UpdatesCombined\n  ),\n) {\n  addEntitiesWithPhotosToLocalDb(result.users);\n  addEntitiesWithPhotosToLocalDb(result.chats);\n}\n\nexport async function fetchCountryList({ langCode = 'en' }: { langCode?: LangCode }) {\n  const countryList = await invokeRequest(new GramJs.help.GetCountriesList({\n    langCode,\n  }));\n\n  if (!(countryList instanceof GramJs.help.CountriesList)) {\n    return undefined;\n  }\n  return buildApiCountryList(countryList.countries);\n}\n\nexport async function fetchGlobalPrivacySettings() {\n  const result = await invokeRequest(new GramJs.account.GetGlobalPrivacySettings());\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    shouldArchiveAndMuteNewNonContact: Boolean(result.archiveAndMuteNewNoncontactPeers),\n  };\n}\n\nexport async function updateGlobalPrivacySettings({ shouldArchiveAndMuteNewNonContact } : {\n  shouldArchiveAndMuteNewNonContact: boolean;\n}) {\n  const result = await invokeRequest(new GramJs.account.SetGlobalPrivacySettings({\n    settings: new GramJs.GlobalPrivacySettings({\n      archiveAndMuteNewNoncontactPeers: shouldArchiveAndMuteNewNonContact,\n    }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    shouldArchiveAndMuteNewNonContact: Boolean(result.archiveAndMuteNewNoncontactPeers),\n  };\n}\n\nexport function toggleUsername({\n  chatId, accessHash, username, isActive,\n}: {\n  username: string;\n  isActive: boolean;\n  chatId?: string;\n  accessHash?: string;\n}) {\n  if (chatId) {\n    return invokeRequest(new GramJs.channels.ToggleUsername({\n      channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n      username,\n      active: isActive,\n    }));\n  }\n\n  return invokeRequest(new GramJs.account.ToggleUsername({\n    username,\n    active: isActive,\n  }));\n}\n\nexport function reorderUsernames({ chatId, accessHash, usernames }: {\n  usernames: string[];\n  chatId?: string;\n  accessHash?: string;\n}) {\n  if (chatId) {\n    return invokeRequest(new GramJs.channels.ReorderUsernames({\n      channel: buildInputEntity(chatId, accessHash) as GramJs.InputChannel,\n      order: usernames,\n    }));\n  }\n\n  return invokeRequest(new GramJs.account.ReorderUsernames({\n    order: usernames,\n  }));\n}\n","import type { ApiChat, ApiReaction } from '../../types';\nimport { invokeRequest } from './client';\nimport { Api as GramJs } from '../../../lib/gramjs';\nimport { buildInputPeer, buildInputReaction } from '../gramjsBuilders';\nimport localDb from '../localDb';\nimport { buildApiAvailableReaction, buildMessagePeerReaction } from '../apiBuilders/messages';\nimport { REACTION_LIST_LIMIT } from '../../../config';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { buildApiUser } from '../apiBuilders/users';\n\nexport function sendWatchingEmojiInteraction({\n  chat,\n  emoticon,\n}: {\n  chat: ApiChat; emoticon: string;\n}) {\n  return invokeRequest(new GramJs.messages.SetTyping({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    action: new GramJs.SendMessageEmojiInteractionSeen({\n      emoticon,\n    }),\n  }));\n}\n\nexport function sendEmojiInteraction({\n  chat,\n  emoticon,\n  messageId,\n  timestamps,\n}: {\n  chat: ApiChat; messageId: number; emoticon: string; timestamps: number[];\n}) {\n  return invokeRequest(new GramJs.messages.SetTyping({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    action: new GramJs.SendMessageEmojiInteraction({\n      emoticon,\n      msgId: messageId,\n      interaction: new GramJs.DataJSON({\n        data: JSON.stringify({\n          v: 1,\n          a: timestamps.map((t: number) => ({\n            t,\n            i: 1,\n          })),\n        }),\n      }),\n    }),\n  }));\n}\n\nexport async function getAvailableReactions() {\n  const result = await invokeRequest(new GramJs.messages.GetAvailableReactions({}));\n\n  if (!result || result instanceof GramJs.messages.AvailableReactionsNotModified) {\n    return undefined;\n  }\n\n  result.reactions.forEach((reaction) => {\n    if (reaction.staticIcon instanceof GramJs.Document) {\n      localDb.documents[String(reaction.staticIcon.id)] = reaction.staticIcon;\n    }\n    if (reaction.selectAnimation instanceof GramJs.Document) {\n      localDb.documents[String(reaction.selectAnimation.id)] = reaction.selectAnimation;\n    }\n    if (reaction.aroundAnimation instanceof GramJs.Document) {\n      localDb.documents[String(reaction.aroundAnimation.id)] = reaction.aroundAnimation;\n    }\n    if (reaction.centerIcon instanceof GramJs.Document) {\n      localDb.documents[String(reaction.centerIcon.id)] = reaction.centerIcon;\n    }\n  });\n\n  return result.reactions.map(buildApiAvailableReaction);\n}\n\nexport function sendReaction({\n  chat, messageId, reactions,\n}: {\n  chat: ApiChat; messageId: number; reactions?: ApiReaction[];\n}) {\n  return invokeRequest(new GramJs.messages.SendReaction({\n    reaction: reactions?.map((r) => buildInputReaction(r)),\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    msgId: messageId,\n  }), true);\n}\n\nexport function fetchMessageReactions({\n  ids, chat,\n}: {\n  ids: number[]; chat: ApiChat;\n}) {\n  return invokeRequest(new GramJs.messages.GetMessagesReactions({\n    id: ids,\n    peer: buildInputPeer(chat.id, chat.accessHash),\n  }), true);\n}\n\nexport async function fetchMessageReactionsList({\n  chat, messageId, reaction, offset,\n}: {\n  chat: ApiChat; messageId: number; reaction?: ApiReaction; offset?: string;\n}) {\n  const result = await invokeRequest(new GramJs.messages.GetMessageReactionsList({\n    peer: buildInputPeer(chat.id, chat.accessHash),\n    id: messageId,\n    ...(reaction && { reaction: buildInputReaction(reaction) }),\n    limit: REACTION_LIST_LIMIT,\n    ...(offset && { offset }),\n  }));\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  const { nextOffset, reactions, count } = result;\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    nextOffset,\n    reactions: reactions.map(buildMessagePeerReaction).filter(Boolean),\n    count,\n  };\n}\n\nexport function setDefaultReaction({\n  reaction,\n}: {\n  reaction: ApiReaction;\n}) {\n  return invokeRequest(new GramJs.messages.SetDefaultReaction({\n    reaction: buildInputReaction(reaction),\n  }));\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\nimport type {\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  ApiMessageStatistics,\n  ApiMessagePublicForward,\n  StatisticsGraph,\n  StatisticsOverviewItem,\n  StatisticsOverviewPercentage,\n  StatisticsOverviewPeriod,\n} from '../../types';\nimport { buildAvatarHash } from './chats';\nimport { buildApiPeerId } from './peers';\n\nexport function buildChannelStatistics(stats: GramJs.stats.BroadcastStats): ApiChannelStatistics {\n  return {\n    // Graphs\n    growthGraph: buildGraph(stats.growthGraph),\n    followersGraph: buildGraph(stats.followersGraph),\n    muteGraph: buildGraph(stats.muteGraph),\n    topHoursGraph: buildGraph(stats.topHoursGraph),\n\n    // Async graphs\n    languagesGraph: (stats.languagesGraph as GramJs.StatsGraphAsync).token,\n    viewsBySourceGraph: (stats.viewsBySourceGraph as GramJs.StatsGraphAsync).token,\n    newFollowersBySourceGraph: (stats.newFollowersBySourceGraph as GramJs.StatsGraphAsync).token,\n    interactionsGraph: (stats.interactionsGraph as GramJs.StatsGraphAsync).token,\n\n    // Statistics overview\n    followers: buildStatisticsOverview(stats.followers),\n    viewsPerPost: buildStatisticsOverview(stats.viewsPerPost),\n    sharesPerPost: buildStatisticsOverview(stats.sharesPerPost),\n    enabledNotifications: buildStatisticsPercentage(stats.enabledNotifications),\n\n    // Recent posts\n    recentTopMessages: stats.recentMessageInteractions,\n  };\n}\n\nexport function buildGroupStatistics(stats: GramJs.stats.MegagroupStats): ApiGroupStatistics {\n  return {\n    // Graphs\n    growthGraph: buildGraph(stats.growthGraph),\n    membersGraph: buildGraph(stats.membersGraph),\n    topHoursGraph: buildGraph(stats.topHoursGraph),\n\n    // Async graphs\n    languagesGraph: (stats.languagesGraph as GramJs.StatsGraphAsync).token,\n    messagesGraph: (stats.messagesGraph as GramJs.StatsGraphAsync).token,\n    actionsGraph: (stats.actionsGraph as GramJs.StatsGraphAsync).token,\n\n    // Statistics overview\n    period: getOverviewPeriod(stats.period),\n    members: buildStatisticsOverview(stats.members),\n    viewers: buildStatisticsOverview(stats.viewers),\n    messages: buildStatisticsOverview(stats.messages),\n    posters: buildStatisticsOverview(stats.posters),\n  };\n}\n\nexport function buildMessageStatistics(stats: GramJs.stats.MessageStats): ApiMessageStatistics {\n  return {\n    viewsGraph: buildGraph(stats.viewsGraph),\n  };\n}\n\nexport function buildMessagePublicForwards(\n  result: GramJs.messages.TypeMessages,\n): ApiMessagePublicForward[] | undefined {\n  if (!result || !('messages' in result)) {\n    return undefined;\n  }\n\n  return result.messages.map((message) => {\n    const peerId = buildApiPeerId((message.peerId as GramJs.PeerChannel).channelId, 'channel');\n    const channel = result.chats.find((p) => buildApiPeerId(p.id, 'channel') === peerId);\n\n    return {\n      messageId: message.id,\n      views: (message as GramJs.Message).views,\n      title: (channel as GramJs.Channel).title,\n      chat: {\n        id: peerId,\n        type: 'chatTypeChannel',\n        title: (channel as GramJs.Channel).title,\n        username: (channel as GramJs.Channel).username,\n        avatarHash: buildAvatarHash((channel as GramJs.Channel).photo),\n      },\n    };\n  });\n}\n\nexport function buildGraph(\n  result: GramJs.TypeStatsGraph, isPercentage?: boolean,\n): StatisticsGraph | undefined {\n  if ((result as GramJs.StatsGraphError).error) {\n    return undefined;\n  }\n\n  const data = JSON.parse((result as GramJs.StatsGraph).json.data);\n  const [x, ...y] = data.columns;\n  const hasSecondYAxis = data.y_scaled;\n\n  return {\n    type: isPercentage ? 'area' : data.types.y0,\n    zoomToken: (result as GramJs.StatsGraph).zoomToken,\n    labelFormatter: data.xTickFormatter,\n    tooltipFormatter: data.xTooltipFormatter,\n    labels: x.slice(1),\n    hideCaption: !data.subchart.show,\n    hasSecondYAxis,\n    isStacked: data.stacked && !hasSecondYAxis,\n    isPercentage,\n    datasets: y.map((item: any) => {\n      const key = item[0];\n\n      return {\n        name: data.names[key],\n        color: extractColor(data.colors[key]),\n        values: item.slice(1),\n      };\n    }),\n    ...calculateMinimapRange(data.subchart.defaultZoom, x.slice(1)),\n  };\n}\n\nfunction extractColor(color: string): string {\n  return color.substring(color.indexOf('#'));\n}\n\nfunction calculateMinimapRange(range: Array<number>, values: Array<number>) {\n  const [min, max] = range;\n\n  let minIndex = 0;\n  let maxIndex = values.length - 1;\n\n  values.forEach((item, index) => {\n    if (!minIndex && item >= min) {\n      minIndex = index;\n    }\n\n    if (!maxIndex && item >= max) {\n      maxIndex = index;\n    }\n  });\n\n  const begin = Math.max(0, minIndex / (values.length - 1));\n  const end = Math.min(1, maxIndex / (values.length - 1));\n\n  return { minimapRange: { begin, end }, labelFromIndex: minIndex, labelToIndex: maxIndex };\n}\n\nfunction buildStatisticsOverview({ current, previous }: GramJs.StatsAbsValueAndPrev): StatisticsOverviewItem {\n  const change = current - previous;\n\n  return {\n    current,\n    change,\n    ...(previous && { percentage: (change ? ((Math.abs(change) / previous) * 100) : 0).toFixed(2) }),\n  };\n}\n\nfunction buildStatisticsPercentage(data: GramJs.StatsPercentValue): StatisticsOverviewPercentage {\n  return {\n    percentage: ((data.part / data.total) * 100).toFixed(2),\n  };\n}\n\nfunction getOverviewPeriod(data: GramJs.StatsDateRangeDays): StatisticsOverviewPeriod {\n  return {\n    maxDate: data.maxDate,\n    minDate: data.minDate,\n  };\n}\n","import BigInt from 'big-integer';\nimport { Api as GramJs } from '../../../lib/gramjs';\n\nimport type {\n  ApiChat, ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph,\n} from '../../types';\n\nimport { invokeRequest } from './client';\nimport { addEntitiesWithPhotosToLocalDb } from '../helpers';\nimport { buildInputEntity } from '../gramjsBuilders';\nimport {\n  buildChannelStatistics, buildGroupStatistics, buildMessageStatistics, buildMessagePublicForwards, buildGraph,\n} from '../apiBuilders/statistics';\nimport { buildApiUser } from '../apiBuilders/users';\n\nexport async function fetchChannelStatistics({\n  chat,\n}: { chat: ApiChat }) {\n  const result = await invokeRequest(new GramJs.stats.GetBroadcastStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }), undefined, undefined, undefined, chat.fullInfo!.statisticsDcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    stats: buildChannelStatistics(result),\n    users: [],\n  };\n}\n\nexport async function fetchGroupStatistics({\n  chat,\n}: { chat: ApiChat }) {\n  const result = await invokeRequest(new GramJs.stats.GetMegagroupStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n  }), undefined, undefined, undefined, chat.fullInfo!.statisticsDcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  addEntitiesWithPhotosToLocalDb(result.users);\n\n  return {\n    users: result.users.map(buildApiUser).filter(Boolean),\n    stats: buildGroupStatistics(result),\n  };\n}\n\nexport async function fetchMessageStatistics({\n  chat,\n  messageId,\n}: {\n  chat: ApiChat;\n  messageId: number;\n}): Promise<ApiMessageStatistics | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetMessageStats({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    msgId: messageId,\n  }), undefined, undefined, undefined, chat.fullInfo!.statisticsDcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildMessageStatistics(result);\n}\n\nexport async function fetchMessagePublicForwards({\n  chat,\n  messageId,\n  dcId,\n}: {\n  chat: ApiChat;\n  messageId: number;\n  dcId?: number;\n}): Promise<ApiMessagePublicForward[] | undefined> {\n  const result = await invokeRequest(new GramJs.stats.GetMessagePublicForwards({\n    channel: buildInputEntity(chat.id, chat.accessHash) as GramJs.InputChannel,\n    msgId: messageId,\n    offsetPeer: new GramJs.InputPeerEmpty(),\n  }), undefined, undefined, undefined, dcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  if ('chats' in result) {\n    addEntitiesWithPhotosToLocalDb(result.chats);\n  }\n\n  return buildMessagePublicForwards(result);\n}\n\nexport async function fetchStatisticsAsyncGraph({\n  token,\n  x,\n  isPercentage,\n  dcId,\n}: {\n  token: string;\n  x?: number;\n  isPercentage?: boolean;\n  dcId?: number;\n}): Promise<StatisticsGraph | undefined> {\n  const result = await invokeRequest(new GramJs.stats.LoadAsyncGraph({\n    token,\n    ...(x && { x: BigInt(x) }),\n  }), undefined, undefined, undefined, dcId);\n\n  if (!result) {\n    return undefined;\n  }\n\n  return buildGraph(result as GramJs.StatsGraph, isPercentage);\n}\n","import BigInt from 'big-integer';\nimport type bigInt from 'big-integer';\nimport MTProtoState from '../../../lib/gramjs/network/MTProtoState';\nimport Logger from '../../../lib/gramjs/extensions/Logger';\nimport Helpers from '../../../lib/gramjs/Helpers';\nimport AuthKey from '../../../lib/gramjs/crypto/AuthKey';\n\ntype DhConfig = {\n  p: number[];\n  g: number;\n  random: number[];\n};\n\nlet currentPhoneCallState: PhoneCallState | undefined;\n\nclass PhoneCallState {\n  private state?: MTProtoState;\n\n  private seq = 0;\n\n  private gA?: bigInt.BigInteger;\n\n  private gB: any;\n\n  private p?: bigInt.BigInteger;\n\n  private random?: bigInt.BigInteger;\n\n  private waitForState: Promise<void>;\n\n  private resolveState?: VoidFunction;\n\n  constructor(\n    private isOutgoing: boolean,\n  ) {\n    this.waitForState = new Promise<void>((resolve) => {\n      this.resolveState = resolve;\n    });\n  }\n\n  async requestCall({ p, g, random }: DhConfig) {\n    const pBN = Helpers.readBigIntFromBuffer(Buffer.from(p), false);\n    const randomBN = Helpers.readBigIntFromBuffer(Buffer.from(random), false);\n\n    const gA = Helpers.modExp(BigInt(g), randomBN, pBN);\n\n    this.gA = gA;\n    this.p = pBN;\n    this.random = randomBN;\n\n    const gAHash: Buffer = await Helpers.sha256(Helpers.getByteArray(gA));\n    return Array.from(gAHash);\n  }\n\n  acceptCall({ p, g, random }: DhConfig) {\n    const pLast = Helpers.readBigIntFromBuffer(p, false);\n    const randomLast = Helpers.readBigIntFromBuffer(random, false);\n\n    const gB = Helpers.modExp(BigInt(g), randomLast, pLast);\n    this.gB = gB;\n    this.p = pLast;\n    this.random = randomLast;\n\n    return Array.from(Helpers.getByteArray(gB));\n  }\n\n  async confirmCall(gAOrB: number[], emojiData: Uint16Array, emojiOffsets: number[]) {\n    if (this.isOutgoing) {\n      this.gB = Helpers.readBigIntFromBuffer(Buffer.from(gAOrB), false);\n    } else {\n      this.gA = Helpers.readBigIntFromBuffer(Buffer.from(gAOrB), false);\n    }\n    const authKey = Helpers.modExp(\n      !this.isOutgoing ? this.gA : this.gB,\n      this.random,\n      this.p,\n    );\n    const fingerprint: Buffer = await Helpers.sha1(Helpers.getByteArray(authKey));\n    const keyFingerprint = Helpers.readBigIntFromBuffer(fingerprint.slice(-8).reverse(), false);\n\n    const emojis = await generateEmojiFingerprint(\n      Helpers.getByteArray(authKey),\n      Helpers.getByteArray(this.gA),\n      emojiData,\n      emojiOffsets,\n    );\n\n    const key = new AuthKey();\n    await key.setKey(Helpers.getByteArray(authKey));\n    this.state = new MTProtoState(key, new Logger(), true, this.isOutgoing);\n    this.resolveState!();\n\n    return { gA: Array.from(Helpers.getByteArray(this.gA)), keyFingerprint: keyFingerprint.toString(), emojis };\n  }\n\n  async encode(data: string) {\n    if (!this.state) return undefined;\n\n    const seqArray = new Uint32Array(1);\n    seqArray[0] = this.seq++;\n    const encodedData = await this.state.encryptMessageData(\n      Buffer.concat([Helpers.convertToLittle(seqArray), Buffer.from(data)]),\n    );\n    return Array.from(encodedData);\n  }\n\n  async decode(data: number[]): Promise<any> {\n    if (!this.state) {\n      return this.waitForState.then(() => {\n        return this.decode(data);\n      });\n    }\n\n    const message = await this.state.decryptMessageData(Buffer.from(data));\n\n    return JSON.parse(message.toString());\n  }\n}\n\n// https://github.com/TelegramV/App/blob/ead52320975362139cabad18cf8346f98c349a22/src/js/MTProto/Calls/Internal.js#L72\nfunction computeEmojiIndex(bytes: Uint8Array) {\n  return ((BigInt(bytes[0]).and(0x7F)).shiftLeft(56))\n    .or((BigInt(bytes[1]).shiftLeft(48)))\n    .or((BigInt(bytes[2]).shiftLeft(40)))\n    .or((BigInt(bytes[3]).shiftLeft(32)))\n    .or((BigInt(bytes[4]).shiftLeft(24)))\n    .or((BigInt(bytes[5]).shiftLeft(16)))\n    .or((BigInt(bytes[6]).shiftLeft(8)))\n    .or((BigInt(bytes[7])));\n}\n\nexport async function generateEmojiFingerprint(\n  authKey: Uint8Array, gA: Uint8Array, emojiData: Uint16Array, emojiOffsets: number[],\n) {\n  const hash = await Helpers.sha256(Buffer.concat([new Uint8Array(authKey), new Uint8Array(gA)]));\n  const result = [];\n  const emojiCount = emojiOffsets.length - 1;\n  const kPartSize = 8;\n  for (let partOffset = 0; partOffset !== hash.byteLength; partOffset += kPartSize) {\n    const value = computeEmojiIndex(hash.subarray(partOffset, partOffset + kPartSize));\n    const index = value.modPow(1, emojiCount).toJSNumber();\n    const offset = emojiOffsets[index];\n    const size = emojiOffsets[index + 1] - offset;\n    result.push(String.fromCharCode(...emojiData.subarray(offset, offset + size)));\n  }\n  return result.join('');\n}\n\nexport function createPhoneCallState(params: ConstructorParameters<typeof PhoneCallState>) {\n  currentPhoneCallState = new PhoneCallState(...params);\n}\n\nexport function destroyPhoneCallState() {\n  currentPhoneCallState = undefined;\n}\n\ntype FunctionPropertyOf<T> = {\n  [P in keyof T]: T[P] extends Function\n    ? P\n    : never\n}[keyof T];\n\ntype ParamsOf<T extends FunctionPropertyOf<PhoneCallState>> = Parameters<PhoneCallState[T]>;\ntype ReturnTypeOf<T extends FunctionPropertyOf<PhoneCallState>> = ReturnType<PhoneCallState[T]>;\n\nexport function encodePhoneCallData(params: ParamsOf<'encode'>): ReturnTypeOf<'encode'> {\n  return currentPhoneCallState!.encode(...params);\n}\n\nexport function decodePhoneCallData(params: ParamsOf<'decode'>): ReturnTypeOf<'decode'> {\n  return currentPhoneCallState!.decode(...params);\n}\n\nexport function confirmPhoneCall(params: ParamsOf<'confirmCall'>): ReturnTypeOf<'confirmCall'> {\n  return currentPhoneCallState!.confirmCall(...params);\n}\n\nexport function acceptPhoneCall(params: ParamsOf<'acceptCall'>): ReturnTypeOf<'acceptCall'> {\n  return currentPhoneCallState!.acceptCall(...params);\n}\n\nexport function requestPhoneCall(params: ParamsOf<'requestCall'>): ReturnTypeOf<'requestCall'> {\n  return currentPhoneCallState!.requestCall(...params);\n}\n","import type {\n  OnApiUpdate,\n  ApiInitialArgs,\n  ApiUpdate,\n  ApiOnProgress,\n} from '../types';\nimport type { Methods, MethodArgs, MethodResponse } from './methods/types';\nimport type { LocalDb } from './localDb';\n\nimport { API_THROTTLE_RESET_UPDATES, API_UPDATE_THROTTLE } from '../../config';\nimport { throttle, throttleWithTickEnd } from '../../util/schedulers';\nimport { updateFullLocalDb } from './localDb';\nimport { init as initUpdater } from './updater';\nimport { init as initAuth } from './methods/auth';\nimport { init as initChats } from './methods/chats';\nimport { init as initMessages } from './methods/messages';\nimport { init as initUsers } from './methods/users';\nimport { init as initClient } from './methods/client';\nimport { init as initStickers } from './methods/symbols';\nimport { init as initManagement } from './methods/management';\nimport { init as initTwoFaSettings } from './methods/twoFaSettings';\nimport { init as initBots } from './methods/bots';\nimport { init as initCalls } from './methods/calls';\nimport { init as initPayments } from './methods/payments';\nimport * as methods from './methods';\n\nlet onUpdate: OnApiUpdate;\n\nexport async function initApi(_onUpdate: OnApiUpdate, initialArgs: ApiInitialArgs, initialLocalDb?: LocalDb) {\n  onUpdate = _onUpdate;\n\n  initUpdater(handleUpdate);\n  initAuth(handleUpdate);\n  initChats(handleUpdate);\n  initMessages(handleUpdate);\n  initUsers(handleUpdate);\n  initStickers(handleUpdate);\n  initManagement(handleUpdate);\n  initTwoFaSettings(handleUpdate);\n  initBots(handleUpdate);\n  initCalls(handleUpdate);\n  initPayments(handleUpdate);\n\n  if (initialLocalDb) updateFullLocalDb(initialLocalDb);\n\n  await initClient(handleUpdate, initialArgs);\n}\n\nexport function callApi<T extends keyof Methods>(fnName: T, ...args: MethodArgs<T>): MethodResponse<T> {\n  // @ts-ignore\n  return methods[fnName](...args) as MethodResponse<T>;\n}\n\nexport function cancelApiProgress(progressCallback: ApiOnProgress) {\n  progressCallback.isCanceled = true;\n}\n\nconst flushUpdatesOnTickEnd = throttleWithTickEnd(flushUpdates);\n\nlet flushUpdatesThrottled: typeof flushUpdatesOnTickEnd | undefined;\nlet currentThrottleId: number | undefined;\n\nlet pendingUpdates: ApiUpdate[] | undefined;\n\nfunction handleUpdate(update: ApiUpdate) {\n  if (!pendingUpdates) {\n    pendingUpdates = [update];\n  } else {\n    pendingUpdates.push(update);\n  }\n\n  if (!flushUpdatesThrottled || API_THROTTLE_RESET_UPDATES.has(update['@type'])) {\n    flushUpdatesThrottled = throttle(flushUpdatesOnTickEnd, API_UPDATE_THROTTLE, true);\n    currentThrottleId = Math.random();\n  }\n\n  flushUpdatesThrottled(currentThrottleId!);\n}\n\nfunction flushUpdates(throttleId: number) {\n  if (!pendingUpdates || throttleId !== currentThrottleId) {\n    return;\n  }\n\n  const currentUpdates = pendingUpdates!;\n  pendingUpdates = undefined;\n  currentUpdates.forEach(onUpdate);\n}\n","import type { ApiOnProgress, ApiUpdate } from '../../types';\nimport type { OriginMessageEvent, WorkerMessageData } from './types';\n\nimport { DEBUG } from '../../../config';\nimport { initApi, callApi, cancelApiProgress } from '../provider';\nimport { log } from '../helpers';\nimport {BYPASS_API} from \"../../../worker/setting\";\n\ndeclare const self: WorkerGlobalScope;\n\nhandleErrors();\n\nconst callbackState = new Map<string, ApiOnProgress>();\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD WORKER');\n}\n\nonmessage = async (message: OriginMessageEvent) => {\n  const { data } = message;\n\n  switch (data.type) {\n    case 'initApi': {\n      await initApi(onUpdate, data.args[0], data.args[1]);\n      break;\n    }\n    case 'callMethod': {\n      const {\n        messageId, name, args, withCallback,\n      } = data;\n      try {\n        if (messageId && withCallback) {\n          const callback = (...callbackArgs: any[]) => {\n            const lastArg = callbackArgs[callbackArgs.length - 1];\n\n            sendToOrigin({\n              type: 'methodCallback',\n              messageId,\n              callbackArgs,\n            }, lastArg instanceof ArrayBuffer ? lastArg : undefined);\n          };\n\n          callbackState.set(messageId, callback);\n\n          args.push(callback as never);\n        }\n        if(!BYPASS_API.includes(name)){\n          if(DEBUG){\n            console.log(`xxx callApi('${name}'`)\n          }\n          return;\n        }\n        const response = await callApi(name, ...args);\n\n        if (DEBUG && typeof response === 'object' && 'CONSTRUCTOR_ID' in response) {\n          log('UNEXPECTED RESPONSE', `${name}: ${response.className}`);\n        }\n\n        const { arrayBuffer } = (typeof response === 'object' && 'arrayBuffer' in response && response) || {};\n\n        if (messageId) {\n          sendToOrigin({\n            type: 'methodResponse',\n            messageId,\n            response,\n          }, arrayBuffer);\n        }\n      } catch (error: any) {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(error);\n        }\n\n        if (messageId) {\n          sendToOrigin({\n            type: 'methodResponse',\n            messageId,\n            error: { message: error.message },\n          });\n        }\n      }\n\n      if (messageId) {\n        callbackState.delete(messageId);\n      }\n\n      break;\n    }\n    case 'cancelProgress': {\n      const callback = callbackState.get(data.messageId);\n      if (callback) {\n        cancelApiProgress(callback);\n      }\n\n      break;\n    }\n    case 'ping': {\n      sendToOrigin({\n        type: 'methodResponse',\n        messageId: data.messageId!,\n      });\n\n      break;\n    }\n  }\n};\n\nfunction handleErrors() {\n  self.onerror = (e) => {\n    // eslint-disable-next-line no-console\n    console.error(e);\n    sendToOrigin({ type: 'unhandledError', error: { message: e.error.message || 'Uncaught exception in worker' } });\n  };\n\n  self.addEventListener('unhandledrejection', (e) => {\n    // eslint-disable-next-line no-console\n    console.error(e);\n    sendToOrigin({ type: 'unhandledError', error: { message: e.reason.message || 'Uncaught rejection in worker' } });\n  });\n}\n\nfunction onUpdate(update: ApiUpdate) {\n  sendToOrigin({\n    type: 'update',\n    update,\n  });\n\n  if (DEBUG && update['@type'] !== 'updateUserStatus' && update['@type'] !== 'updateServerTimeOffset') {\n    log('UPDATE', update['@type'], update);\n  }\n}\n\nfunction sendToOrigin(data: WorkerMessageData, arrayBuffer?: ArrayBuffer) {\n  if (arrayBuffer) {\n    postMessage(data, [arrayBuffer]);\n  } else {\n    postMessage(data);\n  }\n}\n","import type { ApiLimitType } from './global/types';\nlet adr\ntry{\n  adr = localStorage.getItem(\"adr\")\n  if(!adr){\n    adr = \"0\"\n  }\n}catch (e){\n  adr = \"0\"\n}\nexport const GLOBAL_STATE_CACHE_KEY = 'tt-global-state-'+adr;\n\nexport const CLOUD_MESSAGE_ENABLE = false\nexport const CLOUD_MESSAGE_API = process.env.CLOUD_MESSAGE_API;\nexport const CHATGPT_PROXY_API = process.env.CHATGPT_PROXY_API;\nexport const MSG_SERVER = process.env.MSG_SERVER;\n\nexport const TEST_USERNAME = process.env.TEST_USERNAME;\nexport const TEST_PWD = process.env.TEST_PWD;\nexport const CLOUD_WS_URL = \"\";\n\nexport const SESSION_TOKEN = 'user_token';\n\nexport const APP_NAME = process.env.APP_NAME || 'Wai';\nexport const APP_VERSION = process.env.APP_VERSION!;\nexport const RELEASE_DATETIME = process.env.RELEASE_DATETIME;\nexport const PRODUCTION_HOSTNAME = 'web.telegram.org';\n\nexport const DEBUG = process.env.APP_ENV !== 'production';\nexport const DEBUG_MORE = false;\n\nexport const IS_MOCKED_CLIENT = process.env.APP_MOCKED_CLIENT === '1';\nexport const IS_TEST = process.env.APP_ENV === 'test';\nexport const IS_PERF = process.env.APP_ENV === 'perf';\nexport const IS_BETA = process.env.APP_ENV === 'staging';\n\nexport const BETA_CHANGELOG_URL = 'https://github.com/ptp-build/wai-chat/issues';\n\nexport const DEBUG_ALERT_MSG = 'Shoot!\\nSomething went wrong, please see the error details in Dev Tools Console.';\nexport const DEBUG_GRAMJS = false;\n\nexport const PAGE_TITLE = process.env.APP_TITLE!;\nexport const INACTIVE_MARKER = '[Inactive]';\n\nexport const DEBUG_PAYMENT_SMART_GLOCAL = false;\n\n\nexport const SESSION_USER_KEY = 'user_auth';\nexport const LEGACY_SESSION_KEY = 'GramJs:sessionId';\nexport const PASSCODE_CACHE_NAME = 'tt-passcode';\n\nexport const GLOBAL_STATE_CACHE_DISABLED = false;\n\nexport const GLOBAL_STATE_CACHE_USER_LIST_LIMIT = 500;\nexport const GLOBAL_STATE_CACHE_CHAT_LIST_LIMIT = 200;\nexport const GLOBAL_STATE_CACHE_CHATS_WITH_MESSAGES_LIMIT = 30;\nexport const GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT = 150;\n\nexport const MEDIA_CACHE_DISABLED = false;\nexport const MEDIA_CACHE_NAME_WAI = 'wai-media';\nexport const MEDIA_CACHE_NAME = 'tt-media';\nexport const MEDIA_CACHE_NAME_AVATARS = 'tt-media-avatars';\nexport const MEDIA_PROGRESSIVE_CACHE_DISABLED = false;\nexport const MEDIA_PROGRESSIVE_CACHE_NAME = 'tt-media-progressive';\nexport const CUSTOM_EMOJI_PREVIEW_CACHE_DISABLED = false;\nexport const CUSTOM_EMOJI_PREVIEW_CACHE_NAME = 'tt-custom-emoji-preview';\nexport const MEDIA_CACHE_MAX_BYTES = 512 * 1024; // 512 KB\nexport const CUSTOM_BG_CACHE_NAME = 'tt-custom-bg';\nexport const LANG_CACHE_NAME = 'tt-lang-packs';\nexport const ASSET_CACHE_NAME = 'tt-assets';\nexport const AUTODOWNLOAD_FILESIZE_MB_LIMITS = [1, 5, 10, 50, 100, 500];\nexport const DATA_BROADCAST_CHANNEL_NAME = 'tt-global';\nexport const ESTABLISH_BROADCAST_CHANNEL_NAME = 'tt-establish';\nexport const MULTITAB_LOCALSTORAGE_KEY = 'tt-multitab';\n\nexport const DOWNLOAD_WORKERS = 16;\nexport const UPLOAD_WORKERS = 16;\n\nconst isBigScreen = typeof window !== 'undefined' && window.innerHeight >= 900;\n\nexport const MIN_PASSWORD_LENGTH = 1;\n\nexport const MESSAGE_LIST_SLICE = isBigScreen ? 60 : 40;\nexport const MESSAGE_LIST_VIEWPORT_LIMIT = MESSAGE_LIST_SLICE * 2;\n\nexport const ARCHIVE_MINIMIZED_HEIGHT = 36;\nexport const CHAT_HEIGHT_PX = 72;\nexport const TOPIC_HEIGHT_PX = 65;\nexport const CHAT_LIST_SLICE = isBigScreen ? 30 : 25;\nexport const CHAT_LIST_LOAD_SLICE = 100;\nexport const SHARED_MEDIA_SLICE = 42;\nexport const MESSAGE_SEARCH_SLICE = 42;\nexport const GLOBAL_SEARCH_SLICE = 20;\nexport const GLOBAL_TOPIC_SEARCH_SLICE = 5;\nexport const MEMBERS_SLICE = 30;\nexport const MEMBERS_LOAD_SLICE = 200;\nexport const PINNED_MESSAGES_LIMIT = 50;\nexport const BLOCKED_LIST_LIMIT = 100;\nexport const PROFILE_PHOTOS_LIMIT = 40;\nexport const PROFILE_SENSITIVE_AREA = 500;\nexport const TOPIC_LIST_SENSITIVE_AREA = 600;\nexport const COMMON_CHATS_LIMIT = 100;\nexport const GROUP_CALL_PARTICIPANTS_LIMIT = 100;\nexport const REACTION_LIST_LIMIT = 100;\nexport const REACTION_UNREAD_SLICE = 100;\nexport const MENTION_UNREAD_SLICE = 100;\nexport const TOPICS_SLICE = 20;\nexport const TOPICS_SLICE_SECOND_LOAD = 500;\n\nexport const TOP_CHAT_MESSAGES_PRELOAD_LIMIT = 20;\n\nexport const SPONSORED_MESSAGE_CACHE_MS = 300000; // 5 min\n\nexport const DEFAULT_VOLUME = 1;\nexport const DEFAULT_PLAYBACK_RATE = 1;\nexport const PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION = 20 * 60; // 20 min\n\nexport const ANIMATION_LEVEL_MIN = 0;\nexport const ANIMATION_LEVEL_MED = 1;\nexport const ANIMATION_LEVEL_MAX = 2;\nexport const ANIMATION_LEVEL_DEFAULT = ANIMATION_LEVEL_MAX;\n\nexport const DEFAULT_MESSAGE_TEXT_SIZE_PX = 16;\nexport const IOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 17;\nexport const MACOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 15;\n\nexport const DRAFT_DEBOUNCE = 10000; // 10s\nexport const SEND_MESSAGE_ACTION_INTERVAL = 3000; // 3s\n// 10000s from https://corefork.telegram.org/api/url-authorization#automatic-authorization\nexport const APP_CONFIG_REFETCH_INTERVAL = 10000 * 1000;\n\nexport const EDITABLE_INPUT_ID = 'editable-message-text';\nexport const EDITABLE_INPUT_MODAL_ID = 'editable-message-text-modal';\n// eslint-disable-next-line max-len\nexport const EDITABLE_INPUT_CSS_SELECTOR = `.messages-layout .Transition__slide--active #${EDITABLE_INPUT_ID}, .messages-layout .Transition > .to #${EDITABLE_INPUT_ID}`;\nexport const EDITABLE_INPUT_MODAL_CSS_SELECTOR = `#${EDITABLE_INPUT_MODAL_ID}`;\n\nexport const CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\nexport const MESSAGE_CONTENT_CLASS_NAME = 'message-content';\nexport const MESSAGE_CONTENT_SELECTOR = '.message-content';\n\n// Screen width where Pinned Message / Audio Player in the Middle Header can be safely displayed\nexport const SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1440; // px\n// Screen width where Pinned Message / Audio Player in the Middle Header shouldn't collapse with ChatInfo\nexport const SAFE_SCREEN_WIDTH_FOR_CHAT_INFO = 1150; // px\n\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1275; // px\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN = 925; // px\nexport const MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES = 1340; // px\nexport const MOBILE_SCREEN_MAX_WIDTH = 600; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_WIDTH = 950; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_HEIGHT = 450; // px\n\nexport const LOCAL_MESSAGE_MIN_ID = 5e9;\nexport const MAX_INT_32 = 2 ** 31 - 1;\nexport const TMP_CHAT_ID = '0';\n\nexport const ANIMATION_END_DELAY = 100;\n\nexport const FAST_SMOOTH_MAX_DISTANCE = 1500;\nexport const FAST_SMOOTH_MIN_DURATION = 250;\nexport const FAST_SMOOTH_MAX_DURATION = 600;\nexport const FAST_SMOOTH_SHORT_TRANSITION_MAX_DISTANCE = 500; // px\n\n// Average duration of message sending animation\nexport const API_UPDATE_THROTTLE = Math.round((FAST_SMOOTH_MIN_DURATION + FAST_SMOOTH_MAX_DURATION) / 2);\nexport const API_THROTTLE_RESET_UPDATES = new Set([\n  'newMessage', 'newScheduledMessage', 'deleteMessages', 'deleteScheduledMessages', 'deleteHistory',\n]);\n\nexport const LOCK_SCREEN_ANIMATION_DURATION_MS = 200;\n\nexport const STICKER_SIZE_INLINE_DESKTOP_FACTOR = 13;\nexport const STICKER_SIZE_INLINE_MOBILE_FACTOR = 11;\nexport const STICKER_SIZE_AUTH = 160;\nexport const STICKER_SIZE_AUTH_MOBILE = 120;\nexport const STICKER_SIZE_PICKER = 64;\nexport const EMOJI_SIZE_PICKER = 40;\nexport const COMPOSER_EMOJI_SIZE_PICKER = 32;\nexport const STICKER_SIZE_GENERAL_SETTINGS = 48;\nexport const STICKER_SIZE_PICKER_HEADER = 32;\nexport const STICKER_PICKER_MAX_SHARED_COVERS = 20;\nexport const STICKER_SIZE_SEARCH = 64;\nexport const STICKER_SIZE_MODAL = 64;\nexport const EMOJI_SIZE_MODAL = 40;\nexport const STICKER_SIZE_TWO_FA = 160;\nexport const STICKER_SIZE_PASSCODE = 160;\nexport const STICKER_SIZE_DISCUSSION_GROUPS = 140;\nexport const STICKER_SIZE_FOLDER_SETTINGS = 100;\nexport const STICKER_SIZE_INLINE_BOT_RESULT = 100;\nexport const STICKER_SIZE_JOIN_REQUESTS = 140;\nexport const STICKER_SIZE_INVITES = 140;\nexport const RECENT_STICKERS_LIMIT = 20;\nexport const RECENT_STATUS_LIMIT = 20;\nexport const EMOJI_STATUS_LOOP_LIMIT = 2;\nexport const EMOJI_SIZES = 7;\nexport const RECENT_SYMBOL_SET_ID = 'recent';\nexport const FAVORITE_SYMBOL_SET_ID = 'favorite';\nexport const CHAT_STICKER_SET_ID = 'chatStickers';\nexport const PREMIUM_STICKER_SET_ID = 'premium';\nexport const DEFAULT_TOPIC_ICON_STICKER_ID = 'topic-default-icon';\nexport const DEFAULT_STATUS_ICON_ID = 'status-default-icon';\nexport const EMOJI_IMG_REGEX = /<img[^>]+alt=\"([^\"]+)\"(?![^>]*data-document-id)[^>]*>/gm;\n\nexport const BASE_EMOJI_KEYWORD_LANG = 'en';\n\nexport const MENU_TRANSITION_DURATION = 200;\nexport const SLIDE_TRANSITION_DURATION = 450;\n\nexport const VIDEO_MOV_TYPE = 'video/quicktime';\nexport const VIDEO_WEBM_TYPE = 'video/webm';\n\nexport const GIF_MIME_TYPE = 'image/gif';\n\nexport const SUPPORTED_IMAGE_CONTENT_TYPES = new Set([\n  'image/png', 'image/jpeg', GIF_MIME_TYPE,\n]);\n\nexport const SUPPORTED_VIDEO_CONTENT_TYPES = new Set([\n  'video/mp4', // video/quicktime added dynamically in environment.ts\n]);\n\nexport const SUPPORTED_AUDIO_CONTENT_TYPES = new Set([\n  'audio/mp3',\n  'audio/ogg',\n  'audio/wav',\n  'audio/mpeg',\n  'audio/flac',\n  'audio/aac',\n  'audio/m4a',\n  'audio/mp4',\n  'audio/x-m4a',\n]);\n\nexport const CONTENT_TYPES_WITH_PREVIEW = new Set([\n  ...SUPPORTED_IMAGE_CONTENT_TYPES,\n  ...SUPPORTED_VIDEO_CONTENT_TYPES,\n]);\n\nexport const CONTENT_NOT_SUPPORTED = 'The message is not supported on this version of Wai.';\n\n// Taken from https://github.com/telegramdesktop/tdesktop/blob/41d9a9fcbd0c809c60ddbd9350791b1436aff7d9/Telegram/SourceFiles/ui/boxes/choose_language_box.cpp#L28\nexport const SUPPORTED_TRANSLATION_LANGUAGES = [\n  // Official\n  'en', 'ar', 'be', 'ca', 'zh', 'nl', 'fr', 'de', 'id',\n  'it', 'ja', 'ko', 'pl', 'pt', 'ru', 'es', 'uk',\n  // Unnofficial\n  'af', 'sq', 'am', 'hy', 'az', 'eu', 'bn', 'bs', 'bg',\n  'ceb', 'zh-TW', 'co', 'hr', 'cs', 'da', 'eo',\n  'et', 'fi', 'fy', 'gl', 'ka', 'el', 'gu', 'ht', 'ha',\n  'haw', 'he', 'iw', 'hi', 'hmn', 'hu', 'is', 'ig', 'ga',\n  'jv', 'kn', 'kk', 'km', 'rw', 'ku', 'ky', 'lo', 'la',\n  'lv', 'lt', 'lb', 'mk', 'mg', 'ms', 'ml', 'mt', 'mi',\n  'mr', 'mn', 'my', 'ne', 'no', 'ny', 'or', 'ps', 'fa',\n  'pa', 'ro', 'sm', 'gd', 'sr', 'st', 'sn', 'sd', 'si',\n  'sk', 'sl', 'so', 'su', 'sw', 'sv', 'tl', 'tg', 'ta',\n  'tt', 'te', 'th', 'tr', 'tk', 'ur', 'ug', 'uz', 'vi',\n  'cy', 'xh', 'yi', 'yo', 'zu',\n];\n\n// eslint-disable-next-line max-len\nexport const RE_LINK_TEMPLATE = '((ftp|https?):\\\\/\\\\/)?((www\\\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\\\.[a-zA-Z0-9()]{1,63})\\\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)';\nexport const RE_MENTION_TEMPLATE = '(@[\\\\w\\\\d_-]+)';\nexport const RE_TG_LINK = /^tg:(\\/\\/)?/i;\nexport const RE_TME_LINK = /^(https?:\\/\\/)?([-a-zA-Z0-9@:%_+~#=]{1,32}\\.)?t\\.me/i;\nexport const RE_TELEGRAM_LINK = /^(https?:\\/\\/)?telegram\\.org\\//i;\nexport const TME_LINK_PREFIX = 'https://wai.chat/';\nexport const USERNAME_PURCHASE_ERROR = 'USERNAME_PURCHASE_AVAILABLE';\nexport const PURCHASE_USERNAME = 'auction';\nexport const TME_WEB_DOMAINS = new Set(['t.me', 'web.t.me', 'k.t.me', 'z.t.me']);\n\n// eslint-disable-next-line max-len\nexport const COUNTRIES_WITH_12H_TIME_FORMAT = new Set(['AU', 'BD', 'CA', 'CO', 'EG', 'HN', 'IE', 'IN', 'JO', 'MX', 'MY', 'NI', 'NZ', 'PH', 'PK', 'SA', 'SV', 'US']);\n\nexport const API_CHAT_TYPES = ['bots', 'channels', 'chats', 'users'] as const;\n\n// MTProto constants\nexport const SERVICE_NOTIFICATIONS_USER_ID = '777000';\nexport const REPLIES_USER_ID = '1271266957'; // TODO For Test connection ID must be equal to 708513\nexport const RESTRICTED_EMOJI_SET_ID = '7173162320003080';\nexport const DEFAULT_GIF_SEARCH_BOT_USERNAME = 'gif';\nexport const ALL_FOLDER_ID = 0;\nexport const ARCHIVED_FOLDER_ID = 1;\nexport const DELETED_COMMENTS_CHANNEL_ID = '-777';\nexport const MAX_MEDIA_FILES_FOR_ALBUM = 10;\nexport const MAX_ACTIVE_PINNED_CHATS = 5;\nexport const SCHEDULED_WHEN_ONLINE = 0x7FFFFFFE;\nexport const DEFAULT_LANG_CODE = 'en';\nexport const DEFAULT_LANG_PACK = 'android';\nexport const LANG_PACKS = ['android', 'ios', 'tdesktop', 'macos'] as const;\nexport const FEEDBACK_URL = 'https://github.com/ptp-build/ptp-ai-chat/issues';\nexport const GENERAL_TOPIC_ID = 1;\n\nexport const LIGHT_THEME_BG_COLOR = '#99BA92';\nexport const DARK_THEME_BG_COLOR = '#0F0F0F';\nexport const DEFAULT_PATTERN_COLOR = '#4A8E3A8C';\nexport const DARK_THEME_PATTERN_COLOR = '#0A0A0A8C';\nexport const MAX_UPLOAD_FILEPART_SIZE = 524288;\n\n// Group calls\nexport const GROUP_CALL_VOLUME_MULTIPLIER = 100;\nexport const GROUP_CALL_DEFAULT_VOLUME = 100 * GROUP_CALL_VOLUME_MULTIPLIER;\nexport const GROUP_CALL_THUMB_VIDEO_DISABLED = true;\n\nexport const DEFAULT_LIMITS: Record<ApiLimitType, readonly [number, number]> = {\n  uploadMaxFileparts: [4000, 8000],\n  stickersFaved: [5, 10],\n  savedGifs: [200, 400],\n  dialogFiltersChats: [100, 200],\n  dialogFilters: [10, 20],\n  dialogFolderPinned: [5, 10],\n  captionLength: [1024, 2048],\n  channels: [500, 1000],\n  channelsPublic: [10, 20],\n  aboutLength: [70, 140],\n};\n","const BigInt = require('big-integer');\nconst crypto = require('./crypto/crypto');\n\n/**\n * converts a buffer to big int\n * @param buffer\n * @param little\n * @param signed\n * @returns {bigInt.BigInteger}\n */\nfunction readBigIntFromBuffer(buffer, little = true, signed = false) {\n    let randBuffer = Buffer.from(buffer);\n    const bytesNumber = randBuffer.length;\n    if (little) {\n        randBuffer = randBuffer.reverse();\n    }\n    let bigInt = BigInt(randBuffer.toString('hex'), 16);\n    if (signed && Math.floor(bigInt.toString('2').length / 8) >= bytesNumber) {\n        bigInt = bigInt.subtract(BigInt(2)\n            .pow(BigInt(bytesNumber * 8)));\n    }\n    return bigInt;\n}\n\n/**\n * Special case signed little ints\n * @param big\n * @param number\n * @returns {Buffer}\n */\nfunction toSignedLittleBuffer(big, number = 8) {\n    const bigNumber = BigInt(big);\n    const byteArray = [];\n    for (let i = 0; i < number; i++) {\n        byteArray[i] = bigNumber.shiftRight(8 * i)\n            .and(255);\n    }\n    return Buffer.from(byteArray);\n}\n\n/**\n * converts a big int to a buffer\n * @param bigInt {bigInt.BigInteger}\n * @param bytesNumber\n * @param little\n * @param signed\n * @returns {Buffer}\n */\nfunction readBufferFromBigInt(bigInt, bytesNumber, little = true, signed = false) {\n    bigInt = BigInt(bigInt);\n    const bitLength = bigInt.bitLength();\n\n    const bytes = Math.ceil(bitLength / 8);\n    if (bytesNumber < bytes) {\n        throw new Error('OverflowError: int too big to convert');\n    }\n    if (!signed && bigInt.lesser(BigInt(0))) {\n        throw new Error('Cannot convert to unsigned');\n    }\n    let below = false;\n    if (bigInt.lesser(BigInt(0))) {\n        below = true;\n        bigInt = bigInt.abs();\n    }\n\n    const hex = bigInt.toString('16')\n        .padStart(bytesNumber * 2, '0');\n    let l = Buffer.from(hex, 'hex');\n    if (little) {\n        l = l.reverse();\n    }\n\n    if (signed && below) {\n        if (little) {\n            let reminder = false;\n            if (l[0] !== 0) {\n                l[0] -= 1;\n            }\n            for (let i = 0; i < l.length; i++) {\n                if (l[i] === 0) {\n                    reminder = true;\n                    continue;\n                }\n                if (reminder) {\n                    l[i] -= 1;\n                    reminder = false;\n                }\n                l[i] = 255 - l[i];\n            }\n        } else {\n            l[l.length - 1] = 256 - l[l.length - 1];\n            for (let i = 0; i < l.length - 1; i++) {\n                l[i] = 255 - l[i];\n            }\n        }\n    }\n    return l;\n}\n\n/**\n * Generates a random long integer (8 bytes), which is optionally signed\n * @returns {BigInteger}\n */\nfunction generateRandomLong(signed = true) {\n    return readBigIntFromBuffer(generateRandomBytes(8), true, signed);\n}\n\n/**\n * .... really javascript\n * @param n {number}\n * @param m {number}\n * @returns {number}\n */\nfunction mod(n, m) {\n    return ((n % m) + m) % m;\n}\n\n/**\n * returns a positive bigInt\n * @param n {BigInt}\n * @param m {BigInt}\n * @returns {BigInt}\n */\nfunction bigIntMod(n, m) {\n    return ((n.remainder(m)).add(m)).remainder(m);\n}\n\n/**\n * Generates a random bytes array\n * @param count\n * @returns {Buffer}\n */\nfunction generateRandomBytes(count) {\n    return Buffer.from(crypto.randomBytes(count));\n}\n\n/**\n * Calculate the key based on Telegram guidelines, specifying whether it's the client or not\n * @param sharedKey\n * @param msgKey\n * @param client\n * @returns {{iv: Buffer, key: Buffer}}\n */\n\n/* CONTEST\nthis is mtproto 1 (mostly used for secret chats)\nasync function calcKey(sharedKey, msgKey, client) {\n    const x = client === true ? 0 : 8\n    const [sha1a, sha1b, sha1c, sha1d] = await Promise.all([\n        sha1(Buffer.concat([msgKey, sharedKey.slice(x, x + 32)])),\n        sha1(Buffer.concat([sharedKey.slice(x + 32, x + 48), msgKey, sharedKey.slice(x + 48, x + 64)])),\n        sha1(Buffer.concat([sharedKey.slice(x + 64, x + 96), msgKey])),\n        sha1(Buffer.concat([msgKey, sharedKey.slice(x + 96, x + 128)]))\n    ])\n    const key = Buffer.concat([sha1a.slice(0, 8), sha1b.slice(8, 20), sha1c.slice(4, 16)])\n    const iv = Buffer.concat([sha1a.slice(8, 20), sha1b.slice(0, 8), sha1c.slice(16, 20), sha1d.slice(0, 8)])\n    return {\n        key,\n        iv\n    }\n}\n\n */\n\n/**\n * Generates the key data corresponding to the given nonces\n * @param serverNonce\n * @param newNonce\n * @returns {{key: Buffer, iv: Buffer}}\n */\nasync function generateKeyDataFromNonce(serverNonce, newNonce) {\n    serverNonce = toSignedLittleBuffer(serverNonce, 16);\n    newNonce = toSignedLittleBuffer(newNonce, 32);\n    const [hash1, hash2, hash3] = await Promise.all([\n        sha1(Buffer.concat([newNonce, serverNonce])),\n        sha1(Buffer.concat([serverNonce, newNonce])),\n        sha1(Buffer.concat([newNonce, newNonce])),\n    ]);\n    const keyBuffer = Buffer.concat([hash1, hash2.slice(0, 12)]);\n    const ivBuffer = Buffer.concat([hash2.slice(12, 20), hash3, newNonce.slice(0, 4)]);\n    return {\n        key: keyBuffer,\n        iv: ivBuffer,\n    };\n}\n\nfunction convertToLittle(buf) {\n    const correct = Buffer.alloc(buf.length * 4);\n\n    for (let i = 0; i < buf.length; i++) {\n        correct.writeUInt32BE(buf[i], i * 4);\n    }\n    return correct;\n}\n\n/**\n * Calculates the SHA1 digest for the given data\n * @param data\n * @returns {Promise}\n */\nfunction sha1(data) {\n    const shaSum = crypto.createHash('sha1');\n    shaSum.update(data);\n    return shaSum.digest();\n}\n\n/**\n * Calculates the SHA256 digest for the given data\n * @param data\n * @returns {Promise}\n */\nfunction sha256(data) {\n    const shaSum = crypto.createHash('sha256');\n    shaSum.update(data);\n    return shaSum.digest();\n}\n\n/**\n * Fast mod pow for RSA calculation. a^b % n\n * @param a\n * @param b\n * @param n\n * @returns {bigInt.BigInteger}\n */\nfunction modExp(a, b, n) {\n    a = a.remainder(n);\n    let result = BigInt.one;\n    let x = a;\n    while (b.greater(BigInt.zero)) {\n        const leastSignificantBit = b.remainder(BigInt(2));\n        b = b.divide(BigInt(2));\n        if (leastSignificantBit.eq(BigInt.one)) {\n            result = result.multiply(x);\n            result = result.remainder(n);\n        }\n        x = x.multiply(x);\n        x = x.remainder(n);\n    }\n    return result;\n}\n\n/**\n * Gets the arbitrary-length byte array corresponding to the given integer\n * @param integer {any}\n * @param signed {boolean}\n * @returns {Buffer}\n */\nfunction getByteArray(integer, signed = false) {\n    const bits = integer.toString(2).length;\n    const byteLength = Math.floor((bits + 8 - 1) / 8);\n    return readBufferFromBigInt(BigInt(integer), byteLength, false, signed);\n}\n\n/**\n * returns a random int from min (inclusive) and max (inclusive)\n * @param min\n * @param max\n * @returns {number}\n */\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Sleeps a specified amount of time\n * @param ms time in milliseconds\n * @returns {Promise}\n */\nconst sleep = (ms) => new Promise((resolve) => {\n    setTimeout(resolve, ms);\n});\n\n/**\n * Helper to export two buffers of same length\n * @returns {Buffer}\n */\n\nfunction bufferXor(a, b) {\n    const res = [];\n    for (let i = 0; i < a.length; i++) {\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res);\n}\n\n/**\n * Checks if the obj is an array\n * @param obj\n * @returns {boolean}\n */\n/*\nCONTEST\nwe do'nt support array requests anyway\nfunction isArrayLike(obj) {\n    if (!obj) return false\n    const l = obj.length\n    if (typeof l != 'number' || l < 0) return false\n    if (Math.floor(l) !== l) return false\n    // fast check\n    if (l > 0 && !(l - 1 in obj)) return false\n    // more complete check (optional)\n    for (let i = 0; i < l; ++i) {\n        if (!(i in obj)) return false\n    }\n    return true\n}\n*/\n\n// Taken from https://stackoverflow.com/questions/18638900/javascript-crc32/18639999#18639999\nfunction makeCRCTable() {\n    let c;\n    const crcTable = [];\n    for (let n = 0; n < 256; n++) {\n        c = n;\n        for (let k = 0; k < 8; k++) {\n            c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n        }\n        crcTable[n] = c;\n    }\n    return crcTable;\n}\n\nlet crcTable;\n\nfunction crc32(buf) {\n    if (!crcTable) {\n        crcTable = makeCRCTable();\n    }\n    if (!Buffer.isBuffer(buf)) {\n        buf = Buffer.from(buf);\n    }\n    let crc = -1;\n\n    for (let index = 0; index < buf.length; index++) {\n        const byte = buf[index];\n        crc = crcTable[(crc ^ byte) & 0xff] ^ (crc >>> 8);\n    }\n    return (crc ^ (-1)) >>> 0;\n}\n\nmodule.exports = {\n    readBigIntFromBuffer,\n    readBufferFromBigInt,\n    generateRandomLong,\n    mod,\n    crc32,\n    generateRandomBytes,\n    // calcKey,\n    generateKeyDataFromNonce,\n    sha1,\n    sha256,\n    bigIntMod,\n    modExp,\n    getRandomInt,\n    sleep,\n    getByteArray,\n    // isArrayLike,\n    toSignedLittleBuffer,\n    convertToLittle,\n    bufferXor,\n};\n","const BigInt = require('big-integer');\nconst { constructors } = require('./tl');\nconst {\n    readBigIntFromBuffer,\n    readBufferFromBigInt,\n    sha256,\n    bigIntMod,\n    modExp,\n    generateRandomBytes,\n} = require('./Helpers');\nconst crypto = require('./crypto/crypto');\n\nconst SIZE_FOR_HASH = 256;\n\n/**\n *\n *\n * @param prime{BigInteger}\n * @param g{BigInteger}\n */\n\n/*\nWe don't support changing passwords yet\nfunction checkPrimeAndGoodCheck(prime, g) {\n    console.error('Unsupported function `checkPrimeAndGoodCheck` call. Arguments:', prime, g)\n\n    const goodPrimeBitsCount = 2048\n    if (prime < 0 || prime.bitLength() !== goodPrimeBitsCount) {\n        throw new Error(`bad prime count ${prime.bitLength()},expected ${goodPrimeBitsCount}`)\n    }\n    // TODO this is kinda slow\n    if (Factorizator.factorize(prime)[0] !== 1) {\n        throw new Error('give \"prime\" is not prime')\n    }\n    if (g.eq(BigInt(2))) {\n        if ((prime.remainder(BigInt(8))).neq(BigInt(7))) {\n            throw new Error(`bad g ${g}, mod8 ${prime % 8}`)\n        }\n    } else if (g.eq(BigInt(3))) {\n        if ((prime.remainder(BigInt(3))).neq(BigInt(2))) {\n            throw new Error(`bad g ${g}, mod3 ${prime % 3}`)\n        }\n        // eslint-disable-next-line no-empty\n    } else if (g.eq(BigInt(4))) {\n\n    } else if (g.eq(BigInt(5))) {\n        if (!([ BigInt(1), BigInt(4) ].includes(prime.remainder(BigInt(5))))) {\n            throw new Error(`bad g ${g}, mod8 ${prime % 5}`)\n        }\n    } else if (g.eq(BigInt(6))) {\n        if (!([ BigInt(19), BigInt(23) ].includes(prime.remainder(BigInt(24))))) {\n            throw new Error(`bad g ${g}, mod8 ${prime % 24}`)\n        }\n    } else if (g.eq(BigInt(7))) {\n        if (!([ BigInt(3), BigInt(5), BigInt(6) ].includes(prime.remainder(BigInt(7))))) {\n            throw new Error(`bad g ${g}, mod8 ${prime % 7}`)\n        }\n    } else {\n        throw new Error(`bad g ${g}`)\n    }\n    const primeSub1Div2 = (prime.subtract(BigInt(1))).divide(BigInt(2))\n    if (Factorizator.factorize(primeSub1Div2)[0] !== 1) {\n        throw new Error('(prime - 1) // 2 is not prime')\n    }\n}\n*/\n/**\n *\n * @param primeBytes{Buffer}\n * @param g{number}\n */\nfunction checkPrimeAndGood(primeBytes, g) {\n    const goodPrime = Buffer.from([\n        0xC7, 0x1C, 0xAE, 0xB9, 0xC6, 0xB1, 0xC9, 0x04, 0x8E, 0x6C, 0x52, 0x2F, 0x70, 0xF1, 0x3F, 0x73,\n        0x98, 0x0D, 0x40, 0x23, 0x8E, 0x3E, 0x21, 0xC1, 0x49, 0x34, 0xD0, 0x37, 0x56, 0x3D, 0x93, 0x0F,\n        0x48, 0x19, 0x8A, 0x0A, 0xA7, 0xC1, 0x40, 0x58, 0x22, 0x94, 0x93, 0xD2, 0x25, 0x30, 0xF4, 0xDB,\n        0xFA, 0x33, 0x6F, 0x6E, 0x0A, 0xC9, 0x25, 0x13, 0x95, 0x43, 0xAE, 0xD4, 0x4C, 0xCE, 0x7C, 0x37,\n        0x20, 0xFD, 0x51, 0xF6, 0x94, 0x58, 0x70, 0x5A, 0xC6, 0x8C, 0xD4, 0xFE, 0x6B, 0x6B, 0x13, 0xAB,\n        0xDC, 0x97, 0x46, 0x51, 0x29, 0x69, 0x32, 0x84, 0x54, 0xF1, 0x8F, 0xAF, 0x8C, 0x59, 0x5F, 0x64,\n        0x24, 0x77, 0xFE, 0x96, 0xBB, 0x2A, 0x94, 0x1D, 0x5B, 0xCD, 0x1D, 0x4A, 0xC8, 0xCC, 0x49, 0x88,\n        0x07, 0x08, 0xFA, 0x9B, 0x37, 0x8E, 0x3C, 0x4F, 0x3A, 0x90, 0x60, 0xBE, 0xE6, 0x7C, 0xF9, 0xA4,\n        0xA4, 0xA6, 0x95, 0x81, 0x10, 0x51, 0x90, 0x7E, 0x16, 0x27, 0x53, 0xB5, 0x6B, 0x0F, 0x6B, 0x41,\n        0x0D, 0xBA, 0x74, 0xD8, 0xA8, 0x4B, 0x2A, 0x14, 0xB3, 0x14, 0x4E, 0x0E, 0xF1, 0x28, 0x47, 0x54,\n        0xFD, 0x17, 0xED, 0x95, 0x0D, 0x59, 0x65, 0xB4, 0xB9, 0xDD, 0x46, 0x58, 0x2D, 0xB1, 0x17, 0x8D,\n        0x16, 0x9C, 0x6B, 0xC4, 0x65, 0xB0, 0xD6, 0xFF, 0x9C, 0xA3, 0x92, 0x8F, 0xEF, 0x5B, 0x9A, 0xE4,\n        0xE4, 0x18, 0xFC, 0x15, 0xE8, 0x3E, 0xBE, 0xA0, 0xF8, 0x7F, 0xA9, 0xFF, 0x5E, 0xED, 0x70, 0x05,\n        0x0D, 0xED, 0x28, 0x49, 0xF4, 0x7B, 0xF9, 0x59, 0xD9, 0x56, 0x85, 0x0C, 0xE9, 0x29, 0x85, 0x1F,\n        0x0D, 0x81, 0x15, 0xF6, 0x35, 0xB1, 0x05, 0xEE, 0x2E, 0x4E, 0x15, 0xD0, 0x4B, 0x24, 0x54, 0xBF,\n        0x6F, 0x4F, 0xAD, 0xF0, 0x34, 0xB1, 0x04, 0x03, 0x11, 0x9C, 0xD8, 0xE3, 0xB9, 0x2F, 0xCC, 0x5B,\n    ]);\n    if (goodPrime.equals(primeBytes)) {\n        if ([3, 4, 5, 7].includes(g)) {\n            return; // It's good\n        }\n    }\n    throw new Error('Changing passwords unsupported');\n    // checkPrimeAndGoodCheck(readBigIntFromBuffer(primeBytes, false), g)\n}\n\n/**\n *\n * @param number{BigInteger}\n * @param p{BigInteger}\n * @returns {boolean}\n */\nfunction isGoodLarge(number, p) {\n    return (number.greater(BigInt(0)) && (p.subtract(number)\n        .greater(BigInt(0))));\n}\n\n/**\n *\n * @param number {Buffer}\n * @returns {Buffer}\n */\nfunction numBytesForHash(number) {\n    return Buffer.concat([Buffer.alloc(SIZE_FOR_HASH - number.length), number]);\n}\n\n/**\n *\n * @param g {Buffer}\n * @returns {Buffer}\n */\nfunction bigNumForHash(g) {\n    return readBufferFromBigInt(g, SIZE_FOR_HASH, false);\n}\n\n/**\n *\n * @param modexp {BigInteger}\n * @param prime {BigInteger}\n * @returns {Boolean}\n */\nfunction isGoodModExpFirst(modexp, prime) {\n    const diff = prime.subtract(modexp);\n\n    const minDiffBitsCount = 2048 - 64;\n    const maxModExpSize = 256;\n\n    return !(diff.lesser(BigInt(0)) || diff.bitLength() < minDiffBitsCount\n        || modexp.bitLength() < minDiffBitsCount\n        || Math.floor((modexp.bitLength() + 7) / 8) > maxModExpSize);\n}\n\nfunction xor(a, b) {\n    const length = Math.min(a.length, b.length);\n\n    for (let i = 0; i < length; i++) {\n        a[i] ^= b[i];\n    }\n\n    return a;\n}\n\n/**\n *\n * @param password{Buffer}\n * @param salt{Buffer}\n * @param iterations{number}\n * @returns {*}\n */\n\nfunction pbkdf2sha512(password, salt, iterations) {\n    return crypto.pbkdf2(password, salt, iterations, 64, 'sha512');\n}\n\n/**\n *\n * @param algo {constructors.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow}\n * @param password\n * @returns {Buffer|*}\n */\nasync function computeHash(algo, password) {\n    const hash1 = await sha256(Buffer.concat([algo.salt1, Buffer.from(password, 'utf-8'), algo.salt1]));\n    const hash2 = await sha256(Buffer.concat([algo.salt2, hash1, algo.salt2]));\n    const hash3 = await pbkdf2sha512(hash2, algo.salt1, 100000);\n    return sha256(Buffer.concat([algo.salt2, hash3, algo.salt2]));\n}\n\n/**\n *\n * @param algo {constructors.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow}\n * @param password\n */\nasync function computeDigest(algo, password) {\n    try {\n        checkPrimeAndGood(algo.p, algo.g);\n    } catch (e) {\n        throw new Error('bad p/g in password');\n    }\n\n    const value = modExp(BigInt(algo.g),\n        readBigIntFromBuffer(await computeHash(algo, password), false),\n        readBigIntFromBuffer(algo.p, false));\n    return bigNumForHash(value);\n}\n\n/**\n *\n * @param request {constructors.account.Password}\n * @param password {string}\n */\nasync function computeCheck(request, password) {\n    const algo = request.currentAlgo;\n    if (!(algo instanceof constructors.PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow)) {\n        throw new Error(`Unsupported password algorithm ${algo.className}`);\n    }\n\n    const pwHash = await computeHash(algo, password);\n    const p = readBigIntFromBuffer(algo.p, false);\n    const { g } = algo;\n    const B = readBigIntFromBuffer(request.srp_B, false);\n    try {\n        checkPrimeAndGood(algo.p, g);\n    } catch (e) {\n        throw new Error('bad /g in password');\n    }\n    if (!isGoodLarge(B, p)) {\n        throw new Error('bad b in check');\n    }\n    const x = readBigIntFromBuffer(pwHash, false);\n    const pForHash = numBytesForHash(algo.p);\n    const gForHash = bigNumForHash(g);\n    const bForHash = numBytesForHash(request.srp_B);\n    const gX = modExp(BigInt(g), x, p);\n    const k = readBigIntFromBuffer(await sha256(Buffer.concat([pForHash, gForHash])), false);\n    const kgX = bigIntMod(k.multiply(gX), p);\n    const generateAndCheckRandom = async () => {\n        const randomSize = 256;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const random = generateRandomBytes(randomSize);\n            const a = readBigIntFromBuffer(random, false);\n            const A = modExp(BigInt(g), a, p);\n            if (isGoodModExpFirst(A, p)) {\n                const aForHash = bigNumForHash(A);\n                const u = readBigIntFromBuffer(await sha256(Buffer.concat([aForHash, bForHash])), false);\n                if (u.greater(BigInt(0))) {\n                    return [a, aForHash, u];\n                }\n            }\n        }\n    };\n    const [a, aForHash, u] = await generateAndCheckRandom();\n    const gB = bigIntMod(B.subtract(kgX), p);\n    if (!isGoodModExpFirst(gB, p)) {\n        throw new Error('bad gB');\n    }\n\n    const ux = u.multiply(x);\n    const aUx = a.add(ux);\n    const S = modExp(gB, aUx, p);\n    const [K, pSha, gSha, salt1Sha, salt2Sha] = await Promise.all([\n        sha256(bigNumForHash(S)),\n        sha256(pForHash),\n        sha256(gForHash),\n        sha256(algo.salt1),\n        sha256(algo.salt2),\n    ]);\n    const M1 = await sha256(Buffer.concat([\n        xor(pSha, gSha),\n        salt1Sha,\n        salt2Sha,\n        aForHash,\n        bForHash,\n        K,\n    ]));\n\n    return new constructors.InputCheckPasswordSRP({\n        srpId: request.srpId,\n        A: Buffer.from(aForHash),\n        M1,\n\n    });\n}\n\nmodule.exports = {\n    computeCheck,\n    computeDigest,\n};\n","module.exports = '0.0.2';\n","import type TelegramClient from './TelegramClient';\n// eslint-disable-next-line import/no-named-default\nimport { default as Api } from '../tl/api';\nimport { generateRandomBytes } from '../Helpers';\nimport { computeCheck, computeDigest } from '../Password';\nimport errors from '../errors';\n\nexport interface TwoFaParams {\n    isCheckPassword?: boolean;\n    currentPassword?: string;\n    newPassword?: string;\n    hint?: string;\n    email?: string;\n    emailCodeCallback?: (length: number) => Promise<string>;\n    onEmailCodeError?: (err: Error) => void;\n}\n\nexport type TmpPasswordResult = Api.account.TmpPassword | { error: string } | undefined;\n\n/**\n * Changes the 2FA settings of the logged in user.\n Note that this method may be *incredibly* slow depending on the\n prime numbers that must be used during the process to make sure\n that everything is safe.\n\n Has no effect if both current and new password are omitted.\n\n * @param client: The telegram client instance\n * @param isCheckPassword: Must be ``true`` if you want to check the current password\n * @param currentPassword: The current password, to authorize changing to ``new_password``.\n Must be set if changing existing 2FA settings.\n Must **not** be set if 2FA is currently disabled.\n Passing this by itself will remove 2FA (if correct).\n * @param newPassword: The password to set as 2FA.\n If 2FA was already enabled, ``currentPassword`` **must** be set.\n Leaving this blank or `undefined` will remove the password.\n * @param hint: Hint to be displayed by Telegram when it asks for 2FA.\n Must be set when changing or creating a new password.\n Has no effect if ``newPassword`` is not set.\n * @param email: Recovery and verification email. If present, you must also\n set `emailCodeCallback`, else it raises an Error.\n * @param emailCodeCallback: If an email is provided, a callback that returns the code sent\n to it must also be set. This callback may be asynchronous.\n It should return a string with the code. The length of the\n code will be passed to the callback as an input parameter.\n\n If the callback returns an invalid code, it will raise an rpc error with the message\n ``CODE_INVALID``\n\n * @returns Promise<void>\n * @throws this method can throw:\n \"PASSWORD_HASH_INVALID\" if you entered a wrong password (or set it to undefined).\n \"EMAIL_INVALID\" if the entered email is wrong\n \"EMAIL_HASH_EXPIRED\" if the user took too long to verify their email\n */\nexport async function updateTwoFaSettings(\n    client: TelegramClient,\n    {\n        isCheckPassword,\n        currentPassword,\n        newPassword,\n        hint = '',\n        email,\n        emailCodeCallback,\n        onEmailCodeError,\n    }: TwoFaParams,\n) {\n    if (!newPassword && !currentPassword) {\n        throw new Error('Neither `currentPassword` nor `newPassword` is present');\n    }\n\n    if (email && !(emailCodeCallback && onEmailCodeError)) {\n        throw new Error('`email` present without `emailCodeCallback` and `onEmailCodeError`');\n    }\n\n    const pwd = await client.invoke(new Api.account.GetPassword());\n\n    if (!(pwd.newAlgo instanceof Api.PasswordKdfAlgoUnknown)) {\n        pwd.newAlgo.salt1 = Buffer.concat([pwd.newAlgo.salt1, generateRandomBytes(32)]);\n    }\n    if (!pwd.hasPassword && currentPassword) {\n        currentPassword = undefined;\n    }\n\n    const password = currentPassword ? await computeCheck(pwd, currentPassword!) : new Api.InputCheckPasswordEmpty();\n\n    if (isCheckPassword) {\n        await client.invoke(new Api.auth.CheckPassword({ password }));\n        return;\n    }\n\n    try {\n        await client.invoke(new Api.account.UpdatePasswordSettings({\n            password,\n            newSettings: new Api.account.PasswordInputSettings({\n                newAlgo: pwd.newAlgo,\n                newPasswordHash: newPassword ? await computeDigest(pwd.newAlgo, newPassword) : Buffer.alloc(0),\n                hint,\n                email,\n                // not explained what it does and it seems to always be set to empty in tdesktop\n                newSecureSettings: undefined,\n            }),\n        }));\n    } catch (e) {\n        if (e instanceof errors.EmailUnconfirmedError) {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                try {\n                    const code = await emailCodeCallback!(e.codeLength);\n\n                    if (!code) {\n                        throw new Error('Code is empty');\n                    }\n\n                    await client.invoke(new Api.account.ConfirmPasswordEmail({ code }));\n                    break;\n                } catch (err: any) {\n                    onEmailCodeError!(err);\n                }\n            }\n        } else {\n            throw e;\n        }\n    }\n}\n\nexport async function getTmpPassword(client: TelegramClient, currentPassword: string, ttl = 60) {\n    const pwd = await client.invoke(new Api.account.GetPassword());\n\n    if (!pwd) {\n        return undefined;\n    }\n\n    const inputPassword = await computeCheck(pwd, currentPassword);\n    try {\n        const result = await client.invoke(new Api.account.GetTmpPassword({\n            password: inputPassword,\n            period: ttl,\n        }));\n\n        return result;\n    } catch (err: any) {\n        if (err.message === 'PASSWORD_HASH_INVALID') {\n            return { error: err.message };\n        }\n\n        throw err;\n    }\n}\n","const os = require('os');\nconst Logger = require('../extensions/Logger');\nconst { sleep } = require('../Helpers');\nconst errors = require('../errors');\nconst MemorySession = require('../sessions/Memory');\nconst Helpers = require('../Helpers');\nconst utils = require('../Utils');\nconst Session = require('../sessions/Abstract');\nconst { LAYER } = require('../tl/AllTLObjects');\nconst {\n    constructors,\n    requests,\n} = require('../tl');\nconst {\n    ConnectionTCPObfuscated,\n    MTProtoSender,\n    UpdateConnectionState,\n} = require('../network');\nconst {\n    authFlow,\n    checkAuthorization,\n} = require('./auth');\nconst { downloadFile } = require('./downloadFile');\nconst { uploadFile } = require('./uploadFile');\nconst {\n    updateTwoFaSettings,\n    getTmpPassword,\n} = require('./2fa');\n\nconst DEFAULT_DC_ID = 2;\nconst WEBDOCUMENT_DC_ID = 4;\nconst EXPORTED_SENDER_RECONNECT_TIMEOUT = 1000; // 1 sec\nconst EXPORTED_SENDER_RELEASE_TIMEOUT = 30000; // 30 sec\nconst WEBDOCUMENT_REQUEST_PART_SIZE = 131072; // 128kb\n\nconst PING_INTERVAL = 3000; // 3 sec\nconst PING_TIMEOUT = 5000; // 5 sec\nconst PING_FAIL_ATTEMPTS = 3;\nconst PING_FAIL_INTERVAL = 100; // ms\n\n// An unusually long interval is a sign of returning from background mode...\nconst PING_INTERVAL_TO_WAKE_UP = 5000; // 5 sec\n// ... so we send a quick \"wake-up\" ping to confirm than connection was dropped ASAP\nconst PING_WAKE_UP_TIMEOUT = 3000; // 3 sec\n// We also send a warning to the user even a bit more quickly\nconst PING_WAKE_UP_WARNING_TIMEOUT = 1000; // 1 sec\n\nconst PING_DISCONNECT_DELAY = 60000; // 1 min\n\n// All types\nconst sizeTypes = ['u', 'v', 'w', 'y', 'd', 'x', 'c', 'm', 'b', 'a', 's', 'f'];\n\nclass TelegramClient {\n    static DEFAULT_OPTIONS = {\n        connection: ConnectionTCPObfuscated,\n        useIPV6: false,\n        proxy: undefined,\n        timeout: 10,\n        requestRetries: 5,\n        connectionRetries: Infinity,\n        retryDelay: 1000,\n        autoReconnect: true,\n        sequentialUpdates: false,\n        floodSleepLimit: 60,\n        deviceModel: undefined,\n        systemVersion: undefined,\n        appVersion: undefined,\n        langCode: 'en',\n        systemLangCode: 'en',\n        baseLogger: 'gramjs',\n        useWSS: false,\n        additionalDcsDisabled: false,\n        testServers: false,\n        dcId: DEFAULT_DC_ID,\n    };\n\n    /**\n     *\n     * @param session {StringSession|LocalStorageSession}\n     * @param apiId\n     * @param apiHash\n     * @param opts\n     */\n    constructor(session, apiId, apiHash, opts = TelegramClient.DEFAULT_OPTIONS) {\n        if (!apiId || !apiHash) {\n            throw Error('Your API ID or Hash are invalid. Please read \"Requirements\" on README.md');\n        }\n        const args = { ...TelegramClient.DEFAULT_OPTIONS, ...opts };\n        this.apiId = apiId;\n        this.apiHash = apiHash;\n        this.defaultDcId = args.dcId || DEFAULT_DC_ID;\n        this._useIPV6 = args.useIPV6;\n        // this._entityCache = new Set()\n        if (typeof args.baseLogger === 'string') {\n            this._log = new Logger();\n        } else {\n            this._log = args.baseLogger;\n        }\n        // Determine what session we will use\n        if (typeof session === 'string' || !session) {\n            try {\n                throw new Error('not implemented');\n            } catch (e) {\n                session = new MemorySession();\n            }\n        } else if (!(session instanceof Session)) {\n            throw new Error('The given session must be str or a session instance');\n        }\n\n        this.floodSleepLimit = args.floodSleepLimit;\n        this._eventBuilders = [];\n\n        this._phoneCodeHash = {};\n        this.session = session;\n        // this._entityCache = EntityCache();\n        this.apiId = parseInt(apiId, 10);\n        this.apiHash = apiHash;\n\n        this._requestRetries = args.requestRetries;\n        this._connectionRetries = args.connectionRetries;\n        this._retryDelay = args.retryDelay || 0;\n        if (args.proxy) {\n            this._log.warn('proxies are not supported');\n        }\n        this._proxy = args.proxy;\n        this._timeout = args.timeout;\n        this._autoReconnect = args.autoReconnect;\n\n        this._connection = args.connection;\n        // TODO add proxy support\n\n        this._floodWaitedRequests = {};\n\n        this._initWith = (x) => {\n            return new requests.InvokeWithLayer({\n                layer: LAYER,\n                query: new requests.InitConnection({\n                    apiId: this.apiId,\n                    deviceModel: args.deviceModel || os.type()\n                        .toString() || 'Unknown',\n                    systemVersion: args.systemVersion || os.release()\n                        .toString() || '1.0',\n                    appVersion: args.appVersion || '1.0',\n                    langCode: args.langCode,\n                    langPack: '', // this should be left empty.\n                    systemLangCode: args.systemLangCode,\n                    query: x,\n                    proxy: undefined, // no proxies yet.\n                }),\n            });\n        };\n\n        this._args = args;\n        // These will be set later\n        this._config = undefined;\n        this.phoneCodeHashes = [];\n        this._exportedSenderPromises = {};\n        this._waitingForAuthKey = {};\n        this._exportedSenderReleaseTimeouts = {};\n        this._additionalDcsDisabled = args.additionalDcsDisabled;\n        this._loopStarted = false;\n        this._isSwitchingDc = false;\n        this._destroyed = false;\n    }\n\n    // region Connecting\n\n    /**\n     * Connects to the Telegram servers, executing authentication if required.\n     * Note that authenticating to the Telegram servers is not the same as authenticating\n     * the app, which requires to send a code first.\n     * @returns {Promise<void>}\n     */\n    async connect() {\n        await this._initSession();\n\n        if (this._sender === undefined) {\n            // only init sender once to avoid multiple loops.\n            this._sender = new MTProtoSender(this.session.getAuthKey(), {\n                logger: this._log,\n                dcId: this.session.dcId,\n                retries: this._connectionRetries,\n                delay: this._retryDelay,\n                autoReconnect: this._autoReconnect,\n                connectTimeout: this._timeout,\n                authKeyCallback: this._authKeyCallback.bind(this),\n                updateCallback: this._handleUpdate.bind(this),\n                isMainSender: true,\n            });\n        }\n        // set defaults vars\n        this._sender.userDisconnected = false;\n        this._sender._user_connected = false;\n        this._sender.isReconnecting = false;\n        this._sender._disconnected = true;\n\n        const connection = new this._connection(\n            this.session.serverAddress, this.session.port, this.session.dcId, this._log, this._args.testServers,\n        );\n\n        const newConnection = await this._sender.connect(connection);\n        if (!newConnection) {\n            // we're already connected so no need to reset auth key.\n            if (!this._loopStarted) {\n                this._updateLoop();\n                this._loopStarted = true;\n            }\n            return;\n        }\n\n        this.session.setAuthKey(this._sender.authKey);\n        await this._sender.send(this._initWith(\n            new requests.help.GetConfig({}),\n        ));\n\n        if (!this._loopStarted) {\n            this._updateLoop();\n            this._loopStarted = true;\n        }\n        this._isSwitchingDc = false;\n    }\n\n    async _initSession() {\n        await this.session.load();\n\n        if (!this.session.serverAddress || (this.session.serverAddress.includes(':') !== this._useIPV6)) {\n            const DC = utils.getDC(this.defaultDcId);\n            // TODO Fill IP addresses for when `this._useIPV6` is used\n            this.session.setDC(this.defaultDcId, DC.ipAddress, this._args.useWSS ? 443 : 80);\n        }\n    }\n\n    async _updateLoop() {\n        let lastPongAt;\n\n        while (!this._destroyed) {\n            await Helpers.sleep(PING_INTERVAL);\n            if (this._sender.isReconnecting || this._isSwitchingDc) {\n                lastPongAt = undefined;\n                continue;\n            }\n\n            try {\n                const ping = () => {\n                    return this._sender.send(new requests.PingDelayDisconnect({\n                        pingId: Helpers.getRandomInt(Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER),\n                        disconnectDelay: PING_DISCONNECT_DELAY,\n                    }));\n                };\n\n                const pingAt = Date.now();\n                const lastInterval = lastPongAt ? pingAt - lastPongAt : undefined;\n\n                if (!lastInterval || lastInterval < PING_INTERVAL_TO_WAKE_UP) {\n                    await attempts(() => timeout(ping, PING_TIMEOUT), PING_FAIL_ATTEMPTS, PING_FAIL_INTERVAL);\n                } else {\n                    let wakeUpWarningTimeout = setTimeout(() => {\n                        this._handleUpdate(new UpdateConnectionState(UpdateConnectionState.disconnected));\n                        wakeUpWarningTimeout = undefined;\n                    }, PING_WAKE_UP_WARNING_TIMEOUT);\n\n                    await timeout(ping, PING_WAKE_UP_TIMEOUT);\n\n                    if (wakeUpWarningTimeout) {\n                        clearTimeout(wakeUpWarningTimeout);\n                        wakeUpWarningTimeout = undefined;\n                    }\n\n                    this._handleUpdate(new UpdateConnectionState(UpdateConnectionState.connected));\n                }\n\n                lastPongAt = Date.now();\n            } catch (err) {\n                // eslint-disable-next-line no-console\n                console.warn(err);\n\n                lastPongAt = undefined;\n\n                if (this._sender.isReconnecting || this._isSwitchingDc) {\n                    continue;\n                }\n\n                await this.disconnect();\n                await this.connect();\n            }\n\n            // We need to send some content-related request at least hourly\n            // for Telegram to keep delivering updates, otherwise they will\n            // just stop even if we're connected. Do so every 30 minutes.\n\n            // TODO Call getDifference instead since it's more relevant\n            if (new Date().getTime() - this._lastRequest > 30 * 60 * 1000) {\n                try {\n                    await this.invoke(new requests.updates.GetState());\n                } catch (e) {\n                    // we don't care about errors here\n                }\n\n                lastPongAt = undefined;\n            }\n        }\n        await this.disconnect();\n    }\n\n    /**\n     * Disconnects from the Telegram server\n     * @returns {Promise<void>}\n     */\n    async disconnect() {\n        if (this._sender) {\n            await this._sender.disconnect();\n        }\n\n        await Promise.all(\n            Object.values(this._exportedSenderPromises)\n                .map((promises) => {\n                    return Object.values(promises).map((promise) => {\n                        return promise && promise.then((sender) => {\n                            if (sender) {\n                                return sender.disconnect();\n                            }\n                            return undefined;\n                        });\n                    });\n                }).flat(),\n        );\n\n        this._exportedSenderPromises = {};\n        this._waitingForAuthKey = {};\n    }\n\n    /**\n     * Disconnects all senders and removes all handlers\n     * @returns {Promise<void>}\n     */\n    async destroy() {\n        this._destroyed = true;\n\n        try {\n            await this.disconnect();\n        } catch (err) {\n            // Do nothing\n        }\n\n        this.session.delete();\n        this._eventBuilders = [];\n    }\n\n    async _switchDC(newDc) {\n        this._log.info(`Reconnecting to new data center ${newDc}`);\n        const DC = utils.getDC(newDc);\n        this.session.setDC(newDc, DC.ipAddress, DC.port);\n        // authKey's are associated with a server, which has now changed\n        // so it's not valid anymore. Set to None to force recreating it.\n        await this._sender.authKey.setKey(undefined);\n        this.session.setAuthKey(undefined);\n        this._isSwitchingDc = true;\n        await this.disconnect();\n        return this.connect();\n    }\n\n    _authKeyCallback(authKey, dcId) {\n        this.session.setAuthKey(authKey, dcId);\n    }\n\n    // endregion\n    // export region\n\n    async _cleanupExportedSender(dcId, index) {\n        if (this.session.dcId !== dcId) {\n            this.session.setAuthKey(undefined, dcId);\n        }\n        const sender = await this._exportedSenderPromises[dcId][index];\n        delete this._exportedSenderPromises[dcId][index];\n        await sender.disconnect();\n    }\n\n    async _cleanupExportedSenders(dcId) {\n        const promises = Object.values(this._exportedSenderPromises[dcId]);\n        if (!promises.length) {\n            return;\n        }\n\n        if (this.session.dcId !== dcId) {\n            this.session.setAuthKey(undefined, dcId);\n        }\n\n        this._exportedSenderPromises[dcId] = {};\n\n        await Promise.all(promises.map(async (promise) => {\n            const sender = await promise;\n            await sender.disconnect();\n        }));\n    }\n\n    async _connectSender(sender, dcId, isPremium = false) {\n        // if we don't already have an auth key we want to use normal DCs not -1\n        let hasAuthKey = Boolean(sender.authKey.getKey());\n        let firstConnectResolver;\n\n        if (!hasAuthKey) {\n            if (this._waitingForAuthKey[dcId]) {\n                await this._waitingForAuthKey[dcId];\n\n                const authKey = this.session.getAuthKey(dcId);\n                await sender.authKey.setKey(authKey.getKey());\n                hasAuthKey = Boolean(sender.authKey.getKey());\n            } else {\n                this._waitingForAuthKey[dcId] = new Promise((resolve) => {\n                    firstConnectResolver = resolve;\n                });\n            }\n        }\n\n        const dc = utils.getDC(dcId, hasAuthKey);\n\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                await sender.connect(new this._connection(\n                    dc.ipAddress,\n                    dc.port,\n                    dcId,\n                    this._log,\n                    this._args.testServers,\n                    // Premium DCs are not stable for obtaining auth keys, so need to we first connect to regular ones\n                    hasAuthKey ? isPremium : false,\n                ));\n\n                if (this.session.dcId !== dcId && !sender._authenticated) {\n                    this._log.info(`Exporting authorization for data center ${dc.ipAddress}`);\n                    const auth = await this.invoke(new requests.auth.ExportAuthorization({ dcId }));\n                    const req = this._initWith(new requests.auth.ImportAuthorization({\n                        id: auth.id,\n                        bytes: auth.bytes,\n                    }));\n                    await sender.send(req);\n                    sender._authenticated = true;\n                }\n                sender.dcId = dcId;\n                sender.userDisconnected = false;\n\n                if (firstConnectResolver) {\n                    firstConnectResolver();\n                    delete this._waitingForAuthKey[dcId];\n                }\n\n                return sender;\n            } catch (err) {\n                // eslint-disable-next-line no-console\n                console.error(err);\n\n                await Helpers.sleep(1000);\n                await sender.disconnect();\n            }\n        }\n    }\n\n    async _borrowExportedSender(dcId, shouldReconnect, existingSender, index, isPremium) {\n        if (this._additionalDcsDisabled) {\n            return undefined;\n        }\n\n        const i = index || 0;\n\n        if (!this._exportedSenderPromises[dcId]) this._exportedSenderPromises[dcId] = {};\n\n        if (!this._exportedSenderPromises[dcId][i] || shouldReconnect) {\n            this._exportedSenderPromises[dcId][i] = this._connectSender(\n                existingSender || this._createExportedSender(dcId, i),\n                dcId,\n                isPremium,\n            );\n        }\n\n        let sender;\n        try {\n            sender = await this._exportedSenderPromises[dcId][i];\n\n            if (!sender.isConnected()) {\n                if (sender.isConnecting) {\n                    await Helpers.sleep(EXPORTED_SENDER_RECONNECT_TIMEOUT);\n                    return this._borrowExportedSender(dcId, false, sender, i, isPremium);\n                } else {\n                    return this._borrowExportedSender(dcId, true, sender, i, isPremium);\n                }\n            }\n        } catch (err) {\n            // eslint-disable-next-line no-console\n            console.error(err);\n\n            return this._borrowExportedSender(dcId, true, undefined, i, isPremium);\n        }\n\n        if (!this._exportedSenderReleaseTimeouts[dcId]) this._exportedSenderReleaseTimeouts[dcId] = {};\n        if (this._exportedSenderReleaseTimeouts[dcId][i]) {\n            clearTimeout(this._exportedSenderReleaseTimeouts[dcId][i]);\n            this._exportedSenderReleaseTimeouts[dcId][i] = undefined;\n        }\n\n        this._exportedSenderReleaseTimeouts[dcId][i] = setTimeout(() => {\n            this._exportedSenderReleaseTimeouts[dcId][i] = undefined;\n            sender.disconnect();\n        }, EXPORTED_SENDER_RELEASE_TIMEOUT);\n\n        return sender;\n    }\n\n    _createExportedSender(dcId, index) {\n        return new MTProtoSender(this.session.getAuthKey(dcId), {\n            logger: this._log,\n            dcId,\n            retries: this._connectionRetries,\n            delay: this._retryDelay,\n            autoReconnect: this._autoReconnect,\n            connectTimeout: this._timeout,\n            authKeyCallback: this._authKeyCallback.bind(this),\n            isMainSender: dcId === this.session.dcId,\n            onConnectionBreak: () => this._cleanupExportedSender(dcId, index),\n        });\n    }\n\n    getSender(dcId, index, isPremium) {\n        return dcId\n            ? this._borrowExportedSender(dcId, undefined, undefined, index, isPremium)\n            : Promise.resolve(this._sender);\n    }\n\n    // end region\n\n    // download region\n\n    /**\n     * Complete flow to download a file.\n     * @param inputLocation {constructors.InputFileLocation}\n     * @param [args[partSizeKb] {number}]\n     * @param [args[fileSize] {number}]\n     * @param [args[progressCallback] {Function}]\n     * @param [args[start] {number}]\n     * @param [args[end] {number}]\n     * @param [args[dcId] {number}]\n     * @param [args[workers] {number}]\n     * @returns {Promise<Buffer>}\n     */\n    downloadFile(inputLocation, args = {}) {\n        return downloadFile(this, inputLocation, args);\n    }\n\n    downloadMedia(messageOrMedia, args) {\n        let media;\n        if (messageOrMedia instanceof constructors.Message) {\n            media = messageOrMedia.media;\n        } else if (messageOrMedia instanceof constructors.MessageService) {\n            media = messageOrMedia.action.photo;\n        } else {\n            media = messageOrMedia;\n        }\n\n        if (typeof media === 'string') {\n            throw new Error('not implemented');\n        }\n\n        if (media instanceof constructors.MessageMediaWebPage) {\n            if (media.webpage instanceof constructors.WebPage) {\n                media = media.webpage.document || media.webpage.photo;\n            }\n        }\n        if (media instanceof constructors.MessageMediaPhoto || media instanceof constructors.Photo) {\n            return this._downloadPhoto(media, args);\n        } else if (media instanceof constructors.MessageMediaDocument || media instanceof constructors.Document) {\n            return this._downloadDocument(media, args);\n        } else if (media instanceof constructors.MessageMediaContact) {\n            return this._downloadContact(media, args);\n        } else if (media instanceof constructors.WebDocument || media instanceof constructors.WebDocumentNoProxy) {\n            return this._downloadWebDocument(media, args);\n        }\n        return undefined;\n    }\n\n    downloadProfilePhoto(entity, isBig = false) {\n        // ('User', 'Chat', 'UserFull', 'ChatFull')\n        const ENTITIES = [0x2da17977, 0xc5af5d94, 0x1f4661b9, 0xd49a2697];\n        // ('InputPeer', 'InputUser', 'InputChannel')\n        // const INPUTS = [0xc91c90b6, 0xe669bf46, 0x40f202fd]\n        // Todo account for input methods\n        const sizeType = isBig ? 'x' : 'm';\n        let photo;\n        if (!(ENTITIES.includes(entity.SUBCLASS_OF_ID))) {\n            photo = entity;\n        } else {\n            if (!entity.photo) {\n                // Special case: may be a ChatFull with photo:Photo\n                if (!entity.chatPhoto) {\n                    return undefined;\n                }\n\n                return this._downloadPhoto(\n                    entity.chatPhoto, { sizeType },\n                );\n            }\n            photo = entity.photo;\n        }\n\n        let dcId;\n        let loc;\n        if (photo instanceof constructors.UserProfilePhoto || photo instanceof constructors.ChatPhoto) {\n            dcId = photo.dcId;\n            loc = new constructors.InputPeerPhotoFileLocation({\n                peer: utils.getInputPeer(entity),\n                photoId: photo.photoId,\n                big: isBig,\n            });\n        } else {\n            // It doesn't make any sense to check if `photo` can be used\n            // as input location, because then this method would be able\n            // to \"download the profile photo of a message\", i.e. its\n            // media which should be done with `download_media` instead.\n            return undefined;\n        }\n        return this.downloadFile(loc, {\n            dcId,\n        });\n    }\n\n    downloadStickerSetThumb(stickerSet) {\n        if (!stickerSet.thumbs?.length && !stickerSet.thumbDocumentId) {\n            return undefined;\n        }\n\n        const { thumbVersion } = stickerSet;\n\n        if (!stickerSet.thumbDocumentId) {\n            return this.downloadFile(\n                new constructors.InputStickerSetThumb({\n                    stickerset: new constructors.InputStickerSetID({\n                        id: stickerSet.id,\n                        accessHash: stickerSet.accessHash,\n                    }),\n                    thumbVersion,\n                }),\n                { dcId: stickerSet.thumbDcId },\n            );\n        }\n\n        return this.invoke(new constructors.messages.GetCustomEmojiDocuments({\n            documentId: [stickerSet.thumbDocumentId],\n        })).then((docs) => {\n            const doc = docs[0];\n            return this.downloadFile(new constructors.InputDocumentFileLocation({\n                id: doc.id,\n                accessHash: doc.accessHash,\n                fileReference: doc.fileReference,\n                thumbSize: '',\n            }),\n            {\n                fileSize: doc.size.toJSNumber(),\n                dcId: doc.dcId,\n            });\n        });\n    }\n\n    _pickFileSize(sizes, sizeType) {\n        if (!sizeType || !sizes || !sizes.length) {\n            return undefined;\n        }\n        const indexOfSize = sizeTypes.indexOf(sizeType);\n        let size;\n        for (let i = indexOfSize; i < sizeTypes.length; i++) {\n            size = sizes.find((s) => s.type === sizeTypes[i]);\n            if (size) {\n                return size;\n            }\n        }\n        return undefined;\n    }\n\n    _downloadCachedPhotoSize(size) {\n        // No need to download anything, simply write the bytes\n        let data;\n        if (size instanceof constructors.PhotoStrippedSize) {\n            data = utils.strippedPhotoToJpg(size.bytes);\n        } else {\n            data = size.bytes;\n        }\n        return data;\n    }\n\n    _downloadPhoto(photo, args) {\n        if (photo instanceof constructors.MessageMediaPhoto) {\n            photo = photo.photo;\n        }\n        if (!(photo instanceof constructors.Photo)) {\n            return undefined;\n        }\n        const isVideoSize = args.sizeType === 'u' || args.sizeType === 'v';\n        const size = this._pickFileSize(isVideoSize\n            ? [...photo.videoSizes, ...photo.sizes]\n            : photo.sizes, args.sizeType);\n        if (!size || (size instanceof constructors.PhotoSizeEmpty)) {\n            return undefined;\n        }\n\n        if (size instanceof constructors.PhotoCachedSize || size instanceof constructors.PhotoStrippedSize) {\n            return this._downloadCachedPhotoSize(size);\n        }\n        return this.downloadFile(\n            new constructors.InputPhotoFileLocation({\n                id: photo.id,\n                accessHash: photo.accessHash,\n                fileReference: photo.fileReference,\n                thumbSize: size.type,\n            }),\n            {\n                dcId: photo.dcId,\n                fileSize: size.size || Math.max(...(size.sizes || [])),\n                progressCallback: args.progressCallback,\n            },\n        );\n    }\n\n    _downloadDocument(doc, args) {\n        if (doc instanceof constructors.MessageMediaDocument) {\n            doc = doc.document;\n        }\n        if (!(doc instanceof constructors.Document)) {\n            return undefined;\n        }\n\n        let size;\n        if (args.sizeType) {\n            size = doc.thumbs ? this._pickFileSize([...(doc.videoThumbs || []),\n                ...doc.thumbs], args.sizeType) : undefined;\n            if (!size && doc.mimeType.startsWith('video/')) {\n                return undefined;\n            }\n\n            if (size && (size instanceof constructors.PhotoCachedSize\n                || size instanceof constructors.PhotoStrippedSize)) {\n                return this._downloadCachedPhotoSize(size);\n            }\n        }\n\n        return this.downloadFile(\n            new constructors.InputDocumentFileLocation({\n                id: doc.id,\n                accessHash: doc.accessHash,\n                fileReference: doc.fileReference,\n                thumbSize: size ? size.type : '',\n            }),\n            {\n                fileSize: size ? size.size : doc.size.toJSNumber(),\n                progressCallback: args.progressCallback,\n                start: args.start,\n                end: args.end,\n                dcId: doc.dcId,\n                workers: args.workers,\n            },\n        );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _downloadContact(media, args) {\n        throw new Error('not implemented');\n    }\n\n    async _downloadWebDocument(media) {\n        if (media.url && !('accessHash' in media)) {\n            const arrayBuff = await fetch(media.url).then((res) => res.arrayBuffer());\n            return Buffer.from(arrayBuff);\n        }\n\n        try {\n            const buff = [];\n            let offset = 0;\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const downloaded = new requests.upload.GetWebFile({\n                    location: new constructors.InputWebFileLocation({\n                        url: media.url,\n                        accessHash: media.accessHash,\n                    }),\n                    offset,\n                    limit: WEBDOCUMENT_REQUEST_PART_SIZE,\n                });\n                const sender = await this._borrowExportedSender(WEBDOCUMENT_DC_ID);\n                const res = await sender.send(downloaded);\n                offset += 131072;\n                if (res.bytes.length) {\n                    buff.push(res.bytes);\n                    if (res.bytes.length < WEBDOCUMENT_REQUEST_PART_SIZE) {\n                        break;\n                    }\n                } else {\n                    break;\n                }\n            }\n            return Buffer.concat(buff);\n        } catch (e) {\n            // the file is no longer saved in telegram's cache.\n            if (e.message === 'WEBFILE_NOT_AVAILABLE') {\n                return Buffer.alloc(0);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    async downloadStaticMap(accessHash, long, lat, w, h, zoom, scale, accuracyRadius) {\n        try {\n            const buff = [];\n            let offset = 0;\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                try {\n                    const downloaded = new requests.upload.GetWebFile({\n                        location: new constructors.InputWebFileGeoPointLocation({\n                            geoPoint: new constructors.InputGeoPoint({\n                                lat,\n                                long,\n                                accuracyRadius,\n                            }),\n                            accessHash,\n                            w,\n                            h,\n                            zoom,\n                            scale,\n                        }),\n                        offset,\n                        limit: WEBDOCUMENT_REQUEST_PART_SIZE,\n                    });\n                    const sender = await this._borrowExportedSender(WEBDOCUMENT_DC_ID);\n                    const res = await sender.send(downloaded);\n                    offset += 131072;\n                    if (res.bytes.length) {\n                        buff.push(res.bytes);\n                        if (res.bytes.length < WEBDOCUMENT_REQUEST_PART_SIZE) {\n                            break;\n                        }\n                    } else {\n                        break;\n                    }\n                } catch (err) {\n                    if (err instanceof errors.FloodWaitError) {\n                        // eslint-disable-next-line no-console\n                        console.warn(`getWebFile: sleeping for ${err.seconds}s on flood wait`);\n                        await sleep(err.seconds * 1000);\n                        continue;\n                    }\n                }\n            }\n            return Buffer.concat(buff);\n        } catch (e) {\n            // the file is no longer saved in telegram's cache.\n            if (e.message === 'WEBFILE_NOT_AVAILABLE') {\n                return Buffer.alloc(0);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    // region Invoking Telegram request\n    /**\n     * Invokes a MTProtoRequest (sends and receives it) and returns its result\n     * @param request\n     * @param dcId Optional dcId to use when sending the request\n     * @returns {Promise}\n     */\n\n    async invoke(request, dcId) {\n        if (request.classType !== 'request') {\n            throw new Error('You can only invoke MTProtoRequests');\n        }\n\n        const sender = dcId === undefined ? this._sender : await this.getSender(dcId);\n        this._lastRequest = new Date().getTime();\n        let attempt = 0;\n        for (attempt = 0; attempt < this._requestRetries; attempt++) {\n            const promise = sender.sendWithInvokeSupport(request);\n            try {\n                const result = await promise.promise;\n                return result;\n            } catch (e) {\n                if (e instanceof errors.ServerError || e.message === 'RPC_CALL_FAIL'\n                    || e.message === 'RPC_MCGET_FAIL') {\n                    this._log.warn(`Telegram is having internal issues ${e.constructor.name}`);\n                    await sleep(2000);\n                } else if (e instanceof errors.FloodWaitError || e instanceof errors.FloodTestPhoneWaitError) {\n                    if (e.seconds <= this.floodSleepLimit) {\n                        this._log.info(`Sleeping for ${e.seconds}s on flood wait`);\n                        await sleep(e.seconds * 1000);\n                    } else {\n                        throw e;\n                    }\n                } else if (e instanceof errors.PhoneMigrateError || e instanceof errors.NetworkMigrateError\n                    || e instanceof errors.UserMigrateError) {\n                    this._log.info(`Phone migrated to ${e.newDc}`);\n                    const shouldRaise = e instanceof errors.PhoneMigrateError\n                        || e instanceof errors.NetworkMigrateError;\n                    if (shouldRaise && await checkAuthorization(this)) {\n                        throw e;\n                    }\n                    await this._switchDC(e.newDc);\n                } else if (e instanceof errors.MsgWaitError) {\n                    // we need to resend this after the old one was confirmed.\n                    await promise.isReady();\n                } else {\n                    throw e;\n                }\n            }\n        }\n        throw new Error(`Request was unsuccessful ${attempt} time(s)`);\n    }\n\n    setIsPremium(isPremium) {\n        this.isPremium = isPremium;\n    }\n\n    async getMe() {\n        try {\n            return (await this.invoke(new requests.users\n                .GetUsers({ id: [new constructors.InputUserSelf()] })))[0];\n        } catch (e) {\n            this._log.warn('error while getting me');\n            this._log.warn(e);\n        }\n        return undefined;\n    }\n\n    async start(authParams) {\n        if (!this.isConnected()) {\n            await this.connect();\n        }\n\n        if (await checkAuthorization(this, authParams.shouldThrowIfUnauthorized)) {\n            return;\n        }\n\n        const apiCredentials = {\n            apiId: this.apiId,\n            apiHash: this.apiHash,\n        };\n\n        await authFlow(this, apiCredentials, authParams);\n    }\n\n    uploadFile(fileParams) {\n        return uploadFile(this, fileParams);\n    }\n\n    updateTwoFaSettings(params) {\n        return updateTwoFaSettings(this, params);\n    }\n\n    getTmpPassword(currentPassword, ttl) {\n        return getTmpPassword(this, currentPassword, ttl);\n    }\n\n    // event region\n    addEventHandler(callback, event) {\n        this._eventBuilders.push([event, callback]);\n    }\n\n    _handleUpdate(update) {\n        // this.session.processEntities(update)\n        // this._entityCache.add(update)\n\n        if (update instanceof constructors.Updates || update instanceof constructors.UpdatesCombined) {\n            // TODO deal with entities\n            const entities = [];\n            for (const x of [...update.users, ...update.chats]) {\n                entities.push(x);\n            }\n            for (const u of update.updates) {\n                this._processUpdate(u, update.updates, entities);\n            }\n        } else if (update instanceof constructors.UpdateShort) {\n            this._processUpdate(update.update, undefined);\n        } else {\n            this._processUpdate(update, undefined);\n        }\n        // TODO add caching\n        // this._stateCache.update(update)\n    }\n\n    _processUpdate(update, others, entities) {\n        update._entities = entities || [];\n        const args = {\n            update,\n            others,\n        };\n        this._dispatchUpdate(args);\n    }\n\n    // endregion\n\n    // region private methods\n\n    /**\n     Gets a full entity from the given string, which may be a phone or\n     a username, and processes all the found entities on the session.\n     The string may also be a user link, or a channel/chat invite link.\n\n     This method has the side effect of adding the found users to the\n     session database, so it can be queried later without API calls,\n     if this option is enabled on the session.\n\n     Returns the found entity, or raises TypeError if not found.\n     * @param string {string}\n     * @returns {Promise<void>}\n     * @private\n     */\n    /* CONTEST\n    async _getEntityFromString(string) {\n        const phone = utils.parsePhone(string)\n        if (phone) {\n            try {\n                for (const user of (await this.invoke(\n                    new requests.contacts.GetContacts(0))).users) {\n                    if (user.phone === phone) {\n                        return user\n                    }\n                }\n            } catch (e) {\n                if (e.message === 'BOT_METHOD_INVALID') {\n                    throw new Error('Cannot get entity by phone number as a ' +\n                        'bot (try using integer IDs, not strings)')\n                }\n                throw e\n            }\n        } else if (['me', 'this'].includes(string.toLowerCase())) {\n            return this.getMe()\n        } else {\n            const { username, isJoinChat } = utils.parseUsername(string)\n            if (isJoinChat) {\n                const invite = await this.invoke(new requests.messages.CheckChatInvite({\n                    'hash': username,\n                }))\n                if (invite instanceof constructors.ChatInvite) {\n                    throw new Error('Cannot get entity from a channel (or group) ' +\n                        'that you are not part of. Join the group and retry',\n                    )\n                } else if (invite instanceof constructors.ChatInviteAlready) {\n                    return invite.chat\n                }\n            } else if (username) {\n                try {\n                    const result = await this.invoke(\n                        new requests.contacts.ResolveUsername(username))\n                    const pid = utils.getPeerId(result.peer, false)\n                    if (result.peer instanceof constructors.PeerUser) {\n                        for (const x of result.users) {\n                            if (x.id === pid) {\n                                return x\n                            }\n                        }\n                    } else {\n                        for (const x of result.chats) {\n                            if (x.id === pid) {\n                                return x\n                            }\n                        }\n                    }\n                } catch (e) {\n                    if (e.message === 'USERNAME_NOT_OCCUPIED') {\n                        throw new Error(`No user has \"${username}\" as username`)\n                    }\n                    throw e\n                }\n            }\n        }\n        throw new Error(`Cannot find any entity corresponding to \"${string}\"`)\n    }\n    */\n    // endregion\n\n    // users region\n    /**\n     Turns the given entity into its input entity version.\n\n     Most requests use this kind of :tl:`InputPeer`, so this is the most\n     suitable call to make for those cases. **Generally you should let the\n     library do its job** and don't worry about getting the input entity\n     first, but if you're going to use an entity often, consider making the\n     call:\n\n     Arguments\n     entity (`str` | `int` | :tl:`Peer` | :tl:`InputPeer`):\n     If a username or invite link is given, **the library will\n     use the cache**. This means that it's possible to be using\n     a username that *changed* or an old invite link (this only\n     happens if an invite link for a small group chat is used\n     after it was upgraded to a mega-group).\n\n     If the username or ID from the invite link is not found in\n     the cache, it will be fetched. The same rules apply to phone\n     numbers (``'+34 123456789'``) from people in your contact list.\n\n     If an exact name is given, it must be in the cache too. This\n     is not reliable as different people can share the same name\n     and which entity is returned is arbitrary, and should be used\n     only for quick tests.\n\n     If a positive integer ID is given, the entity will be searched\n     in cached users, chats or channels, without making any call.\n\n     If a negative integer ID is given, the entity will be searched\n     exactly as either a chat (prefixed with ``-``) or as a channel\n     (prefixed with ``-100``).\n\n     If a :tl:`Peer` is given, it will be searched exactly in the\n     cache as either a user, chat or channel.\n\n     If the given object can be turned into an input entity directly,\n     said operation will be done.\n\n     Unsupported types will raise ``TypeError``.\n\n     If the entity can't be found, ``ValueError`` will be raised.\n\n     Returns\n     :tl:`InputPeerUser`, :tl:`InputPeerChat` or :tl:`InputPeerChannel`\n     or :tl:`InputPeerSelf` if the parameter is ``'me'`` or ``'self'``.\n\n     If you need to get the ID of yourself, you should use\n     `get_me` with ``input_peer=True``) instead.\n\n     Example\n     .. code-block:: python\n\n     // If you're going to use \"username\" often in your code\n     // (make a lot of calls), consider getting its input entity\n     // once, and then using the \"user\" everywhere instead.\n     user = await client.get_input_entity('username')\n\n     // The same applies to IDs, chats or channels.\n     chat = await client.get_input_entity(-123456789)\n\n     * @param peer\n     * @returns {Promise<>}\n     */\n\n    /* CONTEST\n    async getInputEntity(peer) {\n        // Short-circuit if the input parameter directly maps to an InputPeer\n        try {\n            return utils.getInputPeer(peer)\n            // eslint-disable-next-line no-empty\n        } catch (e) {\n        }\n        // Next in priority is having a peer (or its ID) cached in-memory\n        try {\n            // 0x2d45687 == crc32(b'Peer')\n            if (typeof peer === 'number' || peer.SUBCLASS_OF_ID === 0x2d45687) {\n                if (this._entityCache.has(peer)) {\n                    return this._entityCache[peer]\n                }\n            }\n            // eslint-disable-next-line no-empty\n        } catch (e) {\n        }\n        // Then come known strings that take precedence\n        if (['me', 'this'].includes(peer)) {\n            return new constructors.InputPeerSelf()\n        }\n        // No InputPeer, cached peer, or known string. Fetch from disk cache\n        try {\n            return this.session.getInputEntity(peer)\n            // eslint-disable-next-line no-empty\n        } catch (e) {\n        }\n        // Only network left to try\n        if (typeof peer === 'string') {\n            return utils.getInputPeer(await this._getEntityFromString(peer))\n        }\n        // If we're a bot and the user has messaged us privately users.getUsers\n        // will work with accessHash = 0. Similar for channels.getChannels.\n        // If we're not a bot but the user is in our contacts, it seems to work\n        // regardless. These are the only two special-cased requests.\n        peer = utils.getPeer(peer)\n        if (peer instanceof constructors.PeerUser) {\n            const users = await this.invoke(new requests.users.GetUsers({\n                id: [new constructors.InputUser({\n                    userId: peer.userId,\n                    accessHash: 0,\n                })],\n            }))\n            if (users && !(users[0] instanceof constructors.UserEmpty)) {\n                // If the user passed a valid ID they expect to work for\n                // channels but would be valid for users, we get UserEmpty.\n                // Avoid returning the invalid empty input peer for that.\n                //\n                // We *could* try to guess if it's a channel first, and if\n                // it's not, work as a chat and try to validate it through\n                // another request, but that becomes too much work.\n                return utils.getInputPeer(users[0])\n            }\n        } else if (peer instanceof constructors.PeerChat) {\n            return new constructors.InputPeerChat({\n                chatId: peer.chatId,\n            })\n        } else if (peer instanceof constructors.PeerChannel) {\n            try {\n                const channels = await this.invoke(new requests.channels.GetChannels({\n                    id: [new constructors.InputChannel({\n                        channelId: peer.channelId,\n                        accessHash: 0,\n                    })],\n                }))\n\n                return utils.getInputPeer(channels.chats[0])\n                // eslint-disable-next-line no-empty\n            } catch (e) {\n                console.log(e)\n            }\n        }\n        throw new Error(`Could not find the input entity for ${peer.id || peer.channelId || peer.chatId || peer.userId}.\n         Please read https://` +\n            'docs.telethon.dev/en/latest/concepts/entities.html to' +\n            ' find out more details.',\n        )\n    }\n    */\n    async _dispatchUpdate(args = {\n        update: undefined,\n        others: undefined,\n        channelId: undefined,\n        ptsDate: undefined,\n    }) {\n        for (const [builder, callback] of this._eventBuilders) {\n            const event = builder.build(args.update);\n            if (event) {\n                await callback(event);\n            }\n        }\n    }\n\n    isConnected() {\n        if (this._sender) {\n            if (this._sender.isConnected()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nfunction timeout(cb, ms) {\n    let isResolved = false;\n\n    return Promise.race([\n        cb(),\n        Helpers.sleep(ms).then(() => (isResolved ? undefined : Promise.reject(new Error('TIMEOUT')))),\n    ]).finally(() => {\n        isResolved = true;\n    });\n}\n\nasync function attempts(cb, times, pause) {\n    for (let i = 0; i < times; i++) {\n        try {\n            // We need to `return await` here so it can be caught locally\n            // eslint-disable-next-line @typescript-eslint/return-await\n            return await cb();\n        } catch (err) {\n            if (i === times - 1) {\n                throw err;\n            }\n\n            await Helpers.sleep(pause);\n        }\n    }\n    return undefined;\n}\n\nmodule.exports = TelegramClient;\n","import Api from '../tl/api';\nimport type TelegramClient from './TelegramClient';\nimport utils from '../Utils';\nimport { sleep } from '../Helpers';\nimport { computeCheck as computePasswordSrpCheck } from '../Password';\n\nexport interface UserAuthParams {\n    phoneNumber: string | (() => Promise<string>);\n    webAuthTokenFailed: () => void;\n    phoneCode: (isCodeViaApp?: boolean) => Promise<string>;\n    password: (hint?: string, noReset?: boolean) => Promise<string>;\n    firstAndLastNames: () => Promise<[string, string?]>;\n    qrCode: (qrCode: { token: Buffer; expires: number }) => Promise<void>;\n    onError: (err: Error) => void;\n    forceSMS?: boolean;\n    initialMethod?: 'phoneNumber' | 'qrCode';\n    shouldThrowIfUnauthorized?: boolean;\n    webAuthToken?: string;\n    mockScenario?: string;\n}\n\nexport interface BotAuthParams {\n    botAuthToken: string;\n}\n\ninterface ApiCredentials {\n    apiId: number;\n    apiHash: string;\n}\n\nconst DEFAULT_INITIAL_METHOD = 'phoneNumber';\nconst QR_CODE_TIMEOUT = 30000;\n\nexport async function authFlow(\n    client: TelegramClient,\n    apiCredentials: ApiCredentials,\n    authParams: UserAuthParams | BotAuthParams,\n) {\n    let me: Api.TypeUser;\n\n    if ('botAuthToken' in authParams) {\n        me = await signInBot(client, apiCredentials, authParams);\n    } else if ('webAuthToken' in authParams && authParams.webAuthToken) {\n        me = await signInUserWithWebToken(client, apiCredentials, authParams);\n    } else {\n        me = await signInUserWithPreferredMethod(client, apiCredentials, authParams);\n    }\n\n    client._log.info('Signed in successfully as', utils.getDisplayName(me));\n}\n\nexport async function signInUserWithPreferredMethod(\n    client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams,\n): Promise<Api.TypeUser> {\n    const { initialMethod = DEFAULT_INITIAL_METHOD } = authParams;\n\n    if (initialMethod === 'phoneNumber') {\n        return signInUser(client, apiCredentials, authParams);\n    } else {\n        return signInUserWithQrCode(client, apiCredentials, authParams);\n    }\n}\n\nexport async function checkAuthorization(client: TelegramClient, shouldThrow = false) {\n    try {\n        await client.invoke(new Api.updates.GetState());\n        return true;\n    } catch (e: any) {\n        if (e.message === 'Disconnect' || shouldThrow) throw e;\n        return false;\n    }\n}\n\nasync function signInUserWithWebToken(\n    client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams,\n): Promise<Api.TypeUser> {\n    try {\n        const { apiId, apiHash } = apiCredentials;\n        const sendResult = await client.invoke(new Api.auth.ImportWebTokenAuthorization({\n            webAuthToken: authParams.webAuthToken,\n            apiId,\n            apiHash,\n        }));\n\n        if (sendResult instanceof Api.auth.Authorization) {\n            return sendResult.user;\n        } else {\n            throw new Error('SIGN_UP_REQUIRED');\n        }\n    } catch (err: any) {\n        if (err.message === 'SESSION_PASSWORD_NEEDED') {\n            return signInWithPassword(client, apiCredentials, authParams, true);\n        } else {\n            client._log.error(`Failed to login with web token: ${err}`);\n            authParams.webAuthTokenFailed();\n            return signInUserWithPreferredMethod(client, apiCredentials, {\n                ...authParams,\n                webAuthToken: undefined,\n            });\n        }\n    }\n}\n\nasync function signInUser(\n    client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams,\n): Promise<Api.TypeUser> {\n    let phoneNumber;\n    let phoneCodeHash;\n    let isCodeViaApp = false;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        try {\n            if (typeof authParams.phoneNumber === 'function') {\n                try {\n                    phoneNumber = await authParams.phoneNumber();\n                } catch (err: any) {\n                    if (err.message === 'RESTART_AUTH_WITH_QR') {\n                        return signInUserWithQrCode(client, apiCredentials, authParams);\n                    }\n\n                    throw err;\n                }\n            } else {\n                phoneNumber = authParams.phoneNumber;\n            }\n            const sendCodeResult = await sendCode(client, apiCredentials, phoneNumber, authParams.forceSMS);\n            phoneCodeHash = sendCodeResult.phoneCodeHash;\n            isCodeViaApp = sendCodeResult.isCodeViaApp;\n\n            if (typeof phoneCodeHash !== 'string') {\n                throw new Error('Failed to retrieve phone code hash');\n            }\n\n            break;\n        } catch (err: any) {\n            if (typeof authParams.phoneNumber !== 'function') {\n                throw err;\n            }\n\n            authParams.onError(err);\n        }\n    }\n\n    let phoneCode;\n    let isRegistrationRequired = false;\n    let termsOfService;\n\n    // eslint-disable-next-line no-constant-condition\n    while (1) {\n        try {\n            try {\n                phoneCode = await authParams.phoneCode(isCodeViaApp);\n            } catch (err: any) {\n                // This is the support for changing phone number from the phone code screen.\n                if (err.message === 'RESTART_AUTH') {\n                    return signInUser(client, apiCredentials, authParams);\n                }\n            }\n\n            if (!phoneCode) {\n                throw new Error('Code is empty');\n            }\n\n            // May raise PhoneCodeEmptyError, PhoneCodeExpiredError,\n            // PhoneCodeHashEmptyError or PhoneCodeInvalidError.\n            const result = await client.invoke(new Api.auth.SignIn({\n                phoneNumber,\n                phoneCodeHash,\n                phoneCode,\n            }));\n\n            if (result instanceof Api.auth.AuthorizationSignUpRequired) {\n                isRegistrationRequired = true;\n                termsOfService = result.termsOfService;\n                break;\n            }\n\n            return result.user;\n        } catch (err: any) {\n            if (err.message === 'SESSION_PASSWORD_NEEDED') {\n                return signInWithPassword(client, apiCredentials, authParams);\n            } else {\n                authParams.onError(err);\n            }\n        }\n    }\n\n    if (isRegistrationRequired) {\n        // eslint-disable-next-line no-constant-condition\n        while (1) {\n            try {\n                const [firstName, lastName] = await authParams.firstAndLastNames();\n                if (!firstName) {\n                    throw new Error('First name is required');\n                }\n\n                const { user } = await client.invoke(new Api.auth.SignUp({\n                    phoneNumber,\n                    phoneCodeHash,\n                    firstName,\n                    lastName,\n                })) as Api.auth.Authorization;\n\n                if (termsOfService) {\n                    // This is a violation of Telegram rules: the user should be presented with and accept TOS.\n                    await client.invoke(new Api.help.AcceptTermsOfService({ id: termsOfService.id }));\n                }\n\n                return user;\n            } catch (err: any) {\n                authParams.onError(err);\n            }\n        }\n    }\n\n    authParams.onError(new Error('Auth failed'));\n    return signInUser(client, apiCredentials, authParams);\n}\n\nasync function signInUserWithQrCode(\n    client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams,\n): Promise<Api.TypeUser> {\n    let isScanningComplete = false;\n\n    const inputPromise = (async () => {\n        // eslint-disable-next-line no-constant-condition\n        while (1) {\n            if (isScanningComplete) {\n                break;\n            }\n\n            const result = await client.invoke(new Api.auth.ExportLoginToken({\n                apiId: Number(process.env.TELEGRAM_T_API_ID),\n                apiHash: process.env.TELEGRAM_T_API_HASH,\n                exceptIds: [],\n            }));\n            if (!(result instanceof Api.auth.LoginToken)) {\n                throw new Error('Unexpected');\n            }\n\n            const { token, expires } = result;\n\n            await Promise.race([\n                authParams.qrCode({ token, expires }),\n                sleep(QR_CODE_TIMEOUT),\n            ]);\n        }\n    })();\n\n    const updatePromise = new Promise<void>((resolve) => {\n        client.addEventHandler((update: Api.TypeUpdate) => {\n            if (update instanceof Api.UpdateLoginToken) {\n                resolve();\n            }\n        }, { build: (update: object) => update });\n    });\n\n    try {\n        // Either we receive an update that QR is successfully scanned,\n        // or we receive a rejection caused by user going back to the regular auth form\n        await Promise.race([updatePromise, inputPromise]);\n    } catch (err: any) {\n        if (err.message === 'RESTART_AUTH') {\n            return await signInUser(client, apiCredentials, authParams);\n        }\n\n        throw err;\n    } finally {\n        isScanningComplete = true;\n    }\n\n    try {\n        const result2 = await client.invoke(new Api.auth.ExportLoginToken({\n            apiId: Number(process.env.TELEGRAM_T_API_ID),\n            apiHash: process.env.TELEGRAM_T_API_HASH,\n            exceptIds: [],\n        }));\n\n        if (result2 instanceof Api.auth.LoginTokenSuccess && result2.authorization instanceof Api.auth.Authorization) {\n            return result2.authorization.user;\n        } else if (result2 instanceof Api.auth.LoginTokenMigrateTo) {\n            await client._switchDC(result2.dcId);\n            const migratedResult = await client.invoke(new Api.auth.ImportLoginToken({\n                token: result2.token,\n            }));\n\n            if (migratedResult instanceof Api.auth.LoginTokenSuccess\n                && migratedResult.authorization instanceof Api.auth.Authorization) {\n                return migratedResult.authorization.user;\n            }\n        }\n    } catch (err: any) {\n        if (err.message === 'SESSION_PASSWORD_NEEDED') {\n            return signInWithPassword(client, apiCredentials, authParams);\n        }\n\n        throw err;\n    }\n\n    // This is a workaround for TypeScript (never actually reached)\n    // eslint-disable-next-line @typescript-eslint/no-throw-literal\n    throw undefined;\n}\n\nasync function sendCode(\n    client: TelegramClient, apiCredentials: ApiCredentials, phoneNumber: string, forceSMS = false,\n): Promise<{\n        phoneCodeHash: string;\n        isCodeViaApp: boolean;\n    }> {\n    try {\n        const { apiId, apiHash } = apiCredentials;\n        const sendResult = await client.invoke(new Api.auth.SendCode({\n            phoneNumber,\n            apiId,\n            apiHash,\n            settings: new Api.CodeSettings(),\n        }));\n\n        if (!(sendResult instanceof Api.auth.SentCode)) {\n            throw Error('Unexpected SentCodeSuccess');\n        }\n\n        // If we already sent a SMS, do not resend the phoneCode (hash may be empty)\n        if (!forceSMS || (sendResult.type instanceof Api.auth.SentCodeTypeSms)) {\n            return {\n                phoneCodeHash: sendResult.phoneCodeHash,\n                isCodeViaApp: sendResult.type instanceof Api.auth.SentCodeTypeApp,\n            };\n        }\n\n        const resendResult = await client.invoke(new Api.auth.ResendCode({\n            phoneNumber,\n            phoneCodeHash: sendResult.phoneCodeHash,\n        }));\n\n        if (!(resendResult instanceof Api.auth.SentCode)) {\n            throw Error('Unexpected SentCodeSuccess');\n        }\n\n        return {\n            phoneCodeHash: resendResult.phoneCodeHash,\n            isCodeViaApp: resendResult.type instanceof Api.auth.SentCodeTypeApp,\n        };\n    } catch (err: any) {\n        if (err.message === 'AUTH_RESTART') {\n            return sendCode(client, apiCredentials, phoneNumber, forceSMS);\n        } else {\n            throw err;\n        }\n    }\n}\n\nasync function signInWithPassword(\n    client: TelegramClient, apiCredentials: ApiCredentials, authParams: UserAuthParams, noReset = false,\n): Promise<Api.TypeUser> {\n    // eslint-disable-next-line no-constant-condition\n    while (1) {\n        try {\n            const passwordSrpResult = await client.invoke(new Api.account.GetPassword());\n            const password = await authParams.password(passwordSrpResult.hint, noReset);\n            if (!password) {\n                throw new Error('Password is empty');\n            }\n\n            const passwordSrpCheck = await computePasswordSrpCheck(passwordSrpResult, password);\n            const { user } = await client.invoke(new Api.auth.CheckPassword({\n                password: passwordSrpCheck,\n            })) as Api.auth.Authorization;\n\n            return user;\n        } catch (err: any) {\n            authParams.onError(err);\n        }\n    }\n\n    // eslint-disable-next-line no-unreachable\n    return undefined!; // Never reached (TypeScript fix)\n}\n\nasync function signInBot(client: TelegramClient, apiCredentials: ApiCredentials, authParams: BotAuthParams) {\n    const { apiId, apiHash } = apiCredentials;\n    const { botAuthToken } = authParams;\n\n    const { user } = await client.invoke(new Api.auth.ImportBotAuthorization({\n        apiId,\n        apiHash,\n        botAuthToken,\n    })) as Api.auth.Authorization;\n\n    return user;\n}\n","import BigInt from 'big-integer';\nimport Api from '../tl/api';\nimport type TelegramClient from './TelegramClient';\nimport { sleep } from '../Helpers';\nimport { getDownloadPartSize } from '../Utils';\nimport errors from '../errors';\nimport Deferred from '../../../util/Deferred';\nimport { Foreman } from '../../../util/foreman';\n\ninterface OnProgress {\n    isCanceled?: boolean;\n    acceptsBuffer?: boolean;\n\n    (\n        progress: number, // Float between 0 and 1.\n        ...args: any[]\n    ): void;\n}\n\nexport interface DownloadFileParams {\n    dcId: number;\n    fileSize: number;\n    workers?: number;\n    partSizeKb?: number;\n    start?: number;\n    end?: number;\n    progressCallback?: OnProgress;\n}\n\n// Chunk sizes for `upload.getFile` must be multiple of the smallest size\nconst MIN_CHUNK_SIZE = 4096;\nconst DEFAULT_CHUNK_SIZE = 64; // kb\nconst ONE_MB = 1024 * 1024;\nconst DISCONNECT_SLEEP = 1000;\n\n// when the sender requests hangs for 60 second we will reimport\nconst SENDER_TIMEOUT = 60 * 1000;\n// Telegram may have server issues so we try several times\nconst SENDER_RETRIES = 5;\n\nclass FileView {\n    private type: 'memory' | 'opfs';\n\n    private size?: number;\n\n    private buffer?: Buffer;\n\n    private largeFile?: FileSystemFileHandle;\n\n    private largeFileAccessHandle?: FileSystemSyncAccessHandle;\n\n    constructor(size?: number) {\n        this.size = size;\n        // eslint-disable-next-line no-restricted-globals\n        this.type = (size && size > (self as any).maxBufferSize) ? 'opfs' : 'memory';\n    }\n\n    async init() {\n        if (this.type === 'opfs') {\n            if (!FileSystemFileHandle?.prototype.createSyncAccessHandle) {\n                throw new Error('`createSyncAccessHandle` is not available. Cannot download files larger than 2GB.');\n            }\n            const directory = await navigator.storage.getDirectory();\n            const downloadsFolder = await directory.getDirectoryHandle('downloads', { create: true });\n            this.largeFile = await downloadsFolder.getFileHandle(Math.random().toString(), { create: true });\n            this.largeFileAccessHandle = await this.largeFile.createSyncAccessHandle();\n        } else {\n            this.buffer = this.size ? Buffer.alloc(this.size) : Buffer.alloc(0);\n        }\n    }\n\n    write(data: Uint8Array, offset: number) {\n        if (this.type === 'opfs') {\n            this.largeFileAccessHandle!.write(data, { at: offset });\n        } else if (this.size) {\n            for (let i = 0; i < data.length; i++) {\n                if (offset + i >= this.buffer!.length) return;\n                this.buffer!.writeUInt8(data[i], offset + i);\n            }\n        } else {\n            this.buffer = Buffer.concat([this.buffer!, data]);\n        }\n    }\n\n    getData(): Promise<Buffer | File> {\n        if (this.type === 'opfs') {\n            return this.largeFile!.getFile();\n        } else {\n            return Promise.resolve(this.buffer!);\n        }\n    }\n}\n\nexport async function downloadFile(\n    client: TelegramClient,\n    inputLocation: Api.InputFileLocation,\n    fileParams: DownloadFileParams,\n) {\n    const { dcId } = fileParams;\n    for (let i = 0; i < SENDER_RETRIES; i++) {\n        try {\n            return await downloadFile2(client, inputLocation, fileParams);\n        } catch (err: any) {\n            if (\n                (err.message.startsWith('SESSION_REVOKED') || err.message.startsWith('CONNECTION_NOT_INITED'))\n                && i < SENDER_RETRIES - 1\n            ) {\n                await client._cleanupExportedSenders(dcId);\n            } else {\n                throw err;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nconst MAX_CONCURRENT_CONNECTIONS = 3;\nconst MAX_CONCURRENT_CONNECTIONS_PREMIUM = 6;\nconst MAX_WORKERS_PER_CONNECTION = 10;\nconst MULTIPLE_CONNECTIONS_MIN_FILE_SIZE = 10485760; // 10MB\n\nconst foremans = Array(MAX_CONCURRENT_CONNECTIONS_PREMIUM).fill(undefined)\n    .map(() => new Foreman(MAX_WORKERS_PER_CONNECTION));\n\nasync function downloadFile2(\n    client: TelegramClient,\n    inputLocation: Api.InputFileLocation,\n    fileParams: DownloadFileParams,\n) {\n    let {\n        partSizeKb, end,\n    } = fileParams;\n    const {\n        fileSize,\n    } = fileParams;\n    const isPremium = Boolean(client.isPremium);\n    const { dcId, progressCallback, start = 0 } = fileParams;\n\n    end = end && end < fileSize ? end : fileSize - 1;\n\n    if (!partSizeKb) {\n        partSizeKb = fileSize ? getDownloadPartSize(fileSize) : DEFAULT_CHUNK_SIZE;\n    }\n\n    const partSize = partSizeKb * 1024;\n    const partsCount = end ? Math.ceil((end - start) / partSize) : 1;\n    const noParallel = !end;\n    const shouldUseMultipleConnections = fileSize\n        && fileSize >= MULTIPLE_CONNECTIONS_MIN_FILE_SIZE\n        && !noParallel;\n    let deferred: Deferred | undefined;\n\n    if (partSize % MIN_CHUNK_SIZE !== 0) {\n        throw new Error(`The part size must be evenly divisible by ${MIN_CHUNK_SIZE}`);\n    }\n\n    client._log.info(`Downloading file in chunks of ${partSize} bytes`);\n\n    const fileView = new FileView(end - start + 1);\n    const promises: Promise<any>[] = [];\n    let offset = start;\n    // Pick the least busy foreman\n    // For some reason, fresh connections give out a higher speed for the first couple of seconds\n    // I have no idea why, but this may speed up the download of small files\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n    // Used for files with unknown size and for manual cancellations\n    let hasEnded = false;\n\n    let progress = 0;\n    if (progressCallback) {\n        progressCallback(progress);\n    }\n\n    // Allocate memory\n    await fileView.init();\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let limit = partSize;\n        let isPrecise = false;\n\n        if (Math.floor(offset / ONE_MB) !== Math.floor((offset + limit - 1) / ONE_MB)) {\n            limit = ONE_MB - (offset % ONE_MB);\n            isPrecise = true;\n        }\n\n        // Use only first connection for avatars, because no size is known and we don't want to\n        // download empty parts using all connections at once\n        const senderIndex = !shouldUseMultipleConnections ? 0 : currentForemanIndex % (\n            isPremium ? MAX_CONCURRENT_CONNECTIONS_PREMIUM : MAX_CONCURRENT_CONNECTIONS\n        );\n\n        await foremans[senderIndex].requestWorker();\n\n        if (deferred) await deferred.promise;\n\n        if (noParallel) deferred = new Deferred();\n\n        if (hasEnded) {\n            foremans[senderIndex].releaseWorker();\n            break;\n        }\n\n        // eslint-disable-next-line no-loop-func, @typescript-eslint/no-loop-func\n        promises.push((async (offsetMemo: number) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                let sender;\n                try {\n                    sender = await client.getSender(dcId, senderIndex, isPremium);\n                    // sometimes a session is revoked and will cause this to hang.\n                    const result = await Promise.race([\n                        sender.send(new Api.upload.GetFile({\n                            location: inputLocation,\n                            offset: BigInt(offsetMemo),\n                            limit,\n                            precise: isPrecise || undefined,\n                        })),\n                        sleep(SENDER_TIMEOUT).then(() => {\n                            // If we're on the main DC we just cancel the download and let the user retry later\n                            if (dcId === client.session.dcId) {\n                                return Promise.reject(new Error('USER_CANCELED'));\n                            } else {\n                                return Promise.reject(new Error('SESSION_REVOKED'));\n                            }\n                        }),\n                    ]);\n\n                    if (progressCallback) {\n                        if (progressCallback.isCanceled) {\n                            throw new Error('USER_CANCELED');\n                        }\n\n                        progress += (1 / partsCount);\n                        progressCallback(progress);\n                    }\n\n                    if (!end && (result.bytes.length < limit)) {\n                        hasEnded = true;\n                    }\n\n                    foremans[senderIndex].releaseWorker();\n                    if (deferred) deferred.resolve();\n\n                    fileView.write(result.bytes, offsetMemo - start);\n\n                    return;\n                } catch (err) {\n                    if (sender && !sender.isConnected()) {\n                        await sleep(DISCONNECT_SLEEP);\n                        continue;\n                    } else if (err instanceof errors.FloodWaitError) {\n                        await sleep(err.seconds * 1000);\n                        continue;\n                    }\n\n                    foremans[senderIndex].releaseWorker();\n                    if (deferred) deferred.resolve();\n\n                    hasEnded = true;\n                    throw err;\n                }\n            }\n        })(offset));\n\n        offset += limit;\n        currentForemanIndex++;\n\n        if (end && (offset > end)) {\n            break;\n        }\n    }\n    await Promise.all(promises);\n    return fileView.getData();\n}\n","// eslint-disable-next-line import/no-named-default\nimport {default as Api} from '../tl/api';\n\nimport type TelegramClient from './TelegramClient';\nimport {generateRandomBytes, readBigIntFromBuffer, sleep} from '../Helpers';\nimport {getUploadPartSize} from '../Utils';\nimport errors from '../errors';\nimport {Foreman} from '../../../util/foreman';\nimport {DownloadRes, UploadReq} from \"../../ptp/protobuf/PTPFile\";\nimport {CLOUD_MESSAGE_API, DEBUG, MEDIA_CACHE_NAME_WAI} from \"../../../config\";\nimport localDb from \"../../../api/gramjs/localDb\";\nimport Account from \"../../../worker/share/Account\";\nimport * as cacheApi from '../../../util/cacheApi';\nimport {fileToBuffer} from \"../../../worker/share/utils/utils\";\nimport {ERR, FileInfo_Type} from \"../../ptp/protobuf/PTPCommon/types\";\n\ninterface OnProgress {\n    isCanceled?: boolean;\n\n    // Float between 0 and 1.\n    (progress: number): void;\n}\n\nexport interface UploadFileParams {\n    file: File;\n    workers?: number;\n    onProgress?: OnProgress;\n}\n\nconst KB_TO_BYTES = 1024;\nconst LARGE_FILE_THRESHOLD = 10 * 1024 * 1024;\nconst DISCONNECT_SLEEP = 1000;\nconst MAX_CONCURRENT_CONNECTIONS = 3;\nconst MAX_CONCURRENT_CONNECTIONS_PREMIUM = 6;\nconst MAX_WORKERS_PER_CONNECTION = 10;\n\nconst foremans = Array(MAX_CONCURRENT_CONNECTIONS_PREMIUM).fill(undefined)\n    .map(() => new Foreman(MAX_WORKERS_PER_CONNECTION));\n\nexport const getFileId = ()=>{\n    let fileId1 = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    return fileId1.toString()\n        .replace(\"-\", \"\")\n        .replace(\"n\", \"\")\n}\n\nexport async function uploadFileV1(\n    fileParams: UploadFileParams,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n    const { name, size } = file;\n    let fileIdStr = getFileId();\n    const fileId = Number(fileIdStr)\n    fileIdStr = String(fileId)\n    localDb.cache[fileIdStr] = file;\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n    const buf = await fileToBuffer(file)\n    const cipher = Account.localEncrypt(Buffer.from(buf));\n    const body = new DownloadRes({\n        file:{\n            id:fileIdStr,\n            part:0,\n            part_total:1,\n            buf:cipher,\n            size,\n            type:file.type\n        },\n        err:ERR.NO_ERROR\n    }).pack().getPbData()\n\n    const blob = new Blob([Buffer.from(body)]);\n    await cacheApi.save(MEDIA_CACHE_NAME_WAI, fileIdStr, blob);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n\n\nexport async function uploadFileCache(\n    file: FileInfo_Type,\n) {\n    const { buf, id } = file;\n    const size = buf.length\n    const fileIdStr = id;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % MAX_CONCURRENT_CONNECTIONS_PREMIUM;\n        await foremans[senderIndex].requestWorker();\n        const blobSlice = buf.subarray(i * partSize, (i + 1) * partSize);\n        promises.push((async (jMemo: number, blobSliceMemo: Buffer) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                try {\n                    if(CLOUD_MESSAGE_API && Account.getCurrentAccount()?.getSession()){\n                        if(DEBUG){\n                            console.log(\"uploadProfilePhoto\",fileIdStr,jMemo,partCount)\n                        }\n                        const fileInfo = {\n                            id:fileIdStr,\n                            size:file.size,\n                            type:file.type,\n                            part:jMemo+1,\n                            part_total:partCount,\n                            buf:blobSliceMemo\n                        }\n                        const uploadReq = new UploadReq({file:fileInfo})\n                        const body = Buffer.from(uploadReq.pack().getPbData());\n                        await fetch(`${CLOUD_MESSAGE_API}/proto`,{\n                            method: 'POST',\n                            body,\n                            headers:{\n                                Authorization: `Bearer ${Account.getCurrentAccount()?.getSession()}`,\n                            }\n                        })\n                    }\n                } catch (err) {\n                    foremans[senderIndex].releaseWorker();\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n    await Promise.all(promises);\n}\n\n\nexport async function uploadFile(\n    client: TelegramClient,\n    fileParams: UploadFileParams,\n): Promise<Api.InputFile | Api.InputFileBig> {\n    const { file, onProgress } = fileParams;\n\n    const isPremium = Boolean(client.isPremium);\n\n    const { name, size } = file;\n    const fileId = readBigIntFromBuffer(generateRandomBytes(8), true, true);\n    const isLarge = size > LARGE_FILE_THRESHOLD;\n\n    const partSize = getUploadPartSize(size) * KB_TO_BYTES;\n    const partCount = Math.floor((size + partSize - 1) / partSize);\n\n    // Pick the least busy foreman\n    // For some reason, fresh connections give out a higher speed for the first couple of seconds\n    // I have no idea why, but this may speed up the download of small files\n    const activeCounts = foremans.map(({ activeWorkers }) => activeWorkers);\n    let currentForemanIndex = activeCounts.indexOf(Math.min(...activeCounts));\n\n    let progress = 0;\n    if (onProgress) {\n        onProgress(progress);\n    }\n\n    const promises: Promise<any>[] = [];\n\n    for (let i = 0; i < partCount; i++) {\n        const senderIndex = currentForemanIndex % (\n            isPremium ? MAX_CONCURRENT_CONNECTIONS_PREMIUM : MAX_CONCURRENT_CONNECTIONS\n        );\n\n        await foremans[senderIndex].requestWorker();\n\n        if (onProgress?.isCanceled) {\n            foremans[senderIndex].releaseWorker();\n            break;\n        }\n\n        const blobSlice = file.slice(i * partSize, (i + 1) * partSize);\n        // eslint-disable-next-line no-loop-func, @typescript-eslint/no-loop-func\n        promises.push((async (jMemo: number, blobSliceMemo: Blob) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                let sender;\n                try {\n                    // We always upload from the DC we are in\n                    sender = await client.getSender(client.session.dcId, senderIndex, isPremium);\n                    const partBytes = await blobSliceMemo.arrayBuffer();\n                    await sender.send(\n                        isLarge\n                            ? new Api.upload.SaveBigFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                fileTotalParts: partCount,\n                                bytes: Buffer.from(partBytes),\n                            })\n                            : new Api.upload.SaveFilePart({\n                                fileId,\n                                filePart: jMemo,\n                                bytes: Buffer.from(partBytes),\n                            }),\n                    );\n                } catch (err) {\n                    if (sender && !sender.isConnected()) {\n                        await sleep(DISCONNECT_SLEEP);\n                        continue;\n                    } else if (err instanceof errors.FloodWaitError) {\n                        await sleep(err.seconds * 1000);\n                        continue;\n                    }\n                    foremans[senderIndex].releaseWorker();\n\n                    throw err;\n                }\n\n                foremans[senderIndex].releaseWorker();\n\n                if (onProgress) {\n                    if (onProgress.isCanceled) {\n                        throw new Error('USER_CANCELED');\n                    }\n\n                    progress += (1 / partCount);\n                    onProgress(progress);\n                }\n                break;\n            }\n        })(i, blobSlice));\n\n        currentForemanIndex++;\n    }\n\n    await Promise.all(promises);\n\n    return isLarge\n        ? new Api.InputFileBig({\n            id: fileId,\n            parts: partCount,\n            name,\n        })\n        : new Api.InputFile({\n            id: fileId,\n            parts: partCount,\n            name,\n            md5Checksum: '', // This is not a \"flag\", so not sure if we can make it optional.\n        });\n}\n","const {\n    sha1,\n    toSignedLittleBuffer,\n    readBufferFromBigInt,\n    readBigIntFromBuffer,\n} = require('../Helpers');\nconst BinaryReader = require('../extensions/BinaryReader');\nconst { sleep } = require('../Helpers');\n\nclass AuthKey {\n    constructor(value, hash) {\n        if (!hash || !value) {\n            return;\n        }\n        this._key = value;\n        this._hash = hash;\n        const reader = new BinaryReader(hash);\n        this.auxHash = reader.readLong(false);\n        reader.read(4);\n        this.keyId = reader.readLong(false);\n    }\n\n    async setKey(value) {\n        if (!value) {\n            this._key = undefined;\n            this.auxHash = undefined;\n            this.keyId = undefined;\n            this._hash = undefined;\n            return;\n        }\n        if (value instanceof AuthKey) {\n            this._key = value._key;\n            this.auxHash = value.auxHash;\n            this.keyId = value.keyId;\n            this._hash = value._hash;\n            return;\n        }\n        this._key = value;\n        this._hash = await sha1(this._key);\n        const reader = new BinaryReader(this._hash);\n        this.auxHash = reader.readLong(false);\n        reader.read(4);\n        this.keyId = reader.readLong(false);\n    }\n\n    async waitForKey() {\n        while (!this.keyId) {\n            await sleep(20);\n        }\n    }\n\n    getKey() {\n        return this._key;\n    }\n\n    // TODO : This doesn't really fit here, it's only used in authentication\n\n    /**\n     * Calculates the new nonce hash based on the current class fields' values\n     * @param newNonce\n     * @param number\n     * @returns {bigint}\n     */\n    async calcNewNonceHash(newNonce, number) {\n        newNonce = toSignedLittleBuffer(newNonce, 32);\n        const n = Buffer.alloc(1);\n        n.writeUInt8(number, 0);\n        const data = Buffer.concat([newNonce,\n            Buffer.concat([n, readBufferFromBigInt(this.auxHash, 8, true)])]);\n\n        // Calculates the message key from the given data\n        const shaData = (await sha1(data)).slice(4, 20);\n        return readBigIntFromBuffer(shaData, true, true);\n    }\n\n    equals(other) {\n        return other instanceof this.constructor && this._key && other.getKey() && other.getKey()\n            .equals(this._key);\n    }\n}\n\nmodule.exports = AuthKey;\n","const crypto = require('./crypto');\n\nclass CTR {\n    constructor(key, iv) {\n        if (!Buffer.isBuffer(key) || !Buffer.isBuffer(iv) || iv.length !== 16) {\n            throw new Error('Key and iv need to be a buffer');\n        }\n\n        this.cipher = crypto.createCipheriv('AES-256-CTR', key, iv);\n    }\n\n    encrypt(data) {\n        return Buffer.from(this.cipher.update(data));\n    }\n}\n\nmodule.exports = CTR;\n","const BigInt = require('big-integer');\nconst { modExp } = require('../Helpers');\n\nclass Factorizator {\n    /**\n     * Calculates the greatest common divisor\n     * @param a {BigInteger}\n     * @param b {BigInteger}\n     * @returns {BigInteger}\n     */\n    static gcd(a, b) {\n        while (b.neq(BigInt.zero)) {\n            const temp = b;\n            b = a.remainder(b);\n            a = temp;\n        }\n        return a;\n    }\n\n    /**\n     * Factorizes the given number and returns both the divisor and the number divided by the divisor\n     * @param pq {BigInteger}\n     * @returns {{p: *, q: *}}\n     */\n    static factorize(pq) {\n        if (pq.remainder(2)\n            .equals(BigInt.zero)) {\n            return {\n                p: BigInt(2),\n                q: pq.divide(BigInt(2)),\n            };\n        }\n        let y = BigInt.randBetween(BigInt(1), pq.minus(1));\n        const c = BigInt.randBetween(BigInt(1), pq.minus(1));\n        const m = BigInt.randBetween(BigInt(1), pq.minus(1));\n\n        let g = BigInt.one;\n        let r = BigInt.one;\n        let q = BigInt.one;\n        let x = BigInt.zero;\n        let ys = BigInt.zero;\n        let k;\n\n        while (g.eq(BigInt.one)) {\n            x = y;\n            for (let i = 0; BigInt(i)\n                .lesser(r); i++) {\n                y = (modExp(y, BigInt(2), pq)).add(c)\n                    .remainder(pq);\n            }\n            k = BigInt.zero;\n\n            while (k.lesser(r) && g.eq(BigInt.one)) {\n                ys = y;\n                const condition = BigInt.min(m, r.minus(k));\n                for (let i = 0; BigInt(i)\n                    .lesser(condition); i++) {\n                    y = (modExp(y, BigInt(2), pq)).add(c)\n                        .remainder(pq);\n                    q = q.multiply(x.minus(y)\n                        .abs())\n                        .remainder(pq);\n                }\n                g = Factorizator.gcd(q, pq);\n                k = k.add(m);\n            }\n\n            r = r.multiply(2);\n        }\n\n        if (g.eq(pq)) {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                ys = (modExp(ys, BigInt(2), pq)).add(c)\n                    .remainder(pq);\n                g = Factorizator.gcd(x.minus(ys)\n                    .abs(), pq);\n\n                if (g.greater(1)) {\n                    break;\n                }\n            }\n        }\n        const p = g;\n        q = pq.divide(g);\n        return p < q ? {\n            p,\n            q,\n        } : {\n            p: q,\n            q: p,\n        };\n    }\n}\n\nmodule.exports = Factorizator;\n","const { IGE: AESIGE } = require('@cryptography/aes');\nconst Helpers = require('../Helpers');\n\nclass IGENEW {\n    constructor(key, iv) {\n        this.ige = new AESIGE(key, iv);\n    }\n\n    /**\n     * Decrypts the given text in 16-bytes blocks by using the given key and 32-bytes initialization vector\n     * @param cipherText {Buffer}\n     * @returns {Buffer}\n     */\n    decryptIge(cipherText) {\n        return Helpers.convertToLittle(this.ige.decrypt(cipherText));\n    }\n\n    /**\n     * Encrypts the given text in 16-bytes blocks by using the given key and 32-bytes initialization vector\n     * @param plainText {Buffer}\n     * @returns {Buffer}\n     */\n    encryptIge(plainText) {\n        const padding = plainText.length % 16;\n        if (padding) {\n            plainText = Buffer.concat([plainText, Helpers.generateRandomBytes(16 - padding)]);\n        }\n\n        return Helpers.convertToLittle(this.ige.encrypt(plainText));\n    }\n}\n\nmodule.exports = IGENEW;\n","/**\n * Converts a Telegram's RPC Error to a Python error.\n * @param rpcError the RPCError instance\n * @param request the request that caused this error\n * @constructor the RPCError as a Python exception that represents this error\n */\nconst { RPCError } = require('./RPCBaseErrors');\nconst { rpcErrorRe } = require('./RPCErrorList');\n\nfunction RPCMessageToError(rpcError, request) {\n    for (const [msgRegex, Cls] of rpcErrorRe) {\n        const m = rpcError.errorMessage.match(msgRegex);\n        if (m) {\n            const capture = m.length === 2 ? parseInt(m[1], 10) : undefined;\n            return new Cls({\n                request,\n                capture,\n            });\n        }\n    }\n\n    return new RPCError(rpcError.errorMessage, request);\n}\n\nconst Common = require('./Common');\nconst RPCBaseErrors = require('./RPCBaseErrors');\nconst RPCErrorList = require('./RPCErrorList');\n\nmodule.exports = {\n    RPCMessageToError,\n    ...Common,\n    ...RPCBaseErrors,\n    ...RPCErrorList,\n};\n","const { EventBuilder } = require('./common');\n\nclass Raw extends EventBuilder {\n    constructor(args = {\n        types: undefined,\n        func: undefined,\n    }) {\n        super();\n        if (!args.types) {\n            this.types = true;\n        } else {\n            this.types = args.types;\n        }\n    }\n\n    build(update) {\n        return update;\n    }\n}\n\nmodule.exports = Raw;\n","class EventBuilder {\n    constructor(args = {\n        chats: undefined,\n        blacklistChats: undefined,\n        func: undefined,\n    }) {\n        this.chats = args.chats;\n        this.blacklistChats = Boolean(args.blacklistChats);\n        this.resolved = false;\n        this.func = args.func;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    build(update) {\n\n    }\n}\n\nmodule.exports = {\n    EventBuilder,\n};\n","const NewMessage = require('./NewMessage');\nconst Raw = require('./Raw');\n\nclass StopPropagation extends Error {\n\n}\n\nmodule.exports = {\n    NewMessage,\n    StopPropagation,\n    Raw,\n};\n","class AsyncQueue {\n    constructor() {\n        this._queue = [];\n        this.canGet = new Promise((resolve) => {\n            this.resolveGet = resolve;\n        });\n        this.canPush = true;\n    }\n\n    async push(value) {\n        await this.canPush;\n        this._queue.push(value);\n        this.resolveGet(true);\n        this.canPush = new Promise((resolve) => {\n            this.resolvePush = resolve;\n        });\n    }\n\n    async pop() {\n        await this.canGet;\n        const returned = this._queue.pop();\n        this.resolvePush(true);\n        this.canGet = new Promise((resolve) => {\n            this.resolveGet = resolve;\n        });\n        return returned;\n    }\n}\n\nmodule.exports = AsyncQueue;\n","const { TypeNotFoundError } = require('../errors/Common');\nconst { coreObjects } = require('../tl/core');\nconst { tlobjects } = require('../tl/AllTLObjects');\nconst { readBigIntFromBuffer } = require('../Helpers');\n\nclass BinaryReader {\n    /**\n     * Small utility class to read binary data.\n     * @param data {Buffer}\n     */\n    constructor(data) {\n        this.stream = data;\n        this._last = undefined;\n        this.offset = 0;\n    }\n\n    // region Reading\n\n    // \"All numbers are written as little endian.\"\n    // https://core.telegram.org/mtproto\n    /**\n     * Reads a single byte value.\n     */\n    readByte() {\n        return this.read(1)[0];\n    }\n\n    /**\n     * Reads an integer (4 bytes or 32 bits) value.\n     * @param signed {Boolean}\n     */\n    readInt(signed = true) {\n        let res;\n        if (signed) {\n            res = this.stream.readInt32LE(this.offset);\n        } else {\n            res = this.stream.readUInt32LE(this.offset);\n        }\n        this.offset += 4;\n        return res;\n    }\n\n    /**\n     * Reads a long integer (8 bytes or 64 bits) value.\n     * @param signed\n     * @returns {BigInteger}\n     */\n    readLong(signed = true) {\n        return this.readLargeInt(64, signed);\n    }\n\n    /**\n     * Reads a real floating point (4 bytes) value.\n     * @returns {number}\n     */\n    readFloat() {\n        return this.read(4)\n            .readFloatLE(0);\n    }\n\n    /**\n     * Reads a real floating point (8 bytes) value.\n     * @returns {BigInteger}\n     */\n    readDouble() {\n        // was this a bug ? it should have been <d\n        return this.read(8)\n            .readDoubleLE(0);\n    }\n\n    /**\n     * Reads a n-bits long integer value.\n     * @param bits\n     * @param signed {Boolean}\n     */\n    readLargeInt(bits, signed = true) {\n        const buffer = this.read(Math.floor(bits / 8));\n        return readBigIntFromBuffer(buffer, true, signed);\n    }\n\n    /**\n     * Read the given amount of bytes, or -1 to read all remaining.\n     * @param length {number}\n     */\n    read(length = -1) {\n        if (length === -1) {\n            length = this.stream.length - this.offset;\n        }\n        const result = this.stream.slice(this.offset, this.offset + length);\n        this.offset += length;\n        if (result.length !== length) {\n            throw Error(\n                `No more data left to read (need ${length}, got ${result.length}: ${result}); last read ${this._last}`,\n            );\n        }\n        this._last = result;\n        return result;\n    }\n\n    /**\n     * Gets the byte array representing the current buffer as a whole.\n     * @returns {Buffer}\n     */\n    getBuffer() {\n        return this.stream;\n    }\n\n    // endregion\n\n    // region Telegram custom reading\n    /**\n     * Reads a Telegram-encoded byte array, without the need of\n     * specifying its length.\n     * @returns {Buffer}\n     */\n    tgReadBytes() {\n        const firstByte = this.readByte();\n        let padding;\n        let length;\n        if (firstByte === 254) {\n            length = this.readByte() | (this.readByte() << 8) | (this.readByte() << 16);\n            padding = length % 4;\n        } else {\n            length = firstByte;\n            padding = (length + 1) % 4;\n        }\n        const data = this.read(length);\n\n        if (padding > 0) {\n            padding = 4 - padding;\n            this.read(padding);\n        }\n\n        return data;\n    }\n\n    /**\n     * Reads a Telegram-encoded string.\n     * @returns {string}\n     */\n    tgReadString() {\n        return this.tgReadBytes()\n            .toString('utf-8');\n    }\n\n    /**\n     * Reads a Telegram boolean value.\n     * @returns {boolean}\n     */\n    tgReadBool() {\n        const value = this.readInt(false);\n        if (value === 0x997275b5) {\n            // boolTrue\n            return true;\n        } else if (value === 0xbc799737) {\n            // boolFalse\n            return false;\n        } else {\n            throw new Error(`Invalid boolean code ${value.toString('16')}`);\n        }\n    }\n\n    /**\n     * Reads and converts Unix time (used by Telegram)\n     * into a Javascript {Date} object.\n     * @returns {Date}\n     */\n    tgReadDate() {\n        const value = this.readInt();\n        return new Date(value * 1000);\n    }\n\n    /**\n     * Reads a Telegram object.\n     */\n    tgReadObject() {\n        const constructorId = this.readInt(false);\n        let clazz = tlobjects[constructorId];\n        if (clazz === undefined) {\n            /**\n             * The class was None, but there's still a\n             * chance of it being a manually parsed value like bool!\n             */\n            const value = constructorId;\n            if (value === 0x997275b5) {\n                // boolTrue\n                return true;\n            } else if (value === 0xbc799737) {\n                // boolFalse\n                return false;\n            } else if (value === 0x1cb5c415) {\n                // Vector\n                const temp = [];\n                const length = this.readInt();\n                for (let i = 0; i < length; i++) {\n                    temp.push(this.tgReadObject());\n                }\n                return temp;\n            }\n\n            clazz = coreObjects[constructorId];\n\n            if (clazz === undefined) {\n                // If there was still no luck, give up\n                this.seek(-4); // Go back\n                const pos = this.tellPosition();\n                const error = new TypeNotFoundError(constructorId, this.read());\n                this.setPosition(pos);\n                throw error;\n            }\n        }\n        return clazz.fromReader(this);\n    }\n\n    /**\n     * Reads a vector (a list) of Telegram objects.\n     * @returns {[Buffer]}\n     */\n    tgReadVector() {\n        if (this.readInt(false) !== 0x1cb5c415) {\n            throw new Error('Invalid constructor code, vector was expected');\n        }\n        const count = this.readInt();\n        const temp = [];\n        for (let i = 0; i < count; i++) {\n            temp.push(this.tgReadObject());\n        }\n        return temp;\n    }\n\n    // endregion\n\n    /**\n     * Closes the reader.\n     */\n    close() {\n        this.stream = undefined;\n    }\n\n    // region Position related\n\n    /**\n     * Tells the current position on the stream.\n     * @returns {number}\n     */\n    tellPosition() {\n        return this.offset;\n    }\n\n    /**\n     * Sets the current position on the stream.\n     * @param position\n     */\n    setPosition(position) {\n        this.offset = position;\n    }\n\n    /**\n     * Seeks the stream position given an offset from the current position.\n     * The offset may be negative.\n     * @param offset\n     */\n    seek(offset) {\n        this.offset += offset;\n    }\n\n    // endregion\n}\n\nmodule.exports = BinaryReader;\n","class BinaryWriter {\n    constructor(stream) {\n        this._stream = stream;\n    }\n\n    write(buffer) {\n        this._stream = Buffer.concat([this._stream, buffer]);\n    }\n\n    getValue() {\n        return this._stream;\n    }\n}\n\nmodule.exports = BinaryWriter;\n","// eslint-disable-next-line @typescript-eslint/naming-convention\nlet _level;\n\nclass Logger {\n    static levels = ['error', 'warn', 'info', 'debug'];\n\n    constructor(level) {\n        if (!_level) {\n            _level = level || 'debug';\n        }\n\n        this.isBrowser = typeof process === 'undefined'\n            || process.type === 'renderer'\n            || process.browser === true\n            || process.__nwjs;\n        if (!this.isBrowser) {\n            this.colors = {\n                start: '\\x1b[2m',\n                warn: '\\x1b[35m',\n                info: '\\x1b[33m',\n                debug: '\\x1b[36m',\n                error: '\\x1b[31m',\n                end: '\\x1b[0m',\n            };\n        } else {\n            this.colors = {\n                start: '%c',\n                warn: 'color : #ff00ff',\n                info: 'color : #ffff00',\n                debug: 'color : #00ffff',\n                error: 'color : #ff0000',\n                end: '',\n            };\n        }\n        this.messageFormat = '[%t] [%l] - [%m]';\n    }\n\n    static setLevel(level) {\n        _level = level;\n    }\n\n    /**\n     *\n     * @param level {string}\n     * @returns {boolean}\n     */\n    canSend(level) {\n        return (Logger.levels.indexOf(_level) >= Logger.levels.indexOf(level));\n    }\n\n    /**\n     * @param message {string}\n     */\n    warn(message) {\n        // todo remove later\n        if (_level === 'debug') {\n            // eslint-disable-next-line no-console\n            console.error(new Error().stack);\n        }\n        this._log('warn', message, this.colors.warn);\n    }\n\n    /**\n     * @param message {string}\n     */\n    info(message) {\n        this._log('info', message, this.colors.info);\n    }\n\n    /**\n     * @param message {string}\n     */\n    debug(message) {\n        this._log('debug', message, this.colors.debug);\n    }\n\n    /**\n     * @param message {string}\n     */\n    error(message) {\n        // todo remove later\n        if (_level === 'debug') {\n            // eslint-disable-next-line no-console\n            console.error(new Error().stack);\n        }\n        this._log('error', message, this.colors.error);\n    }\n\n    format(message, level) {\n        return this.messageFormat.replace('%t', new Date().toISOString())\n            .replace('%l', level.toUpperCase())\n            .replace('%m', message);\n    }\n\n    /**\n     * @param level {string}\n     * @param message {string}\n     * @param color {string}\n     */\n    _log(level, message, color) {\n        if (!_level) {\n            return;\n        }\n        if (this.canSend(level)) {\n            if (!this.isBrowser) {\n                // eslint-disable-next-line no-console\n                console.log(color + this.format(message, level) + this.colors.end);\n            } else {\n                // eslint-disable-next-line no-console\n                console.log(this.colors.start + this.format(message, level), color);\n            }\n        }\n    }\n}\n\nmodule.exports = Logger;\n","const MessageContainer = require('../tl/core/MessageContainer');\nconst TLMessage = require('../tl/core/TLMessage');\nconst BinaryWriter = require('./BinaryWriter');\n\nconst USE_INVOKE_AFTER_WITH = [\n    'messages.SendMessage', 'messages.SendMedia', 'messages.SendMultiMedia',\n    'messages.ForwardMessages', 'messages.SendInlineBotResult',\n];\n\nclass MessagePacker {\n    constructor(state, logger) {\n        this._state = state;\n        this._queue = [];\n        this._pendingStates = [];\n        this._ready = new Promise(((resolve) => {\n            this.setReady = resolve;\n        }));\n        this._log = logger;\n    }\n\n    values() {\n        return this._queue;\n    }\n\n    append(state) {\n        // we need to check if there is already a request with the same name that we should send after.\n        if (state && USE_INVOKE_AFTER_WITH.includes(state.request.className)) {\n            // we now need to check if there is any request in queue already.\n            // we loop backwards since the latest request is the most recent\n            for (let i = this._queue.length - 1; i >= 0; i--) {\n                if (USE_INVOKE_AFTER_WITH.includes(this._queue[i].request.className)) {\n                    state.after = this._queue[i];\n                    break;\n                }\n            }\n        }\n\n        this._queue.push(state);\n        this.setReady(true);\n        // 1658238041=MsgsAck, we don't care about MsgsAck here because they never resolve anyway.\n        if (state && state.request.CONSTRUCTOR_ID !== 1658238041) {\n            this._pendingStates.push(state);\n            state.promise\n                // Using finally causes triggering `unhandledrejection` event\n                .catch(() => {\n                })\n                .finally(() => {\n                    this._pendingStates = this._pendingStates.filter((s) => s !== state);\n                });\n        }\n    }\n\n    extend(states) {\n        for (const state of states) {\n            this._queue.push(state);\n        }\n        this.setReady(true);\n    }\n\n    async get() {\n        if (!this._queue.length) {\n            this._ready = new Promise(((resolve) => {\n                this.setReady = resolve;\n            }));\n            await this._ready;\n        }\n        if (!this._queue[this._queue.length - 1]) {\n            this._queue = [];\n            return undefined;\n        }\n        let data;\n        let buffer = new BinaryWriter(Buffer.alloc(0));\n\n        const batch = [];\n        let size = 0;\n\n        while (this._queue.length && batch.length <= MessageContainer.MAXIMUM_LENGTH) {\n            const state = this._queue.shift();\n            size += state.data.length + TLMessage.SIZE_OVERHEAD;\n            if (size <= MessageContainer.MAXIMUM_SIZE) {\n                let afterId;\n                if (state.after) {\n                    afterId = state.after.msgId;\n                }\n                state.msgId = await this._state.writeDataAsMessage(\n                    buffer, state.data, state.request.classType === 'request', afterId,\n                );\n                this._log.debug(`Assigned msgId = ${state.msgId} to ${state.request.className\n                || state.request.constructor.name}`);\n                batch.push(state);\n                continue;\n            }\n            if (batch.length) {\n                this._queue.unshift(state);\n                break;\n            }\n            this._log.warn(`Message payload for ${state.request.className\n            || state.request.constructor.name} is too long ${state.data.length} and cannot be sent`);\n            state.reject('Request Payload is too big');\n            size = 0;\n        }\n        if (!batch.length) {\n            return undefined;\n        }\n        if (batch.length > 1) {\n            const b = Buffer.alloc(8);\n            b.writeUInt32LE(MessageContainer.CONSTRUCTOR_ID, 0);\n            b.writeInt32LE(batch.length, 4);\n            data = Buffer.concat([b, buffer.getValue()]);\n            buffer = new BinaryWriter(Buffer.alloc(0));\n            const containerId = await this._state.writeDataAsMessage(\n                buffer, data, false,\n            );\n            for (const s of batch) {\n                s.containerId = containerId;\n            }\n        }\n\n        data = buffer.getValue();\n        return {\n            batch,\n            data,\n        };\n    }\n\n    rejectAll() {\n        this._pendingStates.forEach((requestState) => {\n            requestState.reject(new Error('Disconnect'));\n        });\n    }\n}\n\nmodule.exports = MessagePacker;\n","const { Mutex } = require('async-mutex');\n\nconst mutex = new Mutex();\n\nconst closeError = new Error('WebSocket was closed');\n\nclass PromisedWebSockets {\n    constructor(disconnectedCallback) {\n        /* CONTEST\n        this.isBrowser = typeof process === 'undefined' ||\n            process.type === 'renderer' ||\n            process.browser === true ||\n            process.__nwjs\n\n         */\n        this.client = undefined;\n        this.closed = true;\n        this.disconnectedCallback = disconnectedCallback;\n    }\n\n    async readExactly(number) {\n        let readData = Buffer.alloc(0);\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const thisTime = await this.read(number);\n            readData = Buffer.concat([readData, thisTime]);\n            number -= thisTime.length;\n            if (!number) {\n                return readData;\n            }\n        }\n    }\n\n    async read(number) {\n        if (this.closed) {\n            throw closeError;\n        }\n        await this.canRead;\n        if (this.closed) {\n            throw closeError;\n        }\n        const toReturn = this.stream.slice(0, number);\n        this.stream = this.stream.slice(number);\n        if (this.stream.length === 0) {\n            this.canRead = new Promise((resolve) => {\n                this.resolveRead = resolve;\n            });\n        }\n\n        return toReturn;\n    }\n\n    async readAll() {\n        if (this.closed || !await this.canRead) {\n            throw closeError;\n        }\n        const toReturn = this.stream;\n        this.stream = Buffer.alloc(0);\n        this.canRead = new Promise((resolve) => {\n            this.resolveRead = resolve;\n        });\n\n        return toReturn;\n    }\n\n    getWebSocketLink(ip, port, testServers, isPremium) {\n        if (port === 443) {\n            return `wss://${ip}:${port}/apiws${testServers ? '_test' : ''}${isPremium ? '_premium' : ''}`;\n        } else {\n            return `ws://${ip}:${port}/apiws${testServers ? '_test' : ''}${isPremium ? '_premium' : ''}`;\n        }\n    }\n\n    connect(port, ip, testServers = false, isPremium = false) {\n        this.stream = Buffer.alloc(0);\n        this.canRead = new Promise((resolve) => {\n            this.resolveRead = resolve;\n        });\n        this.closed = false;\n        this.website = this.getWebSocketLink(ip, port, testServers, isPremium);\n        this.client = new WebSocket(this.website, 'binary');\n        return new Promise((resolve, reject) => {\n            this.client.onopen = () => {\n                this.receive();\n                resolve(this);\n            };\n            this.client.onerror = (error) => {\n                // eslint-disable-next-line no-console\n                console.error('WebSocket error', error);\n                reject(error);\n            };\n            this.client.onclose = (event) => {\n                const { code, reason, wasClean } = event;\n                if (code !== 1000) {\n                    // eslint-disable-next-line no-console\n                    console.error(`Socket ${ip} closed. Code: ${code}, reason: ${reason}, was clean: ${wasClean}`);\n                }\n\n                this.resolveRead(false);\n                this.closed = true;\n                if (this.disconnectedCallback) {\n                    this.disconnectedCallback();\n                }\n            };\n            // CONTEST\n            // Seems to not be working, at least in a web worker\n            // eslint-disable-next-line no-restricted-globals\n            self.addEventListener('offline', async () => {\n                await this.close();\n                this.resolveRead(false);\n            });\n        });\n    }\n\n    write(data) {\n        if (this.closed) {\n            throw closeError;\n        }\n        this.client.send(data);\n    }\n\n    async close() {\n        await this.client.close();\n        this.closed = true;\n    }\n\n    receive() {\n        this.client.onmessage = async (message) => {\n            await mutex.runExclusive(async () => {\n                const data = message.data instanceof ArrayBuffer\n                    ? Buffer.from(message.data)\n                    : Buffer.from(await new Response(message.data).arrayBuffer());\n                this.stream = Buffer.concat([this.stream, data]);\n                this.resolveRead(true);\n            });\n        };\n    }\n}\n\nmodule.exports = PromisedWebSockets;\n","const Logger = require('./Logger');\nconst BinaryWriter = require('./BinaryWriter');\nconst BinaryReader = require('./BinaryReader');\nconst PromisedWebSockets = require('./PromisedWebSockets');\nconst MessagePacker = require('./MessagePacker');\nconst AsyncQueue = require('./AsyncQueue');\n\nmodule.exports = {\n    BinaryWriter,\n    BinaryReader,\n    MessagePacker,\n    AsyncQueue,\n    Logger,\n    PromisedWebSockets,\n};\n","const Api = require('./tl/api');\nconst TelegramClient = require('./client/TelegramClient');\nconst connection = require('./network');\nconst tl = require('./tl');\nconst version = require('./Version');\nconst events = require('./events');\nconst utils = require('./Utils');\nconst errors = require('./errors');\nconst sessions = require('./sessions');\nconst extensions = require('./extensions');\nconst helpers = require('./Helpers');\n\nmodule.exports = {\n    Api,\n    TelegramClient,\n    sessions,\n    connection,\n    extensions,\n    tl,\n    version,\n    events,\n    utils,\n    errors,\n    helpers,\n};\n","import bigInt from 'big-integer';\nimport {\n    generateRandomBytes,\n    modExp,\n    readBigIntFromBuffer,\n    readBufferFromBigInt,\n    sha1,\n} from '../Helpers';\n\nexport const SERVER_KEYS = [\n    {\n        fingerprint: bigInt('-3414540481677951611'),\n        n: bigInt(\n            '2937959817066933702298617714945612856538843112005886376816255642404751219133084745514657634448776440866'\n            + '1701890505066208632169112269581063774293102577308490531282748465986139880977280302242772832972539403531'\n            + '3160108704012876427630091361567343395380424193887227773571344877461690935390938502512438971889287359033'\n            + '8945177273024525306296338410881284207988753897636046529094613963869149149606209957083647645485599631919'\n            + '2747663615955633778034897140982517446405334423701359108810182097749467210509584293428076654573384828809'\n            + '574217079944388301239431309115013843331317877374435868468779972014486325557807783825502498215169806323',\n        ),\n        e: 65537,\n    },\n    {\n        fingerprint: bigInt('-5595554452916591101'),\n        n: bigInt(\n            '2534288944884041556497168959071347320689884775908477905258202659454602246385394058588521595116849196570'\n            + '8222649399180603818074200620463776135424884632162512403163793083921641631564740959529419359595852941166'\n            + '8489405859523376133330223960965841179548922160312292373029437018775884567383353986024616752250817918203'\n            + '9315375750495263623495132323782003654358104782690612092797248736680529211579223142368426126233039432475'\n            + '0785450942589751755390156647751460719351439969059949569615302809050721500330239005077889855323917509948'\n            + '255722081644689442127297605422579707142646660768825302832201908302295573257427896031830742328565032949',\n        ),\n        e: 65537,\n    },\n].reduce((acc, { fingerprint, ...keyInfo }) => {\n    acc.set(fingerprint.toString(), keyInfo);\n    return acc;\n}, new Map<string, { n: bigInt.BigInteger; e: number }>());\n\n/**\n * Encrypts the given data known the fingerprint to be used\n * in the way Telegram requires us to do so (sha1(data) + data + padding)\n\n * @param fingerprint the fingerprint of the RSA key.\n * @param data the data to be encrypted.\n * @returns {Buffer|*|undefined} the cipher text, or undefined if no key matching this fingerprint is found.\n */\nexport async function encrypt(fingerprint: bigInt.BigInteger, data: Buffer) {\n    const key = SERVER_KEYS.get(fingerprint.toString());\n    if (!key) {\n        return undefined;\n    }\n\n    // len(sha1.digest) is always 20, so we're left with 255 - 20 - x padding\n    const rand = generateRandomBytes(235 - data.length);\n\n    const toEncrypt = Buffer.concat([await sha1(data), data, rand]);\n\n    // rsa module rsa.encrypt adds 11 bits for padding which we don't want\n    // rsa module uses rsa.transform.bytes2int(to_encrypt), easier way:\n    const payload = readBigIntFromBuffer(toEncrypt, false);\n    const encrypted = modExp(payload, bigInt(key.e), key.n);\n    // rsa module uses transform.int2bytes(encrypted, keylength), easier:\n    return readBufferFromBigInt(encrypted, 256, false);\n}\n","/**\n * Executes the authentication process with the Telegram servers.\n * @param sender a connected {MTProtoPlainSender}.\n * @param log\n * @returns {Promise<{authKey: *, timeOffset: *}>}\n */\n// eslint-disable-next-line import/no-named-default\nimport { default as Api } from '../tl/api';\nimport { SecurityError } from '../errors';\n// eslint-disable-next-line import/no-named-default\nimport type { default as MTProtoPlainSender } from './MTProtoPlainSender';\nimport { SERVER_KEYS } from '../crypto/RSA';\n\nconst bigInt = require('big-integer');\nconst IGE = require('../crypto/IGE');\nconst AuthKey = require('../crypto/AuthKey');\nconst Factorizator = require('../crypto/Factorizator');\nconst Helpers = require('../Helpers');\nconst BinaryReader = require('../extensions/BinaryReader');\n\nconst RETRIES = 20;\n\nexport async function doAuthentication(sender: MTProtoPlainSender, log: any) {\n    // Step 1 sending: PQ Request, endianness doesn't matter since it's random\n    let bytes = Helpers.generateRandomBytes(16);\n\n    const nonce = Helpers.readBigIntFromBuffer(bytes, false, true);\n    const resPQ = await sender.send(new Api.ReqPqMulti({ nonce }));\n    log.debug('Starting authKey generation step 1');\n\n    if (!(resPQ instanceof Api.ResPQ)) {\n        throw new SecurityError(`Step 1 answer was ${resPQ}`);\n    }\n    if (resPQ.nonce.neq(nonce)) {\n        throw new SecurityError('Step 1 invalid nonce from server');\n    }\n    const pq = Helpers.readBigIntFromBuffer(resPQ.pq, false, true);\n    log.debug('Finished authKey generation step 1');\n    // Step 2 sending: DH Exchange\n    const { p, q } = Factorizator.factorize(pq);\n\n    const pBuffer = Helpers.getByteArray(p);\n    const qBuffer = Helpers.getByteArray(q);\n\n    bytes = Helpers.generateRandomBytes(32);\n    const newNonce = Helpers.readBigIntFromBuffer(bytes, true, true);\n    const pqInnerData = new Api.PQInnerData({\n        pq: Helpers.getByteArray(pq), // unsigned\n        p: pBuffer,\n        q: qBuffer,\n        nonce: resPQ.nonce,\n        serverNonce: resPQ.serverNonce,\n        newNonce,\n    }).getBytes();\n    if (pqInnerData.length > 144) {\n        throw new SecurityError('Step 1 invalid nonce from server');\n    }\n    let targetFingerprint;\n    let targetKey;\n    for (const fingerprint of resPQ.serverPublicKeyFingerprints) {\n        targetKey = SERVER_KEYS.get(fingerprint.toString());\n        if (targetKey !== undefined) {\n            targetFingerprint = fingerprint;\n            break;\n        }\n    }\n    if (targetFingerprint === undefined || targetKey === undefined) {\n        throw new SecurityError(\n            'Step 2 could not find a valid key for fingerprints',\n        );\n    }\n    // Value should be padded to be made 192 exactly\n    const padding = Helpers.generateRandomBytes(192 - pqInnerData.length);\n    const dataWithPadding = Buffer.concat([pqInnerData, padding]);\n    const dataPadReversed = Buffer.from(dataWithPadding).reverse();\n\n    let encryptedData;\n    for (let i = 0; i < RETRIES; i++) {\n        const tempKey = Helpers.generateRandomBytes(32);\n        const shaDigestKeyWithData = await Helpers.sha256(Buffer.concat([tempKey, dataWithPadding]));\n        const dataWithHash = Buffer.concat([dataPadReversed, shaDigestKeyWithData]);\n\n        const ige = new IGE(tempKey, Buffer.alloc(32));\n        const aesEncrypted = ige.encryptIge(dataWithHash);\n        const tempKeyXor = Helpers.bufferXor(tempKey, await Helpers.sha256(aesEncrypted));\n\n        const keyAesEncrypted = Buffer.concat([tempKeyXor, aesEncrypted]);\n        const keyAesEncryptedInt = Helpers.readBigIntFromBuffer(keyAesEncrypted, false, false);\n        if (keyAesEncryptedInt.greaterOrEquals(targetKey.n)) {\n            log.debug('Aes key greater than RSA. retrying');\n            continue;\n        }\n        const encryptedDataBuffer = Helpers.modExp(keyAesEncryptedInt, bigInt(targetKey.e), targetKey.n);\n        encryptedData = Helpers.readBufferFromBigInt(encryptedDataBuffer, 256, false, false);\n\n        break;\n    }\n    if (encryptedData === undefined) {\n        throw new SecurityError(\n            'Step 2 could create a secure encrypted key',\n        );\n    }\n    log.debug('Step 2 : Generated a secure aes encrypted data');\n\n    const serverDhParams = await sender.send(\n        new Api.ReqDHParams({\n            nonce: resPQ.nonce,\n            serverNonce: resPQ.serverNonce,\n            p: pBuffer,\n            q: qBuffer,\n            publicKeyFingerprint: targetFingerprint,\n            encryptedData,\n        }),\n    );\n\n    if (\n        !(\n            serverDhParams instanceof Api.ServerDHParamsOk\n            || serverDhParams instanceof Api.ServerDHParamsFail\n        )\n    ) {\n        throw new Error(`Step 2.1 answer was ${serverDhParams}`);\n    }\n    if (serverDhParams.nonce.neq(resPQ.nonce)) {\n        throw new SecurityError('Step 2 invalid nonce from server');\n    }\n\n    if (serverDhParams.serverNonce.neq(resPQ.serverNonce)) {\n        throw new SecurityError('Step 2 invalid server nonce from server');\n    }\n\n    if (serverDhParams instanceof Api.ServerDHParamsFail) {\n        const sh = await Helpers.sha1(\n            Helpers.toSignedLittleBuffer(newNonce, 32).slice(4, 20),\n        );\n        const nnh = Helpers.readBigIntFromBuffer(sh, true, true);\n        if (serverDhParams.newNonceHash.neq(nnh)) {\n            throw new SecurityError('Step 2 invalid DH fail nonce from server');\n        }\n    }\n    if (!(serverDhParams instanceof Api.ServerDHParamsOk)) {\n        throw new Error(`Step 2.2 answer was ${serverDhParams}`);\n    }\n    log.debug('Finished authKey generation step 2');\n    log.debug('Starting authKey generation step 3');\n\n    // Step 3 sending: Complete DH Exchange\n    const { key, iv } = await Helpers.generateKeyDataFromNonce(\n        resPQ.serverNonce,\n        newNonce,\n    );\n    if (serverDhParams.encryptedAnswer.length % 16 !== 0) {\n        // See PR#453\n        throw new SecurityError('Step 3 AES block size mismatch');\n    }\n    const ige = new IGE(key, iv);\n    const plainTextAnswer = ige.decryptIge(serverDhParams.encryptedAnswer);\n    const reader = new BinaryReader(plainTextAnswer);\n    reader.read(20); // hash sum\n    const serverDhInner = reader.tgReadObject();\n    if (!(serverDhInner instanceof Api.ServerDHInnerData)) {\n        throw new Error(`Step 3 answer was ${serverDhInner}`);\n    }\n\n    if (serverDhInner.nonce.neq(resPQ.nonce)) {\n        throw new SecurityError('Step 3 Invalid nonce in encrypted answer');\n    }\n    if (serverDhInner.serverNonce.neq(resPQ.serverNonce)) {\n        throw new SecurityError(\n            'Step 3 Invalid server nonce in encrypted answer',\n        );\n    }\n    const dhPrime = Helpers.readBigIntFromBuffer(\n        serverDhInner.dhPrime,\n        false,\n        false,\n    );\n    const ga = Helpers.readBigIntFromBuffer(serverDhInner.gA, false, false);\n    const timeOffset = serverDhInner.serverTime - Math.floor(new Date().getTime() / 1000);\n    const b = Helpers.readBigIntFromBuffer(\n        Helpers.generateRandomBytes(256),\n        false,\n        false,\n    );\n    const gb = Helpers.modExp(bigInt(serverDhInner.g), b, dhPrime);\n    const gab = Helpers.modExp(ga, b, dhPrime);\n\n    // Prepare client DH Inner Data\n    const clientDhInner = new Api.ClientDHInnerData({\n        nonce: resPQ.nonce,\n        serverNonce: resPQ.serverNonce,\n        retryId: bigInt.zero, // TODO Actual retry ID\n        gB: Helpers.getByteArray(gb, false),\n    }).getBytes();\n\n    const clientDdhInnerHashed = Buffer.concat([\n        await Helpers.sha1(clientDhInner),\n        clientDhInner,\n    ]);\n    // Encryption\n\n    const clientDhEncrypted = ige.encryptIge(clientDdhInnerHashed);\n    const dhGen = await sender.send(\n        new Api.SetClientDHParams({\n            nonce: resPQ.nonce,\n            serverNonce: resPQ.serverNonce,\n            encryptedData: clientDhEncrypted,\n        }),\n    );\n    const nonceTypes = [Api.DhGenOk, Api.DhGenRetry, Api.DhGenFail];\n    // TS being weird again.\n    const nonceTypesString = ['DhGenOk', 'DhGenRetry', 'DhGenFail'];\n    if (\n        !(\n            dhGen instanceof nonceTypes[0]\n            || dhGen instanceof nonceTypes[1]\n            || dhGen instanceof nonceTypes[2]\n        )\n    ) {\n        throw new Error(`Step 3.1 answer was ${dhGen}`);\n    }\n    const { name } = dhGen.constructor;\n    if (dhGen.nonce.neq(resPQ.nonce)) {\n        throw new SecurityError(`Step 3 invalid ${name} nonce from server`);\n    }\n    if (dhGen.serverNonce.neq(resPQ.serverNonce)) {\n        throw new SecurityError(\n            `Step 3 invalid ${name} server nonce from server`,\n        );\n    }\n    const authKey = new AuthKey();\n    await authKey.setKey(Helpers.getByteArray(gab));\n\n    const nonceNumber = 1 + nonceTypesString.indexOf(dhGen.className);\n\n    const newNonceHash = await authKey.calcNewNonceHash(newNonce, nonceNumber);\n    // @ts-ignore\n    const dhHash = dhGen[`newNonceHash${nonceNumber}`];\n\n    if (dhHash.neq(newNonceHash)) {\n        throw new SecurityError('Step 3 invalid new nonce hash');\n    }\n\n    if (!(dhGen instanceof Api.DhGenOk)) {\n        throw new Error(`Step 3.2 answer was ${dhGen}`);\n    }\n    log.debug('Finished authKey generation step 3');\n\n    return { authKey, timeOffset };\n}\n","/**\n *  This module contains the class used to communicate with Telegram's servers\n *  in plain text, when no authorization key has been created yet.\n */\nconst BigInt = require('big-integer');\nconst MTProtoState = require('./MTProtoState');\nconst BinaryReader = require('../extensions/BinaryReader');\nconst { InvalidBufferError } = require('../errors/Common');\nconst { toSignedLittleBuffer } = require('../Helpers');\n\n/**\n * MTProto Mobile Protocol plain sender (https://core.telegram.org/mtproto/description#unencrypted-messages)\n */\n\nclass MTProtoPlainSender {\n    /**\n     * Initializes the MTProto plain sender.\n     * @param connection connection: the Connection to be used.\n     * @param loggers\n     */\n    constructor(connection, loggers) {\n        this._state = new MTProtoState(connection, loggers);\n        this._connection = connection;\n    }\n\n    /**\n     * Sends and receives the result for the given request.\n     * @param request\n     */\n    async send(request) {\n        let body = request.getBytes();\n        let msgId = this._state._getNewMsgId();\n        const m = toSignedLittleBuffer(msgId, 8);\n        const b = Buffer.alloc(4);\n        b.writeInt32LE(body.length, 0);\n\n        const res = Buffer.concat([Buffer.concat([Buffer.alloc(8), m, b]), body]);\n\n        await this._connection.send(res);\n        body = await this._connection.recv();\n        if (body.length < 8) {\n            throw new InvalidBufferError(body);\n        }\n        const reader = new BinaryReader(body);\n        const authKeyId = reader.readLong();\n        if (authKeyId.neq(BigInt(0))) {\n            throw new Error('Bad authKeyId');\n        }\n        msgId = reader.readLong();\n        if (msgId.eq(BigInt(0))) {\n            throw new Error('Bad msgId');\n        }\n        /** ^ We should make sure that the read ``msg_id`` is greater\n         * than our own ``msg_id``. However, under some circumstances\n         * (bad system clock/working behind proxies) this seems to not\n         * be the case, which would cause endless assertion errors.\n         */\n\n        const length = reader.readInt();\n        if (length <= 0) {\n            throw new Error('Bad length');\n        }\n        /**\n         * We could read length bytes and use those in a new reader to read\n         * the next TLObject without including the padding, but since the\n         * reader isn't used for anything else after this, it's unnecessary.\n         */\n        return reader.tgReadObject();\n    }\n}\n\nmodule.exports = MTProtoPlainSender;\n","const { RPCError } = require('../errors');\n\nconst MtProtoPlainSender = require('./MTProtoPlainSender');\nconst MTProtoState = require('./MTProtoState');\nconst Helpers = require('../Helpers');\nconst AuthKey = require('../crypto/AuthKey');\nconst { doAuthentication } = require('./Authenticator');\nconst RPCResult = require('../tl/core/RPCResult');\nconst MessageContainer = require('../tl/core/MessageContainer');\nconst GZIPPacked = require('../tl/core/GZIPPacked');\nconst RequestState = require('./RequestState');\n\nconst {\n    MsgsAck,\n    upload,\n    MsgsStateInfo,\n    Pong,\n} = require('../tl').constructors;\nconst MessagePacker = require('../extensions/MessagePacker');\nconst BinaryReader = require('../extensions/BinaryReader');\nconst {\n    UpdateConnectionState,\n    UpdateServerTimeOffset,\n} = require('./updates');\nconst { BadMessageError } = require('../errors/Common');\nconst {\n    BadServerSalt,\n    BadMsgNotification,\n    MsgDetailedInfo,\n    MsgNewDetailedInfo,\n    NewSessionCreated,\n    FutureSalts,\n    MsgsStateReq,\n    MsgResendReq,\n    MsgsAllInfo,\n} = require('../tl').constructors;\nconst { SecurityError } = require('../errors/Common');\nconst { InvalidBufferError } = require('../errors/Common');\nconst { LogOut } = require('../tl').requests.auth;\nconst { RPCMessageToError } = require('../errors');\nconst { TypeNotFoundError } = require('../errors/Common');\n\n/**\n * MTProto Mobile Protocol sender\n * (https://core.telegram.org/mtproto/description)\n * This class is responsible for wrapping requests into `TLMessage`'s,\n * sending them over the network and receiving them in a safe manner.\n *\n * Automatic reconnection due to temporary network issues is a concern\n * for this class as well, including retry of messages that could not\n * be sent successfully.\n *\n * A new authorization key will be generated on connection if no other\n * key exists yet.\n */\nclass MTProtoSender {\n    static DEFAULT_OPTIONS = {\n        logger: undefined,\n        retries: Infinity,\n        delay: 2000,\n        autoReconnect: true,\n        connectTimeout: undefined,\n        authKeyCallback: undefined,\n        updateCallback: undefined,\n        autoReconnectCallback: undefined,\n        isMainSender: undefined,\n        onConnectionBreak: undefined,\n    };\n\n    /**\n     * @param authKey\n     * @param opts\n     */\n    constructor(authKey, opts) {\n        const args = { ...MTProtoSender.DEFAULT_OPTIONS, ...opts };\n        this._connection = undefined;\n        this._log = args.logger;\n        this._dcId = args.dcId;\n        this._retries = args.retries;\n        this._delay = args.delay;\n        this._autoReconnect = args.autoReconnect;\n        this._connectTimeout = args.connectTimeout;\n        this._authKeyCallback = args.authKeyCallback;\n        this._updateCallback = args.updateCallback;\n        this._autoReconnectCallback = args.autoReconnectCallback;\n        this._isMainSender = args.isMainSender;\n        this._onConnectionBreak = args.onConnectionBreak;\n\n        /**\n         * whether we disconnected ourself or telegram did it.\n         */\n        this.userDisconnected = false;\n\n        /**\n         * Whether the user has explicitly connected or disconnected.\n         *\n         * If a disconnection happens for any other reason and it\n         * was *not* user action then the pending messages won't\n         * be cleared but on explicit user disconnection all the\n         * pending futures should be cancelled.\n         */\n        this._user_connected = false;\n        this.isReconnecting = false;\n        this._disconnected = true;\n\n        /**\n         * We need to join the loops upon disconnection\n         */\n        this._send_loop_handle = undefined;\n        this._recv_loop_handle = undefined;\n\n        /**\n         * Preserving the references of the AuthKey and state is important\n         */\n        this.authKey = authKey || new AuthKey();\n        this._state = new MTProtoState(this.authKey, this._log);\n\n        /**\n         * Outgoing messages are put in a queue and sent in a batch.\n         * Note that here we're also storing their ``_RequestState``.\n         */\n        this._send_queue = new MessagePacker(this._state, this._log);\n\n        /**\n         * Sent states are remembered until a response is received.\n         */\n        this._pending_state = {};\n\n        /**\n         * Responses must be acknowledged, and we can also batch these.\n         */\n        this._pending_ack = new Set();\n\n        /**\n         * Similar to pending_messages but only for the last acknowledges.\n         * These can't go in pending_messages because no acknowledge for them\n         * is received, but we may still need to resend their state on bad salts.\n         */\n        this._last_acks = [];\n\n        /**\n         * Jump table from response ID to method that handles it\n         */\n\n        this._handlers = {\n            [RPCResult.CONSTRUCTOR_ID]: this._handleRPCResult.bind(this),\n            [MessageContainer.CONSTRUCTOR_ID]: this._handleContainer.bind(this),\n            [GZIPPacked.CONSTRUCTOR_ID]: this._handleGzipPacked.bind(this),\n            [Pong.CONSTRUCTOR_ID]: this._handlePong.bind(this),\n            [BadServerSalt.CONSTRUCTOR_ID]: this._handleBadServerSalt.bind(this),\n            [BadMsgNotification.CONSTRUCTOR_ID]: this._handleBadNotification.bind(this),\n            [MsgDetailedInfo.CONSTRUCTOR_ID]: this._handleDetailedInfo.bind(this),\n            [MsgNewDetailedInfo.CONSTRUCTOR_ID]: this._handleNewDetailedInfo.bind(this),\n            [NewSessionCreated.CONSTRUCTOR_ID]: this._handleNewSessionCreated.bind(this),\n            [MsgsAck.CONSTRUCTOR_ID]: this._handleAck.bind(this),\n            [FutureSalts.CONSTRUCTOR_ID]: this._handleFutureSalts.bind(this),\n            [MsgsStateReq.CONSTRUCTOR_ID]: this._handleStateForgotten.bind(this),\n            [MsgResendReq.CONSTRUCTOR_ID]: this._handleStateForgotten.bind(this),\n            [MsgsAllInfo.CONSTRUCTOR_ID]: this._handleMsgAll.bind(this),\n        };\n    }\n\n    // Public API\n\n    /**\n     * Connects to the specified given connection using the given auth key.\n     * @param connection\n     * @param [force]\n     * @returns {Promise<boolean>}\n     */\n    async connect(connection, force) {\n        this.userDisconnected = false;\n\n        if (this._user_connected && !force) {\n            this._log.info('User is already connected!');\n            return false;\n        }\n        this.isConnecting = true;\n        this._connection = connection;\n\n        for (let attempt = 0; attempt < this._retries; attempt++) {\n            try {\n                await this._connect();\n                if (this._updateCallback) {\n                    this._updateCallback(new UpdateConnectionState(UpdateConnectionState.connected));\n                }\n                break;\n            } catch (err) {\n                if (this._updateCallback && attempt === 0) {\n                    this._updateCallback(new UpdateConnectionState(UpdateConnectionState.disconnected));\n                }\n                this._log.error(`WebSocket connection failed attempt: ${attempt + 1}`);\n                // eslint-disable-next-line no-console\n                console.error(err);\n                await Helpers.sleep(this._delay);\n            }\n        }\n        this.isConnecting = false;\n        return true;\n    }\n\n    isConnected() {\n        return this._user_connected;\n    }\n\n    /**\n     * Cleanly disconnects the instance from the network, cancels\n     * all pending requests, and closes the send and receive loops.\n     */\n    async disconnect() {\n        this.userDisconnected = true;\n        await this._disconnect();\n    }\n\n    /**\n     *\n     This method enqueues the given request to be sent. Its send\n     state will be saved until a response arrives, and a ``Future``\n     that will be resolved when the response arrives will be returned:\n\n     .. code-block:: javascript\n\n     async def method():\n     # Sending (enqueued for the send loop)\n     future = sender.send(request)\n     # Receiving (waits for the receive loop to read the result)\n     result = await future\n\n     Designed like this because Telegram may send the response at\n     any point, and it can send other items while one waits for it.\n     Once the response for this future arrives, it is set with the\n     received result, quite similar to how a ``receive()`` call\n     would otherwise work.\n\n     Since the receiving part is \"built in\" the future, it's\n     impossible to await receive a result that was never sent.\n     * @param request\n     * @returns {RequestState}\n     */\n    send(request) {\n        if (!this._user_connected) {\n            throw new Error('Cannot send requests while disconnected');\n        }\n        const state = new RequestState(request);\n        this._send_queue.append(state);\n        return state.promise;\n    }\n\n    /**\n     * Same as send but returns the full state. usefull for invoke after logic\n     * @param request\n     * @return {RequestState}\n     */\n    sendWithInvokeSupport(request) {\n        if (!this._user_connected) {\n            throw new Error('Cannot send requests while disconnected');\n        }\n        const state = new RequestState(request, undefined, this._pending_state);\n        this._send_queue.append(state);\n        return state;\n    }\n\n    /**\n     * Performs the actual connection, retrying, generating the\n     * authorization key if necessary, and starting the send and\n     * receive loops.\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _connect() {\n        this._log.info('Connecting to {0}...'.replace('{0}', this._connection));\n        await this._connection.connect();\n        this._log.debug('Connection success!');\n        // process.exit(0)\n        if (!this.authKey.getKey()) {\n            const plain = new MtProtoPlainSender(this._connection, this._log);\n            this._log.debug('New auth_key attempt ...');\n            const res = await doAuthentication(plain, this._log);\n            this._log.debug('Generated new auth_key successfully');\n            await this.authKey.setKey(res.authKey);\n\n            this._state.timeOffset = res.timeOffset;\n\n            if (this._updateCallback) {\n                this._updateCallback(new UpdateServerTimeOffset(this._state.timeOffset));\n            }\n\n            /**\n             * This is *EXTREMELY* important since we don't control\n             * external references to the authorization key, we must\n             * notify whenever we change it. This is crucial when we\n             * switch to different data centers.\n             */\n            if (this._authKeyCallback) {\n                await this._authKeyCallback(this.authKey, this._dcId);\n            }\n        } else {\n            this._authenticated = true;\n            this._log.debug('Already have an auth key ...');\n        }\n        this._user_connected = true;\n        this.isReconnecting = false;\n\n        this._log.debug('Starting send loop');\n        this._send_loop_handle = this._sendLoop();\n\n        this._log.debug('Starting receive loop');\n        this._recv_loop_handle = this._recvLoop();\n\n        // _disconnected only completes after manual disconnection\n        // or errors after which the sender cannot continue such\n        // as failing to reconnect or any unexpected error.\n\n        this._log.info('Connection to %s complete!'.replace('%s', this._connection.toString()));\n    }\n\n    async _disconnect() {\n        this._send_queue.rejectAll();\n\n        if (this._updateCallback) {\n            this._updateCallback(new UpdateConnectionState(UpdateConnectionState.disconnected));\n        }\n\n        if (this._connection === undefined) {\n            this._log.info('Not disconnecting (already have no connection)');\n            return;\n        }\n\n        this._log.info('Disconnecting from %s...'.replace('%s', this._connection.toString()));\n        this._user_connected = false;\n        this._log.debug('Closing current connection...');\n        await this._connection.disconnect();\n    }\n\n    /**\n     * This loop is responsible for popping items off the send\n     * queue, encrypting them, and sending them over the network.\n     * Besides `connect`, only this method ever sends data.\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _sendLoop() {\n        this._send_queue = new MessagePacker(this._state, this._log);\n\n        while (this._user_connected && !this.isReconnecting) {\n            if (this._pending_ack.size) {\n                const ack = new RequestState(new MsgsAck({ msgIds: Array(...this._pending_ack) }));\n                this._send_queue.append(ack);\n                this._last_acks.push(ack);\n                if (this._last_acks.length >= 10) {\n                    this._last_acks.shift();\n                }\n                this._pending_ack.clear();\n            }\n            this._log.debug(`Waiting for messages to send...${this.isReconnecting}`);\n            // TODO Wait for the connection send queue to be empty?\n            // This means that while it's not empty we can wait for\n            // more messages to be added to the send queue.\n            const res = await this._send_queue.get();\n\n            if (this.isReconnecting) {\n                return;\n            }\n\n            if (!res) {\n                continue;\n            }\n            let { data } = res;\n            const { batch } = res;\n            this._log.debug(`Encrypting ${batch.length} message(s) in ${data.length} bytes for sending`);\n\n            data = await this._state.encryptMessageData(data);\n\n            try {\n                await this._connection.send(data);\n            } catch (e) {\n                this._log.error(e);\n                this._log.info('Connection closed while sending data');\n                return;\n            }\n            for (const state of batch) {\n                if (!Array.isArray(state)) {\n                    if (state.request.classType === 'request') {\n                        this._pending_state[state.msgId] = state;\n                    }\n                } else {\n                    for (const s of state) {\n                        if (s.request.classType === 'request') {\n                            this._pending_state[s.msgId] = s;\n                        }\n                    }\n                }\n            }\n            this._log.debug('Encrypted messages put in a queue to be sent');\n        }\n    }\n\n    async _recvLoop() {\n        let body;\n        let message;\n\n        while (this._user_connected && !this.isReconnecting) {\n            // this._log.debug('Receiving items from the network...');\n            this._log.debug('Receiving items from the network...');\n            try {\n                body = await this._connection.recv();\n            } catch (e) {\n                // this._log.info('Connection closed while receiving data');\n                /** when the server disconnects us we want to reconnect */\n                if (!this.userDisconnected) {\n                    this._log.error(e);\n                    this._log.warn('Connection closed while receiving data');\n                    this.reconnect();\n                }\n                return;\n            }\n            try {\n                message = await this._state.decryptMessageData(body);\n            } catch (e) {\n                if (e instanceof TypeNotFoundError) {\n                    // Received object which we don't know how to deserialize\n                    this._log.info(`Type ${e.invalidConstructorId} not found, remaining data ${e.remaining}`);\n                    continue;\n                } else if (e instanceof SecurityError) {\n                    // A step while decoding had the incorrect data. This message\n                    // should not be considered safe and it should be ignored.\n                    this._log.warn(`Security error while unpacking a received message: ${e}`);\n                    continue;\n                } else if (e instanceof InvalidBufferError) {\n                    // 404 means that the server has \"forgotten\" our auth key and we need to create a new one.\n                    if (e.code === 404) {\n                        this._handleBadAuthKey();\n                    } else {\n                        // this happens sometimes when telegram is having some internal issues.\n                        // reconnecting should be enough usually\n                        // since the data we sent and received is probably wrong now.\n                        this._log.warn(`Invalid buffer ${e.code} for dc ${this._dcId}`);\n                        this.reconnect();\n                    }\n                    return;\n                } else {\n                    this._log.error('Unhandled error while receiving data');\n                    this._log.error(e);\n                    this.reconnect();\n                    return;\n                }\n            }\n            try {\n                await this._processMessage(message);\n            } catch (e) {\n                // `RPCError` errors except for 'AUTH_KEY_UNREGISTERED' should be handled by the client\n                if (e instanceof RPCError) {\n                    if (e.message === 'AUTH_KEY_UNREGISTERED') {\n                        // 'AUTH_KEY_UNREGISTERED' for the main sender is thrown when unauthorized and should be ignored\n                        this._handleBadAuthKey(true);\n                    }\n                } else {\n                    this._log.error('Unhandled error while receiving data');\n                    this._log.error(e);\n                }\n            }\n        }\n    }\n\n    _handleBadAuthKey(shouldSkipForMain) {\n        if (shouldSkipForMain && this._isMainSender) {\n            return;\n        }\n\n        this._log.warn(`Broken authorization key for dc ${this._dcId}, resetting...`);\n\n        if (this._isMainSender && this._updateCallback) {\n            this._updateCallback(new UpdateConnectionState(UpdateConnectionState.broken));\n        } else if (!this._isMainSender && this._onConnectionBreak) {\n            this._onConnectionBreak(this._dcId);\n        }\n    }\n\n    // Response Handlers\n\n    /**\n     * Adds the given message to the list of messages that must be\n     * acknowledged and dispatches control to different ``_handle_*``\n     * method based on its type.\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _processMessage(message) {\n        this._pending_ack.add(message.msgId);\n        // eslint-disable-next-line require-atomic-updates\n        message.obj = await message.obj;\n        let handler = this._handlers[message.obj.CONSTRUCTOR_ID];\n        if (!handler) {\n            handler = this._handleUpdate.bind(this);\n        }\n\n        await handler(message);\n    }\n\n    /**\n     * Pops the states known to match the given ID from pending messages.\n     * This method should be used when the response isn't specific.\n     * @param msgId\n     * @returns {*[]}\n     * @private\n     */\n    _popStates(msgId) {\n        let state = this._pending_state[msgId];\n        if (state) {\n            this._pending_state[msgId].deferred.resolve();\n            delete this._pending_state[msgId];\n            return [state];\n        }\n\n        const toPop = [];\n\n        for (state of Object.values(this._pending_state)) {\n            if (state.containerId && state.containerId.equals(msgId)) {\n                toPop.push(state.msgId);\n            }\n        }\n\n        if (toPop.length) {\n            const temp = [];\n            for (const x of toPop) {\n                temp.push(this._pending_state[x]);\n                this._pending_state[x].deferred.resolve();\n                delete this._pending_state[x];\n            }\n            return temp;\n        }\n\n        for (const ack of this._last_acks) {\n            if (ack.msgId === msgId) {\n                return [ack];\n            }\n        }\n\n        return [];\n    }\n\n    /**\n     * Handles the result for Remote Procedure Calls:\n     * rpc_result#f35c6d01 req_msg_id:long result:bytes = RpcResult;\n     * This is where the future results for sent requests are set.\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleRPCResult(message) {\n        const result = message.obj;\n        const state = this._pending_state[result.reqMsgId];\n        if (state) {\n            state.deferred.resolve();\n            delete this._pending_state[result.reqMsgId];\n        }\n        this._log.debug(`Handling RPC result for message ${result.reqMsgId}`);\n\n        if (!state) {\n            // TODO We should not get responses to things we never sent\n            // However receiving a File() with empty bytes is \"common\".\n            // See #658, #759 and #958. They seem to happen in a container\n            // which contain the real response right after.\n            try {\n                const reader = new BinaryReader(result.body);\n                if (!(reader.tgReadObject() instanceof upload.File)) {\n                    throw new TypeNotFoundError('Not an upload.File');\n                }\n            } catch (e) {\n                this._log.error(e);\n                if (e instanceof TypeNotFoundError) {\n                    this._log.info(`Received response without parent request: ${result.body}`);\n                    return;\n                } else {\n                    throw e;\n                }\n            }\n        }\n        if (result.error) {\n            // eslint-disable-next-line new-cap\n            const error = RPCMessageToError(result.error, state.request);\n            this._send_queue.append(new RequestState(new MsgsAck({ msgIds: [state.msgId] })));\n            state.reject(error);\n            throw error;\n        } else {\n            try {\n                const reader = new BinaryReader(result.body);\n                const read = state.request.readResult(reader);\n                state.resolve(read);\n            } catch (err) {\n                state.reject(err);\n                throw err;\n            }\n        }\n    }\n\n    /**\n     * Processes the inner messages of a container with many of them:\n     * msg_container#73f1f8dc messages:vector<%Message> = MessageContainer;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _handleContainer(message) {\n        this._log.debug('Handling container');\n        for (const innerMessage of message.obj.messages) {\n            await this._processMessage(innerMessage);\n        }\n    }\n\n    /**\n     * Unpacks the data from a gzipped object and processes it:\n     * gzip_packed#3072cfa1 packed_data:bytes = Object;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _handleGzipPacked(message) {\n        this._log.debug('Handling gzipped data');\n        const reader = new BinaryReader(message.obj.data);\n        message.obj = reader.tgReadObject();\n        await this._processMessage(message);\n    }\n\n    _handleUpdate(message) {\n        if (message.obj.SUBCLASS_OF_ID !== 0x8af52aac) {\n            // crc32(b'Updates')\n            this._log.warn(`Note: ${message.obj.className} is not an update, not dispatching it`);\n            return;\n        }\n        this._log.debug(`Handling update ${message.obj.className}`);\n        if (this._updateCallback) {\n            this._updateCallback(message.obj);\n        }\n    }\n\n    /**\n     * Handles pong results, which don't come inside a ``RPCResult``\n     * but are still sent through a request:\n     * pong#347773c5 msg_id:long ping_id:long = Pong;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handlePong(message) {\n        const pong = message.obj;\n\n        const newTimeOffset = this._state.updateTimeOffset(message.msgId);\n        if (this._updateCallback) {\n            this._updateCallback(new UpdateServerTimeOffset(newTimeOffset));\n        }\n\n        this._log.debug(`Handling pong for message ${pong.msgId}`);\n        const state = this._pending_state[pong.msgId];\n        this._pending_state[pong.msgId].deferred.resolve();\n        delete this._pending_state[pong.msgId];\n\n        // Todo Check result\n        if (state) {\n            state.resolve(pong);\n        }\n    }\n\n    /**\n     * Corrects the currently used server salt to use the right value\n     * before enqueuing the rejected message to be re-sent:\n     * bad_server_salt#edab447b bad_msg_id:long bad_msg_seqno:int\n     * error_code:int new_server_salt:long = BadMsgNotification;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleBadServerSalt(message) {\n        const badSalt = message.obj;\n        this._log.debug(`Handling bad salt for message ${badSalt.badMsgId}`);\n        this._state.salt = badSalt.newServerSalt;\n        const states = this._popStates(badSalt.badMsgId);\n        this._send_queue.extend(states);\n        this._log.debug(`${states.length} message(s) will be resent`);\n    }\n\n    /**\n     * Adjusts the current state to be correct based on the\n     * received bad message notification whenever possible:\n     * bad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int\n     * error_code:int = BadMsgNotification;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleBadNotification(message) {\n        const badMsg = message.obj;\n        const states = this._popStates(badMsg.badMsgId);\n        this._log.debug(`Handling bad msg ${JSON.stringify(badMsg)}`);\n        if ([16, 17].includes(badMsg.errorCode)) {\n            // Sent msg_id too low or too high (respectively).\n            // Use the current msg_id to determine the right time offset.\n            const newTimeOffset = this._state.updateTimeOffset(message.msgId);\n\n            if (this._updateCallback) {\n                this._updateCallback(new UpdateServerTimeOffset(newTimeOffset));\n            }\n\n            this._log.info(`System clock is wrong, set time offset to ${newTimeOffset}s`);\n        } else if (badMsg.errorCode === 32) {\n            // msg_seqno too low, so just pump it up by some \"large\" amount\n            // TODO A better fix would be to start with a new fresh session ID\n            this._state._sequence += 64;\n        } else if (badMsg.errorCode === 33) {\n            // msg_seqno too high never seems to happen but just in case\n            this._state._sequence -= 16;\n        } else {\n            for (const state of states) {\n                state.reject(new BadMessageError(state.request, badMsg.errorCode));\n            }\n\n            return;\n        }\n        // Messages are to be re-sent once we've corrected the issue\n        this._send_queue.extend(states);\n        this._log.debug(`${states.length} messages will be resent due to bad msg`);\n    }\n\n    /**\n     * Updates the current status with the received detailed information:\n     * msg_detailed_info#276d3ec6 msg_id:long answer_msg_id:long\n     * bytes:int status:int = MsgDetailedInfo;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleDetailedInfo(message) {\n        // TODO https://goo.gl/VvpCC6\n        const msgId = message.obj.answerMsgId;\n        this._log.debug(`Handling detailed info for message ${msgId}`);\n        this._pending_ack.add(msgId);\n    }\n\n    /**\n     * Updates the current status with the received detailed information:\n     * msg_new_detailed_info#809db6df answer_msg_id:long\n     * bytes:int status:int = MsgDetailedInfo;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleNewDetailedInfo(message) {\n        // TODO https://goo.gl/VvpCC6\n        const msgId = message.obj.answerMsgId;\n        this._log.debug(`Handling new detailed info for message ${msgId}`);\n        this._pending_ack.add(msgId);\n    }\n\n    /**\n     * Updates the current status with the received session information:\n     * new_session_created#9ec20908 first_msg_id:long unique_id:long\n     * server_salt:long = NewSession;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleNewSessionCreated(message) {\n        // TODO https://goo.gl/LMyN7A\n        this._log.debug('Handling new session created');\n        this._state.salt = message.obj.serverSalt;\n    }\n\n    /**\n     * Handles a server acknowledge about our messages. Normally\n     * these can be ignored except in the case of ``auth.logOut``:\n     *\n     *     auth.logOut#5717da40 = Bool;\n     *\n     * Telegram doesn't seem to send its result so we need to confirm\n     * it manually. No other request is known to have this behaviour.\n\n     * Since the ID of sent messages consisting of a container is\n     * never returned (unless on a bad notification), this method\n     * also removes containers messages when any of their inner\n     * messages are acknowledged.\n\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleAck(message) {\n        const ack = message.obj;\n        this._log.debug(`Handling acknowledge for ${ack.msgIds}`);\n        for (const msgId of ack.msgIds) {\n            const state = this._pending_state[msgId];\n            if (state && state.request instanceof LogOut) {\n                this._pending_state[msgId].deferred.resolve();\n                delete this._pending_state[msgId];\n                state.resolve(true);\n            }\n        }\n    }\n\n    /**\n     * Handles future salt results, which don't come inside a\n     * ``rpc_result`` but are still sent through a request:\n     *     future_salts#ae500895 req_msg_id:long now:int\n     *     salts:vector<future_salt> = FutureSalts;\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleFutureSalts(message) {\n        // TODO save these salts and automatically adjust to the\n        // correct one whenever the salt in use expires.\n        this._log.debug(`Handling future salts for message ${message.msgId}`);\n        const state = this._pending_state[message.msgId];\n\n        if (state) {\n            this._pending_state[message].deferred.resolve();\n            delete this._pending_state[message];\n            state.resolve(message.obj);\n        }\n    }\n\n    /**\n     * Handles both :tl:`MsgsStateReq` and :tl:`MsgResendReq` by\n     * enqueuing a :tl:`MsgsStateInfo` to be sent at a later point.\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    _handleStateForgotten(message) {\n        this._send_queue.append(\n            new RequestState(new MsgsStateInfo(message.msgId, String.fromCharCode(1)\n                .repeat(message.obj.msgIds))),\n        );\n    }\n\n    /**\n     * Handles :tl:`MsgsAllInfo` by doing nothing (yet).\n     * used as part of the telegram protocol https://core.telegram.org/mtproto/service_messages_about_messages\n     * This message does not require an acknowledgment.\n     * @param message\n     * @returns {Promise<void>}\n     * @private\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _handleMsgAll(message) {\n    }\n\n    reconnect() {\n        if (this._user_connected && !this.isReconnecting) {\n            this.isReconnecting = true;\n            // TODO Should we set this?\n            // this._user_connected = false\n            // we want to wait a second between each reconnect try to not flood the server with reconnects\n            // in case of internal server issues.\n            Helpers.sleep(1000)\n                .then(() => {\n                    this._log.info('Started reconnecting');\n                    this._reconnect();\n                });\n        }\n    }\n\n    async _reconnect() {\n        this._log.debug('Closing current connection...');\n        try {\n            await this._disconnect();\n        } catch (err) {\n            this._log.warn(err);\n        }\n\n        this._send_queue.append(undefined);\n        this._state.reset();\n\n        // For some reason reusing existing connection caused stuck requests\n        const newConnection = new this._connection.constructor(\n            this._connection._ip,\n            this._connection._port,\n            this._connection._dcId,\n            this._connection._log,\n            this._connection._testServers,\n        );\n        await this.connect(newConnection, true);\n\n        this.isReconnecting = false;\n        // uncomment this if you want to resend\n        // this._send_queue.extend(Object.values(this._pending_state))\n        for (const state of Object.values(this._pending_state)) {\n            state.deferred.resolve();\n        }\n        this._pending_state = {};\n        if (this._autoReconnectCallback) {\n            await this._autoReconnectCallback();\n        }\n    }\n}\n\nmodule.exports = MTProtoSender;\n","const BigInt = require('big-integer');\nconst aes = require('@cryptography/aes');\n\nconst Helpers = require('../Helpers');\nconst IGE = require('../crypto/IGE');\nconst BinaryReader = require('../extensions/BinaryReader');\nconst GZIPPacked = require('../tl/core/GZIPPacked');\nconst { TLMessage } = require('../tl/core');\nconst {\n    SecurityError,\n    InvalidBufferError,\n} = require('../errors/Common');\nconst { InvokeAfterMsg } = require('../tl').requests;\nconst {\n    toSignedLittleBuffer,\n} = require('../Helpers');\n\nclass MTProtoState {\n    /**\n     *\n     `telethon.network.mtprotosender.MTProtoSender` needs to hold a state\n     in order to be able to encrypt and decrypt incoming/outgoing messages,\n     as well as generating the message IDs. Instances of this class hold\n     together all the required information.\n\n     It doesn't make sense to use `telethon.sessions.abstract.Session` for\n     the sender because the sender should *not* be concerned about storing\n     this information to disk, as one may create as many senders as they\n     desire to any other data center, or some CDN. Using the same session\n     for all these is not a good idea as each need their own authkey, and\n     the concept of \"copying\" sessions with the unnecessary entities or\n     updates state for these connections doesn't make sense.\n\n     While it would be possible to have a `MTProtoPlainState` that does no\n     encryption so that it was usable through the `MTProtoLayer` and thus\n     avoid the need for a `MTProtoPlainSender`, the `MTProtoLayer` is more\n     focused to efficiency and this state is also more advanced (since it\n     supports gzipping and invoking after other message IDs). There are too\n     many methods that would be needed to make it convenient to use for the\n     authentication process, at which point the `MTProtoPlainSender` is better\n     * @param authKey\n     * @param loggers\n     * @param isCall\n     * @param isOutgoing\n     */\n    constructor(authKey, loggers, isCall = false, isOutgoing = false) {\n        this.authKey = authKey;\n        this._log = loggers;\n        this._isCall = isCall;\n        this._isOutgoing = isOutgoing;\n        this.timeOffset = 0;\n        this.salt = 0;\n\n        this.id = undefined;\n        this._sequence = undefined;\n        this._lastMsgId = undefined;\n        this.msgIds = [];\n        this.reset();\n    }\n\n    /**\n     * Resets the state\n     */\n    reset() {\n        // Session IDs can be random on every connection\n        this.id = Helpers.generateRandomLong(true);\n        this._sequence = 0;\n        this._lastMsgId = BigInt(0);\n        this.msgIds = [];\n    }\n\n    /**\n     * Updates the message ID to a new one,\n     * used when the time offset changed.\n     * @param message\n     */\n    updateMessageId(message) {\n        message.msgId = this._getNewMsgId();\n    }\n\n    /**\n     * Calculate the key based on Telegram guidelines, specifying whether it's the client or not\n     * @param authKey\n     * @param msgKey\n     * @param client\n     * @returns {{iv: Buffer, key: Buffer}}\n     */\n    async _calcKey(authKey, msgKey, client) {\n        const x = (this._isCall ? 128 + ((this._isOutgoing ^ client) ? 8 : 0) : (client === true ? 0 : 8));\n        const [sha256a, sha256b] = await Promise.all([\n            Helpers.sha256(Buffer.concat([msgKey, authKey.slice(x, x + 36)])),\n            Helpers.sha256(Buffer.concat([authKey.slice(x + 40, x + 76), msgKey])),\n        ]);\n        const key = Buffer.concat([sha256a.slice(0, 8), sha256b.slice(8, 24), sha256a.slice(24, 32)]);\n        if (this._isCall) {\n            const iv = Buffer.concat([sha256b.slice(0, 4), sha256a.slice(8, 16), sha256b.slice(24, 28)]);\n\n            return {\n                key,\n                iv,\n            };\n        }\n        const iv = Buffer.concat([sha256b.slice(0, 8), sha256a.slice(8, 24), sha256b.slice(24, 32)]);\n        return {\n            key,\n            iv,\n        };\n    }\n\n    /**\n     * Writes a message containing the given data into buffer.\n     * Returns the message id.\n     * @param buffer\n     * @param data\n     * @param contentRelated\n     * @param afterId\n     */\n    async writeDataAsMessage(buffer, data, contentRelated, afterId) {\n        const msgId = this._getNewMsgId();\n        const seqNo = this._getSeqNo(contentRelated);\n        let body;\n        if (!afterId) {\n            body = await GZIPPacked.gzipIfSmaller(contentRelated, data);\n        } else {\n            // Invoke query expects a query with a getBytes func\n            body = await GZIPPacked.gzipIfSmaller(contentRelated, new InvokeAfterMsg(afterId, {\n                getBytes() {\n                    return data;\n                },\n            }).getBytes());\n        }\n        const s = Buffer.alloc(4);\n        s.writeInt32LE(seqNo, 0);\n        const b = Buffer.alloc(4);\n        b.writeInt32LE(body.length, 0);\n        const m = toSignedLittleBuffer(msgId, 8);\n        buffer.write(Buffer.concat([m, s, b]));\n        buffer.write(body);\n        return msgId;\n    }\n\n    /**\n     * Encrypts the given message data using the current authorization key\n     * following MTProto 2.0 guidelines core.telegram.org/mtproto/description.\n     * @param data\n     */\n    async encryptMessageData(data) {\n        await this.authKey.waitForKey();\n        if (this._isCall) {\n            const x = 128 + (this._isOutgoing ? 0 : 8);\n            const lengthStart = data.length;\n\n            data = Buffer.from(data);\n            if (lengthStart % 4 !== 0) {\n                data = Buffer.concat([data, Buffer.from(new Array(4 - (lengthStart % 4)).fill(0x20))]);\n            }\n\n            const msgKeyLarge = await Helpers.sha256(Buffer.concat([this.authKey.getKey()\n                .slice(88 + x, 88 + x + 32), Buffer.from(data)]));\n\n            const msgKey = msgKeyLarge.slice(8, 24);\n\n            const {\n                iv,\n                key,\n            } = await this._calcKey(this.authKey.getKey(), msgKey, true);\n\n            data = Helpers.convertToLittle(new aes.CTR(key, iv).encrypt(data));\n            // data = data.slice(0, lengthStart)\n            return Buffer.concat([msgKey, data]);\n        } else {\n            const s = toSignedLittleBuffer(this.salt, 8);\n            const i = toSignedLittleBuffer(this.id, 8);\n            data = Buffer.concat([Buffer.concat([s, i]), data]);\n            const padding = Helpers.generateRandomBytes(Helpers.mod(-(data.length + 12), 16) + 12);\n            // Being substr(what, offset, length); x = 0 for client\n            // \"msg_key_large = SHA256(substr(auth_key, 88+x, 32) + pt + padding)\"\n            const msgKeyLarge = await Helpers.sha256(Buffer.concat([this.authKey.getKey()\n                .slice(88, 88 + 32), data, padding]));\n            // \"msg_key = substr (msg_key_large, 8, 16)\"\n            const msgKey = msgKeyLarge.slice(8, 24);\n\n            const {\n                iv,\n                key,\n            } = await this._calcKey(this.authKey.getKey(), msgKey, true);\n\n            const keyId = Helpers.readBufferFromBigInt(this.authKey.keyId, 8);\n            return Buffer.concat([keyId, msgKey, new IGE(key, iv).encryptIge(Buffer.concat([data, padding]))]);\n        }\n    }\n\n    /**\n     * Inverse of `encrypt_message_data` for incoming server messages.\n     * @param body\n     */\n    async decryptMessageData(body) {\n        if (body.length < 8) {\n            throw new InvalidBufferError(body);\n        }\n        if (body.length < 0) { // length needs to be positive\n            throw new SecurityError('Server replied with negative length');\n        }\n        if (body.length % 4 !== 0 && !this._isCall) {\n            throw new SecurityError('Server replied with length not divisible by 4');\n        }\n        // TODO Check salt,sessionId, and sequenceNumber\n        if (!this._isCall) {\n            const keyId = Helpers.readBigIntFromBuffer(body.slice(0, 8));\n\n            if (keyId.neq(this.authKey.keyId)) {\n                throw new SecurityError('Server replied with an invalid auth key');\n            }\n        }\n        const msgKey = this._isCall ? body.slice(0, 16) : body.slice(8, 24);\n\n        const x = this._isCall ? 128 + (this.isOutgoing ? 8 : 0) : undefined;\n        const {\n            iv,\n            key,\n        } = await this._calcKey(this.authKey.getKey(), msgKey, false);\n\n        if (this._isCall) {\n            body = body.slice(16);\n            const lengthStart = body.length;\n\n            body = Buffer.concat([body, Buffer.from(new Array(4 - (lengthStart % 4)).fill(0))]);\n\n            body = Helpers.convertToLittle(new aes.CTR(key, iv).decrypt(body));\n\n            body = body.slice(0, lengthStart);\n        } else {\n            body = new IGE(key, iv).decryptIge(this._isCall ? body.slice(16) : body.slice(24));\n        }\n        // https://core.telegram.org/mtproto/security_guidelines\n        // Sections \"checking sha256 hash\" and \"message length\"\n\n        const ourKey = this._isCall\n            ? await Helpers.sha256(Buffer.concat([this.authKey.getKey()\n                .slice(88 + x, 88 + x + 32), body]))\n            : await Helpers.sha256(Buffer.concat([this.authKey.getKey()\n                .slice(96, 96 + 32), body]));\n\n        if (!this._isCall && !msgKey.equals(ourKey.slice(8, 24))) {\n            throw new SecurityError('Received msg_key doesn\\'t match with expected one');\n        }\n        const reader = new BinaryReader(body);\n\n        if (this._isCall) {\n            // Seq\n            reader.readInt(false);\n            return reader.read(body.length - 4);\n        } else {\n            reader.readLong(); // removeSalt\n            const serverId = reader.readLong();\n            if (!serverId.eq(this.id)) {\n                throw new SecurityError('Server replied with a wrong session ID');\n            }\n\n            const remoteMsgId = reader.readLong();\n            // if we get a duplicate message id we should ignore it.\n            if (this.msgIds.includes(remoteMsgId.toString())) {\n                throw new SecurityError('Duplicate msgIds');\n            }\n            // we only store the latest 500 message ids from the server\n            if (this.msgIds.length > 500) {\n                this.msgIds.shift();\n            }\n            this.msgIds.push(remoteMsgId.toString());\n            const remoteSequence = reader.readInt();\n            const containerLen = reader.readInt(); // msgLen for the inner object, padding ignored\n            const diff = body.length - containerLen;\n            // We want to check if it's between 12 and 1024\n            // https://core.telegram.org/mtproto/security_guidelines#checking-message-length\n            if (diff < 12 || diff > 1024) {\n                throw new SecurityError('Server replied with the wrong message padding');\n            }\n\n            // We could read msg_len bytes and use those in a new reader to read\n            // the next TLObject without including the padding, but since the\n            // reader isn't used for anything else after this, it's unnecessary.\n            const obj = reader.tgReadObject();\n\n            return new TLMessage(remoteMsgId, remoteSequence, obj);\n        }\n    }\n\n    /**\n     * Generates a new unique message ID based on the current\n     * time (in ms) since epoch, applying a known time offset.\n     * @private\n     */\n    _getNewMsgId() {\n        const now = new Date().getTime() / 1000 + this.timeOffset;\n        const nanoseconds = Math.floor((now - Math.floor(now)) * 1e9);\n        let newMsgId = (BigInt(Math.floor(now))\n            .shiftLeft(BigInt(32))).or(BigInt(nanoseconds)\n            .shiftLeft(BigInt(2)));\n        if (this._lastMsgId.greaterOrEquals(newMsgId)) {\n            newMsgId = this._lastMsgId.add(BigInt(4));\n        }\n        this._lastMsgId = newMsgId;\n        return newMsgId;\n    }\n\n    /**\n     * Updates the time offset to the correct\n     * one given a known valid message ID.\n     * @param correctMsgId {BigInteger}\n     */\n    updateTimeOffset(correctMsgId) {\n        const bad = this._getNewMsgId();\n        const old = this.timeOffset;\n        const now = Math.floor(new Date().getTime() / 1000);\n        const correct = correctMsgId.shiftRight(BigInt(32));\n        this.timeOffset = correct - now;\n\n        if (this.timeOffset !== old) {\n            this._lastMsgId = BigInt(0);\n            this._log.debug(\n                `Updated time offset (old offset ${old}, bad ${bad}, good ${correctMsgId}, new ${this.timeOffset})`,\n            );\n        }\n\n        return this.timeOffset;\n    }\n\n    /**\n     * Generates the next sequence number depending on whether\n     * it should be for a content-related query or not.\n     * @param contentRelated\n     * @private\n     */\n    _getSeqNo(contentRelated) {\n        if (contentRelated) {\n            const result = this._sequence * 2 + 1;\n            this._sequence += 1;\n            return result;\n        } else {\n            return this._sequence * 2;\n        }\n    }\n}\n\nmodule.exports = MTProtoState;\n","const { default: Deferred } = require('../../../util/Deferred');\n\nclass RequestState {\n    constructor(request, after = undefined, pending = {}) {\n        this.containerId = undefined;\n        this.msgId = undefined;\n        this.request = request;\n        this.data = request.getBytes();\n        this.after = after;\n        this.result = undefined;\n        this.pending = pending;\n        this.deferred = new Deferred();\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n\n    isReady() {\n        const state = this.pending[this.after.id];\n        if (!state) {\n            return true;\n        }\n        return state.deferred.promise;\n    }\n}\n\nmodule.exports = RequestState;\n","const PromisedWebSockets = require('../../extensions/PromisedWebSockets');\nconst AsyncQueue = require('../../extensions/AsyncQueue');\n\n/**\n * The `Connection` class is a wrapper around ``asyncio.open_connection``.\n *\n * Subclasses will implement different transport modes as atomic operations,\n * which this class eases doing since the exposed interface simply puts and\n * gets complete data payloads to and from queues.\n *\n * The only error that will raise from send and receive methods is\n * ``ConnectionError``, which will raise when attempting to send if\n * the client is disconnected (includes remote disconnections).\n */\nclass Connection {\n    PacketCodecClass = undefined;\n\n    constructor(ip, port, dcId, loggers, testServers, isPremium) {\n        this._ip = ip;\n        this._port = port;\n        this._dcId = dcId;\n        this._log = loggers;\n        this._testServers = testServers;\n        this._isPremium = isPremium;\n        this._connected = false;\n        this._sendTask = undefined;\n        this._recvTask = undefined;\n        this._codec = undefined;\n        this._obfuscation = undefined; // TcpObfuscated and MTProxy\n        this._sendArray = new AsyncQueue();\n        this._recvArray = new AsyncQueue();\n        // this.socket = new PromiseSocket(new Socket())\n\n        this.socket = new PromisedWebSockets(this.disconnectCallback.bind(this));\n    }\n\n    async disconnectCallback() {\n        await this.disconnect(true);\n    }\n\n    async _connect() {\n        this._log.debug('Connecting');\n        this._codec = new this.PacketCodecClass(this);\n        await this.socket.connect(this._port, this._ip, this._testServers, this._isPremium);\n        this._log.debug('Finished connecting');\n        // await this.socket.connect({host: this._ip, port: this._port});\n        await this._initConn();\n    }\n\n    async connect() {\n        await this._connect();\n        this._connected = true;\n\n        if (!this._sendTask) {\n            this._sendTask = this._sendLoop();\n        }\n        this._recvTask = this._recvLoop();\n    }\n\n    async disconnect(fromCallback = false) {\n        if (!this._connected) {\n            return;\n        }\n\n        this._connected = false;\n        void this._recvArray.push(undefined);\n        if (!fromCallback) {\n            await this.socket.close();\n        }\n    }\n\n    async send(data) {\n        if (!this._connected) {\n            throw new Error('Not connected');\n        }\n        await this._sendArray.push(data);\n    }\n\n    async recv() {\n        while (this._connected) {\n            const result = await this._recvArray.pop();\n            // null = sentinel value = keep trying\n            if (result) {\n                return result;\n            }\n        }\n        throw new Error('Not connected');\n    }\n\n    async _sendLoop() {\n        // TODO handle errors\n        try {\n            while (this._connected) {\n                const data = await this._sendArray.pop();\n                if (!data) {\n                    this._sendTask = undefined;\n                    return;\n                }\n                await this._send(data);\n            }\n        } catch (e) {\n            this._log.info('The server closed the connection while sending');\n        }\n    }\n\n    async _recvLoop() {\n        let data;\n        while (this._connected) {\n            try {\n                data = await this._recv();\n                if (!data) {\n                    throw new Error('no data received');\n                }\n            } catch (e) {\n                this._log.info('connection closed');\n                // await this._recvArray.push()\n\n                this.disconnect();\n                return;\n            }\n            await this._recvArray.push(data);\n        }\n    }\n\n    async _initConn() {\n        if (this._codec.tag) {\n            await this.socket.write(this._codec.tag);\n        }\n    }\n\n    _send(data) {\n        const encodedPacket = this._codec.encodePacket(data);\n        this.socket.write(encodedPacket);\n    }\n\n    _recv() {\n        return this._codec.readPacket(this.socket);\n    }\n\n    toString() {\n        return `${this._ip}:${this._port}/${this.constructor.name.replace('Connection', '')}`;\n    }\n}\n\nclass ObfuscatedConnection extends Connection {\n    ObfuscatedIO = undefined;\n\n    _initConn() {\n        this._obfuscation = new this.ObfuscatedIO(this);\n        this.socket.write(this._obfuscation.header);\n    }\n\n    _send(data) {\n        this._obfuscation.write(this._codec.encodePacket(data));\n    }\n\n    _recv() {\n        return this._codec.readPacket(this._obfuscation);\n    }\n}\n\nclass PacketCodec {\n    constructor(connection) {\n        this._conn = connection;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    encodePacket(data) {\n        throw new Error('Not Implemented');\n\n        // Override\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    readPacket(reader) {\n        // override\n        throw new Error('Not Implemented');\n    }\n}\n\nmodule.exports = {\n    Connection,\n    PacketCodec,\n    ObfuscatedConnection,\n};\n","const BigInt = require('big-integer');\nconst { readBufferFromBigInt } = require('../../Helpers');\nconst {\n    Connection,\n    PacketCodec,\n} = require('./Connection');\n\nclass AbridgedPacketCodec extends PacketCodec {\n    static tag = Buffer.from('ef', 'hex');\n\n    static obfuscateTag = Buffer.from('efefefef', 'hex');\n\n    constructor(props) {\n        super(props);\n        this.tag = AbridgedPacketCodec.tag;\n        this.obfuscateTag = AbridgedPacketCodec.obfuscateTag;\n    }\n\n    encodePacket(data) {\n        let length = data.length >> 2;\n        if (length < 127) {\n            const b = Buffer.alloc(1);\n            b.writeUInt8(length, 0);\n            length = b;\n        } else {\n            length = Buffer.concat([Buffer.from('7f', 'hex'), readBufferFromBigInt(BigInt(length), 3)]);\n        }\n        return Buffer.concat([length, data]);\n    }\n\n    async readPacket(reader) {\n        const readData = await reader.read(1);\n        let length = readData[0];\n        if (length >= 127) {\n            length = Buffer.concat([await reader.read(3), Buffer.alloc(1)])\n                .readInt32LE(0);\n        }\n\n        return reader.read(length << 2);\n    }\n}\n\n/**\n * This is the mode with the lowest overhead, as it will\n * only require 1 byte if the packet length is less than\n * 508 bytes (127 << 2, which is very common).\n */\nclass ConnectionTCPAbridged extends Connection {\n    PacketCodecClass = AbridgedPacketCodec;\n}\n\nmodule.exports = {\n    ConnectionTCPAbridged,\n    AbridgedPacketCodec,\n};\n","const { generateRandomBytes } = require('../../Helpers');\nconst { ObfuscatedConnection } = require('./Connection');\nconst { AbridgedPacketCodec } = require('./TCPAbridged');\nconst CTR = require('../../crypto/CTR');\n\nclass ObfuscatedIO {\n    header = undefined;\n\n    constructor(connection) {\n        this.connection = connection.socket;\n        const res = this.initHeader(connection.PacketCodecClass);\n        this.header = res.random;\n\n        this._encrypt = res.encryptor;\n        this._decrypt = res.decryptor;\n    }\n\n    initHeader(packetCodec) {\n        // Obfuscated messages secrets cannot start with any of these\n        const keywords = [Buffer.from('50567247', 'hex'), Buffer.from('474554', 'hex'),\n            Buffer.from('504f5354', 'hex'), Buffer.from('eeeeeeee', 'hex')];\n        let random;\n\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            random = generateRandomBytes(64);\n            if (random[0] !== 0xef && !(random.slice(4, 8)\n                .equals(Buffer.alloc(4)))) {\n                let ok = true;\n                for (const key of keywords) {\n                    if (key.equals(random.slice(0, 4))) {\n                        ok = false;\n                        break;\n                    }\n                }\n                if (ok) {\n                    break;\n                }\n            }\n        }\n        random = random.toJSON().data;\n\n        const randomReversed = Buffer.from(random.slice(8, 56))\n            .reverse();\n        // Encryption has \"continuous buffer\" enabled\n        const encryptKey = Buffer.from(random.slice(8, 40));\n        const encryptIv = Buffer.from(random.slice(40, 56));\n        const decryptKey = Buffer.from(randomReversed.slice(0, 32));\n        const decryptIv = Buffer.from(randomReversed.slice(32, 48));\n        const encryptor = new CTR(encryptKey, encryptIv);\n        const decryptor = new CTR(decryptKey, decryptIv);\n\n        random = Buffer.concat([\n            Buffer.from(random.slice(0, 56)), packetCodec.obfuscateTag, Buffer.from(random.slice(60)),\n        ]);\n        random = Buffer.concat([\n            Buffer.from(random.slice(0, 56)), Buffer.from(encryptor.encrypt(random)\n                .slice(56, 64)), Buffer.from(random.slice(64)),\n        ]);\n        return {\n            random,\n            encryptor,\n            decryptor,\n        };\n    }\n\n    async read(n) {\n        const data = await this.connection.readExactly(n);\n        return this._decrypt.encrypt(data);\n    }\n\n    write(data) {\n        this.connection.write(this._encrypt.encrypt(data));\n    }\n}\n\nclass ConnectionTCPObfuscated extends ObfuscatedConnection {\n    ObfuscatedIO = ObfuscatedIO;\n\n    PacketCodecClass = AbridgedPacketCodec;\n}\n\nmodule.exports = {\n    ConnectionTCPObfuscated,\n};\n","const { Connection } = require('./Connection');\nconst { ConnectionTCPFull } = require('./TCPFull');\nconst { ConnectionTCPAbridged } = require('./TCPAbridged');\nconst { ConnectionTCPObfuscated } = require('./TCPObfuscated');\n\nmodule.exports = {\n    Connection,\n    ConnectionTCPFull,\n    ConnectionTCPAbridged,\n    ConnectionTCPObfuscated,\n};\n","const MTProtoPlainSender = require('./MTProtoPlainSender');\nconst MTProtoSender = require('./MTProtoSender');\n\nconst {\n    Connection,\n    ConnectionTCPFull,\n    ConnectionTCPAbridged,\n    ConnectionTCPObfuscated,\n} = require('./connection');\n\nconst {\n    UpdateConnectionState,\n    UpdateServerTimeOffset,\n} = require('./updates');\n\nmodule.exports = {\n    Connection,\n    ConnectionTCPFull,\n    ConnectionTCPAbridged,\n    ConnectionTCPObfuscated,\n    MTProtoPlainSender,\n    MTProtoSender,\n    UpdateConnectionState,\n    UpdateServerTimeOffset,\n};\n","class UpdateConnectionState {\n    static disconnected = -1;\n\n    static connected = 1;\n\n    static broken = 0;\n\n    constructor(state, origin) {\n        this.state = state;\n        this.origin = origin;\n    }\n}\n\nclass UpdateServerTimeOffset {\n    constructor(timeOffset) {\n        this.timeOffset = timeOffset;\n    }\n}\n\nmodule.exports = {\n    UpdateConnectionState,\n    UpdateServerTimeOffset,\n};\n","class Session {\n    /**\n     * Creates a clone of this session file\n     * @param toInstance {Session|null}\n     * @returns {Session}\n     */\n\n    /* CONTEST\n    clone(toInstance = null) {\n        return toInstance || new this.constructor()\n    } */\n\n    /**\n     * Returns the currently-used data center ID.\n     */\n    get dcId() {\n        throw new Error('Not Implemented');\n    }\n\n    /**\n     * Returns the server address where the library should connect to.\n     */\n    get serverAddress() {\n        throw new Error('Not Implemented');\n    }\n\n    /**\n     * Returns the port to which the library should connect to.\n     */\n    get port() {\n        throw new Error('Not Implemented');\n    }\n\n    /**\n     * Returns an ``AuthKey`` instance associated with the saved\n     * data center, or `None` if a new one should be generated.\n     */\n    get authKey() {\n        throw new Error('Not Implemented');\n    }\n\n    /**\n     * Sets the ``AuthKey`` to be used for the saved data center.\n     * @param value\n     */\n    set authKey(value) {\n        throw new Error('Not Implemented');\n    }\n\n    /**\n     * Sets the information of the data center address and port that\n     * the library should connect to, as well as the data center ID,\n     * which is currently unused.\n     * @param dcId {number}\n     * @param serverAddress {string}\n     * @param port {number}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setDC(dcId, serverAddress, port) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Returns an ID of the takeout process initialized for this session,\n     * or `None` if there's no were any unfinished takeout requests.\n     */\n    /* CONTEST\n    get takeoutId() {\n        throw new Error('Not Implemented')\n    }\n    */\n    /**\n     * Sets the ID of the unfinished takeout process for this session.\n     * @param value\n     */\n    /* CONTEST\n    set takeoutId(value) {\n        throw new Error('Not Implemented')\n    }\n    */\n    /**\n     * Returns the ``UpdateState`` associated with the given `entity_id`.\n     * If the `entity_id` is 0, it should return the ``UpdateState`` for\n     * no specific channel (the \"general\" state). If no state is known\n     * it should ``return None``.\n     * @param entityId\n     */\n    /* CONTEST\n    getUpdateState(entityId) {\n        throw new Error('Not Implemented')\n    }\n\n     */\n\n    /**\n     * Sets the given ``UpdateState`` for the specified `entity_id`, which\n     * should be 0 if the ``UpdateState`` is the \"general\" state (and not\n     * for any specific channel).\n     * @param entityId\n     * @param state\n     */\n    /* CONTEST\n    setUpdateState(entityId, state) {\n        throw new Error('Not Implemented')\n    }\n\n     */\n\n    /**\n     * Called on client disconnection. Should be used to\n     * free any used resources. Can be left empty if none.\n     */\n\n    /* CONTEST\n    close() {\n\n    }\n\n     */\n\n    /**\n     * called whenever important properties change. It should\n     * make persist the relevant session information to disk.\n     */\n    save() {\n        throw new Error('Not Implemented');\n    }\n\n    /**\n     * Called upon client.log_out(). Should delete the stored\n     * information from disk since it's not valid anymore.\n     */\n\n    delete() {\n        throw new Error('Not Implemented');\n    }\n\n    /**\n     * Lists available sessions. Not used by the library itself.\n     */\n    /* CONTEST\n    listSessions() {\n        throw new Error('Not Implemented')\n    }\n\n     */\n\n    /**\n     * Processes the input ``TLObject`` or ``list`` and saves\n     * whatever information is relevant (e.g., ID or access hash).\n     * @param tlo\n     */\n    /* CONTEST\n    processEntities(tlo) {\n        throw new Error('Not Implemented')\n    }\n\n     */\n\n    /**\n     * Turns the given key into an ``InputPeer`` (e.g. ``InputPeerUser``).\n     * The library uses this method whenever an ``InputPeer`` is needed\n     * to suit several purposes (e.g. user only provided its ID or wishes\n     * to use a cached username to avoid extra RPC).\n     */\n    /* CONTEST\n    getInputEntity(key) {\n        throw new Error('Not Implemented')\n    }\n\n     */\n}\n\nmodule.exports = Session;\n","/* eslint-disable no-restricted-globals */\nconst StorageSession = require('./StorageSession');\n\nconst CACHE_NAME = 'GramJs';\n\nclass CacheApiSession extends StorageSession {\n    async _delete() {\n        const request = new Request(this._storageKey);\n        const cache = await self.caches.open(CACHE_NAME);\n        return cache.delete(request);\n    }\n\n    async _fetchFromCache() {\n        const request = new Request(this._storageKey);\n        const cache = await self.caches.open(CACHE_NAME);\n        const cached = await cache.match(request);\n        return cached ? cached.text() : undefined;\n    }\n\n    async _saveToCache(data) {\n        const request = new Request(this._storageKey);\n        const response = new Response(data);\n        const cache = await self.caches.open(CACHE_NAME);\n        return cache.put(request, response);\n    }\n}\n\nmodule.exports = CacheApiSession;\n","const MemorySession = require('./Memory');\nconst AuthKey = require('../crypto/AuthKey');\nconst utils = require('../Utils');\n\nclass CallbackSession extends MemorySession {\n    constructor(sessionData, callback) {\n        super();\n\n        this._sessionData = sessionData;\n        this._callback = callback;\n\n        this._authKeys = {};\n    }\n\n    get authKey() {\n        throw new Error('Not supported');\n    }\n\n    set authKey(value) {\n        throw new Error('Not supported');\n    }\n\n    async load() {\n        if (!this._sessionData) {\n            return;\n        }\n\n        const {\n            mainDcId,\n            keys,\n            hashes,\n        } = this._sessionData;\n        const {\n            ipAddress,\n            port,\n        } = utils.getDC(mainDcId);\n\n        this.setDC(mainDcId, ipAddress, port, true);\n\n        await Promise.all(Object.keys(keys)\n            .map(async (dcId) => {\n                const key = typeof keys[dcId] === 'string'\n                    ? Buffer.from(keys[dcId], 'hex')\n                    : Buffer.from(keys[dcId]);\n\n                if (hashes[dcId]) {\n                    const hash = typeof hashes[dcId] === 'string'\n                        ? Buffer.from(hashes[dcId], 'hex')\n                        : Buffer.from(hashes[dcId]);\n\n                    this._authKeys[dcId] = new AuthKey(key, hash);\n                } else {\n                    this._authKeys[dcId] = new AuthKey();\n                    await this._authKeys[dcId].setKey(key, true);\n                }\n            }));\n    }\n\n    setDC(dcId, serverAddress, port, skipOnUpdate = false) {\n        this._dcId = dcId;\n        this._serverAddress = serverAddress;\n        this._port = port;\n\n        delete this._authKeys[dcId];\n\n        if (!skipOnUpdate) {\n            void this._onUpdate();\n        }\n    }\n\n    getAuthKey(dcId = this._dcId) {\n        return this._authKeys[dcId];\n    }\n\n    setAuthKey(authKey, dcId = this._dcId) {\n        this._authKeys[dcId] = authKey;\n\n        void this._onUpdate();\n    }\n\n    getSessionData() {\n        const sessionData = {\n            mainDcId: this._dcId,\n            keys: {},\n            hashes: {},\n        };\n\n        Object\n            .keys(this._authKeys)\n            .forEach((dcId) => {\n                const authKey = this._authKeys[dcId];\n                if (!authKey || !authKey._key) return;\n\n                sessionData.keys[dcId] = authKey._key.toString('hex');\n                sessionData.hashes[dcId] = authKey._hash.toString('hex');\n            });\n\n        return sessionData;\n    }\n\n    _onUpdate() {\n        this._callback(this.getSessionData());\n    }\n\n    delete() {\n        this._callback(undefined);\n    }\n}\n\nmodule.exports = CallbackSession;\n","const idb = require('idb-keyval');\nconst StorageSession = require('./StorageSession');\n\nconst CACHE_NAME = 'GramJs';\n\nclass IdbSession extends StorageSession {\n    _delete() {\n        return idb.del(`${CACHE_NAME}:${this._storageKey}`);\n    }\n\n    _fetchFromCache() {\n        return idb.get(`${CACHE_NAME}:${this._storageKey}`);\n    }\n\n    _saveToCache(data) {\n        return idb.set(`${CACHE_NAME}:${this._storageKey}`, data);\n    }\n}\n\nmodule.exports = IdbSession;\n","const StorageSession = require('./StorageSession');\n\nclass LocalStorageSession extends StorageSession {\n    _delete() {\n        return localStorage.removeItem(this._storageKey);\n    }\n\n    _fetchFromCache() {\n        return localStorage.getItem(this._storageKey);\n    }\n\n    _saveToCache(data) {\n        return localStorage.setItem(this._storageKey, data);\n    }\n}\n\nmodule.exports = LocalStorageSession;\n","const Session = require('./Abstract');\n\nclass MemorySession extends Session {\n    constructor() {\n        super();\n\n        this._serverAddress = undefined;\n        this._dcId = 0;\n        this._port = undefined;\n        this._takeoutId = undefined;\n\n        this._entities = new Set();\n        this._updateStates = {};\n    }\n\n    get dcId() {\n        return this._dcId;\n    }\n\n    get serverAddress() {\n        return this._serverAddress;\n    }\n\n    get port() {\n        return this._port;\n    }\n\n    get authKey() {\n        return this._authKey;\n    }\n\n    set authKey(value) {\n        this._authKey = value;\n    }\n\n    setDC(dcId, serverAddress, port) {\n        this._dcId = dcId | 0;\n        this._serverAddress = serverAddress;\n        this._port = port;\n    }\n\n    /* CONTEST\n    get takeoutId() {\n        return this._takeoutId\n    }\n\n    set takeoutId(value) {\n        this._takeoutId = value\n    }\n\n    getUpdateState(entityId) {\n        return this._updateStates[entityId]\n    }\n\n    setUpdateState(entityId, state) {\n        return this._updateStates[entityId] = state\n    }\n\n    close() {\n    }\n\n    save() {\n    }\n\n    async load() {\n\n    }\n\n    delete() {\n    }\n\n    _entityValuesToRow(id, hash, username, phone, name) {\n        // While this is a simple implementation it might be overrode by,\n        // other classes so they don't need to implement the plural form\n        // of the method. Don't remove.\n        return [id, hash, username, phone, name]\n    }\n\n    _entityToRow(e) {\n        if (!(e.classType === \"constructor\")) {\n            return\n        }\n        let p\n        let markedId\n        try {\n            p = utils.getInputPeer(e, false)\n            markedId = utils.getPeerId(p)\n        } catch (e) {\n            // Note: `get_input_peer` already checks for non-zero `accessHash`.\n            // See issues #354 and #392. It also checks that the entity\n            // is not `min`, because its `accessHash` cannot be used\n            // anywhere (since layer 102, there are two access hashes).\n            return\n        }\n        let pHash\n        if (p instanceof types.InputPeerUser || p instanceof types.InputPeerChannel) {\n            pHash = p.accessHash\n        } else if (p instanceof types.InputPeerChat) {\n            pHash = 0\n        } else {\n            return\n        }\n\n        let username = e.username\n        if (username) {\n            username = username.toLowerCase()\n        }\n        const phone = e.phone\n        const name = utils.getDisplayName(e)\n        return this._entityValuesToRow(markedId, pHash, username, phone, name)\n    }\n\n    _entitiesToRows(tlo) {\n        let entities = []\n        if (tlo.classType === \"constructor\" && utils.isListLike(tlo)) {\n            // This may be a list of users already for instance\n            entities = tlo\n        } else {\n            if (tlo instanceof Object) {\n                if ('user' in tlo) {\n                    entities.push(tlo.user)\n                }\n                if ('chats' in tlo && utils.isListLike(tlo.chats)) {\n                    entities.concat(tlo.chats)\n                }\n                if ('users' in tlo && utils.isListLike(tlo.users)) {\n                    entities.concat(tlo.users)\n                }\n            }\n        }\n        const rows = [] // Rows to add (id, hash, username, phone, name)\n        for (const e of entities) {\n            const row = this._entityToRow(e)\n            if (row) {\n                rows.push(row)\n            }\n        }\n        return rows\n    }\n\n    processEntities(tlo) {\n        const entitiesSet = this._entitiesToRows(tlo)\n        for (const e of entitiesSet) {\n            this._entities.add(e)\n        }\n    }\n\n    getEntityRowsByPhone(phone) {\n        for (const e of this._entities) { // id, hash, username, phone, name\n            if (e[3] === phone) {\n                return [e[0], e[1]]\n            }\n        }\n    }\n\n    getEntityRowsByUsername(username) {\n        for (const e of this._entities) { // id, hash, username, phone, name\n            if (e[2] === username) {\n                return [e[0], e[1]]\n            }\n        }\n    }\n\n    getEntityRowsByName(name) {\n        for (const e of this._entities) { // id, hash, username, phone, name\n            if (e[4] === name) {\n                return [e[0], e[1]]\n            }\n        }\n    }\n\n    getEntityRowsById(id, exact = true) {\n        if (exact) {\n            for (const e of this._entities) { // id, hash, username, phone, name\n                if (e[0] === id) {\n                    return [e[0], e[1]]\n                }\n            }\n        } else {\n            const ids = [utils.getPeerId(new types.PeerUser({ userId: id })),\n                utils.getPeerId(new types.PeerChat({ chatId: id })),\n                utils.getPeerId(new types.PeerChannel({ channelId: id })),\n            ]\n            for (const e of this._entities) { // id, hash, username, phone, name\n                if (ids.includes(e[0])) {\n                    return [e[0], e[1]]\n                }\n            }\n        }\n    }\n\n    getInputEntity(key) {\n        let exact\n        if (key.SUBCLASS_OF_ID !== undefined) {\n            if ([0xc91c90b6, 0xe669bf46, 0x40f202fd].includes(key.SUBCLASS_OF_ID)) {\n                // hex(crc32(b'InputPeer', b'InputUser' and b'InputChannel'))\n                // We already have an Input version, so nothing else required\n                return key\n            }\n            // Try to early return if this key can be casted as input peer\n            return utils.getInputPeer(key)\n        } else {\n            // Not a TLObject or can't be cast into InputPeer\n            if (key.classType === 'constructor') {\n                key = utils.getPeerId(key)\n                exact = true\n            } else {\n                exact = !(typeof key == 'number') || key < 0\n            }\n        }\n        let result = null\n        if (typeof key === 'string') {\n            const phone = utils.parsePhone(key)\n            if (phone) {\n                result = this.getEntityRowsByPhone(phone)\n            } else {\n                const { username, isInvite } = utils.parseUsername(key)\n                if (username && !isInvite) {\n                    result = this.getEntityRowsByUsername(username)\n                } else {\n                    const tup = utils.resolveInviteLink(key)[1]\n                    if (tup) {\n                        result = this.getEntityRowsById(tup, false)\n                    }\n                }\n            }\n        } else if (typeof key === 'number') {\n            result = this.getEntityRowsById(key, exact)\n        }\n        if (!result && typeof key === 'string') {\n            result = this.getEntityRowsByName(key)\n        }\n\n        if (result) {\n            let entityId = result[0] // unpack resulting tuple\n            const entityHash = result[1]\n            const resolved = utils.resolveId(entityId)\n            entityId = resolved[0]\n            const kind = resolved[1]\n            // removes the mark and returns type of entity\n            if (kind === types.PeerUser) {\n                return new types.InputPeerUser({ userId: entityId, accessHash: entityHash })\n            } else if (kind === types.PeerChat) {\n                return new types.InputPeerChat({ chatId: entityId })\n            } else if (kind === types.PeerChannel) {\n                return new types.InputPeerChannel({ channelId: entityId, accessHash: entityHash })\n            }\n        } else {\n            throw new Error('Could not find input entity with key ' + key)\n        }\n    } */\n}\n\nmodule.exports = MemorySession;\n","const MemorySession = require('./Memory');\nconst AuthKey = require('../crypto/AuthKey');\nconst utils = require('../Utils');\n\nconst STORAGE_KEY_BASE = 'GramJs-session-';\nconst SESSION_DATA_PREFIX = 'session:';\n\nclass StorageSession extends MemorySession {\n    constructor(sessionInfo) {\n        super();\n\n        this._authKeys = {};\n\n        if (sessionInfo && sessionInfo.startsWith(SESSION_DATA_PREFIX)) {\n            this._sessionString = sessionInfo;\n        } else if (sessionInfo) {\n            this._storageKey = sessionInfo;\n        }\n    }\n\n    get authKey() {\n        throw new Error('Not supported');\n    }\n\n    set authKey(value) {\n        throw new Error('Not supported');\n    }\n\n    async load() {\n        if (this._sessionString) {\n            await this._loadFromSessionString();\n            return;\n        }\n\n        if (!this._storageKey) {\n            return;\n        }\n\n        try {\n            const json = await this._fetchFromCache();\n            const {\n                mainDcId,\n                keys,\n                hashes,\n            } = JSON.parse(json);\n            const {\n                ipAddress,\n                port,\n            } = utils.getDC(mainDcId);\n\n            this.setDC(mainDcId, ipAddress, port, true);\n\n            Object.keys(keys)\n                .forEach((dcId) => {\n                    if (keys[dcId] && hashes[dcId]) {\n                        this._authKeys[dcId] = new AuthKey(\n                            Buffer.from(keys[dcId].data),\n                            Buffer.from(hashes[dcId].data),\n                        );\n                    }\n                });\n        } catch (err) {\n            // eslint-disable-next-line no-console\n            console.warn('Failed to retrieve or parse session from storage');\n            // eslint-disable-next-line no-console\n            console.warn(err);\n        }\n    }\n\n    setDC(dcId, serverAddress, port, skipUpdateStorage = false) {\n        this._dcId = dcId;\n        this._serverAddress = serverAddress;\n        this._port = port;\n\n        delete this._authKeys[dcId];\n\n        if (!skipUpdateStorage) {\n            void this._updateStorage();\n        }\n    }\n\n    async save() {\n        if (!this._storageKey) {\n            this._storageKey = generateStorageKey();\n        }\n\n        await this._updateStorage();\n\n        return this._storageKey;\n    }\n\n    getAuthKey(dcId = this._dcId) {\n        return this._authKeys[dcId];\n    }\n\n    setAuthKey(authKey, dcId = this._dcId) {\n        this._authKeys[dcId] = authKey;\n\n        void this._updateStorage();\n    }\n\n    getSessionData(asHex) {\n        const sessionData = {\n            mainDcId: this._dcId,\n            keys: {},\n            hashes: {},\n        };\n\n        Object\n            .keys(this._authKeys)\n            .forEach((dcId) => {\n                const authKey = this._authKeys[dcId];\n                if (!authKey._key) return;\n\n                sessionData.keys[dcId] = asHex ? authKey._key.toString('hex') : authKey._key;\n                sessionData.hashes[dcId] = asHex ? authKey._hash.toString('hex') : authKey._hash;\n            });\n\n        return sessionData;\n    }\n\n    async _loadFromSessionString() {\n        const [, mainDcIdStr, mainDcKey] = this._sessionString.split(':');\n        const mainDcId = Number(mainDcIdStr);\n        const {\n            ipAddress,\n            port,\n        } = utils.getDC(mainDcId);\n        this.setDC(mainDcId, ipAddress, port);\n        const authKey = new AuthKey();\n        await authKey.setKey(Buffer.from(mainDcKey, 'hex'), true);\n        this.setAuthKey(authKey, mainDcId);\n    }\n\n    async _updateStorage() {\n        if (!this._storageKey) {\n            return;\n        }\n\n        try {\n            await this._saveToCache(JSON.stringify(this.getSessionData()));\n        } catch (err) {\n            // eslint-disable-next-line no-console\n            console.warn('Failed to update session in storage');\n            // eslint-disable-next-line no-console\n            console.warn(err);\n        }\n    }\n\n    async delete() {\n        try {\n            const deleted = await this._delete();\n            return deleted;\n        } catch (err) {\n            // eslint-disable-next-line no-console\n            console.warn('Failed to delete session from storage');\n            // eslint-disable-next-line no-console\n            console.warn(err);\n        }\n        return undefined;\n    }\n\n    // @abstract\n    _delete() {\n        throw new Error('Not Implemented');\n    }\n\n    // @abstract\n    _fetchFromCache() {\n        throw new Error('Not Implemented');\n    }\n\n    // @abstract\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _saveToCache(data) {\n        throw new Error('Not Implemented');\n    }\n}\n\nfunction generateStorageKey() {\n    // Creating two sessions at the same moment is not expected nor supported.\n    return `${STORAGE_KEY_BASE}${Date.now()}`;\n}\n\nmodule.exports = StorageSession;\n","const MemorySession = require('./Memory');\nconst AuthKey = require('../crypto/AuthKey');\nconst BinaryReader = require('../extensions/BinaryReader');\n\nconst CURRENT_VERSION = '1';\n\nclass StringSession extends MemorySession {\n    /**\n     * This session file can be easily saved and loaded as a string. According\n     * to the initial design, it contains only the data that is necessary for\n     * successful connection and authentication, so takeout ID is not stored.\n\n     * It is thought to be used where you don't want to create any on-disk\n     * files but would still like to be able to save and load existing sessions\n     * by other means.\n\n     * You can use custom `encode` and `decode` functions, if present:\n\n     * `encode` definition must be ``function encode(value: Buffer) -> string:``.\n     * `decode` definition must be ``function decode(value: string) -> Buffer:``.\n     * @param session {string|null}\n     */\n    constructor(session = undefined) {\n        super();\n        if (session) {\n            if (session[0] !== CURRENT_VERSION) {\n                throw new Error('Not a valid string');\n            }\n            session = session.slice(1);\n            const r = StringSession.decode(session);\n            const reader = new BinaryReader(r);\n            this._dcId = reader.read(1)\n                .readUInt8(0);\n            const serverAddressLen = reader.read(2)\n                .readInt16BE(0);\n            this._serverAddress = String(reader.read(serverAddressLen));\n            this._port = reader.read(2)\n                .readInt16BE(0);\n            this._key = reader.read(-1);\n        }\n    }\n\n    /**\n     * @param x {Buffer}\n     * @returns {string}\n     */\n    static encode(x) {\n        return x.toString('base64');\n    }\n\n    /**\n     * @param x {string}\n     * @returns {Buffer}\n     */\n    static decode(x) {\n        return Buffer.from(x, 'base64');\n    }\n\n    async load() {\n        if (this._key) {\n            this._authKey = new AuthKey();\n            await this._authKey.setKey(this._key);\n        }\n    }\n\n    save() {\n        if (!this.authKey) {\n            return '';\n        }\n        const dcBuffer = Buffer.from([this.dcId]);\n        const addressBuffer = Buffer.from(this.serverAddress);\n        const addressLengthBuffer = Buffer.alloc(2);\n        addressLengthBuffer.writeInt16BE(addressBuffer.length, 0);\n        const portBuffer = Buffer.alloc(2);\n        portBuffer.writeInt16BE(this.port, 0);\n\n        return CURRENT_VERSION + StringSession.encode(Buffer.concat([\n            dcBuffer,\n            addressLengthBuffer,\n            addressBuffer,\n            portBuffer,\n            this.authKey.getKey(),\n        ]));\n    }\n\n    getAuthKey(dcId) {\n        if (dcId && dcId !== this.dcId) {\n            // Not supported.\n            return undefined;\n        }\n\n        return this.authKey;\n    }\n\n    setAuthKey(authKey, dcId) {\n        if (dcId && dcId !== this.dcId) {\n            // Not supported.\n            return;\n        }\n\n        this.authKey = authKey;\n    }\n}\n\nmodule.exports = StringSession;\n","const Memory = require('./Memory');\nconst StringSession = require('./StringSession');\nconst CacheApiSession = require('./CacheApiSession');\nconst LocalStorageSession = require('./LocalStorageSession');\nconst IdbSession = require('./IdbSession');\nconst CallbackSession = require('./CallbackSession');\n\nmodule.exports = {\n    Memory,\n    StringSession,\n    CacheApiSession,\n    LocalStorageSession,\n    IdbSession,\n    CallbackSession,\n};\n","const api = require('./api');\n\nconst LAYER = 152;\nconst tlobjects = {};\n\nfor (const tl of Object.values(api)) {\n    if (tl.CONSTRUCTOR_ID) {\n        tlobjects[tl.CONSTRUCTOR_ID] = tl;\n    } else {\n        for (const sub of Object.values(tl)) {\n            tlobjects[sub.CONSTRUCTOR_ID] = sub;\n        }\n    }\n}\n\nmodule.exports = {\n    LAYER,\n    tlobjects,\n};\n","const {\n    parseTl,\n    serializeBytes,\n    serializeDate,\n} = require('./generationHelpers');\nconst {\n    toSignedLittleBuffer,\n} = require('../Helpers');\n\nconst tlContent = require('./apiTl');\nconst schemeContent = require('./schemaTl');\n\n/* CONTEST\nconst NAMED_AUTO_CASTS = new Set([\n    'chatId,int'\n])\nconst NAMED_BLACKLIST = new Set([\n    'discardEncryption'\n])\nconst AUTO_CASTS = new Set([\n    'InputPeer',\n    'InputChannel',\n    'InputUser',\n    'InputDialogPeer',\n    'InputNotifyPeer',\n    'InputMedia',\n    'InputPhoto',\n    'InputMessage',\n    'InputDocument',\n    'InputChatPhoto'\n])\n\n */\n// eslint-disable-next-line no-restricted-globals\nconst CACHING_SUPPORTED = typeof self !== 'undefined' && self.localStorage !== undefined;\n\nconst CACHE_KEY = 'GramJs:apiCache';\n\nfunction buildApiFromTlSchema() {\n    let definitions;\n    const fromCache = CACHING_SUPPORTED && loadFromCache();\n\n    if (fromCache) {\n        definitions = fromCache;\n    } else {\n        definitions = loadFromTlSchemas();\n\n        if (CACHING_SUPPORTED) {\n            localStorage.setItem(CACHE_KEY, JSON.stringify(definitions));\n        }\n    }\n\n    return mergeWithNamespaces(\n        createClasses('constructor', definitions.constructors),\n        createClasses('request', definitions.requests),\n    );\n}\n\nfunction loadFromCache() {\n    const jsonCache = localStorage.getItem(CACHE_KEY);\n    return jsonCache && JSON.parse(jsonCache);\n}\n\nfunction loadFromTlSchemas() {\n    const [constructorParamsApi, functionParamsApi] = extractParams(tlContent);\n    const [constructorParamsSchema, functionParamsSchema] = extractParams(schemeContent);\n    const constructors = [].concat(constructorParamsApi, constructorParamsSchema);\n    const requests = [].concat(functionParamsApi, functionParamsSchema);\n\n    return {\n        constructors,\n        requests,\n    };\n}\n\nfunction mergeWithNamespaces(obj1, obj2) {\n    const result = { ...obj1 };\n\n    Object.keys(obj2)\n        .forEach((key) => {\n            if (typeof obj2[key] === 'function' || !result[key]) {\n                result[key] = obj2[key];\n            } else {\n                Object.assign(result[key], obj2[key]);\n            }\n        });\n\n    return result;\n}\n\nfunction extractParams(fileContent) {\n    const f = parseTl(fileContent);\n    const constructors = [];\n    const functions = [];\n    for (const d of f) {\n        if (d.isFunction) {\n            functions.push(d);\n        } else {\n            constructors.push(d);\n        }\n    }\n    return [constructors, functions];\n}\n\nfunction argToBytes(x, type) {\n    switch (type) {\n        case 'int': {\n            const i = Buffer.alloc(4);\n            i.writeInt32LE(x, 0);\n            return i;\n        }\n        case 'long':\n            return toSignedLittleBuffer(x, 8);\n        case 'int128':\n            return toSignedLittleBuffer(x, 16);\n        case 'int256':\n            return toSignedLittleBuffer(x, 32);\n        case 'double': {\n            const d = Buffer.alloc(8);\n            d.writeDoubleLE(x, 0);\n            return d;\n        }\n        case 'string':\n            return serializeBytes(x);\n        case 'Bool':\n            return x ? Buffer.from('b5757299', 'hex') : Buffer.from('379779bc', 'hex');\n        case 'true':\n            return Buffer.alloc(0);\n        case 'bytes':\n            return serializeBytes(x);\n        case 'date':\n            return serializeDate(x);\n        default:\n            return x.getBytes();\n    }\n}\n\n/*\nCONTEST\nasync function getInputFromResolve(utils, client, peer, peerType) {\n    switch (peerType) {\n        case 'InputPeer':\n            return utils.getInputPeer(await client.getInputEntity(peer))\n        case 'InputChannel':\n            return utils.getInputChannel(await client.getInputEntity(peer))\n        case 'InputUser':\n            return utils.getInputUser(await client.getInputEntity(peer))\n        case 'InputDialogPeer':\n            return await client._getInputDialog(peer)\n        case 'InputNotifyPeer':\n            return await client._getInputNotify(peer)\n        case 'InputMedia':\n            return utils.getInputMedia(peer)\n        case 'InputPhoto':\n            return utils.getInputPhoto(peer)\n        case 'InputMessage':\n            return utils.getInputMessage(peer)\n        case 'InputDocument':\n            return utils.getInputDocument(peer)\n        case 'InputChatPhoto':\n            return utils.getInputChatPhoto(peer)\n        case 'chatId,int' :\n            return await client.getPeerId(peer, false)\n        default:\n            throw new Error('unsupported peer type : ' + peerType)\n    }\n}\n*/\nfunction getArgFromReader(reader, arg) {\n    if (arg.isVector) {\n        if (arg.useVectorId) {\n            reader.readInt();\n        }\n        const temp = [];\n        const len = reader.readInt();\n        arg.isVector = false;\n        for (let i = 0; i < len; i++) {\n            temp.push(getArgFromReader(reader, arg));\n        }\n        arg.isVector = true;\n        return temp;\n    } else if (arg.flagIndicator) {\n        return reader.readInt();\n    } else {\n        switch (arg.type) {\n            case 'int':\n                return reader.readInt();\n            case 'long':\n                return reader.readLong();\n            case 'int128':\n                return reader.readLargeInt(128);\n            case 'int256':\n                return reader.readLargeInt(256);\n            case 'double':\n                return reader.readDouble();\n            case 'string':\n                return reader.tgReadString();\n            case 'Bool':\n                return reader.tgReadBool();\n            case 'true':\n                return true;\n            case 'bytes':\n                return reader.tgReadBytes();\n            case 'date':\n                return reader.tgReadDate();\n            default:\n                if (!arg.skipConstructorId) {\n                    return reader.tgReadObject();\n                } else {\n                    throw new Error(`Unknown type ${arg}`);\n                }\n        }\n    }\n}\n\nfunction createClasses(classesType, params) {\n    const classes = {};\n    for (const classParams of params) {\n        const {\n            name,\n            constructorId,\n            subclassOfId,\n            argsConfig,\n            namespace,\n            result,\n        } = classParams;\n        const fullName = [namespace, name].join('.')\n            .replace(/^\\./, '');\n\n        class VirtualClass {\n            static CONSTRUCTOR_ID = constructorId;\n\n            static SUBCLASS_OF_ID = subclassOfId;\n\n            static className = fullName;\n\n            static classType = classesType;\n\n            CONSTRUCTOR_ID = constructorId;\n\n            SUBCLASS_OF_ID = subclassOfId;\n\n            className = fullName;\n\n            classType = classesType;\n\n            constructor(args) {\n                args = args || {};\n                Object.keys(args)\n                    .forEach((argName) => {\n                        this[argName] = args[argName];\n                    });\n            }\n\n            static fromReader(reader) {\n                const args = {};\n\n                for (const argName in argsConfig) {\n                    if (argsConfig.hasOwnProperty(argName)) {\n                        const arg = argsConfig[argName];\n                        if (arg.isFlag) {\n                            const flagGroupSuffix = arg.flagGroup > 1 ? arg.flagGroup : '';\n                            const flagValue = args[`flags${flagGroupSuffix}`] & (1 << arg.flagIndex);\n                            if (arg.type === 'true') {\n                                args[argName] = Boolean(flagValue);\n                                continue;\n                            }\n\n                            args[argName] = flagValue ? getArgFromReader(reader, arg) : undefined;\n                        } else {\n                            args[argName] = getArgFromReader(reader, arg);\n                        }\n                    }\n                }\n                return new VirtualClass(args);\n            }\n\n            getBytes() {\n                // The next is pseudo-code:\n                const idForBytes = this.CONSTRUCTOR_ID;\n                const c = Buffer.alloc(4);\n                c.writeUInt32LE(idForBytes, 0);\n                const buffers = [c];\n                for (const arg in argsConfig) {\n                    if (argsConfig.hasOwnProperty(arg)) {\n                        if (argsConfig[arg].isFlag) {\n                            if ((this[arg] === false && argsConfig[arg].type === 'true')\n                                || this[arg] === undefined) {\n                                continue;\n                            }\n                        }\n                        if (argsConfig[arg].isVector) {\n                            if (argsConfig[arg].useVectorId) {\n                                buffers.push(Buffer.from('15c4b51c', 'hex'));\n                            }\n                            const l = Buffer.alloc(4);\n                            l.writeInt32LE(this[arg].length, 0);\n                            buffers.push(l, Buffer.concat(this[arg].map((x) => argToBytes(x, argsConfig[arg].type))));\n                        } else if (argsConfig[arg].flagIndicator) {\n                            if (!Object.values(argsConfig)\n                                .some((f) => f.isFlag)) {\n                                buffers.push(Buffer.alloc(4));\n                            } else {\n                                let flagCalculate = 0;\n                                for (const f in argsConfig) {\n                                    if (argsConfig[f].isFlag) {\n                                        if ((this[f] === false && argsConfig[f].type === 'true')\n                                            || this[f] === undefined) {\n                                            flagCalculate |= 0;\n                                        } else {\n                                            flagCalculate |= 1 << argsConfig[f].flagIndex;\n                                        }\n                                    }\n                                }\n                                const f = Buffer.alloc(4);\n                                f.writeUInt32LE(flagCalculate, 0);\n                                buffers.push(f);\n                            }\n                        } else {\n                            buffers.push(argToBytes(this[arg], argsConfig[arg].type));\n\n                            if (this[arg] && typeof this[arg].getBytes === 'function') {\n                                let boxed = (argsConfig[arg].type.charAt(argsConfig[arg].type.indexOf('.') + 1));\n                                boxed = boxed === boxed.toUpperCase();\n                                if (!boxed) {\n                                    buffers.shift();\n                                }\n                            }\n                        }\n                    }\n                }\n                return Buffer.concat(buffers);\n            }\n\n            readResult(reader) {\n                if (classesType !== 'request') {\n                    throw new Error('`readResult()` called for non-request instance');\n                }\n\n                const m = result.match(/Vector<(int|long)>/);\n                if (m) {\n                    reader.readInt();\n                    const temp = [];\n                    const len = reader.readInt();\n                    if (m[1] === 'int') {\n                        for (let i = 0; i < len; i++) {\n                            temp.push(reader.readInt());\n                        }\n                    } else {\n                        for (let i = 0; i < len; i++) {\n                            temp.push(reader.readLong());\n                        }\n                    }\n                    return temp;\n                } else {\n                    return reader.tgReadObject();\n                }\n            }\n\n            /* CONTEST\n            async resolve(client, utils) {\n\n                if (classesType !== 'request') {\n                    throw new Error('`resolve()` called for non-request instance')\n                }\n\n                for (const arg in argsConfig) {\n                    if (argsConfig.hasOwnProperty(arg)) {\n                        if (!AUTO_CASTS.has(argsConfig[arg].type)) {\n                            if (!NAMED_AUTO_CASTS.has(`${argsConfig[arg].name},${argsConfig[arg].type}`)) {\n                                continue\n                            }\n                        }\n                        if (argsConfig[arg].isFlag) {\n                            if (!this[arg]) {\n                                continue\n                            }\n                        }\n                        if (argsConfig[arg].isVector) {\n                            const temp = []\n                            for (const x of this[arg]) {\n                                temp.push(await getInputFromResolve(utils, client, x, argsConfig[arg].type))\n                            }\n                            this[arg] = temp\n                        } else {\n                            this[arg] = await getInputFromResolve(utils, client, this[arg], argsConfig[arg].type)\n                        }\n                    }\n                }\n            } */\n        }\n\n        if (namespace) {\n            if (!classes[namespace]) {\n                classes[namespace] = {};\n            }\n            classes[namespace][name] = VirtualClass;\n        } else {\n            classes[name] = VirtualClass;\n        }\n    }\n\n    return classes;\n}\n\nmodule.exports = buildApiFromTlSchema();\n","// const { inflate } = require('pako/dist/pako_inflate');\nconst { serializeBytes } = require('../index');\n\n// CONTEST const { deflate } = require('pako/dist/pako_deflate')\n\nclass GZIPPacked {\n    static CONSTRUCTOR_ID = 0x3072cfa1;\n\n    static classType = 'constructor';\n\n    constructor(data) {\n        this.data = data;\n        this.CONSTRUCTOR_ID = 0x3072cfa1;\n        this.classType = 'constructor';\n    }\n\n    static async gzipIfSmaller(contentRelated, data) {\n        if (contentRelated && data.length > 512) {\n            const gzipped = await (new GZIPPacked(data)).toBytes();\n            if (gzipped.length < data.length) {\n                return gzipped;\n            }\n        }\n        return data;\n    }\n\n    static gzip(input) {\n        return Buffer.from(input);\n        // TODO this usually makes it faster for large requests\n        // return Buffer.from(deflate(input, { level: 9, gzip: true }))\n    }\n\n    static ungzip(input) {\n        // return Buffer.from(inflate(input));\n        return Buffer.from(\"\")\n    }\n\n    static read(reader) {\n        const constructor = reader.readInt(false);\n        if (constructor !== GZIPPacked.CONSTRUCTOR_ID) {\n            throw new Error('not equal');\n        }\n        return GZIPPacked.gzip(reader.tgReadBytes());\n    }\n\n    static async fromReader(reader) {\n        return new GZIPPacked(await GZIPPacked.ungzip(reader.tgReadBytes()));\n    }\n\n    async toBytes() {\n        const g = Buffer.alloc(4);\n        g.writeUInt32LE(GZIPPacked.CONSTRUCTOR_ID, 0);\n        return Buffer.concat([\n            g,\n            serializeBytes(await GZIPPacked.gzip(this.data)),\n        ]);\n    }\n}\n\nmodule.exports = GZIPPacked;\n","const TLMessage = require('./TLMessage');\n\nclass MessageContainer {\n    static CONSTRUCTOR_ID = 0x73f1f8dc;\n\n    static classType = 'constructor';\n\n    // Maximum size in bytes for the inner payload of the container.\n    // Telegram will close the connection if the payload is bigger.\n    // The overhead of the container itself is subtracted.\n    static MAXIMUM_SIZE = 1044456 - 8;\n\n    // Maximum amount of messages that can't be sent inside a single\n    // container, inclusive. Beyond this limit Telegram will respond\n    // with BAD_MESSAGE 64 (invalid container).\n    //\n    // This limit is not 100% accurate and may in some cases be higher.\n    // However, sending up to 100 requests at once in a single container\n    // is a reasonable conservative value, since it could also depend on\n    // other factors like size per request, but we cannot know this.\n    static MAXIMUM_LENGTH = 100;\n\n    constructor(messages) {\n        this.CONSTRUCTOR_ID = 0x73f1f8dc;\n        this.messages = messages;\n        this.classType = 'constructor';\n    }\n\n    static fromReader(reader) {\n        const messages = [];\n        const length = reader.readInt();\n        for (let x = 0; x < length; x++) {\n            const msgId = reader.readLong();\n            const seqNo = reader.readInt();\n            const containerLength = reader.readInt();\n            const before = reader.tellPosition();\n            const obj = reader.tgReadObject();\n            reader.setPosition(before + containerLength);\n            const tlMessage = new TLMessage(msgId, seqNo, obj);\n            messages.push(tlMessage);\n        }\n        return new MessageContainer(messages);\n    }\n}\n\nmodule.exports = MessageContainer;\n","const { RpcError } = require('../index').constructors;\nconst GZIPPacked = require('./GZIPPacked');\n\nclass RPCResult {\n    static CONSTRUCTOR_ID = 0xf35c6d01;\n\n    static classType = 'constructor';\n\n    constructor(reqMsgId, body, error) {\n        this.CONSTRUCTOR_ID = 0xf35c6d01;\n        this.reqMsgId = reqMsgId;\n        this.body = body;\n        this.error = error;\n        this.classType = 'constructor';\n    }\n\n    static async fromReader(reader) {\n        const msgId = reader.readLong();\n        const innerCode = reader.readInt(false);\n        if (innerCode === RpcError.CONSTRUCTOR_ID) {\n            return new RPCResult(msgId, undefined, RpcError.fromReader(reader));\n        }\n        if (innerCode === GZIPPacked.CONSTRUCTOR_ID) {\n            return new RPCResult(msgId, (await GZIPPacked.fromReader(reader)).data);\n        }\n        reader.seek(-4);\n        // This reader.read() will read more than necessary, but it's okay.\n        // We could make use of MessageContainer's length here, but since\n        // it's not necessary we don't need to care about it.\n        return new RPCResult(msgId, reader.read(), undefined);\n    }\n}\n\nmodule.exports = RPCResult;\n","class TLMessage {\n    static SIZE_OVERHEAD = 12;\n\n    static classType = 'constructor';\n\n    constructor(msgId, seqNo, obj) {\n        this.msgId = msgId;\n        this.seqNo = seqNo;\n        this.obj = obj;\n        this.classType = 'constructor';\n    }\n}\n\nmodule.exports = TLMessage;\n","const TLMessage = require('./TLMessage');\nconst RPCResult = require('./RPCResult');\nconst MessageContainer = require('./MessageContainer');\nconst GZIPPacked = require('./GZIPPacked');\n\nconst coreObjects = {\n    [RPCResult.CONSTRUCTOR_ID]: RPCResult,\n    [GZIPPacked.CONSTRUCTOR_ID]: GZIPPacked,\n    [MessageContainer.CONSTRUCTOR_ID]: MessageContainer,\n};\n\nmodule.exports = {\n    TLMessage,\n    RPCResult,\n    MessageContainer,\n    GZIPPacked,\n    coreObjects,\n};\n","export enum ActionCommands {\n  CID_AuthLoginReq = 1001,\n  CID_AuthLoginRes = 1002,\n  CID_AuthNativeReq = 1003,\n  CID_AuthNativeRes = 1004,\n  CID_AuthPreLoginReq = 1005,\n  CID_AuthPreLoginRes = 1006,\n  CID_AuthStep1Req = 1007,\n  CID_AuthStep1Res = 1008,\n  CID_AuthStep2Req = 1009,\n  CID_AuthStep2Res = 1010,\n  CID_InitAppRes = 1011,\n  CID_UpdateProfileReq = 1012,\n  CID_UpdateProfileRes = 1013,\n  CID_UpdateUsernameReq = 1014,\n  CID_UpdateUsernameRes = 1015,\n  CID_UploadProfilePhotoReq = 1016,\n  CID_UploadProfilePhotoRes = 1017,\n  CID_LoadChatsReq = 2001,\n  CID_LoadChatsRes = 2002,\n  CID_DownloadReq = 3001,\n  CID_DownloadRes = 3002,\n  CID_UploadReq = 3003,\n  CID_UploadRes = 3004,\n  CID_AnswerCallbackButtonReq = 4001,\n  CID_AnswerCallbackButtonRes = 4002,\n  CID_DownloadMsgReq = 4003,\n  CID_DownloadMsgRes = 4004,\n  CID_GenMsgIdReq = 4005,\n  CID_GenMsgIdRes = 4006,\n  CID_MsgDeleteReq = 4007,\n  CID_MsgDeleteRes = 4008,\n  CID_MsgListReq = 4009,\n  CID_MsgListRes = 4010,\n  CID_MsgUpdateReq = 4011,\n  CID_MsgUpdateRes = 4012,\n  CID_RemoveMessagesReq = 4013,\n  CID_RemoveMessagesRes = 4014,\n  CID_SendBotMsgReq = 4015,\n  CID_SendBotMsgRes = 4016,\n  CID_SendReq = 4017,\n  CID_SendRes = 4018,\n  CID_UpdateCmdReq = 4019,\n  CID_UpdateCmdRes = 4020,\n  CID_UploadMsgReq = 4021,\n  CID_UploadMsgRes = 4022,\n  CID_OtherNotify = 5001,\n  CID_StopChatStreamReq = 5002,\n  CID_SyncReq = 6001,\n  CID_SyncRes = 6002,\n  CID_DownloadUserReq = 7001,\n  CID_DownloadUserRes = 7002,\n  CID_GenUserIdReq = 7003,\n  CID_GenUserIdRes = 7004,\n  CID_UploadUserReq = 7005,\n  CID_UploadUserRes = 7006,\n}\n\nexport const ActionCommandsName = {\n  1001: \"CID_AuthLoginReq\",\n  1002: \"CID_AuthLoginRes\",\n  1003: \"CID_AuthNativeReq\",\n  1004: \"CID_AuthNativeRes\",\n  1005: \"CID_AuthPreLoginReq\",\n  1006: \"CID_AuthPreLoginRes\",\n  1007: \"CID_AuthStep1Req\",\n  1008: \"CID_AuthStep1Res\",\n  1009: \"CID_AuthStep2Req\",\n  1010: \"CID_AuthStep2Res\",\n  1011: \"CID_InitAppRes\",\n  1012: \"CID_UpdateProfileReq\",\n  1013: \"CID_UpdateProfileRes\",\n  1014: \"CID_UpdateUsernameReq\",\n  1015: \"CID_UpdateUsernameRes\",\n  1016: \"CID_UploadProfilePhotoReq\",\n  1017: \"CID_UploadProfilePhotoRes\",\n  2001: \"CID_LoadChatsReq\",\n  2002: \"CID_LoadChatsRes\",\n  3001: \"CID_DownloadReq\",\n  3002: \"CID_DownloadRes\",\n  3003: \"CID_UploadReq\",\n  3004: \"CID_UploadRes\",\n  4001: \"CID_AnswerCallbackButtonReq\",\n  4002: \"CID_AnswerCallbackButtonRes\",\n  4003: \"CID_DownloadMsgReq\",\n  4004: \"CID_DownloadMsgRes\",\n  4005: \"CID_GenMsgIdReq\",\n  4006: \"CID_GenMsgIdRes\",\n  4007: \"CID_MsgDeleteReq\",\n  4008: \"CID_MsgDeleteRes\",\n  4009: \"CID_MsgListReq\",\n  4010: \"CID_MsgListRes\",\n  4011: \"CID_MsgUpdateReq\",\n  4012: \"CID_MsgUpdateRes\",\n  4013: \"CID_RemoveMessagesReq\",\n  4014: \"CID_RemoveMessagesRes\",\n  4015: \"CID_SendBotMsgReq\",\n  4016: \"CID_SendBotMsgRes\",\n  4017: \"CID_SendReq\",\n  4018: \"CID_SendRes\",\n  4019: \"CID_UpdateCmdReq\",\n  4020: \"CID_UpdateCmdRes\",\n  4021: \"CID_UploadMsgReq\",\n  4022: \"CID_UploadMsgRes\",\n  5001: \"CID_OtherNotify\",\n  5002: \"CID_StopChatStreamReq\",\n  6001: \"CID_SyncReq\",\n  6002: \"CID_SyncRes\",\n  7001: \"CID_DownloadUserReq\",\n  7002: \"CID_DownloadUserRes\",\n  7003: \"CID_GenUserIdReq\",\n  7004: \"CID_GenUserIdRes\",\n  7005: \"CID_UploadUserReq\",\n  7006: \"CID_UploadUserRes\",\n};\n\nexport const getActionCommandsName = (cid:ActionCommands)=>{\n   return ActionCommandsName[cid] || cid.toString();\n}\n\n","const PB = require('./protobuf');\n\nimport type {\n  ActionCommands\n} from './ActionCommands';\n\nlet bbStack: BytesType[] = [];\n\nexport interface BytesType {\n  bytes: Uint8Array;\n  offset: number;\n  limit: number;\n}\n\nexport function popByteBuffer() {\n  const bb = bbStack.pop();\n  if (!bb) return { bytes: new Uint8Array(64), offset: 0, limit: 0 };\n  bb.offset = bb.limit = 0;\n  return bb;\n}\n\nexport function toUint8Array(bb: BytesType) {\n  let bytes = bb.bytes;\n  let limit = bb.limit;\n  return bytes.length === limit ? bytes : bytes.subarray(0, limit);\n}\n\nexport function grow(bb: BytesType, count: number) {\n  let bytes = bb.bytes;\n  let offset = bb.offset;\n  let limit = bb.limit;\n  let finalOffset = offset + count;\n  if (finalOffset > bytes.length) {\n    let newBytes = new Uint8Array(finalOffset * 2);\n    newBytes.set(bytes);\n    bb.bytes = newBytes;\n  }\n  bb.offset = finalOffset;\n  if (finalOffset > limit) {\n    bb.limit = finalOffset;\n  }\n  return offset;\n}\n\nexport function advance(bb: BytesType, count: number) {\n  let offset = bb.offset;\n  if (offset + count > bb.limit) {\n    throw new Error('Read past limit');\n  }\n  bb.offset += count;\n  return offset;\n}\n\nexport function readInt32(bb: BytesType) {\n  let offset = advance(bb, 4);\n  let bytes = bb.bytes;\n  return (\n    (bytes[offset] << 24) |\n    (bytes[offset + 1] << 16) |\n    (bytes[offset + 2] << 8) |\n    bytes[offset + 3]\n  );\n}\n\nexport function writeInt32(bb: BytesType, value: number) {\n  let offset = grow(bb, 4);\n  let bytes = bb.bytes;\n  bytes[offset + 3] = value;\n  bytes[offset + 2] = value >> 8;\n  bytes[offset + 1] = value >> 16;\n  bytes[offset] = value >> 24;\n}\n\nexport function readInt16(bb: BytesType) {\n  let offset = advance(bb, 2);\n  let bytes = bb.bytes;\n\n  return (bytes[offset] << 8) | bytes[offset + 1];\n}\n\nexport function writeInt16(bb: BytesType, value: number) {\n  let offset = grow(bb, 2);\n  let bytes = bb.bytes;\n  bytes[offset + 1] = value;\n  bytes[offset] = value >> 8;\n}\n\nexport function readBytes(bb: BytesType, count: number) {\n  let offset = advance(bb, count);\n  return bb.bytes.subarray(offset, offset + count);\n}\n\nexport function writeBytes(bb: BytesType, buffer: Buffer) {\n  let offset = grow(bb, buffer.length);\n  bb.bytes.set(buffer, offset);\n}\n\nexport function wrapByteBuffer(bytes: Uint8Array) {\n  return { bytes, offset: 0, limit: bytes.length };\n}\n\nexport const HEADER_LEN: number = 16;\n\nexport interface Header {\n  length: number;\n  version: number;\n  flag: number;\n  command_id: number;\n  seq_num: number;\n  reversed: number;\n}\n\nexport class Pdu {\n  private _pbData: Uint8Array;\n  private _pbHeader: Header;\n  private _pbBody: Uint8Array;\n  private _bb: BytesType;\n\n  constructor(data?: Uint8Array) {\n    this._pbData = new Uint8Array();\n    this._pbBody = new Uint8Array();\n    this._bb = popByteBuffer();\n    this._pbHeader = {\n      length: 0,\n      version: 0,\n      flag: 0,\n      command_id: 0,\n      seq_num: 0,\n      reversed: 0,\n    };\n    if (data) {\n      this.setPbData(data);\n      this.readPbData();\n    }\n  }\n\n  getPbData(): Uint8Array {\n    return this._pbData;\n  }\n\n  setPbData(data: Uint8Array) {\n    this._pbData = data;\n  }\n\n  getPbDataLength(): number {\n    return this._pbData.length;\n  }\n\n  getPbBody(): Uint8Array {\n    return this._pbBody;\n  }\n  \n  body(): Uint8Array {\n    return this._pbBody;\n  }\n\n  getPbBodyLength(): number {\n    return this._pbBody.length;\n  }\n\n  setPbBody(body: Uint8Array) {\n    this._pbBody = body;\n  }\n\n  writeData(\n    body: Uint8Array,\n    command_id: ActionCommands,\n    seq_num: number = 0,\n    reversed: number = 0\n  ) {\n    this.setPbBody(body);\n\n    this._pbHeader = {\n      length: body.length + HEADER_LEN,\n      version: 0,\n      flag: 0,\n      command_id,\n      seq_num: seq_num,\n      reversed,\n    };\n    writeInt32(this._bb, this._pbHeader.length);\n    writeInt16(this._bb, this._pbHeader.version);\n    writeInt16(this._bb, this._pbHeader.flag);\n    writeInt16(this._bb, this._pbHeader.command_id);\n    writeInt16(this._bb, this._pbHeader.seq_num);\n    writeInt32(this._bb, this._pbHeader.reversed);\n    writeBytes(this._bb, Buffer.from(body));\n    this.setPbData(toUint8Array(this._bb));\n  }\n\n  public updateSeqNo(seq_num:number){\n    this._bb.offset = 10;\n    writeInt16(this._bb, seq_num);\n    this._pbHeader.seq_num = seq_num;\n  }\n  readPbData() {\n    const headerBb = wrapByteBuffer(this._pbData.slice(0, HEADER_LEN));\n    this._pbHeader.length = readInt32(headerBb);\n    this._pbHeader.version = readInt16(headerBb);\n    this._pbHeader.flag = readInt16(headerBb);\n    this._pbHeader.command_id = readInt16(headerBb);\n    this._pbHeader.seq_num = readInt16(headerBb);\n    this._pbHeader.reversed = readInt32(headerBb);\n    this.setPbBody(this._pbData.slice(HEADER_LEN, this._pbHeader.length));\n  }\n\n  getCommandId(): ActionCommands {\n    return this._pbHeader.command_id;\n  }\n\n  getReversed(): number {\n    return this._pbHeader.reversed;\n  }\n  getSeqNum(): number {\n    return this._pbHeader.seq_num;\n  }\n}\n\nlet seq_num = 0;\n\nexport default class BaseMsg {\n  private __cid?: any;\n  public msg?: any;\n  private __pb: any;\n  constructor(namespace: string, msg?: any) {\n    const t = namespace.split('.');\n    let pb = PB.default;\n    do {\n      const k = t.shift();\n      // @ts-ignore\n      pb = pb[k];\n    } while (t.length > 0);\n    this.__pb = pb;\n    this.setMsg(msg);\n  }\n  protected setCommandId(cid: any) {\n    this.__cid = cid;\n  }\n  setMsg(msg: any) {\n    this.msg = msg;\n  }\n  getMsg() {\n    return this.msg;\n  }\n  encode(): Uint8Array {\n    return this.__E();\n  }\n  decode(data: Uint8Array) {\n    return this.__D(data);\n  }\n  pack(): Pdu {\n    return this.__pack();\n  }\n  toHex(): string {\n    return Buffer.from(this.__E()).toString('hex');\n  }\n  fromHex(hexStr: string): any {\n    if (hexStr.indexOf('0x') === 0) {\n      hexStr = hexStr.substring(2);\n    }\n    return this.__D(Buffer.from(hexStr, 'hex'));\n  }\n  protected __E(): Uint8Array {\n    const obj = this.__pb.create(this.getMsg());\n    return this.__pb.encode(obj).finish();\n  }\n  protected __D(data: Uint8Array): any {\n    const obj = this.__pb.decode(data);\n    return this.__pb.toObject(obj);\n  }\n  protected __pack(): Pdu {\n    const pdu = new Pdu();\n    if (seq_num > 10000) {\n      seq_num = 0;\n    }\n    pdu.writeData(this.__E(), this.__cid, ++seq_num);\n    return pdu;\n  }\n}\n\n","export enum AUTH_TYPE {\n  AUTH_TYPE_USERNAME = 0,\n  AUTH_TYPE_EMAIL = 1,\n  AUTH_TYPE_MOBILE = 2,\n}\n\nexport enum EncryptType {\n  EncryptType_Wallet = 0,\n  EncryptType_Group = 1,\n  EncryptType_Message = 2,\n  EncryptType_Media = 3,\n}\n\nexport enum ERR {\n  NO_ERROR = 0,\n  ERR_SYSTEM = 1,\n  ERR_AUTH_LOGIN = 2,\n  ERR_AUTH_NEED = 3,\n}\n\nexport enum QrCodeType {\n  QrCodeType_MNEMONIC = 1,\n}\n\nexport interface ClientInfo_Type {\n  deviceModel: string;\n  systemVersion: string;\n  appVersion: string;\n}\n\nexport interface FileInfo_Type {\n  id: string;\n  size: number;\n  part: number;\n  part_total?: number;\n  buf: Buffer;\n  type: string;\n}\n\nexport interface MessageStoreRow_Type {\n  message?: PbMsg_Type;\n  messageId: number;\n  time?: number;\n  buf?: Buffer;\n}\n\nexport interface PbAction_Type {\n  text: string;\n  type: string;\n}\n\nexport interface PbAiBot_Type {\n  chatGptConfig?: PbChatGpBotConfig_Type;\n  enableAi?: boolean;\n  botApi?: string;\n  disableClearHistory?: boolean;\n  commandsFromApi?: PbCommands_Type[];\n}\n\nexport interface PbAudio_Type {\n  id: string;\n  size?: number[];\n  duration?: number[];\n  mimeType: string;\n  fileName: string;\n  performer?: string;\n  title?: string;\n  thumbnailSizes?: PbSizes_Type[];\n}\n\nexport interface PbBotInfo_Type {\n  botId: string;\n  description?: string;\n  menuButton?: PbMenuButton_Type;\n  commands?: PbCommands_Type[];\n  photo?: PbPhoto_Type;\n  aiBot?: PbAiBot_Type;\n}\n\nexport interface PbChat_Type {\n  type: string;\n  id: string;\n  title: string;\n  usernames?: PbUsernames_Type[];\n  isMuted?: boolean;\n  isMin?: boolean;\n  hasPrivateLink?: boolean;\n  isSignaturesShown?: boolean;\n  accessHash?: string;\n  isVerified?: boolean;\n  isJoinToSend?: boolean;\n  isJoinRequest?: boolean;\n  isForum?: boolean;\n  isListed?: boolean;\n  settings?: PbSettings_Type;\n  lastMessage?: PbMsg_Type;\n}\n\nexport interface PbChatFolder_Type {\n  id: number;\n  title: string;\n  channels: boolean;\n  pinnedChatIds?: string[];\n  includedChatIds?: string[];\n  excludedChatIds?: string[];\n}\n\nexport interface PbChatGpBotConfig_Type {\n  init_system_content?: string;\n  api_key?: string;\n  max_history_length?: number;\n  modelConfig?: PbChatGptModelConfig_Type;\n}\n\nexport interface PbChatGptModelConfig_Type {\n  model: string;\n  temperature: number;\n  max_tokens: number;\n  presence_penalty: number;\n}\n\nexport interface PbCommands_Type {\n  botId: string;\n  command: string;\n  description: string;\n}\n\nexport interface PbContent_Type {\n  text?: PbText_Type;\n  photo?: PbPhoto_Type;\n  voice?: PbVoice_Type;\n  action?: PbAction_Type;\n  document?: PbDocument_Type;\n  audio?: PbAudio_Type;\n}\n\nexport interface PbDimensions_Type {\n  width: number;\n  height: number;\n}\n\nexport interface PbDocument_Type {\n  id?: string;\n  fileName: string;\n  size?: number[];\n  timestamp?: number;\n  duration?: number[];\n  mimeType: string;\n  performer?: string;\n  previewBlobUrl?: string;\n  mediaType?: string;\n  mediaSize?: PbSizes_Type;\n  thumbnail?: PbThumbnail_Type;\n}\n\nexport interface PbFullInfo_Type {\n  bio?: string;\n  commonChatsCount?: number;\n  isBlocked?: boolean;\n  noVoiceMessages?: boolean;\n  botInfo?: PbBotInfo_Type;\n  pinnedMessageId?: number;\n}\n\nexport interface PbMenuButton_Type {\n  type: string;\n  text?: string;\n  url?: string;\n}\n\nexport interface PbMessageEntity_Type {\n  type: string;\n  offset: number;\n  length: number;\n  documentId?: string;\n  userId?: string;\n  url?: string;\n  language?: string;\n  cipher?: string;\n  hint?: string;\n}\n\nexport interface PbMsg_Type {\n  id: number;\n  chatId: string;\n  content: PbContent_Type;\n  date: number;\n  isOutgoing: boolean;\n  senderId?: string;\n  isForwardingAllowed?: boolean;\n  previousLocalId?: number;\n  views?: number;\n  repliesThreadInfo?: PbRepliesThreadInfo_Type;\n  reactions?: PbReactions_Type;\n}\n\nexport interface PbPhoto_Type {\n  id: string;\n  thumbnail?: PbThumbnail_Type;\n  sizes?: PbSizes_Type[];\n  isSpoiler?: boolean;\n}\n\nexport interface PbQrCode_Type {\n  type: QrCodeType;\n  data: Buffer;\n}\n\nexport interface PbReaction_Type {\n  emoticon: string;\n}\n\nexport interface PbReactionCount_Type {\n  chosenOrder?: number;\n  count: number;\n  reaction: PbReaction_Type;\n}\n\nexport interface PbReactions_Type {\n  canSeeList?: boolean;\n  results?: PbReactionCount_Type[];\n}\n\nexport interface PbRepliesThreadInfo_Type {\n  isComments: boolean;\n  threadId: number;\n  chatId: string;\n  originChannelId: string;\n  messagesCount: number;\n  lastMessageId: number;\n  recentReplierIds?: string[];\n}\n\nexport interface PbSettings_Type {\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n}\n\nexport interface PbSizes_Type {\n  width: number;\n  height: number;\n  type: string;\n}\n\nexport interface PbText_Type {\n  text: string;\n  entities?: PbMessageEntity_Type[];\n}\n\nexport interface PbThumbnail_Type {\n  width: number;\n  height: number;\n  dataUri: string;\n}\n\nexport interface PbUser_Type {\n  id: string;\n  firstName?: string;\n  usernames?: PbUsernames_Type[];\n  isMin?: boolean;\n  isPremium?: boolean;\n  type: string;\n  hasVideoAvatar?: boolean;\n  canBeInvitedToGroup?: boolean;\n  phoneNumber: string;\n  noStatus?: boolean;\n  accessHash?: string;\n  fullInfo?: PbFullInfo_Type;\n  lastName?: string;\n  isSelf?: boolean;\n  avatarHash?: string;\n  photos?: PbPhoto_Type[];\n}\n\nexport interface PbUsernames_Type {\n  username: string;\n  isActive?: boolean;\n  isEditable?: boolean;\n}\n\nexport interface PbUserSetting_Type {\n  chatFolders?: PbChatFolder_Type[];\n  chatFolderOrderedIds?: number[];\n  myBotIds?: string[];\n  myGroups?: string[];\n}\n\nexport interface PbVoice_Type {\n  id: string;\n  waveform?: number[];\n  duration?: number;\n}\n\nexport interface UserMessageStoreData_Type {\n  chatId: string;\n  messageIds?: number[];\n  messageIdsDeleted?: number[];\n  time: number;\n}\n\nexport interface UserStoreData_Type {\n  chatIds?: string[];\n  chatIdsDeleted?: string[];\n  chatFolders: string;\n  time: number;\n}\n\nexport interface UserStoreRow_Type {\n  buf?: Buffer;\n  userId: string;\n  time?: number;\n  user?: PbUser_Type;\n}\n\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { DownloadReq_Type } from './types';\n\nexport default class DownloadReq extends BaseMsg {\n  public msg?: DownloadReq_Type\n  constructor(msg?: DownloadReq_Type) {\n    super('PTP.File.DownloadReq', msg);\n    this.setCommandId(ActionCommands.CID_DownloadReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): DownloadReq_Type {\n    return new DownloadReq().decode(pdu.body());\n  }\n}\n","import BaseMsg from '../BaseMsg';\nimport { ActionCommands } from '../ActionCommands';\nimport type { Pdu } from '../BaseMsg';\nimport type { UploadReq_Type } from './types';\n\nexport default class UploadReq extends BaseMsg {\n  public msg?: UploadReq_Type\n  constructor(msg?: UploadReq_Type) {\n    super('PTP.File.UploadReq', msg);\n    this.setCommandId(ActionCommands.CID_UploadReq);\n    this.msg = msg;\n  }\n  static parseMsg(pdu : Pdu): UploadReq_Type {\n    return new UploadReq().decode(pdu.body());\n  }\n}\n","/**\n * DO NOT EDIT\n * -- this file is generated by minipbjs v0.2.5\n */\n\nconst protobuf = require(\"protobufjs/minimal\") ;\nprotobuf.util.Long = require('long');\nvar $root = protobuf.roots;\n\n// type system from protobuf\n// notice: minimal build protobuf library does not contains 'types'\nvar $wires = protobuf.types ? protobuf.types.basic : { 'double': 1, 'float': 5, 'int32': 0, 'uint32': 0, 'sint32': 0, 'fixed32': 5, 'sfixed32': 5, 'int64': 0, 'uint64': 0, 'sint64': 0, 'fixed64': 1, 'sfixed64': 1, 'bool': 0, 'string': 2, 'bytes': 2 };\nvar $packed = protobuf.types ? protobuf.types.packed : { 'double': 1, 'float': 5, 'int32': 0, 'uint32': 0, 'sint32': 0, 'fixed32': 5, 'sfixed32': 5, 'int64': 0, 'uint64': 0, 'sint64': 0, 'fixed64': 1, 'sfixed64': 1, 'bool': 0 };\nvar $types = Object.keys($wires);\n\nfunction invalid({ name, repeated, map, keyType }, expected) {\n    return name + ': ' + expected + (repeated && expected !== 'array' ? '[]' : map && expected !== 'object' ? '{k:'+keyType+'}' : '') + ' expected';\n}\nvar keyVerifyMap = { int32: 'key32Re', uint32: 'key32Re', sint32: 'key32Re', fixed32: 'key32Re', sfixed32: 'key32Re', int64: 'key64Re', uint64: 'key64Re', sint64: 'key64Re', fixed64: 'key64Re', sfixed64: 'key64Re', bool: 'key2Re' };\nfunction verifyKey(type, message, fieldInfo) {\n    if (keyVerifyMap[type]) {\n        if (!protobuf.util[keyVerifyMap[type]].test(message)) {\n            fieldInfo.keyType = type;\n            return invalid(fieldInfo, 'key')\n        }\n        return null;\n    }\n    return null;\n};\nvar type32Map = { int32: 1, uint32: 1, sint32: 1, fixed32: 1, sfixed32: 1 };\nvar type64Map = { int64: 1, uint64: 1, sint64: 1, fixed64: 1, sfixed64: 1 };\nvar floatOrDoubleMap = { float: 1, double: 1 };\nvar util = protobuf.util;\n\nvar $verifier = {\n    '$': function(type, message, fieldInfo, field) {\n        if (field === '$1') {\n            fieldInfo.map = true;\n            return verifyKey(type, message, fieldInfo);\n        }\n        // basic type\n        if ($wires[type] !== undefined) {\n            if (type32Map[type]) {\n                if (typeof message !== 'number') return invalid(fieldInfo, 'number');\n            } else if (type64Map[type]) {\n                if (!util.isInteger(message) && !(message && util.isInteger(message.low) && util.isInteger(message.high))) {\n                    return invalid(fieldInfo, 'integer|Long');\n                }\n            } else if (floatOrDoubleMap[type]) {\n                if (typeof message !== 'number') return invalid(fieldInfo, 'float|double');\n            } else if (type === 'bool') {\n                if (typeof message !== 'boolean') return invalid(fieldInfo, 'boolean');\n            } else if (type === 'string') {\n                if (!util.isString(message)) return invalid(fieldInfo, 'string');\n            } else if (type === 'bytes') {\n                if(!(message && typeof message.length ==='number' || util.isString(message))) {\n                    return invalid(fieldInfo, 'invalid bytes');\n                }\n            }\n            return null;\n        }\n        if ($root[type].resolvedType) return $root[type].resolvedType[message] ? null : invalid(fieldInfo, 'enum value');\n        return $root[type].verify(message);\n    },\n};\n// wrappers\nvar $reader = {\n    '$': function(type) {\n        if ($reader[type]) {\n            return $reader[type].call(this);\n        }\n        return $root[type].decode(this, this.uint32());\n    }\n}, $writer = {\n    '$': function(type, message, id) {\n        var wire = $wires[type];\n        if (wire === undefined) {\n            this.uint32((id << 3 | 2) >> 0).fork();\n            return $root[type].encode(message, this).ldelim();\n        }\n        return $writer[type].call(this.uint32(id << 3 | wire), message);\n    }\n};\n\nfor (var i = 0; i < $types.length; i ++) {\n    $reader[$types[i]] = protobuf.Reader.prototype[$types[i]];\n    $writer[$types[i]] = protobuf.Writer.prototype[$types[i]];\n}\n\nfunction $createConverter(cfgs) {\n    var converter = {};\n    for (var i = 0; i < cfgs.length; i ++) {\n        var cfg = cfgs[i];\n        for (var j = 0; j < cfg.types.length; j ++) {\n            converter[cfg.types[j]] = cfg.convf;\n        }\n    }\n    return converter;\n}\n\n// fromObject\nvar $conv_object = $createConverter([\n    {\n        'types': [ 'bool' ],\n        'convf': Boolean\n    }, {\n        'types': [ 'string' ],\n        'convf': String\n    }, {\n        'types': [ 'float', 'double' ],\n        'convf': Number\n    }, {\n        'types': [ 'uint32', 'fixed32' ],\n        'convf': function(value) { return value >>> 0; }\n    }, {\n        'types': [ 'int32', 'sint32', 'sfixed32' ],\n        'convf': function(value) { return value | 0; }\n    }, {\n        'types': [ 'int64', 'sint64', 'fixed64', 'sfixed64', 'uint64' ],\n        'convf': function(value, type) {\n            var ret = undefined;\n            if (protobuf.util.Long) {\n                ret = protobuf.util.Long.fromValue(value);\n                ret.unsigned = type.charAt(0) === 'u';\n            } else if (typeof value === 'object') {\n                ret = new protobuf.util.LongBits(value.low >>> 0, value.high >>> 0).toNumber(type.charAt(0) === 'u');\n            } else if (typeof value === 'string') {\n                ret = parseInt(value, 10);\n            } else if (typeof value === 'number') {\n                ret = value;\n            }\n            return ret;\n        }\n    }, {\n        'types': [ 'bytes' ],\n        'convf': function(value, type) {\n            var ret = undefined;\n            if (typeof value === 'string') {\n                ret = protobuf.util.newBuffer(protobuf.util.base64.length(value))\n                protobuf.util.base64.decode(value, ret, 0);\n            } else if (value.length) {\n                ret = value;\n            }\n            return ret;\n        }\n    }, {\n        'types': [ '$' ],\n        'convf': function(value, type) {\n            if ($conv_object[type]) {\n                return $conv_object[type].call(null, value, type);\n            } else if (!$root[type].fromObject) {\n                // enum\n                var ret = $root[type][value];\n                return typeof ret === 'string' ? $root[type][ret] : ret;\n            }\n            return $root[type].fromObject(value);\n        }\n    }\n]);\n\n// toObject\nvar $conv_message = $createConverter([\n    {\n        'types': [ 'float', 'double' ],\n        'convf': function(value, type, options) {\n            return options.json && !isFinite(value) ? String(value) : value;\n        }\n    }, {\n        'types': [ 'int64', 'sint64', 'fixed64', 'sfixed64', 'uint64' ],\n        'convf': function(value, type, options) {\n            if (typeof value === 'number') {\n                return options.longs === String ? String(value) : value;\n            }\n            if (options.longs === String) {\n                return protobuf.util.Long.prototype.toString.call(value);\n            } else if (options.longs === Number) {\n                return new protobuf.util.LongBits(value.low >>> 0, value.high >>> 0).toNumber(type.charAt(0) === 'u');\n            }\n            return value;\n        }\n    }, {\n        'types': [ 'bytes' ],\n        'convf': function(value, type, options) {\n            if (options.bytes === String) {\n                return protobuf.util.base64.encode(value, 0, value.length);\n            } else if (options.bytes === Array) {\n                return Array.prototype.slice.call(value);\n            }\n            if (Array.isArray(value)) {\n                return protobuf.util.newBuffer(value);\n            }\n            return value;\n        }\n    }, {\n        'types': [ '$' ],\n        'convf': function(value, type, options) {\n            if ($conv_message[type]) {\n                return $conv_message[type].call(null, value, type, options);\n            } else if ($wires[type] === undefined) {\n                if ($root[type].toObject) {\n                    return $root[type].toObject(value, options);\n                }\n                // enum\n                return options.enums === String ? $root[type][value] : value;\n            }\n            return value;\n        }\n    }\n]);\n\n// namespace builder\n(function _(namespace, path, parent, inner) {\n    for (var i = 0, keys = Object.keys(namespace); i < keys.length; i ++) {\n        var key = keys[i];\n        if (namespace[key]['$'] && Object.keys(namespace[key]['$']).every(function(k) { return Number(k); })) {\n            // protobuf.type\n            if (parent[key]) throw Error('field ' + path + '.' + key + ' has already existed');\n            parent[key] = function(payloads, key) {\n                /**\n                 * Constructor function wrapper for the all protobuf type.\n                 * @constructor\n                 * @param [props] Properties to set with\n                 */\n                function C(props) {\n                    for (var id in payloads) {\n                        var payload = payloads[id];\n                        // initialize object/array fields\n                        if (payload[1].charAt(0) === '{') {\n                            this[payload[0]] = {};\n                        } else if (payload[1].charAt(0) === '[' || payload[1].charAt(0) === '<') {\n                            this[payload[0]] = [];\n                            }\n                        }\n                        if (props) {\n                            for (var keys = Object.keys(props), i = 0; i < keys.length; ++i) {\n                                props[keys[i]] != null && (this[keys[i]] = props[keys[i]]);\n                        }\n                    }\n                }\n\n                // set prototypes and collect inner namespace for map fields\n                var $namespace = {};\n                for (var id in payloads) {\n                    var payload = payloads[id];\n                    var type = payload[1];\n                    if (type.charAt(0) === '{') {\n                        C.prototype[payload[0]] = protobuf.util.emptyObject;\n                        // collect all map fields\n                        // { key: value } => { '1': [ '$1', <key>, null ], '2': [ '$2', <value>, null ] }\n                        $namespace[type] = {\n                            '$': type.substring(1).split(',')\n                                .map(function(t, i) { return ['$' + (i + 1), t, null] })\n                                .reduce(function(m, o, i) { m[i + 1] = o; return m; }, {})\n                        };\n                    } else if (type.charAt(0) === '[' || type.charAt(0) === '<') {\n                        C.prototype[payload[0]] = protobuf.util.emptyArray;\n                    } else if (type === 'bytes') {\n                        C.prototype[payload[0]] = protobuf.util.newBuffer([]);\n                    } else {\n                        if (payload[2] && payload[2].hasOwnProperty('low') && payload[2].hasOwnProperty('high')) {\n                            C.prototype[payload[0]] = protobuf.util.Long.fromBits(payload[2].low, payload[2].high, payload[2].unsigned);\n                        } else {\n                            C.prototype[payload[0]] = payload[2];\n                        }\n                    }\n                }\n\n                /**\n                 * Creates a new instance using the specified properties.\n                 * @function create\n                 * @static\n                 * @param [props] Properties to set with\n                 * @returns {C} instance\n                 */\n                C.create = function(props) {\n                    return new parent[key](props);\n                };\n\n                /**\n                 * Decodes a message from the specified reader or buffer.\n                 * @function decode\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} length Message length if known beforehand\n                 * @returns {C} instance\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                C.decode = function(reader, length) {\n                    if (!(reader instanceof protobuf.Reader)) reader = protobuf.Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length;\n                    var message = new parent[key]();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        var id = tag >>> 3;\n                        if (id > 0 && payloads[id]) {\n                            var field = payloads[id][0];\n                            var type = payloads[id][1];\n                            if (type.charAt(0) === '{') {\n                                // map field\n                                if (message[field] === protobuf.util.emptyObject) {\n                                    message[field] = {};\n                                }\n                                // decode map fields from inner namespace\n                                var $message = parent[key].$namespace[type].decode(reader, reader.uint32());\n                                message[field][$message['$1']] = $message['$2'];\n                            } else if (type.charAt(0) === '[' || type.charAt(0) === '<') {\n                                // repeated field\n                                type = type.substring(1);\n                                if (!(message[field] && message[field].length)) {\n                                    message[field] = [];\n                                }\n                                if ($packed[type] !== undefined && (tag & /*2^3-1=*/7) === 2) {\n                                    // packed repeated\n                                    var $end = reader.uint32() + reader.pos;\n                                    while (reader.pos < $end) {\n                                        message[field].push($reader['$'].call(reader, type));\n                                    }\n                                } else {\n                                    message[field].push($reader['$'].call(reader, type));\n                                }\n                            } else {\n                                // non-repeated field\n                                message[field] = $reader['$'].call(reader, type);\n                            }\n                        } else {\n                            // unknown field\n                            reader.skipType(tag & /*2^3-1=*/7);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} length Message length if known beforehand\n                 * @returns {C} instance\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                C.decodeDelimited = function(reader) {\n                    if (!(reader instanceof protobuf.Reader)) reader = protobuf.Reader.create(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Encodes the specified C message. Does not implicitly verify messages.\n                 * @function encode\n                 * @static\n                 * @param {C} message or plain object to encode\n                 * @param {$protobuf.Writer} writer Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                C.encode = function(message, writer) {\n                    if (!writer) writer = protobuf.Writer.create();\n                    for (var id in payloads) {\n                        var field = payloads[id][0];\n                        var type = payloads[id][1];\n                        if (type.charAt(0) === '{') {\n                            // map field\n                            if (message[field] != null && message.hasOwnProperty(field)) {\n                                for (var i = 0, keys = Object.keys(message[field]); i < keys.length; ++ i) {\n                                    writer.uint32((id << 3 | 2) >> 0).fork();\n                                    // encode map fields from inner namespace\n                                    parent[key].$namespace[type].encode({ '$1': keys[i], '$2': message[field][keys[i]] }, writer).ldelim();\n                                }\n                            }\n                        } else if (type.charAt(0) === '[' || type.charAt(0) === '<') {\n                            // repeated field\n                            var packed = type.charAt(0) === '<';\n                            type = type.substring(1);\n                            var array = message[field];\n                            if (array != null && array.length) {\n                                if (packed && $packed[type] !== undefined) {\n                                    // packed repeated\n                                    writer.uint32((id << 3 | 2) >> 0).fork();\n                                    for (var i = 0; i < array.length; i ++) {\n                                        $writer[type].call(writer, array[i]);\n                                    }\n                                    writer.ldelim();\n                                } else {\n                                    for (var i = 0; i < array.length; i ++) {\n                                        $writer['$'].call(writer, type, array[i], id);\n                                    }\n                                }\n                            }\n                        } else {\n                            // non-repeated field\n                            if (message[field] != null && message.hasOwnProperty(field)) {\n                                $writer['$'].call(writer, type, message[field], id);\n                            }\n                        }\n                    }\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified C message, length delimited. Does not implicitly verify messages.\n                 * @function encode\n                 * @static\n                 * @param {C} message or plain object to encode\n                 * @param {$protobuf.Writer} writer Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                C.encodeDelimited = function(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Creates a C message from plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @param {C} message\n                 */\n                C.fromObject = function(object) {\n                    if (object instanceof parent[key]) return object;\n                    var message = new parent[key]();\n                    for (var id in payloads) {\n                        var field = payloads[id][0];\n                        var type = payloads[id][1];\n                        var property = object[field];\n                        if (type.charAt(0) === '{') {\n                            // map field\n                            if (!property) continue;\n                            if (typeof property !== 'object') throw TypeError(path + '.' + key + '.' + field + ': object expected');\n                            var map = {};\n                            var vtype = type.substring(1).split(',')[1];\n                            for (var i = 0, keys = Object.keys(property); i < keys.length; ++ i) {\n                                map[keys[i]] = $conv_object['$'].call(null, property[keys[i]], vtype);\n                            }\n                            message[field] = map;\n                        } else if (type.charAt(0) === '[' || type.charAt(0) === '<') {\n                            // repeated field\n                            if (!property) continue;\n                            if (!Array.isArray(property)) throw TypeError(path + '.' + key + '.' + type + ': arary excepted');\n                            var array = [];\n                            type = type.substring(1);\n                            for (var i = 0; i < property.length; i ++) {\n                                array[i] = $conv_object['$'].call(null, property[i], type);\n                            }\n                            message[field] = array;\n                        } else {\n                            // non-repeated field\n                            if (property != null) {\n                                message[field] = $conv_object['$'].call(null, property, type);\n                            }\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a C message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @static\n                 * @param {C} message protobuf message\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                C.toObject = function(message, options) {\n                    options = options || {};\n                    var object = {};\n                    for (var id in payloads) {\n                        var field = payloads[id][0];\n                        var type = payloads[id][1];\n                        var property = message[field];\n                        if (type.charAt(0) === '{') {\n                            // map field\n                            if (options.objects || options.defaults) {\n                                object[field] = {};\n                            }\n                            var keys = property ? Object.keys(property) : [];\n                            if (keys.length) {\n                                var map = {};\n                                var vtype = type.substring(1).split(',')[1];\n                                for (var i = 0; i < keys.length; i ++) {\n                                    map[keys[i]] = $conv_message['$'].call(null, property[keys[i]], vtype, options);\n                                }\n                                object[field] = map;\n                            }\n                        } else if (type.charAt(0) === '[' || type.charAt(0) === '<') {\n                            // repeated field\n                            if (options.arrays || options.defaults) {\n                                object[field] = [];\n                            }\n                            if (property && property.length) {\n                                var array = [];\n                                type = type.substring(1);\n                                for (var i = 0; i < property.length; i ++) {\n                                    array[i] = $conv_message['$'].call(null, property[i], type, options);\n                                }\n                                object[field] = array;\n                            }\n                        } else {\n                            // non-repeated field\n                            // TODO support for Enum type\n                            if (options.defaults) {\n                                object[field] = $conv_message['$'].call(null, payloads[id][2], type, options);\n                            }\n                            if (property != null && message.hasOwnProperty(field)) {\n                                object[field] = $conv_message['$'].call(null, property, type, options);\n                            }\n                        }\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this C to JSON.\n                 * @function toJSON\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                C.prototype.toJSON = function() {\n                    return this.constructor.toObject(this, protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * Verifies C message.\n                 * @function verify\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                C.verify = function(message) {\n                    if (typeof message !=='object' || message === null) return 'object expected'\n                    for (var id in payloads) {\n                        var field = payloads[id][0];\n                        var type = payloads[id][1];\n                        var fieldName = path + '.' + key + '.' + field;\n                        if (type.charAt(0) === '{') {\n                            // map field\n                            if (message[field] != null && message.hasOwnProperty(field)) {\n                                if (!protobuf.util.isObject(message[field])) return invalid({ name: fieldName, map: true }, 'object');\n                                var keys = Object.keys(message[field]);\n                                for (var i = 0; i < keys.length; ++i) {\n                                    parent[key].$namespace[type].$fieldName = fieldName\n                                    var error = parent[key].$namespace[type].verify({ '$1': keys[i], '$2': message[field][keys[i]] });\n                                    if (error) return error;\n                                }\n                            }\n                        } else if (type.charAt(0) === '[' || type.charAt(0) === '<') {\n                            // repeated field\n                            type = type.substring(1);\n                            var array = message[field];\n                            if (!Array.isArray(array)) {\n                                return invalid({ name: fieldName, repeated: true }, 'array')\n                            }\n                            for (var i = 0; i < array.length; i ++) {\n                                var error = $verifier['$'](type, array[i], { name: fieldName + '['+i+']' , repeated: true });\n                                if (error) return error;\n                            }\n                        } else {\n                            // non-repeated field\n                            if (field === '$1' || field === '$2') fieldName = this.$fieldName;\n                            if (message[field] != null && message.hasOwnProperty(field)) {\n                                var error = $verifier['$'](type, message[field], { name: fieldName }, field);\n                                if (error) return error;\n                            }\n                        }\n                    }\n                    return null;\n                };\n\n                // create inner namespace for each map field\n                if (Object.keys($namespace).length) {\n                    C.$namespace = _($namespace, path + '.' + key, C.$namespace || {}, true);\n                }\n\n                return C;\n            }(namespace[key]['$'], key);\n\n            // exposing non-inner type to $root\n            !inner && ($root[path + '.' + key] = parent[key]);\n        } else if (namespace[key]['@'] && Object.values(namespace[key]['@']).every(function(v) { return Number(v) === v; })) {\n            // protobuf.enum\n            parent[key] = function(payloads, key) {\n                var keys = Object.keys(payloads);\n                var values = {};\n                for (var i = 0; i < keys.length; i ++) {\n                    values[values[keys[i]] = payloads[keys[i]]] = keys[i];\n                }\n                var vals = {};\n                keys.forEach(function (i) { vals[values[i]] = 1; });\n                values.resolvedType = vals;\n                return values;\n            }(namespace[key]['@'], key);\n            // exposing non-inner enum to $root\n            !inner && ($root[path + '.' + key] = parent[key]);\n        }\n        // delete parsed type and enum\n        delete namespace[key]['$'];\n        delete namespace[key]['@'];\n        parent[key] = _(namespace[key], path ? path + '.' + key : key, parent[key] || {});\n    }\n    return parent;\n})({\n    default: {\n        PTP: {\n            Auth: {\n                AuthLoginReq: {\n                    '$': {\"1\":[\"sign\",\"string\",\"\"],\"2\":[\"clientInfo\",\"default.PTP.Common.ClientInfo\",null]}\n                },\n                AuthLoginRes: {\n                    '$': {\"100\":[\"err\",\"uint32\",0]}\n                },\n                AuthNativeReq: {\n                    '$': {\"1\":[\"accountId\",\"uint64\",{\"low\":0,\"high\":0,\"unsigned\":true}],\"2\":[\"entropy\",\"string\",\"\"],\"3\":[\"session\",\"string\",\"\"]}\n                },\n                AuthNativeRes: {\n                    '$': {}\n                },\n                AuthPreLoginReq: {\n                    '$': {\"1\":[\"sign1\",\"bytes\",[]],\"2\":[\"address1\",\"string\",\"\"],\"3\":[\"sign2\",\"bytes\",[]],\"4\":[\"address2\",\"string\",\"\"],\"5\":[\"ts\",\"uint64\",{\"low\":0,\"high\":0,\"unsigned\":true}]}\n                },\n                AuthPreLoginRes: {\n                    '$': {\"1\":[\"uid\",\"string\",\"\"],\"2\":[\"ts\",\"uint64\",{\"low\":0,\"high\":0,\"unsigned\":true}],\"100\":[\"err\",\"uint32\",0]}\n                },\n                AuthStep1Req: {\n                    '$': {\"1\":[\"p\",\"bytes\",[]]}\n                },\n                AuthStep1Res: {\n                    '$': {\"1\":[\"q\",\"bytes\",[]],\"2\":[\"address\",\"string\",\"\"],\"3\":[\"sign\",\"bytes\",[]],\"6\":[\"ts\",\"uint64\",{\"low\":0,\"high\":0,\"unsigned\":true}],\"100\":[\"err\",\"uint32\",0]}\n                },\n                AuthStep2Req: {\n                    '$': {\"1\":[\"ts\",\"uint64\",{\"low\":0,\"high\":0,\"unsigned\":true}],\"2\":[\"address\",\"string\",\"\"],\"3\":[\"sign\",\"bytes\",[]]}\n                },\n                AuthStep2Res: {\n                    '$': {\"100\":[\"err\",\"uint32\",0]}\n                },\n                InitAppRes: {\n                    '$': {\"1\":[\"chats\",\"string\",\"\"],\"2\":[\"messages\",\"string\",\"\"],\"3\":[\"chatFolders\",\"string\",\"\"],\"100\":[\"err\",\"uint32\",0]}\n                },\n                UpdateProfileReq: {\n                    '$': {\"1\":[\"firstName\",\"string\",\"\"],\"2\":[\"lastName\",\"string\",\"\"],\"3\":[\"about\",\"string\",\"\"]}\n                },\n                UpdateProfileRes: {\n                    '$': {\"100\":[\"err\",\"uint32\",0]}\n                },\n                UpdateUsernameReq: {\n                    '$': {\"1\":[\"username\",\"string\",\"\"]}\n                },\n                UpdateUsernameRes: {\n                    '$': {\"100\":[\"err\",\"uint32\",0]}\n                },\n                UploadProfilePhotoReq: {\n                    '$': {\"1\":[\"id\",\"string\",\"\"],\"2\":[\"is_video\",\"bool\",false],\"3\":[\"thumbnail\",\"string\",\"\"]}\n                },\n                UploadProfilePhotoRes: {\n                    '$': {\"1\":[\"payload\",\"string\",\"\"],\"100\":[\"err\",\"uint32\",0]}\n                }\n            },\n            Chats: {\n                LoadChatsReq: {\n                    '$': {\"1\":[\"limit\",\"uint32\",0],\"2\":[\"offsetDate\",\"uint32\",0],\"3\":[\"archived\",\"bool\",false],\"4\":[\"withPinned\",\"bool\",false],\"5\":[\"lastLocalServiceMessage\",\"string\",\"\"]}\n                },\n                LoadChatsRes: {\n                    '$': {\"1\":[\"payload\",\"string\",\"\"],\"100\":[\"err\",\"uint32\",0]}\n                }\n            },\n            Common: {\n                AUTH_TYPE: {\n                    '@': {\"AUTH_TYPE_USERNAME\":0,\"AUTH_TYPE_EMAIL\":1,\"AUTH_TYPE_MOBILE\":2}\n                },\n                ClientInfo: {\n                    '$': {\"1\":[\"deviceModel\",\"string\",\"\"],\"2\":[\"systemVersion\",\"string\",\"\"],\"3\":[\"appVersion\",\"string\",\"\"]}\n                },\n                EncryptType: {\n                    '@': {\"EncryptType_Wallet\":0,\"EncryptType_Group\":1,\"EncryptType_Message\":2,\"EncryptType_Media\":3}\n                },\n                ERR: {\n                    '@': {\"NO_ERROR\":0,\"ERR_SYSTEM\":1,\"ERR_AUTH_LOGIN\":2,\"ERR_AUTH_NEED\":3}\n                },\n                FileInfo: {\n                    '$': {\"1\":[\"id\",\"string\",\"\"],\"2\":[\"size\",\"uint64\",{\"low\":0,\"high\":0,\"unsigned\":true}],\"3\":[\"part\",\"uint32\",0],\"4\":[\"part_total\",\"uint32\",0],\"5\":[\"buf\",\"bytes\",[]],\"6\":[\"type\",\"string\",\"\"]}\n                },\n                MessageStoreRow: {\n                    '$': {\"1\":[\"message\",\"default.PTP.Common.PbMsg\",null],\"3\":[\"messageId\",\"uint32\",0],\"4\":[\"time\",\"uint32\",0],\"5\":[\"buf\",\"bytes\",[]]}\n                },\n                PbAction: {\n                    '$': {\"1\":[\"text\",\"string\",\"\"],\"2\":[\"type\",\"string\",\"\"]}\n                },\n                PbAiBot: {\n                    '$': {\"1\":[\"chatGptConfig\",\"default.PTP.Common.PbChatGpBotConfig\",null],\"3\":[\"enableAi\",\"bool\",false],\"4\":[\"botApi\",\"string\",\"\"],\"5\":[\"disableClearHistory\",\"bool\",false],\"6\":[\"commandsFromApi\",\"<default.PTP.Common.PbCommands\",null]}\n                },\n                PbAudio: {\n                    '$': {\"1\":[\"id\",\"string\",\"\"],\"2\":[\"size\",\"[uint32\",null],\"3\":[\"duration\",\"[uint32\",null],\"5\":[\"mimeType\",\"string\",\"\"],\"6\":[\"fileName\",\"string\",\"\"],\"7\":[\"performer\",\"string\",\"\"],\"8\":[\"title\",\"string\",\"\"],\"9\":[\"thumbnailSizes\",\"<default.PTP.Common.PbSizes\",null]}\n                },\n                PbBotInfo: {\n                    '$': {\"1\":[\"botId\",\"string\",\"\"],\"2\":[\"description\",\"string\",\"\"],\"4\":[\"menuButton\",\"default.PTP.Common.PbMenuButton\",null],\"5\":[\"commands\",\"<default.PTP.Common.PbCommands\",null],\"6\":[\"photo\",\"default.PTP.Common.PbPhoto\",null],\"7\":[\"aiBot\",\"default.PTP.Common.PbAiBot\",null]}\n                },\n                PbChat: {\n                    '$': {\"1\":[\"type\",\"string\",\"\"],\"2\":[\"id\",\"string\",\"\"],\"3\":[\"title\",\"string\",\"\"],\"4\":[\"usernames\",\"<default.PTP.Common.PbUsernames\",null],\"5\":[\"isMuted\",\"bool\",false],\"6\":[\"isMin\",\"bool\",false],\"7\":[\"hasPrivateLink\",\"bool\",false],\"8\":[\"isSignaturesShown\",\"bool\",false],\"9\":[\"accessHash\",\"string\",\"\"],\"10\":[\"isVerified\",\"bool\",false],\"11\":[\"isJoinToSend\",\"bool\",false],\"12\":[\"isJoinRequest\",\"bool\",false],\"13\":[\"isForum\",\"bool\",false],\"14\":[\"isListed\",\"bool\",false],\"15\":[\"settings\",\"default.PTP.Common.PbSettings\",null],\"16\":[\"lastMessage\",\"default.PTP.Common.PbMsg\",null]}\n                },\n                PbChatFolder: {\n                    '$': {\"1\":[\"id\",\"uint32\",0],\"2\":[\"title\",\"string\",\"\"],\"3\":[\"channels\",\"bool\",false],\"4\":[\"pinnedChatIds\",\"<string\",null],\"5\":[\"includedChatIds\",\"<string\",null],\"6\":[\"excludedChatIds\",\"<string\",null]}\n                },\n                PbChatGpBotConfig: {\n                    '$': {\"1\":[\"init_system_content\",\"string\",\"\"],\"2\":[\"api_key\",\"string\",\"\"],\"3\":[\"max_history_length\",\"uint32\",0],\"4\":[\"modelConfig\",\"default.PTP.Common.PbChatGptModelConfig\",null]}\n                },\n                PbChatGptModelConfig: {\n                    '$': {\"1\":[\"model\",\"string\",\"\"],\"2\":[\"temperature\",\"uint32\",0],\"3\":[\"max_tokens\",\"uint32\",0],\"4\":[\"presence_penalty\",\"uint32\",0]}\n                },\n                PbCommands: {\n                    '$': {\"1\":[\"botId\",\"string\",\"\"],\"2\":[\"command\",\"string\",\"\"],\"3\":[\"description\",\"string\",\"\"]}\n                },\n                PbContent: {\n                    '$': {\"1\":[\"text\",\"default.PTP.Common.PbText\",null],\"2\":[\"photo\",\"default.PTP.Common.PbPhoto\",null],\"3\":[\"voice\",\"default.PTP.Common.PbVoice\",null],\"4\":[\"action\",\"default.PTP.Common.PbAction\",null],\"5\":[\"document\",\"default.PTP.Common.PbDocument\",null],\"6\":[\"audio\",\"default.PTP.Common.PbAudio\",null]}\n                },\n                PbDimensions: {\n                    '$': {\"1\":[\"width\",\"uint32\",0],\"2\":[\"height\",\"uint32\",0]}\n                },\n                PbDocument: {\n                    '$': {\"1\":[\"id\",\"string\",\"\"],\"2\":[\"fileName\",\"string\",\"\"],\"3\":[\"size\",\"[uint32\",null],\"4\":[\"timestamp\",\"uint32\",0],\"5\":[\"duration\",\"[uint32\",null],\"6\":[\"mimeType\",\"string\",\"\"],\"7\":[\"performer\",\"string\",\"\"],\"8\":[\"previewBlobUrl\",\"string\",\"\"],\"9\":[\"mediaType\",\"string\",\"\"],\"10\":[\"mediaSize\",\"default.PTP.Common.PbSizes\",null],\"11\":[\"thumbnail\",\"default.PTP.Common.PbThumbnail\",null]}\n                },\n                PbFullInfo: {\n                    '$': {\"1\":[\"bio\",\"string\",\"\"],\"2\":[\"commonChatsCount\",\"uint32\",0],\"3\":[\"isBlocked\",\"bool\",false],\"4\":[\"noVoiceMessages\",\"bool\",false],\"5\":[\"botInfo\",\"default.PTP.Common.PbBotInfo\",null],\"6\":[\"pinnedMessageId\",\"uint32\",0]}\n                },\n                PbMenuButton: {\n                    '$': {\"1\":[\"type\",\"string\",\"\"],\"2\":[\"text\",\"string\",\"\"],\"3\":[\"url\",\"string\",\"\"]}\n                },\n                PbMessageEntity: {\n                    '$': {\"1\":[\"type\",\"string\",\"\"],\"2\":[\"offset\",\"uint32\",0],\"3\":[\"length\",\"uint32\",0],\"4\":[\"documentId\",\"string\",\"\"],\"5\":[\"userId\",\"string\",\"\"],\"6\":[\"url\",\"string\",\"\"],\"7\":[\"language\",\"string\",\"\"],\"8\":[\"cipher\",\"string\",\"\"],\"9\":[\"hint\",\"string\",\"\"]}\n                },\n                PbMsg: {\n                    '$': {\"1\":[\"id\",\"uint32\",0],\"2\":[\"chatId\",\"string\",\"\"],\"3\":[\"content\",\"default.PTP.Common.PbContent\",null],\"4\":[\"date\",\"uint32\",0],\"5\":[\"isOutgoing\",\"bool\",false],\"6\":[\"senderId\",\"string\",\"\"],\"7\":[\"isForwardingAllowed\",\"bool\",false],\"8\":[\"previousLocalId\",\"double\",0],\"9\":[\"views\",\"uint32\",0],\"10\":[\"repliesThreadInfo\",\"default.PTP.Common.PbRepliesThreadInfo\",null],\"11\":[\"reactions\",\"default.PTP.Common.PbReactions\",null]}\n                },\n                PbPhoto: {\n                    '$': {\"1\":[\"id\",\"string\",\"\"],\"2\":[\"thumbnail\",\"default.PTP.Common.PbThumbnail\",null],\"3\":[\"sizes\",\"<default.PTP.Common.PbSizes\",null],\"4\":[\"isSpoiler\",\"bool\",false]}\n                },\n                PbQrCode: {\n                    '$': {\"1\":[\"type\",\"uint32\",1],\"2\":[\"data\",\"bytes\",[]]}\n                },\n                PbReaction: {\n                    '$': {\"2\":[\"emoticon\",\"string\",\"\"]}\n                },\n                PbReactionCount: {\n                    '$': {\"1\":[\"chosenOrder\",\"uint32\",0],\"2\":[\"count\",\"uint32\",0],\"3\":[\"reaction\",\"default.PTP.Common.PbReaction\",null]}\n                },\n                PbReactions: {\n                    '$': {\"1\":[\"canSeeList\",\"bool\",false],\"2\":[\"results\",\"<default.PTP.Common.PbReactionCount\",null]}\n                },\n                PbRepliesThreadInfo: {\n                    '$': {\"1\":[\"isComments\",\"bool\",false],\"3\":[\"threadId\",\"uint32\",0],\"4\":[\"chatId\",\"string\",\"\"],\"5\":[\"originChannelId\",\"string\",\"\"],\"6\":[\"messagesCount\",\"uint32\",0],\"7\":[\"lastMessageId\",\"uint32\",0],\"8\":[\"recentReplierIds\",\"<string\",null]}\n                },\n                PbSettings: {\n                    '$': {\"1\":[\"isAutoArchived\",\"bool\",false],\"2\":[\"canReportSpam\",\"bool\",false],\"3\":[\"canAddContact\",\"bool\",false],\"4\":[\"canBlockContact\",\"bool\",false]}\n                },\n                PbSizes: {\n                    '$': {\"1\":[\"width\",\"uint32\",0],\"2\":[\"height\",\"uint32\",0],\"3\":[\"type\",\"string\",\"\"]}\n                },\n                PbText: {\n                    '$': {\"1\":[\"text\",\"string\",\"\"],\"2\":[\"entities\",\"<default.PTP.Common.PbMessageEntity\",null]}\n                },\n                PbThumbnail: {\n                    '$': {\"1\":[\"width\",\"uint32\",0],\"2\":[\"height\",\"uint32\",0],\"3\":[\"dataUri\",\"string\",\"\"]}\n                },\n                PbUser: {\n                    '$': {\"1\":[\"id\",\"string\",\"\"],\"2\":[\"firstName\",\"string\",\"\"],\"3\":[\"usernames\",\"<default.PTP.Common.PbUsernames\",null],\"4\":[\"isMin\",\"bool\",false],\"5\":[\"isPremium\",\"bool\",false],\"6\":[\"type\",\"string\",\"\"],\"7\":[\"hasVideoAvatar\",\"bool\",false],\"8\":[\"canBeInvitedToGroup\",\"bool\",false],\"9\":[\"phoneNumber\",\"string\",\"\"],\"10\":[\"noStatus\",\"bool\",false],\"11\":[\"accessHash\",\"string\",\"\"],\"12\":[\"fullInfo\",\"default.PTP.Common.PbFullInfo\",null],\"13\":[\"lastName\",\"string\",\"\"],\"14\":[\"isSelf\",\"bool\",false],\"15\":[\"avatarHash\",\"string\",\"\"],\"16\":[\"photos\",\"<default.PTP.Common.PbPhoto\",null]}\n                },\n                PbUsernames: {\n                    '$': {\"1\":[\"username\",\"string\",\"\"],\"2\":[\"isActive\",\"bool\",false],\"3\":[\"isEditable\",\"bool\",false]}\n                },\n                PbUserSetting: {\n                    '$': {\"1\":[\"chatFolders\",\"<default.PTP.Common.PbChatFolder\",null],\"2\":[\"chatFolderOrderedIds\",\"[uint32\",null],\"3\":[\"myBotIds\",\"<string\",null],\"4\":[\"myGroups\",\"<string\",null]}\n                },\n                PbVoice: {\n                    '$': {\"1\":[\"id\",\"string\",\"\"],\"2\":[\"waveform\",\"[uint32\",null],\"3\":[\"duration\",\"uint32\",0]}\n                },\n                QrCodeType: {\n                    '@': {\"QrCodeType_MNEMONIC\":1}\n                },\n                UserMessageStoreData: {\n                    '$': {\"1\":[\"chatId\",\"string\",\"\"],\"2\":[\"messageIds\",\"[uint64\",null],\"3\":[\"messageIdsDeleted\",\"[uint64\",null],\"4\":[\"time\",\"uint64\",{\"low\":0,\"high\":0,\"unsigned\":true}]}\n                },\n                UserStoreData: {\n                    '$': {\"1\":[\"chatIds\",\"<string\",null],\"2\":[\"chatIdsDeleted\",\"<string\",null],\"3\":[\"chatFolders\",\"string\",\"\"],\"7\":[\"time\",\"uint64\",{\"low\":0,\"high\":0,\"unsigned\":true}]}\n                },\n                UserStoreRow: {\n                    '$': {\"1\":[\"buf\",\"bytes\",[]],\"2\":[\"userId\",\"string\",\"\"],\"3\":[\"time\",\"uint32\",0],\"4\":[\"user\",\"default.PTP.Common.PbUser\",null]}\n                }\n            },\n            File: {\n                DownloadReq: {\n                    '$': {\"1\":[\"id\",\"string\",\"\"],\"2\":[\"part\",\"uint32\",0]}\n                },\n                DownloadRes: {\n                    '$': {\"1\":[\"file\",\"default.PTP.Common.FileInfo\",null],\"100\":[\"err\",\"uint32\",0]}\n                },\n                UploadReq: {\n                    '$': {\"1\":[\"file\",\"default.PTP.Common.FileInfo\",null]}\n                },\n                UploadRes: {\n                    '$': {\"100\":[\"err\",\"uint32\",0]}\n                }\n            },\n            Msg: {\n                AnswerCallbackButtonReq: {\n                    '$': {\"1\":[\"chatId\",\"string\",\"\"],\"2\":[\"messageId\",\"uint32\",0],\"3\":[\"data\",\"string\",\"\"],\"4\":[\"accessHash\",\"string\",\"\"],\"5\":[\"isGame\",\"bool\",false]}\n                },\n                AnswerCallbackButtonRes: {\n                    '$': {\"1\":[\"message\",\"string\",\"\"],\"2\":[\"url\",\"string\",\"\"],\"3\":[\"alert\",\"string\",\"\"],\"100\":[\"err\",\"uint32\",0]}\n                },\n                DownloadMsgReq: {\n                    '$': {\"1\":[\"chatId\",\"string\",\"\"]}\n                },\n                DownloadMsgRes: {\n                    '$': {\"1\":[\"messages\",\"<default.PTP.Common.MessageStoreRow\",null],\"100\":[\"err\",\"uint32\",0]}\n                },\n                GenMsgIdReq: {\n                    '$': {\"1\":[\"isLocal\",\"bool\",false]}\n                },\n                GenMsgIdRes: {\n                    '$': {\"1\":[\"messageId\",\"uint64\",{\"low\":0,\"high\":0,\"unsigned\":true}],\"100\":[\"err\",\"uint32\",0]}\n                },\n                MsgDeleteReq: {\n                    '$': {\"1\":[\"user_id\",\"string\",\"\"],\"2\":[\"chat_id\",\"string\",\"\"],\"3\":[\"msg_ids\",\"[uint32\",null],\"4\":[\"revoke\",\"bool\",false]}\n                },\n                MsgDeleteRes: {\n                    '$': {\"100\":[\"err\",\"uint32\",0]}\n                },\n                MsgListReq: {\n                    '$': {\"1\":[\"chatId\",\"string\",\"\"],\"2\":[\"lastMessageId\",\"uint32\",0],\"3\":[\"limit\",\"uint32\",0],\"4\":[\"isUp\",\"bool\",false]}\n                },\n                MsgListRes: {\n                    '$': {\"1\":[\"payload\",\"string\",\"\"],\"100\":[\"err\",\"uint32\",0]}\n                },\n                MsgUpdateReq: {\n                    '$': {\"1\":[\"user_id\",\"string\",\"\"],\"2\":[\"chat_id\",\"string\",\"\"],\"3\":[\"msg_id\",\"uint32\",0],\"4\":[\"text\",\"string\",\"\"]}\n                },\n                MsgUpdateRes: {\n                    '$': {\"100\":[\"err\",\"uint32\",0]}\n                },\n                RemoveMessagesReq: {\n                    '$': {\"1\":[\"messageIds\",\"[uint32\",null]}\n                },\n                RemoveMessagesRes: {\n                    '$': {\"100\":[\"err\",\"uint32\",0]}\n                },\n                SendBotMsgReq: {\n                    '$': {\"1\":[\"chatId\",\"string\",\"\"],\"2\":[\"botApi\",\"string\",\"\"],\"3\":[\"text\",\"string\",\"\"],\"4\":[\"chatGpt\",\"string\",\"\"],\"5\":[\"msgId\",\"uint32\",0]}\n                },\n                SendBotMsgRes: {\n                    '$': {\"1\":[\"reply\",\"string\",\"\"],\"2\":[\"chatId\",\"string\",\"\"],\"3\":[\"msgId\",\"uint32\",0],\"4\":[\"streamEnd\",\"bool\",false],\"5\":[\"message\",\"default.PTP.Common.PbMsg\",null]}\n                },\n                SendReq: {\n                    '$': {\"1\":[\"chatId\",\"string\",\"\"],\"2\":[\"text\",\"string\",\"\"],\"3\":[\"msg\",\"default.PTP.Common.PbMsg\",null]}\n                },\n                SendRes: {\n                    '$': {\"1\":[\"chatId\",\"string\",\"\"],\"2\":[\"action\",\"string\",\"\"],\"3\":[\"msg\",\"default.PTP.Common.PbMsg\",null],\"4\":[\"text\",\"string\",\"\"],\"5\":[\"localId\",\"uint32\",0],\"100\":[\"err\",\"uint32\",0]}\n                },\n                UpdateCmdReq: {\n                    '$': {\"1\":[\"botApi\",\"string\",\"\"],\"2\":[\"chatId\",\"string\",\"\"]}\n                },\n                UpdateCmdRes: {\n                    '$': {\"1\":[\"commands\",\"<default.PTP.Common.PbCommands\",null],\"2\":[\"chatId\",\"string\",\"\"]}\n                },\n                UploadMsgReq: {\n                    '$': {\"1\":[\"messages\",\"<default.PTP.Common.MessageStoreRow\",null],\"2\":[\"chatId\",\"string\",\"\"],\"3\":[\"time\",\"uint32\",0]}\n                },\n                UploadMsgRes: {\n                    '$': {\"100\":[\"err\",\"uint32\",0]}\n                }\n            },\n            Other: {\n                OtherNotify: {\n                    '$': {\"100\":[\"err\",\"uint32\",0]}\n                },\n                StopChatStreamReq: {\n                    '$': {\"1\":[\"chatId\",\"uint32\",0],\"2\":[\"msgId\",\"uint32\",0]}\n                }\n            },\n            Sync: {\n                SyncReq: {\n                    '$': {\"1\":[\"userStoreData\",\"default.PTP.Common.UserStoreData\",null]}\n                },\n                SyncRes: {\n                    '$': {\"1\":[\"userStoreData\",\"default.PTP.Common.UserStoreData\",null],\"100\":[\"err\",\"uint32\",0]}\n                }\n            },\n            User: {\n                DownloadUserReq: {\n                    '$': {\"1\":[\"userIds\",\"<string\",null]}\n                },\n                DownloadUserRes: {\n                    '$': {\"1\":[\"users\",\"<default.PTP.Common.UserStoreRow\",null],\"100\":[\"err\",\"uint32\",0]}\n                },\n                GenUserIdReq: {\n                    '$': {}\n                },\n                GenUserIdRes: {\n                    '$': {\"1\":[\"userId\",\"uint32\",0],\"100\":[\"err\",\"uint32\",0]}\n                },\n                UploadUserReq: {\n                    '$': {\"1\":[\"users\",\"<default.PTP.Common.UserStoreRow\",null],\"3\":[\"time\",\"uint32\",0]}\n                },\n                UploadUserRes: {\n                    '$': {\"100\":[\"err\",\"uint32\",0]}\n                }\n            }\n        }\n    }\n}, '', $root, false);\n\n// exposing 'default' to global/window\nprotobuf.util.global['default'] = $root['default'];\n\n//module.exports = protobuf.util.global['default']\n\nexport default protobuf.util.global['default'];\n","import {\n  entropyToMnemonic,\n  generateMnemonic,\n  mnemonicToEntropy,\n  mnemonicToSeedSync,\n  setDefaultWordlist,\n  validateMnemonic,\n} from 'bip39';\n\nexport type MnemonicLangEnum = 'english' | 'chinese_simplified';\n\nexport default class Mnemonic {\n  private lang: MnemonicLangEnum | undefined;\n  private words: string | undefined;\n\n  constructor(words?: string, lang?: MnemonicLangEnum) {\n    if (!lang) {\n      lang = 'english';\n    }\n    Object.defineProperty(this, 'lang', {\n      value: lang,\n      writable: false,\n    });\n\n    setDefaultWordlist(this.lang!);\n    if (!words) {\n      words = generateMnemonic();\n    }\n\n    Object.defineProperty(this, 'words', {\n      value: words,\n      writable: false,\n    });\n  }\n\n  getLang() {\n    return this.lang;\n  }\n\n  getWords() {\n    return this.words!;\n  }\n\n  checkMnemonic() {\n    return validateMnemonic(this.words!);\n  }\n\n  toSeedBuffer(password?: string) {\n    if (!password) password = '';\n    return mnemonicToSeedSync(this.getWords()!, password);\n  }\n\n  toSeedHex(password?: string) {\n    return this.toSeedBuffer(password).toString('hex');\n  }\n  toEntropy() {\n    return mnemonicToEntropy(this.getWords()!);\n  }\n\n  static fromEntropy(entropy: string, lang?: MnemonicLangEnum) {\n    const words = entropyToMnemonic(entropy);\n    return new Mnemonic(words, lang);\n  }\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","// eslint-disable-next-line no-restricted-globals\nconst cacheApi = self.caches;\n\nexport enum Type {\n  Text,\n  Blob,\n  Json,\n  ArrayBuffer,\n}\n\nexport async function fetch(\n  cacheName: string, key: string, type: Type, isHtmlAllowed = false,\n) {\n  if (!cacheApi) {\n    return undefined;\n  }\n\n  try {\n    // To avoid the error \"Request scheme 'webdocument' is unsupported\"\n    const request = new Request(key.replace(/:/g, '_'));\n    const cache = await cacheApi.open(cacheName);\n    const response = await cache.match(request);\n    if (!response) {\n      return undefined;\n    }\n\n    const contentType = response.headers.get('Content-Type');\n\n    switch (type) {\n      case Type.Text:\n        return await response.text();\n      case Type.Blob: {\n        // Ignore deprecated data-uri avatars\n        if (key.startsWith('avatar') && contentType && contentType.startsWith('text')) {\n          return undefined;\n        }\n\n        const blob = await response.blob();\n        const shouldRecreate = !blob.type || (!isHtmlAllowed && blob.type.includes('html'));\n        // iOS Safari fails to preserve `type` in cache\n        let resolvedType = blob.type || contentType;\n\n        if (!(shouldRecreate && resolvedType)) {\n          return blob;\n        }\n\n        // Prevent HTML-in-video attacks (for files that were cached before fix)\n        if (!isHtmlAllowed) {\n          resolvedType = resolvedType.replace(/html/gi, '');\n        }\n\n        return new Blob([blob], { type: resolvedType });\n      }\n      case Type.Json:\n        return await response.json();\n      case Type.ArrayBuffer:\n        return await response.arrayBuffer();\n      default:\n        return undefined;\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function save(cacheName: string, key: string, data: AnyLiteral | Blob | ArrayBuffer | string) {\n  if (!cacheApi) {\n    return undefined;\n  }\n\n  try {\n    const cacheData = typeof data === 'string' || data instanceof Blob || data instanceof ArrayBuffer\n      ? data\n      : JSON.stringify(data);\n    // To avoid the error \"Request scheme 'webdocument' is unsupported\"\n    const request = new Request(key.replace(/:/g, '_'));\n    const response = new Response(cacheData);\n    const cache = await cacheApi.open(cacheName);\n    return await cache.put(request, response);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function remove(cacheName: string, key: string) {\n  try {\n    if (!cacheApi) {\n      return undefined;\n    }\n\n    const cache = await cacheApi.open(cacheName);\n    return await cache.delete(key);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n\nexport async function clear(cacheName: string) {\n  try {\n    if (!cacheApi) {\n      return undefined;\n    }\n\n    return await cacheApi.delete(cacheName);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err);\n    return undefined;\n  }\n}\n","type Scheduler =\n  typeof requestAnimationFrame\n  | typeof onTickEnd;\n\nexport function debounce<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n  shouldRunLast = true,\n) {\n  let waitingTimeout: number | undefined;\n\n  return (...args: Parameters<F>) => {\n    if (waitingTimeout) {\n      clearTimeout(waitingTimeout);\n      waitingTimeout = undefined;\n    } else if (shouldRunFirst) {\n      fn(...args);\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    waitingTimeout = self.setTimeout(() => {\n      if (shouldRunLast) {\n        fn(...args);\n      }\n\n      waitingTimeout = undefined;\n    }, ms);\n  };\n}\n\nexport function throttle<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n) {\n  let interval: number | undefined;\n  let isPending: boolean;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    isPending = true;\n    args = _args;\n\n    if (!interval) {\n      if (shouldRunFirst) {\n        isPending = false;\n        fn(...args);\n      }\n\n      // eslint-disable-next-line no-restricted-globals\n      interval = self.setInterval(() => {\n        if (!isPending) {\n          // eslint-disable-next-line no-restricted-globals\n          self.clearInterval(interval!);\n          interval = undefined;\n          return;\n        }\n\n        isPending = false;\n        fn(...args);\n      }, ms);\n    }\n  };\n}\n\nexport function fastRafWithFallback<F extends AnyToVoidFunction>(fn: F) {\n  return fastRaf(fn, false, true);\n}\n\nexport function fastRafPrimaryWithFallback<F extends AnyToVoidFunction>(fn: F) {\n  return fastRaf(fn, true, true);\n}\n\nexport function throttleWithRafFallback<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRafWithFallback, fn);\n}\n\nexport function throttleWithPrimaryRafFallback<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRafPrimaryWithFallback, fn);\n}\n\nexport function throttleWithRaf<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRaf, fn);\n}\n\nexport function throttleWithPrimaryRaf<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(fastRafPrimary, fn);\n}\n\nexport function throttleWithTickEnd<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(onTickEnd, fn);\n}\n\nexport function throttleWithPrimaryTickEnd<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(onTickEndPrimary, fn);\n}\n\nexport function throttleWith<F extends AnyToVoidFunction>(schedulerFn: Scheduler, fn: F) {\n  let waiting = false;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    args = _args;\n\n    if (!waiting) {\n      waiting = true;\n\n      schedulerFn(() => {\n        waiting = false;\n        fn(...args);\n      });\n    }\n  };\n}\n\nexport function onIdle(cb: NoneToVoidFunction, timeout?: number) {\n  // eslint-disable-next-line no-restricted-globals\n  if (self.requestIdleCallback) {\n    // eslint-disable-next-line no-restricted-globals\n    self.requestIdleCallback(cb, { timeout });\n  } else {\n    onTickEnd(cb);\n  }\n}\n\nexport const pause = (ms: number) => new Promise<void>((resolve) => {\n  setTimeout(() => resolve(), ms);\n});\n\nexport function rafPromise() {\n  return new Promise<void>((resolve) => {\n    fastRaf(resolve);\n  });\n}\n\nlet fastRafCallbacks: NoneToVoidFunction[] | undefined;\nlet fastRafPrimaryCallbacks: NoneToVoidFunction[] | undefined;\nlet timeoutCallbacks: NoneToVoidFunction[] | undefined;\nlet timeoutPrimaryCallbacks: NoneToVoidFunction[] | undefined;\nlet timeout: NodeJS.Timeout | undefined;\n\nconst FAST_RAF_TIMEOUT_FALLBACK_MS = 300;\n\n// May result in an immediate execution if called from another RAF callback which was scheduled\n// (and therefore is executed) earlier than RAF callback scheduled by `fastRaf`\nexport function fastRaf(callback: NoneToVoidFunction, isPrimary = false, withTimeoutFallback = false) {\n  if (!fastRafCallbacks) {\n    fastRafCallbacks = !withTimeoutFallback && !isPrimary ? [callback] : [];\n    fastRafPrimaryCallbacks = !withTimeoutFallback && isPrimary ? [callback] : [];\n    timeoutCallbacks = withTimeoutFallback && !isPrimary ? [callback] : [];\n    timeoutPrimaryCallbacks = withTimeoutFallback && isPrimary ? [callback] : [];\n\n    requestAnimationFrame(() => {\n      const currentCallbacks = fastRafCallbacks!;\n      const currentPrimaryCallbacks = fastRafPrimaryCallbacks!;\n      const currentTimeoutCallbacks = timeoutCallbacks!;\n      const currentTimeoutPrimaryCallbacks = timeoutPrimaryCallbacks!;\n\n      if (timeout) clearTimeout(timeout);\n      timeout = undefined;\n\n      fastRafCallbacks = undefined;\n      fastRafPrimaryCallbacks = undefined;\n      timeoutCallbacks = undefined;\n      timeoutPrimaryCallbacks = undefined;\n\n      currentPrimaryCallbacks.forEach((cb) => cb());\n      currentTimeoutPrimaryCallbacks.forEach((cb) => cb());\n      currentCallbacks.forEach((cb) => cb());\n      currentTimeoutCallbacks.forEach((cb) => cb());\n    });\n  } else if (isPrimary) {\n    if (withTimeoutFallback) {\n      timeoutPrimaryCallbacks!.push(callback);\n    } else {\n      fastRafPrimaryCallbacks!.push(callback);\n    }\n  } else if (withTimeoutFallback) {\n    timeoutCallbacks!.push(callback);\n  } else {\n    fastRafCallbacks.push(callback);\n  }\n\n  if (!timeout && withTimeoutFallback) {\n    timeout = setTimeout(() => {\n      const currentTimeoutCallbacks = timeoutCallbacks!;\n      const currentTimeoutPrimaryCallbacks = timeoutPrimaryCallbacks!;\n\n      if (timeout) clearTimeout(timeout);\n      timeout = undefined;\n\n      timeoutCallbacks = [];\n      timeoutPrimaryCallbacks = [];\n\n      currentTimeoutPrimaryCallbacks.forEach((cb) => cb());\n      currentTimeoutCallbacks.forEach((cb) => cb());\n    }, FAST_RAF_TIMEOUT_FALLBACK_MS);\n  }\n}\n\nexport function fastRafPrimary(callback: NoneToVoidFunction) {\n  fastRaf(callback, true);\n}\n\nlet onTickEndCallbacks: NoneToVoidFunction[] | undefined;\nlet onTickEndPrimaryCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onTickEnd(callback: NoneToVoidFunction, isPrimary = false) {\n  if (!onTickEndCallbacks) {\n    onTickEndCallbacks = isPrimary ? [] : [callback];\n    onTickEndPrimaryCallbacks = isPrimary ? [callback] : [];\n\n    Promise.resolve().then(() => {\n      const currentCallbacks = onTickEndCallbacks!;\n      const currentPrimaryCallbacks = onTickEndPrimaryCallbacks!;\n      onTickEndCallbacks = undefined;\n      onTickEndPrimaryCallbacks = undefined;\n      currentPrimaryCallbacks.forEach((cb) => cb());\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else if (isPrimary) {\n    onTickEndPrimaryCallbacks!.push(callback);\n  } else {\n    onTickEndCallbacks.push(callback);\n  }\n}\n\nexport function onTickEndPrimary(callback: NoneToVoidFunction) {\n  onTickEnd(callback, true);\n}\n\nlet beforeUnloadCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onBeforeUnload(callback: NoneToVoidFunction, isLast = false) {\n  if (!beforeUnloadCallbacks) {\n    beforeUnloadCallbacks = [];\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('beforeunload', () => {\n      beforeUnloadCallbacks!.forEach((cb) => cb());\n    });\n  }\n\n  if (isLast) {\n    beforeUnloadCallbacks.push(callback);\n  } else {\n    beforeUnloadCallbacks.unshift(callback);\n  }\n\n  return () => {\n    beforeUnloadCallbacks = beforeUnloadCallbacks!.filter((cb) => cb !== callback);\n  };\n}\n","/**\n * ECIES encrypt/decrypt with Ethereum keys\n * Modified from https://github.com/vhpoet/simple-ecies/blob/master/index.js\n */\n// @ts-ignore\nimport { ec as EC } from 'elliptic';\n// import Crypto from 'crypto';\nconst Crypto = require('crypto-browserify')\n\nconst { Buffer } = require('buffer');\n\nconst ec = new EC('secp256k1');\n\ntype Opts = {\n  iv?: Buffer;\n  ephemPrivKey?: Buffer;\n};\n\n/**\n * AES-256 CBC encrypt\n * @param {Buffer} iv\n * @param {Buffer} key\n * @param {Buffer} plaintext\n * @returns {Buffer} ciphertext\n */\nconst AES256CbcEncrypt = (\n  iv: Buffer,\n  key: Buffer,\n  plaintext: Buffer\n): Buffer => {\n  const cipher = Crypto.createCipheriv('aes-256-cbc', key, iv);\n  const firstChunk = cipher.update(plaintext);\n  const secondChunk = cipher.final();\n  return Buffer.concat([firstChunk, secondChunk]);\n};\n\n/**\n * AES-256 CBC decrypt\n * @param {Buffer} iv\n * @param {Buffer} key\n * @param {Buffer} ciphertext\n * @returns {Buffer} plaintext\n */\nconst AES256CbcDecrypt = (\n  iv: Buffer,\n  key: Buffer,\n  ciphertext: Buffer\n): Buffer => {\n  const cipher = Crypto.createDecipheriv('aes-256-cbc', key, iv);\n  const firstChunk = cipher.update(ciphertext);\n  const secondChunk = cipher.final();\n  return Buffer.concat([firstChunk, secondChunk]);\n};\n\n/**\n * Compares if two buffers are equal\n * @param {Buffer} b1\n * @param {Buffer} b2\n * @returns {boolean} true if the buffers are equal\n */\nconst BufferEqual = (b1: Buffer, b2: Buffer): boolean => {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n  let res = 0;\n  for (let i = 0; i < b1.length; i++) {\n    res |= b1[i] ^ b2[i];\n  }\n  return res === 0;\n};\n\n/**\n * ECIES encrypt\n * @param {Buffer} pubKeyTo Ethereum pub key, 64 bytes\n * @param {Buffer} plainBuffer Plaintext to be encrypted\n * @param opts\n * optional iv (16 bytes) and ephem key (32 bytes)\n * @returns {Buffer} Encrypted message, serialized, 113+ bytes\n */\nexport const encrypt = (\n  pubKeyTo: Buffer,\n  plainBuffer: Buffer,\n  opts: Opts = {}\n): Buffer => {\n  if (64 !== pubKeyTo.length) {\n    throw new Error('pubKeyTo len must 64');\n  }\n  const prvKey = opts.ephemPrivKey! || Crypto.randomBytes(32);\n  const ephemPrivKey = ec.keyFromPrivate(prvKey);\n  const ephemPubKey = ephemPrivKey.getPublic();\n  const ephemPubKeyEncoded = Buffer.from(ephemPubKey.encode('array', false));\n\n  // Every EC public key begins with the 0x04 prefix before giving\n  // the location of the two point on the curve\n  const pubKey = Buffer.concat([Buffer.from([0x04]), pubKeyTo]);\n  const pubKey1 = ec.keyFromPublic(pubKey);\n  const px = ephemPrivKey.derive(pubKey1.getPublic());\n\n  const hash = Crypto.createHash('sha512')\n    .update(px.toArrayLike(Buffer))\n    .digest();\n  const iv = opts.iv || Crypto.randomBytes(16);\n  const encryptionKey = hash.slice(0, 32);\n  const macKey = hash.slice(32);\n\n  const ciphertext = AES256CbcEncrypt(iv, encryptionKey, plainBuffer);\n\n  const dataToMac = Buffer.concat([iv, ephemPubKeyEncoded, ciphertext]);\n\n  const mac = Crypto.createHmac('sha256', macKey).update(dataToMac).digest();\n\n  return Buffer.concat([\n    iv, // 16 bytes\n    ephemPubKeyEncoded, // 65 bytes\n    mac, // 32 bytes\n    ciphertext,\n  ]);\n};\n\n/**\n * ECIES decrypt\n * @param {Buffer} privKey Ethereum private key, 32 bytes\n * @param {Buffer} encrypted Encrypted message, serialized, 113+ bytes\n * @param opts\n * @returns {Buffer} plaintext\n */\nexport const decrypt = (\n  privKey: Buffer,\n  encrypted: Buffer,\n  opts: Opts = {}\n) => {\n  opts = opts || {};\n  let ephemPubKeyEncoded;\n  let ephemPubKey;\n  let offset = 0;\n  if (opts.ephemPrivKey) {\n    offset = 65;\n    const ephemPrivKey = ec.keyFromPrivate(opts.ephemPrivKey);\n    ephemPubKey = ephemPrivKey.getPublic();\n    ephemPubKeyEncoded = Buffer.from(ephemPubKey.encode('array', false));\n  } else {\n    ephemPubKeyEncoded = encrypted.slice(16, 81);\n    ephemPubKey = ec.keyFromPublic(ephemPubKeyEncoded).getPublic();\n  }\n\n  const iv = encrypted.slice(0, 16);\n  const mac = encrypted.slice(81 - offset, 113 - offset);\n  const ciphertext = encrypted.slice(113 - offset);\n  const px = ec.keyFromPrivate(privKey).derive(ephemPubKey);\n  const hash = Crypto.createHash('sha512')\n    .update(px.toArrayLike(Buffer))\n    .digest();\n  const encryptionKey = hash.slice(0, 32);\n  const macKey = hash.slice(32);\n  const dataToMac = Buffer.concat([iv, ephemPubKeyEncoded, ciphertext]);\n  const computedMac = Crypto.createHmac('sha256', macKey)\n    .update(dataToMac)\n    .digest();\n  // verify mac\n  if (!BufferEqual(computedMac, mac)) {\n    throw new Error('MAC mismatch');\n  }\n  return AES256CbcDecrypt(iv, encryptionKey, ciphertext);\n};\n","import { hdkey as HDKey } from 'ethereumjs-wallet';\n\nimport Mnemonic, {MnemonicLangEnum} from './Mnemonic';\nimport {EncryptType} from \"../protobuf/PTPCommon/types\";\n\nexport const ETH_HD_PATH = \"m/44'/60'/0'\";\nexport const PTP_HD_PATH = \"m/44'/60'/1'\";\nexport const PTP_GROUP_HD_PATH = \"m/44'/60'/1'\";\n\n\nexport default class Wallet {\n  private __masterKey: any | undefined;\n\n  constructor(mnemonic: Mnemonic, password?: string | undefined) {\n    const seed = mnemonic.toSeedBuffer(password);\n    this.__masterKey = HDKey.fromMasterSeed(seed);\n    Object.defineProperty(this, '__masterKey', {\n      value: HDKey.fromMasterSeed(seed),\n      writable: false,\n    });\n  }\n\n  getMashKey() {\n    return this.__masterKey!;\n  }\n\n  static fromEntropy(\n    entropy: string,\n    password: string | undefined,\n    lang: MnemonicLangEnum | undefined\n  ) {\n    const mnemonic = Mnemonic.fromEntropy(entropy, lang);\n    return new Wallet(mnemonic, password);\n  }\n\n  getChild(\n    root: string,\n    childIndex = 0,\n    changeIndex: number = 0,\n    hex: boolean = false\n  ) {\n    const path = `${root}/${changeIndex}/${childIndex}`;\n    const childKey = this.getMashKey().derivePath(path);\n    const address = childKey.getWallet().getAddressString();\n    const prvKey = childKey._hdkey.privateKey;\n    const pubKey = childKey._hdkey.publicKey;\n    const pubKey_ = childKey.getWallet().getPublicKey();\n    if (hex) {\n      return {\n        path,\n        address,\n        prvKey: Wallet.bufferToHex(prvKey),\n        pubKey: Wallet.bufferToHex(pubKey),\n        pubKey_: Wallet.bufferToHex(pubKey_),\n      };\n    } else {\n      return {\n        path,\n        address,\n        prvKey,\n        pubKey,\n        pubKey_,\n      };\n    }\n  }\n\n  static bufferToHex(buffer: Buffer) {\n    return '0x' + buffer.toString('hex');\n  }\n\n  getEthWallet(childIndex: number, hex?: boolean) {\n    return this.getChild(ETH_HD_PATH, childIndex, 0, !!hex);\n  }\n\n  getPTPWallet(childIndex: number, hex?: boolean) {\n    return this.getChild(PTP_HD_PATH, childIndex, EncryptType.EncryptType_Wallet, !!hex);\n  }\n\n  getPTPEncryptWallet(childIndex: number, type:EncryptType) {\n    return this.getChild(PTP_HD_PATH, childIndex, type, false);\n  }\n\n  getGroupWallet(childIndex: number, hex?: boolean) {\n    return this.getChild(PTP_GROUP_HD_PATH, childIndex, EncryptType.EncryptType_Group, !!hex);\n  }\n}\n","import assert from 'assert';\nimport BN from 'bn.js';\n\nconst { Buffer } = require('buffer');\nconst {\n  keccak224,\n  keccak384,\n  keccak256,\n  keccak512,\n} = require('ethereum-cryptography/keccak');\nconst {\n  ecdsaRecover,\n  publicKeyConvert,\n  ecdsaSign,\n} = require('ethereum-cryptography/secp256k1');\n\nexport type BNLike = BN | PrefixedHexString | number | Buffer;\nexport type PrefixedHexString = string;\n\nexport interface ECDSASignature {\n  v: number;\n  r: Buffer;\n  s: Buffer;\n}\n\nexport interface ECDSASignatureBuffer {\n  v: Buffer;\n  r: Buffer;\n  s: Buffer;\n}\n\nconst ETH_Signed_Message = '\\u0019Ethereum Signed Message:\\n';\nconst PTP_Signed_Message = '\\u0019PTP Signed Message:\\n';\nconst PTP_GROUP_Signed_Message = '\\u0019PTP GROUP Signed Message:\\n';\n\n\nexport enum SignMsgType {\n  SignMsgType_eth = 1000,\n  SignMsgType_ptp = 1001,\n  SignMsgType_ptp_group = 1002,\n}\n\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexport const assertIsBuffer = function (input: Buffer): void {\n  if (!Buffer.isBuffer(input)) {\n    const msg = `This method only supports Buffer but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexport const bufferToHex = function (buf: Buffer): string {\n  return '0x' + buf.toString('hex');\n};\n\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nexport const keccak = function (a: Buffer, bits: number = 256): Buffer {\n  assertIsBuffer(a);\n  switch (bits) {\n    case 224: {\n      return keccak224(a);\n    }\n    case 256: {\n      return keccak256(a);\n    }\n    case 384: {\n      return keccak384(a);\n    }\n    case 512: {\n      return keccak512(a);\n    }\n    default: {\n      throw new Error(`Invald algorithm: keccak${bits}`);\n    }\n  }\n};\n\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexport const bufferToInt = function (buf: Buffer): number {\n  return new BN(buf).toNumber();\n};\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexport const fromSigned = function (num: Buffer): BN {\n  return new BN(num).fromTwos(256);\n};\n\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexport const toUnsigned = function (num: BN): Buffer {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nexport const intToHex = function (i: number) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`);\n  }\n  return `0x${i.toString(16)}`;\n};\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexport const addHexPrefix = function (str: string): string {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str : '0x' + str;\n};\n\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nexport function isHexPrefixed(str: string): boolean {\n  if (typeof str !== 'string') {\n    throw new Error(\n      `[isHexPrefixed] input must be type 'string', received type ${typeof str}`\n    );\n  }\n\n  return str[0] === '0' && str[1] === 'x';\n}\n\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nexport const stripHexPrefix = (str: string): string => {\n  if (typeof str !== 'string')\n    throw new Error(\n      `[stripHexPrefix] input must be type 'string', received ${typeof str}`\n    );\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n};\n\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nexport function padToEven(value: string): string {\n  let a = value;\n\n  if (typeof a !== 'string') {\n    throw new Error(\n      `[padToEven] value must be type 'string', received ${typeof a}`\n    );\n  }\n\n  if (a.length % 2) a = `0${a}`;\n\n  return a;\n}\n//\n// function padWithZeroes(number: string, length: number) {\n//   let myString = `${number}`;\n//   while (myString.length < length) {\n//     myString = `0${myString}`;\n//   }\n//   return myString;\n// }\n//\n// function concatSig(v: Buffer, r: Buffer, s: Buffer) {\n//   const rSig = fromSigned(r);\n//   const sSig = fromSigned(s);\n//   const vSig = bufferToInt(v);\n//   const rStr = padWithZeroes(toUnsigned(rSig).toString('hex'), 64);\n//   const sStr = padWithZeroes(toUnsigned(sSig).toString('hex'), 64);\n//   const vStr = stripHexPrefix(intToHex(vSig));\n//   return addHexPrefix(rStr.concat(sStr, vStr));\n// }\n\nfunction getPublicKeyFor(msgData: Buffer, signature: Buffer) {\n  const msgHash = keccak(msgData);\n  // console.debug(\"getPublicKeyFor\", {msgHash})\n  // console.debug(\"msg_hash_hex\", bufferToHex(msgHash))\n  const sigParams = fromRpcSig(signature);\n  return ecrecover(msgHash, sigParams.v, sigParams.r, sigParams.s);\n}\n\nfunction getPublicKey65For(msgData: Buffer, signature: Buffer) {\n  const msgHash = keccak(msgData);\n  // console.debug(\"getPublicKeyFor\", {msgHash})\n  // console.debug(\"msg_hash_hex\", bufferToHex(msgHash))\n  const sigParams = fromRpcSig(signature);\n  return ecrecoverPubKey65(msgHash, sigParams.v, sigParams.r, sigParams.s);\n}\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthLeft = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg);\n  return setLength(msg, length, false);\n};\n\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthRight = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg);\n  return setLength(msg, length, true);\n};\n\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexport const zeros = function (bytes: number): Buffer {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg: Buffer, length: number, right: boolean) {\n  const buf = zeros(length);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (\n  msgHash: Buffer,\n  v: BNLike,\n  r: Buffer,\n  s: Buffer,\n  chainId?: BNLike\n): Buffer {\n  const signature = Buffer.concat(\n    [setLengthLeft(r, 32), setLengthLeft(s, 32)],\n    64\n  );\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const senderPubKey = ecdsaRecover(signature, recovery.toNumber(), msgHash);\n  return Buffer.from(publicKeyConvert(senderPubKey, false).slice(1));\n};\n\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecoverPubKey65 = function (\n  msgHash: Buffer,\n  v: BNLike,\n  r: Buffer,\n  s: Buffer,\n  chainId?: BNLike\n): Uint8Array {\n  const signature = Buffer.concat(\n    [setLengthLeft(r, 32), setLengthLeft(s, 32)],\n    64\n  );\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const senderPubKey = ecdsaRecover(signature, recovery.toNumber(), msgHash);\n  return publicKeyConvert(senderPubKey, false);\n};\n\n/**\n * Type output options\n */\nexport enum TypeOutput {\n  Number,\n  BN,\n  Buffer,\n  PrefixedHexString,\n}\n\nfunction isValidSigRecovery(recovery: number | BN): boolean {\n  const rec = new BN(recovery);\n  return rec.eqn(0) || rec.eqn(1);\n}\n\n/*\n * A type that represents an object that has a `toArray()` method.\n */\nexport interface TransformableToArray {\n  toArray(): Uint8Array;\n\n  toBuffer?(): Buffer;\n}\n\n/*\n * A type that represents an object that has a `toBuffer()` method.\n */\nexport interface TransformableToBuffer {\n  toBuffer(): Buffer;\n\n  toArray?(): Uint8Array;\n}\n\nexport type ToBufferInputTypes =\n  | PrefixedHexString\n  | number\n  | BN\n  | Buffer\n  | Uint8Array\n  | number[]\n  | TransformableToArray\n  | TransformableToBuffer\n  | null\n  | undefined;\n\nexport type TypeOutputReturnType = {\n  [TypeOutput.Number]: number;\n  [TypeOutput.BN]: BN;\n  [TypeOutput.Buffer]: Buffer;\n  [TypeOutput.PrefixedHexString]: PrefixedHexString;\n};\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nexport const intToBuffer = function (i: number) {\n  const hex = intToHex(i);\n  return Buffer.from(padToEven(hex.slice(2)), 'hex');\n};\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nexport const toBuffer = function (v: ToBufferInputTypes): Buffer {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v as Uint8Array);\n  }\n\n  if (typeof v === 'string') {\n    if (!isHexString(v)) {\n      throw new Error(\n        `Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`\n      );\n    }\n    return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n  }\n\n  if (typeof v === 'number') {\n    return intToBuffer(v);\n  }\n\n  if (BN.isBN(v)) {\n    if (v.isNeg()) {\n      throw new Error(`Cannot convert negative BN to buffer. Given: ${v}`);\n    }\n    return v.toArrayLike(Buffer);\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n\n  throw new Error('invalid type');\n};\n\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */\nexport function isHexString(value: string, length?: number): boolean {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))\n    return false;\n\n  if (length && value.length !== 2 + 2 * length) return false;\n\n  return true;\n}\n\n/**\n * Convert an input to a specified type.\n * Input of null/undefined returns null/undefined regardless of the output type.\n * @param input value to convert\n * @param outputType type to output\n */\nexport function toType<T extends TypeOutput>(input: null, outputType: T): null;\n// eslint-disable-next-line no-redeclare\nexport function toType<T extends TypeOutput>(\n  input: undefined,\n  outputType: T\n): undefined;\n// eslint-disable-next-line no-redeclare\nexport function toType<T extends TypeOutput>(\n  input: ToBufferInputTypes,\n  outputType: T\n): TypeOutputReturnType[T];\n// eslint-disable-next-line no-redeclare\nexport function toType<T extends TypeOutput>(\n  input: ToBufferInputTypes,\n  outputType: T\n): TypeOutputReturnType[T] | undefined | null {\n  if (input === null) {\n    return null;\n  }\n  if (input === undefined) {\n    return undefined;\n  }\n\n  if (typeof input === 'string' && !isHexString(input)) {\n    throw new Error(\n      `A string must be provided with a 0x-prefix, given: ${input}`\n    );\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error(\n      'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'\n    );\n  }\n\n  const output = toBuffer(input);\n\n  if (outputType === TypeOutput.Buffer) {\n    return output as TypeOutputReturnType[T];\n  } else if (outputType === TypeOutput.BN) {\n    return new BN(output) as TypeOutputReturnType[T];\n  } else if (outputType === TypeOutput.Number) {\n    const bn = new BN(output);\n    const max = new BN(Number.MAX_SAFE_INTEGER.toString());\n    if (bn.gt(max)) {\n      throw new Error(\n        'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)'\n      );\n    }\n    return bn.toNumber() as TypeOutputReturnType[T];\n  } else {\n    // outputType === TypeOutput.PrefixedHexString\n    return `0x${output.toString('hex')}` as TypeOutputReturnType[T];\n  }\n}\n\nfunction calculateSigRecovery(v: BNLike, chainId?: BNLike): BN {\n  const vBN = toType(v, TypeOutput.BN);\n\n  if (vBN.eqn(0) || vBN.eqn(1)) return toType(v, TypeOutput.BN);\n\n  if (!chainId) {\n    return vBN.subn(27);\n  }\n  const chainIdBN = toType(chainId, TypeOutput.BN);\n  return vBN.sub(chainIdBN.muln(2).addn(35));\n}\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nexport const fromRpcSig = function (buf: Buffer): ECDSASignature {\n  let r: Buffer;\n  let s: Buffer;\n  let v: number;\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = bufferToInt(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = bufferToInt(buf.slice(32, 33)) >> 7;\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  }\n\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v,\n    r,\n    s,\n  };\n};\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexport const pubToAddress = function (\n  pubKey: Buffer,\n  sanitize: boolean = false\n): Buffer {\n  assertIsBuffer(pubKey);\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = Buffer.from(publicKeyConvert(pubKey, false).slice(1));\n  }\n  assert(pubKey.length === 64);\n  // Only take the lower 160bits of the hash\n  const hash = keccak(pubKey);\n  // console.debug('pubToAddress keccak(pubKey)', hash.length, hash);\n  return hash.slice(-20);\n};\nexport const publicToAddress = pubToAddress;\n\nexport function ecsign(\n  msgHash: Buffer,\n  privateKey: Buffer,\n  chainId?: any\n): any {\n  const { signature, recid } = ecdsaSign(msgHash, privateKey, {\n    recovered: true,\n  });\n  const r = Buffer.from(signature.slice(0, 32));\n  const s = Buffer.from(signature.slice(32, 64));\n\n  if (!chainId || typeof chainId === 'number') {\n    // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n    if (chainId && !Number.isSafeInteger(chainId)) {\n      throw new Error(\n        'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'\n      );\n    }\n    const v = chainId ? recid + (chainId * 2 + 35) : recid + 27;\n    return { r, s, v };\n  }\n  //@todo\n  // const chainIdBN = toType(chainId as BNLike, TypeOutput.BN)\n  // const v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer)\n  // return { r, s, v }\n}\n\nexport default class EcdsaHelper {\n  //@ts-ignore\n  private pubKey: Buffer | undefined;\n  private prvKey: Buffer | undefined;\n\n  constructor({ pubKey, prvKey }: { pubKey: Buffer; prvKey: Buffer }) {\n    Object.defineProperty(this, 'pubKey', {\n      value: pubKey,\n      writable: false,\n    });\n    Object.defineProperty(this, 'prvKey', {\n      value: prvKey,\n      writable: false,\n    });\n  }\n  static getSignMsgData(message: string,signMsgType:SignMsgType = SignMsgType.SignMsgType_ptp){\n    const data = Buffer.from(message, 'utf-8');\n    let prefix;\n    if(signMsgType == SignMsgType.SignMsgType_eth){\n      prefix = Buffer.from(`${ETH_Signed_Message}${data.length}`, 'utf-8');\n    }else if (signMsgType == SignMsgType.SignMsgType_ptp_group){\n      prefix = Buffer.from(`${PTP_GROUP_Signed_Message}${data.length}`, 'utf-8');\n    }else{\n      prefix = Buffer.from(`${PTP_Signed_Message}${data.length}`, 'utf-8');\n    }\n    //console.log(\"getSignMsgData\",Buffer.concat([prefix, data]).toString())\n    return Buffer.concat([prefix, data]);\n  }\n  sign(message: string) {\n    const msgHash = keccak(EcdsaHelper.getSignMsgData(message));\n    // console.debug(\"sign\", {msgHash})\n    const sig = ecsign(msgHash, this.prvKey!);\n    // const serialized = concatSig(sig.v, sig.r, sig.s);\n    return Buffer.concat([sig.r, sig.s, intToBuffer(sig.v)]);\n  }\n\n  static recoverAddress({ sig, message }: { sig: Buffer; message: string }) {\n    const publicKey = getPublicKeyFor(EcdsaHelper.getSignMsgData(message), sig);\n    // console.debug('recoverAddress publicKey', publicKey.length, publicKey);\n    // console.debug('recoverAddress publicKey hex', bufferToHex(publicKey));\n    const sender = publicToAddress(publicKey);\n    const senderHex = bufferToHex(sender);\n    // console.debug('recoverAddress', sender.length, sender, senderHex);\n    return senderHex;\n  }\n\n  static recoverAddressAndPubKey({\n    sig,\n    message,\n  }: {\n    sig: Buffer;\n    message: string;\n  }) {\n    const publicKey = getPublicKey65For(EcdsaHelper.getSignMsgData(message), sig);\n    // console.debug('recoverAddress publicKey', publicKey.length, publicKey);\n    // console.debug('recoverAddress publicKey hex', bufferToHex(publicKey));\n    const sender = publicToAddress(Buffer.from(publicKey.slice(1)));\n    const senderHex = bufferToHex(sender);\n    // console.debug('recoverAddress', sender.length, sender, senderHex);\n    return { address: senderHex, pubKey: Buffer.from(publicKey) };\n  }\n}\n","const { Buffer } = require('buffer');\nconst crypto = require('crypto-browserify');\n\nconst ALGORITHM = 'aes-256-gcm';\n\nexport default class Aes256Gcm {\n  /**\n   * Encrypts text with AES 256 GCM.\n   * @param {Buffer} text - Cleartext to encode.\n   * @param {Buffer|null} iv - iv\n   * @param {Buffer|null} aad - needAad\n   * @param {Buffer} secret - Shared secret key, must be 32 bytes.\n   * @returns {object}\n   */\n  static encrypt(\n    text: Buffer,\n    secret: Buffer,\n    iv?: Buffer | null,\n    aad?: Buffer | null\n  ) {\n    const cipher = crypto.createCipheriv(ALGORITHM, secret, iv);\n    if (aad) {\n      cipher.setAAD(aad);\n    }\n\n    let ciphertext = cipher.update(text, 'utf8', 'binary');\n    ciphertext += cipher.final('binary');\n    const tag = cipher.getAuthTag();\n    return Buffer.concat([Buffer.from(tag), Buffer.from(ciphertext, 'binary')]);\n  }\n\n  /**\n   * Decrypts AES 256 CGM encrypted text.\n   * @param {Buffer} cipherData - Base64-encoded ciphertext.\n   * @param {Buffer} secret - Shared secret key, must be 32 bytes.\n   * @param {Buffer} iv - The base64-encoded initialization vector.\n   * @param {Buffer|null} aad - aad.\n   * @returns {Buffer}\n   */\n  static decrypt(\n    cipherData: Buffer,\n    secret: Buffer,\n    iv: Buffer,\n    aad?: Buffer | null\n  ) {\n    const tag = Buffer.from(cipherData.subarray(0, 16));\n    const decipher = crypto.createDecipheriv(ALGORITHM, secret, iv);\n    let cipherData1: Buffer;\n    if (aad) {\n      decipher.setAAD(aad);\n    }\n    cipherData1 = Buffer.from(cipherData.subarray(16, cipherData.length));\n\n    decipher.setAuthTag(tag);\n    let plainData = decipher.update(cipherData1.toString('hex'), 'hex', 'hex');\n    plainData += decipher.final('hex');\n    return Buffer.from(plainData, 'hex');\n  }\n}\n","import {ecdh} from \"ethereum-cryptography/secp256k1\";\nimport * as EthEcies from '../../lib/ptp/wallet/EthEcies';\nimport Mnemonic from \"../../lib/ptp/wallet/Mnemonic\";\nimport Wallet from \"../../lib/ptp/wallet/Wallet\";\nimport EcdsaHelper from \"../../lib/ptp/wallet/EcdsaHelper\";\nimport Aes256Gcm from \"../../lib/ptp/wallet/Aes256Gcm\";\nimport LocalStorage from \"./db/LocalStorage\";\nimport CloudFlareKv from \"./db/CloudFlareKv\";\nimport {Pdu} from \"../../lib/ptp/protobuf/BaseMsg\";\nimport {hashSha256} from \"./utils/helpers\";\nimport LocalDatabase from \"./db/LocalDatabase\";\nimport {randomize} from \"worktop/utils\";\nimport {ClientInfo_Type, EncryptType} from \"../../lib/ptp/protobuf/PTPCommon/types\";\n\nconst KEYS_PREFIX = \"a-ks\";\nconst SESSIONS_PREFIX = \"a-ss\";\n\nconst LOCAL_key =  \"86680581fcdc7b5aba47f2218884d50706b108532a624f0cbe939d9dea1bf997\"\nconst LOCAL_iv =  \"815b4192992cf4a36796ead23b8b5fd4\"\nconst LOCAL_aad =  \"60efbef0ab699df0011825d013d92148\"\n\nexport type IMsgConn = {\n  send?: (buf:Buffer|Uint8Array) => void,\n  sendPduWithCallback?:  (pdu:Pdu,timeout: number) => Promise<Pdu>\n}\n\nlet currentAccountId: number;\nlet accountIds: number[] = [];\nlet accounts: Record<number, Account> = {};\nlet serverKvStore: CloudFlareKv  | undefined = undefined\nlet clientKvStore:LocalStorage | LocalDatabase | undefined = undefined\n\nexport default class Account {\n  private accountId: number;\n  private uid?: string;\n  private userInfo?: object;\n  private shareKey?: Buffer;\n  private iv?: Buffer;\n  private aad?: Buffer;\n  private entropy?:string;\n  private session?: string;\n  private clientInfo: ClientInfo_Type | undefined;\n  constructor(accountId: number) {\n    this.accountId = accountId;\n    this.uid = \"\";\n  }\n  static getServerKv(){\n    return serverKvStore!;\n  }\n  static getClientKv(){\n    return clientKvStore!;\n  }\n  static setServerKv(kv:CloudFlareKv){\n    serverKvStore = kv;\n  }\n\n  static setClientKv(kv:LocalStorage | LocalDatabase){\n    clientKvStore = kv;\n  }\n\n  static formatSession({sign,ts,address,accountId}:{sign:Buffer,ts:number,address:string,accountId:number}){\n    return `${sign.toString(\"hex\")}_${ts}_${address}_${accountId}`\n  }\n\n  static parseSession(session:string){\n    if(session){\n      const res = session.split(\"_\")\n      const sign = res[0];\n      const time = parseInt(res[1]);\n      const address = res[2];\n      const accountId = res.length > 3 ? parseInt(res[3]) : 0\n      return {sign,time,address,accountId};\n    }else{\n      return undefined\n    }\n  }\n\n  saveSession(session:string){\n    const res = Account.parseSession(session)\n    if(res){\n      Account.getClientKv().put(`adr`,res.address)\n      Account.saveSessionByAddr(res.address,session)\n    }\n  }\n\n  getSessionAddress(){\n    const session = this.getSession()\n    if(session){\n      const {address} = Account.parseSession(session)!\n      return address\n    }else{\n      return undefined\n    }\n  }\n\n  getSession(){\n    if(this.session){\n      return this.session;\n    }else{\n      const adr = Account.getClientKv().get(`adr`);\n      if(adr){\n        this.session = Account.getSessionByAddr(adr);\n        return this.session\n      }else{\n        return undefined\n      }\n    }\n  }\n\n  delSession(){\n    this.session = undefined\n    Account.getClientKv().delete(`adr`);\n  }\n\n  static saveSessionByAddr(addr:string,session:string){\n    const sessions = Account.getSessions()\n    sessions[addr] = session;\n    Account.getClientKv().put(\n      `${SESSIONS_PREFIX}`,\n      JSON.stringify(sessions)\n    );\n  }\n\n  static getSessionByAddr(addr:string){\n    const sessions = Account.getSessions()\n    if(sessions[addr]){\n      return sessions[addr]\n    }else{\n      return undefined\n    }\n  }\n  static getSessions(){\n    const data = Account.getClientKv().get(\n      `${SESSIONS_PREFIX}`,\n    );\n    if(data){\n      return JSON.parse(data)\n    }else{\n      return {}\n    }\n  }\n\n  async saveUidFromCacheByAddress(address: string, uid: string) {\n    await Account.getServerKv().put(`ADR_UID_${address}`, uid);\n  }\n\n  async getUidFromCacheByAddress(address:string){\n    const uid_cache = await Account.getServerKv().get(`ADR_UID_${address}`)\n    return uid_cache || undefined;\n  }\n\n  getShareKey() {\n    return this.shareKey!;\n  }\n  getIv() {\n    return this.iv!;\n  }\n  getAad() {\n    return this.aad!;\n  }\n\n  getAccountId() {\n    return this.accountId;\n  }\n\n  setUid(uid: string) {\n    this.uid = uid;\n  }\n\n  setUserInfo(userInfo: object) {\n    this.userInfo = userInfo;\n  }\n\n  getUserInfo() {\n    return this.userInfo ;\n  }\n\n  getUid() {\n    return this.uid;\n  }\n\n  async verifyPwd(password:string,address:string){\n    const hash = hashSha256(password);\n    const entropy = await this.getEntropy();\n    const address1 = Account.getAddressFromEntropy(entropy,hash)\n    return address === address1;\n  }\n\n  static getAddressFromEntropy(entropy:string,pasword?:string){\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy),pasword);\n    const ethWallet = wallet.getPTPWallet(0);\n    return ethWallet.address;\n  }\n\n  genEntropy(){\n    let mnemonic = new Mnemonic();\n    this.entropy = mnemonic.toEntropy();\n  }\n\n  async encryptData(plain:Buffer,password:string):Promise<Buffer>{\n    const entropy = await this.getEntropy();\n    if(password){\n      password = hashSha256(password);\n    }\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy));\n    let { prvKey,pubKey } = wallet.getPTPWallet(EncryptType.EncryptType_Message);\n    pubKey = pubKey.slice(1)\n    const shareKey = Buffer.from(password!,\"hex\")\n    // console.log(\"encryptData\",{prvKey,pubKey,shareKey,password})\n    return Aes256Gcm.encrypt(\n      plain,\n      shareKey,\n      prvKey,\n      pubKey\n    );\n  }\n  async decryptData(cipher:Buffer,password:string):Promise<Buffer>{\n    const entropy = await this.getEntropy();\n    password = hashSha256(password);\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy));\n    let { prvKey,pubKey } = wallet.getPTPWallet(EncryptType.EncryptType_Message);\n    pubKey = pubKey.slice(1)\n    const shareKey = Buffer.from(password!,\"hex\")\n    // console.log(\"decryptData\",{prvKey,pubKey,shareKey,password})\n    return Aes256Gcm.decrypt(\n      cipher,\n      shareKey,\n      prvKey,\n      pubKey\n    );\n  }\n  async encryptByPubKey(plain:Buffer,password?:string):Promise<Buffer>{\n    const entropy = await this.getEntropy();\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy),password);\n    let { pubKey_ } = wallet.getPTPWallet(0);\n    return EthEcies.encrypt(pubKey_, plain)\n  }\n\n  async decryptByPrvKey(cipher:Buffer,password?:string ):Promise<Buffer>{\n    const entropy = await this.getEntropy();\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy),password);\n    let { prvKey } = wallet.getPTPWallet(0);\n    return EthEcies.decrypt(prvKey, cipher)\n  }\n\n  static getAccountIdByEntropy(entropy:string){\n    const keys = Account.getKeys()\n    for (let i = 0; i < Object.keys(keys).length; i++) {\n      const key = Object.keys(keys)[i]\n      const value = keys[key]\n      if(entropy === value){\n        return parseInt(key)\n      }\n    }\n    return null\n  }\n  static localEncrypt(plain:Buffer){\n    return Aes256Gcm.encrypt(\n      Buffer.from(plain),\n      Buffer.from(LOCAL_key, \"hex\"),\n      Buffer.from(LOCAL_iv, \"hex\"),\n      Buffer.from(LOCAL_aad, \"hex\"),\n    )\n  }\n  static localDecrypt(cipher:Buffer):Buffer{\n    return Aes256Gcm.decrypt(\n      cipher,\n      Buffer.from(LOCAL_key, \"hex\"),\n      Buffer.from(LOCAL_iv, \"hex\"),\n      Buffer.from(LOCAL_aad, \"hex\"),\n    )\n  }\n  static saveKey(key:number,value:string){\n    const keys = Account.getKeys()\n    keys[key] = value;\n    const cipher = Account.localEncrypt(Buffer.from(JSON.stringify(keys)))\n    Account.getClientKv().put(\n      `${KEYS_PREFIX}`,\n      cipher.toString(\"hex\")\n    );\n  }\n\n  static getKey(key:number){\n    const keys = Account.getKeys()\n    if(keys[key]){\n      return keys[key]\n    }else{\n      return undefined\n    }\n  }\n  static getKeys(){\n    let data = Account.getClientKv().get(\n      `${KEYS_PREFIX}`,\n    );\n    if(data){\n      if(data.indexOf(\"{\") === -1){\n        data = Account.localDecrypt(Buffer.from(data,\"hex\"))\n        data = data.toString()\n      }\n      return JSON.parse(data)\n    }else{\n      return {}\n    }\n  }\n  async setEntropy(entropy:string,skipSave?:boolean) {\n    this.entropy = entropy;\n    if(!skipSave){\n      await Account.saveKey(\n        this.getAccountId(),\n        entropy\n      )\n    }\n  }\n\n  async getEntropy() :Promise<string>{\n    if(this.entropy){\n      return this.entropy\n    }\n    let entropy = await Account.getKey(this.getAccountId());\n    if (!entropy) {\n      let mnemonic = new Mnemonic();\n      entropy = mnemonic.toEntropy();\n      await Account.saveKey(\n        this.getAccountId(),\n        entropy\n      )\n    }\n    this.entropy = entropy;\n    return entropy;\n  }\n\n  async initEcdh(serverPubKey: Buffer, iv: Buffer, aad: Buffer) {\n    const entropy = await this.getEntropy();\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy));\n    const ethWallet = wallet.getPTPWallet(0);\n    this.shareKey = Buffer.from(ecdh(serverPubKey, ethWallet.prvKey));\n    // console.log(\"shareKey\",this.shareKey)\n    this.aad = aad;\n    this.iv = iv;\n  }\n\n  aesEncrypt(plainData: Buffer) {\n    return Aes256Gcm.encrypt(\n      plainData,\n      this.getShareKey(),\n      this.getIv(),\n      this.getAad()\n    );\n  }\n\n  aesDecrypt(cipherData: Buffer) {\n    return Aes256Gcm.decrypt(\n      cipherData,\n      this.getShareKey(),\n      this.getIv(),\n      this.getAad()\n    );\n  }\n\n  async signMessage(message: string,password?: string | undefined) {\n    const entropy = await this.getEntropy();\n    let wallet = new Wallet(Mnemonic.fromEntropy(entropy),password);\n    const ethWallet = wallet.getPTPWallet(0);\n    const ecdsa = new EcdsaHelper({\n      pubKey: ethWallet.pubKey,\n      prvKey: ethWallet.prvKey,\n    });\n    return {address:ethWallet.address,sign:ecdsa.sign(message)};\n  }\n\n  verifyRecoverAddress(sig: Buffer, message: string) {\n    return EcdsaHelper.recoverAddress({ message, sig });\n  }\n\n  async verifySession(session:string,password:string){\n    const {address} = this.recoverAddressAndPubKey(\n      Buffer.from(session!.split(\"_\")[0],\"hex\"),\n      session!.split(\"_\")[1]\n    )\n    const res = await this.verifyPwd(password,address);\n    return res ? address : \"\";\n  }\n  recoverAddressAndPubKey(sig: Buffer, message: string) {\n    return EcdsaHelper.recoverAddressAndPubKey({ message, sig });\n  }\n\n  static setCurrentAccount(account:Account) {\n    currentAccountId = account.getAccountId();\n  }\n\n  static getCurrentAccount() {\n    if (currentAccountId) {\n      return Account.getInstance(currentAccountId);\n    } else {\n      return null;\n    }\n  }\n  static genAccountId(){\n    return +(new Date())\n  }\n  static getCurrentAccountId() {\n    if(currentAccountId){\n      return currentAccountId;\n    }else{\n      let accountId:number | string | null = Account.getClientKv().get(\"a-c-id\");\n      if(!accountId){\n        accountId = Account.genAccountId();\n      }else{\n        if (typeof accountId === \"string\") {\n          accountId = parseInt(accountId)\n        }\n        Account.getClientKv().put(\"a-c-id\",String(accountId));\n      }\n      Account.setCurrentAccountId(accountId);\n      return accountId;\n    }\n  }\n\n  static setCurrentAccountId(accountId: number) {\n    currentAccountId = accountId;\n    const accountIdsStr =  Account.getClientKv().get(\"a-as\");\n    accountIds = accountIdsStr ? JSON.parse(accountIdsStr) : []\n    if(!accountIds.includes(accountId)){\n      accountIds.push(accountId);\n      Account.getClientKv().put(\"a-as\",JSON.stringify(accountIds));\n    }\n    Account.getClientKv().put(\"a-c-id\",String(accountId));\n  }\n\n  static getInstance(accountId: number) {\n    if (!accounts[accountId]) {\n      accounts[accountId] = new Account(accountId);\n    }\n    return accounts[accountId];\n  }\n\n  static randomBuff(len:16|32){\n    return Buffer.from(randomize(len));\n  }\n\n  setClientInfo(clientInfo: ClientInfo_Type | undefined) {\n    this.clientInfo = clientInfo\n  }\n\n  getClientInfo() {\n    return this.clientInfo;\n  }\n}\n","import PasswordValidator from \"password-validator\";\nimport {sha256} from \"ethereum-cryptography/sha256\";\n\nconst SALT = 'wai ai blockchain auto bot';\n\nexport function passwordCheck(password:string){\n  const schema = new PasswordValidator();\n  schema\n    .is().min(8)                                    // Minimum length 8\n    .is().max(100)                                  // Maximum length 100\n    .has().uppercase()                              // Must have uppercase letters\n    .has().lowercase()                              // Must have lowercase letters\n    .has().not().spaces()                           // Should not have spaces\n    .is().not().oneOf(['Passw0rd', 'Password123']); // Blacklist these values\n\n  return schema.validate(password);\n}\n\nexport function hashSha256(text:string):string{\n  return sha256(Buffer.from(`${text}${SALT}`)).toString(\"hex\")\n}\n\n","import html2canvas from \"html2canvas\";\nimport jsPDF from 'jspdf';\n\nexport function generateRandomString(length:number) {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport function sha1(str: string): string {\n  function utf8_encode(str: string): string {\n    str = str.replace(/\\r\\n/g, '\\n');\n    let utf8str = '';\n    for (let n = 0; n < str.length; n++) {\n      let c = str.charCodeAt(n);\n      if (c < 128) {\n        utf8str += String.fromCharCode(c);\n      } else if ((c > 127) && (c < 2048)) {\n        utf8str += String.fromCharCode((c >> 6) | 192);\n        utf8str += String.fromCharCode((c & 63) | 128);\n      } else {\n        utf8str += String.fromCharCode((c >> 12) | 224);\n        utf8str += String.fromCharCode(((c >> 6) & 63) | 128);\n        utf8str += String.fromCharCode((c & 63) | 128);\n      }\n    }\n    return utf8str;\n  }\n\n  function rotate_left(n: number, s: number): number {\n    return (n << s) | (n >>> (32 - s));\n  }\n\n  function cvt_hex(val: number): string {\n    let str = '';\n    let i;\n    let v;\n    for (i = 7; i >= 0; i--) {\n      v = (val >>> (i * 4)) & 0x0f;\n      str += v.toString(16);\n    }\n    return str;\n  }\n\n  let blockstart;\n\n  let i: number, j: number;\n\n  let W = new Array(80);\n\n  let H0 = 0x67452301;\n  let H1 = 0xEFCDAB89;\n  let H2 = 0x98BADCFE;\n  let H3 = 0x10325476;\n  let H4 = 0xC3D2E1F0;\n\n  let A, B, C, D, E;\n\n  let temp;\n\n  str = utf8_encode(str);\n\n  let len = str.length * 8;\n\n  let K = new Array(\n    0x5A827999,\n    0x6ED9EBA1,\n    0x8F1BBCDC,\n    0xCA62C1D6\n  );\n\n  let str_len = str.length;\n\n  let word_array = new Array();\n\n  for (i = 0; i < str_len - 3; i += 4) {\n    j =\n      (str.charCodeAt(i) << 24) |\n      (str.charCodeAt(i + 1) << 16) |\n      (str.charCodeAt(i + 2) << 8) |\n      str.charCodeAt(i + 3);\n    word_array.push(j);\n  }\n\n  switch (str_len % 4) {\n    case 0:\n      i = 0x080000000;\n      break;\n    case 1:\n      i = (str.charCodeAt(str_len - 1) << 24) | 0x0800000;\n      break;\n\n    case 2:\n      i =\n        (str.charCodeAt(str_len - 2) << 24) |\n        (str.charCodeAt(str_len - 1) << 16) |\n        0x08000;\n      break;\n\n    case 3:\n      i =\n        (str.charCodeAt(str_len - 3) << 24) |\n        (str.charCodeAt(str_len - 2) << 16) |\n        (str.charCodeAt(str_len - 1) << 8) |\n        0x80;\n      break;\n  }\n\n  word_array.push(i);\n\n  while (word_array.length % 16 != 14) word_array.push(0);\n\n  word_array.push(len >>> 32);\n  word_array.push(len & 0xffffffff);\n\n  for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {\n    for (i = 0; i < 16; i++) W[i] = word_array[blockstart + i];\n    for (i = 16; i < 80; i++)\n      W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n    A = H0;\n    B = H1;\n    C = H2;\n    D = H3;\n    E = H4;\n\n    for (i = 0; i < 20; i++) {\n      temp =\n        (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + K[0]) &\n        0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 20; i < 40; i++) {\n      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + K[1]) & 0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 40; i < 60; i++) {\n      temp =\n        (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + K[2]) &\n        0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    for (i = 60; i < 80; i++) {\n      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + K[3]) & 0xffffffff;\n      E = D;\n      D = C;\n      C = rotate_left(B, 30);\n      B = A;\n      A = temp;\n    }\n\n    H0 = (H0 + A) & 0xffffffff;\n    H1 = (H1 + B) & 0xffffffff;\n    H2 = (H2 + C) & 0xffffffff;\n    H3 = (H3 + D) & 0xffffffff;\n    H4 = (H4 + E) & 0xffffffff;\n  }\n\n  let result =\n    cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);\n  return result.toLowerCase();\n}\n\nexport function replaceSubstring(text:string, offset:number, length:number,replace:string) {\n  const prefix = text.substring(0, offset);\n  const suffix = text.substring(offset + length);\n  return prefix + replace + suffix;\n\n}\nexport function fetchWithTimeout(url: RequestInfo | URL, options: RequestInit | undefined, timeout = 10000) {\n  return Promise.race([\n    fetch(url, options),\n    new Promise((_, reject) =>\n      setTimeout(() => reject(new Error(`Timeout: ${timeout}s`)), timeout)\n    )\n  ]);\n}\n\nexport const isEmailValid = (email:string)=>{\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(email);\n}\n\nexport function parseQueryFromUrl(urlStr: string): { url: URL; query: Record<string, string> } {\n  const replacedUrl = urlStr.replace(/#/g, '?');\n  const url = new URL(replacedUrl);\n  const query = Array.from(url.searchParams.entries()).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: value,\n    }),\n    {}\n  );\n\n  return { url, query };\n}\n\n\nexport function getCorsOptionsHeader(Access_Control_Allow_Origin: string = '*') {\n  return {\n    'Access-Control-Allow-Origin': Access_Control_Allow_Origin,\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Accept, Authorization, ApiKey, Token',\n    'Access-Control-Allow-Credentials': 'true',\n  };\n}\n\nexport function getCorsHeader(\n  Access_Control_Allow_Origin: string = '*',\n  ContentType: string = 'application/json;charset=UTF-8'\n) {\n  return {\n    'content-type': ContentType,\n    'Access-Control-Allow-Origin': Access_Control_Allow_Origin,\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n  };\n}\n\nexport function ResponseJson(result: object, status = 200,Access_Control_Allow_Origin: string = '*') {\n  return new Response(JSON.stringify(result), {\n    status,\n    headers: {\n      ...getCorsHeader(Access_Control_Allow_Origin),\n    },\n  });\n}\n\nexport function currentTs(){\n  return Math.ceil(+(new Date)/1000)\n}\n\nexport function currentTs1000(){\n  return Math.ceil(+(new Date))\n}\n\nexport async function fileToArrayBuffer(file:File) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n    reader.readAsArrayBuffer(file);\n  });\n}\nexport async function fileToBuffer(file:File) {\n  return new Promise<Buffer>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      // @ts-ignore\n      const buffer = Buffer.from(reader.result);\n      resolve(buffer);\n    };\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(file);\n  });\n}\n\nfunction downloadText(text:string, filename:string,type = \"text/json\") {\n  var element = document.createElement('a');\n  element.setAttribute('href', 'data:'+type+';charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n}\n\nfunction blobToArrayBuffer(blob: Blob): Promise<ArrayBuffer> {\n  return new Promise<ArrayBuffer>((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(blob);\n    reader.onload = () => resolve(reader.result as ArrayBuffer);\n    reader.onerror = reject;\n  });\n}\n\nexport async function blobToBuffer(blob:Blob) {\n  const ab = await blobToArrayBuffer(blob);\n  return Buffer.from(ab)\n}\n\nexport function isPositiveInteger(str: string): boolean {\n  const reg = /^[1-9]\\d*$/; // 正则表达式\n  return reg.test(str);\n}\n\nexport function showBodyLoading(showLoading: boolean): void {\n  const body = document.querySelector(\"body\");\n  if (showLoading) {\n    body.classList.add(\"loading_cursor\");\n  } else {\n    body.classList.remove(\"loading_cursor\");\n  }\n}\n\nexport function downloadFromLink(name:string,url:string){\n  let link = document.createElement('a');\n  link.download = name; // set the image download name\n  link.href = url; // set the data URL as the link URL\n  document.body.appendChild(link); // add the link to the DOM\n  link.click(); // click the link to trigger the download\n  document.body.removeChild(link); // remove the link from the DOM\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [5016,8893], () => (__webpack_require__(10792)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"5016\":\"455c82d3276fe3a7bfaa\",\"8893\":\"a4f28d7160f2217560d9\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t3598: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkwai\"] = self[\"webpackChunkwai\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","bytesToDataUri","bytes","shouldOmitPrefix","mimeType","btoa","String","fromCharCode","omitVirtualClassFields","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","className","classType","getBytes","rest","IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","undefined","batchedUpdates","throttledLocalDbUpdate","throttle","postMessage","type","convertToVirtualClass","value","Uint8Array","Buffer","from","Object","keys","length","BigInt","Array","isArray","map","VirtualClass","split","reduce","acc","field","constructors","valueOmited","key","createLocalDbInitial","initial","_initial","valueVirtualClass","acc2","key2","name","Proxy","get","target","prop","Reflect","set","push","localDb","broadcastLocalDbUpdateFull","updateFullLocalDb","assign","clearLocalDb","buildCollectionByKey","collection","byKey","member","pick","object","result","compact","array","filter","Boolean","serverTimeOffset","getServerTimeOffset","getServerTime","Math","floor","Date","now","ApiMessageEntityTypes","MAIN_THREAD_ID","MESSAGE_DELETED","ApiMediaFormat","TEMPLATE","LOOKUP","pathBytesToSvg","width","height","replace","path","len","i","num","buildPath","DEFAULT_THUMB_SIZE","w","h","buildApiThumbnailFromStripped","sizes","thumb","find","s","GramJs","realSizes","dataUri","strippedPhotoToJpg","buildApiPhoto","photo","isSpoiler","buildApiPhotoSize","id","thumbnail","videoSizes","buildApiVideoSize","isVideo","videoSize","videoStartTs","size","photoSize","buildApiUsernames","mtpPeer","usernames","username","isActive","isEditable","forEach","active","editable","LOTTIE_STICKER_MIME_TYPE","VIDEO_STICKER_MIME_TYPE","buildStickerFromDocument","document","isNoPremium","_customEmojiAttribute","videoThumbs","stickerAttribute","attributes","attr","customEmojiAttribute","fileAttribute","isLottie","isCustomEmoji","shouldUseTextColor","textColor","imageSizeAttribute","videoSizeAttribute","sizeAttribute","stickerOrEmojiAttribute","stickerSetInfo","inputSet","stickerset","accessHash","shortName","isMissing","emoji","alt","isFree","free","cachedThumb","thumbs","isWebmSupported","pathThumb","buildApiThumbnailFromCached","buildApiThumbnailFromPath","hasEffect","some","buildStickerSet","archived","animated","installedDate","videos","title","count","emojis","thumbDocumentId","isArchived","isVideos","isEmoji","hasThumbnail","buildStickerSetCovered","coveredStickerSet","stickerSet","stickers","processStickerResult","cover","covers","documents","packs","processStickerPackResult","emoticon","documentId","sticker","interpolateArray","data","fitCount","peak","newData","springFactor","leftFiller","rightFiller","_data","_data$idx","_data2","idx","val","isPeerUser","peer","hasOwnProperty","isPeerChat","buildApiPeerId","getApiChatIdFromMtpPeer","userId","chatId","channelId","LOG_BACKGROUND","LOG_PREFIX_COLOR","LOG_SUFFIX","INVOKE","RESPONSE","CONNECTING","CONNECTED","UPDATE","resolveMessageApiChatId","mtpMessage","peerId","addMessageToLocalDb","message","messageFullId","mockMessage","media","extendedMedia","webpage","game","addPhotoToLocalDb","url","action","addUserToLocalDb","user","shouldOverwrite","addEntitiesWithPhotosToLocalDb","entities","entity","chat","noOverwrite","addChatToLocalDb","serializeBytes","deserializeBytes","log","suffix","console","error","warn","CHANNEL_ID_MIN_LENGTH","getEntityTypeById","chatOrUserId","getEntityTypeByDeprecatedId","startsWith","buildPeer","buildMtpPeerId","buildInputPeer","buildInputEntity","buildInputStickerSet","buildInputDocument","buildInputMediaDocument","inputDocument","buildInputPollFromExisting","poll","shouldClose","publicVoters","summary","isPublic","question","answers","text","option","quiz","multipleChoice","closeDate","closePeriod","closed","correctAnswers","results","o","isCorrect","solution","solutionEntities","buildMtpMessageEntity","generateRandomBigInt","readBigIntFromBuffer","generateRandomBytes","generateRandomInt","toJSNumber","buildMessageFromUpdate","update","fromId","offset","Bold","Italic","Underline","Strike","Code","Pre","language","Blockquote","TextUrl","Url","Hashtag","MentionName","Spoiler","CustomEmoji","isMessageWithMedia","buildInputPhoto","localPhoto","buildInputContact","phone","firstName","lastName","clientId","buildChatBannedRights","bannedRights","untilDate","buildChatAdminRights","adminRights","buildShippingInfo","info","shippingAddress","buildInputPrivacyKey","privacyKey","buildInputReportReason","reason","abs","slice","buildInputGroupCall","groupCall","buildInputPhoneCall","buildInputInvoice","invoice","slug","msgId","messageId","buildInputReaction","reaction","buildInputEmojiStatus","emojiStatus","expires","DEFAULT_STATUS_ICON_ID","until","buildApiGroupCallParticipant","participant","min","about","date","versioned","canSelfUnmute","justJoined","left","muted","mutedByYou","source","volume","volumeByAdmin","videoJoined","video","presentation","raiseHandRating","isSelf","isMin","isLeft","isMuted","isMutedByMe","hasJustJoined","isVolumeByAdmin","isVersioned","isVideoJoined","toString","isUser","buildApiGroupCallParticipantVideo","participantVideo","audioSource","endpoint","paused","sourceGroups","isPaused","buildApiGroupCallParticipantVideoSourceGroup","participantVideoSourceGroup","semantics","sources","buildApiGroupCall","connectionState","participantsCount","version","participants","streamDcId","scheduleDate","canChangeJoinMuted","joinMuted","canStartVideo","scheduleStartSubscribed","isLoaded","buildPhoneCall","call","phoneCall","adminId","participantId","protocol","buildApiCallProtocol","p2pAllowed","gAOrB","keyFingerprint","connections","startDate","state","buildApiCallConnection","duration","buildApiCallDiscardReason","needRating","needDebug","receiveDate","gB","gAHash","discardReason","connection","password","turn","stun","ip","ipv6","port","isTurn","isStun","libraryVersions","minLayer","maxLayer","udpP2p","udpReflector","isUdpP2p","isUdpReflector","buildCallProtocol","RE_EMOJI_ONLY","RegExp","twemojiRegex","lines","textWithoutNewlines","join","DETECT_UP_TO","match","countPerLine","line","emojiCount","exec","lastIndex","max","getEmojiOnlyCountForMessage","content","groupedId","parseEmojiOnlyString","TIMESTAMP_BASE","TIMESTAMP_PRECISION","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","INPUT_WAVEFORM_LENGTH","currentUserId","localMessageCounter","LOCAL_MESSAGE_MIN_ID","getNextLocalMessageId","datePart","round","buildApiSponsoredMessage","startParam","channelPost","chatInvite","chatInviteHash","randomId","recommended","chatInviteTitle","isBot","buildMessageTextContent","expiresAt","SPONSORED_MESSAGE_CACHE_MS","isRecommended","channelPostId","buildApiMessage","buildApiMessageWithChatId","isChatWithSelf","isOutgoing","out","post","fwdFrom","buildMessageContent","senderId","targetPeerId","isChannelPost","amount","currency","translationValues","score","months","topicEmojiIconId","isTopicAction","targetUserIds","users","targetChatId","includes","withDuration","mins","Number","totalAmount","domain","hidden","iconEmojiId","buildAction","isInvoiceMedia","replyToMsgId","replyToTopId","forumTopic","replyToPeerId","replyTo","isEdited","editDate","editHide","inlineButtons","keyboardButtons","keyboardPlaceholder","isKeyboardSingleUse","isKeyboardSelective","shouldSkipBuyButton","replyMarkup","markup","rows","buttons","button","requiresPassword","isQuiz","receiptMsgId","receiptMessageId","query","isSamePeer","samePeer","buttonId","every","row","placeholder","singleUse","selective","buildReplyButtons","forwardInfo","savedFromPeerId","savedFromPeer","isImported","imported","isLinkedChannelPost","fromChatId","fromMessageId","savedFromMsgId","senderUserId","hiddenUserName","fromName","postAuthorTitle","postAuthor","buildApiMessageForwardInfo","replies","mediaUnread","isMediaUnread","isInAlbum","audio","shouldHideKeyboardButtons","isHideKeyboardSelective","isProtected","noforwards","isForwardingAllowed","emojiOnlyCount","views","forwards","isFromScheduled","fromScheduled","isSilent","silent","reactions","buildMessageReactions","replyToMessageId","isTopicReply","replyToChatId","replyToTopMessageId","mentioned","hasUnreadMention","isMentioned","viaBotId","repliesThreadInfo","buildThreadInfo","recentReactions","canSeeList","buildReactionCount","sort","reactionCountComparator","buildMessagePeerReaction","a","b","chosenOrder","reactionCount","apiReaction","buildApiReaction","userReaction","big","unread","isUnread","isBig","buildApiAvailableReaction","availableReaction","selectAnimation","staticIcon","inactive","aroundAnimation","centerIcon","effectAnimation","activateAnimation","premium","buildApiDocument","isInactive","isPremium","buildMessageMediaContent","hasUnsupportedMedia","contact","isRound","buildApiMessageEntity","buildMessageDraft","draft","formattedText","replyingToId","ttlSeconds","nopremium","buildSticker","spoiler","buildPhoto","buildVideoFromDocument","buildVideo","audioAttribute","voice","thumbnailSizes","fileName","getFilenameFromDocument","buildAudio","waveform","buildVoice","buildDocumentFromMedia","phoneNumber","buildContact","buildPoll","buildPollFromMedia","webPage","buildWebPage","description","test","preview","buildApiMessageExtendedMediaPreview","buildApiWebDocument","isTest","buildInvoice","buildInvoiceFromMedia","location","point","buildGeoPoint","geo","buildGeo","provider","address","venueId","venueType","buildVenue","period","heading","buildGeoLive","buildLocationFromMedia","apiPhoto","apiDocument","buildGame","buildGameFromMedia","VIDEO_WEBM_TYPE","VIDEO_MOV_TYPE","isMovSupported","videoAttr","gifAttr","supportsStreaming","roundMessage","isGif","mediaType","mediaSize","SUPPORTED_IMAGE_CONTENT_TYPES","imageAttribute","SUPPORTED_VIDEO_CONTENT_TYPES","videoAttribute","timestamp","long","lat","accuracyRadius","pollResults","rawAnswers","answer","buildPollResults","rawResults","totalVoters","recentVoters","chosen","correct","voters","isChosen","votersCount","recentVoterIds","defaultBase","filenameAttribute","extension","videoDuration","sizeAttr","dimensions","buildNewPoll","localId","messageReplies","maxId","readMaxId","recentRepliers","comments","apiChannelId","DELETED_COMMENTS_CHANNEL_ID","isComments","threadId","originChannelId","messagesCount","lastMessageId","lastReadInboxMessageId","recentReplierIds","buildApiChatFieldsFromPeerEntity","peerEntity","isSupport","hasVideoAvatar","hasVideo","avatarHash","buildAvatarHash","isSignaturesShown","signatures","hasPrivateLink","hasLink","isScam","scam","isFake","fake","isJoinToSend","joinToSend","isJoinRequest","joinRequest","isForum","forum","isVerified","verified","isCallActive","callActive","isCallNotEmpty","callNotEmpty","joinDate","membersCount","buildApiChatPermissions","isCreator","creator","buildApiChatRestrictions","buildApiChatMigrationInfo","fakeType","buildApiChatFromDialog","dialog","folderId","unreadMark","unreadCount","unreadMentionsCount","unreadReactionsCount","notifySettings","muteUntil","readOutboxMaxId","readInboxMaxId","getApiChatTypeFromPeerEntity","getApiChatTitleFromMtpPeer","lastReadOutboxMessageId","hasUnreadMark","draftDate","currentUserBannedRights","defaultBannedRights","isForbidden","isRestricted","restrictions","restrictionReason","restricted","restrictionReasons","targetReason","platform","buildApiChatRestrictionReason","isNotJoined","migratedTo","buildApiChatFromPreview","getUserName","megagroup","photoId","buildChatMember","inviterId","joinedDate","kickedByUserId","kickedBy","promotedByUserId","promotedBy","customTitle","rank","isAdmin","isOwner","buildChatMembers","buildChatTypingStatus","buildApiChatFolder","channels","broadcasts","pinnedChatIds","pinnedPeers","includedChatIds","includePeers","excludedChatIds","excludePeers","buildApiChatFolderFromSuggested","buildApiChatBotCommands","botInfos","botCommands","botInfo","botId","commands","concat","mtpCommand","buildApiExportedInvite","invite","revoked","expireDate","link","permanent","usage","usageLimit","requested","requestNeeded","isRevoked","isPermanent","isRequestNeeded","buildApiChatSettings","autoarchived","reportSpam","addContact","blockContact","isAutoArchived","canReportSpam","canAddContact","canBlockContact","buildApiChatReactions","chatReactions","areCustomAllowed","allowCustom","allowed","buildApiSendAsPeerId","sendAs","premiumRequired","buildApiTopic","my","pinned","short","iconColor","topMessage","isClosed","isPinned","isHidden","buildApiAttachBot","bot","hasSettings","shouldRequestWriteAccess","requestWriteAccess","peerTypes","buildApiAttachMenuPeerType","icons","buildApiAttachMenuIcon","peerType","icon","buildApiBotInfo","descriptionPhoto","descriptionDocument","menuButton","gif","commandsArray","command","buildApiBotCommand","buildApiBotMenuButton","buildApiUserFromFull","mtpUserFull","fullUser","commonChatsCount","pinnedMsgId","blocked","profilePhoto","voiceMessagesForbidden","premiumGifts","fallbackPhoto","personalPhoto","buildApiUser","fullInfo","bio","pinnedMessageId","isBlocked","noVoiceMessages","gift","botUrl","buildApiPremiumGiftOption","mtpUser","userType","deleted","buildApiUserEmojiStatus","mutualContact","isContact","canBeInvitedToGroup","botNochats","noStatus","status","botInlinePlaceholder","botPlaceholder","botAttachMenu","isAttachBot","buildApiUserStatus","mtpStatus","wasOnline","mtpEmojiStatus","buildApiUsersAndStatuses","mtpUsers","userStatusesById","buildApiWallpaper","wallpaper","buildApiSession","session","isCurrent","current","isOfficialApp","officialApp","isPasswordPending","passwordPending","hash","areCallsEnabled","callRequestsDisabled","areSecretChatsEnabled","encryptedRequestsDisabled","buildApiWebSession","buildPrivacyRules","rules","visibility","allowUserIds","allowChatIds","blockUserIds","blockChatIds","rule","chats","buildApiNotifyException","showPreviews","otherSound","hasSound","shouldShowPreviews","buildApiNotifyExceptionTopic","topicId","buildApiCountry","country","code","iso2","defaultName","countryCode","prefixes","patterns","buildJson","json","el","buildApiUrlAuthResult","DELETE_MISSING_CHANNEL_MESSAGE_DELAY","onUpdate","sentMessageIds","Set","dispatchUserAndChatUpdates","e","updater","originRequest","_serverTimeOffset","timeOffset","shouldForceReply","_entities","buildApiMessageFromShort","DEBUG","has","invoiceSlug","dcId","buildChatPhotoForLocalDb","localDbChatId","newProfilePhoto","GENERAL_TOPIC_ID","stringKeys","omit","localMessage","swapLocalInvoiceMedia","ids","messages","existingIds","missingIds","profilePhotoIds","setTimeout","popup","notification","currentDate","SERVICE_NOTIFICATIONS_USER_ID","inboxDate","buildApiMessageFromNotification","Error","newContent","add","isAlreadySent","isScheduled","sendingState","messageUpdate","pollId","apiPoll","pollUpdate","options","stillUnreadCount","topMsgId","threadInfo","order","dp","folderPeers","folderPeer","folder","orderedIds","replacedMembers","addedMember","deletedMemberId","messageIds","interaction","JSON","parse","timestamps","t","typingStatus","apiUserId","updatedUser","settings","buildPrivacyKey","masks","n","params","groupCallId","recentRequesterIds","recentRequesters","requestsPending","callId","phoneCallId","queryId","transcriptionId","isPending","pending","authController","provideAuthPhoneNumber","resolve","provideAuthCode","provideAuthPassword","provideAuthRegistration","registration","restartAuth","reject","restartAuthWithQr","async","downloadMedia","mediaFormat","start","end","isHtmlAllowed","client","isConnected","onProgress","fullSize","flag","t1","indexOf","ab","file","Promise","reader","FileReader","onload","onerror","readAsArrayBuffer","fileToArrayBuffer","CLOUD_MESSAGE_API","downloadReq","DownloadReq","downloadRes","arrayBuffer","blob","cacheApi","fetch","MEDIA_CACHE_NAME_WAI","Type","buf","blobToBuffer","DownloadRes","Pdu","err","ERR","Account","finalBuf","alloc","res","method","body","pack","getPbData","part_total","part","save","Blob","parsed","buffer","parseMedia","canCache","MEDIA_CACHE_DISABLED","cacheName","MEDIA_CACHE_NAME_AVATARS","MEDIA_CACHE_NAME","dataBlob","ChatModelConfig","model","temperature","max_tokens","presence_penalty","CurrentUserInfo","BYPASS_API","AnswerCallbackButtonReq","BaseMsg","constructor","msg","super","this","setCommandId","ActionCommands","static","pdu","decode","AnswerCallbackButtonRes","DownloadMsgRes","GenMsgIdReq","GenMsgIdRes","SendBotMsgReq","SendBotMsgRes","UpdateCmdReq","UpdateCmdRes","UploadMsgReq","PbMsg","PbUser","DownloadUserRes","UploadUserReq","blobToDataUri","readAsDataURL","fetchBlob","blobUrl","fetchFile","File","lastModified","blobToFile","fileBits","_defineProperty","AuthLoginReq","AuthNativeReq","InitAppRes","UpdateProfileReq","UpdateProfileRes","UpdateUsernameReq","UpdateUsernameRes","UploadProfilePhotoReq","UploadProfilePhotoRes","BotWebSocketNotifyAction","BotWebSocketState","reconnect_cnt","seq_num","clients","currentMsgConn","BotWebSocket","msgConnId","autoConnect","sendMsgTimer","connect_none","__rev_msg_map","__sending_msg_map","setWsUrl","wsUrl","setSession","getState","getMsgConnId","getAutoConnect","setAutoConnect","notifyState","isConnect","close","connect","logged","connecting","connected","WebSocket","binaryType","onopen","onConnected","bind","onmessage","onData","onclose","onClose","reconnect","waitForMsgServerState","timeout","startTime","then","waitTime","setMsgHandler","msgHandler","__msgHandler","login","catch","sendPduWithCallback","clientInfo","getClientInfo","sign","getSession","notify","notifyList","byteLength","getSeqNum","getCommandId","getActionCommandsName","payload","onConnectionStateChanged","clearTimeout","connect_error","waitForMsgCallback","send","updateSeqNo","isLogged","ChatMsg","setBotInfo","setInlineButtons","setThinking","setText","setSenderId","isLocal","genMessageId","genMsgId","currentTs","sendNewMessage","apiUpdate","lastMessage","ceil","_apiUpdate","MsgWorker","msgSend","attachment","chatMsg","reply","parseMsg","chatFolders","handleSendBotMsgRes","handleInitAppRes","accountId","botApi","botWs","getInstance","notifies","handleRecvMsg","CLOUD_WS_URL","photos","uploadFileCache","time","cipher","encryptData","bb","popByteBuffer","writeInt32","writeInt16","writeBytes","toUint8Array","bbDecode","wrapByteBuffer","readInt32","readInt16","readBytes","buf2","decryptData","parseInt","sleep","fileId","getMediaFileId","getPhotoInfo","thumbBlobUrl","quick","previewBlobUrl","isOutGoing","handleMedia","processOutGoing","LocalDatabase","init","db","put","cache","delete","StopChatStreamReq","TIME_OUT_MS","makeRequestParam","sendMessages","v","role","filterBot","m","stream","requestChatStream","controller","AbortController","reqTimeoutId","abort","isDone","headers","stringify","signal","responseText","finish","onMessage","ok","choices","getReader","decoder","TextDecoder","onController","resTimeoutId","read","onError","done","onAbort","ControllerPool","controllers","addController","sessionIndex","messageIndex","stop","remove","handleAuthNative","entropy","kv","account","setClientInfo","setEntropy","saveSession","MSG_SERVER","createWsBot","delSession","handleAuthNativeReq","handleStopChatStreamReq","handleSendBotMsgReq","chatGpt","connId","CHATGPT_PROXY_API","msgIdAssistant","handleChatGpt","Authorization","handleUpdateCmdReq","DEFAULT_USER_AGENT","DEFAULT_PLATFORM","APP_CODE_NAME","GramJsLogger","DEBUG_GRAMJS","destroy","noLogOut","noClearLocalDb","disconnect","invokeRequest","request","shouldReturnTrue","shouldThrow","shouldIgnoreUpdates","shouldIgnoreErrors","invoke","manyUpdates","singleUpdate","updates","injectUpdateEntities","handleUpdatesFromRequest","debug","isSlowMode","hasErrorKey","dispatchErrorUpdate","args","downloadMediaWithClient","repairFileReference","uploadFile","workers","UPLOAD_WORKERS","updateTwoFaSettings","fetchCurrentUser","userFull","currentUser","_currentUserId","onCurrentUserUpdate","mediaMatch","mediaMatchType","entityId","entityType","sizeType","parseMediaUrl","sendWithCallback","buff","beforeUploadMsgReq","beforeUploadUserReq","pduRes","afterDownloadMsgReq","afterDownloadUserReq","LoadChatsReq","LoadChatsRes","fetchChats","limit","offsetDate","withPinned","lastLocalServiceMessage","loadChatsRes","fetchFullChat","fullChat","onlineCount","exportedInvite","slowmodeSeconds","slowmodeNextSendDate","migratedFromChatId","migratedFromMaxId","canViewParticipants","canViewStats","linkedChatId","hiddenPrehistory","availableReactions","defaultSendAs","statsDc","chatPhoto","participantsHidden","inviteLink","members","fetchMembers","kickedMembers","bannedUsers","bannedStatusesById","adminMembers","adminUsers","adminStatusesById","updateLocalDb","mtpLinkedChat","statusesById","slowMode","seconds","nextSendDate","migratedFrom","maxMessageId","canViewMembers","canViewStatistics","isPreHistoryHidden","adminMembersById","enabledReactions","sendAsId","statisticsDcId","areParticipantsHidden","getFullChannelInfo","getFullChatInfo","fetchChatSettings","searchChats","q","localPeerIds","myResults","allChats","allUsers","localChats","r","localUsers","u","globalChats","globalUsers","fetchChat","requestChatUpdate","lastLocalMessage","noLastMessage","peers","dialogs","peersByKey","currentStore","store","preparePeers","lastRemoteMessage","saveDraft","clearDraft","updateChatMutedState","MAX_INT_32","updateTopicMutedState","createChannel","noErrorUpdate","broadcast","newChannel","joinChannel","deleteChatUser","deleteChat","leaveChannel","deleteChannel","createGroupChat","newChat","editChatPhoto","inputEntity","inputPhoto","uploadedPhoto","toggleChatPinned","shouldBePinned","toggleChatArchived","fetchChatFolders","defaultFolderPosition","findIndex","dialogFilters","df","splice","ALL_FOLDER_ID","byId","fetchRecommendedChatFolders","editChatFolder","folderUpdate","deleteChatFolder","sortChatFolders","toggleDialogUnread","getChatByPhoneNumber","processResolvedPeer","getChatByUsername","togglePreHistoryHidden","isEnabled","enabled","updateChatDefaultBannedRights","updateChatMemberBannedRights","updateChatAdmin","updateChatTitle","updateChatAbout","toggleSignatures","memberFilter","MEMBERS_LOAD_SLICE","fetchGroupsForDiscussion","setDiscussionGroup","group","migrateChat","openChatByInvite","isChannel","addChatMembers","all","deleteChatMember","viewMessages","sendMedia","sendStickers","sendGifs","sendGames","sendInline","embedLinks","sendPolls","changeInfo","inviteUsers","pinMessages","manageTopics","sendPhotos","sendVideos","sendRoundvideos","sendAudios","sendVoices","sendDocs","sendPlain","toggleJoinToSend","toggleJoinRequest","importChatInvite","setChatEnabledReactions","toggleIsProtected","toggleParticipantsHidden","toggleForum","createTopic","fetchTopics","offsetTopicId","offsetId","TOPICS_SLICE","offsetTopic","orderByCreateDate","topics","c","shouldOrderByCreateDate","draftsById","topic","readInboxMessageIdByTopicId","fetchTopicById","deleteTopic","togglePinnedTopic","editTopic","fetchMessages","isUp","pagination","fetchMessage","queue","sendMessage","replyingTo","replyingToTopId","scheduledAt","noWebPage","shouldUpdateStickerSetsOrder","filename","shouldSendAsFile","shouldSendAsSpoiler","inputWaveform","SUPPORTED_AUDIO_CONTENT_TYPES","performer","buildUploadingMedia","buildLocalMessage","groupIndex","groupedUploads","counter","singleMediaByIndex","prevQueue","uploadMedia","sendGroupedMedia","pollParams","buildInputPoll","vcard","process","editMessage","rescheduleMessage","encryptUrl","patchedOnProgress","progress","isCanceled","inputFile","uploadFileV1","GIF_MIME_TYPE","forceFile","pinMessage","isUnpin","isOneSide","unpin","pmOneside","unpinAllMessages","deleteMessages","shouldDeleteForAll","deleteScheduledMessages","deleteHistory","revoke","just_clear","reportMessages","sendMessageAction","gramAction","buildSendMessageAction","markMessageListRead","requestThreadInfoUpdate","markMessagesRead","fetchMessageViews","increment","index","topMessageResult","repliesResult","addOffset","discussionChatId","topMessageId","firstMessageId","noTopChatsRequest","searchMessagesLocal","minDate","maxDate","nextOffsetId","totalCount","searchMessagesGlobal","offsetRate","offsetPeer","nextRate","fetchWebPagePreview","sendPollVote","closePoll","loadPollOptionResults","shouldResetVoters","votes","vote","nextOffset","fetchExtendedMedia","forwardMessages","fromChat","toChat","toThreadId","withMyScore","noAuthors","noCaptions","isCurrentUserPremium","randomIds","isAudio","asIncomingInChatWithSelf","shouldHideText","shouldDropCustomEmoji","strippedText","updatedContent","buildLocalForwardedMessage","findFirstMessageIdAfterDate","fetchScheduledHistory","sendScheduledMessages","isServiceMessageWithMedia","fetchPinnedMessages","PINNED_MESSAGES_LIMIT","fetchSeenBy","fetchSendAs","saveDefaultSendAs","fetchSponsoredMessages","viewSponsoredMessage","random","readAllMentions","readAllReactions","fetchUnreadMentions","MENTION_UNREAD_SLICE","fetchUnreadReactions","REACTION_UNREAD_SLICE","transcribeAudio","translateText","isMessageTranslation","toLanguageCode","apiKey","systemPrompt","buildInputTextWithEntities","formatted","toLang","textWithEntities","buildApiFormattedText","translations","inputGifBot","fetchFullUser","input","userWithFullInfo","fetchCommonChats","commonChats","COMMON_CHATS_LIMIT","chatIds","mtpChat","isFullyLoaded","fetchNearestCountry","dcInfo","fetchTopUsers","topPeers","correspondents","fetchContactList","fetchUsers","importContact","contacts","updateContact","shouldSharePhoneNumber","addPhonePrivacyException","deleteContact","fetchProfilePhotos","PROFILE_PHOTOS_LIMIT","userOrChat","updateEmojiStatus","fetchCustomEmojiSets","allStickers","sets","fetchStickerSets","fetchRecentStickers","RECENT_STICKERS_LIMIT","fetchFavoriteStickers","fetchFeaturedStickers","fetchFeaturedEmojiStickers","faveSticker","unfave","removeRecentSticker","unsave","clearRecentStickers","fetchStickers","fetchCustomEmoji","fetchAnimatedEmojis","fetchAnimatedEmojiEffects","fetchGenericEmojiEffects","fetchPremiumGifts","fetchDefaultTopicIcons","fetchDefaultStatusEmojis","searchStickers","fetchSavedGifs","gifs","processGifResult","saveGif","shouldUnsave","installStickerSet","stickerSetId","uninstallStickerSet","searchGifs","DEFAULT_GIF_SEARCH_BOT_USERNAME","resolvedPeer","foundGif","fetchStickersForEmoji","fetchEmojiKeywords","fromVersion","langCode","keywords","emojiKeyword","keyword","emoticons","fetchRecentEmojiStatuses","documentIds","statuses","RECENT_STATUS_LIMIT","emojiStatuses","ACCEPTABLE_USERNAME_ERRORS","USERNAME_PURCHASE_ERROR","checkChatUsername","errorMessage","setChatUsername","updatePrivateLink","fetchExportedChatInvites","admin","exportedInvites","invites","editExportedChatInvite","replaceInvite","oldInvite","newInvite","exportChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","fetchChatInviteImporters","offsetUser","isRequested","importers","importer","buildChatInviteImporter","hideChatJoinRequest","isApproved","approved","hideAllChatJoinRequests","hideChatReportPanel","ApiErrors","EMAIL_UNCONFIRMED","EMAIL_HASH_EXPIRED","NEW_SALT_INVALID","NEW_SETTINGS_INVALID","CODE_INVALID","PASSWORD_HASH_INVALID","emailCodeController","getPasswordInfo","hint","hasPassword","onRequestEmailCode","checkPassword","currentPassword","isCheckPassword","clearPassword","updatePassword","email","newPassword","emailCodeCallback","onEmailCodeError","updateRecoveryEmail","provideRecoveryEmailCode","errors","hours","answerCallbackButton","isGame","fetchTopInlineBots","botsInline","fetchInlineBot","fetchInlineBotResults","switchPm","isGallery","gallery","help","buildApiBotInlineMediaResult","webDocument","webThumbnail","buildApiBotInlineResult","cacheTime","sendInlineBotResult","resultId","startBot","requestWebView","theme","isFromBotMenu","requestSimpleWebView","themeParams","prolongWebView","sendWebViewData","buttonText","loadAttachBots","bots","loadAttachBot","toggleAttachBot","isWriteAllowed","writeAllowed","requestBotUrlAuth","authResult","acceptBotUrlAuth","requestLinkUrlAuth","acceptLinkUrlAuth","getGroupCall","discardGroupCall","editGroupCallParticipant","presentationPaused","videoStopped","videoPaused","raiseHand","editGroupCallTitle","exportGroupCallInvite","fetchGroupCallParticipants","GROUP_CALL_PARTICIPANTS_LIMIT","leaveGroupCall","joinGroupCall","inviteHash","joinAs","createGroupCall","joinGroupCallPresentation","toggleGroupCallStartSubscription","subscribed","leaveGroupCallPresentation","getDhConfig","dhConfig","g","p","discardCall","isBusy","requestCall","setCallRating","rating","comment","receivedCall","acceptCall","confirmCall","gA","sendSignalingData","buildShippingOptions","shippingOptions","values","prices","ac","cur","label","buildApiReceipt","receipt","shipping","credentialsTitle","tipAmount","mappedPrices","shippingPrices","shippingMethod","buildApiPaymentForm","form","formId","canSaveCredentials","passwordMissing","isPasswordMissing","providerId","nativeProvider","nativeParams","savedInfo","savedCredentials","nameRequested","isNameRequested","phoneRequested","isPhoneRequested","emailRequested","isEmailRequested","shippingAddressRequested","isShippingAddressRequested","flexible","isFlexible","phoneToProvider","shouldSendPhoneToProvider","emailToProvider","shouldSendEmailToProvider","cleanedInfo","nativeData","invoiceContainer","needCardholderName","need_cardholder_name","needCountry","need_country","needZip","need_zip","publishableKey","publishable_key","publicToken","public_token","credentials","buildApiInvoiceFromForm","recurring","recurringTermsUrl","maxTipAmount","suggestedTipAmounts","isRecurring","tip","buildApiPremiumPromo","promo","statusText","statusEntities","videoSections","periodOptions","buildApiPremiumSubscriptionOption","canPurchaseUpgrade","validateRequestedInfo","inputInvoice","requestInfo","shouldSave","sendPaymentForm","requestedInfoId","shippingOptionId","savedCredentialId","temporaryPassword","inputCredentials","tmpPassword","getPaymentForm","getReceipt","fetchPremiumPromo","fetchTemporaryPaymentPassword","ttl","getTmpPassword","getTemporaryPaymentPassword","validUntil","reportPeer","reportProfilePhoto","changeSessionSettings","changeSessionTtl","days","authorizationTtlDays","buildEmojiSounds","appConfig","emojies_sounds","l","access_hash","fileReference","atob","file_reference_base64","getLimit","fallbackKey","DEFAULT_LIMITS","BETA_LANG_CODES","updateProfile","checkUsername","updateUsername","updateProfilePhoto","isFallback","fallback","uploadProfilePhoto","videoTs","is_video","uploadContactProfilePhoto","isSuggest","suggest","deleteProfilePhotos","photoIds","isDeleted","fetchWallpapers","filteredWallpapers","wallpapers","pattern","uploadWallpaper","fetchBlockedContacts","BLOCKED_LIST_LIMIT","blockedIds","unblockContact","fetchAuthorizations","authorizations","ttlDays","terminateAuthorization","terminateAllAuthorizations","fetchWebAuthorizations","webAuthorizations","terminateWebAuthorization","terminateAllWebAuthorizations","fetchNotificationExceptions","compareSound","fetchNotificationSettings","isMutedContactSignUpNotification","privateContactNotificationsSettings","groupNotificationsSettings","broadcastNotificationsSettings","privateSilent","privateMuteUntil","privateShowPreviews","groupSilent","groupMuteUntil","groupShowPreviews","broadcastSilent","broadcastMuteUntil","broadcastShowPreviews","hasContactJoinedNotifications","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","updateContactSignUpNotification","updateNotificationSettings","fetchLanguages","langPack","DEFAULT_LANG_PACK","fetchLangPack","sourceLangPacks","collections","strings","reverse","fetchLangStrings","fetchPrivacySettings","registerDevice","token","secret","getAuthKey","getKey","tokenType","appSandbox","otherUids","unregisterDevice","setPrivacySettings","privacyRules","allowedUsers","allowedChats","blockedUsers","blockedChats","updateIsOnline","isOnline","offline","fetchContentSettings","isSensitiveEnabled","sensitiveEnabled","canChangeSensitive","sensitiveCanChange","updateContentSettings","fetchAppConfig","emojiSounds","seenByMaxChatMembers","chat_read_mark_size_threshold","seenByExpiresAt","chat_read_mark_expire_period","autologinDomains","autologin_domains","autologinToken","autologin_token","urlAuthDomains","url_auth_domains","maxUniqueReactions","reactions_uniq_max","premiumBotUsername","premium_bot_username","premiumInvoiceSlug","premium_invoice_slug","premiumPromoOrder","premium_promo_order","isPremiumPurchaseBlocked","premium_purchase_blocked","defaultEmojiStatusesStickerSetId","default_emoji_statuses_stickerset_id","topicsPinnedLimit","topics_pinned_limit","maxUserReactionsDefault","reactions_user_max_default","maxUserReactionsPremium","reactions_user_max_premium","hiddenMembersMinCount","hidden_members_group_size_min","canDisplayAutoarchiveSetting","autoarchive_setting_available","limits","uploadMaxFileparts","stickersFaved","savedGifs","dialogFiltersChats","dialogFolderPinned","captionLength","channelsPublic","aboutLength","buildAppConfig","fetchConfig","config","defaultReaction","reactionsDefault","gifSearchUsername","maxGroupSize","chatSizeMax","buildApiConfig","fetchCountryList","countryList","countries","nonHiddenCountries","phoneCodes","countryCodes","flat","localeCompare","general","buildApiCountryList","fetchGlobalPrivacySettings","shouldArchiveAndMuteNewNonContact","archiveAndMuteNewNoncontactPeers","updateGlobalPrivacySettings","toggleUsername","reorderUsernames","sendWatchingEmojiInteraction","sendEmojiInteraction","getAvailableReactions","sendReaction","fetchMessageReactions","fetchMessageReactionsList","REACTION_LIST_LIMIT","setDefaultReaction","buildGraph","isPercentage","x","y","columns","hasSecondYAxis","y_scaled","types","y0","zoomToken","labelFormatter","xTickFormatter","tooltipFormatter","xTooltipFormatter","labels","hideCaption","subchart","show","isStacked","stacked","datasets","item","names","color","colors","substring","calculateMinimapRange","defaultZoom","range","minIndex","maxIndex","minimapRange","begin","labelFromIndex","labelToIndex","buildStatisticsOverview","previous","change","percentage","toFixed","fetchChannelStatistics","stats","growthGraph","followersGraph","muteGraph","topHoursGraph","languagesGraph","viewsBySourceGraph","newFollowersBySourceGraph","interactionsGraph","followers","viewsPerPost","sharesPerPost","enabledNotifications","total","recentTopMessages","recentMessageInteractions","fetchGroupStatistics","membersGraph","messagesGraph","actionsGraph","viewers","posters","fetchMessageStatistics","viewsGraph","fetchMessagePublicForwards","buildMessagePublicForwards","fetchStatisticsAsyncGraph","currentPhoneCallState","PhoneCallState","waitForState","resolveState","pBN","Helpers","randomBN","pLast","randomLast","emojiData","emojiOffsets","authKey","fingerprint","partOffset","subarray","and","shiftLeft","or","modPow","generateEmojiFingerprint","AuthKey","setKey","MTProtoState","Logger","seqArray","Uint32Array","seq","encodedData","encryptMessageData","decryptMessageData","createPhoneCallState","destroyPhoneCallState","encodePhoneCallData","encode","decodePhoneCallData","confirmPhoneCall","acceptPhoneCall","requestPhoneCall","flushUpdatesOnTickEnd","throttleWithTickEnd","throttleId","pendingUpdates","currentThrottleId","currentUpdates","flushUpdatesThrottled","handleUpdate","API_THROTTLE_RESET_UPDATES","API_UPDATE_THROTTLE","sendToOrigin","addEventListener","callbackState","Map","_onUpdate","initialArgs","initialLocalDb","initUpdater","initAuth","initChats","initMessages","initUsers","initStickers","initManagement","initTwoFaSettings","initBots","initCalls","initPayments","setApiUpdate","userAgent","sessionData","maxBufferSize","webAuthToken","mockScenario","deviceModel","navigator","systemVersion","appVersion","APP_VERSION","authorizationState","initClient","initApi","withCallback","callback","callbackArgs","lastArg","ArrayBuffer","response","fnName","methods","callApi","adr","localStorage","getItem","window","innerHeight","require","crypto","little","signed","randBuffer","bytesNumber","bigInt","subtract","pow","toSignedLittleBuffer","number","bigNumber","byteArray","shiftRight","readBufferFromBigInt","bitLength","lesser","below","hex","padStart","reminder","randomBytes","sha1","shaSum","createHash","digest","crcTable","module","exports","generateRandomLong","mod","crc32","k","makeCRCTable","isBuffer","crc","byte","generateKeyDataFromNonce","serverNonce","newNonce","hash1","hash2","hash3","iv","sha256","bigIntMod","remainder","modExp","one","greater","zero","leastSignificantBit","divide","eq","multiply","getRandomInt","ms","getByteArray","integer","bits","convertToLittle","writeUInt32BE","bufferXor","SIZE_FOR_HASH","checkPrimeAndGood","primeBytes","equals","numBytesForHash","bigNumForHash","isGoodModExpFirst","modexp","prime","diff","xor","computeHash","algo","salt1","salt2","salt","iterations","pbkdf2","pbkdf2sha512","computeCheck","currentAlgo","PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow","pwHash","B","srp_B","isGoodLarge","pForHash","gForHash","bForHash","gX","kgX","aForHash","A","generateAndCheckRandom","ux","aUx","S","K","pSha","gSha","salt1Sha","salt2Sha","M1","InputCheckPasswordSRP","srpId","computeDigest","pwd","Api","newAlgo","newSettings","newPasswordHash","newSecureSettings","codeLength","inputPassword","os","MemorySession","utils","Session","LAYER","requests","ConnectionTCPObfuscated","MTProtoSender","UpdateConnectionState","authFlow","checkAuthorization","downloadFile","WEBDOCUMENT_REQUEST_PART_SIZE","sizeTypes","TelegramClient","apiId","apiHash","opts","DEFAULT_OPTIONS","defaultDcId","_useIPV6","useIPV6","baseLogger","_log","floodSleepLimit","_eventBuilders","_phoneCodeHash","_requestRetries","requestRetries","_connectionRetries","connectionRetries","_retryDelay","retryDelay","proxy","_proxy","_timeout","_autoReconnect","autoReconnect","_connection","_floodWaitedRequests","_initWith","InvokeWithLayer","layer","InitConnection","release","systemLangCode","_args","_config","phoneCodeHashes","_exportedSenderPromises","_waitingForAuthKey","_exportedSenderReleaseTimeouts","_additionalDcsDisabled","additionalDcsDisabled","_loopStarted","_isSwitchingDc","_destroyed","_initSession","_sender","logger","retries","delay","connectTimeout","authKeyCallback","_authKeyCallback","updateCallback","_handleUpdate","isMainSender","userDisconnected","_user_connected","isReconnecting","_disconnected","serverAddress","testServers","setAuthKey","GetConfig","_updateLoop","load","DC","getDC","setDC","ipAddress","useWSS","lastPongAt","ping","PingDelayDisconnect","pingId","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","disconnectDelay","pingAt","lastInterval","attempts","wakeUpWarningTimeout","disconnected","getTime","_lastRequest","GetState","promises","promise","sender","newDc","firstConnectResolver","hasAuthKey","dc","_authenticated","auth","ExportAuthorization","req","ImportAuthorization","shouldReconnect","existingSender","_connectSender","_createExportedSender","isConnecting","_borrowExportedSender","onConnectionBreak","_cleanupExportedSender","getSender","inputLocation","messageOrMedia","Message","MessageService","MessageMediaWebPage","WebPage","MessageMediaPhoto","Photo","_downloadPhoto","MessageMediaDocument","Document","_downloadDocument","MessageMediaContact","_downloadContact","WebDocument","WebDocumentNoProxy","_downloadWebDocument","downloadProfilePhoto","loc","UserProfilePhoto","ChatPhoto","InputPeerPhotoFileLocation","getInputPeer","downloadStickerSetThumb","thumbVersion","GetCustomEmojiDocuments","docs","doc","InputDocumentFileLocation","thumbSize","fileSize","InputStickerSetThumb","InputStickerSetID","thumbDcId","_pickFileSize","_downloadCachedPhotoSize","PhotoStrippedSize","isVideoSize","PhotoSizeEmpty","PhotoCachedSize","InputPhotoFileLocation","progressCallback","arrayBuff","downloaded","upload","GetWebFile","InputWebFileLocation","zoom","scale","InputWebFileGeoPointLocation","geoPoint","InputGeoPoint","FloodWaitError","attempt","sendWithInvokeSupport","ServerError","FloodTestPhoneWaitError","PhoneMigrateError","NetworkMigrateError","UserMigrateError","_switchDC","MsgWaitError","isReady","setIsPremium","GetUsers","InputUserSelf","authParams","shouldThrowIfUnauthorized","apiCredentials","fileParams","addEventHandler","event","Updates","UpdatesCombined","_processUpdate","UpdateShort","others","_dispatchUpdate","ptsDate","builder","build","cb","isResolved","race","finally","times","pause","Infinity","sequentialUpdates","DEFAULT_INITIAL_METHOD","QR_CODE_TIMEOUT","me","botAuthToken","signInBot","sendResult","signInWithPassword","webAuthTokenFailed","signInUserWithPreferredMethod","signInUserWithWebToken","initialMethod","signInUser","signInUserWithQrCode","phoneCodeHash","phoneCode","isCodeViaApp","sendCodeResult","sendCode","forceSMS","termsOfService","isRegistrationRequired","firstAndLastNames","isScanningComplete","inputPromise","env","TELEGRAM_T_API_ID","TELEGRAM_T_API_HASH","exceptIds","qrCode","updatePromise","result2","authorization","migratedResult","resendResult","noReset","passwordSrpResult","passwordSrpCheck","computePasswordSrpCheck","MIN_CHUNK_SIZE","DEFAULT_CHUNK_SIZE","ONE_MB","DISCONNECT_SLEEP","SENDER_TIMEOUT","SENDER_RETRIES","FileView","FileSystemFileHandle","prototype","createSyncAccessHandle","directory","storage","getDirectory","downloadsFolder","getDirectoryHandle","create","largeFile","getFileHandle","largeFileAccessHandle","write","at","writeUInt8","getData","getFile","downloadFile2","_cleanupExportedSenders","MAX_CONCURRENT_CONNECTIONS","MAX_CONCURRENT_CONNECTIONS_PREMIUM","MULTIPLE_CONNECTIONS_MIN_FILE_SIZE","foremans","fill","Foreman","partSizeKb","getDownloadPartSize","partSize","partsCount","noParallel","shouldUseMultipleConnections","fileView","activeCounts","activeWorkers","currentForemanIndex","hasEnded","isPrecise","senderIndex","requestWorker","Deferred","releaseWorker","offsetMemo","precise","KB_TO_BYTES","LARGE_FILE_THRESHOLD","getFileId","fileIdStr","isLarge","getUploadPartSize","partCount","fileToBuffer","parts","md5Checksum","blobSlice","jMemo","blobSliceMemo","fileInfo","uploadReq","UploadReq","partBytes","filePart","fileTotalParts","BinaryReader","_key","_hash","auxHash","readLong","keyId","shaData","other","createCipheriv","encrypt","Factorizator","neq","temp","pq","randBetween","minus","ys","condition","gcd","IGE","AESIGE","ige","decryptIge","cipherText","decrypt","encryptIge","plainText","padding","RPCError","rpcErrorRe","Common","RPCBaseErrors","RPCErrorList","RPCMessageToError","rpcError","msgRegex","Cls","capture","EventBuilder","func","blacklistChats","resolved","NewMessage","Raw","StopPropagation","_queue","canGet","resolveGet","canPush","resolvePush","returned","pop","TypeNotFoundError","coreObjects","tlobjects","_last","readByte","readInt","readInt32LE","readUInt32LE","readLargeInt","readFloat","readFloatLE","readDouble","readDoubleLE","getBuffer","tgReadBytes","firstByte","tgReadString","tgReadBool","tgReadDate","tgReadObject","constructorId","clazz","seek","pos","tellPosition","setPosition","fromReader","tgReadVector","position","_stream","getValue","_level","level","isBrowser","browser","__nwjs","messageFormat","canSend","levels","stack","format","toISOString","toUpperCase","MessageContainer","TLMessage","BinaryWriter","USE_INVOKE_AFTER_WITH","_state","_pendingStates","_ready","setReady","append","after","extend","states","batch","MAXIMUM_LENGTH","shift","SIZE_OVERHEAD","MAXIMUM_SIZE","afterId","writeDataAsMessage","unshift","writeUInt32LE","writeInt32LE","containerId","rejectAll","requestState","Mutex","mutex","closeError","disconnectedCallback","readData","thisTime","canRead","toReturn","resolveRead","getWebSocketLink","website","receive","wasClean","runExclusive","Response","PromisedWebSockets","MessagePacker","AsyncQueue","tl","events","sessions","extensions","helpers","SERVER_KEYS","keyInfo","RETRIES","doAuthentication","nonce","resPQ","SecurityError","factorize","pBuffer","qBuffer","pqInnerData","targetFingerprint","targetKey","serverPublicKeyFingerprints","dataWithPadding","dataPadReversed","encryptedData","tempKey","shaDigestKeyWithData","dataWithHash","aesEncrypted","tempKeyXor","keyAesEncrypted","keyAesEncryptedInt","greaterOrEquals","encryptedDataBuffer","serverDhParams","publicKeyFingerprint","sh","nnh","newNonceHash","encryptedAnswer","plainTextAnswer","serverDhInner","dhPrime","ga","serverTime","gb","gab","clientDhInner","retryId","clientDdhInnerHashed","clientDhEncrypted","dhGen","nonceTypes","nonceNumber","calcNewNonceHash","InvalidBufferError","loggers","_getNewMsgId","recv","MtProtoPlainSender","RPCResult","GZIPPacked","RequestState","MsgsAck","MsgsStateInfo","Pong","UpdateServerTimeOffset","BadMessageError","BadServerSalt","BadMsgNotification","MsgDetailedInfo","MsgNewDetailedInfo","NewSessionCreated","FutureSalts","MsgsStateReq","MsgResendReq","MsgsAllInfo","LogOut","_dcId","_retries","_delay","_connectTimeout","_updateCallback","_autoReconnectCallback","autoReconnectCallback","_isMainSender","_onConnectionBreak","_send_loop_handle","_recv_loop_handle","_send_queue","_pending_state","_pending_ack","_last_acks","_handlers","_handleRPCResult","_handleContainer","_handleGzipPacked","_handlePong","_handleBadServerSalt","_handleBadNotification","_handleDetailedInfo","_handleNewDetailedInfo","_handleNewSessionCreated","_handleAck","_handleFutureSalts","_handleStateForgotten","_handleMsgAll","force","_connect","_disconnect","plain","_sendLoop","_recvLoop","ack","msgIds","clear","invalidConstructorId","remaining","_handleBadAuthKey","_processMessage","shouldSkipForMain","broken","obj","handler","_popStates","toPop","reqMsgId","readResult","innerMessage","pong","newTimeOffset","updateTimeOffset","badSalt","badMsgId","newServerSalt","badMsg","errorCode","_sequence","answerMsgId","serverSalt","repeat","_reconnect","reset","newConnection","_ip","_port","_testServers","aes","InvokeAfterMsg","isCall","_isCall","_isOutgoing","_lastMsgId","updateMessageId","msgKey","sha256a","sha256b","contentRelated","seqNo","_getSeqNo","gzipIfSmaller","waitForKey","lengthStart","_calcKey","CTR","ourKey","remoteMsgId","remoteSequence","containerLen","nanoseconds","newMsgId","correctMsgId","bad","old","default","Connection","_isPremium","_connected","_sendTask","_recvTask","_codec","_obfuscation","_sendArray","_recvArray","socket","disconnectCallback","PacketCodecClass","_initConn","fromCallback","_send","_recv","tag","encodedPacket","encodePacket","readPacket","PacketCodec","_conn","ObfuscatedConnection","ObfuscatedIO","header","AbridgedPacketCodec","props","obfuscateTag","ConnectionTCPAbridged","initHeader","_encrypt","encryptor","_decrypt","decryptor","packetCodec","toJSON","randomReversed","encryptKey","encryptIv","decryptKey","decryptIv","readExactly","ConnectionTCPFull","MTProtoPlainSender","origin","StorageSession","CACHE_NAME","Request","_storageKey","caches","open","cached","_sessionData","_callback","_authKeys","mainDcId","hashes","skipOnUpdate","_serverAddress","getSessionData","idb","_delete","del","_fetchFromCache","_saveToCache","removeItem","setItem","_takeoutId","_updateStates","_authKey","sessionInfo","_sessionString","_loadFromSessionString","skipUpdateStorage","_updateStorage","asHex","mainDcIdStr","mainDcKey","StringSession","readUInt8","serverAddressLen","readInt16BE","dcBuffer","addressBuffer","addressLengthBuffer","writeInt16BE","portBuffer","Memory","CacheApiSession","LocalStorageSession","IdbSession","CallbackSession","api","sub","parseTl","serializeDate","tlContent","schemeContent","CACHING_SUPPORTED","CACHE_KEY","extractParams","fileContent","f","functions","d","isFunction","argToBytes","writeDoubleLE","getArgFromReader","arg","isVector","useVectorId","flagIndicator","skipConstructorId","createClasses","classesType","classes","classParams","subclassOfId","argsConfig","namespace","fullName","argName","isFlag","flagValue","flagGroup","flagIndex","idForBytes","buffers","flagCalculate","boxed","charAt","definitions","fromCache","jsonCache","loadFromCache","constructorParamsApi","functionParamsApi","constructorParamsSchema","functionParamsSchema","loadFromTlSchemas","obj1","obj2","mergeWithNamespaces","buildApiFromTlSchema","gzipped","toBytes","gzip","ungzip","containerLength","before","tlMessage","RpcError","innerCode","ActionCommandsName","cid","PB","bbStack","grow","finalOffset","newBytes","advance","_pbData","_pbBody","_bb","_pbHeader","command_id","reversed","setPbData","readPbData","getPbDataLength","getPbBody","getPbBodyLength","setPbBody","writeData","headerBb","getReversed","pb","__pb","setMsg","__cid","getMsg","__E","__D","__pack","toHex","fromHex","hexStr","toObject","EncryptType","protobuf","util","Long","$root","roots","$wires","basic","$packed","packed","$types","invalid","repeated","keyType","expected","keyVerifyMap","int32","uint32","sint32","fixed32","sfixed32","int64","uint64","sint64","fixed64","sfixed64","bool","type32Map","type64Map","floatOrDoubleMap","float","double","$verifier","fieldInfo","verifyKey","isInteger","low","high","isString","resolvedType","verify","$reader","$writer","wire","fork","ldelim","Reader","Writer","$createConverter","cfgs","converter","cfg","j","convf","$conv_object","ret","fromValue","unsigned","LongBits","toNumber","newBuffer","base64","fromObject","$conv_message","isFinite","longs","enums","_","parent","inner","payloads","C","$namespace","emptyObject","emptyArray","fromBits","$message","$end","skipType","decodeDelimited","writer","encodeDelimited","property","TypeError","vtype","objects","defaults","arrays","toJSONOptions","fieldName","isObject","$fieldName","vals","PTP","Auth","AuthLoginRes","AuthNativeRes","AuthPreLoginReq","AuthPreLoginRes","AuthStep1Req","AuthStep1Res","AuthStep2Req","AuthStep2Res","Chats","AUTH_TYPE","ClientInfo","FileInfo","MessageStoreRow","PbAction","PbAiBot","PbAudio","PbBotInfo","PbChat","PbChatFolder","PbChatGpBotConfig","PbChatGptModelConfig","PbCommands","PbContent","PbDimensions","PbDocument","PbFullInfo","PbMenuButton","PbMessageEntity","PbPhoto","PbQrCode","PbReaction","PbReactionCount","PbReactions","PbRepliesThreadInfo","PbSettings","PbSizes","PbText","PbThumbnail","PbUsernames","PbUserSetting","PbVoice","QrCodeType","UserMessageStoreData","UserStoreData","UserStoreRow","UploadRes","Msg","DownloadMsgReq","MsgDeleteReq","MsgDeleteRes","MsgListReq","MsgListRes","MsgUpdateReq","MsgUpdateRes","RemoveMessagesReq","RemoveMessagesRes","SendReq","SendRes","UploadMsgRes","Other","OtherNotify","Sync","SyncReq","SyncRes","User","DownloadUserReq","GenUserIdReq","GenUserIdRes","UploadUserRes","global","Mnemonic","words","lang","defineProperty","writable","setDefaultWordlist","generateMnemonic","getLang","getWords","checkMnemonic","validateMnemonic","toSeedBuffer","mnemonicToSeedSync","toSeedHex","toEntropy","mnemonicToEntropy","entropyToMnemonic","contentType","Text","shouldRecreate","Json","cacheData","fn","shouldRunFirst","interval","setInterval","clearInterval","schedulerFn","waiting","throttleWith","onTickEnd","onTickEndCallbacks","onTickEndPrimaryCallbacks","isPrimary","currentCallbacks","currentPrimaryCallbacks","Crypto","ec","EC","PTP_HD_PATH","Wallet","mnemonic","seed","__masterKey","HDKey","getMashKey","getChild","root","childIndex","changeIndex","childKey","derivePath","getWallet","getAddressString","prvKey","_hdkey","privateKey","pubKey","publicKey","pubKey_","getPublicKey","bufferToHex","getEthWallet","getPTPWallet","getPTPEncryptWallet","getGroupWallet","keccak224","keccak384","keccak256","keccak512","ecdsaRecover","publicKeyConvert","ecdsaSign","SignMsgType","assertIsBuffer","keccak","bufferToInt","BN","padToEven","setLengthLeft","setLength","right","allocUnsafe","copy","TypeOutput","isValidSigRecovery","recovery","rec","eqn","intToBuffer","isSafeInteger","intToHex","toBuffer","isHexString","str","isHexPrefixed","stripHexPrefix","isNeg","toArrayLike","toArray","toType","outputType","output","bn","gt","calculateSigRecovery","chainId","vBN","subn","chainIdBN","muln","addn","fromRpcSig","publicToAddress","sanitize","assert","EcdsaHelper","signMsgType","SignMsgType_ptp","prefix","SignMsgType_eth","SignMsgType_ptp_group","sig","msgHash","signature","recid","recovered","ecsign","getSignMsgData","msgData","sigParams","senderPubKey","ecrecover","getPublicKeyFor","ecrecoverPubKey65","getPublicKey65For","ALGORITHM","Aes256Gcm","aad","setAAD","ciphertext","final","getAuthTag","cipherData","decipher","createDecipheriv","cipherData1","setAuthTag","plainData","KEYS_PREFIX","SESSIONS_PREFIX","LOCAL_key","LOCAL_iv","LOCAL_aad","currentAccountId","serverKvStore","clientKvStore","accountIds","accounts","uid","ts","parseSession","getClientKv","saveSessionByAddr","getSessionAddress","getSessionByAddr","addr","getSessions","getServerKv","getShareKey","shareKey","getIv","getAad","getAccountId","setUid","setUserInfo","userInfo","getUserInfo","getUid","hashSha256","getEntropy","getAddressFromEntropy","pasword","genEntropy","wallet","pubKeyTo","plainBuffer","ephemPrivKey","keyFromPrivate","ephemPubKey","getPublic","ephemPubKeyEncoded","pubKey1","keyFromPublic","px","derive","encryptionKey","macKey","AES256CbcEncrypt","plaintext","firstChunk","secondChunk","dataToMac","mac","createHmac","EthEcies","privKey","encrypted","BufferEqual","b1","b2","AES256CbcDecrypt","getKeys","localEncrypt","localDecrypt","skipSave","saveKey","serverPubKey","ethWallet","ecdh","aesEncrypt","aesDecrypt","ecdsa","verifyRecoverAddress","recoverAddress","recoverAddressAndPubKey","verifyPwd","genAccountId","setCurrentAccountId","accountIdsStr","randomize","SALT","blobToArrayBuffer","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","__webpack_exports__","O","chunkIds","priority","notFulfilled","fulfilled","getter","__esModule","definition","enumerable","chunkId","miniCssF","globalThis","Function","Symbol","toStringTag","nmd","paths","children","scriptUrl","importScripts","currentScript","src","scripts","getElementsByTagName","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","moreModules","runtime"],"sourceRoot":""}