{"version":3,"file":"5769.11c733e980f888deb687.js","mappings":"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","sources":["webpack://wai/./src/global/actions/ui/localSearch.ts","webpack://wai/./src/global/actions/ui/chats.ts","webpack://wai/./src/global/actions/ui/messages.ts","webpack://wai/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://wai/./src/global/actions/ui/globalSearch.ts","webpack://wai/./src/global/actions/ui/stickerSearch.ts","webpack://wai/./src/global/actions/ui/users.ts","webpack://wai/./src/util/updateIcon.ts","webpack://wai/./src/util/updatePageTitle.ts","webpack://wai/./src/global/actions/ui/misc.ts","webpack://wai/./src/global/actions/ui/payments.ts","webpack://wai/./src/global/actions/ui/mediaViewer.ts","webpack://wai/./src/global/actions/ui/passcode.ts","webpack://wai/./src/global/actions/api/messages.ts","webpack://wai/./src/global/actions/api/symbols.ts","webpack://wai/./src/global/actions/api/globalSearch.ts","webpack://wai/./src/global/actions/api/localSearch.ts","webpack://wai/./src/global/actions/api/management.ts","webpack://wai/./src/global/actions/api/sync.ts","webpack://wai/./src/global/actions/api/accounts.ts","webpack://wai/./src/global/actions/api/users.ts","webpack://wai/./src/global/reducers/bots.ts","webpack://wai/./src/util/PopupManager.ts","webpack://wai/./src/global/actions/api/bots.ts","webpack://wai/./src/global/actions/api/payments.ts","webpack://wai/./src/global/actions/api/twoFaSettings.ts","webpack://wai/./src/util/requestQuery.ts","webpack://wai/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://wai/./src/global/reducers/reactions.ts","webpack://wai/./src/global/actions/api/reactions.ts","webpack://wai/./src/global/actions/api/statistics.ts","webpack://wai/./src/global/actions/apiUpdaters/chats.ts","webpack://wai/./src/global/actions/apiUpdaters/messages.ts","webpack://wai/./src/global/actions/apiUpdaters/users.ts","webpack://wai/./src/global/actions/apiUpdaters/symbols.ts","webpack://wai/./src/global/actions/apiUpdaters/misc.ts","webpack://wai/./src/global/actions/apiUpdaters/settings.ts","webpack://wai/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://wai/./src/global/actions/apiUpdaters/calls.ts","webpack://wai/./src/global/actions/apiUpdaters/payments.ts","webpack://wai/./src/hooks/useBeforeUnload.ts","webpack://wai/./src/hooks/usePreventPinchZoomGesture.ts","webpack://wai/./src/components/common/StickerSetModal.async.tsx","webpack://wai/./src/components/common/UnreadCounter.tsx","webpack://wai/./src/hooks/useConnectionStatus.ts","webpack://wai/./src/hooks/useBrowserOnline.ts","webpack://wai/./src/components/left/ConnectionStatusOverlay.tsx","webpack://wai/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://wai/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://wai/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://wai/./src/components/left/main/StatusButton.tsx","webpack://wai/./src/components/left/main/LeftMainHeader.tsx","webpack://wai/./src/util/permanentWebVersion.ts","webpack://wai/./src/components/ui/Tab.tsx","webpack://wai/./src/components/ui/TabList.tsx","webpack://wai/./src/components/left/main/ChatFolders.tsx","webpack://wai/./src/components/left/search/LeftSearch.async.tsx","webpack://wai/./src/components/left/main/ContactList.async.tsx","webpack://wai/./src/components/left/NewChatButton.tsx","webpack://wai/./src/components/left/main/LeftMain.tsx","webpack://wai/./src/components/left/settings/Settings.async.tsx","webpack://wai/./src/components/left/newChat/NewChat.async.tsx","webpack://wai/./src/components/left/ArchivedChats.async.tsx","webpack://wai/./src/components/left/LeftColumn.tsx","webpack://wai/./src/hooks/useResize.ts","webpack://wai/./src/components/middle/PinnedMessageNavigation.tsx","webpack://wai/./src/components/middle/HeaderPinnedMessage.tsx","webpack://wai/./src/hooks/useMessageMediaMetadata.ts","webpack://wai/./src/components/middle/AudioPlayer.tsx","webpack://wai/./src/components/middle/ChatReportPanel.tsx","webpack://wai/./src/components/middle/MiddleHeader.tsx","webpack://wai/./src/components/middle/helpers/groupMessages.ts","webpack://wai/./src/components/middle/hooks/useStickyDates.ts","webpack://wai/./src/components/middle/hooks/useScrollHooks.ts","webpack://wai/./src/components/middle/hooks/useMessageObservers.ts","webpack://wai/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://wai/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://wai/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://wai/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://wai/./src/util/languageDetection.ts","webpack://wai/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://wai/./src/components/middle/ActionMessage.tsx","webpack://wai/./src/components/common/EmbeddedMessage.tsx","webpack://wai/./src/components/middle/message/MessageMeta.tsx","webpack://wai/./src/components/middle/message/Sticker.tsx","webpack://wai/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://wai/./src/components/middle/message/AnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://wai/./src/components/middle/message/Video.tsx","webpack://wai/./src/components/middle/message/Contact.tsx","webpack://wai/./src/components/middle/message/PollOption.tsx","webpack://wai/./src/components/middle/message/Poll.tsx","webpack://wai/./src/components/middle/message/WebPage.tsx","webpack://wai/./src/components/middle/message/Invoice.tsx","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://wai/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://wai/./src/util/map.ts","webpack://wai/./src/components/middle/message/Location.tsx","webpack://wai/./src/components/middle/message/Game.tsx","webpack://wai/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://wai/./src/components/middle/message/Album.tsx","webpack://wai/./src/components/middle/message/RoundVideo.tsx","webpack://wai/./src/components/middle/message/InlineButtons.tsx","webpack://wai/./src/components/middle/message/CommentButton.tsx","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://wai/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://wai/./src/components/middle/message/ReactionButton.tsx","webpack://wai/./src/components/middle/message/Reactions.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.tsx","webpack://wai/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://wai/./src/components/common/TopicChip.tsx","webpack://wai/./src/components/common/TopicChip.module.scss?5208","webpack://wai/./src/components/middle/message/Message.tsx","webpack://wai/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://wai/./src/hooks/useTextLanguage.ts","webpack://wai/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://wai/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://wai/./src/components/common/AboutAdsModal.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://wai/./src/components/middle/message/SponsoredMessage.tsx","webpack://wai/./src/components/middle/MessageListContent.tsx","webpack://wai/./src/components/middle/ContactGreeting.tsx","webpack://wai/./src/components/middle/NoMessages.tsx","webpack://wai/./src/components/middle/MessageList.tsx","webpack://wai/./src/hooks/useNativeCopySelectedMessages.ts","webpack://wai/./src/components/middle/ScrollDownButton.tsx","webpack://wai/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://wai/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://wai/./src/components/middle/FloatingActionButtons.tsx","webpack://wai/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://wai/./src/util/audio.ts","webpack://wai/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://wai/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://wai/./src/util/voiceRecording.ts","webpack://wai/./src/lib/cleanDocsHtml.ts","webpack://wai/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://wai/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://wai/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://wai/./src/components/middle/composer/hooks/useDraft.ts","webpack://wai/./src/components/common/DeleteMessageModal.async.tsx","webpack://wai/./src/components/ui/ResponsiveHoverButton.tsx","webpack://wai/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://wai/./src/components/middle/composer/AttachBotIcon.tsx","webpack://wai/./src/components/middle/composer/AttachBotItem.tsx","webpack://wai/./src/components/middle/composer/AttachMenu.tsx","webpack://wai/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://wai/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://wai/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://wai/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://wai/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://wai/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://wai/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://wai/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://wai/./src/components/middle/composer/PollModal.async.tsx","webpack://wai/./src/components/middle/composer/DropArea.async.tsx","webpack://wai/./src/components/middle/composer/WebPagePreview.tsx","webpack://wai/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://wai/./src/components/middle/composer/BotMenuButton.tsx","webpack://wai/./src/components/middle/composer/Composer.tsx","webpack://wai/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://wai/./src/components/middle/composer/hooks/useEditing.ts","webpack://wai/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://wai/./src/components/middle/MobileSearch.async.tsx","webpack://wai/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://wai/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://wai/./src/components/common/SeenByModal.async.tsx","webpack://wai/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://wai/./src/components/middle/ReactorListModal.async.tsx","webpack://wai/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://wai/./src/components/middle/MessageLanguageModal.async.tsx","webpack://wai/./src/components/middle/MiddleColumn.tsx","webpack://wai/./src/hooks/useCustomBackground.ts","webpack://wai/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://wai/./src/components/right/RightHeader.tsx","webpack://wai/./src/components/right/hooks/useProfileViewportIds.ts","webpack://wai/./src/components/right/hooks/useProfileState.ts","webpack://wai/./src/components/right/Profile.tsx","webpack://wai/./src/components/right/hooks/useTransitionFixes.ts","webpack://wai/./src/hooks/useCacheBuster.ts","webpack://wai/./src/components/right/RightSearch.async.tsx","webpack://wai/./src/components/right/management/Management.async.tsx","webpack://wai/./src/components/right/statistics/Statistics.async.tsx","webpack://wai/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://wai/./src/components/right/StickerSearch.async.tsx","webpack://wai/./src/components/right/GifSearch.async.tsx","webpack://wai/./src/components/right/PollResults.async.tsx","webpack://wai/./src/components/right/AddChatMembers.tsx","webpack://wai/./src/components/right/CreateTopic.async.tsx","webpack://wai/./src/components/right/EditTopic.async.tsx","webpack://wai/./src/components/right/RightColumn.tsx","webpack://wai/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://wai/./src/util/download.ts","webpack://wai/./src/components/main/DownloadManager.tsx","webpack://wai/./src/components/main/GameModal.tsx","webpack://wai/./src/components/main/Notifications.async.tsx","webpack://wai/./src/components/main/Dialogs.async.tsx","webpack://wai/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://wai/./src/components/main/SafeLinkModal.async.tsx","webpack://wai/./src/components/main/HistoryCalendar.async.tsx","webpack://wai/./src/components/calls/group/GroupCall.async.tsx","webpack://wai/./src/components/calls/ActiveCallHeader.async.tsx","webpack://wai/./src/components/calls/phone/PhoneCall.async.tsx","webpack://wai/./src/components/middle/MessageListHistoryHandler.tsx","webpack://wai/./src/components/main/NewContactModal.async.tsx","webpack://wai/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://wai/./src/components/main/WebAppModal.async.tsx","webpack://wai/./src/components/main/BotTrustModal.async.tsx","webpack://wai/./src/components/main/AttachBotInstallModal.async.tsx","webpack://wai/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://wai/./src/components/main/ConfettiContainer.tsx","webpack://wai/./src/components/main/UrlAuthModal.async.tsx","webpack://wai/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://wai/./src/components/payment/PaymentModal.async.tsx","webpack://wai/./src/components/payment/ReceiptModal.async.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://wai/./src/components/main/DeleteFolderDialog.async.tsx","webpack://wai/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://wai/./src/components/main/DraftRecipientPicker.async.tsx","webpack://wai/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://wai/./src/components/ui/PasswordModal.tsx","webpack://wai/./src/components/common/QrCode.tsx","webpack://wai/./src/components/ui/MnemonicModal.tsx","webpack://wai/./src/components/ui/PickBotModal.tsx","webpack://wai/./src/components/ui/GlobalModal.tsx","webpack://wai/./src/components/main/Main.tsx","webpack://wai/./src/components/main/LockScreen.tsx","webpack://wai/./src/components/main/LockScreen.module.scss?8252","webpack://wai/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage, updateFocusedMessageReached, toggleMessageSelectAll,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\nimport {MessageStoreRow_Type, PbMsg_Type} from \"../../../lib/ptp/protobuf/PTPCommon/types\";\nimport {currentTs} from \"../../../worker/share/utils/utils\";\nimport MsgCommandSetting from \"../../../worker/msg/MsgCommandSetting\";\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('onSpeak', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const utterance = new SpeechSynthesisUtterance();\n  var selectedText = \"\";\n  if (window.getSelection) {\n    selectedText = window.getSelection().toString();\n  } else if (document.selection && document.selection.type != \"Control\") {\n    selectedText = document.selection.createRange().text;\n  }\n  if(selectedText){\n    utterance.lang = 'zh-CN';\n    utterance.text = selectedText\n    speechSynthesis.speak(utterance)\n  }\n})\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n  const messages = selectChatMessages(global,chatId);\n  const {content} = messages[lastOwnEditableMessageId]\n  if(content.text && content.text){\n    actions.saveDraft({\n      chatId, threadId,\n      draft:{\n        text:content.text.text,\n        entities:content.text.entities\n      }\n      , shouldForce:true,\n    })\n    // return replaceThreadParam(global, chatId, threadId, 'editingId', {text:lastOwnEditableMessageId.toString()});\n  }\n\n  // return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\n\naddActionHandler('toggleMessageSelectAll', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n  return toggleMessageSelectAll(global, chatId, tabId);\n});\n\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('saveMsgToCloud', async (global, actions, payload): ActionReturnType => {\n  let { chatId,msgId,tabId = getCurrentTabId() } = payload || {};\n  let messageIds = []\n  if(chatId){\n    messageIds = [msgId]\n  }else{\n    const tabState = selectTabState(global, tabId);\n\n    if (!tabState.selectedMessages) {\n      return;\n    }\n    chatId =tabState.selectedMessages.chatId;\n    messageIds =tabState.selectedMessages.messageIds;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId)\n  if (!chatMessages) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id!])\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const messages1:MessageStoreRow_Type[] = [];\n\n  for (let i = 0; i < messages.length; i++) {\n    // @ts-ignore\n    const message:PbMsg_Type = messages[i]\n    messages1.push({\n      time:currentTs(),\n      message,\n      messageId:message.id,\n    })\n  }\n  await MsgCommandSetting.uploadMsgList(chatId,messages1)\n  if(tabId){\n    global = getGlobal();\n    global = exitMessageSelectMode(global, tabId);\n    setGlobal(global)\n  }\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: false, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, tabId]\n    : global.blurredTabTokens.filter((t) => t !== tabId));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (messageList && canDisplayChatInTitle) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, undefined, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  // storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ActionReturnType, ApiDraft, GlobalState, TabArgs,} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiBotInfo,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {MAIN_THREAD_ID, MESSAGE_DELETED,} from '../../../api/types';\nimport {LoadMoreDirection} from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport {IS_IOS} from '../../../util/environment';\nimport {callApi, cancelApiProgress} from '../../../api/gramjs';\nimport {areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  leaveChat,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingIds,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadTopMessageId,\n  selectUser,\n  selectViewportIds,\n} from '../../selectors';\nimport {debounce, onTickEnd, rafPromise,} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isLocalMessageId,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {translate} from '../../../util/langProvider';\nimport {ensureProtocol} from '../../../util/ensureProtocol';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport Account from \"../../../worker/share/Account\";\nimport {replaceSubstring} from \"../../../worker/share/utils/utils\";\nimport {blobToBuffer, fetchBlob} from \"../../../util/files\";\nimport {popByteBuffer, toUint8Array, writeBytes, writeInt16} from \"../../../lib/ptp/protobuf/BaseMsg\";\nimport {resizeImage} from \"../../../util/imageResize\";\nimport {UserIdChatGpt, UserIdFirstBot} from \"../../../worker/setting\";\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\nimport {getPasswordFromEvent} from '../../../worker/share/utils/password';\nimport {AiHistoryType} from \"../../../worker/msg/MsgChatGpWorker\";\nimport MsgCommandChatGpt from \"../../../worker/msg/MsgCommandChatGpt\";\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\nlet _userMaxMsgId:number;\n\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n  let { chatId, threadId } = payload || {};\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList || global.msgClientState !== \"connectionStateLogged\") {\n    return undefined;\n  }\n  const { chatId, threadId, type } = currentMessageList;\n  payload = omit(payload, ['tabId']);\n  const {currentUserId} = getGlobal();\n\n  if(payload.attachments){\n    const hasMessageEntitySpoiler = payload.attachments.find((a:ApiAttachment)=>a.shouldSendAsSpoiler);\n    if(hasMessageEntitySpoiler){\n      const {password,hint} = await getPasswordFromEvent(undefined,false,'messageEncryptPassword');\n      if(password){\n        let {attachments} = payload;\n        for (let i = 0; i < attachments.length; i++) {\n          const attachment = attachments[i];\n          const {blobUrl,mimeType} = attachment;\n          const buf = await blobToBuffer(await fetchBlob(blobUrl));\n          const cipher = await Account.getCurrentAccount()?.encryptData(buf, password)\n          const bb = popByteBuffer();\n          const hintLen = (hint ? hint.length:0)\n          const typeLen = mimeType.length;\n          writeInt16(bb, 2);\n          writeBytes(bb,Buffer.from(\"EN\"));\n          writeInt16(bb, typeLen);\n          writeBytes(bb,Buffer.from(mimeType));\n          writeInt16(bb, hintLen);\n          if(hintLen){\n            writeBytes(bb,Buffer.from(hint||\"\"));\n          }\n          const res = toUint8Array(bb);\n          const blob = new Blob([Buffer.from(res),Buffer.from(cipher!)], { type: attachment.mimeType });\n          payload.attachments[i].encryptUrl = URL.createObjectURL(blob)\n        }\n      }else{\n        return undefined\n      }\n    }\n  }\n  let {attachments} = payload;\n  if(attachments){\n    for (let i = 0; i < attachments.length; i++) {\n      const attachment = attachments[i];\n      const {mimeType,encryptUrl,blobUrl} = attachment;\n      if(mimeType.indexOf(\"image/\") === 0){\n        const size = encryptUrl ? 10 : 40;\n        const quality = 0.1;\n        attachment.thumbBlobUrl = await resizeImage(\n          blobUrl, size,size, 'image/jpeg',quality\n        );\n      }\n    }\n  }\n  if(payload.text && payload.entities && payload.entities!.length > 0){\n    let {entities,text} = payload;\n    const hasMessageEntitySpoiler = entities.find((entity:ApiMessageEntity)=>entity.type === \"MessageEntitySpoiler\");\n    if(hasMessageEntitySpoiler){\n      const {password,hint} = await getPasswordFromEvent(undefined,false,'messageEncryptPassword');\n      if(password){\n        for (let i = 0; i < entities.length; i++) {\n          if(entities[i].type === \"MessageEntitySpoiler\"){\n            const entity = payload.entities[i];\n            const {offset,length} = entity;\n            const cipher = await Account.getCurrentAccount()?.encryptData(Buffer.from(text.substr(offset,length)), password)\n            payload.text = replaceSubstring(payload.text,offset,length,\"x\".repeat(length));\n            //@ts-ignore\n            payload.entities[i] = {...entity,cipher:cipher.toString(\"hex\"),hint}\n          }\n        }\n      }else{\n        return undefined\n      }\n    }\n  }\n\n  global = getGlobal();\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectUser(global, global.currentUserId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', async (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  try {\n    void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n    const {lastMessage} = global.chats.byId[chatId];\n\n    if(lastMessage && lastMessage.id){\n      if(messageIds.includes(lastMessage.id)){\n        const t = getGlobal()\n        setGlobal({\n          ...t,\n          chats:{\n            ...t.chats,\n            byId:{\n              ...t.chats.byId,\n              [chatId]:{\n                ...t.chats.byId[chatId],\n                lastMessage:undefined\n              }\n            }\n          }\n        })\n      }\n    }\n\n    const editingId = selectEditingId(global, chatId, threadId);\n    if (editingId && messageIds.includes(editingId)) {\n      actions.setEditingId({ messageId: undefined, tabId });\n    }\n  }catch (e){\n    console.error(e)\n  }\n\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n  if([UserIdFirstBot,UserIdChatGpt].includes(chatId)) return\n  // await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  global = getGlobal();\n  const {chatIdsDeleted} = global;\n  if(!chatIdsDeleted.includes(chatId)){\n    chatIdsDeleted.push(chatId)\n  }\n  global = {\n    ...global,\n    messagesDeleted:{\n      ...global.messagesDeleted,\n      [chatId]:[]\n    }\n  }\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nconst loadViewportMessagesCache:Record<string, boolean> = {};\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  let flag = false;\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].lastViewportIds == undefined){\n    global = safeReplaceViewportIds(global, chatId, threadId, [], tabId);\n    flag = true;\n  }\n  if(!global.messages.byChatId[chatId]  || !global.messages.byChatId[chatId].threadsById || global.messages.byChatId[chatId].threadsById[\"-1\"].listedIds == undefined){\n    global = updateListedIds(global, chatId, threadId, [])\n    flag = true;\n  }\n\n  if(flag){\n    setGlobal(global)\n  }\n  const lastMessageId = chat?.lastMessage ? chat?.lastMessage.id : 0;\n  const messages1 = selectChatMessages(global,chat!.id)\n\n  let isUp = true;\n  let listedIds1 = selectListedIds(global, chatId, threadId);\n  const ids1:number[]= []\n  listedIds1?.forEach((id:number)=>{\n    if(!isLocalMessageId(id)){\n      ids1.push(id)\n    }\n  })\n\n  if((ids1.length > 1 && ids1[ids1.length - 1] < lastMessageId) || Object.keys(messages1).length === 0){\n    isUp = false;\n  }\n  let result;\n  try{\n    if(loadViewportMessagesCache[chat.id]){\n      return\n    }\n    // console.log(\"[MsgListReq]\",{chatId:chat.id,lastMessageId,isUp})\n    loadViewportMessagesCache[chat.id] = true;\n    result = await callApi('fetchMessages', {\n      chat: selectChat(global, chatId)!,\n      offsetId,\n      addOffset,\n      limit: MESSAGE_LIST_SLICE,\n      threadId,\n      lastMessageId,\n      isUp\n    });\n  }catch (e){\n\n  }\n  setTimeout(()=>{delete loadViewportMessagesCache[chat.id]},1000)\n  if (!result) {\n    return;\n  }\n\n  let {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  if(messages.length > 0 && lastMessageId < messages[messages.length - 1].id){\n    chat.lastMessage = messages[messages.length - 1];\n    if(!chats){\n      chats = []\n    }\n    chats.push(chat)\n  }\n\n  console.log(\"[MsgListRes]\",messages,users)\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nexport function getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n  botInfo?:ApiBotInfo;\n  aiHistoryList?:AiHistoryType[]\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? async (progress: number, localMessage: ApiMessage) => {\n    const messageLocalId = localMessage.id;\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : async (progress: number, localMessage: any)=>{\n\n  }\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  const user = selectUser(global,params.chat.id);\n  params.botInfo = user?.fullInfo?.botInfo ? user?.fullInfo?.botInfo:undefined\n\n  const res = await new MsgDispatcher(global,params).process()\n  params.aiHistoryList = MsgCommandChatGpt.getAiHistoryList(params.chat.id)\n  if(!res){\n    await callApi('sendMessage', params, progressCallback);\n    // @ts-ignore\n    if (progressCallback && localId) {\n      uploadProgressCallbacks.delete(localId);\n    }\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentGlobalSearchQuery,\n  selectTabState, selectUser\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      global = getGlobal();\n      const chatListIdsActive = global.chats.listIds.active;\n      if(!chatListIdsActive){\n        return;\n      }\n      const messagesList:ApiMessage[] = []\n      const chatIds:string[] = [];\n      const userIds:string[] = [];\n      const userIdList = Object.keys(global.users.byId);\n      for (let i = 0; i < userIdList.length; i++) {\n        const userId = userIdList[i]\n        const user = selectUser(global,userId)\n        if(\n          chatListIdsActive.includes(userId) && (\n            (user?.firstName && user?.firstName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.lastName && user?.lastName.toLowerCase().indexOf(query.toLowerCase()) > -1) ||\n            (user?.fullInfo && user?.fullInfo.bio && user?.fullInfo.bio.toLowerCase().indexOf(query.toLowerCase()) > -1)\n          )\n          ){\n          chatIds.push(userId)\n        }\n      }\n\n      for (let i = 0; i < chatListIdsActive.length; i++) {\n        const chatId = chatListIdsActive[i]\n        const chat = selectChat(global,chatId)\n        if(chat && chat?.title.indexOf(query) > -1 && !chatIds.includes(chat?.id)){\n          chatIds.push(chat?.id)\n        }\n        const messages = selectChatMessages(global,chatId)\n        if(messages){\n          const messageIds = Object.keys(messages);\n          for (let i = 0; i < messageIds.length; i++) {\n            const messageId = Number(messageIds[i])\n            const message = selectChatMessage(global,chatId,messageId)\n            if(message?.content && message?.content.text && message?.content.text.text){\n              if(message?.content.text.text.toLowerCase().indexOf(query.toLowerCase()) > -1){\n                messagesList.push(message)\n              }\n            }\n          }\n        }\n\n      }\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (messagesList.length === 0 || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n      global = updateGlobalSearchResults(global,messagesList,messagesList.length,\"text\",0,tabId)\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds,\n          userIds\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n\n  //\n  // const { query, tabId = getCurrentTabId() } = payload!;\n  // const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  // if (query && !chatId) {\n  //   void searchThrottled(async () => {\n  //     const result = await callApi('searchChats', { query });\n  //\n  //     global = getGlobal();\n  //     const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  //     if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n  //       global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //       setGlobal(global);\n  //       return;\n  //     }\n  //\n  //     const {\n  //       localChats, localUsers, globalChats, globalUsers,\n  //     } = result;\n  //\n  //     if (localChats.length || globalChats.length) {\n  //       global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  //     }\n  //\n  //     if (localUsers.length || globalUsers.length) {\n  //       global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  //     }\n  //\n  //     global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n  //     global = updateGlobalSearch(global, {\n  //       localResults: {\n  //         chatIds: localChats.map(({ id }) => id),\n  //         userIds: localUsers.map(({ id }) => id),\n  //       },\n  //       globalResults: {\n  //         ...selectTabState(global, tabId).globalSearch.globalResults,\n  //         chatIds: globalChats.map(({ id }) => id),\n  //         userIds: globalUsers.map(({ id }) => id),\n  //       },\n  //     }, tabId);\n  //\n  //     setGlobal(global);\n  //   });\n  // }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  return\n  console.log(\"searchMessagesGlobal\")\n  // let result: {\n  //   messages: ApiMessage[];\n  //   users: ApiUser[];\n  //   chats: ApiChat[];\n  //   topics?: ApiTopic[];\n  //   totalTopicsCount?: number;\n  //   totalCount: number;\n  //   nextRate: number | undefined;\n  // } | undefined;\n  //   console.log(\"searchMessagesGlobal\")\n  // if (chat) {\n  //   const localResultRequest = callApi('searchMessagesLocal', {\n  //     chat,\n  //     query,\n  //     type,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     offsetId: offsetRate,\n  //     minDate,\n  //     maxDate,\n  //   });\n  //   const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n  //     chat,\n  //     query,\n  //     limit: GLOBAL_TOPIC_SEARCH_SLICE,\n  //   }) : undefined;\n  //\n  //   const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n  //\n  //   if (localResult) {\n  //     const {\n  //       messages, users, totalCount, nextOffsetId,\n  //     } = localResult;\n  //\n  //     const { topics: localTopics, count } = topics || {};\n  //\n  //     result = {\n  //       topics: localTopics,\n  //       totalTopicsCount: count,\n  //       messages,\n  //       users,\n  //       chats: [],\n  //       totalCount,\n  //       nextRate: nextOffsetId,\n  //     };\n  //   }\n  // } else {\n  //   result = await callApi('searchMessagesGlobal', {\n  //     query,\n  //     offsetRate,\n  //     limit: GLOBAL_SEARCH_SLICE,\n  //     type,\n  //     maxDate,\n  //     minDate,\n  //   });\n  // }\n  //\n  // global = getGlobal();\n  // const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  // if (!result || (query !== '' && query !== currentSearchQuery)) {\n  //   global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  //\n  // const {\n  //   messages, users, chats, totalCount, nextRate,\n  // } = result;\n  //\n  // if (chats.length) {\n  //   global = addChats(global, buildCollectionByKey(chats, 'id'));\n  // }\n  //\n  // if (users.length) {\n  //   global = addUsers(global, buildCollectionByKey(users, 'id'));\n  // }\n  //\n  // if (messages.length) {\n  //   global = addMessages(global, messages);\n  // }\n  //\n  // global = updateGlobalSearchResults(\n  //   global,\n  //   messages,\n  //   totalCount,\n  //   type,\n  //   nextRate,\n  //   tabId,\n  // );\n  //\n  // if (result.topics) {\n  //   global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  // }\n  //\n  // const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  // global = updateGlobalSearch(global, {\n  //   foundTopicIds: sortedTopics,\n  // }, tabId);\n  //\n  // setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport {ManagementProgress} from '../../../types';\nimport type {ActionReturnType} from '../../types';\n\nimport {callApi} from '../../../api/gramjs';\nimport {\n  addUsers,\n  updateChat,\n  updateManagement,\n  updateManagementProgress,\n  updateUsers,\n} from '../../reducers';\nimport {selectChat, selectCurrentMessageList, selectTabState, selectUser,} from '../../selectors';\nimport {ensureIsSuperGroup} from './chats';\nimport {getUserFirstOrLastName} from '../../helpers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\nimport {blobToDataUri, fetchBlob, imgToBlob} from \"../../../util/files\";\nimport {resizeImage} from \"../../../util/imageResize\";\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  const blob = await imgToBlob(file!);\n  const thumbnailUrl = await resizeImage(blob,40,40,file!.type,0.1);\n  const thumbnail = await blobToDataUri(await fetchBlob(thumbnailUrl));\n  result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n    thumbnail,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  // @ts-ignore\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  // const newUser = await callApi('fetchFullUser', { id, accessHash });\n  // if (!newUser) {\n  //   global = getGlobal();\n  //   global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n  //   setGlobal(global);\n  //   return;\n  // }\n  // actions.loadProfilePhotos({ profileId: userId });\n  global = getGlobal();\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getActions, getGlobal, setGlobal,} from '../../index';\nimport {addCallback} from '../../../lib/teact/teactn';\n\nimport type {ApiChat, ApiMessage} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {ActionReturnType, GlobalState, Thread} from '../../types';\n\nimport {DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID} from '../../../config';\nimport {callApi} from '../../../api/gramjs';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport {init as initFolderManager} from '../../../util/folderManager';\nimport {updateTabState} from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n  const { loadAllChats, preloadTopChatMessages, } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      // await loadAndReplaceMessages(global, actions);\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState,msgClientState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (\n    previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState\n    && previousGlobal?.msgClientState === msgClientState\n  )) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (\n    connectionState === 'connectionStateReady' && authState === 'authorizationStateReady'\n    && (\n      msgClientState === 'connectionStateConnected' ||\n      msgClientState === 'connectionStateLogged'\n    )\n  ) {\n    if(DEBUG){\n      console.log({connectionState,msgClientState,authState})\n    }\n    getActions().sync();\n  }\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ApiUser} from '../../../api/types';\nimport {ManagementProgress} from '../../../types';\n\nimport {throttle} from '../../../util/schedulers';\nimport {buildCollectionByKey, unique} from '../../../util/iteratees';\nimport {isUserBot, isUserId} from '../../helpers';\nimport {callApi} from '../../../api/gramjs';\nimport {selectChat, selectCurrentMessageList, selectTabState, selectUser,} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {getServerTime} from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type {ActionReturnType} from '../../types';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  // if (!user.isContact && user.phoneNumber) {\n  //   result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  // } else {\n  //   const { id, accessHash } = user;\n  //   result = await callApi('updateContact', {\n  //     id,\n  //     accessHash,\n  //     phoneNumber: '',\n  //     firstName,\n  //     lastName,\n  //     shouldSharePhoneNumber,\n  //   });\n  // }\n  result = {};\n  global = getGlobal();\n  if (result) {\n    // actions.loadChatSettings({ chatId: userId });\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n  }\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type {RequiredGlobalActions} from '../../index';\nimport {addActionHandler, getGlobal, setGlobal,} from '../../index';\n\nimport type {ActionReturnType, GlobalState, TabArgs} from '../../types';\nimport type {ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,} from '../../../api/types';\nimport {MAIN_THREAD_ID} from '../../../api/types';\nimport type {InlineBotSettings} from '../../../types';\nimport {callApi} from '../../../api/gramjs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectReplyingToId,\n  selectSendAs,\n  selectTabState,\n  selectThreadTopMessageId,\n  selectUser,\n} from '../../selectors';\nimport {addChats, addUsers, removeBlockedContact} from '../../reducers';\nimport {buildCollectionByKey} from '../../../util/iteratees';\nimport {debounce} from '../../../util/schedulers';\nimport {replaceInlineBotSettings, replaceInlineBotsIsLoading} from '../../reducers/bots';\nimport {getServerTime} from '../../../util/serverTime';\nimport {extractCurrentThemeParams} from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport {updateTabState} from '../../reducers/tabs';\nimport {getCurrentTabId} from '../../../util/establishMultitabRole';\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\nimport {openSystemFilesDialog} from \"../../../util/systemFilesDialog\";\nimport {SUPPORTED_IMAGE_CONTENT_TYPES} from \"../../../config\";\nimport MsgCommand from \"../../../worker/msg/MsgCommand\";\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      MsgCommand.answerCallbackButton(global,chat.id,messageId,button.data);\n      // void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestUploadImage':\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      openSystemFilesDialog(\n        Array.from(SUPPORTED_IMAGE_CONTENT_TYPES).join(','),\n        (e) => {\n          const { files } = e.target as HTMLInputElement;\n          MsgCommand.requestUploadImage(global,chat.id,messageId,files);\n        },\n        true\n      );\n      break;\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList || global.msgClientState !== 'connectionStateLogged') {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  const global = getGlobal();\n  const user = selectUser(global,chat.id)\n  const params = {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n    botInfo:user?.fullInfo?.botInfo\n  }\n  const res = await new MsgDispatcher(getGlobal(),params).process()\n  if(!res){\n    await callApi('sendMessage', params);\n  }\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\nimport {isLocalMessageId} from \"../../helpers\";\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n      if(!isLocalMessageId(message.id!)){\n        // global = updateChat(global, update.chatId, {\n        //   unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        //   ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        // });\n        global = updateChat(global, update.chatId, {\n          unreadCount:0,\n          unreadMentionsCount:0,\n        });\n      }\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isLocalMessageId,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport parseMessageInput from \"../../../util/parseMessageInput\";\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n      let messageNew = message\n      if (!messageNew.isOutgoing && messageNew.content\n        && messageNew.content.text && messageNew.content.text.text && !messageNew.content.text!.entities) {\n        const {text, entities} = parseMessageInput(messageNew.content.text.text);\n        messageNew.content.text.text = text;\n        messageNew.content.text.entities = entities\n      }\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...messageNew,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error && error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n\n  // Channel update\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import {addActionHandler, getGlobal, setGlobal} from '../../index';\n\nimport type {ApiUserStatus} from '../../../api/types';\n\nimport {\n  addUsers,\n  addUserStatuses,\n  deleteContact,\n  replaceChats,\n  replaceUsers,\n  replaceUserStatuses,\n  updateUser,\n} from '../../reducers';\nimport {throttle} from '../../../util/schedulers';\nimport {selectChat, selectIsCurrentUserPremium, selectUser} from '../../selectors';\nimport type {ActionReturnType, RequiredGlobalState} from '../../types';\nimport {AiReplyHistoryRole, AiReplyHistoryType} from \"../../types\";\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case \"updateGlobalUpdate\":\n      const {data} = update\n      switch (data.action){\n        case \"updateAiHistory\":\n          const chatId = data.payload!.chatId;\n          let historyList:AiReplyHistoryType[] = []\n          if(global.aiReplyHistory[chatId]){\n            historyList = [\n              ...global.aiReplyHistory[chatId],\n            ]\n          }\n          historyList = [\n            ...historyList,\n            {\n              msgId:data.payload!.messages[0],\n              role:AiReplyHistoryRole.USER\n            },\n            {\n              msgId:data.payload!.messages[0],\n              role:AiReplyHistoryRole.ASSISTANT\n            }\n          ]\n          return {\n            ...global,\n            aiReplyHistory:{\n              ...global.aiReplyHistory,\n              [chatId]:historyList\n            }\n          }\n        case \"updateBot\":\n          const userBotUpdate = {\n            ...global.users.byId[data.payload!.botInfo.botId],\n            bot:data.payload!.bot\n          };\n          if(data.payload!.bot.chatGptConfig && data.payload!.bot.chatGptConfig.api_key){\n            localStorage.setItem(\"open-api-key\" , data.payload!.bot.chatGptConfig.api_key)\n          }\n          return updateUser(global,data.payload!.botInfo.botId,userBotUpdate)\n        case \"clearHistory\":\n          actions.updateGlobal({\n            messages:{\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [data.payload!.chatId]:{\n                  ...global.messages.byChatId[data.payload!.chatId],\n                  byId:{},\n                  threadsById:{\n                    \"-1\":{\n                      ...global.messages.byChatId[data.payload!.chatId].threadsById[\"-1\"],\n                      lastScrollOffset:undefined,\n                      lastViewportIds: [],\n                      listedIds:[]\n                    }\n                  }\n                }\n              }\n            },\n            chats:{\n              ...global.chats,\n              byId:{\n                ...global.chats.byId,\n                [data.payload!.chatId]:{\n                  ...global.chats.byId[data.payload!.chatId],\n                  lastMessage:undefined\n                }\n              }\n            }\n          })\n          break;\n        case \"loadChats\":\n        case \"createBot\":\n          actions.loadAllChats({ listType: 'active', shouldReplace: true });\n          return\n        case \"removeBot\":\n          if(global.chats.listIds && global.chats.listIds.active){\n            let listIds_active = global.chats.listIds.active\n            listIds_active = listIds_active!.filter(id=>id !== data.payload!.chatId)\n            actions.updateGlobal({\n              chats:{\n                ...global.chats,\n                listIds: {\n                  ...global.chats.listIds,\n                  active:listIds_active\n                },\n                totalCount: {\n                  ...global.chats.totalCount,\n                  all:listIds_active.length\n                }\n              }\n            })\n            // @ts-ignore\n            actions.openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n            actions.loadAllChats({ listType: 'active', shouldReplace: true });\n          }\n          return\n      }\n\n      const chat_listIds_active = global.chats.listIds.active || []\n      if(data.chats){\n        for (let i = 0; i < data.chats.length; i++) {\n          const chat1 = data.chats[i]\n          const chat = selectChat(global,chat1.id)\n          if(!chat_listIds_active.includes(chat1.id)){\n            chat_listIds_active.push(chat1.id)\n          }\n          if(chat){\n            global = replaceChats(global,{\n              ...global.chats.byId,\n              [chat1.id]:{\n                ...chat,\n                ...chat1,\n              }\n            });\n          }else{\n            const chatFolders = global.chatFolders;\n            if(!chatFolders.byId[\"1\"].includedChatIds.includes(chat1.id)){\n              chatFolders.byId[\"1\"].includedChatIds.push(chat1.id)\n            }\n            global = {\n              ...global,\n              chats:{\n                ...global.chats,\n                byId:{\n                  ...global.chats.byId,\n                  [chat1.id]:{\n                    ...chat1,\n                  }\n                }\n              },\n              chatFolders\n            }\n          }\n        }\n      }\n      if(data.users){\n        for (let i = 0; i < data.users.length; i++) {\n          const user1 = data.users[i]\n          const user = selectUser(global,user1.id)\n          if(user){\n            global = replaceUsers(global,{\n              ...global.users.byId,\n              [user1.id]:{\n                ...user,\n                ...user1,\n              }\n            });\n          }else{\n            global = addUsers(global,{\n              [user1.id]:{\n                ...user1,\n              }\n            });\n            if(user1.fullInfo && user1.fullInfo.botInfo){\n              global = addUserStatuses(global,{\n                [user1.id]:{\n                  type:'userStatusEmpty'\n                }\n              });\n            }\n          }\n        }\n      }\n      actions.updateGlobal({\n        chats:{\n          ...global.chats,\n          listIds:{\n            ...global.chats.listIds,\n            active:chat_listIds_active\n          },\n          totalCount:{\n            all:chat_listIds_active.length\n          }\n        },\n        users:global.users,\n        chatFolders:global.chatFolders,\n      })\n      break\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect] as const);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useMemo,} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {AnimationLevel, ISettings} from '../../../types';\nimport {LeftColumnContent, SettingsScreens} from '../../../types';\nimport type {ApiChat} from '../../../api/types';\nimport type {GlobalState, TabState} from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME,\n  APP_VERSION,\n  ASSET_CACHE_NAME,\n  BETA_CHANGELOG_URL,\n  CLOUD_MESSAGE_ENABLE,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  LANG_CACHE_NAME,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport {IS_PWA} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport {formatDateToString} from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport {setPermanentWebVersion} from '../../../util/permanentWebVersion';\nimport {clearWebsync} from '../../../util/websync';\nimport {\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport {isChatArchived} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport {useHotkeys} from '../../../hooks/useHotkeys';\nimport {getPromptInstall} from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\nimport * as cacheApi from '../../../util/cacheApi';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectFolder: ()=>void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    currentAccountAddress?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectFolder,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n  archiveSettings,\n  currentAccountAddress,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    signOut,\n    updateGlobal,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleClearCache = useCallback(async () => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    await cacheApi.clear(LANG_CACHE_NAME);\n    await cacheApi.clear(ASSET_CACHE_NAME);\n\n    setTimeout(()=>{\n      location.reload();\n    },500)\n  }, [openUrl]);\n\n  const handleSignOutClick = useCallback(() => {\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    setTimeout(()=>{\n      signOut({ forceInitApi: true });\n      updateGlobal({\n        authState:\"authorizationStateWaitSignPassword\"\n      })\n      },300)\n  }, [openChat,signOut]);\n\n  const handleLoginClick = useCallback(() => {\n\n    openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n    window.history.replaceState({}, '', window.location.href.split(\"#\")[0]);\n    updateGlobal({\n      authState:\"authorizationStateWaitSignPassword\"\n    })\n  }, [updateGlobal]);\n\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"folder\"\n        onClick={onSelectFolder}\n      >\n        {lang('Filters')}\n      </MenuItem>\n      {\n        currentUserId &&\n        <MenuItem\n          icon=\"settings\"\n          onClick={onSelectSettings}\n        >\n          {lang('Settings')}\n        </MenuItem>\n      }\n      {/*{*/}\n      {/*  currentUserId  &&*/}\n      {/*  <MenuItem*/}\n      {/*    icon=\"saved-messages\"*/}\n      {/*    onClick={handleSelectSaved}*/}\n      {/*  >*/}\n      {/*    {lang('SavedMessages')}*/}\n      {/*  </MenuItem>*/}\n      {/*}*/}\n      {/* {archiveSettings.isHidden && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"archive\" */}\n      {/*     onClick={onSelectArchived} */}\n      {/*   > */}\n      {/*     <span className=\"menu-item-name\">{lang('ArchivedChats')}</span> */}\n      {/*     {archivedUnreadChatsCount > 0 && ( */}\n      {/*       <div className=\"right-badge\">{archivedUnreadChatsCount}</div> */}\n      {/*     )} */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* <MenuItem */}\n      {/*   icon=\"user\" */}\n      {/*   onClick={onSelectContacts} */}\n      {/* > */}\n      {/*   {lang('Contacts')} */}\n      {/* </MenuItem> */}\n\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('NightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Animations')}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      {/* <MenuItem */}\n      {/*   icon=\"help\" */}\n      {/*   onClick={handleOpenTipsChat} */}\n      {/* > */}\n      {/*   {lang('TelegramFeatures')} */}\n      {/* </MenuItem> */}\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('ReportBug')}\n      </MenuItem>\n      <MenuItem\n        icon=\"stop\"\n        onClick={handleClearCache}\n      >\n        清除缓存\n      </MenuItem>\n      {/* {IS_BETA && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"permissions\" */}\n      {/*     onClick={handleChangelogClick} */}\n      {/*   > */}\n      {/*     Beta Changelog */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {/* {withOtherVersions && ( */}\n      {/*   <MenuItem */}\n      {/*     icon=\"char-K\" */}\n      {/*     href={WEBK_VERSION_URL} */}\n      {/*     onClick={handleSwitchToWebK} */}\n      {/*   > */}\n      {/*     Switch to K Version */}\n      {/*   </MenuItem> */}\n      {/* )} */}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n      {\n        !CLOUD_MESSAGE_ENABLE ?\n          <></>:\n          currentAccountAddress  ?\n        <MenuItem\n          icon=\"logout\"\n          onClick={handleSignOutClick}\n        >\n          {lang('SignOut')}\n        </MenuItem>:\n          <MenuItem\n            icon=\"user\"\n            onClick={handleLoginClick}\n          >\n            {lang('Login')}\n          </MenuItem>\n      }\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,currentAccountAddress\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.messages) : false,\n      currentUserId,\n      currentAccountAddress,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, memo, useEffect } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport forceReflow from '../../util/forceReflow';\nimport renderText from '../common/helpers/renderText';\n\nimport './Tab.scss';\n\ntype OwnProps = {\n  className?: string;\n  title: string;\n  isActive?: boolean;\n  isBlocked?: boolean;\n  badgeCount?: number;\n  isBadgeActive?: boolean;\n  previousActiveTab?: number;\n  onClick: (arg: number) => void;\n  clickArg: number;\n};\n\nconst classNames = {\n  active: 'Tab--active',\n  badgeActive: 'Tab__badge--active',\n};\n\nconst Tab: FC<OwnProps> = ({\n  className,\n  title,\n  isActive,\n  isBlocked,\n  badgeCount,\n  isBadgeActive,\n  previousActiveTab,\n  onClick,\n  clickArg,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const tabRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Set initial active state\n    if (isActive && previousActiveTab === undefined && tabRef.current) {\n      tabRef.current.classList.add(classNames.active);\n    }\n\n    if (!isActive || previousActiveTab === undefined) {\n      return;\n    }\n\n    const tabEl = tabRef.current!;\n    const prevTabEl = tabEl.parentElement!.children[previousActiveTab];\n    if (!prevTabEl) {\n      // The number of tabs in the parent component has decreased. It is necessary to add the active tab class name.\n      if (isActive && !tabEl.classList.contains(classNames.active)) {\n        tabEl.classList.add(classNames.active);\n      }\n      return;\n    }\n\n    const platformEl = tabEl.querySelector<HTMLElement>('.platform')!;\n    const prevPlatformEl = prevTabEl.querySelector<HTMLElement>('.platform')!;\n\n    // We move and resize the platform, so it repeats the position and size of the previous one\n    const shiftLeft = prevPlatformEl.parentElement!.offsetLeft - platformEl.parentElement!.offsetLeft;\n    const scaleFactor = prevPlatformEl.clientWidth / platformEl.clientWidth;\n\n    prevPlatformEl.classList.remove('animate');\n    platformEl.classList.remove('animate');\n    platformEl.style.transform = `translate3d(${shiftLeft}px, 0, 0) scale3d(${scaleFactor}, 1, 1)`;\n    forceReflow(platformEl);\n    platformEl.classList.add('animate');\n    platformEl.style.transform = 'none';\n\n    prevTabEl.classList.remove(classNames.active);\n    tabEl.classList.add(classNames.active);\n  }, [isActive, previousActiveTab]);\n\n  return (\n    <div\n      className={buildClassName('Tab', className)}\n      onClick={() => onClick(clickArg)}\n      ref={tabRef}\n    >\n      <span>\n        {renderText(title)}\n        {Boolean(badgeCount) && (\n          <span className={buildClassName('badge', isBadgeActive && classNames.badgeActive)}>{badgeCount}</span>\n        )}\n        {isBlocked && <i className=\"icon-lock-badge blocked\" />}\n        <i className=\"platform\" />\n      </span>\n    </div>\n  );\n};\n\nexport default memo(Tab);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport { IS_ANDROID, IS_IOS } from '../../util/environment';\nimport fastSmoothScrollHorizontal from '../../util/fastSmoothScrollHorizontal';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Tab from './Tab';\n\nimport './TabList.scss';\n\nexport type TabWithProperties = {\n  id?: number;\n  title: string;\n  badgeCount?: number;\n  isBlocked?: boolean;\n  isBadgeActive?: boolean;\n};\n\ntype OwnProps = {\n  tabs: readonly TabWithProperties[];\n  areFolders?: boolean;\n  activeTab: number;\n  big?: boolean;\n  onSwitchTab: (index: number) => void;\n};\n\nconst TAB_SCROLL_THRESHOLD_PX = 16;\n// Should match duration from `--slide-transition` CSS variable\nconst SCROLL_DURATION = IS_IOS ? 450 : IS_ANDROID ? 400 : 300;\n\nconst TabList: FC<OwnProps> = ({\n  tabs, areFolders, activeTab, big, onSwitchTab,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const previousActiveTab = usePrevious(activeTab);\n\n  useHorizontalScroll(containerRef, undefined, true);\n\n  // Scroll container to place active tab in the center\n  useEffect(() => {\n    const container = containerRef.current!;\n    const { scrollWidth, offsetWidth, scrollLeft } = container;\n    if (scrollWidth <= offsetWidth) {\n      return;\n    }\n\n    const activeTabElement = container.childNodes[activeTab] as HTMLElement | null;\n    if (!activeTabElement) {\n      return;\n    }\n\n    const { offsetLeft: activeTabOffsetLeft, offsetWidth: activeTabOffsetWidth } = activeTabElement;\n    const newLeft = activeTabOffsetLeft - (offsetWidth / 2) + (activeTabOffsetWidth / 2);\n\n    // Prevent scrolling by only a couple of pixels, which doesn't look smooth\n    if (Math.abs(newLeft - scrollLeft) < TAB_SCROLL_THRESHOLD_PX) {\n      return;\n    }\n\n    fastSmoothScrollHorizontal(container, newLeft, SCROLL_DURATION);\n  }, [activeTab]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      className={`TabList no-selection no-scrollbar ${big ? 'big' : ''}`}\n      ref={containerRef}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {tabs.map((tab, i) => (\n        <Tab\n          key={tab.id ?? tab.title}\n          // TODO Remove dependency on usage context\n          title={(!areFolders || tab.id === ALL_FOLDER_ID) ? lang(tab.title) : tab.title}\n          isActive={i === activeTab}\n          isBlocked={tab.isBlocked}\n          badgeCount={tab.badgeCount}\n          isBadgeActive={tab.isBadgeActive}\n          previousActiveTab={previousActiveTab}\n          onClick={onSwitchTab}\n          clickArg={i}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(TabList);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\nimport {getActions} from \"../../global\";\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const {loadAllChats,createChat} = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n    onNewChannel();\n    setTimeout(()=>{\n      setIsMenuOpen(false);\n    },200)\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-add\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={false}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useRef, useState,} from '../../../lib/teact/teact';\n\nimport {LeftColumnContent, SettingsScreens} from '../../../types';\nimport type {FolderEditDispatch} from '../../../hooks/reducers/useFoldersReducer';\n\nimport {IS_TOUCH_ENV} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\nimport * as cacheApi from '../../../util/cacheApi';\n\nimport './LeftMain.scss';\nimport {getActions} from '../../../global';\nimport {LANG_CACHE_NAME} from \"../../../config\";\nimport {UserIdFirstBot} from \"../../../worker/setting\";\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel,openChat,sendBotCommand,focusLastMessage } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectFolder = useCallback(() => {\n    onSettingsScreenSelect(SettingsScreens.Folders);\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectSettings = useCallback(() => {\n    openChat({ id: UserIdFirstBot, shouldReplaceHistory: true }, { forceOnHeavyAnimation: true });\n    focusLastMessage()\n    setTimeout(()=>{\n      sendBotCommand({\n        chatId:UserIdFirstBot,\n        command:\"/start\"\n      })\n    },300)\n    // onSettingsScreenSelect(SettingsScreens.Main);\n    // onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(async () => {\n    await cacheApi.clear(LANG_CACHE_NAME);\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep2);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectFolder={handleSelectFolder}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  chatCreationProgress?:ChatCreationProgress;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\nconst leftColumnContent = window.sessionStorage.getItem(\"LeftColumnContent\") || LeftColumnContent.ChatList;\nconst LeftColumn: FC<StateProps> = ({\n  chatCreationProgress,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n\n  const [content, setContent] = useState<LeftColumnContent>(Number(leftColumnContent));\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n  const setContent_ = (v:LeftColumnContent)=>{\n    setContent(v);\n    window.sessionStorage.setItem(\"LeftColumnContent\",v.toString())\n  }\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent_(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent_(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      // setContent_(LeftColumnContent.NewChannelStep1);\n      // return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.Folders:\n          setContent_(LeftColumnContent.ChatList);\n          return;\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent_(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent_(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent_(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent_(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent_(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent_(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  foldersDispatch={foldersDispatch}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onLeftColumnContentChange={setContent_}\n                  isForumPanelOpen={isForumPanelOpen}\n                  archiveSettings={archiveSettings}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent_}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent_}\n                  onSearchQuery={handleSearchQuery}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      chatCreation,\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      chatCreationProgress:chatCreation?.progress,\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n\n    // console.log(chatId,{isChatWithBot,canRestartBot},Boolean(selectIsChatBotNotStarted(global, chatId)),canStartBot)\n\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  noReplies,\n  isTranslated,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'requestUploadImage':\n        return <i className=\"icon-photo\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\nimport {TEXT_AI_THINKING} from \"../../../worker/setting\";\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { result: detectedLanguage } = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), withCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if(message.content.text?.text === TEXT_AI_THINKING){\n      return <DotAnimation className=\"status\" content={TEXT_AI_THINKING.replace(\"...\",\"\")} />\n    }\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { detectLanguage } from '../util/languageDetection';\nimport useAsync from './useAsync';\n\nexport default function useTextLanguage(text?: string) {\n  const language = useAsync(() => (text ? detectLanguage(text) : Promise.resolve(undefined)), [text], undefined);\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      {/*<span>{lang('UnreadMessages')}</span>*/}\n      <span></span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('ChatYourSelfTitle')}</h3>\n        <ul className=\"description\">\n          <li>{lang('ChatYourSelfDescription1')}</li>\n          <li>{lang('ChatYourSelfDescription2')}</li>\n          <li>{lang('ChatYourSelfDescription3')}</li>\n          <li>{lang('ChatYourSelfDescription1')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset, selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,focusMessage\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n\n    if (!isShown) {\n      return;\n    }\n    if (messageListType !== 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport {resizeImage, scaleImage} from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let thumbBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n    if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n\n  }\n\n  return {\n    blobUrl,\n    thumbBlobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport type { OwnProps as ButtonProps } from './Button';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate(e);\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate(e);\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    isMouseInside.current = true;\n    onActivate(e);\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      // onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      // onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n  canSendVideos = false;\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n      true\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false),true);\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {/*{canAttachPolls && (*/}\n        {/*  <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>*/}\n        {/*)}*/}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {ApiDraft, GlobalState, MessageListType, TabState,} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiAttachMenuPeerType,\n  ApiBotCommand,\n  ApiBotInlineMediaResult,\n  ApiBotInlineResult,\n  ApiBotMenuButton,\n  ApiChat,\n  ApiChatMember,\n  ApiFormattedText,\n  ApiMessage,\n  ApiNewPoll,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type {InlineBotSettings, ISettings} from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  EDITABLE_INPUT_MODAL_ID,\n  MAX_UPLOAD_FILEPART_SIZE,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport {IS_IOS, IS_VOICE_RECORDING_SUPPORTED} from '../../../util/environment';\nimport {MEMO_EMPTY_ARRAY} from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatBot,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport {formatMediaDuration, formatVoiceRecordDuration} from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, {prepareAttachmentsToSend} from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport {insertHtmlInSelection} from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport {isSelectionInsideInput} from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport {getServerTime} from '../../../util/serverTime';\nimport {selectCurrentLimit} from '../../../global/selectors/limits';\nimport {buildCustomEmojiHtml} from './helpers/customEmoji';\nimport {processMessageInputForCustomEmoji} from '../../../util/customEmojiManager';\nimport {getTextWithEntitiesAsHtml} from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {useStateRef} from '../../../hooks/useStateRef';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, {DropAreaState} from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n  const [speechRecognizing, setSpeechRecognizing] = useState(false);\n\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    // if(speechRecognizing){\n    //   return MainButtonState.Send;\n    // }\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, speechRecognizing,editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n    // if(speechRecognizing){\n    //   recognition.stop();\n    //   setSpeechRecognizing(false);\n    //   return\n    // }\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          // recognition.start().then((res:string)=>{\n          //   setHtml(res);\n          // }).catch((e)=>{\n          //   console.error(e)\n          //   // setSpeechRecognizing(false);\n          // });\n          // setSpeechRecognizing(true);\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n  const [passwordOpen,setPasswordOpen] = useState(true);\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              (activeVoiceRecording )&& windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {(activeVoiceRecording ) && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {(activeVoiceRecording) && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={ ()=>{\n            // recognition.stop();\n            // setSpeechRecognizing(false)\n            stopRecordingVoice()\n          } }\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState,\"mainSendBtn\", !isReady && 'not-ready', ( activeVoiceRecording) && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport {getActions, getGlobal, withGlobal} from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\nimport Account from \"../../worker/share/Account\";\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {/* {currentInviteInfo && !currentInviteInfo.isRevoked && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('Edit')} */}\n              {/*     onClick={handleEditInviteClick} */}\n              {/*   > */}\n              {/*     <i className=\"icon-edit\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {/* {canAddContact && ( */}\n              {/*   <Button */}\n              {/*     round */}\n              {/*     color=\"translucent\" */}\n              {/*     size=\"smaller\" */}\n              {/*     ariaLabel={lang('AddContact')} */}\n              {/*     onClick={handleAddContact} */}\n              {/*   > */}\n              {/*     <i className=\"icon-add-user\" /> */}\n              {/*   </Button> */}\n              {/* )} */}\n               {canManage && !isInsideTopic && (\n                 <Button\n                   round\n                   color=\"translucent\"\n                   size=\"smaller\"\n                   ariaLabel={lang('Edit')}\n                   onClick={handleToggleManagement}\n                 >\n                   <i className=\"icon-edit\" />\n                 </Button>\n               )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          {/* <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} /> */}\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport Modal from './Modal';\nimport PasswordMonkey from \"../common/PasswordMonkey\";\nimport PasswordForm from \"../common/PasswordForm\";\nimport {passwordCheck} from \"../../worker/share/utils/helpers\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nexport type PasswordHelperType = undefined | \"showMnemonic\" | \"messageEncryptPassword\"\n\nconst PasswordModal: FC<OwnProps> = ({}: OwnProps) => {\n\n  const [open, setOpen] = useState<boolean>(false);\n  const [showHitInput, setShowHitInput] = useState<boolean>(false);\n  const [passwordHelper, setPasswordHelper] = useState<PasswordHelperType>(undefined);\n  const [validationError, setValidationError] = useState<string>('');\n  const [hint, setHint] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const lang = useLang();\n\n  const handleSubmit = useCallback((password) => {\n    if (!passwordCheck(password)) {\n      setValidationError(lang(\"PasswordTipsCheck\"))\n      return\n    }\n    if (onConfirm) {\n      onConfirm({password, hint});\n      setOpen(false)\n    }\n  }, [hint]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        setOpen(true);\n        // @ts-ignore\n        onConfirm = e.detail.callback;\n        // @ts-ignore\n        setPasswordHelper(e.detail.passwordHelper)\n        // @ts-ignore\n        setHint(e.detail.hint)\n        // @ts-ignore\n        setShowHitInput(!e.detail.hideHitInput);\n      }\n    }\n    document.addEventListener('password', evt);\n    return () => {\n      document.removeEventListener('password', evt);\n    }\n  }, [setHint, setShowHitInput, open])\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  return (\n    <Modal\n      hasCloseButton\n      isOpen={open}\n      onClose={() => {\n        if (onConfirm) {\n          onConfirm({password: \"\", hint: \"\"});\n        }\n        setOpen(false)\n      }}\n      title=\"Password\"\n      className=\"\"\n    >\n      <div className=\"settings-content password-form custom-scroll background\">\n        <div className=\"settings-content-header no-border\">\n          <PasswordMonkey isBig isPasswordVisible={shouldShowPassword}/>\n        </div>\n        <div className=\"pt-0 pb-0 mb-2 background\">\n          {\n            showHitInput &&\n            <InputText\n              id=\"pwd-hint\"\n              type={\"text\"}\n              label={lang(\"PasswordTipsLocalHint\")}\n              onChange={(e) => {\n                setHint(e.target.value)\n              }}\n              value={hint}\n              autoComplete=\"given-name\"\n            />\n          }\n          <PasswordForm\n            error={validationError}\n            hint={(!showHitInput && hint) ? hint : lang(\"PasswordTipsLocalPlaceholder\")}\n            shouldDisablePasswordManager={true}\n            submitLabel={lang('Next')}\n            clearError={handleClearError}\n            isLoading={false}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={true}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n        {\n          passwordHelper === \"messageEncryptPassword\" &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"PasswordTipsLocalStorage\")}</li>\n              <li>{lang(\"PasswordTipsLocalStorage1\")}</li>\n            </ul>\n          </div>\n        }\n        {\n          passwordHelper === \"showMnemonic\" &&\n          <div className=\"help_text pt-2 pb-4 pr-2\">\n            <ul>\n              <li>{lang(\"密码不会存储服务器,跟账户助记词直接相关，请牢记密码和妥善保管助记词\")}</li>\n            </ul>\n          </div>\n        }\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PasswordModal);\n","import type {FC} from '../../lib/teact/teact';\nimport React, {useCallback, useEffect, useRef,} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useAsync from '../../hooks/useAsync';\n\nimport Loading from '../ui/Loading';\n\nimport blankUrl from '../../assets/blank.png';\nimport Button from \"../ui/Button\";\n\ntype OwnProps ={ content?:string,tips?:string};\n\nconst DATA_PREFIX = 'wai://';\nconst QR_SIZE = 280;\n\nlet qrCodeStylingPromise: Promise<typeof import('qr-code-styling')>;\n\nfunction ensureQrCodeStyling() {\n  if (!qrCodeStylingPromise) {\n    qrCodeStylingPromise = import('qr-code-styling');\n  }\n  return qrCodeStylingPromise;\n}\n\nconst QrCode: FC<OwnProps> = ({content,tips}) => {\n\n  // @ts-ignore\n  const qrCodeRef = useRef<HTMLDivElement>(null);\n  const [isQrMounted, markQrMounted, unmarkQrMounted] = useFlag();\n\n  const { result: qrCode } = useAsync(async () => {\n    const QrCodeStyling = (await ensureQrCodeStyling()).default;\n    return new QrCodeStyling({\n      width: QR_SIZE,\n      height: QR_SIZE,\n      // image: blankUrl,\n      margin: 10,\n      type: 'svg',\n      dotsOptions: {\n        type: 'rounded',\n      },\n      cornersSquareOptions: {\n        type: 'extra-rounded',\n      },\n      imageOptions: {\n        imageSize: 0.4,\n        margin: 8,\n      },\n      qrOptions: {\n        errorCorrectionLevel: 'M',\n      },\n    });\n  }, []);\n\n  const transitionClassNames = useMediaTransition(isQrMounted);\n\n  useEffect(() => {\n    if (!qrCode) {\n      return () => {\n        unmarkQrMounted();\n      };\n    }\n\n    const container = qrCodeRef.current!;\n    const data = `${DATA_PREFIX}${content}`;\n    qrCode.update({\n      data,\n    });\n\n    if (!isQrMounted) {\n      qrCode.append(container);\n      markQrMounted();\n    }\n    return undefined;\n  }, [content,isQrMounted, markQrMounted, unmarkQrMounted, qrCode]);\n  const onDownload = useCallback(()=>{\n    if(qrCode){\n      qrCode.download()\n    }\n  },[qrCode])\n  return (\n    <div id=\"auth-qr-form\" className=\"custom-scroll\">\n      <div className=\"qr-outer\">\n        <div\n          className={buildClassName('qr-inner', transitionClassNames)}\n          key=\"qr-inner\"\n        >\n          <div\n            key=\"qr-container\"\n            className=\"qr-container\"\n            ref={qrCodeRef}\n            style={`width: ${QR_SIZE}px; height: ${QR_SIZE}px`}\n          />\n        </div>\n        {!isQrMounted && <div className=\"qr-loading\"><Loading /></div>}\n      </div>\n      <div className={'pt-2'} style={\"text-align:center\"}><code>{tips}</code></div>\n\n      <Button isText disabled={!isQrMounted} onClick={onDownload}>下载</Button>\n    </div>\n  );\n};\n\nexport default QrCode;\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport Modal from './Modal';\nimport {getActions, withGlobal} from \"../../global\";\nimport {getPasswordFromEvent} from \"../../worker/share/utils/password\";\nimport Account from \"../../worker/share/Account\";\nimport Mnemonic from \"../../lib/ptp/wallet/Mnemonic\";\nimport {aesEncrypt} from \"../../util/passcode\";\nimport {hashSha256} from \"../../worker/share/utils/helpers\";\nimport {PbQrCode} from \"../../lib/ptp/protobuf/PTPCommon\";\nimport {QrCodeType} from \"../../lib/ptp/protobuf/PTPCommon/types\";\nimport QrCode from \"../common/QrCode\";\n\ntype OwnProps = {};\ntype StateProps = {\n  showMnemonicModal?:boolean\n};\n\nconst MnemonicModal: FC<OwnProps & StateProps> = ({showMnemonicModal}) => {\n  const {updateGlobal,showNotification} = getActions();\n  const [mnemonic,setMnemonic] = useState(\"\");\n  const [mnemonicEncrypt,setMnemonicEncrypt] = useState(\"\");\n\n  const onCloseModal = useCallback(async ()=>{\n    setMnemonic(\"\")\n    setMnemonicEncrypt(\"\")\n    updateGlobal({showMnemonicModal:undefined})\n  },[])\n\n  useEffect(()=>{\n    const init = async ()=>{\n      const {password} = await getPasswordFromEvent(undefined,true,'showMnemonic')\n      if(!password){\n        updateGlobal({showMnemonicModal:undefined})\n        return\n      }\n      const account = Account.getCurrentAccount();\n      if(!account?.getSession()){\n        updateGlobal({showMnemonicModal:undefined})\n        return showNotification({message:\"没有登录\"})\n      }\n      const res = await account?.verifySession(account?.getSession(),password);\n      if(!res){\n        updateGlobal({showMnemonicModal:undefined})\n        return showNotification({message:\"密码不正确\"})\n      }\n      const entropy = await Account.getCurrentAccount()!.getEntropy();\n      const m = Mnemonic.fromEntropy(entropy);\n      const words = m.getWords();\n      const e = await aesEncrypt(words,Buffer.from(hashSha256(password),'hex'))\n      setMnemonicEncrypt(Buffer.from(new PbQrCode({\n        type:QrCodeType.QrCodeType_MNEMONIC,\n        data:Buffer.from(e)\n      }).pack().getPbData()).toString(\"hex\"))\n      setMnemonic(words);\n    }\n    if(showMnemonicModal){\n      init();\n    }\n\n  },[showMnemonicModal])\n\n  if(!mnemonic){\n    return null\n  }\n  return (\n    <Modal title={\"助记词\"} isOpen={!!showMnemonicModal} hasCloseButton={true} onClose={onCloseModal}>\n      <QrCode content={mnemonicEncrypt} tips={mnemonic} />\n    </Modal>\n  )\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global ): StateProps => {\n    const {\n      showMnemonicModal,\n    } = global;\n    return {\n      showMnemonicModal,\n    };\n  },\n)(MnemonicModal));\n\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from \"../../global\";\nimport ChatOrUserPicker from \"../common/ChatOrUserPicker\";\nimport MsgCommandSetting from '../../worker/msg/MsgCommandSetting';\n\ntype OwnProps = {};\ntype StateProps = {\n  botIds:string[],\n  showPickBotModal?:boolean\n};\n\nconst PickBotModal: FC<OwnProps & StateProps> = ({showPickBotModal,botIds}) => {\n  const [search,setSearch] = useState(\"\");\n  const {updateGlobal} = getActions();\n\n  const handleSelect = useCallback((userId: string) => {\n    MsgCommandSetting.onSelectSyncBot(userId)\n    updateGlobal({\n      showPickBotModal:false\n    })\n  }, []);\n\n  const handleClose = useCallback(() => {\n    updateGlobal({\n      showPickBotModal:false\n    })\n  }, []);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={!!showPickBotModal}\n      chatOrUserIds={botIds}\n      searchPlaceholder={\"请选择要同步的机器人\"}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={()=>{}}\n      onSelectChatOrUser={handleSelect}\n      onClose={handleClose}\n    />\n  )\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global ): StateProps => {\n    const {\n      chatIdsDeleted,\n      showPickBotModal,\n      users:{\n        byId:users\n      }\n    } = global;\n    const botIds = Object.keys(users).filter(id=>id !== \"1\").filter(id=>!chatIdsDeleted.includes(id))\n    return {\n      botIds,\n      showPickBotModal,\n    };\n  },\n)(PickBotModal));\n\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\n\nimport Modal from './Modal';\nimport {ShowModalFromEventPayload} from \"../../worker/share/utils/modal\";\nimport Button from \"./Button\";\nimport TextArea from \"./TextArea\";\nimport {ChangeEvent} from \"react\";\nimport InputText from \"./InputText\";\n\ntype OwnProps = {};\n\nlet onConfirm: Function | null = null\n\nconst GlobalModal: FC<OwnProps> = ({}: OwnProps) => {\n  const [payload, setPayload] = useState<ShowModalFromEventPayload|undefined>(undefined);\n  const [open, setOpen] = useState<boolean>(false);\n  const [value, setValue] = useState<string>(\"\");\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setValue(e.target.value);\n  }, []);\n\n  const handleSubmit = useCallback((password) => {\n    if (onConfirm) {\n      onConfirm({value});\n      setOpen(false)\n      setValue(\"\")\n    }\n  }, [value]);\n\n  useEffect(() => {\n    const evt = (e: Event) => {\n      if (!open) {\n        //@ts-ignore\n        const payload = e.detail.payload;\n        setPayload({\n          type:\"singleInput\",\n          title:\"请输入\",\n          ...payload,\n        })\n        //@ts-ignore\n        onConfirm = e.detail.callback;\n        setOpen(true);\n        setValue(payload.initVal|| \"\")\n      }\n    }\n    document.addEventListener('modal', evt);\n    return () => {\n      document.removeEventListener('modal', evt);\n    }\n  }, [open])\n\n  return (\n    <Modal\n      hasCloseButton\n      isOpen={open}\n      onClose={() => {\n        // if (onConfirm) {\n        //   onConfirm({value: \"\"});\n        // }\n        setValue(\"\")\n        setOpen(false)\n      }}\n      title={payload && payload.title}\n      className=\"\"\n    >\n      {\n        payload && (payload.type === 'multipleInput' || payload.type === 'singleInput' )&&\n        <div className=\"settings-content password-form custom-scroll background\">\n          <div className=\"pt-4 pb-4 mb-2 background\">\n            {\n              payload.type !== 'multipleInput' ?\n                <InputText\n                  type={payload.inputType || \"text\"}\n                  label={payload.placeholder||\"\"}\n                  step={payload.step}\n                  min={payload.min}\n                  max={payload.max}\n                  onChange={(e) => {\n                    setValue(e.target.value)\n                  }}\n                  value={value}\n                  autoComplete=\"given-name\"\n                />:\n                <TextArea\n                  value={value}\n                  onChange={handleChange}\n                  label={payload.placeholder||\"\"}\n                  disabled={false}\n                />\n            }\n          </div>\n          <Button type=\"button\" onClick={handleSubmit} ripple={true} isLoading={false} disabled={false}>\n            下一步\n          </Button>\n        </div>\n      }\n\n    </Modal>\n  );\n};\n\nexport default memo(GlobalModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\nimport PasswordModal from \"../ui/PasswordModal\";\nimport Modal from \"../ui/Modal\";\nimport QrCode from \"../common/QrCode\";\nimport {UserIdFirstBot} from \"../../worker/setting\";\nimport ChatOrUserPicker from \"../common/ChatOrUserPicker\";\nimport MnemonicModal from \"../ui/MnemonicModal\";\nimport PickBotModal from \"../ui/PickBotModal\";\nimport GlobalModal from \"../ui/GlobalModal\";\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n      <PasswordModal/>\n      <GlobalModal/>\n      <MnemonicModal />\n      <PickBotModal />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../global';\n\nimport type {GlobalState} from '../../global/types';\n\nimport {LOCAL_TGS_URLS} from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport {decryptSession} from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return <div className={styles.help}></div>\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","utterance","SpeechSynthesisUtterance","selectedText","getSelection","toString","document","selection","createRange","speechSynthesis","speak","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","content","saveDraft","draft","entities","shouldForce","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","length","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","toggleMessageSelectAll","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","async","msgId","messages1","i","time","currentTs","MsgCommandSetting","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","currentChat","getChatTitle","topics","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","previousGlobal","parse","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","LoadMoreDirection","isBudgetPreload","isRestricted","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","offsetId","isOutlying","historyIds","newViewportIds","areSomeLocal","areAllLocal","getViewportSlice","safeReplaceViewportIds","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","MESSAGE_LIST_SLICE","replyOriginForId","threadUpdate","callApi","MESSAGE_DELETED","updateChatMessage","addUsers","buildCollectionByKey","users","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","msgClientState","omit","attachments","a","shouldSendAsSpoiler","password","hint","getPasswordFromEvent","attachment","blobUrl","mimeType","buf","blobToBuffer","fetchBlob","cipher","Account","encryptData","bb","popByteBuffer","hintLen","typeLen","writeInt16","writeBytes","Buffer","from","res","toUint8Array","blob","Blob","encryptUrl","URL","createObjectURL","size","quality","thumbBlobUrl","resizeImage","entity","substr","replaceSubstring","repeat","scheduledAt","replyingToMessage","replyingToTopId","selectThreadTopMessageId","replyToTopMessageId","params","replyingTo","noWebPage","selectNoWebPage","sendAs","selectUser","clearWebPagePreview","isSingle","isGrouped","shouldGroupMessages","restParams","sendMessage","commonParams","byType","index","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","progressCallback","get","getMessageOriginalId","cancelApiProgress","user","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","byId","editingId","selectEditingId","selectEditingScheduledId","UserIdFirstBot","UserIdChatGpt","activeChat","chatIdsDeleted","messagesDeleted","leaveChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","to","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","b","selectSendAs","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadViewportMessagesCache","addOffset","flag","threadsById","lastViewportIds","updateListedIds","isUp","listedIds1","ids1","isLocalMessageId","repliesThreadInfos","log","localMessages","isDeleted","allMessages","concat","addChatMessagesById","updateOutlyingIds","addChats","updateThreadInfos","areSortedArraysIntersecting","sourceIds","findClosestIndex","indexForDirection","progress","localMessage","messageLocalId","has","set","fileUploads","byMessageLocalId","IS_IOS","rafPromise","botInfo","fullInfo","MsgDispatcher","process","aiHistoryList","MsgCommandChatGpt","delete","shouldSendAsFile","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","seenByUserIds","sendAsId","sendAsChat","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","totalCount","nextOffsetId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","chatListIdsActive","listIds","active","messagesList","chatIds","userIdList","firstName","toLowerCase","lastName","bio","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","userIds","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","imgToBlob","thumbnailUrl","thumbnail","blobToDataUri","updateUsers","getUserFirstOrLastName","releaseStatusTimeout","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","lastSyncTime","initFolderManager","addCallback","connectionState","authState","getActions","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","loadProfilePhotos","profileId","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","localUsers","globalUsers","phoneNumber","phone","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openUrl","MsgCommand","openSystemFilesDialog","Array","target","openPollModal","receiptMessageId","getReceipt","openInvoice","isGame","openGame","alert","isError","answerCallbackButton","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","currentChatId","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","currentPassword","onSuccess","isSuccess","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","updateStatistics","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","loadTopicById","loadTopics","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","messageNew","thread","currentThreadId","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","historyList","aiReplyHistory","role","AiReplyHistoryRole","userBotUpdate","chatGptConfig","api_key","localStorage","setItem","updateGlobal","lastScrollOffset","listIds_active","forceOnHeavyAnimation","chat_listIds_active","chat1","replaceChats","includedChatIds","user1","replaceUsers","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","CustomEmojiEffect","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","currentAccountAddress","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","LeftMainHeader","shouldHideSearch","contactsFilter","onSearchQuery","onSelectFolder","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","signOut","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleClearCache","cacheApi","clear","LANG_CACHE_NAME","ASSET_CACHE_NAME","reload","handleSignOutClick","history","replaceState","forceInitApi","handleLoginClick","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","CLOUD_MESSAGE_ENABLE","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","classNames","Tab","badgeCount","isBadgeActive","previousActiveTab","tabRef","tabEl","prevTabEl","parentElement","children","contains","platformEl","prevPlatformEl","shiftLeft","offsetLeft","scaleFactor","clientWidth","remove","transform","forceReflow","renderText","SCROLL_DURATION","TabList","tabs","areFolders","activeTab","big","onSwitchTab","containerRef","usePrevious","useHorizontalScroll","container","scrollWidth","offsetWidth","scrollLeft","activeTabElement","childNodes","activeTabOffsetLeft","activeTabOffsetWidth","newLeft","abs","fastSmoothScrollHorizontal","tab","_tab$id","ALL_FOLDER_ID","orderedFolderIds","archived","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","hasArchivedChats","maxFolders","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","chatsCount","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","renderCount","LeftSearch","Loading","ContactList","NewChatButton","isShown","onNewPrivateChat","onNewChannel","onNewGroup","createChat","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectFolder","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","leftColumnContent","sessionStorage","getItem","nextSettingsScreen","isChatOpen","chatCreationProgress","isFirstChatFolderActive","LeftColumn","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","setContent_","v","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","svg","div","defs","innerHTML","HeaderPinnedMessage","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","closeAudioPlayer","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ChatReportPanel","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioChatId","audioMessageId","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","originChannelId","firstPinnedMessage","MiddleHeader","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","isOwn","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","createElement","font","whiteSpace","opacity","appendChild","textContent","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","Deferred","createConnector","Worker","ContextMenuContainer","ActionMessageSuggestedAvatar","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","ActionMessage","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","EmbeddedMessage","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","MessageMeta","outgoingStatus","signature","withReactionOffset","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","AnimatedCounter","formatTime","MessageOutgoingStatus","Sticker","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","AnimatedEmoji","forceLoadPreview","forcePreview","LIKE_STICKER_ID","customEmojiId","AnimatedCustomEmoji","getCustomEmojiSize","isBig","Video","canAutoLoad","canAutoPlay","uploadProgress","isDownloading","onCancelUpload","videoRef","getMessageVideo","getMessageWebPageVideo","localBlobUrl","isSpoilerShown","hideSpoiler","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","fullMediaData","isPlayerReady","markPlayerReady","getMessageMediaThumbDataUri","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","useMediaTransition","noThumb","thumbRef","useBlurredMediaThumbRef","thumbClassNames","isInline","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","isOwnMessage","isWebPageVideo","calculateVideoDimensions","cancelMessageMediaDownload","isAllowed","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","withAnimation","ProgressSpinner","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","Poll","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","WebPage","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Invoice","shouldAffectAppendix","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","Skeleton","forceAspectRatio","InvoiceMediaPreview","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","scale","SVG_PIN","__html","Location","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","Game","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","Album","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","RoundVideo","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","InlineButtons","renderIcon","CommentButton","openComments","recentReplierIds","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","ReactionAnimatedEmoji","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","ReactionButton","withRecentReactors","recentReactors","recentReaction","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","threshold","promise","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","getMinMediaWidth","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","TEXT_AI_THINKING","DotAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","SponsoredMessage","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","MessageListContent","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","MessageList","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","areMessagesLoaded","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","FloatingActionButtons","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","quick","img","preloadImage","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","openTimeout","isFirstTimeActivation","ResponsiveHoverButton","onActivate","buttonProps","_extends","COLOR_REPLACE_PATTERN","AttachBotIcon","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","AttachBotItem","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","AttachMenu","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","BotKeyboardMenu","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","ComposerEmbeddedMessage","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","WebPagePreview","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","BotMenuButton","textRef","textEl","composerEl","removeProperty","MainButtonState","_ref","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","editingDraft","selectEditingScheduledDraft","selectEditingDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","Composer","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","speechRecognizing","setSpeechRecognizing","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","passwordOpen","setPasswordOpen","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","CustomSendMenu","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","MiddleColumn","unpinAllMessages","loadUser","loadChatSettings","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","_useCurrentOrPrev","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleDeleteInviteClick","ManagementScreens","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewerAsync","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","GameModal","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","NotificationsAsync","Notifications","DialogsAsync","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","MessageListHistoryHandler","closeChat","MessageHistoryRecord","createLocationHash","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","fill","prevConfettiTime","hideTimeout","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","PasswordModal","setOpen","showHitInput","setShowHitInput","passwordHelper","setPasswordHelper","validationError","setValidationError","setHint","shouldShowPassword","setShouldShowPassword","handleSubmit","passwordCheck","evt","detail","hideHitInput","handleClearError","PasswordMonkey","isPasswordVisible","InputText","PasswordForm","shouldDisablePasswordManager","submitLabel","clearError","shouldResetValue","onChangePasswordVisibility","onSubmit","qrCodeStylingPromise","QrCode","tips","qrCodeRef","isQrMounted","markQrMounted","unmarkQrMounted","qrCode","QrCodeStyling","dotsOptions","cornersSquareOptions","imageOptions","imageSize","qrOptions","errorCorrectionLevel","append","onDownload","showMnemonicModal","MnemonicModal","mnemonic","setMnemonic","mnemonicEncrypt","setMnemonicEncrypt","onCloseModal","account","getSession","verifySession","entropy","getEntropy","words","Mnemonic","getWords","aesEncrypt","hashSha256","PbQrCode","QrCodeType","pack","getPbData","showPickBotModal","botIds","PickBotModal","search","setSearch","handleSelect","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","onSearchChange","onSelectChatOrUser","GlobalModal","setPayload","initVal","inputType","TextArea","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","UnreadCount","passcodeSettings","LockScreen","isLocked","resetInvalidUnlockAttempts","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleSignOutMessage","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","shouldShowSubmit","noRipple","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}