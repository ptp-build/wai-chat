{"version":3,"file":"3779.403fb2940a17d0bc2310.js","mappings":"svDAiBA,MAAMA,EAAqB,IAgM3B,SAASC,EAAYC,EAAsDC,GACzE,MAAMC,EAAQC,SAASC,cAAc,OACrCF,EAAMG,UAAUC,IAAI,SAEpB,MAAMC,EAAM,IAAIC,MAchB,GAbAD,EAAIE,WAAY,EAChBF,EAAIG,cAAgBC,EAAAA,EAEE,iBAAXX,EACTO,EAAIK,IAAMZ,EACDA,aAAkBa,iBAC3BN,EAAIK,IAAMZ,EAAOc,OAEjBP,EAAIK,IAAMZ,EAAOY,IAGnBV,EAAMa,YAAYR,GAEdN,IAAWe,EAAAA,GAAAA,eAAmCf,IAAWe,EAAAA,GAAAA,eAAkC,CAC7Fd,EAAMG,UAAUC,IAAI,eAChBL,IAAWe,EAAAA,GAAAA,gBACbd,EAAMG,UAAUC,IAAI,QAEtB,MAAMW,EAAcd,SAASe,cAC3BjB,IAAWe,EAAAA,GAAAA,cACP,kCACA,gCAEFC,GACFf,EAAMa,YAAYE,EAAYE,WAAU,GAE5C,CAEA,OAAOjB,CACT,CAwBA,SAASkB,EAA2BC,EAAwBC,GAC1D,MAAMC,EAAqBpB,SAASe,cAA8B,6CAClE,IAAIM,EAAeH,EAAUI,UAAYH,EAAQI,QAAwB,4BAA6BD,UAKtG,OAJIJ,EAAUM,GAAGC,SAAS,kBACxBJ,GAAgBH,EAAUQ,cAAeJ,UAAYJ,EAAUK,QAAwB,YAAaD,WAG/FD,EAAeD,EAAmBO,WACpCN,EAAeF,EAAQS,aAAeR,EAAmBO,UAAYP,EAAmBQ,YAC/F,CAYA,SAASC,EAAYC,EAAsBC,GACzCC,OAAOC,OAAOH,EAAQI,MAAOH,EAC/B,CAEA,SAASI,EAASrC,EAA2BsC,GAC3C,IAAIC,EACAC,EAEJ,OAAQxC,GACN,KAAKe,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACHwB,EAAqB,2DAAyDE,EAAAA,EAAAA,IAAiBH,EAASZ,MACxGc,EAAgB,cAChB,MAEF,KAAKzB,EAAAA,GAAAA,YACHwB,EAAqB,iBAAeE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC9Dc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,aACHwB,EAAqB,iBAAeE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC9Dc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,mBACHwB,EAAoB,6DACpBC,EAAgB,gBAChB,MAEF,KAAKzB,EAAAA,GAAAA,eACHwB,EAAoB,kEACpBC,EAAgB,gBAChB,MAEF,KAAKzB,EAAAA,GAAAA,cACHwB,EAAoB,qEACpBC,EAAgB,gBAChB,MAEF,KAAKzB,EAAAA,GAAAA,gBACHwB,EAAqB,+CAA6CE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC5Fc,EAAgB,cAChB,MAEF,KAAKzB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,OACL,QACEwB,EAAqB,+CAA6CE,EAAAA,EAAAA,IAAiBH,EAASZ,MAC5Fc,EAAiB,GAAEE,EAAAA,oBAAyCA,EAAAA,iBAGhE,MAAMtB,EAAYlB,SAASe,cAA2BsB,GAChDI,EAAWvB,GAAaA,EAAUwB,iBAAsDJ,GAE9F,MAAO,CACLpB,YACAyB,QAASF,IAAW,GAExB,CAEA,SAASG,EAAW7C,EAAuBD,GACzC,OAAQA,GACN,KAAKe,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,OACL,KAAKA,EAAAA,GAAAA,gBACHd,EAAMG,UAAUC,IAAI,mBACpB,MAEF,KAAKU,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACFd,EAAM8C,WAA2BX,MAAMY,UAAY,QACpD,MAEF,KAAKjC,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACHd,EAAMG,UAAUC,IAAI,UAChBL,IAAWe,EAAAA,GAAAA,iBACbd,EAAMG,UAAUC,IAAI,qBAI5B,C,yDCnSA,SAAS4C,EAAuBC,GAE9B,GAAIA,EAAMC,gCAA6E,mBAApCD,EAAME,0BAEvD,OAAOF,EAAME,0BAA0BC,KAAKH,EAGhD,CAeO,SAASI,IACd,GAAIpD,SAASqD,wBACX,IACErD,SAASsD,sBACX,CAAE,MAAOC,GACHC,EAAAA,KAEFC,QAAQC,IAAI,8BAA+BH,EAE/C,CAEJ,C,0FC7GA,MAAMI,EAAS,EACTC,EAAa,EACbC,EAAiB,IAEjBC,EAAQ,IAAIC,ICHZJ,EAAS,EACTC,EAAa,E,eC+BZ,MAAMI,EAAgBA,EAC3B5B,UACA6B,UAAU,EACVC,cACApE,SACAqE,YAEA,MAAMC,EAAQhC,GAAUiC,EAAAA,EAAAA,IAAgBjC,QAAWkC,EAC7CC,EAAcnC,GAAUoC,EAAAA,EAAAA,IAAsBpC,QAAWkC,EACzDtB,EAAQZ,GAAUqC,EAAAA,EAAAA,IAAgBrC,QAAWkC,EAC7CI,EAAetC,GAAUuC,EAAAA,EAAAA,IAAuBvC,QAAWkC,EAC3DM,EAAexC,GAAUyC,EAAAA,EAAAA,IAAuBzC,QAAWkC,EAC3DQ,IAAkB1C,IAAU2C,EAAAA,EAAAA,IAAuB3C,GACnD4C,IAAkB5C,IAAU6C,EAAAA,EAAAA,IAAuB7C,GACnD8C,EAAY9C,GAAU+C,EAAAA,EAAAA,IAAmB/C,QAAWkC,EACpDc,EAAclB,GAAamB,SAASpB,GACpCqB,EAAgBC,QAAQH,GAAaI,SAAWjB,GAAaiB,SAC7DA,EAAUD,QAAQvC,GAAS4B,GAAgBI,GAC3CS,EAAUF,SAASC,IAAYpB,GAASM,GAAgBI,GAAmBP,KAC3E,MAAEmB,GAAU1C,GAAS4B,GAAgB,CAAC,EACtCe,EAAoB7F,IAAWe,EAAAA,GAAAA,YAC/B+E,EAAe9F,IAAWe,EAAAA,GAAAA,aAE1BgF,GAAeC,EAAAA,EAAAA,KAAQ,IAAOC,GAC9B7B,EACEkB,EACEA,EAAYI,SAAWO,GAClBC,EAAAA,EAAAA,IAAwBZ,GACV,IAAZnB,GAEFgC,EAAAA,EAAAA,IAAkB/B,EAAa6B,EAAS,MAAQ,UAE/C,QAAOX,EAAY5D,aAGtByE,EAAAA,EAAAA,IAAkB/B,EAAa6B,EAAS,MAAQ,UAGvDxB,GAAee,GAAiBS,EAC1B,cAAaxB,EAAY/C,YAE5BY,IAAW8D,EAAAA,EAAAA,IAAoB9D,EAAS2D,EAAS,OAAS,YAChE,CAAC7B,EAAaK,EAAae,EAAelD,EAASgD,EAAanB,IAE7DkC,GAAmBC,EAAAA,EAAAA,GACvBhE,IAEIuD,GAAqBC,GAAgBd,GAAmBE,KACzDkB,EAAAA,EAAAA,IAAoB9D,EAAS,kBAChCkC,EACA+B,EAAAA,GAAAA,aACA/B,EACAH,GAEImC,EAAmBT,IACzB,IAAIU,GAAiBH,EAAAA,EAAAA,GACnBE,OACAhC,EACA+B,EAAAA,GAAAA,aACA/B,EACAH,GAGCmC,GAAoBE,EAAAA,EAAUF,KAC/BC,EAAiBC,EAAAA,EAAUF,IAG7B,IACEG,UAAWC,EAAgB,aAC3BC,IACEC,EAAAA,EAAAA,GACFf,GAAa,QACbvB,EACAlC,IAAWyE,EAAAA,EAAAA,IAAsBzE,EAAS,aAC1CkC,EACAH,GAGC0B,GAAa,IAASW,EAAAA,EAAUX,GAAa,MAC9Ca,EAAmBF,EAAAA,EAAUX,GAAa,KAG5C,MAAMiB,EAAgB1C,GAASpB,GAAUoB,GAASpB,GAAQ+D,aAAUzC,EACpE,IAAI0C,GAAkBxB,IAAYsB,GAAgBJ,IAAsBH,GAAkBJ,EAC1F,MAAMc,EDjHO,SAAqBC,GAClC,MAAMC,GAAaC,EAAAA,EAAAA,MAEnB,IAAIC,GAAY,GAEhBC,EAAAA,EAAAA,IAAc,KAMZ,GAJAD,GAAY,EAEZF,EAAWI,aAAUjD,GAEhB4C,EACH,OAGF,MAAM9G,EAAM,IAAIC,MAEhB,GADAD,EAAIK,IAAMyG,GACL9G,EAAIoH,MACP,OAGF,MAAMC,GAASC,EAAAA,EAAAA,IAAYtH,IAC3BuH,EAAAA,EAAAA,GAASF,EAAOG,WAAW,MAAO,EAAG,EAAGH,EAAOD,MAAOC,EAAOI,OAAQlE,EAAQC,GAE7EuD,EAAWI,QAAUE,EAAOK,WAAW,GACtC,CAACZ,IAIJ,MAAMa,ED3BO,SAAiBb,EAAkBc,GAAa,EAAO7D,GACpE,MAAMgD,GAAaC,EAAAA,EAAAA,IAA2BF,EAAUpD,EAAMmE,IAAIf,QAAW5C,GACvE4D,GAAad,EAAAA,EAAAA,MACbe,GAAcC,EAAAA,EAAAA,KAqCpB,OAnCIF,EAAWX,SAAWS,IACxBK,aAAaH,EAAWX,SACxBW,EAAWX,aAAUjD,IAGvBgE,EAAAA,EAAAA,KAAU,KACR,IAAKpB,GAAWC,EAAWI,SAAWS,EACpC,OAGF,MAAM5H,EAAM,IAAIC,MAEhBD,EAAImI,OAAS,KACX,MAAMd,GAASC,EAAAA,EAAAA,IAAYtH,IAC3BuH,EAAAA,EAAAA,GAASF,EAAOG,WAAW,MAAO,EAAG,EAAGH,EAAOD,MAAOC,EAAOI,OAAQlE,EAAQC,GAC7E,MAAM4E,EAAiBf,EAAOK,YAE9BX,EAAWI,QAAUiB,EACrBL,IAEIrE,EAAM2E,MAAQ5E,GAChBC,EAAM4E,QAER5E,EAAM6E,IAAIzB,EAASsB,EAAe,EAGhCrE,EACF+D,EAAWX,QAAUqB,OAAOC,YAAW,KACrCzI,EAAIK,IAAMyG,CAAO,GAChB/C,GAEH/D,EAAIK,IAAMyG,CACZ,GACC,CAACA,EAAS/C,EAAOgE,EAAaH,IAE1Bb,EAAWI,OACpB,CCduBuB,CAAQ5B,QAAW5C,EAAWiB,QAAQ4B,EAAWI,UAEtE,OAAOJ,EAAWI,UAAaF,GAAaU,GAAiBb,QAAW5C,CAC1E,CCiFuByE,EAAa/B,GAAiB5E,IAAW4G,EAAAA,EAAAA,IAA4B5G,IACrF4E,GAAiBlH,IAAWe,EAAAA,GAAAA,eAC/BmG,EAAgBC,GAEd3B,GAAiBiB,IACnBS,EAAgBT,GAElB,MAAM0C,EAAWnC,GAAgBJ,IAC9BlB,OAAgElB,EAAtDiC,GAAkBJ,GAAoBa,GAG7CkC,EAAW9G,GACb+G,EAAAA,EAAAA,IAAmB/G,GACnB8B,EACG,SAAQA,EAAa1C,MAAM0C,GAAakF,eAAiB,MAAQ,aAClE9E,EAEN,IAAI+E,EAaJ,OAZIjH,EACE0C,GAAmBE,EACrBqE,GAAaC,EAAAA,EAAAA,IAAmBlH,GAAUmH,UACjCnF,GAASM,GAAgBH,EAClC8E,GAAaG,EAAAA,EAAAA,IAAwBpF,GAASM,GAAgBH,IACrDvB,GAAS4B,KAClByE,GAAaI,EAAAA,EAAAA,IAAoBzG,GAAS4B,IAG5CyE,EAAa/D,EAAgBoE,EAAAA,GAA+BC,EAAAA,GAGvD,CACL9D,eACAzB,QACApB,QACA0B,eACAH,cACAK,eACAY,UACAC,UACAC,QACAZ,kBACAE,kBACAkE,WACAlC,gBACAiC,WACAI,aACA1D,oBACAiE,YAAaxE,EACbE,gBACAqB,eACAzB,YACD,E,qGCpIH,MA4EA,IAAe2E,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAU3H,UAAS4H,iBAClB,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,CAAC,GACpD,gBAAEI,GAAqBF,IAAYG,EAAAA,EAAAA,IAA4BL,EAAQ3H,EAAS6H,IAAc,CAAC,EAC/FI,GAAOC,EAAAA,EAAAA,IAAWP,EAAQ3H,EAAQmI,QAQxC,MAAO,CACLJ,iBAAkBH,GAAcG,EAChCK,YATkBH,IAAQI,EAAAA,EAAAA,IAASJ,EAAK7I,KACtCkJ,EAAAA,EAAAA,KAAuBC,EAAAA,EAAAA,IAAWZ,GAAQa,EAAAA,EAAAA,IAAqBP,UAC/D/F,EAQFuG,6BANmCR,IAAQS,EAAAA,EAAAA,IAAiBT,KAAUF,EAOtEY,iBANuBV,IAAQW,EAAAA,EAAAA,IAAiBX,GAOjD,GAjBeP,EA5EkCmB,EACpDC,SACAlB,aACA5H,UACA+I,QACAhB,kBACAK,cACAK,+BACAE,mBACAK,YACAC,cAEA,MAAM,eACJC,EAAc,wBACdC,IACEC,EAAAA,EAAAA,MAWEC,IAT4BC,EAAAA,EAAAA,KAAY,KAC5CN,MACA,MAAMO,EAAaR,GAAOS,SACtBT,EAAMS,SAASC,KAAI,EAAGrK,QAASA,IAC/B,CAACY,EAAQZ,IACb8J,EAAe,CAAEK,aAAYG,oBAAoB,IACjDT,GAAS,GACR,CAACD,EAAWD,EAAO/I,EAAQZ,GAAI8J,EAAgBD,KAEfK,EAAAA,EAAAA,KAAY,KAC7CN,MACA,MAAMO,EAAaR,GAAOS,SACtBT,EAAMS,SAASC,KAAI,EAAGrK,QAASA,IAC/B,CAACY,EAAQZ,IACTwI,EACFuB,EAAwB,CAAEI,eAE1BL,EAAe,CACbK,aACAG,oBAAoB,IAGxBT,GAAS,GACR,CAACD,EAAWD,EAAO/I,EAAQZ,GAAIwI,EAAYqB,EAASE,EAAyBD,KAE1ES,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQA,EACRG,QAASA,EACTc,QAASjB,IAAWf,EAAkBsB,OAA6BnH,EACnE8H,UAAU,SACVC,MAAON,EAAK,8BAEZE,EAAAA,GAAAA,cAAA,SAAIF,EAAK,kCACRlB,GACCoB,EAAAA,GAAAA,cAAA,SAAIF,EAAK,8BAA+B,EAAG,MAE5ChB,GACCkB,EAAAA,GAAAA,cAAA,SAAIF,EAAK,+BAAgC,EAAG,MAG9CE,EAAAA,GAAAA,cAAA,OAAKG,UAAWjC,EAAkB,wBAA0B,kBAO1D8B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAAShB,GACtEM,EAAK5B,EAAkB,gCAAkC,WAE5D8B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUU,EAAK,YAErE,KClDZ,IAAelC,EAAAA,EAAAA,KA7C+B6C,EAC5CxB,SACA9G,QACAuI,YACAtB,UACAD,gBAEA,MAAM,mBACJwB,EAAkB,gBAClBC,IACErB,EAAAA,EAAAA,MAEEsB,GAAoBpB,EAAAA,EAAAA,KAAY,KACpCN,OACIX,EAAAA,EAAAA,IAASkC,GACXC,EAAmB,CAAExI,UAErByI,EAAgB,CACdzI,QACAmG,OAAQoC,IAGZtB,GAAS,GACR,CAACD,EAAWuB,EAAWtB,EAASuB,EAAoBxI,EAAOyI,IAExDd,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQA,EACRG,QAASA,EACTc,QAASW,EACTV,UAAU,+BACVC,MAAON,EAAK,eAEZE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAASK,GACtEf,EAAK,wBAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUU,EAAK,YAErE,IC+SZ,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GACC3H,UAAS2K,iBAAgBnD,cAAa1F,kBAEtC,MAAM8I,GAAqB9C,EAAAA,EAAAA,IAAyBH,IAC9C,SAAEE,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,CAAC,EACpDkD,IAAgB7K,IAAU8K,EAAAA,EAAAA,IAAoBnD,EAAQ3H,GACtD+K,GAAcC,EAAAA,EAAAA,IAAyBrD,EAAQ3H,GAC/CiL,EAAkBjL,IAAWkL,EAAAA,EAAAA,IAAsBvD,EAAQ3H,GAASmI,SAClEgD,UAAWC,GAAsBvD,GACpC7H,IAAWgI,EAAAA,EAAAA,IAA4BL,EAAQ3H,EAAS6H,IAAc,CAAC,EACtEwD,EAAkB7D,GAAgBA,EAAYpI,KAAO0C,GAAawJ,WAElEH,EAAYC,GADMT,KAAoBnD,EAEtC+D,EAAYZ,KAAoBnD,IAAgB6D,EAChDG,EAAkBZ,GAAoBa,KAE5C,MAAO,CACLZ,gBACAE,cACAE,kBACAE,YACAI,YACAC,kBACAE,cAAe5J,GAAa1C,GAC7B,GAzBesI,EAzSkCiE,EACpDtH,YACAjB,UACApD,UACAwH,cACAkE,gBACA5E,WACAmE,kBACAJ,gBACAE,cACAa,YACAC,kBACAV,YACAI,YACAC,kBACAM,cACAC,WACAC,qBACAC,iBACAC,YACAC,yBAEA,MAAOC,EAAmBC,EAAiBC,IAAoBC,EAAAA,EAAAA,IAAQ,IACjE,SAAEC,IAAaC,EAAAA,EAAAA,OAEf,qBACJC,EAAoB,2BACpBC,EAA0B,mBAC1BC,EAAkB,gBAClBC,IACEzD,EAAAA,EAAAA,OAEI7E,aAAcuI,IAAqBtI,EAAAA,EAAAA,GACzCxE,IAAW8D,EAAAA,EAAAA,IAAoB9D,EAAS,aACvC6K,EACD7K,IAAWyE,EAAAA,EAAAA,IAAsBzE,EAAS,aAGtC+M,GAAsBzD,EAAAA,EAAAA,KAAY,KAClCuB,EACF8B,EAA2B,CAAE3M,QAASA,IAEtC0M,EAAqB,CAAE1M,QAASA,GAClC,GACC,CAAC2M,EAA4BD,EAAsB7B,EAAe7K,IAE/DgN,GAAgB1D,EAAAA,EAAAA,KAAY,KAEhC6C,GADeN,EAAkB,EAAIA,EAAkB,GAC3B,EAAE,GAC7B,CAACM,EAAoBN,IAElBoB,GAAe3D,EAAAA,EAAAA,KAAY,KAE/B6C,GADeN,EAAkB,EAAIA,EAAkB,GAC3B,EAAE,GAC7B,CAACM,EAAoBN,IAElBqB,GAAe5D,EAAAA,EAAAA,KAAY,KAC1B9B,GAAgBkE,KACjBrD,EAAAA,EAAAA,IAASqD,GACXkB,EAAmB,CAAE5K,MAAOwF,IAE5BqF,EAAgB,CAAE1E,OAAQuD,EAAe1J,MAAOwF,IAElDsE,EAAY,GAAE,GACb,CAACtE,EAAakE,EAAeI,EAAac,EAAoBC,IAE3DlD,GAAOC,EAAAA,EAAAA,KAEPuD,GAA8DzJ,EAAAA,EAAAA,KAAQ,IACnE,EAAG0J,YAAWtE,YACnBe,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cACNH,UAAWlB,EAAS,cAAW5G,EAC/BmI,QAAS+C,EACTE,UAAU,gBAEVzD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGhB,IAEH,SAASuD,IACP,OAAOvN,EAEH6J,EAAAA,GAAAA,cAAChB,GAAkB,CACjBC,OAAQsD,EACRxE,WAAgC,cAApB4D,EACZvC,QAASqD,EACTtD,UAAWiD,EACXjM,QAASA,IAGV0L,GAAiBlE,EAClBqC,EAAAA,GAAAA,cAACS,GAAuB,CACtBxB,OAAQsD,EACRnD,QAASqD,EACTtD,UAAWiD,EACX1B,UAAWmB,EACX1J,MAAOwF,SAEPtF,CACR,CAmCA,GAAIsK,EAAU,CACZ,MAAMgB,EAA6B,GAiDnC,GAhDKxN,GAASyN,qBAAwBxC,GACpCuC,EAAUE,KAAK,CACbC,KAAM,UACNtD,QAAS6B,EACT0B,SAAUjE,EAAK,aAGdoB,IACC3H,EACFoK,EAAUE,KAAK,CACbC,KAAM9C,EAAgB,SAAW,WACjCR,QAAS0C,EACTa,SAAU/C,EAAiB,GAAEgD,KAAKR,MAAyB,IAAnBP,qBAA4C,aAGtFU,EAAUE,KAAK,CACbC,KAAM,WACNG,KAAMzJ,EACN0J,SAAUjH,EACV8G,SAAUjE,EAAK,wBAKjBiC,GACF4B,EAAUE,KAAK,CACbC,KAAM,SACNtD,QAAS0B,EACT6B,SAAUjE,EAAK,uBAIf4B,GACFiC,EAAUE,KAAK,CACbC,KAAM,aACNtD,QAAS6C,EACTU,SAAUjE,EAAK,+BAIfwB,GACFqC,EAAUE,KAAK,CACbC,KAAM,SACNtD,QAASgC,EACTuB,SAAUjE,EAAK,YAIM,IAArB6D,EAAUQ,OACZ,OAGF,OACEnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,6BACbH,EAAAA,GAAAA,cAACoE,EAAAA,EAAY,CACXC,QAASf,EACTgB,UAAU,SAETX,EAAU/D,KAAI,EACbkE,OAAMtD,UAASyD,OAAMC,WAAUH,cAE/B/D,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPC,IAAKV,EACLA,KAAMA,EACNG,KAAMA,EACNC,SAAUA,EACV1D,QAASA,GAERuD,MAIN/C,GAAiBhB,EAAAA,GAAAA,cAACyE,EAAAA,EAAe,CAACC,SAAUzB,EAAkBzG,KAAK,IAAImI,SAAO,IAC9ErD,GAAaoC,IAGpB,CAEA,OACE1D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBAlHjB,WACE,IAAIe,EAIJ,OAAO3H,EACLyG,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,oBACNmD,UAAW3D,EAAK,qBAChBU,QAAS0C,GAERlC,EACChB,EAAAA,GAAAA,cAACyE,EAAAA,EAAe,CAACC,SAAUzB,EAAkBzG,KAAK,IAAIgE,QAAS0C,IAE/DlD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAIjBH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACL4D,KAAMzJ,EACN0J,SAAUjH,EACVuG,OAAK,EACLhH,KAAK,UACL8D,MAAM,oBACNmD,UAAW3D,EAAK,sBAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBAGnB,CA+FKyE,GACD5E,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,oBACNmD,UAAW3D,EAAK,gBAChBU,QAAS2C,GAETnD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAEfH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,oBACNmD,UAAW3D,EAAK,eAChBU,QAAS4C,GAETpD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBAEd4B,GACC/B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,oBACNmD,UAAW3D,EAAKvG,EAAU,8BAAgC,+BAC1DiH,QAAS0B,GAETlC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eAGhBuB,GACC1B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,oBACNmD,UAAW3D,EAAK,6BAChBU,QAAS6C,GAETrD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGhBmB,GACCtB,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,oBACNmD,UAAW3D,EAAK,UAChBU,QAASgC,GAETxC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iBAGjBH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,oBACNmD,UAAW3D,EAAK,SAChBU,QAAS2B,GAETnC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEdmB,GAAaoC,IACV,K,+GC7VV,MAAMmB,GAAOC,KAqFb,SAASA,KACP,YAA0C,IAA/B/Q,SAASgR,kBACX,yBAC2C,IAAlChR,SAASiR,qBAClB,4BAC8C,IAArCjR,SAASkR,wBAClB,0BAEF,EACT,C,gBC5FA,MA6DA,GAnDwCC,EACtCC,OAAO,GAAIC,WAAUC,aAAY7E,UAASU,kBAE1C,MAAOoE,EAAaC,IAAkBC,EAAAA,EAAAA,KAAS,IACzC,SAAE7C,IAAaC,EAAAA,EAAAA,OAErBvG,EAAAA,EAAAA,KAAU,KACR,MAAMoJ,EAAgB1R,SAASe,cAAc,kCAEvC4Q,EAAmBA,KACvB,MAAM9J,EAAS6J,EAAgBA,EAAcE,aAAe,EAE5DJ,EAAe3J,EAAe,EAANgK,EAAAA,GAAQ,EAIlCF,IAEA,MAAMG,GAAeC,EAAAA,GAAAA,IAASJ,EA5BP,KA4B6C,GAIpE,OAFA/I,OAAOoJ,iBAAiB,SAAUF,GAAc,GAEzC,KACLlJ,OAAOqJ,oBAAoB,SAAUH,GAAc,EAAM,CAC1D,GACA,IAQH,MAAMI,GAAaC,EAAAA,GAAAA,GACjB,oBACAb,GAAc,eACdD,GAAY,YACZlE,GAAe,gBAGjB,OACElB,EAAAA,GAAAA,cAAA,OAAKG,UAAW8F,EAAYzF,QAd9B,SAAmB2F,GACbhB,GACFgB,EAAEC,iBAEN,GAWK9M,QAAQ6L,IACPnF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,8BAA8BK,QAAUmC,OAAqBtK,EAAVmI,GAChER,EAAAA,GAAAA,cAAA,KAAGG,UAAY,6BAA2BmF,EAAc,YAAc,IAAMe,IAAI,QAAQlB,IAGxF,E,qFCpBV,MAAM5Q,GAAa4R,IACjBA,EAAEC,iBAAiB,EAGfE,GAAiB,CACrB,GACA,EACA,IACA,GA4OF,GAvO0CC,EACxCC,iBACAC,mBACAC,cACAC,WACAC,WACAC,uBACAC,YACAC,wBACAC,eACAC,YACAC,aACAC,SACAC,UACAC,eACAC,qBACAC,gBACAC,iBACAC,uBACAC,8BACAC,2BACAC,cACAC,gBACAC,aAEA,MAAOC,EAAoBC,EAAkBC,IAAqBvF,EAAAA,EAAAA,KAE5DwF,GAAY/M,EAAAA,EAAAA,IAAuB,MACnCgN,GAAehN,EAAAA,EAAAA,KAAgB,GAC/BiN,EAAYD,EAAa7M,SAEzB,SAAEqH,IAAaC,EAAAA,EAAAA,OAErBvG,EAAAA,EAAAA,KAAU,KACR,IAAKgM,EAAAA,GAAc,OACnB,IAAIC,EACJ,GAAKrB,GAAcH,IAAasB,IAAaL,EAO7C,OAHAO,EAAU3L,OAAOC,YAAW,KAC1BiL,GAAc,EAAM,GA3CO,KA6CtB,KACDS,GAAS3L,OAAOP,aAAakM,EAAQ,EAPrCA,GAAS3L,OAAOP,aAAakM,EAQlC,GACA,CAACxB,EAAWG,EAAWmB,EAAWP,EAAeE,KAEpD1L,EAAAA,EAAAA,KAAU,KACJ4K,EACFlT,SAASwU,KAAKtU,UAAUC,IAAI,0BAE5BH,SAASwU,KAAKtU,UAAUuU,OAAO,0BAE1B,KACLzU,SAASwU,KAAKtU,UAAUuU,OAAO,yBAAyB,IAEzD,CAACvB,KAEJ5K,EAAAA,EAAAA,KAAU,KACH4K,GACHgB,GACF,GACC,CAACA,EAAmBhB,IAEvB,MAAMnH,GAAOC,EAAAA,EAAAA,KAEP0I,GAAahJ,EAAAA,EAAAA,KAAa0G,IAC9B,GAAIgC,EAAa7M,SAAW4M,EAAU5M,QAAS,CAC7C,MAAM,MACJC,EAAK,KACLmN,GACER,EAAU5M,QAAQqN,wBAChBC,EAAUzC,aAAa0C,WAAa1C,EAAEyC,QAAUzC,EAAE2C,cAAc,GAAGF,QACzEd,EAAO9D,KAAK+E,IAAI/E,KAAKgF,IAAIrC,IAAaiC,EAAUF,GAAQnN,GAAQoL,GAAW,GAC7E,IACC,CAACA,EAAUmB,IAERmB,GAAkBxJ,EAAAA,EAAAA,KAAa0G,IACnCgC,EAAa7M,SAAU,EACvBmN,EAAWtC,EAAE,GACZ,CAACsC,IAEES,GAAiBzJ,EAAAA,EAAAA,KAAY,KACjC0I,EAAa7M,SAAU,CAAK,GAC3B,KAEHe,EAAAA,EAAAA,KAAU,KACR,GAAK6L,EAAU5M,SAAY2L,EAC3B,OAAOkC,EAAAA,GAAAA,IAAcjB,EAAU5M,QAAS,CACtC8N,UAAWH,EACXI,UAAWH,EACX1I,QAAS0I,EACTI,OAAQb,GACR,GACD,CAACxB,EAAWgC,EAAiBR,EAAYS,IAE5C,MAAMK,GAAa1P,EAAAA,EAAAA,KAAQ,IACV,IAAXsN,GAAgBC,EAAgB,aAChCD,EAAS,GAAY,gBACrBA,EAAS,GAAY,gBAClB,iBACN,CAACA,EAAQC,IAEZ,OACEpH,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GAAe,sBAAuBW,GAAwB,SAAUI,GAAa,UAChGzG,QAASjM,IAqGf,SACEmS,EAAqBC,EAAkBH,EAAiC0B,GAExE,MAAMsB,EAAoB9C,EAAcC,EAAY,IAEpD,OACE3G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBAAkBsJ,IAAKvB,GACpClI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACZqG,EAAe5G,KAAI,EAAG8J,QAAOC,SAC5B3J,EAAAA,GAAAA,cAAA,OACEG,UAAU,2BACVlK,MAAQ,SAAgB,IAARyT,cAAwB,IAAY,IAANC,SAGlD3J,EAAAA,GAAAA,cAAA,OACEG,UAAU,yBACVlK,MAAQ,UAASuT,GAAoB,QAK/C,CAxHOI,CAAelD,EAAaC,EAAUH,EAAgB0B,GACvDlI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLoD,UAAW3D,EAAK,iBAChBtD,KAAK,OACLqN,QAASlH,EACTrC,MAAM,oBACNH,UAAU,OACVqD,OAAK,EACLhD,QAASoH,GAET5H,EAAAA,GAAAA,cAAA,KAAGG,UAAW2G,EAAY,aAAe,eAE3C9G,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLoD,UAAU,SACVjH,KAAK,OACL8D,MAAM,oBACNH,UAAU,SACVqD,OAAK,EACLhD,QAAS+G,GAETvH,EAAAA,GAAAA,cAAA,KAAGG,UAAWoJ,MAEdO,EAAAA,IACA9J,EAAAA,GAAAA,cAAC+J,GAAAA,EAAW,CAACC,MAAI,EAAC7J,UAAU,gBAAgB8J,MAAO7C,EAAU,EAAa,IAATD,EAAc+C,SAAU1C,IAmEnG,SAAoBd,EAAqBC,GACvC,OACE3G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACX,IAAEgK,EAAAA,GAAAA,IAAoBzD,SAAkByD,EAAAA,GAAAA,IAAoBxD,KAGpE,CAvESyD,CAAW1D,EAAaC,IACvBO,GACAlH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBACX,IAAEkK,EAAAA,GAAAA,IAAevK,EAAM8G,EAAWH,SAAuB4D,EAAAA,GAAAA,IAAevK,EAAM8G,MAGpF5G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACfH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLoD,UAAU,gBACVjH,KAAK,OACL8D,MAAM,oBACNH,UAAU,gBACVqD,OAAK,EACLhD,QAASwH,GAEP,GAAEX,MAELK,GACC1H,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLoD,UAAU,qBACVjH,KAAK,OACL8D,MAAM,oBACNH,UAAU,aACVqD,OAAK,EACLhD,QAASmH,GAET3H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAGhB4G,GACC/G,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLoD,UAAU,aACVjH,KAAK,OACL8D,MAAM,oBACNH,UAAU,aACVqD,OAAK,EACLhD,QAAS8G,GAETtH,EAAAA,GAAAA,cAAA,KAAGG,UAAW6G,EAAe,mBAAqB,sBAIxDhH,EAAAA,GAAAA,cAACsK,GAAAA,EAAI,CACHrL,OAAQ8I,EACR5H,WAAW+F,EAAAA,GAAAA,GACT,sBACCa,GAAyB,iBACzBW,GAA+B,UAElCpD,UAAU,QACViG,UAAU,SACVC,WAAS,EACTpL,QAAS6I,GAER3B,GAAe1G,KAAK6K,GAEnBzK,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACmG,SAAUrD,IAAiBoD,EAAMjK,QAASA,IAAMiH,EAAqBgD,IAC3E,GAAEA,SAIN,E,uOCrNV,MAmRA,IAAe7M,EAAAA,EAAAA,KAhRmB+M,EAChCC,MACAnR,QACAoR,aACAC,aACApQ,eACAkM,WACAmE,oBACAC,SACA7D,SACAC,UACAC,eACAjI,UACA6L,iBACAC,qBACAC,qBACAjK,cACAkK,sBAEA,MAAM,qBACJC,EAAoB,oBACpBC,EAAmB,2BACnBC,EAA0B,qBAC1BC,IACEjM,EAAAA,EAAAA,MAEEkM,GAAWtQ,EAAAA,EAAAA,IAAyB,OACnC2L,EAAW4E,IAAgBlG,EAAAA,EAAAA,KAAU6C,EAAAA,KAAiByB,EAAAA,KACtDpD,EAAaiF,IAAkBnG,EAAAA,EAAAA,IAAS,IACxCwB,EAAc4E,EAAeC,GHjEvB,SAAuBC,EAAgBC,GACpD,MAAO/E,EAAcgF,IAAmBxG,EAAAA,EAAAA,IAASlM,QAAQuL,IAAQ9Q,SAAS8Q,MAqD1E,OAnCAoH,EAAAA,EAAAA,KAAgB,KACd,MAAMlV,EAAQ+U,EAAMxQ,QACd4Q,EAAWA,KACf,MAAMC,EAAY7S,QAAQuL,IAAQ9Q,SAAS8Q,KAC3CmH,EAAgBG,GAEhBpV,EAAOqV,SAAWD,CAAS,EAEvBE,EAAgBA,KAAQL,GAAgB,EAAK,EAC7CM,EAAeA,KACnBN,GAAgB,GAChBD,GAAY,EAAM,EAYpB,OATAhY,SAASgS,iBAAiB,mBAAoBmG,GAAU,GACxDnY,SAASgS,iBAAiB,yBAA0BmG,GAAU,GAC9DnY,SAASgS,iBAAiB,sBAAuBmG,GAAU,GAEvDnV,IACFA,EAAMgP,iBAAiB,wBAAyBsG,GAAe,GAC/DtV,EAAMgP,iBAAiB,sBAAuBuG,GAAc,IAGvD,KACLvY,SAASiS,oBAAoB,mBAAoBkG,GAAU,GAC3DnY,SAASiS,oBAAoB,yBAA0BkG,GAAU,GACjEnY,SAASiS,oBAAoB,sBAAuBkG,GAAU,GAC1DnV,IACFA,EAAMiP,oBAAoB,wBAAyBqG,GAAe,GAClEtV,EAAMiP,oBAAoB,sBAAuBsG,GAAc,GACjE,CACD,GAEA,IAEEzH,IAASiF,EAAAA,GAIP,CAAC9C,EAvDc4E,KAgGjB,IAA+B7U,EA/F7B+U,EAAMxQ,UAAauJ,IAAQiF,EAAAA,OA+FE/S,EA5FZ+U,EAAMxQ,SA6FpBiR,kBACRxV,EAAMwV,oBACGxV,EAAMyV,wBACfzV,EAAMyV,0BACGzV,EAAM0V,sBACf1V,EAAM0V,wBACG1V,EAAM2V,sBACf3V,EAAM2V,uBAnGNV,GAAgB,GAAK,EAGAH,KAChBC,EAAMxQ,UAoGTvH,SAAS8X,eACX9X,SAAS8X,iBACA9X,SAAS4Y,oBAClB5Y,SAAS4Y,sBACA5Y,SAAS6Y,uBAClB7Y,SAAS6Y,yBACA7Y,SAAS8Y,sBAClB9Y,SAAS8Y,uBAvGTb,GAAgB,GAAM,GAuCf,EAAC,EAIZ,CGMwDc,CAAcrB,EAAUC,IACxE,SAAE/I,IAAaC,EAAAA,EAAAA,MAEfmK,GAAwBtN,EAAAA,EAAAA,KAAY,KAEpCuN,EAAAA,IACJxB,EAAqB,CAAEpG,UAAU,GAAO,GACvC,CAACoG,IAEEyB,GAAwBxN,EAAAA,EAAAA,KAAY,KACpCuN,EAAAA,IACJxB,EAAqB,CAAEpG,UAAU,GAAQ,GACxC,CAACoG,KAGF9D,EACAwF,EACAC,GVlFW,SACbrB,EACA5L,EACAkN,GAEA,MAAOC,EAAaC,IAAkB9H,EAAAA,EAAAA,KAAS,IACxC2H,EAAsBI,IAA2B/H,EAAAA,EAAAA,KAAS,IAEjEyG,EAAAA,EAAAA,KAAgB,KAEd,GAAKnC,EAAAA,IAAU0D,EAAAA,KAAY1B,EAAMxQ,QAAS,OAC1C,MAAMvE,EAAQ+U,EAAMxQ,QACdmS,EAAU3W,EAAuBC,GAGvC,KAFmBhD,SAAS2Z,yBAA4B5B,EAAMxQ,SAASqS,+BACtDtV,IAAZoV,EACW,OAEhB1W,EAAM6W,sBAAuB,EAC7BN,GAAe,GACf,MAAMO,EAAkBA,KACtB3N,IACAqN,GAAwB,EAAK,EAEzBO,EAAkBA,KACtBV,IACAG,GAAwB,EAAM,EAIhC,OAFAxW,EAAMgP,iBAAiB,wBAAyB8H,GAChD9W,EAAMgP,iBAAiB,wBAAyB+H,GACzC,KACL/W,EAAMiP,oBAAoB,wBAAyB6H,GACnD9W,EAAMiP,oBAAoB,wBAAyB8H,EAAgB,CACpE,GACA,CAAChC,EAAO5L,EAASkN,IAEpB,MAAM/V,GAAuBoI,EAAAA,EAAAA,KAAY,KACvC,IAAKqM,EAAMxQ,QAAS,OACpB,MACMmS,EAAU3W,EADFgV,EAAMxQ,SAEhBmS,EACFA,EAAQ,UAERtW,GACF,GACC,CAAC2U,IAEEoB,GAAwBzN,EAAAA,EAAAA,KAAY,KACxC,IAAKqM,EAAMxQ,QAAS,OACpBjE,IACA,MAAMN,EAAQ+U,EAAMxQ,QACdwL,GAAYiH,EAAAA,EAAAA,GAAkBhX,GAC9B0W,EAAU3W,EAAuBC,GACnC0W,EACFA,EAAQ,sBA0Bd,SAAiC1W,GAC/B,GAAIA,EAAMiX,wBACR,IACEjX,EAAMiX,yBACR,CAAE,MAAO1W,GACHC,EAAAA,KAEFC,QAAQC,IAAI,8BAA+BH,EAE/C,CAEJ,CAnCM0W,CAAwBjX,GAGtB+P,IACFmH,EAAAA,EAAAA,GAASlX,EACX,GACC,CAAC+U,EAAOzU,IAEX,OAAKgW,EAIE,CAACA,EAAaH,EAAuBC,GAHnC,EAAC,EAIZ,CUeMe,CAAoBzC,EAAUsB,EAAuBE,GAEnDkB,GAAkB1O,EAAAA,EAAAA,KAAY,KAClCwL,GAAe,EAAK,GACnB,CAACA,IAEEmD,GAAmB3O,EAAAA,EAAAA,KAAa0G,IACpC,MAAMkI,EAAS5C,EAASnQ,SAASqN,wBAC5B0F,IACDlI,EAAEyC,QAAUyF,EAAO3F,MAAQvC,EAAEyC,QAAUyF,EAAOC,OAASnI,EAAEoI,QAAUF,EAAOG,KAAOrI,EAAEoI,QAAUF,EAAOI,SACtGxD,GAAe,EACjB,GACC,CAACA,KAEE,WACJ/D,EAAU,eAAEV,EAAc,kBAAEkI,EAAiB,iBAAEjI,IAC7CkI,EAAAA,GAAAA,MAEFC,aAAcC,EACdC,qBAAsBC,IACpBC,EAAAA,GAAAA,IAAmB9H,OAAY7O,OAAWA,EAAW,SAEvDuW,aAAcK,GACdH,qBAAsBI,KACpBF,EAAAA,GAAAA,GAAkBlF,EAAAA,KAAWhD,IAAc+H,OAAqBxW,OAAWA,EAAW,SAE1FgE,EAAAA,EAAAA,KAAU,KACJ2O,IAAWD,EACbU,EAASnQ,QAAS6T,QACTvE,IAAQvC,EAAAA,KAIjB4F,EAAAA,EAAAA,GAASxC,EAASnQ,QACpB,GACC,CAAC0P,EAAQD,EAAmBH,EAAKU,KAEpCjP,EAAAA,EAAAA,KAAU,KACJoP,EAASnQ,QAASoL,cAAgB+E,EAASnQ,QAASqL,UACtDgF,EAAe,GACfD,GAAa,IAEbC,EAAeF,EAASnQ,QAASoL,YACnC,GACC,CAACA,KAEJrK,EAAAA,EAAAA,KAAU,KACRoP,EAASnQ,QAAS6L,OAASA,CAAM,GAChC,CAACA,KAEJ9K,EAAAA,EAAAA,KAAU,KACRoP,EAASnQ,QAAS+L,aAAeA,CAAY,GAC5C,CAACA,IAEJ,MAAM+H,IAAkB3P,EAAAA,EAAAA,KAAa0G,IACnCA,EAAEC,kBACEU,GACF2E,EAASnQ,QAAS6T,QAClBzD,GAAa,MAEbuC,EAAAA,EAAAA,GAASxC,EAASnQ,SAClBoQ,GAAa,GACf,GACC,CAAC5E,IAEEuI,IAAc5P,EAAAA,EAAAA,KAAa0G,IAC3BiF,IAIAD,EACF/L,EAAQ+G,GAERiJ,GAAgBjJ,GAClB,GACC,CAAC/G,EAAS+L,EAAoBiE,GAAiBhE,KAElDkE,EAAAA,GAAAA,GAAgB7D,EAAU,IAE1B,MAAM8D,IAAmB9P,EAAAA,EAAAA,KAAa0G,IACpCwF,EAAexF,EAAEqJ,cAAc9I,YAAY,GAC1C,IAEG+I,IAAchQ,EAAAA,EAAAA,KAAY,KAC9BkM,EAAe,GACfD,GAAa,GACbT,GAAe,EAAK,GACnB,CAACA,IAEEyE,IAAyBjQ,EAAAA,EAAAA,KAAY,KACrCuH,GAAgB6E,EAClBA,KACU7E,GAAgB4E,GAC1BA,GACF,GACC,CAACC,EAAgB7E,EAAc4E,IAE5BnD,IAAahJ,EAAAA,EAAAA,KAAakQ,IAC9BlE,EAASnQ,QAASoL,YAAciJ,CAAQ,GACvC,IAEGC,IAAqBnQ,EAAAA,EAAAA,KAAaoQ,IACtCxE,EAAqB,CAAElE,OAAQ0I,EAAY,KAAM,GAChD,CAACxE,IAEEyE,IAAoBrQ,EAAAA,EAAAA,KAAY,KAEpCgM,EAASnQ,QAASyU,OAAStE,EAASnQ,QAASyU,MAC7CzE,EAAoB,CAAElE,SAAUA,GAAU,GACzC,CAACA,EAASkE,IAEP0E,IAA2BvQ,EAAAA,EAAAA,KAAawQ,IAC5C1E,EAA2B,CAAElE,aAAc4I,GAAkB,GAC5D,CAAC1E,KAEJlP,EAAAA,EAAAA,KAAU,KACR,IAAK0O,EAAmB,OACxB,MAAMmF,EAA4B/J,IACjB,UAAVA,EAAE3B,KAA6B,MAAV2B,EAAE3B,KAAiB2I,IAC3ChH,EAAEgK,iBACFf,GAAgBjJ,GAClB,EAKF,OAFApS,SAASgS,iBAAiB,UAAWmK,GAA0B,GAExD,KACLnc,SAASiS,oBAAoB,UAAWkK,GAA0B,EAAM,CACzE,GACA,CAACd,GAAiBrE,EAAmBoC,IAExC,MAAMiD,GAAetF,GAAe,UAASA,EAAWvP,oBAAoBuP,EAAWlP,WACjFyU,GAAc,yBAAwBxF,KACtClE,GAAW8E,EAASnQ,SAASqL,UAAY,EAE/C,OACE3G,EAAAA,GAAAA,cAAA,OACEG,UAAU,cACVmQ,YAAcjI,EAAAA,QAAiChQ,EAAlB8V,EAC7BoC,WAAalI,EAAAA,QAAkChQ,EAAnB+V,GAE5BpO,EAAAA,GAAAA,cAAA,OACE/J,MAAOma,IAGNlP,GACClB,EAAAA,GAAAA,cAAA,OACEwQ,cAAejc,EAAAA,EACfkc,cAAgBpI,EAAAA,QAAwChQ,EAAzBqX,GAC/BlP,QAAUmC,OAA6BtK,EAAlB+W,GACrBjP,UAAU,cAGdH,EAAAA,GAAAA,cAAA,QAAA0Q,GAAA,CACEjH,IAAKgC,EACLkF,SAAUtI,EAAAA,GACVuI,aAAa,aACbC,aAAW,EACXC,KAAMrX,GAASkN,IA/MC,GAiNhBoJ,MAAOtW,GAAS2N,EAChB7R,GAAG,qBACHU,MAAOoa,GACPU,OAAQA,IAAMrF,GAAa,GAC3BsF,QAASvB,GACTjP,QAAUmC,GAAaqE,OAA6B3O,EAAdgX,GACtCoB,cAAgBpI,EAAAA,QAAwChQ,EAAzBqX,IAE3BhB,EAAiB,CACrBuC,QAAU9K,IACRuF,GAAa,GACbgD,EAAkBuC,QAAQ9K,EAAE,EAE9B+K,aAAc3B,KAEb3E,GAAO5K,EAAAA,GAAAA,cAAA,UAAQxL,IAAKoW,MAGxBqE,IACCjP,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACmD,OAAK,EAACrD,UAAY,eAAc+O,KAAwB1O,QAAS4O,IACvEpP,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eAGhB0O,GACC7O,EAAAA,GAAAA,cAAA,OAAKG,UAAW,CAAC,oBAAqB4O,GAAmBoC,KAAK,OAC1DjK,GAAclH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aAAY,gBAC3CH,EAAAA,GAAAA,cAACyE,EAAAA,EAAe,CACdjI,KAAK,KACLkI,SAAUwC,EAAa,EAAIxM,EAC3B0W,QAAM,EACN5Q,QAASpB,MAIb3F,IAAUoV,GACV7O,EAAAA,GAAAA,cAACuG,GAAmB,CAClBO,UAAWA,EACXN,eAAgBA,EAChBC,iBAAkBA,EAClBS,WAAYA,EACZR,YAAaA,EACbK,sBAAuBzN,QAAQsS,GAC/BlE,4BAA6BA,EAC7BV,aAAcA,EACdJ,SAAUA,EACVD,SAAUA,GACVM,UAAWiE,EACXrD,cAAeoD,EACfpE,qBAAsBiE,GAAcA,EAAWvP,MAlQpB,IAmQ3BuM,OAAQW,GACRnB,mBAAoBoI,GACpB/H,yBAA0BuF,EAC1BtF,YAAawH,GACbjI,OAAQA,EACRE,aAAcA,EACdD,QAASA,EACTG,cAAeuI,GACftI,eAAgBoI,GAChBnI,qBAAsBuI,KAGtB,ICjHV,IAAepS,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,EAAQuT,KACP,MAAM,OACJ/S,EAAM,SACNN,EAAQ,QACRhG,EAAO,cACP6J,EAAa,OACbhO,GACEwd,GAEE,OACJlK,EAAM,QACNC,EAAO,aACPC,EAAY,SACZjC,IACEkM,EAAAA,EAAAA,IAAexT,GAAQyT,YAE3B,GAAI1d,IAAWe,EAAAA,GAAAA,aAAgC,CAC7C,IAAM0J,IAAUtG,EACd,MAAO,CAAEmP,SAAQC,UAASC,gBAG5B,MAAMlR,GAAUqb,EAAAA,EAAAA,IAAkB1T,EAAQQ,EAAQtG,GAClD,OAAK7B,EAIE,CACLmI,SACAtG,UACAyZ,SAAUtb,EAAQsb,SAClB5d,SACAsC,UACA+K,aAAaC,EAAAA,EAAAA,IAAyBrD,EAAQ3H,GAC9CgR,SACAC,UACAhC,WACAiC,gBAbO,CAAEF,SAAQC,UAASC,eAe9B,CAEA,GAAIxF,EAGF,MAAO,CACL7J,UACAyZ,SAAU5P,EACV5J,aALayG,EAAAA,EAAAA,IAAWZ,EAAQ+D,KAAkBxD,EAAAA,EAAAA,IAAWP,EAAQ+D,GAMrEhO,SACAsT,SACAC,UACAhC,WACAiC,gBAIJ,KAAM/I,GAAUN,GAAYhG,GAC1B,MAAO,CAAEmP,SAAQC,UAASC,gBAG5B,IAAIlR,EAOJ,OALEA,EADEtC,GAAU,CAACe,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAAS3B,IACjF6d,EAAAA,EAAAA,IAAuB5T,EAAQQ,EAAQtG,IAEvCwZ,EAAAA,EAAAA,IAAkB1T,EAAQQ,EAAQtG,GAGzC7B,EAIE,CACLmI,SACAN,WACAhG,UACAyZ,SAAUtb,EAAQsb,SAClB5d,SACAsC,UACA+K,aAAaC,EAAAA,EAAAA,IAAyBrD,EAAQ3H,GAC9CgR,SACAC,UACAhC,WACAiC,gBAdO,CAAEF,SAAQC,UAASC,eAe3B,GAnFexJ,EA/ImC8T,IACrD,MAAM,QACJ3Z,EAAO,SACP4Z,EAAQ,YACR3Z,EAAW,OACXqG,EAAM,QACNnI,EAAO,OACPtC,EAAM,eACNge,EAAc,mBACd3G,EAAkB,YAClBhK,EAAW,OACXiG,EAAM,aACNE,EAAY,QACZD,EAAO,SACPhC,EAAQ,QACRhG,EAAO,cACP0S,EAAa,mBACbC,EAAkB,SAClBC,GACEL,EAEE7R,GAAOC,EAAAA,EAAAA,KAEPkS,EAAsC,IAAnBJ,GAEnB,QACJtY,EAAO,QACPC,EAAO,YACPlB,EAAW,cACXyC,EAAa,SACbiC,EAAQ,WACRI,EAAU,MACV3D,EAAK,cACLJ,EAAa,UACbJ,EAAS,aACTyB,GACE3C,EAAc,CAChB5B,UAAS8B,cAAaD,UAASnE,SAAQqE,MAAO+Z,GAvCvB,MA0CnBhT,EAAS3F,QAAQrB,GAAeD,IAChC,SAAE2K,IAAaC,EAAAA,EAAAA,MAEfqI,GAAiBxL,EAAAA,EAAAA,KAAawH,IAClC8K,IAAqB9K,EAAU,GAC9B,CAAC8K,IAEJ,GAAI9Z,GAAeK,EACjB,OAAKe,EAaD2G,EAAAA,GAAAA,cAAA,OAAKwE,IAAKlG,EAAQ6B,UAAU,sBAC1BH,EAAAA,GAAAA,cAAC2K,GAAW,CACVnG,IAAKxM,EACL4S,IAAK5N,EACLvD,OAAK,EACLoR,WAAY9P,EACZ+P,YAAYoH,EAAAA,EAAAA,IAA+B9U,GAAa,GAAO,GAC/D1C,aAAcA,EACdkM,SAAU3N,EACV8R,kBAAmB9L,GAAU2S,EAC7B1G,mBAAoBA,EACpBD,eAAgBA,EAChB/J,YAAaA,EACb8J,QAAS4G,EACTxS,QAASA,EACTgI,SAAO,EACP+D,oBAAkB,EAClBhE,OAAQ,EACRiE,gBAAiB4G,EACjB3K,aAAc,KA9BlBrH,EAAAA,GAAAA,cAAA,OAAKwE,IAAKlG,EAAQ6B,UAAU,sBACzBgS,GACCnV,GACAkV,EAAAA,EAAAA,IAA+B9U,GAAY,IAC1CuF,IAAazB,EACdA,IAgCV,IAAK/K,EAAS,OACd,MAAMic,EAA6C,wBAAjCjc,EAAQkc,QAAQC,QAAQ1Q,KACtC9B,EAAK,qCACLyS,EAAAA,EAAAA,GAAkBpc,GAChBqc,EAAYlZ,QAAQ8Y,GAE1B,OACEpS,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GAAe,qBAAsBsM,GAAa,eAE5DhZ,GAAW2Y,GACVnV,EACA7G,IAAW+b,EAAAA,EAAAA,IAA+B9U,EAAaoV,IACtD7P,IAAazB,EACdA,GAED3H,IAAaqY,EAMZ5R,EAAAA,GAAAA,cAAC2K,GAAW,CACVnG,IAAKxM,EACL4S,IAAK5N,EACLvD,MAAOA,EACPoR,WAAY9P,EACZ+P,WAAY3U,IAAW+b,EAAAA,EAAAA,IAA+B9U,EAAaoV,GAAW,GAC9E9X,aAAcA,EACdkM,SAAU3N,EACViS,mBAAoBA,EACpBH,kBAAmB9L,GAAU2S,EAC7B3G,eAAgBA,EAChBD,QAAS4G,EACTxS,QAASA,EACTgI,QAASA,EACThC,SAAUA,EACVlE,YAAaA,EACbiG,OAAQA,EACRiE,gBAAiB4G,EACjB3K,aAAcA,IA+HxB,SAA4BvM,EAAkB2X,EAA2BC,EAAmBxR,GAC1F,MAAMkP,EAAeqC,GAAc,UAASA,EAAUlX,oBAAoBkX,EAAU7W,WAC9EyU,EAAc,yBAAwBvV,KAC5C,OAAOA,EAEHkF,EAAAA,GAAAA,cAAA,OACEG,UAAU,eAETe,GAAelB,EAAAA,GAAAA,cAAA,OAAKwQ,cAAejc,EAAAA,EAAW4L,UAAU,cACzDH,EAAAA,GAAAA,cAAA,OACE/J,MAAOma,GAGPpQ,EAAAA,GAAAA,cAAA,SACE/J,MAAOoa,EACPlQ,WAAW+F,EAAAA,GAAAA,GAAehF,GAAe,gBACzC7M,UAAWiF,QAAQoZ,OAMzB1S,EAAAA,GAAAA,cAAA,OACEG,UAAU,kBACVlK,MAAOwc,EAAa,UAASA,EAAUlX,UAAY,IAEnDyE,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAGvB,CApL+BsS,CACvB7X,EACA5E,IAAW+b,EAAAA,EAAAA,IAA+B9U,EAAaoV,GAAW,IACjE7P,IAAazB,EACdA,IAuBDkR,GACCpS,EAAAA,GAAAA,cAACkF,GAAiB,CAChBC,KAAMiN,EACN5R,QAASsR,EACT5Q,YAAaA,EACbkE,WAAUiD,EAAAA,KAAgB6C,EAC1B7F,WAAY9L,IAAYE,IAGxB,KA2FV,SAAS0Y,GAAYrX,EAAkB2X,EAA2BC,EAAmBxR,GACnF,OAAOpG,EAEHkF,EAAAA,GAAAA,cAAA,OAAK/J,MAAM,uBACRiL,GAAelB,EAAAA,GAAAA,cAAA,OAAKwQ,cAAejc,EAAAA,EAAW4L,UAAU,cACzDH,EAAAA,GAAAA,cAAA,OACExL,IAAKsG,EACL+X,IAAI,GACJ1S,WAAW+F,EAAAA,GAAAA,GAAehF,GAAe,gBACzCjL,MAAOwc,EAAa,UAASA,EAAUlX,UAAY,GACnDlH,UAAWiF,QAAQoZ,MAKvB1S,EAAAA,GAAAA,cAAA,OACEG,UAAU,kBACVlK,MAAOwc,EAAa,UAASA,EAAUlX,UAAY,IAEnDyE,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAGvB,C,uOC5RA,MAAM,aAAEwS,GAAY,aAAEC,IAAiBC,GAAAA,GAwBjCC,GAAa5K,EAAAA,GAAe,GAAK,EACjC3U,GAAqB,IAS3B,IAAIwf,GACAC,GAA0C,IAQzCC,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,2BAAdA,EAAAA,EAAc,uBAAdA,CAAc,EAAdA,IAAc,IAKnB,MAgqBA,IAAexV,EAAAA,EAAAA,KAhqByByV,EACtCrb,UACAsb,aACArR,cACA1I,UACAE,QACAD,UACAyF,SACAuT,YACAxQ,kBACA6P,iBACAzM,cACGmO,MAGH,MAAMC,GAAerY,EAAAA,EAAAA,IAAuB,MAEtCsY,GAAiBtY,EAAAA,EAAAA,IAAuB,MACxCuY,GAAevY,EAAAA,EAAAA,IAAkB,CAAEwY,EAAG,EAAGC,EAAG,EAAGC,MAAO,IACtDC,GAAmB3Y,EAAAA,EAAAA,IAAkB,CAAEwY,EAAG,EAAGC,EAAG,EAAGC,MAAO,IAC1DE,GAAoB5Y,EAAAA,EAAAA,SAAmC9C,GACvD2b,GAAc7Y,EAAAA,EAAAA,KAAO,GACrB8Y,GAAgB9Y,EAAAA,EAAAA,KAAO,IACtB+Y,EAAeC,IAAoB3O,EAAAA,EAAAA,IAA6BxN,GACjEoc,GAAsBC,EAAAA,EAAAA,GAAYrS,GAClCsS,OAAyCjc,IAAxB+b,GAAqCA,IAAwBpS,EAC9E9F,GAAcC,EAAAA,EAAAA,MACb+O,EAAoB6G,IAAsBvM,EAAAA,EAAAA,KAAS,GACpDwB,EL/B2BuN,MACjC,MAAOvN,EAAcgF,IAAmBxG,EAAAA,EAAAA,KAAS,GAkBjD,OAhBAnJ,EAAAA,EAAAA,KAAU,KACR,MAAM6P,EAAWA,KACfF,EA4BC,WACL,MAAMwI,EAAiB1P,KACvB,OAAOxL,QAAQkb,GAAkBzgB,SAASygB,GAC5C,CA/BsBC,GAAoB,EAOtC,OAJA1gB,SAASgS,iBAAiB,mBAAoBmG,GAAU,GACxDnY,SAASgS,iBAAiB,yBAA0BmG,GAAU,GAC9DnY,SAASgS,iBAAiB,sBAAuBmG,GAAU,GAEpD,KACLnY,SAASiS,oBAAoB,mBAAoBkG,GAAU,GAC3DnY,SAASiS,oBAAoB,yBAA0BkG,GAAU,GACjEnY,SAASiS,oBAAoB,sBAAuBkG,GAAU,EAAM,CACrE,GACA,IAEIlF,CAAY,EKYEuN,IACdG,EAAaC,IAAkBnP,EAAAA,EAAAA,KAAS,IACvC5J,OAAQgZ,EAAcrZ,MAAOsZ,EAAW,WAAEC,IAAeC,EAAAA,GAAAA,MAC3D,QAAE3V,GAAYmU,EAEdzT,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,SAAU3S,EACVgW,OAAQ7V,EACR8V,kBAAkB,IAGpB,MAAMC,GAAe1V,EAAAA,EAAAA,KAAawK,IAChCyJ,EAAapY,QAAU2O,EACvB/N,GAAa,GACZ,CAACA,IAEEkZ,GAAuBC,EAAAA,GAAAA,GAAqBpT,EAAa,CAACA,GApEzC,KAoEyE,GAC1FqT,GAA+BD,EAAAA,GAAAA,IAAqB,KACxDtB,EAAkBzY,aAAUjD,CAAS,GACpC,GAtEkB,KAsEE,GACjBkd,GAAuBF,EAAAA,GAAAA,IAAsBpL,IACjD+J,EAAY1Y,QAAU2O,EACtB/N,GAAa,GACZ,CAACA,GAzEkB,KAyEa,GAE7BsZ,EAAqB/b,IAAUqQ,EAAAA,GAC/B2L,EAAkBpN,EAAAA,GAAe,GAAKwM,EAAc,GAEpDa,GAA2BjW,EAAAA,EAAAA,KAAa0G,IAC5C,IAAKkC,EAAAA,GAAc,OACnB,MAAMsN,EAAWf,EAAezO,EAAEyP,MA9EZ,IA+EjBD,GAAYxP,EAAE0P,MAAQJ,IACtBE,GAAYxP,EAAE0P,MAAQhB,EAAcY,GACzC1D,GAAoB7G,EAAmB,GACtC,CAACuK,EAAiBvK,EAAoB0J,EAAcC,IAkhBvD,IAhhBAiB,EAAAA,GAAAA,IAAW,IAAM/D,GAAmB,IAAOre,MAE3C2I,EAAAA,EAAAA,KAAU,KACR8X,EAAiBnc,EAAQ,GACxB,CAACA,KAEJqE,EAAAA,EAAAA,KAAU,KACR,IAAKmX,EAAalY,cAA6BjD,IAAlB6b,GAA+B9O,GAAY4B,EACtE,OAEF,IAAI+O,EAAgBjC,EAAiBxY,QACrC,MAAM0a,EAAiB,CACrBrC,EAAG,EACHC,EAAG,GAECqC,EAAiB,CACrBtC,EAAG,EACHC,EAAG,GAECsC,EAAW,CACfvC,EAAG,EACHC,EAAG,GAEL,IACIuC,EACA9D,EAFA+D,EAAkBC,KAAKC,MAG3B,MAAMC,GAAqBC,EAAAA,GAAAA,KAAS,KAClCJ,EAAkBC,KAAKC,KAAK,GAC3B,KAAK,GAAO,GAETG,EAAeC,IACnB,MAAMC,EAAMrD,EAAWY,EAAewC,GACtC,QAAYre,IAARse,EAAmB,CACrB,MAAMC,GAAU/B,EAAc5B,IAAcyD,EAO5C,OANAhD,EAAapY,QAAQqY,GAAKiD,EAC1B5C,EAAY1Y,SAAU,EACtB6Y,EAAiBwC,GACjBvB,EAAqBuB,GACrBpB,GAAqB,GACrBQ,EAAgB,CAAEpC,EAAG,EAAGC,EAAG,EAAGC,MAAO,GACd,IAAnBhC,GACFsD,EAAaY,IACN,IAET7C,IAAkB2D,EAAAA,GAAAA,IAAc,CAC9BC,KAAMpD,EAAapY,QAAQqY,EAC3BoD,GAAI,EACJpQ,SAAUjT,GACVsjB,OAAQlE,GACRmE,SAAWhN,GAAUkL,EAAa,CAChCvB,EAAG,EACHD,EAAG1J,EACH4J,MAAO,OAGJ,EACT,CACA,OAAO,CAAK,EAGRqD,EAAsB/Q,IAC1B,GAAmC,IAA/BuN,EAAapY,QAAQuY,MAAa,MAAO,EAAC,GAAO,GACrD,GAAK1N,EAAEgR,OAAuB7hB,QAAQ,2BACpC,MAAO,EAAC,GAAO,GAEjB,IAAIohB,EAAY,EAChB,OAAI9B,EAAezO,EAAEyP,MAtJD,GAuJX,EAAC,GAAO,IAEbzP,EAAE0P,MAAQJ,EACZiB,GAAa,EACJvQ,EAAE0P,MAAQhB,EAAcY,IACjCiB,EAAY,GAIP,CAD6B,IAAdA,EADDD,EAAYC,IAEG,EAGhCU,EAAiBjR,IACrB,GAAmC,IAA/BuN,EAAapY,QAAQuY,MACzB,OAAQ1N,EAAE3B,KACR,IAAK,OACL,IAAK,YACHiS,GAAa,GACb,MAEF,IAAK,QACL,IAAK,aACHA,EAAY,GACN,EAINY,EAA4BA,EAC9B1D,IAAGC,IAAGC,SACRxe,EAAY,KAEZ,IAAK8gB,EAAoB,MAAO,CAAC,CAAExC,IAAGC,IAAGC,UAAS,GAAM,GAExD,IAAIyD,GAAY,EACZC,GAAY,EAEhB,MAAMC,GAAW3C,EAAcA,EAAchB,GAAS,EAChD4D,GAAW7C,EAAeA,EAAef,GAAS,EAIlD6D,EAAa1T,KAAK+E,KAAKoN,EAAmBzN,KAAOmL,EAAO2D,GACxDG,EAAa9C,EAAcsB,EAAmB7H,MAAQuF,EAC5DyD,GAAYM,EAAAA,GAAAA,IAAUjE,EAAGgE,EAAYD,GACrC/D,GAAIkE,EAAAA,GAAAA,IAAMlE,EAAGgE,EAAYD,GAEzB,MAAMI,EAAa9T,KAAK+E,KAAKoN,EAAmB3H,IAAMqF,EAAQxe,EAAWoiB,GACnEM,EAAanD,EAAeuB,EAAmB1H,OAASoF,EAI9D,OAHA0D,GAAYK,EAAAA,GAAAA,IAAUhE,EAAGmE,EAAYD,GAG9B,CAAC,CAAEnE,IAAGC,EAFbA,GAAIiE,EAAAA,GAAAA,IAAMjE,EAAGmE,EAAYD,GAETjE,SAASyD,EAAWC,EAAU,EAG1ClO,EAAalD,IAGjB,GAAI8N,EAAc3Y,QAEhB,YADA2Y,EAAc3Y,SAAU,GAGX,YAAX6K,EAAEvE,MACJ+S,GAAe,GAEjB,MAAMqD,EAAOhU,KAAKiU,IAAIvE,EAAapY,QAAQqY,GACrCuE,EAAOlU,KAAKiU,IAAIvE,EAAapY,QAAQsY,IACrC,MACJC,EAAK,EACLF,EAAC,EACDC,GACEF,EAAapY,QAMjB,GAJAga,IACAC,GAAqB,GAGjB1B,EAAQ,EAaV,OAZAkC,EAAgB,CAAEpC,EAAG,EAAGC,EAAG,EAAGC,MAAO,QACrCX,IAAkB2D,EAAAA,GAAAA,IAAc,CAC9BC,KAAM,CAACnD,EAAGC,EAAGC,GACbkD,GAAI,CAAC,EAAG,EAAG,GACXpQ,SAAUjT,GACVsjB,OAAQlE,GACRmE,SAAWhN,GAAUkL,EAAa,CAChCxB,EAAG1J,EAAM,GACT2J,EAAG3J,EAAM,GACT4J,MAAO5J,EAAM,QAKnB,GAAI4J,EAAQ,EAAG,CAEb,MAAMsE,EAAKnU,KAAKgF,IAAI6K,EAlPX,GAmPHuE,EAAcD,EAAKtE,EAIzB,IAAIwE,EAAK1E,EAAIyE,GAAenC,EAAetC,EAAIyE,EAAcnC,EAAetC,GACxE2E,EAAK1E,EAAIwE,GAAenC,EAAerC,EAAIwE,EAAcnC,EAAerC,GAG5E,MAAM2E,EAAI,IAGV,GAAe,UAAXpS,EAAEvE,MAAoBmU,EAAclC,QAAUA,EAAO,CAEvD,MAAM2E,EAAKxU,KAAKiU,IAAIjC,EAAerC,IAAM0C,KAAKC,MAAQF,GAChDqC,EAAKzU,KAAKiU,IAAIjC,EAAepC,IAAMyC,KAAKC,MAAQF,GAGtDiC,GAAMrU,KAAKiU,IAAIjC,EAAerC,GAAK6E,EAAKD,EAAIrC,EAASvC,EACrD2E,GAAMtU,KAAKiU,IAAIjC,EAAepC,GAAK6E,EAAKF,EAAIrC,EAAStC,CACvD,CAcA,OAZCmC,GAAiBsB,EAA0B,CAAE1D,EAAG0E,EAAIzE,EAAG0E,EAAIzE,MAAOsE,GAzQrD,SA0QdjF,IAAkB2D,EAAAA,GAAAA,IAAc,CAC9BC,KAAM,CAACnD,EAAGC,EAAGC,GACbkD,GAAI,CAAChB,EAAcpC,EAAGoC,EAAcnC,EAAGmC,EAAclC,OACrDlN,SAAUjT,GACVsjB,OAAQlE,GACRmE,SAAWhN,GAAUkL,EAAa,CAChCxB,EAAG1J,EAAM,GACT2J,EAAG3J,EAAM,GACT4J,MAAO5J,EAAM,OAInB,CAMA,GALA8L,EAAgB,CACdpC,IACAC,IACAC,SAEEqE,GApSgB,GAsSlB,YADA9Y,IAIF,GAAI8Y,EAAO,EAYT,YAXAhF,IAAkB2D,EAAAA,GAAAA,IAAc,CAC9BC,KAAMlD,EACNmD,GAAI,EACJpQ,SAAUjT,GACVsjB,OAAQlE,GACRmE,SAAWhN,GAAUkL,EAAa,CAChCxB,EAAG,EACHC,EAAG3J,EACH4J,aAMN,MAAM6C,EAAY/C,EAAI,EAAI,GAAK,EACzBgD,EAAMrD,EAAWY,EAAeP,EAAI,EAAI,GAAK,GAK7C+E,EAAOxC,EAASvC,EAAI,GAAK,EAAI,EACnC,QAAYtb,IAARse,GAAqBqB,GAhUL,IAgUkCtB,IAAcgC,EAAM,CACxE,MAAM9B,GAAU/B,EAAc5B,IAAcyD,EAG5ChD,EAAapY,QAAQqY,GAAKiD,EAC1BzC,EAAiBwC,GACjBvB,EAAqBuB,EACvB,CAEAzD,IAAkB2D,EAAAA,GAAAA,IAAc,CAC9BC,KAAMpD,EAAapY,QAAQqY,EAC3BoD,GAAI,EACJpQ,SAAUjT,GACVsjB,OAAQlE,GACRmE,SAAWhN,IAAK,IAAA0O,EAAA,OAAKxD,EAAa,CAChCvB,EAAG,EACHD,EAAG1J,EACH4J,MAAkC,QAA7B8E,EAAEjF,EAAapY,SAASuY,aAAK,IAAA8E,EAAAA,EAAI,GACtC,GACF,EAGEC,GAAUzP,EAAAA,GAAAA,IAAcqK,EAAalY,QAAS,CAClDud,cAAc,EACdC,gBAAgB,EAChBC,wBAAyB,oCACzBC,QA/UW,EAgVXC,QAjVW,EAkVXC,cArVkB,EAsVlB9P,UAAYjD,IACV,GAAIgT,GAAqBhT,GAAI,OAC7B,GAAe,cAAXA,EAAEvE,OACJ+S,GAAe,GACoB,IAA/BjB,EAAapY,QAAQuY,OAEvB,YADA1N,EAAEgK,iBAINiG,EAAkBC,KAAKC,MACvB,MAAM,EAAE3C,EAAC,EAAEC,EAAC,MAAEC,GAAUH,EAAapY,QACrC,GAAU,IAANqY,GAAiB,IAANC,GAAqB,IAAVC,EAAa,CACrC,IAAKJ,EAAenY,QAAS,OAE7B,GADA+W,EAAUoB,EAAenY,QAAQxG,cAAc,eAC1Cud,EAAS,OAEd8D,EAAqB9D,EAAQ1J,uBAC/B,GAEFW,OAAQA,CAAC8P,EAAOC,GACdC,cACAC,eACCC,KACD,GAAIvF,EAAc3Y,SAAW6d,GAAqBC,GAAQ,OAE1D,GAAItP,EAAAA,IAAgC,eAAtBuP,EAAazX,KAAuB,CAChD,MAAM,MAAEiU,GAAWwD,EAAgCI,QAAQ,GAC3D,GAAI5D,GAAS6D,GAAAA,IAA6B7D,GAAShB,EAAc6E,GAAAA,GAC/D,MAEJ,CACIxG,KACFA,KACAA,QAAkB7a,GAEpB6d,EAASvC,EAAIqC,EAAerC,EAAI2F,EAChCpD,EAAStC,EAAIoC,EAAepC,EAAI2F,EAChCvD,EAAerC,EAAI2F,EACnBtD,EAAepC,EAAI2F,EACnB,MAAMI,EAAa3V,KAAKiU,IAAIqB,GACtBM,EAAa5V,KAAKiU,IAAIsB,IACtB,MACJ1F,EAAK,EACLF,EAAC,EACDC,GACEF,EAAapY,QASjB,GAHAib,IAGc,IAAV1C,GAkBJ,GAAmB,cAAfuF,EAAMxX,KAAV,CACA,GAAImS,EAAkBzY,UAAY8X,GAAeyG,WAG3C9F,EAAkBzY,UAAY8X,GAAe0G,YAC5C9V,KAAKiU,IAAItE,GA/BE,IA+BgBgG,EAAaC,EA9B7B,KA8BqD,CACnE7F,EAAkBzY,QAAU8X,GAAe0G,WAC3C9F,EAAY1Y,SAAU,EACtB,MAAMye,EAAQlF,EAAc5B,GACtBoF,GAAKR,EAAAA,GAAAA,IAAMyB,GAAcS,EAAOA,GAatC,OAZA5E,EAAa,CACXxB,EAAG0E,EACHzE,EAAG,EACHC,eAKiB,UAAfuF,EAAMxX,MAAoBoC,KAAKiU,IAAII,GAAM2B,MAC3C3Q,EAAU+P,GACVnF,EAAc3Y,SAAU,GAG5B,CAGF,GAAIyY,EAAkBzY,UAAY8X,GAAeyG,UAC5C7V,KAAKiU,IAAIrE,GArDI,IAqDcgG,EAAaD,EApD3B,IAoDmD,CACnE5F,EAAkBzY,QAAU8X,GAAeyG,SAC3C,MAAME,EAAQnF,EACR0D,GAAKT,EAAAA,GAAAA,IAAM0B,GAAcQ,EAAOA,GACtC5E,EAAa,CACXxB,EAAG,EACHC,EAAG0E,EACHzE,UAEiB,UAAfuF,EAAMxX,MAAoBoC,KAAKiU,IAAIK,GAAM2B,MAC3C5Q,EAAU+P,GACVnF,EAAc3Y,SAAU,EAE5B,CAxCsC,MAlBtC,CACE,MAAM+c,EAAKtC,EAAcpC,EAAI2F,EACvBhB,EAAKvC,EAAcnC,EAAI2F,EAC7B,GAAI,CAAC,QAAS,aAAa/jB,SAAS4jB,EAAMxX,MAAO,CAC/C,MAAOsY,EAAW5C,EAAWC,GAAaF,EAA0B,CAAE1D,EAAG0E,EAAIzE,EAAG0E,EAAIzE,SA9Y1E,IAiZV,OAFI2F,GAAYA,GAAYlC,GAAYC,QACxCpC,EAAa+E,EAEf,CACI,YAAad,GAAkC,IAAzBA,EAAMK,QAAQtV,QACtCgR,EAAa,CACXxB,EAAG0E,EACHzE,EAAG0E,EACHzE,SAIN,CAyCA,EAEFsG,OAAQA,CAAChU,GACPiU,OACAC,aACAC,iBACAC,iBACAjB,cACAC,cACAiB,iBACAC,qBAEIvH,IAAiBA,KACrBoH,EAAiBA,GAAkBzF,EAAc,EACjD0F,EAAiBA,GAAkB3F,EAAe,EAClD4F,EAAiBA,GAAkB3F,EAAc,EACjD4F,EAAiBA,GAAkB7F,EAAe,EAGlD,MAAMf,EAAQuG,QAAAA,GAAQvC,EAAAA,GAAAA,IAAM9B,EAAclC,MAAQwG,EAAaK,GAAgBC,IACzEvC,EAAcvE,EAAQkC,EAAclC,MACpC+G,EAAU5W,KAAKiU,IAAIjU,KAAKgF,IAAI+M,EAAcpC,EAAG,IAC7CkH,EAAU7W,KAAKiU,IAAIjU,KAAKgF,IAAI+M,EAAcnC,EAAG,IAGnDqC,EAAetC,EAAI6G,EACnBvE,EAAerC,EAAI6G,EAGnB,MAAMK,EAAgBF,EAAUN,EAC1BS,EAAgBF,EAAUN,EAG1BS,EAAgBF,EAAgB1C,EAAc0C,EAC9CG,EAAgBF,EAAgB3C,EAAc2C,GAE7Cb,GAAa7C,EAA0B,CAC5C1D,EAAGoC,EAAcpC,EAAIqH,EAAe1B,EACpC1F,EAAGmC,EAAcnC,EAAIqH,EAAe1B,EACpC1F,UAGFsB,EAAa+E,EAAU,EAEzB1Z,QAAQ2F,GACNwO,GAAe,GACf,MAAOuG,EAAeC,GAAgBjE,EAAmB/Q,GACzD,GAAI+U,EAAJ,CAGE,GAFA/U,EAAEgK,iBACFhK,EAAEC,kBACEiC,EAAAA,GAAc,OACb8S,GAAc/b,GAErB,MAC4B,IAAxB2W,EAAclC,OAAexL,EAAAA,KAC7BmN,GAAuB4F,GAAsBjV,EAAEgR,OAAuB,iBACxE/X,GAEJ,EACAqR,cAActK,GAAG,QACfqR,EAAO,QACPC,IAEA,MAAOyD,GAAiBhE,EAAmB/Q,GAC3C,GAAI+U,EAGF,OAFA/U,EAAEgK,sBACFhK,EAAEC,kBAGJ,IAAKiC,EAAAA,IAA2B,UAAXlC,EAAEvE,KAAkB,OACzC,MAAM,EAAE+R,EAAC,EAAEC,EAAC,MAAEC,GAAUH,EAAapY,QAIrC,GAAc,IAAVuY,EAAa,CACf,GAAU,IAANF,GAAiB,IAANC,EAAS,OACxBmC,EAAgBsB,EAA0B,CACxC1D,EALkB6D,EA9gBN,EA8gBkCA,EAM9C5D,EALkB6D,EA/gBN,EA+gBkCA,EAM9C5D,MArhBY,IAshBX,EACL,MACEkC,EAAgB,CACdpC,EAAG,EACHC,EAAG,EACHC,MAAO,GAGXX,IAAkB2D,EAAAA,GAAAA,IAAc,CAC9BC,KAAM,CAACnD,EAAGC,EAAGC,GACbkD,GAAI,CAAChB,EAAcpC,EAAGoC,EAAcnC,EAAGmC,EAAclC,OACrDlN,SAAUjT,GACVsjB,OAAQlE,GACRmE,SAAWhN,IACT,MAAMiQ,EAAY,CAChBvG,EAAG1J,EAAM,GACT2J,EAAG3J,EAAM,GACT4J,MAAO5J,EAAM,IAEfkL,EAAa+E,EAAU,GAG7B,EACA7Q,cAGF,OADAtV,SAASgS,iBAAiB,UAAWqR,GAAe,GAC7C,KACLwB,IACA7kB,SAASiS,oBAAoB,UAAWoR,GAAe,EAAM,CAC9D,GACA,CACDhY,EACA+V,EACA7B,EACAY,EACAW,EACAD,EACAa,EACAD,EACAJ,EACAG,EACAD,EACAzD,EACA8C,EACAvP,EACA4B,KAGF3K,EAAAA,EAAAA,KAAU,KACR,IAAKmX,EAAalY,UAAYgZ,GAAkBlP,GAAY4B,EAAc,OAC1E,MAAM,MAAE6M,GAAUH,EAAapY,QACzB+K,EAAMrE,EAAkB,GAAK,EAAI,EAGvC,IAAIqZ,EAAQ,IACRC,EAAY,EACZzH,GAJY6G,IAIQrU,EAAM,GAC1BwN,GAJY8G,IAIQtU,EAAM,IAChB,IAAVwN,GAAexN,EAAM,IAAGgV,EAAQ,IAChClI,IAAqBA,KACzBA,IAAsB0D,EAAAA,GAAAA,IAAc,CAClCC,KAAMzQ,EACN0Q,GAAI1Q,EAAMgV,EACV1U,SAAUjT,GACVsjB,OAAQjE,GACRkE,SAAWhN,IACT,IAAKuJ,EAAalY,QAAS,OAC3B,MAAMigB,GAAQ/X,EAAAA,GAAAA,IAAMyG,EAAQqR,EAAW,GACvCA,EAAYrR,EAEZ,MAAMuR,EAAa,IAAIC,WAAW,QAAS,CACzCC,OAAQH,EACRI,SAAS,IAEXnI,EAAalY,QAAQsgB,cAAcJ,EAAW,IAEhD,GACD,CAACxZ,EAAiBsS,EAAgBlP,EAAU4B,SAEzB3O,IAAlB6b,EAA6B,OAEjC,MAAM2H,EAAcvI,EAAWY,EAAe,GACxC4H,EAAcxI,EAAWY,GAAgB,GACzC6H,OAA0B1jB,IAAhByjB,EACVE,OAA0B3jB,IAAhBwjB,EACVjB,EAAUlH,EAAapY,QAAQqY,EAC/BkH,EAAUnH,EAAapY,QAAQsY,GAC/B,MAAEC,GAAUH,EAAapY,QACzB0W,EAAW0C,GAAeb,EAAQ,EAExC,OACE7T,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBAAoBsJ,IAAK+J,GACrCuI,GAAqB,IAAVlI,IAAgBiB,GAC1B9U,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAmBlK,MAAOgmB,IAAmBpH,EAAc+F,EAAU3H,KAClFjT,EAAAA,GAAAA,cAACkc,GACCxL,GAAA,GACI6C,EAAI,CACR1B,eAAgBA,EAChBG,SAAUA,EACV9G,mBAAoBA,EACpBlT,QAAS8jB,MAIf9b,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GACT,mBACA,2BACA8L,GAAY,4BAEdxR,QAASkV,EACTjM,IAAKgK,EACLxd,MAAOgmB,GAAkBrB,EAASC,EAAShH,IAE3C7T,EAAAA,GAAAA,cAACkc,GACCxL,GAAA,GACI6C,EAAI,CACRvb,QAASkc,EACTrC,eAAgBA,EAChBD,SAAUoC,EAAY1Y,QACtByW,mBAAoBA,EACpBC,SAAUA,EACV9G,mBAAoBA,GAAgC,IAAV2I,MAG7CmI,GAAqB,IAAVnI,IAAgBiB,GAC1B9U,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAmBlK,MAAOgmB,GAAkBpH,EAAc+F,EAAU3H,KACjFjT,EAAAA,GAAAA,cAACkc,GACCxL,GAAA,GACI6C,EAAI,CACR1B,eAAgBA,EAChBG,SAAUA,EACV9G,mBAAoBA,EACpBlT,QAAS6jB,MAIdE,GAAqB,IAAVlI,IAAgBxL,EAAAA,IAC1BrI,EAAAA,GAAAA,cAAA,UACE4B,KAAK,SACLzB,UAAY,mBAAkB5G,IAAYE,GAAS,WACnD,aAAYqG,EAAK,oBACjBuG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,IAG7B2jB,GAAqB,IAAVnI,IAAgBxL,EAAAA,IAC1BrI,EAAAA,GAAAA,cAAA,UACE4B,KAAK,SACLzB,UAAY,mBAAkB5G,IAAYE,GAAS,WACnD,aAAYqG,EAAK,QACjBuG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,IAG1B,IAMV,SAAS4jB,GAAkBtI,EAAI,EAAGC,EAAI,EAAGC,EAAQ,GAC/C,MAAQ,0BAAyBF,EAAEyI,QAAQ,SAASxI,EAAEwI,QAAQ,oBAAoBvI,EAAMuI,QAAQ,MAClG,CAEA,SAAShB,GAAsBvlB,EAAsBwmB,GACnD,QAAKxmB,MACDA,EAAQymB,QAAQD,IACb/iB,QAAQzD,EAAQP,QAAQ+mB,IACjC,CAEA,SAASlD,GAAqBhT,GAC5B,MAAMgR,EAAShR,EAAEgR,OACjB,QAAIiE,GAAsBjE,EAAQ,0BAC5BiE,GACFjE,EACA,qFAIFhR,EAAEgK,kBAFO,EAMb,C,4BCjuBA,MA+DA,IAAetS,EAAAA,EAAAA,KACb,CAACC,GAAUQ,SAAQie,YAAWC,eAC5B,MAAM,eAAE3K,GAAmB/T,EAAO2e,SAASC,MAC3C,GAAIF,GAAYle,EACd,MAAO,CACLqe,QAAQne,EAAAA,EAAAA,IAASF,IAAUI,EAAAA,EAAAA,IAAWZ,EAAQQ,IAAUD,EAAAA,EAAAA,IAAWP,EAAQQ,GAC3EuT,kBAIJ,IAAK0K,IAAcje,EACjB,MAAO,CAAEuT,kBAGX,MAAM1b,GAAUqb,EAAAA,EAAAA,IAAkB1T,EAAQQ,EAAQie,GAElD,MAAO,CACLpmB,UACAwmB,OAAQxmB,IAAWymB,EAAAA,EAAAA,IAAa9e,EAAQ3H,GACxC0b,iBACD,GApBL,EA7D8CgL,EAC5Cve,SACAie,YACAI,SACAG,mBACAN,WACArmB,UACA0b,qBAEA,MAAM,iBACJkL,EAAgB,aAChBC,EAAY,eACZC,IACE1d,EAAAA,EAAAA,OAEE,SAAEoD,IAAaC,EAAAA,EAAAA,MAEfsa,GAAqBzd,EAAAA,EAAAA,KAAY,KACrCsd,IAEKze,GAAWie,IAEZ5Z,EACF/F,YAAW,KACTqgB,EAAe,CAAEE,OAAO,GAAS,CAAEC,gBAAgB,IACnDJ,EAAa,CAAE1e,SAAQie,aAAY,GA3BhB,KA8BrBS,EAAa,CAAE1e,SAAQie,cACzB,GACC,CAACje,EAAQqE,EAAUqa,EAAcC,EAAgBV,EAAWQ,IAEzDjd,GAAOC,EAAAA,EAAAA,KAEb,IAAK4c,IAAYxmB,IAAYqmB,EAC3B,OAGF,MAAMa,GAAcC,EAAAA,EAAAA,IAAexd,EAAM6c,GAEzC,OACE3c,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aAAaK,QAAS0c,IAClC1e,EAAAA,EAAAA,IAASme,EAAOpnB,IACfyK,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAAC/Y,IAAKmY,EAAOpnB,GAAIiH,KAAK,SAASghB,KAAMb,EAAmB9K,eAAgBA,EAAgB4L,WAAS,IAExGzd,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAAC/Y,IAAKmY,EAAOpnB,GAAIiH,KAAK,SAAS4B,KAAMue,EAAmB9K,eAAgBA,EAAgB4L,WAAS,IAE1Gzd,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QAAQkG,IAAI,QACxBgX,IAAeK,EAAAA,GAAAA,GAAWL,IAE7Brd,EAAAA,GAAAA,cAAA,OAAKG,UAAU,OAAOkG,IAAI,QACvBmW,EACG1c,EAAKgd,EAAmB,qCAAuC,gCAC/Da,EAAAA,GAAAA,IAAoB7d,EAAsB,IAAhB3J,EAASynB,MAAa,KAGpD,IC3BJlqB,GAAqB,IAqT3B,IAAekK,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,YAAEyT,EAAW,4BAAEsM,IAAgCvM,EAAAA,EAAAA,IAAexT,IAC9D,OACJQ,EAAM,SACNN,EAAQ,QACRhG,EAAO,cACP6J,EAAa,OACbhO,EAAM,SACNuR,GACEmM,GACE,eACJM,GACE/T,EAAO2e,SAASC,OAEd,cAAEoB,GAAkBhgB,EAC1B,IAsDI3H,EAWA4nB,EAOAC,EAxEAC,IAAmB3f,IAAU4f,EAAAA,EAAAA,IAAqBpgB,EAAQQ,GAE9D,GAAIzK,IAAWe,EAAAA,GAAAA,aAAgC,CAC7C,IAAM0J,IAAUtG,EACd,MAAO,CAAE6Z,iBAAgBgM,+BAG3B,MAAM1nB,GAAUqb,EAAAA,EAAAA,IAAkB1T,EAAQQ,EAAQtG,GAClD,OAAK7B,EAIE,CACLmI,SACAtG,UACAyZ,SAAUtb,EAAQsb,SAClBwM,iBACApqB,SACAsC,UACA0b,iBACAzM,WACAyY,+BAZO,CAAEhM,iBAAgBgM,8BAc7B,CAEA,GAAIhc,EAAe,CACjB,MAAM2b,GAAO9e,EAAAA,EAAAA,IAAWZ,EAAQ+D,GAC1BzD,GAAOC,EAAAA,EAAAA,IAAWP,EAAQ+D,GAChC,IAAIf,GAAiB,EASrB,OARI0c,EACF1c,EAAiBe,IAAkBic,EAC1B1f,IACT0C,GAAiBqd,EAAAA,EAAAA,IAAY/f,IAG/B6f,GAAiBC,EAAAA,EAAAA,IAAqBpgB,EAAQ+D,GAEvC,CACL7J,UACAyZ,SAAU5P,EACV5J,YAAaulB,GAAQpf,EACrB6f,iBACAnd,iBACA+Q,iBACAhe,SACAgqB,8BACAzY,WAEJ,CAEA,KAAM9G,GAAUN,GAAYhG,GAC1B,MAAO,CAAE6Z,iBAAgBgM,+BAU3B,GALE1nB,EADEtC,GAAU,CAACe,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAAS3B,IACjF6d,EAAAA,EAAAA,IAAuB5T,EAAQQ,EAAQtG,IAEvCwZ,EAAAA,EAAAA,IAAkB1T,EAAQQ,EAAQtG,IAGzC7B,EACH,MAAO,CAAE0b,iBAAgBgM,+BAY3B,GANEE,EADElqB,GAAU,CAACe,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAAS3B,IAC5EuqB,EAAAA,EAAAA,IAA4BtgB,EAAQQ,IAEpC+f,EAAAA,EAAAA,IAAmBvgB,EAAQQ,GAIxCzK,IAAWe,EAAAA,GAAAA,QACVf,IAAWe,EAAAA,GAAAA,OACXf,IAAWe,EAAAA,GAAAA,gBACdopB,GAAgBM,EAAAA,EAAAA,IAAkBxgB,EAAQQ,EAAQN,KAAaugB,EAAAA,EAAAA,IAAgBzgB,EAAQQ,EAAQN,QAC1F,GAAInK,IAAWe,EAAAA,GAAAA,YAA+B,CACnD,MAAM4pB,GAAgBC,EAAAA,EAAAA,IAAyB3gB,IACzC,SAAE4gB,GAAcF,GAAiBA,EAAcG,eAAiBH,EAAcG,cAAcC,OAAU,CAAC,EAC7GZ,EAAgBU,CAClB,CAEA,MAAO,CACLpgB,SACAN,WACAhG,UACAyZ,SAAUtb,EAAQsb,SAClBwM,iBACApqB,SACAsC,UACA4nB,eACAC,gBACAnM,iBACAzM,WACAyY,8BACD,GAjHehgB,EAnTgBghB,EAClCvgB,SACAN,WACAhG,UACAyZ,WACAwM,iBACAnd,iBACAjN,SACAoE,cACA9B,UACA4nB,eACAC,gBACAnM,iBACAzM,WACAyY,kCAGG1nB,GAASkc,QAAQla,OAClBX,QAAQC,IAAI,YAAYqnB,KAAKC,UAAU5oB,GAASkc,UAElD,MAAM,gBACJ2M,EAAe,iBACfjC,EAAgB,gBAChBkC,EAAe,aACfjC,EAAY,eACZC,IACE1d,EAAAA,EAAAA,MAEEN,EAAS3F,QAAQrB,GAAeD,IAChC,SAAE2K,IAAaC,EAAAA,EAAAA,MAGfsc,GAAe/jB,EAAAA,EAAAA,MACfgkB,GAAe9K,EAAAA,EAAAA,GAAgC5C,GAC/C2N,GAAqC,IAAnBvN,EAAuB,aAAe,OACxDI,GAAsC,IAAnBJ,IAAyBgM,GAG3CwB,GAAmBC,GAAiBC,KAAoB7c,EAAAA,EAAAA,MACxDV,GAAiBM,KAAsBkD,EAAAA,EAAAA,IAAiB,IAEzD,aACJ/M,GAAY,aACZE,GAAY,QACZY,GAAO,YACPjB,GAAW,QACXkB,GAAO,cACPuB,GAAa,SACbiC,GAAQ,WACRI,GAAU,MACV3D,GAAK,kBACLC,GAAiB,YACjBiE,GAAW,SACXV,IACElF,EAAc,CAChB5B,UAAS8B,cAAaD,UAASnE,SAAQqE,MAAO+Z,IAAoBve,KAG9DqO,KAAcpE,KAAgBsgB,EAC9BhX,IAAa7B,GAAYnG,EAGzBugB,GAAgB/mB,IAAgBE,IAAgBL,GAAcN,OAAUK,EAExEonB,IAAW5lB,EAAAA,EAAAA,KAAQ,IACnB2lB,GACK,CAACA,IACCvnB,EACFA,EAAYmB,QAAQwG,KAAI,CAAC8f,EAAGC,IAAMA,KAAM,IAExCC,EAAAA,EAAAA,IAAuB7B,GAAgB,CAAC,EAAGC,GAAiB,GAAItkB,KAExE,CAAC8lB,GAAevnB,EAAa8lB,EAAcC,EAAetkB,KAEvDmmB,GAAqB7nB,EAAUynB,GAASK,QAAQ9nB,IAAY,GAE9DiH,GAAYkgB,GAAgBA,IAAiB1N,GAAayN,EAAa5jB,UACzE4jB,EAAa5jB,QAAUukB,KAGzBxjB,EAAAA,EAAAA,KAAU,KACR,GAAK4C,EAML,OAFA8gB,EAAAA,EAAAA,MAEOC,EAAAA,EAAqB,GAC3B,CAAC/gB,KAEJ5C,EAAAA,EAAAA,KAAU,KACJ4K,IACF9P,GACF,GACC,CAAC8P,MAEJ5K,EAAAA,EAAAA,KAAU,KACJsG,GACF5O,SAASwU,KAAKtU,UAAUgsB,OAAO,uBAAwBhhB,GAGrDoJ,EAAAA,IACFtU,SAASwU,KAAKtU,UAAUgsB,OAAO,eAAgBhhB,EACjD,GACC,CAAC0D,EAAU1D,IAEd,MAAM/C,IAAcC,EAAAA,EAAAA,MACpBE,EAAAA,EAAAA,KAAU,KACR,MAAM6jB,EAAMvjB,OAAOwjB,WAAWC,EAAAA,IAO9B,MANoC,mBAAzBF,EAAIna,iBACbma,EAAIna,iBAAiB,SAAU7J,IACK,mBAApBgkB,EAAIG,aACpBH,EAAIG,YAAYnkB,IAGX,KACkC,mBAA5BgkB,EAAIla,oBACbka,EAAIla,oBAAoB,SAAU9J,IACK,mBAAvBgkB,EAAII,gBACpBJ,EAAII,eAAepkB,GACrB,CACD,GACA,CAACA,KAEJ,MAAMqkB,IAAclM,EAAAA,EAAAA,GAAoCle,GAClDqqB,IAAenM,EAAAA,EAAAA,GAAiCjP,GAChDqb,IAAapM,EAAAA,EAAAA,GAAYxgB,GACzBioB,IAAczH,EAAAA,EAAAA,GAAYrc,GAC1B0oB,IAAkBrM,EAAAA,EAAAA,GAA2Cpc,GAC7D0oB,IAAoBtM,EAAAA,EAAAA,GAAYtZ,IAChCqX,GAAYjc,GAAUoc,EAAAA,EAAAA,GAAkBpc,QAAWkC,EACnDma,GAAYlZ,QAAQ8Y,IACpBwO,GAAuBJ,IAAgB1E,KAAgB9jB,GAE7DqE,EAAAA,EAAAA,KAAU,MACJ4V,KAAoBhT,GAAYshB,KAAeK,IAA0BF,MAC3EG,EAAAA,EAAAA,IAA4BntB,GAAqBotB,EAAAA,Kf3LhD,SACLtO,EACA3e,EACAkH,EACAqC,EACA7D,EACApD,GAEA,MAAQO,QAASqqB,GAAc7qB,EAASrC,EAAQsC,GAChD,IAAK4qB,EACH,OAGF,MAAQxlB,MAAOsZ,GAAgBmM,EAAAA,EAAAA,OAE7BzlB,MAAO0lB,EAAgBrlB,OAAQslB,IAC7BC,EAAAA,EAAAA,IAAkC3O,EAAWjZ,IACzCgC,MAAO6lB,EAASxlB,OAAQylB,IAAaC,EAAAA,EAAAA,IAC3CL,EAAgBC,EAAiB9jB,EAAW7B,MAAO6B,EAAWxB,QAE1D2lB,GAAU1M,EAAcuM,GAAW,EACnCI,EA8OR,SAAsBhP,GACpB,MAAM0N,EAAMvjB,OAAOwjB,WAAWC,EAAAA,IAC9B,IAAIqB,EAAe,MAKnB,OAJIjP,IAAcnK,EAAAA,KAChBoZ,GAAgBvB,EAAI5D,QAAU,KAAQ,OAGjCmF,EAAe7b,EAAAA,EACxB,CAtPgB8b,CAAalP,IAAc0O,EAAkBG,GAAY,EAEvE,IACE7S,IAAKmT,EAASjZ,KAAMkZ,EAAUrmB,MAAOsmB,EAAWjmB,OAAQkmB,GACtDf,EAAUpY,wBAEd,GAAI,CACF/T,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAAS3B,GAAS,CAClB,MAAMkuB,EAiMV,SAAiBC,EAAmBC,EAAoBzT,EAAa9F,EAAcnN,EAAeK,GAChG,GAAIomB,IAAcC,EAAY,CAC5B,MAAMzlB,EAAOwH,KAAK+E,IAAIxN,EAAOK,IAAWomB,EAAYC,GACpDvZ,IAASlM,EAAOjB,GAAS,EACzBiT,IAAQhS,EAAOZ,GAAU,EACzBL,EAAQiB,EACRZ,EAASY,CACX,MAAO,GAAIwlB,EAAYC,EAAY,CACjC,MAAMC,EAAW3mB,EAEjBmN,KADAnN,EAAQK,GAAUomB,EAAYC,IACbC,GAAY,CAC/B,MAAO,GAAID,EAAaD,EAAW,CACjC,MAAMG,EAAYvmB,EAElB4S,KADA5S,EAASL,GAAS0mB,EAAaD,IACdG,GAAa,CAChC,CAEA,MAAO,CACL3T,MAAK9F,OAAMnN,QAAOK,SAEtB,CArNsBwmB,CAAQhB,EAASC,EAAUM,EAASC,EAAUC,EAAWC,GAC3EH,EAAUI,EAAUvT,IACpBoT,EAAWG,EAAUrZ,KACrBmZ,EAAYE,EAAUxmB,MACtBumB,EAAaC,EAAUnmB,MACzB,CAEA,MAAMymB,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GAClEkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,EAE1BvtB,EAAQH,EAAYoH,GAAiBgmB,GAC3CnrB,EAAY9B,EAAO,CACjB0a,IAAM,GAAEgT,MACR9Y,KAAO,GAAE6Y,MACThmB,MAAQ,GAAE6lB,MACVxlB,OAAS,GAAEylB,MACXnH,UAAY,eAAcmI,QAAqBC,iBAA8BC,MAAeC,OAE9F7rB,EAAW7C,EAAOD,GAElBE,SAASwU,KAAKtU,UAAUC,IAAI,mBAE5BuuB,uBAAsB,KACpB1uB,SAASwU,KAAK5T,YAAYb,GAE1B2uB,uBAAsB,KACpB3uB,EAAMmC,MAAMikB,UAAY,GAuS9B,SAAoBpmB,GACjBA,EAAM8C,WAA2BX,MAAMY,UAAY,UACpD/C,EAAMG,UAAUuU,OAAO,kBAAmB,SAC5C,CAzSMka,CAAW5uB,GAEX8I,YAAW,KACT6lB,uBAAsB,KAChB1uB,SAASwU,KAAKoa,SAAS7uB,IACzBC,SAASwU,KAAKqa,YAAY9uB,GAE5BC,SAASwU,KAAKtU,UAAUuU,OAAO,kBAAkB,GACjD,GACD9U,EAAqBotB,EAAAA,IAAoB,GAC5C,GAEN,CekHM+B,CAAerQ,GAAW3e,EAASkH,GAAgBqC,GAAY7D,GAASpD,IAGtE8b,KAAqBhT,IAAWshB,IAAeG,OACjDG,EAAAA,EAAAA,IAA4BntB,GAAqBotB,EAAAA,KfpHhD,SAAwBjtB,EAA2BkH,EAAuB5E,GAC/E,MAAM,UAAElB,EAAWyB,QAASosB,GAAY5sB,EAASrC,EAAQsC,GACzD,IAAK2sB,EACH,OAGF,MAAM/B,EAAYhtB,SAASgvB,eAAe,eAAgBjuB,cACxD,kEAEF,IAAKisB,IAAc+B,EACjB,OAGF,MACEtU,IAAKmT,EAASjZ,KAAMkZ,EAAUrmB,MAAOsmB,EAAWjmB,OAAQkmB,GACtDf,EAAUpY,yBAEZ6F,IAAKwU,EAAWta,KAAM6Y,EAAQhmB,MAAO6lB,EAASxlB,OAAQylB,GACpDyB,EAAQna,wBAEZ,IAAI6Y,EAAQwB,EACZ,KAAKC,EAAAA,EAAAA,GAAoBhuB,GAAY,CACnC,MAAQ2G,OAAQgZ,GAAiBoM,EAAAA,EAAAA,MACjCQ,EAAQwB,EAAYrB,GAAWN,EAAWzM,CAC5C,CAEA,MAAMyN,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GACxE,IAAIkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,EAE9B,MAAM6B,EACJ,CAACtuB,EAAAA,GAAAA,OAA0BA,EAAAA,GAAAA,iBAAmCY,SAAS3B,KACnEmB,EAA2BC,EAAW6tB,IAE1C,CAACluB,EAAAA,GAAAA,MAAyBA,EAAAA,GAAAA,gBAAkCY,SAAS3B,KACjEmB,EAA2BC,EAAW6tB,GAGxC,CACFluB,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAAS3B,KACL0uB,EAAaC,EACfD,EAAaC,EACJA,EAAaD,IACtBC,EAAaD,IAIjB,MAAMY,EAAgBpvB,SAASqvB,uBAAuB,SAAS,GAEzDtvB,EAAQqvB,GAAiBxvB,EAAYoH,GAAiB+nB,EAASjvB,GAChEsvB,GACHvtB,EAAY9B,EAAO,CACjB0a,IAAM,GAAEgT,MACR9Y,KAAO,GAAE6Y,MACThmB,MAAQ,GAAE6lB,MACVxlB,OAAS,GAAEylB,MACXnH,UAAY,eAAcmI,QAAqBC,iBAA8BC,MAAeC,OAIhGC,uBAAsB,KACpB,GAAIU,EAAe,CACjB,MAAM,IACJ3U,EAAG,KACH9F,EAAI,MACJnN,EAAK,OACLK,GACEunB,EAAcxa,wBAIlB/S,EAAY9B,EAAO,CACjBuvB,WAAY,OACZ7U,IAAM,GAAEgT,MACR9Y,KAAO,GAAE6Y,MACT+B,gBAAiB,WACjBpJ,UAAY,eAAcxR,EAAO6Y,QAAa/S,EAAMgT,iBARvCjmB,EAAQ6lB,MACRxlB,EAASylB,KAQtB9lB,MAAQ,GAAE6lB,MACVxlB,OAAS,GAAEylB,OAEf,CACAttB,SAASwU,KAAKtU,UAAUC,IAAI,mBACvBivB,GAAepvB,SAASwU,KAAK5T,YAAYb,GAE9C2uB,uBAAsB,KAChBU,IACFA,EAAcltB,MAAMotB,WAAa,IAGnCvvB,EAAMmC,MAAMikB,UAAY,GAEpBgJ,IACFpvB,EAAMmC,MAAMstB,QAAU,KAGxB5sB,EAAW7C,EAAOD,GAElB+I,YAAW,KACT6lB,uBAAsB,KAChB1uB,SAASwU,KAAKoa,SAAS7uB,IACzBC,SAASwU,KAAKqa,YAAY9uB,GAE5BC,SAASwU,KAAKtU,UAAUuU,OAAO,kBAAkB,GACjD,GACD9U,EAAqBotB,EAAAA,IAAoB,GAC5C,GAEN,CeKM0C,CAAe/C,GAAaE,GAAoBJ,SAAeloB,GACjE,GACC,CACD4Z,GAAkBhT,EAAQ2hB,GAAsB/sB,EAAQ4sB,GAAYtqB,EAASoqB,GAAaG,GAC1F3lB,GAAe4lB,GAAmBvjB,GAAY7D,GAASiZ,KAGzD,MAAMiR,IAAchkB,EAAAA,EAAAA,KAAY,IAAMsd,KAAoB,CAACA,IAErD2G,IAAoBjkB,EAAAA,EAAAA,KAAY,KACpCgkB,KAEKnlB,GAAWtG,IAEZ2K,EACF/F,YAAW,KACTqgB,EAAe,CAAEE,OAAO,GAAS,CAAEC,gBAAgB,IACnDJ,EAAa,CAAE1e,SAAQN,WAAUue,UAAWvkB,GAAU,GACrDtE,IAEHspB,EAAa,CAAE1e,SAAQN,WAAUue,UAAWvkB,IAC9C,GACC,CAACyrB,GAAa9gB,EAAUrE,EAAQN,EAAUgf,EAAcC,EAAgBjlB,IAErE2rB,IAAgBlkB,EAAAA,EAAAA,KAAY,KAChCwf,EAAgB,CACd2E,WAAYtlB,EACZoB,WAAY,CAAC1H,IACb,GACD,CAACinB,EAAiB3gB,EAAQtG,IAEvBiK,IAAcxC,EAAAA,EAAAA,KAAalK,IAC/BypB,EAAgB,CACd1gB,SACAN,WACAhG,QAASzC,EACTsM,cAAe5J,GAAa1C,GAC5B1B,OAAQA,GACP,CACDgwB,uBAAuB,GACvB,GACD,CAAC5rB,GAAa1C,GAAI+I,EAAQ0gB,EAAiBnrB,EAAQmK,KAEtD3B,EAAAA,EAAAA,KAAU,IAAO4C,GAAS6kB,EAAAA,EAAAA,IAAsB,KAC9CL,IAAa,SACVprB,GAAY,CAACorB,GAAaxkB,KAE/B5C,EAAAA,EAAAA,KAAU,KACJ9C,KAAYE,KACdsqB,EAAAA,EAAAA,KACF,GACC,CAACtqB,GAAOF,KAEX,MAAM+Z,IAAa7T,EAAAA,EAAAA,KAAY,CAACukB,EAAiBtN,KAC/C,QAAere,IAAX2rB,EAAsB,OAC1B,MAAMC,EAAQxE,GAASK,QAAQkE,GAC/B,OAAoB,IAAftN,GAAoBuN,EAAQ,GAAqB,IAAdvN,GAAmBuN,EAAQxE,GAAStb,OAAS,EAC5Esb,GAASwE,EAAQvN,QAD1B,CAGgB,GACf,CAAC+I,KAEEyE,IAAqBzkB,EAAAA,EAAAA,KAAY,KACrC,GAAIggB,GAAStb,QAAU,EAErB,YADAsf,KAGF,IAAIQ,EAAQjsB,EAAUynB,GAASK,QAAQ9nB,IAAY,EAEnDisB,EAAQA,EAAQ,EAAIA,EAAQ,EAAI,EAChChiB,GAAYwd,GAASwE,GAAO,GAC3B,CAACR,GAAazrB,EAASynB,GAAUxd,KAE9BnC,IAAOC,EAAAA,EAAAA,KAoBb,OACEC,EAAAA,GAAAA,cAACmkB,EAAAA,EAAc,CACb5uB,GAAG,cACH0J,OAAQA,EACRmG,SAAUA,EACVgf,0BAAwB,EACxBC,kBAAmBxG,GAEnB7d,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBAAoBkG,IAAKvG,GAAKqc,MAAQ,WAAQ9jB,GAC1DsK,GACC3C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,qBACVqD,OAAK,EACLhH,KAAK,UACL8D,MAAM,oBACNmD,UAAW3D,GAAK,SAChBU,QAASijB,IAETzjB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGjBH,EAAAA,GAAAA,cAACskB,EAAAA,EAAU,CAACC,UAAWrF,EAAa5jB,QAAUkpB,KAAMpF,IAtCjDnnB,EACL+H,EAAAA,GAAAA,cAAC6c,GAAU,CACTrY,IAAKxM,EACLsG,OAAQrG,EAAY1C,GACpBinB,UAAQ,EACRM,kBAAkBte,EAAAA,EAAAA,IAASvG,EAAY1C,KACjC0C,EAAwBmB,SAASpB,GAAUzC,KAAQ0C,EAAwBwsB,UAAUC,eAAenvB,KAG5GyK,EAAAA,GAAAA,cAAC6c,GAAU,CACTrY,IAAKxM,EACLsG,OAAQA,EACRie,UAAWvkB,KA6BXgI,EAAAA,GAAAA,cAAC8B,GAAkB,CACjBtH,UAAWwC,GACXzD,QAASA,GACTpD,QAASA,EACT2K,eAAgBA,EAChBnD,YAAaA,GACb1F,YAAaA,EACbgF,SAAUA,GACV8E,UAAWA,GACXE,YAAaA,GACbG,eAAgB8hB,GAChBhiB,SAAUod,GACVnd,mBAAoBshB,GACpBphB,UAAWshB,GACX3hB,gBAAiBA,GACjBM,mBAAoBA,KAEtBtC,EAAAA,GAAAA,cAAC2kB,EAAAA,EAAW,CACV1lB,OAAQogB,GACRjgB,QAASmgB,GACTqF,QAAQ,QACRzsB,MAAOwF,GACPW,OAAQrG,GAAa1C,MAGzByK,EAAAA,GAAAA,cAACqT,GAAiB,CAChBrb,QAASA,EACTsb,WAAYA,GACZhV,OAAQA,EACR9E,QAASA,GACTC,MAAOA,GACPuE,SAAUA,EACV6D,cAAe5J,GAAa1C,GAC5B1B,OAAQA,EACRoL,OAAQA,EACRuT,UAAWA,GACXxQ,gBAAiBA,GACjBzI,QAASA,GACTsY,eAAgBA,EAChBzS,QAASqkB,GACTxhB,YAAaA,GACbmD,SAAUA,EACV0M,cAAe4R,KAEF,K,wCC3UrB,MAkEA,IAAe9lB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACE+mB,OACEC,KAAMC,EAAS,QACfC,EAAO,iBACPC,GACD,cACDnH,GACEhgB,EAEJ,MAAO,CACLinB,YACAG,cAAeF,EAAQG,OACvBC,gBAAiBJ,EAAQK,SACzBC,UAAWL,EAAiBE,OAC5BI,WAAYznB,EAAO0nB,aAAaC,QAChC3H,gBACD,GAlBejgB,EAlE+B6nB,EACjDzmB,SACA6e,gBACAiH,YACAG,gBACAE,kBACAE,YACAC,aACAI,SAASC,EAAAA,IACTC,oBACAC,WACAC,oBACA3mB,UACA4mB,0BAEA,MAAMlmB,GAAOC,EAAAA,EAAAA,MACNkmB,EAAQC,IAAa1gB,EAAAA,EAAAA,IAAS,IAC/B2gB,GAAMtsB,EAAAA,EAAAA,KAAQ,KAClB,IAAKoF,EAAQ,OAEb,IAAImnB,EAAcd,GAAa,GAC3BxH,IACFsI,GAAcC,EAAAA,GAAAA,IAAO,CAACvI,KAAkBsI,KAI1C,MAAMtoB,GAASwoB,EAAAA,EAAAA,MACTC,EAAYzoB,EAAO0oB,MAAM1B,KAEzB2B,EAAU,IACVvB,GAAiB,MAChBe,GAAUb,GAAoB,IACnCO,QAAQpwB,IACR,MAAM6I,EAAO2mB,EAAUxvB,GACjBioB,EAAO+I,EAAUhxB,GACvB,QAAIioB,KAAQkJ,EAAAA,EAAAA,IAAclJ,KAEnBpf,IAAQuoB,EAAAA,EAAAA,IAAiBvoB,EAAMwoB,EAAAA,GAAe,IAGjDC,GAASC,EAAAA,EAAAA,KAAYT,EAAAA,GAAAA,IAAO,KAC7BU,EAAAA,EAAAA,IAAkBjnB,EAAM2mB,EAAS1B,EAAWkB,EAAQnI,MACnDyH,GAAcI,EAAOnwB,SAAS,UAAWwxB,EAAAA,EAAAA,IAAkBzB,EAAYgB,EAAWN,GAAU,KAC9FlB,OAAW1sB,EAAW+tB,GAE1B,OAAOa,EAAAA,EAAAA,IAAoBnpB,EAAQ+oB,EAAQlB,EAAO,GACjD,CAACL,EAAWxH,EAAeoH,EAAee,EAAQb,EAAiBtlB,EAAMilB,EAAWQ,EAAYI,EAAQ1mB,IAErGioB,GAAeC,EAAAA,GAAAA,GAAiBhB,GAAK,GAE3C,OACEnmB,EAAAA,GAAAA,cAAConB,GAAAA,EAAgB,CACfnoB,OAAQA,EACRooB,cAAeH,EACfnC,UAAWA,EACXc,kBAAmBA,EACnBI,OAAQA,EACRqB,eAAgBpB,EAChBJ,SAAUA,EACVyB,mBAAoBxB,EACpB3mB,QAASA,EACT4mB,oBAAqBA,GACrB,KC9BN,IAAepoB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACjC,CACLggB,cAAehgB,EAAOggB,cACtB0J,iBAAiBlW,EAAAA,EAAAA,IAAexT,GAAQ2pB,gBAAgB/nB,YAAYyE,QAAU,GAAK,KAHnEtG,EArDsC6pB,EACxDzoB,SACA6e,gBACA0J,qBAEA,MAAM,sBACJG,EAAqB,gBACrBC,EAAe,uBACfC,EAAsB,iBACtBC,IACEvoB,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MAENgoB,EAASC,EAAaC,IAAiBvlB,EAAAA,EAAAA,MAC9CrG,EAAAA,EAAAA,KAAU,KACJ4C,GACF+oB,GACF,GACC,CAAC/oB,EAAQ+oB,IAEZ,MAAME,GAAwBzoB,EAAAA,EAAAA,KAAY,CAAC0oB,EAAqBnqB,KAC1DmqB,IAAgBrK,GAClB+J,IACAC,EAAiB,CACf3xB,QAAS2J,EAAK0nB,EACV,iDACA,oDAGNG,EAAsB,CAAErpB,OAAQ6pB,EAAaC,QAASpqB,GACxD,GACC,CAAC8f,EAAe+J,EAAwBL,EAAgB1nB,EAAM6nB,EAAuBG,IAElFrE,GAAchkB,EAAAA,EAAAA,KAAY,KAC9BmoB,GAAiB,GAChB,CAACA,IAEJ,GAAK3oB,GAAW8oB,EAIhB,OACE/nB,EAAAA,GAAAA,cAAC0lB,GAAe,CACdzmB,OAAQA,EACR4mB,kBAAmB/lB,EAAK,aACxBimB,kBAAmBmC,EACnB9oB,QAASqkB,EACTuC,oBAAqBiC,GACrB,KCPN,IAAerqB,EAAAA,EAAAA,KA9C4ByqB,EACzCC,qBAEA,MAAMrpB,EAAS3F,QAAQgvB,IAAmBA,EAAehqB,SACnD,kBACJiqB,EAAiB,uBACjBC,IACEjpB,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MAENgoB,EAASC,EAAaC,IAAiBvlB,EAAAA,EAAAA,MAC9CrG,EAAAA,EAAAA,KAAU,KACJ4C,GACF+oB,GACF,GACC,CAAC/oB,EAAQ+oB,IAEZ,MAAME,GAAwBzoB,EAAAA,EAAAA,KAAY,CAAC0oB,EAAqBnqB,KAC9DuqB,EAAkB,CAChBjqB,OAAQ6pB,EACRnqB,WACAmH,KAAMmjB,EAAgBnjB,KACtBsjB,MAAOH,EAAgBG,OACvB,GACD,CAACF,EAAmBD,IAEjB7E,GAAchkB,EAAAA,EAAAA,KAAY,KAC9B+oB,GAAwB,GACvB,CAACA,IAEJ,GAAKvpB,GAAW8oB,EAIhB,OACE/nB,EAAAA,GAAAA,cAAC0lB,GAAe,CACdzmB,OAAQA,EACR4mB,kBAAmB/lB,EAAK,aACxBimB,kBAAmBmC,EACnB9oB,QAASqkB,EACTuC,oBAAqBiC,GACrB,ICPN,IAAerqB,EAAAA,EAAAA,KArCgC8qB,EAC7CC,+BAEA,MAAM,sBAAEC,EAAqB,cAAEC,IAAkBtpB,EAAAA,EAAAA,MAC3CO,GAAOC,EAAAA,EAAAA,KAEPd,EAAS3F,QAAQqvB,IAChBZ,EAASC,EAAaC,IAAiBvlB,EAAAA,EAAAA,MAC9CrG,EAAAA,EAAAA,KAAU,KACJ4C,GACF+oB,GACF,GACC,CAAC/oB,EAAQ+oB,IAEZ,MAAM,IAAEc,EAAG,OAAEnD,EAAM,WAAEoD,GAAeJ,GAA4B,CAAC,EAE3DK,GAAsBvpB,EAAAA,EAAAA,KAAa0oB,IACvCU,EAAc,CAAEC,IAAKA,EAAMxqB,OAAQ6pB,EAAaY,eAChDH,GAAuB,GACtB,CAACE,EAAKD,EAAeD,EAAuBG,IAE/C,GAAK9pB,GAAW8oB,EAIhB,OACE/nB,EAAAA,GAAAA,cAAC0lB,GAAe,CACdzmB,OAAQA,EACR4mB,kBAAmB/lB,EAAK,UACxB6lB,OAAQA,EACRI,kBAAmBiD,EACnB5pB,QAASwpB,EACT5C,oBAAqBiC,GACrB,I,gBC4IN,SAASgB,GAAeC,GACtB,OAAIA,EAAMC,WACD,mBAGJD,EAAME,YAIJ,uBAHE,KAIX,CAEA,UAAexrB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLurB,SAAS/X,EAAAA,EAAAA,IAAexT,GAAQurB,QAChCxX,eAAgB/T,EAAO2e,SAASC,MAAM7K,kBAJxBhU,EA7KYyrB,EAAGD,UAASxX,qBAC1C,MAAM,cACJ0X,EAAa,yBACbC,EAAwB,YACxBC,EAAW,iBACX3B,IACEvoB,EAAAA,EAAAA,OACGmqB,EAAaC,EAAWC,IAAclnB,EAAAA,EAAAA,KAEvC5C,GAAOC,EAAAA,EAAAA,KAqIS8pB,MAlDQC,EAgCTZ,EA3GrB,IANA7sB,EAAAA,EAAAA,KAAU,KACJgtB,EAAQllB,OAAS,GACnBwlB,GACF,GACC,CAACN,EAASM,IAERN,EAAQllB,OAyIb,OACEnE,EAAAA,GAAAA,cAAA,OAAKzK,GAAG,WACL+D,QAAQ+vB,EAAQllB,UAbf,SADgB0lB,EAcuBR,EAAQA,EAAQllB,OAAS,IAzHhD4lB,KACpB,MAAM,KACJC,EAAI,MAAE5pB,EAAK,MAAE6pB,EAAK,kBAAEC,EAAiB,UAAEC,EAAS,MAAEhyB,EAAK,gBAAEiyB,GACvDL,EAcEM,EACFvqB,EADqBqqB,EAChB,cACA,UADeD,EAAmB,KAGrCI,EAAuBxqB,EAAZqqB,EAAiB,cAAsB,aAClDI,EACFzqB,EADsBqqB,EACjB,sCAA8C,qCAEvD,OACEnqB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQyqB,EACRtqB,QAASwqB,EACTzpB,UAAU,QACVqqB,OAAQC,EAAmBrqB,EAAOjI,GAClC6tB,oBAAqBuD,QAEElxB,IAAtB6xB,GAAmClqB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAckqB,GAC9DJ,GAASjqB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAAeud,EAAAA,GAAAA,GAAWuM,EAAO,CAAC,QACxDG,GACCpqB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAEPL,EADHqqB,EACQ,iDACA,iDAGbnqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLE,QAAM,EACNJ,UAAU,wBAEVK,QA1CgBkqB,KACtBlB,EAAyB,CACvBQ,SAEEI,GACFtC,EAAiB,CACf3xB,QAAqB2J,EAAZqqB,EAAiB,sCAA8C,uCAG5EP,GAAY,GAmCLQ,EAAkBG,EAAoBD,GAEzCtqB,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACE,QAAM,EAACJ,UAAU,wBAAwBK,QAASopB,GAAa9pB,EAAK,YAExE,EAwDD6qB,CAAad,GAGlB,gBAAiBA,GAvDOC,EAwDED,EA/C5B7pB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQyqB,EACRtqB,QAASwqB,EACTzpB,UAAU,UACVC,MAAON,EAAK,4BACZkmB,oBAAqBuD,GAEpBzpB,EAAK,mCACNE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,wBACVI,QAAM,EAENC,QArBcoqB,KACpBnB,EAAY,CACVoB,SAASC,EAAAA,GAAAA,IAAKhB,EAAgB,CAAC,YAAa,WAAY,kBAE1DF,GAAY,GAmBL9pB,EAAK,OAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASopB,GAAa9pB,EAAK,eAM/DopB,EA2BAW,EAzBjB7pB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQyqB,EACRtqB,QAASwqB,EACT5D,oBAAqBuD,EACrBppB,UAAU,QACVC,MAAO6oB,GAAeC,IAErBA,EAAME,aAAc2B,EAAAA,GAAAA,IAAqB7B,IACtCxL,EAAAA,GAAAA,GAAWwL,EAAM/yB,QAAU,CAAC,kBAAmB,QAAS,OAC5D6J,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACE,QAAM,EAACC,QAASopB,GAAa9pB,EAAK,YAnHlD,SAAS2qB,EAAmBrqB,EAAejI,GACzC,OACE6H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACZhI,GAAS6H,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAAC/gB,KAAK,QAAQrE,MAAOA,EAAO0Z,eAAgBA,EAAgB4L,WAAS,IACtFzd,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACZud,EAAAA,GAAAA,GAAWtd,IAEdJ,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACmD,OAAK,EAAClD,MAAM,cAAc9D,KAAK,UAAUiH,UAAW3D,EAAK,SAAUU,QAASopB,GAClF5pB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAIrB,CA4HQ,K,gBCxKV,MA0BA,IAAevC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuBgtB,EAAAA,GAAAA,KAAKxZ,EAAAA,EAAAA,IAAexT,GAAS,CAAC,mBADpCD,EA1BkBmtB,EAAGC,oBACvC,MAAM,oBAAEC,IAAwB3rB,EAAAA,EAAAA,MAEhC,GAAK0rB,EAAc9mB,OAInB,OACEnE,EAAAA,GAAAA,cAAA,OAAKzK,GAAG,iBACL01B,EAAcrrB,KAAI,EACjBzJ,UAASgK,YAAWgrB,UAAS7Y,SAAQ8Y,aAAYhrB,WAEjDJ,EAAAA,GAAAA,cAACqrB,GAAAA,EAAY,CACXjrB,MAAOA,GAAQsd,EAAAA,GAAAA,GAAWtd,EAAO,CAAC,kBAAmB,QAAS,KAAM,eAAY/H,EAChFia,OAAQA,EACR8Y,WAAYA,EACZjrB,UAAWA,EACXhK,SAASunB,EAAAA,GAAAA,GAAWvnB,EAAS,CAAC,kBAAmB,QAAS,KAAM,UAEhEm1B,UAAWA,IAAMJ,EAAoB,CAAEC,gBAGvC,K,4BCvBV,MA4BA,IAAevtB,EAAAA,EAAAA,KA5BqB2tB,EAAG3gB,UACrC,MAAM,oBAAE4gB,IAAwBjsB,EAAAA,EAAAA,MAE1BO,GAAOC,EAAAA,EAAAA,KAEP0rB,GAAahsB,EAAAA,EAAAA,KAAY,KAC7B9C,OAAO+uB,MAAKC,EAAAA,GAAAA,GAAe/gB,GAAM,SAAU,YAC3C4gB,EAAoB,CAAE5gB,SAAKvS,GAAY,GACtC,CAACmzB,EAAqB5gB,IAEnBghB,GAAgBnsB,EAAAA,EAAAA,KAAY,KAChC+rB,EAAoB,CAAE5gB,SAAKvS,GAAY,GACtC,CAACmzB,IAEEK,GAAe1E,EAAAA,GAAAA,GAAiBvc,GAEtC,OACE5K,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQ3F,QAAQsR,GAChBxL,QAASwsB,EACTxrB,MAAON,EAAK,gBACZsS,WAAWsL,EAAAA,GAAAA,GAAW5d,EAAK,gBAAiB+rB,GAAe,CAAC,UAC5DE,aAAcjsB,EAAK,gBACnBksB,eAAgBP,GAChB,I,gBCtCN,SAA2B,uBCgH3B,IAAe7tB,EAAAA,EAAAA,KAvFoBquB,EACjCC,UAASC,kBAET,MAAM,kBAAEC,EAAiB,iBAAEC,EAAgB,kBAAEC,IAAsB/sB,EAAAA,EAAAA,OAC5DgtB,EAAgBC,IAAmBhnB,EAAAA,EAAAA,KAAS,IAC5CinB,EAAsBC,IAAyBlnB,EAAAA,EAAAA,KAAS,GACzDmnB,GAAcxF,EAAAA,GAAAA,GAAiB+E,GAAS,IACxC,OAAEU,EAAM,MAAEC,EAAK,yBAAEC,GAA6BH,GAAaI,SAAW,CAAC,EACvEjE,EAAM+D,GAAQvG,EAAAA,EAAAA,MAAYE,MAAM1B,KAAK+H,QAASx0B,EAE9CyH,GAAOC,EAAAA,EAAAA,KAEP0rB,GAAahsB,EAAAA,EAAAA,KAAY,KACzBysB,GAASthB,KAAO2hB,GACGL,EAAQc,OAASX,EAAmBC,GAC5C,CACXW,eAAgBR,IAGlB9vB,OAAO+uB,MAAKC,EAAAA,GAAAA,GAAegB,GAAa/hB,KAAM,SAAU,YAE1DwhB,GAAmB,GAClB,CACDF,EAASK,EAAgBH,EAAmBC,EAAkBC,EAAmBG,EAAsBE,IAGnGf,GAAgBnsB,EAAAA,EAAAA,KAAY,KAChC2sB,GAAmB,GAClB,CAACA,IAEEc,GAAqBztB,EAAAA,EAAAA,KAAawK,IACtCuiB,EAAgBviB,GAChByiB,EAAsBziB,EAAM,GAC3B,CAACuiB,IAUJ,OAPAnwB,EAAAA,EAAAA,KAAU,KACJuwB,IACFJ,GAAgB,GAChBE,EAAsBpzB,QAAQwzB,IAChC,GACC,CAACA,EAA0BF,IAG5B5sB,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQ3F,QAAQ4yB,GAASthB,KACzBxL,QAASwsB,EACTxrB,MAAON,EAAK,gBACZisB,aAAcjsB,EAAK,gBACnBksB,eAAgBP,IAEf/N,EAAAA,GAAAA,GAAW5d,EAAK,gBAAiB6sB,GAAa/hB,KAAM,CAAC,UACrDgiB,GACC5sB,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPC,QAASb,EACTc,MACErtB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,MACG0d,EAAAA,GAAAA,GACC5d,EAAK,gCAAiC,CAAC8sB,GAAQU,EAAAA,EAAAA,IAAgBnB,KAC/D,CAAC,qBAIPoB,QAASL,EACT/sB,UAAWrK,KAGdg3B,GACC9sB,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPC,QAASX,EACTY,MACErtB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,MACG0d,EAAAA,GAAAA,GACC5d,EAAK,yCAAyCwtB,EAAAA,EAAAA,IAAgBxE,IAC9D,CAAC,qBAIPyE,QAASb,EACThiB,UAAW6hB,EACXpsB,UAAWrK,KAGD,IC3Fd03B,GAA6B,IAAbC,EAAAA,IAkBhBC,GAAkB,CACtB,eACA,eACA,eACA,eACA,eACA,eACA,gBAmUF,SAASC,GAAcC,EAAcC,EAAeC,EAAaC,EAAgBC,GAC/E,MAAMC,EAAc,IAAI5X,KAAKuX,EAAMC,EAAOC,GACpCI,EAAeH,IAAWI,EAAAA,GAAAA,IAAYJ,GACtCK,EAAeJ,IAAWG,EAAAA,GAAAA,IAAYH,GAE5C,SAAII,GAAgBH,EAAcG,OAEvBF,GAAgBD,EAAcC,EAK3C,CAEA,SAASG,GAAgBpkB,GACvB,OAAOqkB,OAAOrkB,GAAOskB,SAAS,EAAG,IACnC,CAEA,SAASC,GAAUZ,EAAcC,EAAeC,GAC9C,MAAQ,GAAEF,KAAQC,EAAQ,KAAKC,GACjC,CAaA,UAAelwB,EAAAA,EAAAA,KAjWqB6wB,EAClCC,aACAC,QACAC,QACAC,eACAC,aACA7vB,SACA8vB,iBACAC,oBACAC,oBACA7vB,UACA8vB,WACAC,0BAEA,MAAMrvB,GAAOC,EAAAA,EAAAA,KACPuW,EAAM,IAAID,KAEV0X,GAAUl0B,EAAAA,EAAAA,KAAQ,IAClBg1B,IAAiBF,EAAc,IAAItY,KAChC,IAAIA,KAAKrS,KAAK+E,IAAI4lB,GA9CP,OA+CjB,CAACE,EAAcF,IACZX,GAAUn0B,EAAAA,EAAAA,KAAQ,IAClBi1B,IAAeF,EAAc,IAAIvY,KAC9B,IAAIA,KAAKrS,KAAKgF,IAAI4lB,GAASpB,GAAeA,MAChD,CAACsB,EAAYF,IAEVQ,GAAqBv1B,EAAAA,EAAAA,KAAQ,IAAO60B,EAAa,IAAIrY,KAAKqY,GAAc,IAAIrY,MAAS,CAACqY,IACtFW,GAAahb,EAAAA,EAAAA,GAAYpV,IACxBqwB,EAAoBC,EAAwBC,IAA4B9sB,EAAAA,EAAAA,IAAQ,IAEhF+sB,EAAcC,IAAmBlqB,EAAAA,EAAAA,IAAe4pB,IAChDO,EAAqBC,IAA0BpqB,EAAAA,EAAAA,IACpD,IAAI6Q,KAAKoZ,EAAaI,cAAeJ,EAAaK,WAAY,KAEzDC,EAAeC,IAAoBxqB,EAAAA,EAAAA,IACxC6oB,GAAgBe,EAAmBa,cAE9BC,EAAiBC,IAAsB3qB,EAAAA,EAAAA,IAC5C6oB,GAAgBe,EAAmBgB,eAG/BnC,EAAcO,GAAUiB,EAAaI,cAAeJ,EAAaK,WAAYL,EAAaY,WAC1FC,EAAcX,EAAoBE,cAClCU,EAAeZ,EAAoBG,YAEzCzzB,EAAAA,EAAAA,KAAU,MACHgzB,GAAcpwB,IACjBywB,EAAgBN,GAChBQ,EAAuB,IAAIvZ,KAAK+Y,EAAmBS,cAAeT,EAAmBU,WAAY,IAC7Ff,IACFiB,EAAiB3B,GAAgBe,EAAmBa,aACpDE,EAAmB9B,GAAgBe,EAAmBgB,gBAE1D,GACC,CAAChB,EAAoBnwB,EAAQowB,EAAYN,KAE5C1yB,EAAAA,EAAAA,KAAU,KACJwyB,IAAiBS,GAAsBG,EAAae,UAAYzC,EAAQyC,YAC1Ed,EAAgB3B,GAChBiC,EAAiB3B,GAAgBN,EAAQkC,aACzCE,EAAmB9B,GAAgBN,EAAQqC,eAC7C,GACC,CAACvB,EAAcS,EAAoBvB,EAAS0B,KAE/CpzB,EAAAA,EAAAA,KAAU,KACJyyB,IAAeQ,GAAsBG,EAAae,UAAYxC,EAAQwC,YACxEd,EAAgB1B,GAChBgC,EAAiB3B,GAAgBL,EAAQiC,aACzCE,EAAmB9B,GAAgBL,EAAQoC,eAC7C,GACC,CAACvB,EAAcC,EAAYQ,EAAoBtB,EAASD,EAAS0B,KAEpEpzB,EAAAA,EAAAA,KAAU,KACR,GAAIqyB,EAAY,CACd,MAAM+B,EAAkB,IAAIpa,KAAKqY,GACjCgB,EAAgBe,GAChBT,EAAiB3B,GAAgBoC,EAAgBR,aACjDE,EAAmB9B,GAAgBoC,EAAgBL,cACrD,IACC,CAAC1B,IAEJ,MAAMgC,EAA0B5B,GAAcwB,GAAeha,EAAIuZ,eAAiBU,GAAgBja,EAAIwZ,YAChG9B,GAAWsC,GAAetC,EAAQ6B,eAAiBU,GAAgBvC,EAAQ8B,WAC3Ea,EAAyB9B,GAAgByB,GAAeha,EAAIuZ,eAAiBU,GAAgBja,EAAIwZ,YAEjG,cAAEc,EAAa,iBAAEC,EAAgB,cAAEC,IAAkBj3B,EAAAA,EAAAA,KAAQ,IA2MrE,SAA2B+zB,EAAcC,GACvC,MAAM+C,EAA0B,GAC1BC,EAA6B,GAC7BC,EAA0B,GAE1BlT,EAAO,IAAIvH,KACjBuH,EAAKmT,QAAQ,GACbnT,EAAKoT,SAASnD,GACdjQ,EAAKqT,YAAYrD,GACjB,MAAMsD,EAAWtT,EAAKuT,UAAY,EAC5BC,EAAuB,IAAI/a,KAAKuX,EAAMC,EAAO,GAAGwC,UAEtD,IAAK,IAAI1Q,EAAI,EAAGA,EAAIuR,EAAUvR,IAC5BiR,EAAc/sB,KAAKutB,EAAuBF,EAAWvR,EAAI,GAG3D,KAAO/B,EAAKkS,aAAejC,GAAO,CAChC,MAAMwD,EAAWzT,EAAKyS,UACtBQ,EAAiBhtB,KAAKwtB,GACtBzT,EAAKmT,QAAQM,EAAW,EAC1B,CAEA,MAAMC,GAAoBT,EAAiB1sB,OAASysB,EAAczsB,QAAU,EAC5E,GAAImtB,EAAmB,EACrB,IAAK,IAAI3R,EAAI,EAAGA,GAAK,EAAI2R,EAAkB3R,IACzCmR,EAAcjtB,KAAK8b,GAIvB,MAAO,CAAEiR,gBAAeC,mBAAkBC,gBAC5C,CAxOIS,CAAkBjB,EAAaC,IAC9B,CAACA,EAAcD,IAEZkB,GAAc33B,EAAAA,EAAAA,KAAQ,IACnBm1B,GA4PX,SAA2BlvB,EAAc8d,GACvC,MAAMkQ,GAAM2D,EAAAA,GAAAA,IAAmB7T,EAAM9d,EAAK4xB,MAG1C,OAAI5D,KAFU2D,EAAAA,GAAAA,IAAmB,IAAIpb,KAAQvW,EAAK4xB,MAGzC5xB,EAAK,0CAA0C6xB,EAAAA,GAAAA,IAAW7xB,EAAM8d,IAGlE9d,EAAK,sCAAuC,CAACguB,GAAK6D,EAAAA,GAAAA,IAAW7xB,EAAM8d,IAC5E,CArQgCgU,CAAkB9xB,EAAM2vB,IACnD,CAAC3vB,EAAM2vB,EAAcT,IA+BlB6C,GAAepyB,EAAAA,EAAAA,KAAY,KAC/ByvB,EAASO,EAAa,GACrB,CAACP,EAAUO,IAERqC,GAAoBryB,EAAAA,EAAAA,KAAa0G,IACrC,MAAM8D,EAAQ9D,EAAEgR,OAAOlN,MAAM8nB,QAAQ,UAAW,IAChD,IAAK9nB,EAAM9F,OAGT,OAFA6rB,EAAiB,SACjB7pB,EAAEgR,OAAOlN,MAAQ,IAInB,MAAM+nB,EAAQhuB,KAAK+E,IAAI,EAAG/E,KAAKgF,IAAIipB,OAAOhoB,GAAQ,KAE5C2T,EAAO,IAAIvH,KAAKoZ,EAAae,WACnC5S,EAAKsU,SAASF,GACdtC,EAAgB9R,GAEhB,MAAMuU,EAAW9D,GAAgB2D,GACjChC,EAAiBmC,GACjBhsB,EAAEgR,OAAOlN,MAAQkoB,CAAQ,GACxB,CAAC1C,IAEE2C,GAAsB3yB,EAAAA,EAAAA,KAAa0G,IACvC,MAAM8D,EAAQ9D,EAAEgR,OAAOlN,MAAM8nB,QAAQ,UAAW,IAChD,IAAK9nB,EAAM9F,OAGT,OAFAgsB,EAAmB,SACnBhqB,EAAEgR,OAAOlN,MAAQ,IAInB,MAAMooB,EAAUruB,KAAK+E,IAAI,EAAG/E,KAAKgF,IAAIipB,OAAOhoB,GAAQ,KAE9C2T,EAAO,IAAIvH,KAAKoZ,EAAae,WACnC5S,EAAK0U,WAAWD,GAChB3C,EAAgB9R,GAEhB,MAAM2U,EAAalE,GAAgBgE,GACnClC,EAAmBoC,GACnBpsB,EAAEgR,OAAOlN,MAAQsoB,CAAU,GAC1B,CAAC9C,IA4BJ,OACEzvB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQA,EACRG,QAASA,EACTe,UAAU,gBACVD,QAAS2xB,GAET7xB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cACNE,QAASpB,GAETY,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGfH,EAAAA,GAAAA,cAAA,UACGF,EAAM,YAAWywB,EAAe,KAChC,IACAD,GAGHtwB,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cACNoK,SAAUimB,EACVnwB,QAAUmwB,OAA2Ct4B,EA9H/D,WACEu3B,GAAwB4C,IACtB,MAAMC,EAAW,IAAIpc,KAAKmc,GAG1B,OAFAC,EAASzB,SAASyB,EAAS3C,WAAa,GAEjC2C,CAAQ,GAEnB,GAyHUzyB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAGfH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cACNoK,SAAUgmB,EACVlwB,QAAUkwB,OAA2Cr4B,EA/H/D,WACEu3B,GAAwB4C,IACtB,MAAMC,EAAW,IAAIpc,KAAKmc,GAG1B,OAFAC,EAASzB,SAASyB,EAAS3C,WAAa,GAEjC2C,CAAQ,GAEnB,GA0HUzyB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iBAKnBH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACZutB,GAAgB9tB,KAAKkuB,GACpB9tB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4BACbH,EAAAA,GAAAA,cAAA,YAAOF,EAAKguB,OAGf8C,EAAchxB,KAAKyxB,GAClBrxB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBAAsBH,EAAAA,GAAAA,cAAA,YAAOqxB,MAE7CR,EAAiBjxB,KAAKyxB,GACrBrxB,EAAAA,GAAAA,cAAA,OACE0yB,KAAK,SACLC,SAAU,EACVnyB,QAASA,KAAMoyB,OA3IDhV,EA2IkByT,OA1I1C3B,GAAiB8C,IACf,MAAMC,EAAW,IAAIpc,KAAKmc,GAK1B,OAJAC,EAAS1B,QAAQnT,GACjB6U,EAASzB,SAAST,GAClBkC,EAASxB,YAAYX,GAEdmC,CAAQ,IAPnB,IAA0B7U,CA2I4B,EAC1Czd,WAAW+F,EAAAA,GAAAA,GACT,aACAynB,GACE2C,EAAaC,EAAcc,EAAUtD,EAASC,GAE5C,WACGqD,EAAW,YAAc,GAChCpD,IAAgBO,GAAU8B,EAAaC,EAAcc,IAAa,aAGnE/3B,QAAQ+3B,IACPrxB,EAAAA,GAAAA,cAAA,YAAOqxB,MAIZP,EAAclxB,KAAKyxB,GAClBrxB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBAAsBH,EAAAA,GAAAA,cAAA,YAAOqxB,QAKjDtC,GA1GD/uB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,SACE4B,KAAK,OACLzB,UAAU,eACV0yB,UAAU,UACV5oB,MAAO8lB,EACP7lB,SAAU4nB,EACVgB,QAASvD,EACTwD,OAAQvD,IACR,IAEFxvB,EAAAA,GAAAA,cAAA,SACE4B,KAAK,OACLzB,UAAU,eACV0yB,UAAU,UACV5oB,MAAOimB,EACPhmB,SAAUkoB,EACVU,QAASvD,EACTwD,OAAQvD,KA0FZxvB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAASqxB,GACdL,GAEFvC,GACCjvB,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAAS2uB,EAAqB5uB,QAAM,GACzC0uB,IAID,ICjSZ,IAAerxB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CAAE4wB,YAAYpd,EAAAA,EAAAA,IAAexT,GAAQk1B,6BAF5Bn1B,EAxB+Bo1B,EACjDh0B,SAAQyvB,iBAER,MAAM,qBAAEwE,EAAoB,qBAAEC,IAAyB5zB,EAAAA,EAAAA,MAEjD6zB,GAAmB3zB,EAAAA,EAAAA,KAAame,IACpCsV,EAAqB,CAAEG,UAAWzV,EAAK0V,UAAY,MACnDH,GAAsB,GACrB,CAACA,EAAsBD,IAEpBpzB,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACyuB,GAAa,CACZxvB,OAAQA,EACRyvB,WAAYA,EACZI,YAAU,EACVE,kBAAmBlvB,EAAK,cACxBV,QAAS+zB,EACTjE,SAAUkE,GACV,K,2BCZN,MA0MA,IAAex1B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUy1B,aACF,CACL/V,KAAM+V,GAAS70B,EAAAA,EAAAA,IAAWZ,EAAQy1B,QAAUl7B,EAC5Cm7B,WAAYD,GAASE,EAAAA,EAAAA,IAAiB31B,EAAQy1B,QAAUl7B,EACxDq7B,cAAe51B,EAAO61B,YAAYC,cALpB/1B,EA5L+Bg2B,EACjD50B,SACAs0B,SACAO,kBACAtW,OACAgW,aACAE,oBACI,IAAAK,EAAAC,EAAAC,EACJ,MAAM,cAAEC,EAAa,cAAEC,EAAa,sBAAEC,IAA0B70B,EAAAA,EAAAA,MAE1DO,GAAOC,EAAAA,EAAAA,KACPs0B,GAAgBlN,EAAAA,GAAAA,GAAiB3J,GACjC8W,GAA2BnN,EAAAA,GAAAA,GAAiB2M,GAE5CS,GAAWp5B,EAAAA,EAAAA,IAAyB,OAEnC4sB,EAASC,EAAaC,IAAiBvlB,EAAAA,EAAAA,MACvC8xB,EAAWC,IAAgBjvB,EAAAA,EAAAA,IAAyC,QAAjCuuB,EAASM,GAAeG,iBAAS,IAAAT,EAAAA,EAAI,KACxEW,EAAUC,IAAenvB,EAAAA,EAAAA,IAAwC,QAAhCwuB,EAASK,GAAeK,gBAAQ,IAAAV,EAAAA,EAAI,KACrEY,EAAOC,IAAYrvB,EAAAA,EAAAA,IAA2C,QAAnCyuB,EAASI,GAAeS,mBAAW,IAAAb,EAAAA,EAAI,KAClEc,EAAwBC,IAA6BxvB,EAAAA,EAAAA,KAAkB,GACxEyvB,EAAiB37B,QAAQk7B,KAAeV,GAAmBc,KAEjEv4B,EAAAA,EAAAA,KAAU,KACI,IAAA64B,EAAAC,EAAAC,EAARn2B,IACF+oB,IACAyM,EAAqC,QAAzBS,EAACb,GAAeG,iBAAS,IAAAU,EAAAA,EAAI,IACzCP,EAAmC,QAAxBQ,EAACd,GAAeK,gBAAQ,IAAAS,EAAAA,EAAI,IACvCN,EAAmC,QAA3BO,EAACf,GAAeS,mBAAW,IAAAM,EAAAA,EAAI,IACvCJ,GAA0B,GAC5B,GACC,CAAC/1B,EAAQ+oB,EAAaqM,GAAeG,UAAWH,GAAeK,SAAUL,GAAeS,eAE3Fz4B,EAAAA,EAAAA,KAAU,MACHgM,EAAAA,IAAgB0f,GACnBnrB,YAAW,KAAQ23B,EAASj5B,SAAS+5B,OAAO,GAjDvB,IAkDvB,GACC,CAACtN,IAEJ,MAAMuN,GAAwB71B,EAAAA,EAAAA,KAAa0G,IACzCsuB,EAAatuB,EAAEgR,OAAOlN,MAAM,GAC3B,IAEGsrB,GAAoB91B,EAAAA,EAAAA,KAAa0G,IACrC0uB,GAASW,EAAAA,GAAAA,IAA0B9B,EAAevtB,EAAEgR,OAAOlN,OAAO,GACjE,CAACypB,IAEE+B,GAAuBh2B,EAAAA,EAAAA,KAAa0G,IACxCwuB,EAAYxuB,EAAEgR,OAAOlN,MAAM,GAC1B,IAEGwZ,GAAchkB,EAAAA,EAAAA,KAAY,KAC9B20B,IACAK,EAAa,IACbE,EAAY,IACZE,EAAS,GAAG,GACX,CAACT,IAEEvC,GAAepyB,EAAAA,EAAAA,KAAY,KAC3Bq0B,IAAoBP,EACtBY,EAAc,CACZK,YACAE,WACAI,YAAaF,IAGfV,EAAc,CACZX,SACAiB,YACAE,WACAK,0BAEJ,GACC,CAACP,EAAWL,EAAeL,EAAiBY,EAAUE,EAAOG,EAAwBb,EAAeX,IAEvG,GAAKt0B,GAAW8oB,EAkFhB,OACE/nB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UAAU,kBACVC,MAAON,EAAK,cACZb,OAAQA,EACRG,QAASqkB,EACTuC,oBAAqBiC,GAEpBoM,GApFDr0B,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BAA2BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAClE2H,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAAC/gB,KAAK,QAAQghB,KAAM6W,EAAelvB,KAAO,GAAEqvB,KAAaE,MAChE10B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCACVk0B,GAAeS,aACZU,EAAAA,GAAAA,IAA0B9B,EAAeW,EAAcS,aACvDh1B,EAAK,iBAEXE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,+BAA+BkG,IAAI,SAChDqvB,EAAAA,EAAAA,IAAc51B,EAAMu0B,EAAgBb,MAI3CxzB,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRlsB,IAAK8qB,EACLtqB,MAAOuqB,EACPnH,MAAOvtB,EAAK,aACZ6yB,SAAU,EACVzoB,SAAUorB,IAEZt1B,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACR1rB,MAAOyqB,EACPrH,MAAOvtB,EAAK,YACZ6yB,SAAU,EACVzoB,SAAUurB,IAEZz1B,EAAAA,GAAAA,cAAA,KAAGG,UAAU,+BACVud,EAAAA,GAAAA,GACC5d,EAAK,+BAAgCu0B,GAAeG,WAAa,IACjE,CAAC,QAAS,qBAGdx0B,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPC,QAAS2H,EACTpC,SAAU,EACVpF,QAASyH,EACT3H,MAAOvtB,EAAK,2BAEdE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,+BACVud,EAAAA,GAAAA,GAAW5d,EAAK,wCAAyCu0B,GAAeG,cA6C5EF,GArCDt0B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,+BAA+BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACtE2H,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAAC/gB,KAAK,QAAQ2I,KAAO,GAAEqvB,KAAaE,MAC3C10B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRlsB,IAAK8qB,EACLtqB,MAAO2qB,EACP/B,UAAU,MACVxF,MAAOvtB,EAAK,qBACZ6yB,SAAU,EACVzoB,SAAUqrB,IAEZv1B,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACR1rB,MAAOuqB,EACPnH,MAAOvtB,EAAK,aACZ6yB,SAAU,EACVzoB,SAAUorB,IAEZt1B,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACR1rB,MAAOyqB,EACPrH,MAAOvtB,EAAK,YACZ6yB,SAAU,EACVzoB,SAAUurB,MAiBhBz1B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLE,QAAM,EACNJ,UAAU,wBACVK,QAASijB,GAER3jB,EAAK,WAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLE,QAAM,EACNJ,UAAU,wBACVuK,UAAWuqB,EACXz0B,QAASqxB,GAER/xB,EAAK,UAGJ,K,4BC7EZ,MCpFM81B,GAAqB,CACzB,gBACA,oBACA,eACA,cACA,eACA,2CACAzkB,KAAK,KAED0kB,GAA8C,CAClDC,GAAI,KACJC,OAAQ,SACRC,MAAO,SA4aT,IAAep4B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUm4B,aACT,MAAM,MAAEpJ,GAAUoJ,GAAU,CAAC,EACvBC,EAAYrJ,EAAQ/uB,EAAOq4B,WAAWC,KAAKvJ,QAASx0B,EACpDywB,EAAM+D,GAAQnuB,EAAAA,EAAAA,IAAWZ,EAAQ+uB,QAASx0B,EAC1C+F,GAAOi4B,EAAAA,EAAAA,IAAkBv4B,GACzBw4B,GAAQC,EAAAA,EAAAA,IAAYz4B,IACpB,mBAAE04B,EAAkB,OAAEC,IAAWnlB,EAAAA,EAAAA,IAAexT,GAAQ44B,QAE9D,MAAO,CACLR,YACApN,MACA1qB,OACAk4B,QACAE,qBACAG,cAAeF,EAChB,GAhBe54B,EAza2B+4B,EAC7CX,SACA73B,OACA0qB,MACAoN,YACAI,QACAE,qBACAG,oBAEA,MAAM,YACJE,EAAW,gBACXC,EAAe,eACfC,EAAc,gBACdC,EAAe,iBACfC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,qBACXC,EAAoB,iBACpBtP,IACEvoB,EAAAA,EAAAA,OACG83B,EAAYC,IAAiB9xB,EAAAA,EAAAA,OAC7B+xB,EAAqBC,IAA0BhyB,EAAAA,EAAAA,KAAS,IACxDiyB,EAAiBC,IAAsBlyB,EAAAA,EAAAA,KAASmyB,EAAAA,GAAAA,MAA4BC,WAC5EC,EAAaC,IAAkBtyB,EAAAA,EAAAA,KAASmyB,EAAAA,GAAAA,MAA4BC,WACpEG,EAAcC,IAAmBxyB,EAAAA,EAAAA,KAAS,IAC1CyyB,EAAkBC,EAAgBC,IAAmBz1B,EAAAA,EAAAA,IAAQ,IAC7D01B,EAAUC,EAAYC,IAAgB51B,EAAAA,EAAAA,IAAQ,IAC9C61B,EAAaC,IAAkBhzB,EAAAA,EAAAA,OAChC,SAAE7C,IAAaC,EAAAA,EAAAA,MACf61B,GAAkBpkB,EAAAA,EAAAA,GAAYkkB,GAC9BG,EAAuBH,GAAeE,EAGtCE,GAAWx9B,EAAAA,EAAAA,IAA0B,MAErC2E,GAAOC,EAAAA,EAAAA,MACP,IACJ6K,EAAG,WAAEguB,EAAU,QAAEC,EAAO,iBAAEC,EAAgB,SAAE96B,IAC1Ci4B,GAAU,CAAC,EACTh3B,GAAS3F,QAAQsR,GACjBmuB,IAAYF,EAEZG,IAAcv5B,EAAAA,EAAAA,KAAa2Z,IAC/B,MAAM,UAAE6f,EAAS,UAAEC,GAAc9f,EAcjC,GAbkB,kBAAd6f,GACFpC,IAGgB,yBAAdoC,IACF7B,EAAqB,CACnB+B,KAAMD,EAAUC,OAElBhC,EAAY,CACVgC,KAAMD,EAAUC,QAIF,yBAAdF,IAAyCzC,EAAoB,CAC/D,MAAM4C,EAAUC,EAAAA,IAAkBH,EAAUI,UAC5CrC,EAAiB,CAAErsB,IAAKwuB,IACxBvC,GACF,CAEA,GAAkB,sBAAdoC,EAAmC,CACrC,MAAMG,EAAUF,EAAUtuB,IAC1BjO,OAAO+uB,KAAK0N,EAAS,SAAU,aACjC,CAMA,GAJkB,8BAAdH,GACFzB,EAAuB0B,EAAUK,YAGjB,iCAAdN,EAA8C,CAChD,MAAMO,GAAc7B,EAAAA,GAAAA,MACdr3B,GAAQm5B,EAAAA,GAAAA,IAAiBP,EAAU54B,OAAS44B,EAAU54B,MAAQk5B,EAAY5B,SAChFF,EAAmBp3B,EACrB,CAEA,GAAkB,6BAAd24B,EAA0C,CAC5C,MAAMO,GAAc7B,EAAAA,GAAAA,MAEd+B,EAAWF,EADLN,EAAUS,WAEhBr5B,GAAQm5B,EAAAA,GAAAA,IAAiBC,GAAYA,EAAWF,EAAY5B,SAClEE,EAAex3B,EACjB,CAWA,GATkB,sBAAd24B,IACFpC,IACAC,EAAgB,CACdhO,IAAKA,EACL8P,WAAYA,EACZgB,KAAMV,EAAUU,QAIF,8BAAdX,EAA2C,CAC7C,MAAMO,GAAc7B,EAAAA,GAAAA,MACdr3B,GAAQm5B,EAAAA,GAAAA,IAAiBP,EAAU54B,OAAS44B,EAAU54B,MAAQk5B,EAAYK,aAC1EC,GAAYL,EAAAA,GAAAA,IAAiBP,EAAUa,YAAcb,EAAUa,WAAaP,EAAYO,WAC9FzC,EAAc,CACZrwB,UAAWiyB,EAAUK,YAAcjgC,QAAQ4/B,EAAU/zB,MAAM60B,OAAO71B,QAClEyN,SAAUsnB,EAAUe,UACpB90B,KAAM+zB,EAAU/zB,MAAQ,GACxB7E,QACAw5B,YACAI,kBAAmBhB,EAAUiB,qBAEjC,CAMA,GAJkB,mCAAdlB,GACFjB,EAAgBkB,EAAUkB,mBAGV,uBAAdnB,EAAoC,CACtC,IAAKC,EAAU/iC,QAAQ6jC,OAAO71B,SAAW+0B,EAAUmB,SAASl2B,QAAU+0B,EAAUmB,QAAQl2B,OAAS,EAAG,OACpGq0B,EAAeU,EACjB,CAEkB,+BAAdD,GACFnR,EAAiB,CACf3xB,QAAS,oDAEb,GACC,CACD2yB,EAAK8P,EAAY/B,EAAaM,EAAaF,EAAkBH,EAAiBM,EAC9EZ,EAAoB1O,KAGhB,YACJwS,GAAW,UAAEC,GAAS,aAAEC,GAAY,UAAEC,IDxCnBC,EACrBjxB,EACAxK,EACA07B,EACAC,EACAC,KAEA,MAAMC,GAAkB3/B,EAAAA,EAAAA,KAAgB,GAClC4/B,GAAmB5/B,EAAAA,EAAAA,MACnB6lB,GAAajM,EAAAA,GAAAA,MAEnB1Y,EAAAA,EAAAA,KAAU,KACR,IAAKoN,EAAInO,UAAY2D,EAAQ,OAE7B,MAAM+7B,EAAaA,KACjBH,KAAU,EAGNI,EAAQxxB,EAAInO,QAElB,OADA2/B,EAAMl1B,iBAAiB,OAAQi1B,GACxB,KACLC,EAAMj1B,oBAAoB,OAAQg1B,EAAW,CAC9C,GACA,CAACH,EAAQpxB,EAAKxK,IAEjB,MAAMq7B,GAAc76B,EAAAA,EAAAA,KAAamL,IAC/B,IAAKnB,EAAInO,QAAS,OAClB,MAAM2/B,EAAQxxB,EAAInO,QAClB2/B,EAAMzmC,IAAM,cACZymC,EAAMl1B,iBAAiB,QAAQ,KAC7Bk1B,EAAMzmC,IAAMoW,CAAG,GACd,CAAEswB,MAAM,GAAO,GACjB,CAACzxB,IAEE8wB,GAAY96B,EAAAA,EAAAA,KAAa2Z,IACxB3P,EAAInO,SAAS6/B,eAClB1xB,EAAInO,QAAQ6/B,cAAcC,YAAYtc,KAAKC,UAAU3F,GAAQ,IAAI,GAChE,CAAC3P,IAEE+wB,GAAe/6B,EAAAA,EAAAA,KAAa47B,IAChC,IAAK5xB,EAAInO,QACP,OAEF,MAAM,MAAEC,EAAK,OAAEK,GAAW6N,EAAInO,QAAQqN,wBACtC4xB,EAAU,CACRtB,UAAW,mBACXC,UAAW,CACT39B,QACAK,SACA0/B,aAAa,EACbC,iBAAkBF,IAEpB,GACD,CAACd,EAAW9wB,IAETgxB,GAAYh7B,EAAAA,EAAAA,KAAY,KAC5B86B,EAAU,CACRtB,UAAW,gBACXC,UAAW,CACTsC,cAAc7D,EAAAA,GAAAA,QAEhB,GACD,CAAC4C,IAEEkB,GAAkBh8B,EAAAA,EAAAA,KAAaxJ,IACnCskC,EAAU,CACRtB,UAAW,mBACXC,UAAWjjC,GACX,GACD,CAACskC,IAEEmB,GAAgBj8B,EAAAA,EAAAA,KAAa2Z,IACjC,IAAI0hB,EAAgBx/B,QAIpB,IACE,MAAMs+B,EAAO9a,KAAK6c,MAAMviB,EAAMwgB,MAc9B,GAZuB,kBAAnBA,EAAKX,WACP4B,MAGqB,6BAAnBjB,EAAKX,WACPuB,EAAaxZ,EAAWlM,YAGH,0BAAnB8kB,EAAKX,WACPwB,IAGqB,iBAAnBb,EAAKX,UAA8B,CACrC,MAAM2C,EAAiBC,iBAAiB9nC,SAASwU,MAAMuzB,iBAAiB,qBACxEL,EAjHiB,4VAiHe1J,QAAQ,qBAAsB6J,GAChE,CAEA,GAAuB,sBAAnBhC,EAAKX,UAAmC,CAC1C,IAAK0B,EAAc,OACnBG,EAAgBx/B,SAAU,CAC5B,CAEA,GAAuB,qCAAnBs+B,EAAKX,UAAkD,CACzD,MAAQ8C,OAAQC,GAAcpC,EAAKV,UAEnCv8B,OAAOs/B,UAAUC,UAAUC,WAAWC,OAAM,IAAM,OAAMC,MAAMl3B,IAC5Do1B,EAAU,CACRtB,UAAW,0BACXC,UAAW,CACT6C,OAAQC,EACRpC,KAAMz0B,IAER,GAEN,CACAy1B,EAAQhB,EACV,CAAE,MAAOtiC,GACP,IAED,CAACqjC,EAAcC,EAASa,EAAiBlB,EAAWE,EAAWD,EAAcK,EAAQ7Z,EAAWlM,aAwBnG,OAtBAzY,EAAAA,EAAAA,KAAU,KACR,MAAM,MAAEd,EAAK,OAAEK,EAAM,WAAEkZ,GAAekM,EAClC+Z,EAAiBz/B,SAAWy/B,EAAiBz/B,QAAQC,QAAUA,GAC9Dw/B,EAAiBz/B,QAAQM,SAAWA,IAAWm/B,EAAiBz/B,QAAQwZ,aAC7EimB,EAAiBz/B,QAAU,CAAEC,QAAOK,SAAQkZ,cAC5C0lB,EAAa1lB,GAAW,GACvB,CAAC0lB,EAAcxZ,KAElB3kB,EAAAA,EAAAA,KAAU,KACRM,OAAOoJ,iBAAiB,UAAW21B,GAC5B,IAAM/+B,OAAOqJ,oBAAoB,UAAW01B,KAClD,CAACA,KAEJr/B,EAAAA,EAAAA,KAAU,KACJ4C,GAAUwK,EAAInO,SAAS6/B,eACzBX,IACAM,EAAgBx/B,SAAU,GAE1By/B,EAAiBz/B,aAAUjD,CAC7B,GACC,CAAC4G,EAAQu7B,EAAc/wB,IAEnB,CACL8wB,YAAWD,cAAaE,eAAcC,YACvC,ECvGGC,CAAe/B,EAAU15B,GAAQ85B,GAAUC,GAAaX,GAEtDiE,GAAuBjF,GAAYpwB,WAAaowB,EAAWlyB,KAAK60B,OAAO71B,OAAS,GAEtFo4B,EAAAA,GAAAA,IAAY,KACVxF,EAAe,CACblK,MAAO/D,EAAKvzB,GACZsjC,QAASA,EACT2D,OAAQp+B,EAAM7I,GACdujC,mBACA96B,aACA,GACD66B,EA/JoB,UA+JSxgC,GAAW,GAE3C,MAAMokC,IAAwBh9B,EAAAA,EAAAA,KAAY,KACxC86B,GAAU,CACRtB,UAAW,uBACX,GACD,CAACsB,KAEEmC,IAA4Bj9B,EAAAA,EAAAA,KAAY,KAC5C86B,GAAU,CACRtB,UAAW,2BACX,GACD,CAACsB,KAEEoC,IAAqBl9B,EAAAA,EAAAA,KAAY,KACrC66B,GAAYrE,EAAQrrB,IAAI,GACvB,CAAC0vB,GAAarE,IAEXxS,IAAchkB,EAAAA,EAAAA,KAAY,KAC1Bs4B,EACFG,IAEArB,GACF,GACC,CAACkB,EAAcG,EAAgBrB,IAE5B+F,IAAmBn9B,EAAAA,EAAAA,KAAao9B,IACpCrE,OAAengC,GACfkiC,GAAU,CACRtB,UAAW,eACXC,UAAW,CACT4D,UAAWD,IAEb,GACD,CAACtC,KAEEwC,IAAwBt9B,EAAAA,EAAAA,KAAY,KACxCm9B,IAAkB,GACjB,CAACA,MAGJvhC,EAAAA,EAAAA,IAAc,KACZuB,YAAW,KACT49B,IAAc,GAzMG,IA0MD,GACjB,CAACnD,GAAYpwB,UAAWuzB,MAG3Bn/B,EAAAA,EAAAA,IAAc,KACZuB,YAAW,KACT69B,IAAW,GAhNM,IAiND,GACjB,CAACnE,EAAOmE,MAEXp/B,EAAAA,EAAAA,IAAc,EAAE2hC,MACVxG,IAAuBwG,GACvB/G,GAAQkD,OAAS3C,GAAsBG,IACzC4D,GAAU,CACRtB,UAAW,iBACXC,UAAW,CACTC,KAAMlD,EAAOkD,KACb1C,OAAQE,KAGZS,EAAqB,CACnB+B,UAAM9gC,IAEV,GACC,CAACm+B,EAAoBG,EAAe4D,GAAWnD,EAAsBnB,IAExE,MAAMgH,IAAoBx9B,EAAAA,EAAAA,KAAY,KACpCu3B,EAAgB,CACdnK,MAAO/D,EAAKvzB,GACZ4W,WAAY+pB,GACZ,GACD,CAACpN,EAAKoN,EAAWc,IAEdkG,IAAkBz9B,EAAAA,EAAAA,KAAY,KAC9B83B,EACFgD,GAAU,CACRtB,UAAW,wBAGbxV,IACF,GACC,CAACA,GAAa8T,EAAqBgD,KAEhC4C,IAAc19B,EAAAA,EAAAA,KAAY,KAC9By3B,EAAS,CACP3hC,GAAIuzB,EAAKvzB,KAEXshC,GAAa,GACZ,CAAC/N,EAAK+N,EAAaK,KAEtB76B,EAAAA,EAAAA,KAAU,KACH4C,KACH+4B,GAAgB,GAChBG,IACAK,OAAengC,GACfigC,IACF,GACC,CAACH,EAAiBl5B,GAAQq5B,IAE7B,MAAM8E,IAAkEvjC,EAAAA,EAAAA,KAAQ,IACvE,EAAG0J,YAAWtE,OAAQo+B,KAC3Br9B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLqG,QAASlH,EACTnG,KAAK,UACL8D,MAAM,cACNH,UAAWk9B,EAAa,SAAW,GACnC78B,QAAS+C,EACTE,UAAU,gBAEVzD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGhB,CAACwC,IAEE26B,IAAsBp3B,EAAAA,GAAAA,GCjVgE,uBDmV1FqxB,GCnViK,wBD+X7JgG,IAAsBlpB,EAAAA,EAAAA,GAAYgjB,GAAY/2B,OAAO,GACrDk9B,IAA0BnpB,EAAAA,EAAAA,GAAYgjB,GAAYyC,WAAW,GAC7D2D,IAAyBppB,EAAAA,EAAAA,GAAYgjB,GAAc/9B,QAAQ+9B,EAAWzlB,WAAW,GACjF8rB,IAAqBrpB,EAAAA,EAAAA,GAAYgjB,GAAYlyB,MAAM,GAEnDw4B,GAAyBtG,GAAY/2B,OAASi9B,GAC9CK,GAA6BvG,GAAYyC,WAAa0D,GACtDK,QAAqDxlC,IAAzBg/B,GAAYzlB,SAAyBylB,EAAWzlB,SAAW6rB,GACvFK,GAAwBzG,GAAYlyB,MAAQu4B,IAElDrhC,EAAAA,EAAAA,KAAU,KACR,IAAK4C,GAAQ,CACX,MAAMu6B,GAAc7B,EAAAA,GAAAA,MACpBL,OAAcj/B,GACdm/B,GAAuB,GACvBE,EAAmB8B,EAAY5B,UAC/BE,EAAe0B,EAAY5B,SAC7B,IACC,CAAC34B,KAEJ,MAAO8+B,GAA4BC,KAAiCx4B,EAAAA,EAAAA,KAAS,IACtEy4B,GAAkBC,KAAuB14B,EAAAA,EAAAA,KAAS,GAEnD24B,IAAsBhjC,EAAAA,EAAAA,MAiB5B,OAfAkB,EAAAA,EAAAA,KAAU,KACJ8hC,GAAoB7iC,SAASc,aAAa+hC,GAAoB7iC,SAC7DghC,IAMH4B,IAAoB,GACpBC,GAAoB7iC,QAAUsB,YAAW,KACvCohC,IAA8B,EAAK,GAxWR,OAiW7BA,IAA8B,GAC9BG,GAAoB7iC,QAAUsB,YAAW,KACvCshC,IAAoB,EAAK,GAnWE,KA0W/B,GACC,CAACF,GAA+B1B,KAGjCt8B,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UCzaiB,uBD0ajBlB,OAAQA,GACRG,QAASqkB,GACT+G,OApFAxqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAelK,MAAQ,qBAAoB4hC,KACxD73B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLlD,MAAM,cACN9D,KAAK,UACLiH,UAAW3D,EAAKy3B,EAAsB,OAAS,SAC/C/2B,QAAS08B,IAETl9B,EAAAA,GAAAA,cAAA,OAAKG,UAAWm9B,MAElBt9B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAe2oB,GAAK0L,WACnCx0B,EAAAA,GAAAA,cAACoE,EAAAA,EAAY,CACXjE,UAAU,0CACVkE,QAAS+4B,GACT94B,UAAU,SAETlG,GAAQ0qB,GAAO1qB,EAAK7I,KAAOuzB,EAAIvzB,IAC9ByK,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,OAAOtD,QAAS28B,IAAcr9B,EAAK,sBAEpDE,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,SAAStD,QAASm8B,IAAqB78B,EAAK,sBAC1Do2B,GAAWkI,aACVp+B,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,WAAWtD,QAASk8B,IAChC58B,EAAK,aAGTgpB,GAAKuV,aACJr+B,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAMoyB,EAAY,OAAS,UAC3B11B,QAASy8B,GACTqB,YAAahlC,QAAQ48B,IAEpBp2B,EAAKo2B,EAAY,mBAAqB,gCAsD/CjgC,MAAQ,qBAAoBwhC,KAE5Bz3B,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACxS,WAAW+F,EAAAA,GAAAA,GC/a4N,uBD+atLkyB,GC/aoN,0BDgb7Qn5B,IACCe,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,UACEG,WAAW+F,EAAAA,GAAAA,GCnb4R,uBDmb/P63B,ICnbwU,wBDobhXvpC,IAAKoW,EACLxK,MAAQ,GAAE0oB,GAAK0L,oBACf+J,QAAS3I,GACT4I,MAAM,mCACNC,iBAAe,EACfh1B,IAAKkvB,IAEP34B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,WAAW+F,EAAAA,GAAAA,GC5b8a,uBD8bvbo2B,IC9bwd,uBD+bxd2B,IC/bwf,wBDic1fhoC,MAAQ,qBAAoB0nC,cAAkCC,KAC9DlzB,UAAWmzB,GACXr9B,QAASi8B,IAERqB,GACAzG,GAAY6C,mBAAqBl6B,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACxS,UCtcuiB,uBDsclgBG,MAAM,YAI3Fy3B,GACC/3B,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQg5B,EACR74B,QAAS+4B,EACT/3B,MAAON,EAAK,+BACZqF,KAAMrF,EAAK,yBACXksB,eAAgB6K,EAChB6H,sBAAoB,EACpB3S,aAAcjsB,EAAK,gCAGtB44B,GACC14B,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQ3F,QAAQi/B,GAChBn4B,MAAOs4B,EAAqBt4B,OAhazB,IAiaHhB,QAAS29B,GACT4B,gBAAc,EACdx+B,WACE+F,EAAAA,GAAAA,GC5d8pB,wBD4d1nBwyB,EAAqBt4B,OAAO45B,OAAO71B,QC5doqB,yBD+d5uBu0B,EAAqBviC,QACtB6J,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACZu4B,EAAqB2B,QAAQz6B,KAAKotB,GACjChtB,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmE,IAAKwoB,EAAOz3B,IAAMy3B,EAAOprB,KACzBzB,UAAU,wBACVG,MAAuB,gBAAhB0sB,EAAOprB,KAAyB,SAAW,UAClDrB,QAAM,EACN/D,KAAK,UAELgE,QAASA,IAAMo8B,GAAiB5P,EAAOz3B,KAEtCy3B,EAAO7nB,MAAQrF,EAAK+1B,GAAoB7I,EAAOprB,YAMpD,KEncZ,IAAehE,EAAAA,EAAAA,KA5BqBghC,EAAG9V,MAAKlnB,WAC1C,MAAM,sBAAEi9B,EAAqB,eAAEC,IAAmBv/B,EAAAA,EAAAA,MAC5CO,GAAOC,EAAAA,EAAAA,KAEPg/B,GAAc1qB,EAAAA,EAAAA,GAAYyU,GAAK,GAC/BkW,GAAe3qB,EAAAA,EAAAA,GAAYzS,GAAM,GACjCq9B,EAAanW,GAAOiW,EACpBG,EAAct9B,GAAQo9B,EAEtBG,GAAuB1/B,EAAAA,EAAAA,KAAY,KACvCq/B,EAAe,CAAEjS,MAAO/D,EAAKvzB,IAAK,GACjC,CAACupC,EAAgBhW,IAEd1oB,EAAiCN,EAAT,SAAhBo/B,EAA8B,UAAkB,oBACxD/5B,EAAgCrF,EAAT,SAAhBo/B,EAA8B,yBAClC,sBAD4D5R,EAAAA,EAAAA,IAAgB2R,IAGrF,OACEj/B,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQ3F,QAAQwvB,GAChB1pB,QAASy/B,EACT7S,eAAgBmT,EAChB/+B,MAAOA,EACPgS,WAAWsL,EAAAA,GAAAA,GAAWvY,EAAM,CAAC,KAAM,kBAAmB,WACtD,ICwBN,IAAevH,EAAAA,EAAAA,KA/C6BwhC,EAC1CtW,UAEA,MAAM,wBAAEuW,EAAuB,uBAAEC,IAA2B//B,EAAAA,EAAAA,OACrD0tB,EAAgBsS,IAAqB/5B,EAAAA,EAAAA,IAASsjB,GAAKgE,2BAA4B,GAEhFhtB,GAAOC,EAAAA,EAAAA,KAEPy/B,GAAUnrB,EAAAA,EAAAA,GAAYyU,GACtB2W,EAAe3W,GAAO0W,EAEtB5U,GAAgBnrB,EAAAA,EAAAA,KAAY,KAChC4/B,EAAwB,CACtBpS,kBACA,GACD,CAACoS,EAAyBpS,IAS7B,OANA5wB,EAAAA,EAAAA,KAAU,KACC,IAAAqjC,EAAL5W,GACFyW,EAA8C,QAA7BG,EAAC5W,EAAIgE,gCAAwB,IAAA4S,GAAAA,EAChD,GACC,CAAC5W,IAGF9oB,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQ3F,QAAQwvB,GAChB1pB,QAASkgC,EACTl/B,MAAOq/B,GAAcE,UACrB3T,eAAgBpB,GAEf9qB,EAAK,6BAA8B2/B,GAAcE,WACjDF,GAAc3S,0BACb9sB,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPhtB,UAAU,kBACVitB,QAASH,EACTI,OAAO3P,EAAAA,GAAAA,GACL5d,EAAK,sCAAuC2/B,GAAcE,WAC1D,CAAC,oBAEHpS,QAASgS,IAGC,IC5BpB,IAAe3hC,EAAAA,EAAAA,KAvB0BgiC,EACvCC,2BAEA,MAAM,2BAAEC,EAA0B,iBAAEC,IAAqBxgC,EAAAA,EAAAA,MACnDO,GAAOC,EAAAA,EAAAA,KAEPigC,GAA4BvgC,EAAAA,EAAAA,KAAY,KAC5CqgC,IACAC,EAAiB,CAAExqC,GAAIsqC,GAAwB,GAC9C,CAACC,EAA4BC,EAAkBF,IAElD,OACE7/B,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,YAAiC5G,IAAzBwnC,EACRzgC,QAAS0gC,EACT36B,KAAMrF,EAAK,qBACXisB,aAAcjsB,EAAK,UACnBksB,eAAgBgU,EAChBtB,sBAAoB,GACpB,I,2BC9BN,SAAs/B,uBCgDt/B,IAAe9gC,EAAAA,EAAAA,KA9B4BqiC,EACzCC,YACAC,aACAhgC,YACAigC,oBACAC,iBAEA,MAAMvgC,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GD5BG,uBC4ByB/F,IACzCigC,GACCpgC,EAAAA,GAAAA,cAAA,OAAKG,UD9ByF,wBC+B5FH,EAAAA,GAAAA,cAAA,KAAGG,WAAW+F,EAAAA,GAAAA,GD/BsQ,uBC+B7Nk6B,KACvDpgC,EAAAA,GAAAA,cAAA,OAAKG,UDhCuY,uBCgCjWkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAY6nC,GACjFlgC,EAAAA,GAAAA,cAAA,OAAKG,UDjCuL,uBCiC9ImgC,wBAAyB,CAAEC,OAzB9D,sTA4BfvgC,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAepQ,GDpC++B,yBCqC5gCkK,EAAAA,GAAAA,cAAA,OAAKG,UDrCwf,iECqC5dkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYyH,EAAK,eAC1EsgC,GAAqBpgC,EAAAA,GAAAA,cAAA,OAAKG,UDtC+5B,6CCsCj4B+/B,IAE5DlgC,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAepQ,GDxC8gC,wBCwCl/BG,MAAOoqC,GAChErgC,EAAAA,GAAAA,cAAA,OAAKG,UDzCmpB,iECyCtnBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYyH,EAAK,iBAC7EE,EAAAA,GAAAA,cAAA,OAAKG,UD1CgzB,kEC0CjxBggC,IAElC,IC5BJK,GAAc,CAAC,GAAI,IAAK,KACxBC,GAAY,CAAC,IAAK,IAAK,KA0B7B,IAAe7iC,EAAAA,EAAAA,KAxB2B8iC,EACxCtgC,QACAugC,cACAT,YACAC,aACAS,wBAEA,MAAMtgC,GAAQzG,EAAAA,EAAAA,KAAQ,IACb2mC,GAAY5gC,KAAI,CAAC8J,EAAOiW,KAAMkhB,EAAAA,GAAAA,IAAKn3B,EAAO+2B,GAAU9gB,GAAIihB,MAC9D,CAACA,IAEJ,OACE5gC,EAAAA,GAAAA,cAAA,OAAKG,UC/Bc,wBDgCjBH,EAAAA,GAAAA,cAAA,OAAKG,UChC2C,wBDgCjBC,GAC/BJ,EAAAA,GAAAA,cAAA,OAAKG,UCjCgF,wBDiChDwgC,GACrC3gC,EAAAA,GAAAA,cAACigC,GAAoB,CACnBC,UAAWA,EACXC,WAAYA,EACZE,WAAa,mBAAkB//B,EAAM6Q,KAAK,UAExC,I,gGEvCV,UAAgB,KAAO,uBAAuB,QAAU,uBAAuB,KAAO,uBAAuB,MAAQ,uBAAuB,MAAQ,wBC6DpJ,IAAevT,EAAAA,EAAAA,KAtCkCkjC,EAC/CC,UACAC,qBACAC,SACAC,iBACAjd,QACArS,eAEA,MAAMpX,GAAYL,EAAAA,EAAAA,GAAU,WAAU4mC,KAChCI,GAAeC,EAAAA,GAAAA,GAAcF,EAAejmC,SAC5C6T,GAAuBuyB,EAAAA,GAAAA,GAAmB7mC,GAEhD,OACEwF,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,MACdkK,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GACTpQ,GAAAA,QACAkrC,GAAsBlrC,GAAAA,QACtBmrC,GAAUnrC,GAAAA,MAEZP,GAAK,iCAAgC0uB,KAErCjkB,EAAAA,GAAAA,cAAA,OAAKxL,IAAK8sC,GAAazuB,IAAI,GAAG1S,UAAWrK,GAAAA,QACzCkK,EAAAA,GAAAA,cAAA,UAAQyJ,IAAK03B,EAAchhC,UAAWrK,GAAAA,QACtCkK,EAAAA,GAAAA,cAACuhC,GAAAA,EAAc,CACbC,QAAS5vB,EACTzR,WAAW+F,EAAAA,GAAAA,GAAepQ,GAAAA,MAAcgZ,GACxCta,IAAKgG,EACLmT,yBAAuB,EACvBkD,aAAW,EACXd,OAAK,EACLe,MAAI,KAGJ,ICzDV,GAAsD,uBAAtD,GAAgK,uBCwFhK,IAAelT,EAAAA,EAAAA,KA1EkB6jC,EAC/Bt9B,SACAghB,SACAuc,oBAEA,MAAMC,EAAY39B,KAAK+E,IAAI,EAAG/E,KAAKgF,IAAI7E,EAAS,EAAGghB,EAAS,IACtDyc,EAAiBD,IAAcx9B,EAAS,EAAI,EAC5C09B,EAAcF,IAAcx9B,EAAS,EACrC29B,EAA6B,IAAdH,EACfI,EAAgC,IAAdJ,EAClBK,EAAiBh+B,KAAKgF,IAAI7E,EAAQ,GAElC89B,GAAkBxiC,EAAAA,EAAAA,KAAY,KAClCiiC,EAAcvc,EAAS,EAAE,GACxB,CAACA,EAAQuc,IAENQ,GAAeziC,EAAAA,EAAAA,KAAY,KAC/BiiC,EAAcvc,EAAS,EAAE,GACxB,CAACA,EAAQuc,IAENS,EAAQn+B,KAAKgF,IAAI,EAAG7E,GAE1B,OACEnE,EAAAA,GAAAA,cAAA,YACIqI,EAAAA,IACArI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,WAAW+F,EAAAA,GAAAA,GAAepQ,GAAyB,IAAXqvB,GAAgBrvB,IACxDwK,MAAM,cACNoK,SAAqB,IAAXya,EACV3hB,OAAK,EACLhD,QAAS0hC,GAETliC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAGjBH,EAAAA,GAAAA,cAAA,OAAKG,UDjDY,uBCiDYlK,MAAQ,iBAAgB0rC,gBAAwBx9B,eAAoBg+B,MAC9FC,MAAMj+B,GAAQk+B,UAAKhqC,GAAWuH,KAAI,CAAC0iC,EAAG3iB,KACrC,MAAMsE,EAAQtE,EACR4iB,EAAU5iB,IAAMgiB,EAAYK,EAAiB,IAAMH,IAAgBD,EACnEY,EAAa7iB,IAAMgiB,EAAYK,EAAiB,IAAMJ,IAAmBC,GACzEliB,IAAMgiB,EAAYK,EAAiB,GAAKJ,EACxCa,EAAW9iB,IAAMgiB,IAAeG,IAAiBC,EACjDW,EAAe/iB,IAAMgiB,EAAY,IAAOG,IAAiBC,GACzDpiB,IAAMgiB,GAAaI,EACnBY,EAAchjB,EAAIgiB,GAAahiB,GAAKgiB,EAAYK,EACtD,OACEhiC,EAAAA,GAAAA,cAAA,OACEQ,QAASA,IAAMkhC,EAAc/hB,GAC7Bxf,WAAW+F,EAAAA,GAAAA,GD9DoK,uBCgE7K+d,IAAUkB,GDhEqS,wBCiE9Sqd,GAAaE,IDjE+L,wBCkE5MH,GAAUE,IDlEiO,uBCmE5OE,GDnE+Q,yBCqEjR,MAINt6B,EAAAA,IACArI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,WAAW+F,EAAAA,GAAAA,GAAepQ,GAAcqvB,IAAWhhB,EAAS,GAAKrO,GD3EU,wBC4E3EwK,MAAM,cACNkD,OAAK,EACLkH,SAAUya,IAAWhhB,EAAS,EAC9B3D,QAASyhC,GAETjiC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eAGb,I,2BCpFV,MC6BMyiC,GASDA,EACHpmC,OAAMqmC,YAAWrB,UACjBsB,UAAS7e,QAAO8e,YAAWviC,UAASwQ,cAEpC,MAAMxW,GAAYL,EAAAA,EAAAA,GAAU,UAAS2oC,EAAQvtC,MACvCytC,GAAkB7oC,EAAAA,EAAAA,GAAU,UAAS2oC,EAAQvtC,aAE7C0tC,EAAwB,IAAVhf,GACbif,EAAYC,EAASC,IAAa1gC,EAAAA,EAAAA,GAAQugC,GAE3CI,EAAa7mC,EAxBS,GAwBFA,EACpBjB,EAAqB,EAAb8nC,EACRznC,EAAsB,IAAbynC,EAITC,EAFIrf,EAAQ8e,GAEW,EAAV/+B,KAAKu/B,IAClB1vB,EAAQovB,EAAc,EAAI,IAE1BtvB,EAAI3P,KAAKw/B,IAAIF,GAAS/nC,EAAqB,IAAb8nC,EAC9BzvB,EAAI5P,KAAKy/B,IAAIH,GAAS1nC,EAEtByT,GAAc5P,EAAAA,EAAAA,KAAY,KAC9Be,EAAQqiC,EAAU,GACjB,CAACriC,EAASqiC,IAEPpzB,GAAchQ,EAAAA,EAAAA,KAAY,KAC9B2jC,IACApyB,GAAS,GACR,CAACoyB,EAAWpyB,IAQf,OANA3U,EAAAA,EAAAA,KAAU,KACJ4mC,GACFE,GACF,GACC,CAACF,EAAaE,IAGfnjC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGijC,GACCjjC,EAAAA,GAAAA,cAAC0jC,GAAAA,EAAe,CACdvjC,UD/EkJ,4CCgFlJwjC,OAAQX,EACRY,KAAMpC,EACNqC,eAAa,EACbC,QAAM,EACNtnC,KA3DqB,GA2DUA,EAC/BvG,MAAQ,aAAY0d,oBAAoBC,SAG5C5T,EAAAA,GAAAA,cAAC0jC,GAAAA,EAAe,CACdvjC,UDzFgD,uBC0FhDwjC,OAAQnpC,EACRopC,KAAMpC,GAAW0B,EACjBY,QAAM,EACNtnC,KArEsB,GAqEQA,EAC9BvG,MAAQ,QAAO0d,aAAaC,mBAAmBC,IAC/CrT,QAAS6O,EACT2B,QAASvB,IAEV,EAqDP,IAAe7R,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLimC,SAAUjmC,EAAOimC,SAASC,QAAQD,YAHpBlmC,EAlD6ComC,EAC/DF,WAAUnyB,eAGV,MAAM4B,GAAerY,EAAAA,EAAAA,IAAuB,OACrCyb,EAAQstB,IAAa1+B,EAAAA,EAAAA,IAAS,IAC9BhJ,EAAM2nC,IAAW3+B,EAAAA,EAAAA,IAAS,GAE3B4+B,EAAmBL,GAAUM,MAAM,EAnFxB,IAqFXh1B,GAAc5P,EAAAA,EAAAA,KAAakgB,IAC/BukB,GAAWvkB,EAAE,GACZ,IAEGlQ,GAAchQ,EAAAA,EAAAA,KAAY,KAC9B7C,YAAW,KACTsnC,GAAW5oC,IAAYgpC,EAAAA,GAAAA,GAAcF,EAAiBjgC,OAAQ7I,EAAU,IAAG,GA1F7D,IA2FD,GACd,CAAC8oC,EAAiBjgC,SASrB,OAPA9H,EAAAA,EAAAA,KAAU,KACR,MAAMpH,EAAYue,EAAalY,QAC1BrG,GAELkvC,EAAQlvC,EAAUK,QAAQ,iBAAkBivC,YAAY,GACvD,IAGDvkC,EAAAA,GAAAA,cAAA,OACEG,UDlIiB,uBCmIjBsJ,IAAK+J,GAEJ4wB,GAAkBxkC,KAAI,CAAC4kC,EAAG7kB,IAEvB3f,EAAAA,GAAAA,cAAC4iC,GAAqB,CACpBpmC,KAAMA,EACNsmC,QAAS0B,EACT3B,UAAWljB,EACXsE,OAAQtE,EAAI/I,EAASwtB,EAAiBjgC,QAAUigC,EAAiBjgC,OACjE4+B,UAAWqB,EAAiBjgC,OAC5B3D,QAAS6O,EACT2B,QAASvB,EACT+xB,QAAS5vB,MAIX,KCnJV,GAAmW,uBAAnW,GAAkY,uBAAlY,GAAmqB,uBAAnqB,GAAwsB,uBCuB3rB6yB,GAAiD,CAC5DC,cAAe,uBACfC,mBAAoB,2BACpBC,iBAAkB,yBAClBC,eAAgB,sBAChBC,OAAQ,sBACRC,cAAe,4BACfC,cAAe,6BACfC,gBAAiB,8BACjBC,YAAa,wBACbC,yBAA0B,uCAC1BC,kBAAmB,iCACnBC,aAAc,6BAGHC,GAAuD,CAClEZ,cAAe,kCACfC,mBAAoB,sCACpBC,iBAAkB,oCAClBE,OAAQ,iCACRD,eAAgB,iCAChBE,cAAe,uCACfC,cAAe,wCACfC,gBAAiB,yCACjBC,YAAa,mCACbC,yBAA0B,kDAC1BC,kBAAmB,4CACnBC,aAAc,wCAGHE,GAA2B,CACtC,gBACA,cACA,kBACA,gBACA,SACA,qBACA,mBACA,iBACA,2BACA,gBACA,oBACA,gBAGIC,GAAkC,CACtC,kBACA,gBACA,2BACA,gBACA,oBACA,gBAKIC,GAA4C,CAChD,WACA,qBACA,iBACA,YACA,gBACA,cACA,gBACA,gBACA,sBAGIC,GAA2D,CAC/DC,SAAU,8BACVC,mBAAoB,qBACpBC,eAAgB,wBAChBC,UAAW,sBACXC,cAAe,6BACfC,YAAa,gBACbC,cAAe,qBACfC,cAAe,oBACfC,mBAAoB,2BAGhBC,GAAiE,CACrET,SAAU,iCACVC,mBAAoB,wBACpBC,eAAgB,2BAChBC,UAAW,yBACXC,cAAe,gCACfC,YAAa,mBACbC,cAAe,wBACfC,cAAe,uBACfC,mBAAoB,8BA2MtB,IAAevoC,EAAAA,EAAAA,KA7L2ByoC,EACxCC,QACAC,iBACAtxB,SACAuxB,mBACAC,YACAC,aAEA,MAAM5mC,GAAOC,EAAAA,EAAAA,KAEP4mC,GAAqBxrC,EAAAA,EAAAA,IAAuB,OAC3CyrC,EAAmBC,IAAwBrhC,EAAAA,EAAAA,IAAS+/B,GAAyBzlB,QAAQymB,KACrFO,EAA4BC,IAAiCvhC,EAAAA,EAAAA,IAAS,IACtEwhC,EAAaC,EAAgBC,IAAiBxkC,EAAAA,EAAAA,MAE9CykC,EAAiBC,IAAsB5hC,EAAAA,EAAAA,KAAS,IAChD6hC,EAAoBC,IAAyB9hC,EAAAA,EAAAA,KAAS,GAEvD+hC,GAAqBlzB,EAAAA,EAAAA,GAAYkyB,GA6BvC,SAASiB,EAAmBrhC,GAC1B,MAAM,UAAEzQ,EAAS,aAAEiQ,EAAY,aAAE8hC,GAAiBthC,EAAEqJ,cACpD43B,EAAmB1xC,GA5DE,IA6DrB4xC,EAAsB5xC,GAAa+xC,EAAe9hC,EA7D7B,GA8DvB,EAEAtJ,EAAAA,EAAAA,KAAU,KACR,MAAMqrC,EAAkBf,EAAmBrrC,QAC3C,IAAKosC,GAAoBH,IAAuBhB,EAAiB,OAEjE,MAAMtiB,EAAQshB,GAAyBzlB,QAAQymB,GAC/CM,EAAqB5iB,GACrBgjB,KACAU,EAAAA,GAAAA,GAA2BD,EAAiBA,EAAgBnD,YAActgB,EAAO,GAC9EoY,KAAK6K,EAAc,GACrB,CAACN,EAAmBL,EAAgBgB,EAAoBN,EAAgBC,IAE3E,MAAMU,GAAoBnoC,EAAAA,EAAAA,KAAYooC,UACpC,MAAMH,EAAkBf,EAAmBrrC,QACtCosC,IAELb,EAAqB5iB,GAErBgjB,UACMU,EAAAA,GAAAA,GAA2BD,EAAiBA,EAAgBnD,YAActgB,EAAO,KACvFijB,IAAe,GACd,CAACD,EAAgBC,IAGdrZ,EAAQyY,EAAMwB,QAAQC,MAAMC,GAA6B,IAAlBA,EAAOC,SAEpD,OACEjoC,EAAAA,GAAAA,cAAA,OAAKG,UD7Mc,wBC8MjBH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL2D,WAAW+F,EAAAA,GAAAA,GDjN4L,uBCiNpI,IAAtB0gC,GDjN8O,wBCkN3RtmC,MAA6B,IAAtBsmC,EAA0B,cAAgB,oBACjDpmC,QAASyU,EACTxR,UAAW3D,EAAK,SAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAGfH,EAAAA,GAAAA,cAAA,OAAKG,UDzNynB,yBC2N9nBH,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GD3N8S,uBC2N/Q,gBAAiBgiC,SArEpE,SAAsB/hC,GACpB,MAAM,YAAEo+B,EAAa4D,WAAYC,GAAuBjiC,EAAEqJ,cAEpD24B,EAAankC,KAAKR,MAAM4kC,GAGxB1jC,EADOyjC,EAAc5D,EACFA,EACzBp+B,EAAEqJ,cAAcvZ,MAAMoyC,YAAY,oBAAqB3jC,EAAS4jC,YAChEniC,EAAEqJ,cAAcvZ,MAAMoyC,YAAY,wBAAyBrkC,KAAKiU,IAAIvT,GAAU4jC,YAC9E,MAAMC,EAAevkC,KAAKwkC,MAAML,EAAa,GAAK5D,GAElDwC,EAA8BwB,GAE9B,MAAME,EAActiC,EAAEqJ,cAAc1a,cAAe,mCAAiCyzC,EAAe,IAC7FG,EAAiBviC,EAAEqJ,cAAc1a,cAAe,kCAAiCyzC,KAIvF,GAHAE,GAAax0C,UAAUgsB,OAAO,WAAW,GACzCyoB,GAAgBz0C,UAAUgsB,OAAO,WAAW,GAExC+mB,EAAa,OACjB,MAAM2B,EAAQ3kC,KAAKR,MAAM2kC,EAAa5D,GACtCsC,EAAqB8B,EACvB,EAgD4Fl/B,IAAKk9B,GAE1FpB,GAAyB3lC,KAAI,CAACgpC,EAAS3kB,KACtC,GAAgB,kBAAZ2kB,EACF,OACE5oC,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAepQ,GDhOqX,yBCiOlZkK,EAAAA,GAAAA,cAAA,MAAIG,WAAW+F,EAAAA,GAAAA,GDjOkf,uBCiOpdihC,GDjOsiB,yBCkOhlBrnC,EAAK2kC,GAAuBC,gBAE/B1kC,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GDpOid,uBCoO5a,iBAAkBgiC,SAAUV,GAC9E/B,GAAa7lC,KAAI,CAACma,EAAO4F,KACxB,MAAMkpB,EAAenC,IAAS3sB,GAAO,GAAGuuB,WAClCQ,EAAepC,IAAS3sB,GAAO,GAAGuuB,WACxC,OACEtoC,EAAAA,GAAAA,cAAC0gC,GAAmB,CAClBtgC,MAAON,EAAK4lC,GAAc3rB,IAC1B4mB,YAAa7gC,EAAKsmC,GAAoBrsB,GAAQ+uB,GAC9C5I,UAAW2I,EACX1I,WAAY2I,EACZlI,kBAAmBjhB,GAAK8lB,GAAathC,OAAS,IAC9C,MAQd,GAAgB,qBAAZykC,EACF,OACE5oC,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,IACdkK,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,IACdkK,EAAAA,GAAAA,cAACikC,GAA6B,CAACryB,SAAUg1B,IAAsB3iB,KAEjEjkB,EAAAA,GAAAA,cAAA,MAAIG,UAAWrK,IACZgK,EAAK2kC,GAAuBG,mBAE/B5kC,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,KACb4nB,EAAAA,GAAAA,GAAW5d,EAAKwlC,GAA6BV,kBAAmB,CAAC,SAM1E,MAAMjlB,EAAI2mB,EAAMyC,cAAcjpB,QAAQ8oB,GACtC,OAAW,IAAPjpB,EAEF3f,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,IACdkK,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,IACdkK,EAAAA,GAAAA,cAAC8gC,GAA0B,CACzBlvB,SAAUg1B,IAAsB3iB,EAChC8c,QAASuF,EAAM0C,OAAOrpB,GAAGpqB,GACzB2rC,eAAgBoF,EAAM0C,OAAOrpB,GAAGspB,UAChChI,OAAQuE,GAAsBhwC,SAASozC,GACvC3kB,MAAOA,EACP+c,mBAAoB/c,IAAU6iB,KAGlC9mC,EAAAA,GAAAA,cAAA,MAAIG,UAAWrK,IACZgK,EAAK2kC,GAAuB6B,EAAMyC,cAAcppB,MAEnD3f,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,KACb4nB,EAAAA,GAAAA,GAAW5d,EAAKwlC,GAA6BgB,EAAMyC,cAAcppB,KAAO,CAAC,cAjBhF,CAmBQ,KAMZ3f,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GDlSqtB,wBCoS7tBmhC,GAA4C,IAAtBT,IDpSyxB,yBCuSlzB5mC,EAAAA,GAAAA,cAACyhC,GAAU,CACTt9B,OAAQohC,GAAyBphC,OACjCghB,OAAQyhB,EACRlF,cAAekG,IAEjB5nC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,WAAW+F,EAAAA,GAAAA,GD7SkC,wBC8S7CgjC,SAAUzC,EACV0C,qBAAsB1C,EACtBjmC,QAASimC,EAAYxxB,EA9J7B,WACEuxB,EAAiBD,EACnB,GA8JSE,EACG3mC,EAAK,MACLA,EAAK,sBAAsBspC,EAAAA,GAAAA,GAAenX,OAAOpE,EAAMwb,QAASxb,EAAMyb,SAAUxpC,EAAK4xB,SAGzF,I,uCCvTV,UAAgB,KAAO,uBAAuB,KAAO,uBAAuB,OAAS,uBAAuB,YAAc,uBAAuB,KAAO,wBCgBlJ6X,GAAS,CACb,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WAqBzD,IAAe3rC,EAAAA,EAAAA,KAlB0B4rC,EACvC1lC,OACA1D,QACA+E,OACA8e,QACAzjB,aAGER,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAACC,gBAAiB5zC,GAAAA,KAAa0K,QAASA,GAC/CR,EAAAA,GAAAA,cAAA,OAAKxL,IAAKsP,EAAM3D,UAAWrK,GAAAA,KAAa+c,IAAI,GAAG5c,MAAQ,iBAAgBszC,GAAOtlB,OAC9EjkB,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,MACdkK,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,QAAe4nB,EAAAA,GAAAA,GAAWtd,EAAO,CAAC,QAClDJ,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,aAAqBqP,O,wmBCjC7C,GAAisB,uBCgD3rBwkC,GAAsD,CAC1DjF,cAAekF,GACfjF,mBAAoBkF,GACpBjF,iBAAkBkF,GAClBjF,eAAgBkF,GAChBjF,OAAQkF,GACRjF,cAAekF,GACfjF,cAAekF,GACfjF,gBAAiBkF,GACjBjF,YAAakF,GACbjF,yBAA0BkF,GAC1BjF,kBAAmBkF,GACnBjF,aAAckF,IA+PhB,IAAe3sC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACxC,MAAM,aACJ0sC,IACEl5B,EAAAA,EAAAA,IAAexT,GACnB,MAAO,CACLggB,cAAehgB,EAAOggB,cACtBwoB,MAAOkE,GAAclE,MACrBmE,UAAWD,GAAcC,UACzBC,UAAWF,GAAcE,UACzBC,OAAQH,GAAcG,OACtBC,aAAcJ,GAAcI,aAC5BC,SAAUL,GAAcM,YAAapsC,EAAAA,EAAAA,IAAWZ,EAAQ0sC,EAAaM,iBAAczyC,EACnF0yC,OAAQP,GAAcQ,UAAWtsC,EAAAA,EAAAA,IAAWZ,EAAQ0sC,EAAaQ,eAAY3yC,EAC7EkuC,eAAgBiE,GAAcjE,eAC9BE,WAAWwE,EAAAA,EAAAA,IAA2BntC,GACtCotC,eAAeC,EAAAA,GAAAA,GAAmBrtC,EAAQ,YAC1CstC,cAAcD,EAAAA,GAAAA,GAAmBrtC,EAAQ,iBACzCutC,WAAWF,EAAAA,GAAAA,GAAmBrtC,EAAQ,sBACtCwtC,YAAYH,EAAAA,GAAAA,GAAmBrtC,EAAQ,kBACvC4oC,OAAQ5oC,EAAOytC,WAAW7E,OAC1B8E,YAAa1tC,EAAOytC,WAAWE,mBAC/BC,mBAAoB5tC,EAAOytC,WAAWG,mBACtCC,kBAAmB7tC,EAAOytC,WAAWI,kBACtC,GAvBiB9tC,EAnOgC+tC,EAClD3sC,SACA6e,gBACA+sB,WACAvE,QACAC,iBACAE,YACAyE,gBACAI,aACAF,eACAC,YACA3E,SACA8E,cACAE,qBACAjB,YACAC,YACAC,SACAI,SACAH,eACAe,wBAGA,MAAME,GAAY1wC,EAAAA,EAAAA,IAAuB,OACnC,kBACJ2wC,EAAiB,YAAE3U,EAAW,gBAAE4U,EAAe,iBAAE9U,IAC/C13B,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACNisC,EAAgBC,IAAmBzmC,EAAAA,EAAAA,KAAS,IAC5C0mC,EAAgBC,IAAqB3mC,EAAAA,EAAAA,IAA6B+gC,GAEnE9a,GAAahsB,EAAAA,EAAAA,KAAampC,GACvB,KACLuD,EAAkBvD,EAAQ,GAE3B,IAQH,SAASwD,EAA0BrjB,GAClB8iB,EAAUvwC,UAGrBkwC,EACFrU,EAAY,CACVgC,KAAMqS,IAECE,IACTzU,EAAiB,CACfrsB,IAAM,GAAEyuB,EAAAA,MAAkBqS,WAA4B3iB,GAAc,YAEtE+iB,KAEJ,CAMA,MAAMO,GAAe5sC,EAAAA,EAAAA,KAAY,KAC/B,MAAMoqB,EAASgiB,EAAUvwC,QACzB,GAAKuuB,GACD5qB,EAAQ,CACV,MAAM,IACJuP,EAAG,KAAE9F,EAAI,MAAEnN,EAAK,OAAEK,GAChBiuB,EAAO/0B,cAAc,kBAAmB6T,wBAC5CojC,EAAgB,CACdv9B,MACA9F,OACAnN,QACAK,UAEJ,IACC,CAACqD,EAAQ8sC,KAEZ1vC,EAAAA,EAAAA,KAAU,KACJquC,GACF2B,GACF,GACC,CAAC3B,EAAW2B,KAEfhxC,EAAAA,EAAAA,IAAc,EAAEixC,MACVA,IAAkB7F,GAEtB4F,GAAc,GACb,CAAC5F,EAAW4F,IAEf,MAAME,GAAmB1yC,EAAAA,EAAAA,KAAQ,IAC1B8xC,EACEA,EAAkBhmB,QAAQijB,GAAYrD,GAAyB/vC,SAASozC,KADhDrD,IAE9B,CAACoG,IAEJ,IAAKrF,EAAO,OAGZ,MAAMzY,EAAQyY,EAAMwB,QAAQC,MAAMC,GAA6B,IAAlBA,EAAOC,SAsCpD,OACEjoC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UDnOiB,uBCqOjB6lB,oBAAqBA,IAAM8lB,EAAkB,CAAEU,UAAU,IACzDptC,QAAS0sC,EACT7sC,OAAQA,IAAWwrC,EACnBoB,UAAWA,GAEX7rC,EAAAA,GAAAA,cAACskB,EAAAA,EAAU,CAACE,KAAK,QAAQD,UAAW2nB,EAAiB,EAAI,EAAG/rC,UD1OP,wBC2OjD+rC,EAiEAlsC,EAAAA,GAAAA,cAACqmC,GAAmB,CAClBE,eAAgB2F,EAChBj3B,OAAQwW,OAAWpzB,GACnBiuC,MAAOA,EAEPE,iBAAkB4F,EAClB3F,UAAWA,EACXC,OAAQA,IAvEV1mC,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GD5O+F,uBC4OnE,iBAAkBgiC,SA/GtE,SAAsB/hC,GACpB,MAAM,UAAEzQ,GAAcyQ,EAAEqJ,cAExBy8B,EAAgBv2C,GAAa,IAC/B,GA4GUsK,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL2D,UDhPkhB,uBCiPlhBG,MAAM,cAENE,QAASA,IAAMsrC,IACfroC,UAAW3D,EAAK,UAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UDxPsI,uBCwP9G3L,IAAKi4C,GAAa55B,IAAI,KACnD7S,EAAAA,GAAAA,cAAA,MAAIG,UDzPgN,yBC0PjNud,EAAAA,GAAAA,GA5DPitB,EACKE,GAAUt1C,KAAOuoB,EACpBhe,EAAK,sDAAuD,EAACwtB,EAAAA,EAAAA,IAAgByd,GAASH,IACtF9qC,EAAK,8CAA+C,EAACwtB,EAAAA,EAAAA,IAAgBud,GAAWD,IAG/EC,EACH/qC,EAAK,kCAAkCwtB,EAAAA,EAAAA,IAAgBud,IACvD/qC,EAAK2mC,EAAY,iCAAmC,mBAoDjB,CAAC,kBAAmB,WAEnDzmC,EAAAA,GAAAA,cAAA,OAAKG,UD5PoP,yBC6PtPud,EAAAA,GAAAA,GAnDPitB,EACKE,GAAUt1C,KAAOuoB,EACpBhe,EAAK,0DAA0DwtB,EAAAA,EAAAA,IAAgByd,IAC/EjrC,EAAK,kDAIPA,EADG+qC,EACE,oCACApE,EAAY,oCAAsC,2BA2Cb,CAAC,kBAAmB,WAE1DzmC,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GD/P4W,uBC+P9U8lC,GD/P2Z,yBCgQvchsC,EAAAA,GAAAA,cAAA,MAAIG,UDhQsmB,wBCiQvmBL,EAAK,qBAIVE,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GDrQuQ,uBCqQ3OugC,GDrQgT,yBCsQzV8F,EAAiB3sC,KAAI,CAACgpC,EAAS3kB,IAE5BjkB,EAAAA,GAAAA,cAACwpC,GAAkB,CACjBhlC,IAAKokC,EACLxoC,MAAON,EAAK2kC,GAAuBmE,IACnCzjC,KAAkB,kBAAZyjC,EACF9oC,EAAKwlC,GAA6BsD,GAClC,CAACsC,EAAeE,EAAcC,EAAWC,EA/N1C,IAgOCxrC,EAAKwlC,GAA6BsD,IACtC9kC,KAAM6lC,GAA4Bf,GAClC3kB,MAAOA,EACPzjB,QAASirB,EAAWmd,OAI1B5oC,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GAAepQ,GDtR+uB,wBCuRzwBuQ,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAE1B2H,EAAAA,GAAAA,cAAA,UACG0d,EAAAA,GAAAA,GAAW5d,EAAK,2BAA4B,CAAC,qBAEhDE,EAAAA,GAAAA,cAAA,UACG0d,EAAAA,GAAAA,GAAW5d,EAAK,4BAA6B,CAAC,sBAxE/D,WACE,GAAKwmC,KAAUqE,GAAUE,GAAUt1C,KAAOuoB,GAI1C,OACE9d,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAmBuQ,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,IAC1Dq0C,EAAAA,GAAAA,GAAuBpG,EAAMqG,WAAYrG,EAAMsG,gBAGtD,CAiEaC,KAEDpG,GACAzmC,EAAAA,GAAAA,cAAA,OAAKG,UDnSsyB,wBCqSzyBH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UDrSmE,uBCqSzC+oC,SAAO,EAACC,qBAAmB,EAAC3oC,QAlJ5E,WACE4rC,GACF,GAiJiBtsC,EAAK,sBAAsBspC,EAAAA,GAAAA,GAAenX,OAAOpE,EAAMwb,QAASxb,EAAMyb,SAAUxpC,EAAK4xB,WAiB5F,K,eCvTZ,MC8DA,IAAe9zB,EAAAA,EAAAA,KA5CkBkvC,EAC/B9E,SAAQ5a,UAAS2f,oBAAmB7iC,eAEpC,MAAMpK,GAAOC,EAAAA,EAAAA,MAEP,OAAEkoC,EAAM,OAAEoB,EAAM,SAAEC,GAAatB,EAC/BgF,EAAWhpC,KAAKipC,MAAM5D,EAASpB,GAE/BiF,GAAWrzC,EAAAA,EAAAA,KAAQ,IAChBkzC,GAAqBA,EAAoBC,EAC5ChpC,KAAKwkC,KAAK,IAAMwE,GAAYD,EAAoB,WAChD10C,GACH,CAAC00C,EAAmBC,IAEjBG,GAAe1tC,EAAAA,EAAAA,KAAa0G,IAC5BA,EAAEgR,OAAOiW,SACXljB,EAAS+9B,EACX,GACC,CAACA,EAAQ/9B,IAEZ,OACElK,EAAAA,GAAAA,cAAA,SAAOG,WAAW+F,EAAAA,GAAAA,GDvCI,uBCuC2BknB,GDvCK,wBCuCsB/mB,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACpG2H,EAAAA,GAAAA,cAAA,SACEG,UDzCiF,uBC0CjFyB,KAAK,QACL4iB,KAAK,cACLva,MAAOg+B,EACP7a,QAASA,EACTljB,SAAUijC,IAEZntC,EAAAA,GAAAA,cAAA,OAAKG,UDhD+G,wBCiDlHH,EAAAA,GAAAA,cAAA,OAAKG,UDjD4I,wBCiDlHL,EAAK,SAAUmoC,IAC9CjoC,EAAAA,GAAAA,cAAA,OAAKG,UDlD8K,wBCmDhLL,EAAK,iBAAiBspC,EAAAA,GAAAA,GAAe4D,EAAU1D,EAAUxpC,EAAK4xB,OAC9Dp4B,QAAQ4zC,IACPltC,EAAAA,GAAAA,cAAA,QAAMG,UDrD2O,uBCqD/MC,MAAON,EAAK,iBAAiB,KAASotC,EAAS,OAGrFltC,EAAAA,GAAAA,cAAA,OAAKG,UDxD8M,yBCwDnLipC,EAAAA,GAAAA,GAAeC,EAAQC,EAAUxpC,EAAK4xB,QAElE,ICsGZ,IAAe9zB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACxC,MAAM,UAAEsvC,EAAS,gBAAEC,EAAe,cAAEC,IAAkBh8B,EAAAA,EAAAA,IAAexT,GAAQyvC,kBAAoB,CAAC,EAC5F/vB,EAAO4vB,GAAY1uC,EAAAA,EAAAA,IAAWZ,EAAQsvC,QAAa/0C,EAGzD,MAAO,CACLmlB,OACAgwB,MAJYhwB,EAAOA,EAAKiH,UAAUgpB,kBAAep1C,EAKjDg1C,kBACAC,cAAeA,EAAgBrb,OAAOqb,QAAiBj1C,EACvDwZ,eAAgB/T,EAAO2e,SAASC,MAAM7K,eACvC,GAXiBhU,EA5HgC6vC,EAClDzuC,SACAue,OACAgwB,QACAH,kBACAC,gBACAz7B,qBAEA,MAAM,iBAAE87B,EAAgB,sBAAEC,EAAqB,QAAEC,IAAYtuC,EAAAA,EAAAA,MAEvDO,GAAOC,EAAAA,EAAAA,KACP+tC,GAAe3mB,EAAAA,GAAAA,GAAiB3J,GAAM,GACtCuwB,GAAgB5mB,EAAAA,GAAAA,GAAiBqmB,GAAO,IACvCQ,EAAgBC,IAAqBzoC,EAAAA,EAAAA,MACtC0oC,EAAYH,IAAgB,GAC5BhB,GAAoBlzC,EAAAA,EAAAA,KAAQ,KAChC,IAAKk0C,GAA0C,IAAzBA,EAAc5pC,SAAiB+pC,EACnD,OAGF,MAAMC,EAAcJ,EAAcK,QAAO,CAACC,EAAKC,IACtCA,EAAKjF,OAAS6E,GAAW7E,OAASiF,EAAOJ,GAC/CA,GAEH,OAAOC,EAAY7E,WAAa+D,GAAmBC,EAC/CA,EACAtpC,KAAKipC,MAAMkB,EAAY9E,OAAS8E,EAAYlG,OAAO,GACtD,CAACiG,EAAWH,EAAeT,EAAeD,KAE7ChxC,EAAAA,EAAAA,KAAU,KACJ4C,GACFgvC,EAAkBC,GAAWjG,OAC/B,GACC,CAACiG,GAAWjG,OAAQhpC,IAEvB,MAAMsvC,GAAe10C,EAAAA,EAAAA,KAAQ,IACpBk0C,GAAehG,MAAMuG,GAASA,EAAKrG,SAAW+F,KACpD,CAACD,EAAeC,IAEbnc,GAAepyB,EAAAA,EAAAA,KAAY,KAC1B8uC,IAILX,IACAC,EAAQ,CAAEjjC,IAAK2jC,EAAaC,SAAS,GACpC,CAACZ,EAAuBC,EAASU,IAE9BE,GAAqBhvC,EAAAA,EAAAA,KAAY,KACrCkuC,GAAkB,GACjB,CAACA,IAoBJ,OACE3tC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJb,QAASwuC,EACT3uC,OAAQA,EACRkB,UC9GwB,wBDgHxBH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL2D,UCpHyD,uBDqHzDG,MAAM,cAENE,QAASA,IAAMotC,IACfnqC,UAAW3D,EAAK,UAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEfH,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAACC,KAAMswB,EAActxC,KAAK,QAAQ2D,UC5HkD,uBD4HxB0R,eAAgBA,EAAgB4L,WAAS,IAC5Gzd,EAAAA,GAAAA,cAAA,MAAIG,UC7H2H,wBD8H5HL,EAAK,6BAERE,EAAAA,GAAAA,cAAA,KAAGG,UChIiK,yBDiIjKud,EAAAA,GAAAA,GACC5d,EAAK,kCAAkCrB,EAAAA,EAAAA,IAAuBqvC,IAC9D,CAAC,QAAS,qBAId9tC,EAAAA,GAAAA,cAAA,OAAKG,UCvIyO,wBDwI3O4tC,GAAenuC,KAAK0uC,GACnBtuC,EAAAA,GAAAA,cAAC8sC,GAAU,CACTtoC,IAAK8pC,EAAKjF,OACVrB,OAAQsG,EACRvB,kBAAmBA,EACnB3f,QAASkhB,EAAKrG,SAAW+F,EACzB9jC,SAAU+jC,OAtDtB,WACE,MAEMS,EAFO5uC,EAAK,mCAEC6uC,MAAM,0BAEzB,GAAKD,KAASA,EAAMvqC,OAAS,GAI7B,OACEnE,EAAAA,GAAAA,cAAA,KAAGG,UClG4M,wBDmG5MuuC,EAAM,GACP1uC,EAAAA,GAAAA,cAAC4uC,GAAAA,EAAI,CAACC,WAAS,EAACruC,QAASiuC,GAAqBC,EAAM,IACnDA,EAAM,GAGb,CA2COI,IAGH9uC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UCtJwQ,uBDsJ9O+oC,SAAO,EAACx+B,UAAWsjC,EAAgBxtC,QAASqxB,GAC3E/xB,EACC,sBACAyuC,IAAgBnF,EAAAA,GAAAA,GAAenX,OAAOsc,EAAalF,QAASkF,EAAajF,SAAUxpC,EAAK4xB,QAGtF,KExINqd,GAA2D,CAC/D5I,mBAAoB,4BACpB6I,mBAAoB,uBACpB9I,cAAe,sBACfN,mBAAoB,yBACpBC,eAAgB,0BAChBF,SAAU,2BAGNsJ,GAAmE,CACvE9I,mBAAoB,kCACpB6I,mBAAoB,6BACpB9I,cAAe,4BACfN,mBAAoB,+BACpBC,eAAgB,gCAChBF,SAAU,iCAGNuJ,GAAmE,CACvE/I,mBAAoB,mCACpB6I,mBAAoB,8BACpB9I,cAAe,6BACfN,mBAAoB,gCACpBC,eAAgB,iCAChBF,SAAU,kCAGNwJ,GAAoD,CACxDhJ,mBAAoB,kBACpB6I,mBAAoB,kBACpB9I,cAAe,oBACfN,mBAAoB,iBACpBC,eAAgB,kBAChBF,SAAU,oBAGNyJ,GAA4F,CAChGJ,mBAAoBA,CAAClvC,EAAcmK,IAEnB,MAAVA,EAAuBnK,EAAK,cAAe,KACjC,MAAVmK,EAAuBnK,EAAK,cAAe,MACxCuK,EAAAA,GAAAA,IAAevK,EAAMmK,EAAQolC,EAAAA,MA6IxC,IAAezxC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUic,YACT,MAAM,OAAE2sB,GAAW5oC,EAAOytC,WAAa,CAAC,EAClC9E,GAAYwE,EAAAA,EAAAA,IAA2BntC,GAE7C,MAAO,CACLwxC,aAAcv1B,EAAQ2sB,IAAS3sB,GAAO,QAAK1hB,EAC3Ck3C,aAAcx1B,EAAQ2sB,IAAS3sB,GAAO,QAAK1hB,EAC3Cm3C,gBAAgBC,EAAAA,EAAAA,IAA+B3xC,GAC/C2oC,YACD,GAVe5oC,EA5FwC6xC,EAC1DJ,eACAC,eACAx1B,QACA0sB,YACA+I,oBAEA,MAAM,uBAAEG,EAAsB,iBAAEhC,IAAqBpuC,EAAAA,EAAAA,MAC/CO,GAAOC,EAAAA,EAAAA,MAEN0qC,EAAWmF,EAAcC,IAAentC,EAAAA,EAAAA,KAEzC2M,GAAc5P,EAAAA,EAAAA,KAAY,KAC9BkuC,IACAiC,GAAc,GACb,CAACjC,EAAkBiC,KAEtBvzC,EAAAA,EAAAA,KAAU,MACH0d,GAAS0wB,GAAWoF,GAAa,GACrC,CAACpF,EAAW1wB,EAAO81B,IAEtB,MAAMzvC,EAAQN,EAAK,gBACbgwC,EAAiB/1B,GAASq1B,GAAsBr1B,GAChD4mB,EApER,UAA+B,KAC7B7gC,EAAI,UACJiwC,EAAS,UACTtJ,EAAS,cACT+I,EAAa,aACbF,EAAY,aACZC,EAAY,eACZO,IAUA,IAAKC,EACH,OAGF,MAAMC,EAAwBF,EAAiBA,EAAehwC,EAAMwvC,GAAgBA,EAC9EW,EAAwBH,EAAiBA,EAAehwC,EAAMyvC,GAAgBA,EAEpF,OAAI9I,EACK3mC,EAAKovC,GAA0Ba,GAAYE,GAG7CT,EACH1vC,EAAKivC,GAAkBgB,GACT,mBAAdA,EAAiCE,EAAwB,CAACD,EAAuBC,IACjFnwC,EAAKmvC,GAA0Bc,GAAYC,EACjD,CAoCsBE,CAAsB,CACxCpwC,OACAiwC,UAAWh2B,EACX0sB,YACA+I,gBACAF,eACAC,eACAO,mBAEIhsC,EAAOiW,GAASo1B,GAAWp1B,GAC3Bo2B,EAAaX,IAAkB/I,EAErC,OACEzmC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJb,QAASwwC,EACT5pB,oBAAqB2pB,EACrB1wC,OAAQ3F,QAAQygB,KAAW0wB,EAC3BrqC,MAAOA,EACPD,UCvJiB,yBDyJfgwC,GACAnwC,EAAAA,GAAAA,cAAA,OAAKG,UC1JgK,wBD2JnKH,EAAAA,GAAAA,cAAA,KAAGG,WAAW+F,EAAAA,GAAAA,GC3JqS,uBD2JpQpC,KAC/C9D,EAAAA,GAAAA,cAAA,OAAKG,UC5JuO,wBD4JxM2vC,IAClChwC,EAAM2mC,EAAY8I,EAAeD,KAC7B7I,EAAY8I,EAAeD,KAKpCa,GACCnwC,EAAAA,GAAAA,cAACigC,GAAoB,CACnB9/B,UCrK0F,uBDsK1F+/B,UAAW4P,IAAiBhwC,EAAMwvC,IAAiBA,GAAchH,WACjEnI,WAAY2P,IAAiBhwC,EAAMyvC,IAAiBA,GAAcjH,WAClElI,kBAAmBt8B,IAIvB9D,EAAAA,GAAAA,cAAA,YACG0d,EAAAA,GAAAA,GAAWijB,GAAe,GAAI,CAAC,kBAAmB,QAGrD3gC,EAAAA,GAAAA,cAAA,OAAKG,UChLiY,wBDiLpYH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,wBACVI,QAAM,EACNC,QAASovC,EACTtvC,MAAM,WAELR,EAAKqwC,EAAa,SAAW,OAE/BA,GAEDnwC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,WAAW+F,EAAAA,GAAAA,GAAe,wBC5L2b,wBD6LrdgjC,SAAO,EACP1oC,QAAS6O,EACT/O,MAAM,WAELR,EAAK,iBACNE,EAAAA,GAAAA,cAAA,KAAGG,WAAW+F,EAAAA,GAAAA,GClMghB,uBDkM9e,yBAI9C,K,2HEjJZ,MA4QA,IAAetI,EAAAA,EAAAA,KA1QkBwyC,EAC/BC,aACAC,cACArsB,QACAssB,WACA3hC,eACA4hC,mBACAC,kBACAC,iBACAC,uBACAC,yBACAC,uBACAC,wBACAC,sBACAC,kBACAC,kBACAC,gBACAC,wBACAC,oBACAC,qBACAC,yBAEA,MAAM,oBACJC,EAAmB,uBACnBC,EAAsB,iBACtB7D,EAAgB,iBAChB8D,EAAgB,aAChBC,IACEnyC,EAAAA,EAAAA,MAGEkK,GAAMtO,EAAAA,EAAAA,IAAuB,MAG7Bw2C,GAAkBx2C,EAAAA,EAAAA,IAA0B,MAE5Cy2C,GAAoBz2C,EAAAA,EAAAA,IAA0B,MAE9C2E,GAAOC,EAAAA,EAAAA,MACN8xC,EAAoBC,EAAkBC,IAAqBrvC,EAAAA,EAAAA,MAC5D,SAAEC,IAAaC,EAAAA,EAAAA,OAEdovC,EAAaC,IAAkBzsC,EAAAA,EAAAA,IA5CT,GA8CvB0sC,GAAiBC,EAAAA,GAAAA,IAAkB1oC,EAAKsnC,GAExCjiC,GAAuBuyB,EAAAA,GAAAA,GAAmBzyB,GAE1CwjC,EAAkBzvC,EAAW,EAAI,GACjC0vC,EAAgB1vC,EAAW,EAAI,GAC/B2vC,EAAWjC,EAAW96C,KAAOg9C,EAAAA,IAC7BC,EAAanC,EAAW96C,KAAOk9C,EAAAA,IAC/BC,EAAUrC,EAAWqC,QACrBC,GAAgBL,IAAYM,EAAAA,EAAAA,IAAmBvC,GAE/CwC,GAAoBpzC,EAAAA,EAAAA,KAAY,KAChCizC,EACFlB,IAEAD,IAEFQ,GAAmB,GAClB,CAACP,EAAwBD,EAAqBQ,EAAmBW,IAE9DI,GAAiBrzC,EAAAA,EAAAA,KAAY,KAC7BkzC,IAAiBhC,EACnBhD,EAAiB,CACfpH,eAAgB,mBAGlBkL,EAAiB,CACfsB,aAAc1C,EAAW96C,IAE7B,GACC,CAACo7C,EAAsBgC,EAAchF,EAAkB0C,EAAYoB,IAEhEuB,GAA8BvzC,EAAAA,EAAAA,KAAY,KAC9CuxC,IAAkB,CAChBz7C,GAAI09C,EAAAA,IACJC,UAAU,EACV35C,SAAS,EACT45C,eAAgB,CACdxT,UAAW,UAEQ,GACtB,CAACqR,IAEEoC,IAA+B3zC,EAAAA,EAAAA,KAAY,KAC/CuxC,IAAkB,CAChBz7C,GAAI89C,EAAAA,IACJH,UAAU,EACV35C,SAAS,EACT45C,eAAgB,CACdxT,UAAW,UAEQ,GACtB,CAACqR,IAEEsC,GAAWZ,EAAUa,EAAAA,IAAoBC,EAAAA,IACzCC,GAASf,EAAUL,EAAgBD,EAEnCsB,IAAuBj0C,EAAAA,EAAAA,KAAalE,GACnCA,EAEEyI,KAAKipC,MAAM1xC,GAAS+3C,GAAWG,KA1GX,GA2G1B,CAACH,GAAUG,KAER5tC,IAAepG,EAAAA,EAAAA,KAAak0C,IAChC1B,EAAeyB,GAAqBC,EAAMC,YAAYr4C,OAAO,GAC5D,CAACm4C,MACJG,EAAAA,GAAAA,GAAkBpqC,EAAK5D,KAEvBoG,EAAAA,EAAAA,KAAgB,KACTxC,EAAInO,SACT22C,EAAeyB,GAAqBjqC,EAAInO,QAAQipC,aAAa,GAC5D,CAACmP,MAEJr3C,EAAAA,EAAAA,KAAU,KACJ61C,IAAmB7B,EAAWtM,UAAU5/B,QAAUksC,EAAWyD,YAC/DpC,EAAa,CACXyB,eAAgB,CACd59C,GAAI86C,EAAW96C,GACfu+C,WAAYzD,EAAWyD,aAG7B,GACC,CAAC5B,EAAgBR,EAAcrB,IAElC,MAAM0D,IAAYtD,IAAoB6B,GAAYI,IAAY/B,GACzDN,EAAWtM,UAAUiQ,MAAK,EAAGC,aAAcA,IAE1CC,GAAc7D,EAAW8D,gBAAkB9D,EAAW+D,WACtDC,IAAUH,IAAe7D,EAAW96C,KAAOg9C,EAAAA,KAC1C+B,GAAM,CAAGC,KAAU7xC,EAAAA,EAAAA,GAAQ2xC,IAC5BG,GAAkC,EAAdxC,EAAkB,EACtCyC,GAAkB5D,EAAuBR,EAAWlO,MAAQ,EAAIkO,EAAWlO,MAE3EuS,GAAgB1wC,KAAKwkC,KAAKxkC,KAAKgF,IAAIwrC,GAAmBC,IAAmBzC,IAAgBsB,GAAWG,IACpG73C,GAAS04C,GAAQI,GAAgB1wC,KAAKwkC,KAAKiM,GAAkBzC,IAAgBsB,GAAWG,IAExFkB,GAAmBrC,GAAY1B,EAE/BgE,IAAwB/6C,EAAAA,EAAAA,KAAQ,IACpC22C,EAAmB,IAAIqE,IAAIrE,EAAiB5wC,KAAI,EAAGrK,QAASA,UAAO8C,GAClE,CAACm4C,IAEJ,OACExwC,EAAAA,GAAAA,cAAA,OACEyJ,IAAKA,EACLjF,IAAK6rC,EAAW96C,GAChBA,GAAK,GAAEg7C,GAAY,iBAAiBtsB,IACpC9jB,WACE+F,EAAAA,GAAAA,GAAe,aAAc6tC,IAAY,uBAGzCY,IACA30C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qBACbH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBACV4zC,IAAY/zC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,2CACzBkwC,EAAWjwC,OAEbkyC,GACCtyC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,+BAA+BK,QAASsxC,KAErDQ,GAAYI,IAAYwB,IACxBl0C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,wBACVgpC,oBAAqBwJ,IAAiBhC,EACtCnwC,QAASsyC,EACTgC,MAAI,EACJt4C,KAAK,OACLu4C,OAAK,GAEuBj1C,EAA3B6yC,GAAgBoB,GAAgB,SAAiB,SAK1D/zC,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GAAe,+CAAgD4I,GAC1E7Y,MAAQ,WAAU2F,SAElBoE,EAAAA,GAAAA,cAAA,UACEyJ,IAAKkoC,EACLxxC,UAAU,gBACVlK,MAAOo+C,GAAU,WAAUK,aAAqBr8C,KAEhDi6C,GAAYE,GAAc6B,KAAWr0C,EAAAA,GAAAA,cAAA,UAAQyJ,IAAKmoC,EAAmBzxC,UAAU,kBAChF0wC,GACC7wC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,6BACVG,MAAM,cACNE,QAASwyC,EACTxuC,IAAI,sBAEJxE,EAAAA,GAAAA,cAAA,OAAKxL,IAAKwgD,GAAMniC,IAAI,WAGvBi+B,GACC9wC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,4CACVG,MAAM,cACNE,QAAS4yC,GACT5uC,IAAI,uBAEJxE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBAGhByO,GAAgByhC,EAAWtM,UAAYsM,EAAWtM,SAChDM,MAAM,EAAGiQ,GAAQE,GAAoBnE,EAAWtM,SAAS5/B,QACzDvE,KAAI,CAACkjC,EAASnjB,KACb,MAAMs1B,GAAa3C,GAAYE,KAC1B0C,EAAAA,EAAAA,KAAgC5uB,EAAAA,EAAAA,MAAawc,EAAQqQ,gBACpDgC,EAAad,IAAU10B,GAAK60B,IAAsBS,EACpDrD,EACAD,EAEJ,OACE3xC,EAAAA,GAAAA,cAACo1C,GAAAA,EAAa,CACZ5wC,IAAKs+B,EAAQvtC,GACbutC,QAASA,EACTtmC,KAAM82C,GACNvC,oBAAqBA,EACrBsE,WAAY/E,EACZG,gBAAiBA,EACjBC,eAAgBA,EAChB4E,YAAU,EACV3E,qBAAsBA,EACtBgB,gBAAiBwD,EACjB30C,QAASwwC,EACTuE,SAAUzS,EACV0S,cAAehD,GAAcoC,IAAuBa,IAAI3S,EAAQvtC,IAAM07C,OAAkB54C,EACxFq9C,YAAcd,IAAuBa,IAAI3S,EAAQvtC,SAAsB8C,EAAhB64C,EACvDyE,oBAAqBrD,EAAWnB,OAAwB94C,EACxD+4C,kBAAmBA,EACnBC,mBAAoBA,EACpBC,mBAAoBA,GACpB,IAGPgD,IAASG,GAAkBD,IAC1Bx0C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,wCACVqD,OAAK,EACLlD,MAAM,cACNE,QAAS+zC,GACT/vC,IAAI,QACL,IACGiwC,GAAkBD,KAKzBlC,GACCtyC,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ3mB,KAAMrF,EAAK,mCACXb,OAAQ4yC,EACRzyC,QAAS2yC,EACT/lB,eAAgB6mB,EAChBnU,sBAAoB,IAGpB,I,cC7TV,MCuGA,IAAe9gC,EAAAA,EAAAA,KAxEuBg4C,EACpCvF,aACA7zC,OAAOq5C,EAAAA,IACPR,YACAtE,sBACAY,sBAEA,MAAM,aAAED,IAAiBnyC,EAAAA,EAAAA,MAEnBiU,GAAerY,EAAAA,EAAAA,IAAuB,OAEtC,aAAE26C,EAAY,SAAE5C,EAAU6C,SAAUx8C,GAAY82C,EAEhD6B,GAAiBC,EAAAA,GAAAA,IAAkB3+B,EAAcu9B,GAEjDiF,EAAyB3F,EAAWtM,UAAYxqC,IAAY08C,EAAAA,GAC5DC,EAAaF,IAA0BG,EAAAA,EAAAA,IAAsB9F,EAAWtM,SAAU,GAAGxuC,IACrF6gD,GAAkBj8C,EAAAA,EAAAA,GAAS+7C,GAAahE,GAExCmE,GAAcP,IAAiBE,GAA2B9C,IAAc,aAAY7C,EAAW96C,KAC/FiF,GAAYL,EAAAA,EAAAA,GAASk8C,GAAYnE,GACjCoE,EAAU97C,GAAa47C,EACvBtnC,GAAuBuyB,EAAAA,GAAAA,GAAmBiV,GAE1CjoC,GAASkoC,EAAAA,GAAAA,GAAwB/iC,EAAcm+B,GAarD,OAXAt1C,EAAAA,EAAAA,KAAU,KACJ61C,IAAmB7B,EAAWtM,UAAU5/B,QAC1CutC,EAAa,CACXyB,eAAgB,CACd59C,GAAI86C,EAAW96C,GACfu+C,WAAYzD,EAAWyD,aAG7B,GACC,CAAC5B,EAAgBR,EAAcrB,IAGhCrwC,EAAAA,GAAAA,cAAA,OAAKyJ,IAAK+J,EAAcrT,UAAU,qBAC/Bm2C,EACCpD,EACElzC,EAAAA,GAAAA,cAAC0jC,GAAAA,EAAe,CACdvjC,UAAW2O,EACX60B,OAAQnpC,EACRgC,KAAMA,GAAQ6R,EAAO7R,KACrBonC,KAAMsO,IAAmBmD,EACzBxR,gBAAgBqR,EAAAA,EAAAA,KAAgC5uB,EAAAA,EAAAA,MAAa+pB,GAC7DmG,aAAc7E,GAAiBr2C,cAAWjD,EAC1Co+C,mBAAoBpoC,EAAOqoC,SAE1Bn9C,IAAYy8C,EACfh2C,EAAAA,GAAAA,cAACuhC,GAAAA,EAAc,CACbphC,WAAW+F,EAAAA,GAAAA,GDnFC,uBCmF4B4I,GACxCta,IAAKgG,EACLgnC,QAAS0Q,IAAmBmD,EAC5BvkC,MAAI,EACJnD,yBAAuB,IAGzB3N,EAAAA,GAAAA,cAAA,OACExL,IAAKgG,GAAa47C,EAClBj2C,UAAW2O,EACX+D,IAAI,MAIR8jC,EAAAA,GAAAA,IAAgBtG,EAAWjwC,MAAO,GAEhC,ICzBJw2C,GAAqC,GAmR3C,IAAeh5C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,SAAQoyC,qBACjB,MACE3M,UACE8S,SAAUC,GAEZC,cACEjyB,KAAMkyB,EACNC,YAAaC,EACbC,cACEC,OAAQC,IAGZC,mBAAoBC,GAClBz5C,EAEE2yC,EAAkBn3C,QAAQgF,IAAU4f,EAAAA,EAAAA,IAAqBpgB,EAAQQ,IAEvE,MAAO,CACL04C,iBAAmBtG,OAAoCr4C,EAAnB2+C,EACpCO,qBAAuB7G,OAAwCr4C,EAAvBk/C,EACxCF,mBAAoB3G,EAAiB2G,OAAqBh/C,EAC1Dy+C,kBACAU,oBAAqB15C,EAAOi5C,aAAaU,MAAMC,OAC/CC,WAAY75C,EAAO2e,SAASC,MAAMk7B,mBAClCnH,kBACAE,sBAAsB1F,EAAAA,EAAAA,IAA2BntC,GACjDo5C,yBACAW,oBAAqB/5C,EAAO+5C,oBAC5BC,qBAAsBh6C,EAAOg6C,qBAC9B,GA9Bej6C,EAjRiCk6C,EACnD53C,YACAmwC,cACAkH,sBACAR,mBACAO,uBACAF,qBACAP,kBACAvG,WAZwB,mBAaxB2G,yBACAS,aACAjH,iBACAD,kBACAE,uBACAqH,wBACAH,sBACAC,uBACAG,sBACA7G,oBACAC,qBACAC,yBAGA,MAAM99B,GAAerY,EAAAA,EAAAA,IAAuB,MAEtC+8C,GAAY/8C,EAAAA,EAAAA,IAAuB,MAEnCw2C,GAAkBx2C,EAAAA,EAAAA,IAA0B,MAE5Cy2C,GAAoBz2C,EAAAA,EAAAA,IAA0B,OAE7Cg9C,EAAgBC,IAAqB5yC,EAAAA,EAAAA,IAAiB,GAEvD8xC,GAAqBz9C,EAAAA,EAAAA,KAAQ,IAC1B62C,EACH2G,EACAthD,OAAOsiD,QAAOC,EAAAA,GAAAA,IAAWtB,EAAmBO,KAC/C,CAACP,EAAkBtG,EAAgB6G,EAAsBF,KAEpDkB,QAASxH,IAAwByH,EAAAA,GAAAA,IAAwB,CAC/DC,QAASjlC,EACTklC,WA9CkC,MA+ChCC,IACFA,EAAQC,SAASjF,IACf,MAAM,GAAEp+C,GAAOo+C,EAAMx8B,OACrB,IAAK5hB,IAAOA,EAAGsjD,WAAWtI,GACxB,OAGF,MAAMtsB,EAAQgO,OAAO18B,EAAGw8B,QAAS,GAAEwe,KAAa,KAChDqG,GAAwB3yB,GAAS0vB,EAAMzB,cAAc,IAGvD,MAAM4G,EAA0BlC,GAC7Bh3C,KAAI,CAACsyC,EAAgBjuB,KAAU,CAAGA,QAAOiuB,qBACzCvsB,QAAO,EAAGusB,oBAAqBA,IAE7B4G,EAAwB30C,QAI7Bi0C,EAAkBU,EAAwB90C,KAAKipC,MAAM6L,EAAwB30C,OAAS,IAAI8f,MAAM,KAE1Fs0B,QAASQ,IAAiCP,EAAAA,GAAAA,IAAwB,CAAEC,QAASP,IAE/Ep4C,GAAOC,EAAAA,EAAAA,KAEPi5C,EAAiB1/C,QAAQk+C,GAEzByB,GAAUp/C,EAAAA,EAAAA,KAAQ,KACtB,IAAK29C,EACH,OAAO0B,GAAAA,EAGT,MAAMC,EAAoC,GAE1C,GAAIzI,EAAgB,CAClB,MAAM0I,EAAyBtC,EAAgBgB,GAC/C,GAAIsB,EAAuBrV,UAAU5/B,OAAQ,CAC3C,MAAM4/B,GAAYqV,EAAuBrV,UAAY,IAAIsV,OAAO/B,GAAsB,IACtF6B,EAAYt1C,KAAK,IACZu1C,EACHrV,WACA5B,MAAO4B,EAAS5/B,OAChB5O,GAAIg9C,EAAAA,IACJnyC,MAAON,EAAK,mBAEhB,CACF,MAAO,GAAIk4C,EAAuB,CAChC,MAAMsB,EAAwBxC,EAAgBe,GAC1CyB,EAAsBvV,UAAU5/B,QAClCg1C,EAAYt1C,KAAK,IACZy1C,EACH/jD,GAAIg9C,EAAAA,IACJnyC,MAAON,EAAK,mBAGlB,MAAWw3C,GAAoBnzC,QAC7Bg1C,EAAYt1C,KAAK,CACftO,GAAIg9C,EAAAA,IACJuB,WAAY,IACZ1zC,MAAON,EAAK,kBACZikC,SAAUuT,EACVnV,MAAOmV,EAAmBnzC,OAC1BuuC,SAAS,IAIb,MAAM6G,GAAkBlzB,EAAAA,GAAAA,IAAOmxB,EAAoB6B,OAAOnC,GAA0B,KAE9EsC,EAAgBzjD,OAAOsiD,QAAOC,EAAAA,GAAAA,IAAWxB,EAAiByC,IAEhE,MAAO,IACFJ,KACAK,EACJ,GACA,CACDhC,EAAqB9G,EAAgBsH,EAAuBV,EAC5DJ,EAAwBJ,EAAiBgB,EAAsBh4C,EAAM+3C,IAGjE4B,GAAkB5/C,EAAAA,EAAAA,KAAQ,IAC9Bm/C,GAC4D,IAAzDC,EAAQtzB,QAAQjpB,GAAQA,EAAIqnC,UAAU5/B,SAAQA,QAChD,CAAC80C,EAASD,IAEPU,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,KAC1CC,EAAuBb,GAAkBU,IAAsBD,GAErEK,EAAAA,GAAAA,GAAoB5B,GAAY2B,IAGhCx9C,EAAAA,EAAAA,KAAU,KACR,IAAK28C,EACH,OAGF,MAAMxuB,EAAS0tB,EAAU58C,QACzB,IAAKkvB,EACH,OAGF,MAAMuvB,EApJkB,GAoJR5B,GAAwC3tB,EAAOwvB,YAAc,EAAIC,KAEjFtS,EAAAA,GAAAA,GAA2Bnd,EAAQuvB,EAAQ,GAC1C,CAACf,EAAgBb,IAEpB,MAAM+B,GAAmBz6C,EAAAA,EAAAA,KAAawkB,IACpCm0B,EAAkBn0B,GAClB,MAAMk2B,EAAepmD,SAASgvB,eAAgB,GAAEwtB,KAAYtsB,MAC5Dm2B,EAAAA,GAAAA,GAAiB5mC,EAAalY,QAAU6+C,EAAc,aAAS9hD,EA7JpC,IA6JsE,GAChG,CAACk4C,IAEE8J,GAAoB56C,EAAAA,EAAAA,KAAa66C,IACrCrC,EAAoBqC,EAAM,GACzB,CAACrC,IA8DEsC,GAAgBr0C,EAAAA,GAAAA,GAAe,gBAAiB,oBAAqB/F,GAE3E,OAAK05C,EAaH75C,EAAAA,GAAAA,cAAA,OAAKG,UAAWo6C,GACdv6C,EAAAA,GAAAA,cAAA,OACEyJ,IAAKyuC,EACL/3C,UAAU,kDAEVH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAAA,UAAQyJ,IAAKkoC,EAAiBxxC,UAAU,kBACxCH,EAAAA,GAAAA,cAAA,UAAQyJ,IAAKmoC,EAAmBzxC,UAAU,kBACzC84C,EAAQr5C,KAnFjB,SAAqBywC,EAAgCpsB,GACnD,MAAMu2B,EAAenK,EAAWtM,WAAW,GACrC2F,GAAkBxjC,EAAAA,GAAAA,GACtB,uCACA+d,IAAUk0B,GAAkB,aAGxBsC,EAAmBx2B,EAAQy2B,EAAAA,IAC3BC,GAAOzF,EAAAA,EAAAA,KAAgC5uB,EAAAA,EAAAA,MAAa+pB,GAE1D,OAAIA,EAAW96C,KAAOg9C,EAAAA,KACjBlC,EAAW96C,KAAOk9C,EAAAA,KAClBpC,EAAW96C,KAAOqlD,EAAAA,KAClBvK,EAAW96C,KAAOslD,EAAAA,KAClBxK,EAAWyF,eACV0E,EAGFx6C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmE,IAAK6rC,EAAW96C,GAChB4K,UAAWupC,EACXjmC,UAAW4sC,EAAWjwC,MACtBoD,OAAK,EACLs3C,MAAOzK,EAAW96C,KAAOg9C,EAAAA,KAAwBlC,EAAW96C,KAAOk9C,EAAAA,IACnEnyC,MAAM,cAENE,QAASA,IAAM05C,EAAiBj2B,IAE/BosB,EAAW96C,KAAOg9C,EAAAA,IACjBvyC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEbH,EAAAA,GAAAA,cAAC41C,GAAe,CACdvF,WAAYA,EACZgF,WAAYsC,IAAerH,EAC3BS,oBAAqBgI,EACrBpH,gBAAiB8I,EAAoBE,EAAO/I,EAAoBD,OAAmBt5C,KAOzF2H,EAAAA,GAAAA,cAACo1C,GAAAA,EAAa,CACZ5wC,IAAK6rC,EAAW96C,GAChButC,QAAS0X,EACTh+C,KAAMq5C,EAAAA,IACNz1C,MAAOiwC,EAAWjwC,MAClBD,UAAWupC,EACX2L,WAAYsC,IAAerH,EAC3BS,oBAAqBgI,EACrBgC,eAAa,EACbpK,sBAAoB,EACpBgB,gBAAiB8I,EAAoBE,EAAO/I,EAAoBD,OAAmBt5C,EACnFmI,QAAS05C,EACT3E,SAAUtxB,GAIlB,MA4BIjkB,EAAAA,GAAAA,cAAA,OACEyJ,IAAK+J,EACLrT,WAAW+F,EAAAA,GAAAA,GAAe,kCAAmCmC,EAAAA,GAAe,eAAiB,kBAE5F4wC,EAAQr5C,KAAI,CAACywC,EAAY1wB,IACxB3f,EAAAA,GAAAA,cAACowC,GAAU,CACT5rC,IAAK6rC,EAAW96C,GAChB86C,WAAYA,EACZC,YAAah3C,QAAQq+C,GAAcrH,GACnCrsB,MAAOtE,EACP4wB,SAAUA,EACVQ,oBAAqBA,EACrBniC,aAAcupC,GAAkBx4B,EAAI,GAAKw4B,GAAkBx4B,EAAI,EAC/D8wB,gBAAiBA,EACjBC,eAAgBA,EAChBE,uBAAwBoH,GAAyBtH,EACjDG,qBAAsBmH,GAAyB3H,EAAW96C,KAAOg9C,EAAAA,IACjEzB,sBAAuBJ,GAAkBL,EAAW96C,KAAOg9C,EAAAA,IAC3D5B,qBAAsBA,EACtBK,gBAAiBqJ,EACjBjJ,kBAAmBA,EACnBC,mBAAoBA,EACpBC,mBAAoBA,QA5C1BtxC,EAAAA,GAAAA,cAAA,OAAKG,UAAWo6C,GACbd,EACCz5C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAmBL,EAAK,eAEvCE,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,MA4CR,KC3QV,IAAep9C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACjC,CACLm9C,0BAA2B3hD,QAAQwE,EAAOi5C,aAAaE,aAAa9yC,WAFpDtG,EAnDgCq9C,EAClDj8C,SACAk8C,kBACAF,4BACAG,sBACAh8C,cAEA,MAAM,0BAAEi8C,IAA8B97C,EAAAA,EAAAA,MAEhC+7C,GAAmBngD,EAAAA,EAAAA,OAClBogD,EAAoBC,EAAsBC,IAA0B/4C,EAAAA,EAAAA,MAC3ErG,EAAAA,EAAAA,KAAU,KACRi/C,EAAiBhgD,QAAU6/C,EAAgB7/C,QAASqN,wBAAwB2F,KAAK,GAChF,CAACrP,EAAQk8C,KAEZ9+C,EAAAA,EAAAA,KAAU,KACJ4C,IAAWg8C,GACbI,GACF,GACC,CAACJ,EAA2Bh8C,EAAQo8C,IAEvC,MAAMhB,GAAoB56C,EAAAA,EAAAA,KAAaqjC,IACrCsY,EAAoBtY,GACpB1jC,GAAS,GACR,CAACA,EAASg8C,IAEb,OACEp7C,EAAAA,GAAAA,cAAC07C,GAAAA,EAAM,KACL17C,EAAAA,GAAAA,cAACsK,GAAAA,EAAI,CACHrL,OAAQA,EACR08C,WAAS,EACTr3C,UAAU,QACVs3C,gBC3DsB,uBD4DtBx8C,QAASA,EACTk8C,iBAAkBA,EAAiBhgD,QACnCugD,kBAAmBN,GAEnBv7C,EAAAA,GAAAA,cAAC+3C,GAAiB,CAChBxH,SAAS,oBACTD,YAAarxC,EACbyxC,gBAAc,EACdU,kBAAmBoK,EACnBnK,mBAAoBoK,EACpBxD,oBAAqBoC,EACrB/I,mBAAoBlyC,KAGjB,K,gBE5Db,MA8BA,IAAexB,EAAAA,EAAAA,KA9BqBk+C,EAClC78C,SACAG,cAEA,MAAMU,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQA,EACRG,QAASA,EACTu/B,gBAAc,EACdv+B,MAAON,EAAK,yBAEZE,EAAAA,GAAAA,cAAA,UAAI0d,EAAAA,GAAAA,GAAW5d,EAAK,oCAAqC,CAAC,QAC1DE,EAAAA,GAAAA,cAAA,UAAI0d,EAAAA,GAAAA,GAAW5d,EAAK,oCAAqC,CAAC,QAC1DE,EAAAA,GAAAA,cAAA,UAAI0d,EAAAA,GAAAA,GAAW5d,EAAK,oCAAqC,CAAC,QAC1DE,EAAAA,GAAAA,cAAA,SACEA,EAAAA,GAAAA,cAAC+7C,GAAAA,EAAQ,CACPnxC,IAAK9K,EAAK,qCACVqF,KAAMrF,EAAK,wCAGfE,EAAAA,GAAAA,cAAA,UAAI0d,EAAAA,GAAAA,GAAW5d,EAAK,oCAAqC,CAAC,QAC1DE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUU,EAAK,WAErE,IC4DZ,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAM09C,GAAgBx9C,EAAAA,EAAAA,IAASF,GACzB2f,GAAiBC,EAAAA,EAAAA,IAAqBpgB,EAAQQ,GAC9CF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAC1B6rB,EAAY7wB,QAAQ8E,KAAS69C,EAAAA,EAAAA,IAAc79C,GAC3C89C,EAAU5iD,QAAQ8E,KAASS,EAAAA,EAAAA,IAAiBT,GAC5C+9C,EAAe7iD,QAAQ8E,KAASW,EAAAA,EAAAA,IAAiBX,GAMvD,MAAO,CACL49C,gBACA/9B,iBACAkM,YACA+xB,UACAC,eACAC,aAXoBJ,IAAkB/9B,GAAmBk+B,GAAgBD,EAYzE39C,YAXkBH,IAAQI,EAAAA,EAAAA,IAASJ,EAAK7I,KACtCkJ,EAAAA,EAAAA,KAAuBC,EAAAA,EAAAA,IAAWZ,GAAQa,EAAAA,EAAAA,IAAqBP,UAC/D/F,EAUH,GArBewF,EAjE+Bw+C,EACjDp9C,SACAsd,YACA4N,YACA+xB,UACAC,eACAC,eACA79C,cACAa,cAEA,MAAM,WAAEk9C,IAAe/8C,EAAAA,EAAAA,MAEjBg9C,GAAyB98C,EAAAA,EAAAA,KAAY,KACzC68C,EAAW,CACT//B,YAAWigC,SAAS,IAEtBp9C,GAAS,GACR,CAACk9C,EAAY//B,EAAWnd,IAErBq9C,GAAmBh9C,EAAAA,EAAAA,KAAY,KACnC68C,EAAW,CACT//B,YAAWigC,SAAS,EAAOE,WAAW,EAAMC,UAAU,IAExDv9C,GAAS,GACR,CAACmd,EAAWnd,EAASk9C,IAElBx8C,GAAOC,EAAAA,EAAAA,KAcb,OACEC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQA,EACRG,QAASA,EACTe,UAAU,MACVC,MAAON,EAAK,yBAEZE,EAAAA,GAAAA,cAAA,SAjBOF,EADLqqB,EACU,yBAGV+xB,GAAWC,EACD,kBAGF,wBAWVn8C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASi8C,GACvD38C,EAAK,cAEPs8C,GACCp8C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAAS+7C,GACvDh+C,GACGmf,EAAAA,GAAAA,GAAW5d,EAAK,8BAA+BvB,IAC/CuB,EAAK,qDAGbE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUU,EAAK,YAErE,KCvDZ,IAAelC,EAAAA,EAAAA,KA1B6Bg/C,EAC1C39C,SACA49C,sBAAsB,EACtBz9C,UACA09C,cAEA,MAAMh9C,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQA,EACRG,QAASA,EACTe,UAAU,YACVC,MAAON,EAAK,+BAEZE,EAAAA,GAAAA,cAAA,SAAIF,EAAK,oCAAqC+8C,EAAqB,MACnE78C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASs8C,GACvDh9C,EAAK,gBAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUU,EAAK,YAErE,I,0BCpCZ,MC+GA,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUC,iBACT,MAAQ2B,WAAYq9C,IAAuBzrC,EAAAA,EAAAA,IAAexT,GAAQk/C,kBAAoB,CAAC,GACjF,gBAAE9+C,IAAoB++C,EAAAA,EAAAA,IAAgCn/C,GACtDM,GAAOi4B,EAAAA,EAAAA,IAAkBv4B,GAQ/B,MAAO,CACLi/C,qBACA7+C,iBAAkBH,GAAcG,EAChCK,YAVkBH,IAAQI,EAAAA,EAAAA,IAASJ,EAAK7I,KACtCkJ,EAAAA,EAAAA,KAAuBC,EAAAA,EAAAA,IAAWZ,GAAQa,EAAAA,EAAAA,IAAqBP,UAC/D/F,EASFuG,6BAPmCR,IAAQS,EAAAA,EAAAA,IAAiBT,KAAUF,EAQtEY,iBAPuBV,IAAQW,EAAAA,EAAAA,IAAiBX,GAQjD,GAlBeP,EA9E0Cq/C,EAC5Dj+C,SACAlB,aACAg/C,qBACA7+C,kBACAK,cACAK,+BACAE,mBACAM,cAEA,MAAM,eACJC,EAAc,wBACdC,EAAuB,sBACvB69C,IACE59C,EAAAA,EAAAA,MAEE8vB,GAAahb,EAAAA,EAAAA,GAAYpV,GAOzBO,IAL4BC,EAAAA,EAAAA,KAAY,KAC5CL,IACAC,EAAe,CAAEK,WAAYq9C,EAAqBl9C,oBAAoB,GAAO,GAC5E,CAACR,EAAgB09C,EAAoB39C,KAELK,EAAAA,EAAAA,KAAY,KACzC1B,EACFuB,EAAwB,CAAEI,WAAYq9C,IAEtC19C,EAAe,CAAEK,WAAYq9C,EAAqBl9C,oBAAoB,IAGxET,GAAS,GACR,CAACrB,EAAYqB,EAASE,EAAyBy9C,EAAoB19C,KAEhES,GAAOC,EAAAA,EAAAA,KASb,IANA1D,EAAAA,EAAAA,KAAU,MACH4C,GAAUowB,GACb8tB,GACF,GACC,CAACA,EAAuBl+C,EAAQowB,IAE9B0tB,EAIL,OACE/8C,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQA,EACRG,QAASA,EACTc,QAAShC,OAAkB7F,EAAYmH,EACvCW,UAAU,SACVC,MAAO,QAEPJ,EAAAA,GAAAA,cAAA,SAAIF,EAAK,gCACRlB,GACCoB,EAAAA,GAAAA,cAAA,SAAG,+EAEJlB,GACCkB,EAAAA,GAAAA,cAAA,SAAG,oDAELA,EAAAA,GAAAA,cAAA,OAAKG,UAAWjC,EAAkB,wBAA0B,kBAQ1D8B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACC,MAAM,SAASH,UAAU,wBAAwBI,QAAM,EAACC,QAAShB,GACtEM,EAAK5B,EAAkB,gCAAkC,WAE5D8B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUU,EAAK,YAErE,KCwFZ,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMs/C,GAAW9rC,EAAAA,EAAAA,IAAexT,IACxB8D,KAAMD,EAAe,OAAErD,IAAWL,EAAAA,EAAAA,IAAyBH,IAAW,CAAC,EACzEC,EAAiC,cAApB4D,GACb,UAAEL,IAAc27C,EAAAA,EAAAA,IAAgCn/C,GAChDiE,EAAYzI,SAASyE,IAAcs/C,EAAAA,EAAAA,IAAgCv/C,IACnEw/C,GAAcC,EAAAA,EAAAA,IAAkCz/C,IAC9C4B,WAAYq9C,GAAuBK,EAASJ,kBAAoB,CAAC,EACnEQ,IAAsBl/C,IAASm/C,EAAAA,EAAAA,IAA0B3/C,EAAQQ,EAAQy+C,GACzEW,IAAc3/C,IAAcO,KAASq/C,EAAAA,EAAAA,IAAyB7/C,EAAQQ,EAAQy+C,GAC9Ea,EAAqBR,EAAS31B,gBAAgBo2B,aAC9CC,EAAiBxkD,QAAQskD,GAAsBR,EAAS90B,gBACzD80B,EAASz0B,0BAA4By0B,EAASW,2BAEnD,MAAO,CACLhgD,aACAigD,uBAAuBC,EAAAA,EAAAA,IAA4BngD,GACnDogD,kBAAmB58C,EACnB68C,kBAAmBp8C,EACnBq8C,oBAAqBd,EACrBe,mBAAoBX,EACpBX,qBACAS,sBACAM,iBACD,GAzBejgD,EAtJoCygD,EACtDC,UACA3sC,WACAjQ,kBACA5D,aACAigD,wBACAE,oBACAC,oBACAC,sBACAC,qBACAb,sBACAM,iBACAf,yBAEA,MAAM,eACJyB,EAAc,sBACdrB,EAAqB,yBACrBsB,EAAwB,qBACxBC,EAAoB,iBACpB52B,IACEvoB,EAAAA,EAAAA,MACEO,GAAOC,EAAAA,EAAAA,MAENwC,EAAmBC,EAAiBC,IAAoBC,EAAAA,EAAAA,MACxD2c,EAAmBC,EAAiBC,IAAoB7c,EAAAA,EAAAA,KFrEjCi8C,EAAC/sC,EAAmB8sC,MAUlDE,EAAAA,GAAAA,GAAW,CAAE,QATb,SAAoBz4C,GACbyL,IAILzL,EAAEgK,iBACFuuC,IACF,GAEmC,EE6DnCC,CAAwBrlD,QAAQsY,GAAW8sC,GAE3C,MAAMG,GAA8Bp/C,EAAAA,EAAAA,KAAY,KAC9C09C,GAAuB,GACtB,CAACA,KAGyB19C,EAAAA,EAAAA,KAAY,KACvC++C,GAAgB,GACf,CAACA,KAEJniD,EAAAA,EAAAA,KAAU,KACDuV,GAAarP,GAAsB8c,GAAsBy+B,OAM5DzlD,GALAymD,EAAAA,GAAAA,GAAyB,CACzBC,YAAab,EAAoB17C,OAAkBnK,EACnD2mD,SAAUd,EAAoB17C,OAAkBnK,EAChD4mD,MAAOJ,KAGV,CACDjtC,EAAUrP,EAAmB8c,EAAmB7c,EAAiBq8C,EAA6Bf,EAC9FI,KAGiBz+C,EAAAA,EAAAA,KAAY,KAC7Bi/C,IACA52B,EAAiB,CACf3xB,QAAS2J,EAAK,uBAEhBq9C,GAAuB,GACtB,CAACuB,EAAsBvB,EAAuBr9C,EAAMgoB,KAEhCroB,EAAAA,EAAAA,KAAY,KACjCg/C,IACAtB,GAAuB,GACtB,CAACsB,EAA0BtB,IAX9B,MAaM+B,GAA4B7qC,EAAAA,EAAAA,GAAY2pC,QAAyB3lD,GAAW,GAE5E8mD,EAAyBr/C,EAAK,kCADG8R,EAAWosC,EAAwBkB,EAC6B,KAEjG/+C,GAAY+F,EAAAA,GAAAA,GAChB,uBACAq4C,GAAW,gBACX3sC,GAAY,SAsBd,OACE5R,EAAAA,GAAAA,cAAA,OAAKG,UAAWA,GACdH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,8BACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,cACNkD,OAAK,EACLhD,QAASq+C,EACTp7C,UAAU,oBAEVzD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEfH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,6BAA6BC,MAAO++C,GACjDA,GAGF7lD,QAAQ0kD,IACPh+C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCAlCrB2D,EAyDsB,SAzDRupB,EAyDkBvtB,EAAK,gCAzDRU,EAyDyCgC,GAAiB,EAtDrFxC,EAAAA,GAAAA,cAAA,OACE0yB,KAAK,SACLC,SAAU,EACVxyB,WAAW+F,EAAAA,GAAAA,GACT,OACe,eAEjB1F,QAASA,EACTJ,MAAOitB,GAEPrtB,EAAAA,GAAAA,cAAA,KAAGG,UAAY,QAAgD2D,UAiDjE9D,EAAAA,GAAAA,cAACk9C,GAA0B,CACzBj+C,OAAQsD,EACRxE,WAAYA,EACZqB,QAASqD,IAEXzC,EAAAA,GAAAA,cAAC2kB,EAAAA,EAAW,CACV1lB,OAAQogB,EACRjgB,QAASmgB,EACT7f,WAAYq9C,KAvEGqC,IACnBt7C,EAAcupB,EAAe7sB,CAwEvB,K,eC5KV,MA2DA,IAAe5C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAEQ,EAAM,UAAEie,IAAcjL,EAAAA,EAAAA,IAAexT,GAAQuhD,aAAe,CAAC,EACrE,OAAK/gD,GAAWie,EAIT,CACL+iC,WAAW9tC,EAAAA,EAAAA,IAAkB1T,EAAQQ,EAAQie,IAAYgjC,eAJlD,CAAC,CAKT,GATe1hD,EAzD2B2hD,EAC7CvgD,SACAqgD,gBAEA,MAAM,SACJpoB,EAAQ,iBACRuoB,IACElgD,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,KAEPsP,GAAc5P,EAAAA,EAAAA,KAAa8zB,IAC/BksB,IAEA7iD,YAAW,KACTs6B,EAAS,CAAE3hC,GAAIg+B,GAAS,GAjBG,IAkBD,GAC3B,CAACksB,EAAkBvoB,IAEhBwoB,GAAyBjgD,EAAAA,EAAAA,KAAY,KACzCggD,GAAkB,GACjB,CAACA,IAEEE,GAAqBx4B,EAAAA,GAAAA,GAAiBm4B,GAAW,GAEvD,OACEt/C,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQA,EACRG,QAASqgD,EACTt/C,UAAU,SACVC,MAAQ,WAAUk/C,GAAWn7C,gBAE7BnE,EAAAA,GAAAA,cAAA,OAAKqG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAC5BsnD,GAAsBA,EAAmB//C,KAAK2zB,GAC7CvzB,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAK+uB,EACLpzB,UAAU,6CAEVK,QAASA,IAAM6O,EAAYkkB,IAE3BvzB,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CAACrsB,OAAQA,EAAQssB,kBAAgB,QAIvD7/C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,wBACVI,QAAM,EACNC,QAASk/C,GAER5/C,EAAK,WAGJ,K,mDC7CZ,MAkMA,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAEQ,EAAM,UAAEie,IAAcjL,EAAAA,EAAAA,IAAexT,GAAQgiD,cAAgB,CAAC,EAChE3pD,EAAUmI,GAAUie,GAAY/K,EAAAA,EAAAA,IAAkB1T,EAAQQ,EAAQie,QAAalkB,EAErF,MAAO,CACLiG,SACAie,YACAwjC,UAAW5pD,GAAS4pD,UACpBC,SAAU7pD,GAAS6pD,SACnBT,cAAeppD,GAASopD,cACxB1tC,eAAgB/T,EAAO2e,SAASC,MAAM7K,eACtCouC,mBAAoBniD,EAAOmiD,mBAC5B,GAbepiD,EArLgCqiD,EAClDjhD,SACA+gD,WACAD,YACAzhD,SACAie,YACAgjC,gBACA1tC,iBACAouC,yBAEA,MAAM,aACJE,EAAY,sBACZC,EAAqB,SACrBlpB,IACE33B,EAAAA,EAAAA,MAGEgnB,GAAYD,EAAAA,EAAAA,MAAYE,MAAM1B,KAE9BhlB,GAAOC,EAAAA,EAAAA,MACN0qC,EAAWmF,EAAcC,IAAentC,EAAAA,EAAAA,IAAQ,IAChD29C,EAAWC,IAAgB96C,EAAAA,EAAAA,SAAkCnN,GAC9DkoD,EAAiBP,GAAYD,GAAaC,EAAS7d,OAnCnB,IAoCjC4d,EAAUS,QAAQr8C,OAAS,EAC1Bs8C,GAAYtlD,EAAAA,EAAAA,OAElBkB,EAAAA,EAAAA,KAAU,KACJ4C,IAAWwrC,IACbgW,EAAUnlD,aAAUjD,GAGlBoyC,IAAcxrC,IAChB4wC,IACAyQ,OAAajoD,GACf,GACC,CAACoyC,EAAWxrC,EAAQ4wC,IAEvB,MAAM6Q,GAA0BjhD,EAAAA,EAAAA,KAAY,KACtCghD,EAAUnlD,SACZ47B,EAAS,CAAE3hC,GAAIkrD,EAAUnlD,UAE3B8kD,GAAuB,GACtB,CAACA,EAAuBlpB,IAErBzT,GAAchkB,EAAAA,EAAAA,KAAY,KAC9BmwC,GAAc,GACb,CAACA,IAEEvgC,GAAc5P,EAAAA,EAAAA,KAAa8zB,IAC/BktB,EAAUnlD,QAAUi4B,EACpB9P,GAAa,GACZ,CAACA,IAEEk9B,GAAiBlhD,EAAAA,EAAAA,KAAY,KACjC0gD,EAAa,CACX7hD,OAAQA,EACRie,UAAWA,GACX,GACD,CAACje,EAAQ6hD,EAAc5jC,IAEpBqkC,GAAe/mD,EAAAA,EAAAA,KAAQ,KAC3B,MAAMgnD,EAAiC,GAMvC,OALAb,GAAUD,WAAWnH,SAAQ,EAAGkI,eACzBD,EAAgB7M,MAAM+M,IAAMC,EAAAA,EAAAA,IAAeD,EAAGD,MACjDD,EAAgBh9C,KAAKi9C,EACvB,IAEKD,CAAe,GACrB,CAACb,IAEEv6B,GAAU5rB,EAAAA,EAAAA,KAAQ,IAClBwmD,EACKL,GAAUD,UACdp6B,QAAO,EAAGm7B,eAAeE,EAAAA,EAAAA,IAAeF,EAAUT,KAClDzgD,KAAI,EAAG2zB,YAAaA,KAElBlN,EAAAA,GAAAA,IAAO25B,GAAUD,UAAUngD,KAAI,EAAG2zB,YAAaA,IAAQ8lB,OAAOkG,GAAiB,KAAO,KAC5F,CAACc,EAAWL,EAAUT,KAElB0B,EAAaC,IAAWC,EAAAA,GAAAA,GAC7BR,EAAgBl7B,EAASu6B,QAAoC3nD,IAAxB2nD,EAASoB,YAOhD,OAJA/kD,EAAAA,EAAAA,KAAU,KACR6kD,IAAU,CAAExqC,UAAW2qC,EAAAA,GAAAA,WAA8B,GACpD,CAACH,IAGFlhD,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQA,IAAWwrC,EACnBrrC,QAASqkB,EACTtjB,UAAU,0BACVC,MAAON,EAAK,aACZkmB,oBAAqB06B,GAEpBH,GACCvgD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,WAAW+F,EAAAA,GAAAA,IAAgBm6C,GAAa,UACxC7jD,KAAK,OACLqN,QAAM,EAENrJ,QAASA,IAAM8/C,OAAajoD,IAE5B2H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eACZ7G,QAAQ0mD,GAAU7d,SAAUmf,EAAAA,GAAAA,IAAqBtB,EAAS7d,QAE5Dye,EAAahhD,KAAKkhD,IACjB,MAAM3e,EAAQ4d,GAAWS,QACtBzY,MAAMwZ,IAAmBP,EAAAA,EAAAA,IAAeO,EAAeT,SAAUA,MAAY3e,MAChF,OACEniC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmE,KAAKg9C,EAAAA,EAAAA,IAAqBV,GAC1B3gD,WAAW+F,EAAAA,GAAAA,IAAe86C,EAAAA,EAAAA,IAAeX,EAAWS,IAAa,UACjEtkD,KAAK,OACLqN,QAAM,EAENrJ,QAASA,IAAM8/C,EAAaQ,IAE5B9gD,EAAAA,GAAAA,cAACyhD,GAAAA,EAAmB,CAClBX,SAAUA,EACV3gD,UAAU,wBACV8/C,mBAAoBA,IAErB3mD,QAAQ6oC,KAAUmf,EAAAA,GAAAA,IAAqBnf,GACjC,KAMjBniC,EAAAA,GAAAA,cAAA,OAAKqG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAC5B4oD,GAAa98C,OACZnE,EAAAA,GAAAA,cAAC0hD,GAAAA,EAAc,CACbvhD,UAAU,6BACVwhD,MAAOV,EACPW,WAAYV,GAEXD,GAAaY,SACXtuB,IACC,MAAM/V,EAAO+I,EAAUgN,GACjBuuB,EAAgB9B,GAAUD,UAAUp6B,QAAQo8B,GAAYA,EAAQxuB,SAAWA,IAC3EouB,EAA2B,GAsBjC,OArBAG,GAAelJ,SAASmI,IAClBV,KAAcW,EAAAA,EAAAA,IAAeD,EAAED,SAAUT,IAC7CsB,EAAM99C,KACJ7D,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAM,GAAE+uB,MAAUiuB,EAAAA,EAAAA,IAAqBT,EAAED,YACzC3gD,UAAU,yCAEVK,QAASA,IAAM6O,EAAYkkB,IAE3BvzB,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAACC,KAAMA,EAAMhhB,KAAK,QAAQqV,eAAgBA,EAAgB4L,WAAS,IAC1Ezd,EAAAA,GAAAA,cAACgiD,GAAAA,EAAa,CAACC,KAAMzkC,EAAM0kC,iBAAe,IACzCnB,EAAED,UACD9gD,EAAAA,GAAAA,cAACyhD,GAAAA,EAAmB,CAClBthD,UAAU,sBACV2gD,SAAUC,EAAED,SACZb,mBAAoBA,KAI3B,IAEI0B,CAAK,KAIhB3hD,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,OAEdh7C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,wBACVI,QAAM,EACNC,QAASijB,GAER3jB,EAAK,UAEF,KC1GZ,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUqkD,6BACT,MAAMC,OAA2D/pD,IAA1C8pD,EAAuBC,iBACzCC,EAAAA,EAAAA,IAA0BvkD,EAAQqkD,EAAuBC,gBAC9D,MAAO,CACLE,kBAAmBF,EAAiBA,EAAe7sD,QAAK8C,EACzD,GANewF,EAlFyC0kD,EAC3DD,oBACAH,6BAEA,MAAM,2BAAEK,IAA+BjjD,EAAAA,EAAAA,OAEhCkjD,EAAUC,IAAehgD,EAAAA,EAAAA,IAAQ,IACjCoE,EAAW67C,IAAgBjgD,EAAAA,EAAAA,IAAQ,GACpCzG,GAAad,EAAAA,EAAAA,MAEbynD,GAAOnjD,EAAAA,EAAAA,KAAY,KACvBijD,IACIzmD,EAAWX,SACbc,aAAaH,EAAWX,SAE1BsB,YAAW,KACT4lD,EAA2B,CAAEjtD,GAAI4sD,EAAuB5sD,IAAK,GApBnC,IAqBD,GAC1B,CAAC4sD,EAAuB5sD,GAAImtD,EAAaF,IAEtCK,GAAwBpjD,EAAAA,EAAAA,KAAa0G,IACnCA,EAAEgR,QAAwB7hB,QAAQ,mBACtCstD,GACF,GACC,CAACA,KAEJvmD,EAAAA,EAAAA,KAAU,KACRtI,SAASgS,iBAAiB,aAAc88C,GACxC9uD,SAASgS,iBAAiB,YAAa88C,GACvC9uD,SAASgS,iBAAiB,YAAa88C,GACvC9uD,SAASgS,iBAAiB,QAAS88C,GAE5B,KACL9uD,SAASiS,oBAAoB,aAAc68C,GAC3C9uD,SAASiS,oBAAoB,YAAa68C,GAC1C9uD,SAASiS,oBAAoB,YAAa68C,GAC1C9uD,SAASiS,oBAAoB,QAAS68C,EAAsB,IAE7D,CAACA,KAEJ52C,EAAAA,EAAAA,KAAgB,KACd,MAAM62C,GAA6BjiC,EAAAA,EAAAA,MAEnC5kB,EAAWX,QAAUsB,YAAW,KAC9BgmD,IACAE,GAA4B,GAhDT,IAiDD,GACnB,CAACF,IAEJ,MAAMG,EAAaT,GAAsB,UAASA,IAC5CU,GAAe7oD,EAAAA,EAAAA,GAAS4oD,GAAaT,GAE3C,IAAKH,EAAuBc,UAC1B,OAGF,MAAMpvC,GAASsuC,EAAuBc,WAAa,GA1DjC,IA4DlB,OACEjjD,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GACT,4BACAu8C,GAAY,SACZ37C,GAAa,UACbq7C,EAAuBe,YAAc,YAEvCjtD,MAAQ,YAAW4d,iBAAqBsuC,EAAuBxuC,mBAAmBwuC,EAAuBvuC,QAEzG5T,EAAAA,GAAAA,cAAC0jC,GAAAA,EAAe,CACdl/B,IAAM,UAAS89C,IACf9lD,KAxEY,IAyEZmnC,OAAQqf,EACRpf,KAAM98B,EACNq8C,QAASC,EAAAA,GAAa,QAAM/qD,EAC5BwrB,uBAAqB,EACrBigB,QAAM,EACNjJ,OAAQ8nB,IAEN,KCoBV,IAAe/kD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAEQ,EAAM,UAAEie,IAAcjL,EAAAA,EAAAA,IAAexT,GAAQulD,sBAAwB,CAAC,EAExEC,GAAsBC,EAAAA,EAAAA,IAAmBzlD,GAI/C,MAAO,CACLQ,SACAie,YACAinC,0BANgCllD,GAAUie,GACxCknC,EAAAA,EAAAA,IAAmC3lD,EAAQQ,EAAQie,QAAalkB,EAMlEirD,sBACD,GAbezlD,EA9FoC6lD,EACtDzkD,SACAX,SACAie,YACAinC,4BACAF,0BAEA,MAAM,0BAAEK,EAAyB,0BAAEC,IAA8BrkD,EAAAA,EAAAA,OAE1D0mB,EAAQC,IAAa1gB,EAAAA,EAAAA,IAAS,IAC/B1F,GAAOC,EAAAA,EAAAA,KAEP8jD,GAAepkD,EAAAA,EAAAA,KAAaqkD,IAC3BxlD,GAAWie,IAEhBonC,EAA0B,CAAErlD,SAAQ/I,GAAIgnB,EAAWunC,mBACnDF,IAA2B,GAC1B,CAACtlD,EAAQslD,EAA2BrnC,EAAWonC,IAE5CI,GAAetkD,EAAAA,EAAAA,KAAa0G,IAChC+f,EAAU/f,EAAEgR,OAAOlN,MAAM,GACxB,IAEG+5C,GAAqBnqD,EAAAA,EAAAA,KAAQ,IAAMoqD,EAAAA,IAAAA,KAAqCC,IAOrE,CACLA,WACAC,eARsB,IAAIC,KAAKC,aAAa,CAACf,GAAsB,CAAE1hD,KAAM,aACtC0iD,GAAGJ,GAQxCK,aANoB,IAAIH,KAAKC,aAAa,CAACH,GAAW,CAAEtiD,KAAM,aAC7B0iD,GAAGJ,QAOpC,CAACZ,KAELjnD,EAAAA,EAAAA,KAAU,KACH4C,GAAQinB,EAAU,GAAG,GACzB,CAACjnB,IAEJ,MAAMulD,GAA6B3qD,EAAAA,EAAAA,KAAQ,IACpCosB,EAAO+T,OAILgqB,EAAmBr+B,QAAO,EAAGu+B,WAAUC,iBAAgBI,kBAC5DJ,EAAeM,cAAcjvD,SAASywB,EAAOw+B,gBAC1CF,EAAaE,cAAcjvD,SAASywB,EAAOw+B,gBAC3CP,EAASO,cAAcjvD,SAASywB,EAAOw+B,iBANnCT,GAQR,CAACA,EAAoB/9B,IAExB,OACEjmB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UC3FiB,uBD4FjBukD,QAAM,EACNzlD,OAAQA,EACR0/B,gBAAc,EACdv+B,MAAON,EAAK,YACZV,QAASwkD,GAET5jD,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRnxB,IAAI,SACJyF,MAAOgc,EACP/b,SAAU65C,EACVY,YAAa7kD,EAAK,UAClB8kD,2BAAyB,IAE3B5kD,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GCzG0K,uBDyGzI,kBAC9Cs+C,EAA2B5kD,KAAI,EAAGskD,WAAUK,eAAcJ,oBACzDnkD,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAK0/C,EACL/jD,UC7GgF,uBD8GhF0kD,cAAerB,IAA8BU,EAAW,aAAU7rD,EAClEqS,SAAU84C,IAA8BU,EACxCY,WAAS,EACTC,QAAM,EAENvkD,QAASA,IAAMqjD,EAAaK,IAE5BlkD,EAAAA,GAAAA,cAAA,QAAMG,WAAW+F,EAAAA,GAAAA,GAAe,QCrH+E,0BDsH5GwX,EAAAA,GAAAA,GAAW6mC,EAAc,CAAC,aAAc,CAAES,UAAW/+B,KAExDjmB,EAAAA,GAAAA,cAAA,QAAMG,WAAW+F,EAAAA,GAAAA,GAAe,WCxHiH,0BDyH9IwX,EAAAA,GAAAA,GAAWymC,EAAgB,CAAC,aAAc,CAAEa,UAAW/+B,SAK1D,K,wCE7HZ,MAwBA,GAvBEg/B,IAGA,MAAMC,GAAY/pD,EAAAA,EAAAA,IAAuB,MAEnCic,GAAgB3X,EAAAA,EAAAA,KAAa0G,IACnB,UAAVA,EAAE3B,KACY0gD,EAAU5pD,UAAYvH,SAASoxD,eAG/CF,GACF,GACC,CAACA,IAQJ,OANA5oD,EAAAA,EAAAA,KAAU,KACRM,OAAOoJ,iBAAiB,UAAWqR,GAAe,GAE3C,IAAMza,OAAOqJ,oBAAoB,UAAWoR,GAAe,KACjE,CAACA,IAEG8tC,CAAS,E,wCCWlB,MA2DA,IAAetnD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAC1B8mD,EAAoBhnD,IAAQO,EAAAA,EAAAA,IAAqBP,GAOvD,MAAO,CACLA,OACAof,KARW4nC,GAAoB1mD,EAAAA,EAAAA,IAAWZ,EAAQsnD,QAAqB/sD,EASvEgtD,UAReC,EAAAA,EAAAA,IAAmBxnD,EAAQQ,GAS1C8I,QARchJ,GACZmnD,EAAAA,EAAAA,IAAkBnnD,GAAMonD,EAAAA,EAAAA,IAAqB1nD,IAAS2nD,EAAAA,EAAAA,IAAuB3nD,SAC7EzF,EAOFqtD,gBAAiBpsD,QAAQwE,EAAO6nD,YAAYC,YAAYzhD,QACzD,GAhBetG,EA3DoCgoD,EACtDvnD,SACAwnD,eACAtlD,UACApC,OACAof,OACA6nC,WACAj+C,UACAs+C,sBAEA,MAAOnjD,EAAmBC,EAAiBC,IAAoBC,EAAAA,EAAAA,MACxDqjD,EAAuBC,EAAqBC,IAAwBvjD,EAAAA,EAAAA,KAErEwjD,GAAiBC,EAAAA,GAAAA,GAAsB,CAC3C/nD,OACAof,OACA6nC,WACAj+C,UACAs+C,kBACAU,aAAc5jD,EACd6jD,uBAAwBL,IACvB,GAEG32C,GAAc5P,EAAAA,EAAAA,KAAY,KAC9Be,EAAQlC,EAAO,GACd,CAACA,EAAQkC,IAEN0kD,EAAYoB,GAAmBj3C,GAErC,GAAKjR,EAIL,OACE4B,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,oCACVK,QAAS6O,EACT62C,eAAgBA,EAChBhB,UAAWA,IAEV1mD,EAAAA,EAAAA,IAASF,GACR0B,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CAACrsB,OAAQj1B,EAAQwnD,aAAcA,EAAcS,WAAW,QAAQC,iBAAe,IAE/FxmD,EAAAA,GAAAA,cAACymD,GAAAA,EAAa,CAACnoD,OAAQA,EAAQwnD,aAAcA,EAAcS,WAAW,QAAQC,iBAAe,IAE/FxmD,EAAAA,GAAAA,cAAC0mD,GAAAA,EAAe,CACdznD,OAAQsD,EACRnD,QAASqD,EACTrE,KAAMA,IAER4B,EAAAA,GAAAA,cAAC2mD,GAAAA,EAAe,CACd1nD,OAAQ8mD,EACR3mD,QAAS6mD,EACT3nD,OAAQA,IAED,KCtDTsoD,IAAe9gD,EAAAA,GAAAA,KAAU+gD,GAAOA,KAAM,KAAO,GAkFnD,IAAejpD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQ2nB,QAASqhC,GAAehpD,EAAOipD,SACjCxgC,EAAYzoB,EAAO0oB,MAAM1B,MACzB,qBAAEkiC,GAAyBlpD,GAC3B,eAAE+T,GAAmB/T,EAAO2e,SAASC,MAC3C,MAAO,CACLoqC,aACAvgC,YACAygC,uBACAn1C,iBACD,GAXehU,EAhF8BopD,EAChDH,aACAvgC,YACAygC,uBACAn1C,iBACAq1C,cAEA,MAAM,aACJC,EAAY,SAAEjwB,EAAQ,uBACtBkwB,EAAsB,wBAAEC,IACtB9nD,EAAAA,EAAAA,MAGE+nD,GAAcnsD,EAAAA,EAAAA,IAAuB,OAI3CkB,EAAAA,EAAAA,KAAU,KACRuqD,IAAa,KACXO,GAAc,GACd,GACD,CAACA,KAEJrN,EAAAA,GAAAA,GAAoBwN,GAAcR,GAElC,MAAMz3C,GAAc5P,EAAAA,EAAAA,KAAalK,IAC/B2hC,EAAS,CAAE3hC,KAAIgyD,sBAAsB,IACrCL,IACAtqD,YAAW,KACTwqD,EAAuB,CAAE7xD,MAAK,GAlCJ,IAmCD,GAC1B,CAAC2hC,EAAUkwB,EAAwBF,IAEhCM,GAAgC/nD,EAAAA,EAAAA,KAAY,KAChD4nD,GAAyB,GACxB,CAACA,IAEEvnD,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCACZ2mD,GACC9mD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBAAoBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAC3D2H,EAAAA,GAAAA,cAAA,OAAKyJ,IAAK69C,EAAannD,UAAU,0BAC9B2mD,EAAWlnD,KAAK2zB,GACfvzB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBAAgBK,QAASA,IAAM6O,EAAYkkB,GAASltB,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAC3F2H,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAACC,KAAM+I,EAAUgN,GAAS1hB,eAAgBA,EAAgB4L,WAAS,IAC1Ezd,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBAAiBud,EAAAA,GAAAA,IAAWjf,EAAAA,EAAAA,IAAuB8nB,EAAUgN,KAnD/E,WAyDNyzB,GACChnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,2CAA2CkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAChFyH,EAAK,UACNE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cACNmD,UAAU,qBACVjD,QAASgnD,EACTrrC,MAAOrc,EAAKqc,OAEZnc,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iBAGhB6mD,EAAqBpnD,KAAKrK,GACzByK,EAAAA,GAAAA,cAAC6lD,GAAoB,CACnBvnD,OAAQ/I,EACRiL,QAAS6O,OAKb,KC4BV,IAAezR,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAChC,IAAKF,EACH,MAAO,CAAC,EAGV,MAAMgnD,GAAoBzmD,EAAAA,EAAAA,IAAqBP,GAE/C,MAAO,CACLA,OACAqpD,aAAc3pD,EAAO2pD,aACrB51C,eAAgB/T,EAAO2e,SAASC,MAAM7K,kBAClCuzC,GAAqB,CAAEsC,iBAAiBhpD,EAAAA,EAAAA,IAAWZ,EAAQsnD,IAChE,GAdevnD,EA3F2B8pD,EAC7CxxD,UACAyxD,cACAtpD,SACAF,OACAspD,kBACA71C,iBACA41C,mBAEA,MAAM,aAAEzqC,IAAiBzd,EAAAA,EAAAA,OAEnB,SAAEoD,IAAaC,EAAAA,EAAAA,MACfilD,GAAkBC,EAAAA,EAAAA,IAAkB3xD,QAAkDkC,GAAvC0E,EAAAA,EAAAA,IAA4B5G,GAC3E4xD,GAAe5tD,EAAAA,EAAAA,IAASF,EAAAA,EAAAA,IAAoB9D,EAAS,UACrD6xD,EAAe1uD,SAAQ2uD,EAAAA,EAAAA,IAAqB9xD,IAE5CkZ,GAAc5P,EAAAA,EAAAA,KAAY,KAC9Bud,EAAa,CAAE1e,SAAQie,UAAWpmB,EAAQZ,GAAIgyD,sBAAsB,GAAO,GAC1E,CAACjpD,EAAQ0e,EAAc7mB,EAAQZ,KAE5BuK,GAAOC,EAAAA,EAAAA,KAEPmlD,EAAYoB,GAAmBj3C,GAErC,GAAKjR,EAIL,OACE4B,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,kCACV0J,QAASlH,EACTnC,QAAS6O,EACT61C,UAAWA,GAEXllD,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CACLnf,KAAMA,EACNof,KAAMkqC,EACNjX,gBAAiBiX,GAAiBQ,OAClCT,aAAcA,EACdhqC,WAAS,EACT5L,eAAgBA,IAElB7R,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YACbH,EAAAA,GAAAA,cAACgiD,GAAAA,EAAa,CACZC,KAAMyF,GAAmBtpD,EACzB8jD,iBAAe,EACfzR,gBAAiBnyC,IAAWopD,GAAiBnyD,IAAMmyD,GAAiBQ,SAEtEloD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACbH,EAAAA,GAAAA,cAAC4uC,GAAAA,EAAI,CAACzuC,UAAU,SACbgoD,EAAAA,GAAAA,IAAoBroD,EAAqB,IAAf3J,EAAQynB,SAKzC5d,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAUkG,IAAI,QASvC,SACEvG,EAAc3J,EAAqB2E,EAAkB8sD,EAAsBI,GAE3E,IAAKltD,EACH,OAAOstD,EAAAA,EAAAA,GAAqBtoD,EAAM3J,OAASkC,EAAWuvD,GAGxD,MAAMS,GAAYC,EAAAA,EAAAA,IAAoBnyD,GAEtC,OACE6J,EAAAA,GAAAA,cAAA,QAAMG,UAAU,iBACdH,EAAAA,GAAAA,cAAA,OACExL,IAAKsG,EACL+X,IAAI,GACJ1S,WACE+F,EAAAA,GAAAA,GAAe,uBAAwB8hD,GAAgB,QAASK,GAAa,4BAGhF7vD,EAAAA,EAAAA,IAAgBrC,IAAY6J,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eACzCioD,EAAAA,EAAAA,GAAqBtoD,EAAM3J,GAAS,EAAMyxD,GAGjD,CA9BaW,CAAczoD,EAAM3J,EAAS4xD,GAAgBF,EAAgBD,EAAaI,MAIxE,KCxDf,IAAepqD,EAAAA,EAAAA,KA5CmB4qD,EAChCC,aAAYxD,eAEZ,MAAMyD,GAAc7uD,EAAAA,EAAAA,KAAQ,IAmB9B,SAAgC4uD,GAE9B,GADgBA,EAAW9Z,MAAM,0BACpB,CACX,MAAM/wB,EAAO,IAAIvH,KAAKoyC,GACtB,MAAO,CAAC,CAAE7qC,OAAMzY,MAAMssB,EAAAA,GAAAA,IAAmB7T,IAC3C,CAEA,MAAM+qC,EAAa,GACbC,EAAc,IAAIvyC,KAClBia,EAAcs4B,EAAY/4B,cAC1Bg5B,EAAaD,EAAYp4B,UAAa,IAAIna,KAAM,GAAEia,KAAem4B,KAAej4B,UAClFF,EACAA,EAAc,EAElB,IAAK,IAAI3Q,EAAI,EAAGA,EA3CO,EA2CeA,IAAK,CACzC,MAAM/B,EAAO,IAAIvH,KAAM,GAAEwyC,EAAalpC,KAAK8oC,KAC3CE,EAAW9kD,KAAK,CAAE+Z,OAAMzY,MAAMssB,EAAAA,GAAAA,IAAmB7T,IACnD,CAEA,OAAO+qC,CACT,CAvCoCG,CAAuBL,IAAa,CAACA,IACvE,OACEzoD,EAAAA,GAAAA,cAAA,WAASG,UAAU,6CAChBuoD,EAAY9oD,KAAI,EAAGge,OAAMzY,UAEtBnF,EAAAA,GAAAA,cAAA,OACEQ,QAASA,IAAMykD,EAASrnC,GACxBzd,UAAU,YACVqE,IAAKW,GAELnF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,YAAOmF,MAIL,I,4BCZd,MAiEA,IAAevH,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAU8pD,cAAYmB,gBACrB,MAAM,QAACC,GAAWlrD,GACZ,KAACmrD,GAAQD,EACf,IAAIE,EAAkB,GACnBD,GAAQA,EAAMF,KACfG,EAASD,EAAMF,GAAWG,QAG5B,IAAIC,EAAmB,GACvB,GAAGvB,EACD,IAAK,IAAIjoC,EAAI,EAAGA,EAAIupC,EAAO/kD,OAAQwb,IAAK,CACtC,MAAMkN,EAAQq8B,EAAOvpC,GACfnC,GAAO9e,EAAAA,EAAAA,IAAWZ,EAAO+uB,GAC/B,GAAGrP,EAAK,CACN,MAAM,UAACgX,EAAS,SAAC/P,GAAajH,GACxB,QAAC4rC,GAAW3kC,GAEhB+P,EAAWiwB,cAAc3kC,QAAQ8nC,IAAgB,GACjDwB,GAAWA,EAAQzoB,YAAa0oB,iBAAiBvpC,QAAQ8nC,IAAgB,IAEzEuB,EAAQtlD,KAAKgpB,EAEjB,CACF,MAEAs8B,EAAUD,EAEZ,MAAO,CACLA,OAAOC,EACR,GA9BetrD,EA/DuByrD,EACzCJ,SACA1oD,UACA0mD,UACA6B,gBAGA,MAAM,SACJ7xB,EAAQ,eACRqyB,EAAc,oBACdC,EAAmB,eACnBC,EAAc,uBACdrC,IACE7nD,EAAAA,EAAAA,MAEE8P,GAAc5P,EAAAA,EAAAA,KAAY,CAAC0G,EAAE5Q,KACjC,IAAIuI,GAASwoB,EAAAA,EAAAA,MACTojC,GAAa,EACb5rD,EAAO+mB,MAAMC,KAAKvvB,KACpBg0D,EAAe,CAACh0D,OAChBm0D,GAAa,GAGfxyB,EAAS,CAAE3hC,KAAIgyD,sBAAsB,IACrCiC,EAAoB,CAAEG,iBAAkB,GAAK,CAAE9lC,uBAAuB,IACtEqjC,IACAtqD,YAAW,KACTwqD,EAAuB,CAAE7xD,OACtBm0D,GACDD,EAAe,CAACnrD,OAAO/I,EAAGq0D,QAAQ,UACpC,GAhC0B,KAkC5B1C,GAAS,GACR,CAAE1mD,IACL,OACIR,EAAAA,GAAAA,cAAC0hD,GAAAA,EAAc,CACbvhD,UAAU,2BACVwhD,MAAOuH,GAAU,GACjBW,sBAAoB,EACpBC,YAAU,GAEV9pD,EAAAA,GAAAA,cAAA,WAEkB,IAAd+oD,GACA/oD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,+BAA8B,SAK/C+oD,GAAUA,EAAOtpD,KAAI2zB,GACnBvzB,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,oCACVK,QAAS6O,EACTkmC,SAAUhiB,GAEVvzB,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CAACrsB,OAAQA,EAAQuyB,cAAc,EAAOS,WAAW,QAAQwD,UAAQ,QAKxE,KCtBjBnD,IAAe9gD,EAAAA,GAAAA,KAAU+gD,GAAOA,KAAM,KAAK,GAsQjD,IAAejpD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQgnB,KAAMC,GAAcjnB,EAAO+mB,OAE3BY,QAASukC,GAAoBlsD,EAAO0nB,aAAe,CAAC,GACtD,cACJ1H,EAAa,SAAEne,EAAQ,aAAE8nD,GACvB3pD,GACE,eACJmsD,EAAc,cAAEC,EAAa,aAAEC,EAAY,cAAExrC,IAC3CrN,EAAAA,EAAAA,IAAexT,GAAQssD,cACnB3jC,QAAS4jC,EAAe5kC,QAAS6kC,GAAkBJ,GAAiB,CAAC,GACrEzjC,QAAS8jC,EAAc9kC,QAAS+kC,GAAiBL,GAAgB,CAAC,GAClEM,SAAUC,GAA2B/qD,EACvC+e,EAAWC,GAAexZ,MAAMuZ,UAChC,QAACsqC,GAAWlrD,GACZ,KAACmrD,GAAQD,EACf,MAAO,CACL2B,eAAe1B,EACfnrC,gBACAksC,kBACAO,eACAC,eACAH,gBACAC,gBACA5rC,WACAgsC,yBACA3lC,YACAklC,iBACAxC,eACD,GA9Be5pD,EApQ2B+sD,EAC7CD,eACA/C,cAAaa,aAAYoC,kBAAiB/sC,gBAC1CksC,kBAAiBO,eAAcC,eAAcH,gBAAeC,gBAC5D5rC,WAAUgsC,yBAAwB3lC,YAAWklC,iBAAgBxC,eAC7DP,UAAS4D,yBAET,MAAM,eACJvB,EAAc,eACdE,EAAc,SACdvyB,EAAQ,uBAAEkwB,EAAsB,qBAAE2D,EAAoB,sBAAEC,IACtDzrD,EAAAA,EAAAA,MAGE0rD,GAAmB9vD,EAAAA,EAAAA,IAAuB,MAE1C2E,GAAOC,EAAAA,EAAAA,MAEP,SAAE4C,IAAaC,EAAAA,EAAAA,OACdsoD,EAAqBC,IAA0B3lD,EAAAA,EAAAA,KAAkB,IACjE4lD,EAAsBC,IAA2B7lD,EAAAA,EAAAA,KAAkB,GAEpEm7C,GAAiBlhD,EAAAA,EAAAA,KAAY,EAAGiX,gBAChC+wC,GAAgB/wC,IAAc2qC,EAAAA,GAAAA,WAChCuF,IAAa,KACXmE,EAAqB,CACnBnpD,KAAM,QACN,GAEN,GAEC,CAAC6lD,EAAcsD,EAAsBnD,IAElC0D,GAAkB7rD,EAAAA,EAAAA,KACrBlK,IAEC,IAAIuI,GAASwoB,EAAAA,EAAAA,MACTojC,GAAa,EACb5rD,EAAO+mB,MAAMC,KAAKvvB,KACpBg0D,EAAe,CAACh0D,OAChBm0D,GAAa,GAEfxyB,EAAS,CAAE3hC,KAAIgyD,sBAAsB,IAEjChyD,IAAOuoB,GACTspC,EAAuB,CAAE7xD,OAGxBm0D,GACD9sD,YAAW,KACTwqD,EAAuB,CAAE7xD,OACtBm0D,GACDD,EAAe,CAACnrD,OAAO/I,EAAGq0D,QAAQ,UACpC,GACA,KAGCjnD,GACHukD,GACF,GAEF,CAAChwB,EAAUpZ,EAAenb,EAAUykD,EAAwBF,IAGxDqE,GAAwB9rD,EAAAA,EAAAA,KAAalK,IAEzC+1D,EAAgB/1D,EAAG,GAClB,CAACy1D,IAEEb,GAAetwD,EAAAA,EAAAA,KAAQ,KAC3B,IAAK+tD,GAAgBA,EAAY/O,WAAW,MAAQ+O,EAAYzjD,OAAS,EACvE,OAAO+0C,GAAAA,EAGT,MAAMsS,EAAmB,IACnB1tC,EAAgB,CAACA,GAAiB,MAClCksC,GAAmB,IAGnBzjC,GAAYD,EAAAA,EAAAA,MAAYE,MAAM1B,KAC9B2mC,GAAkBzkC,EAAAA,EAAAA,IACtBwkC,EAAkBjlC,EAAWqhC,EAAa9pC,EAAehe,EAAK,kBAGhE,MAAO,KACFgnB,EAAAA,EAAAA,KAAYT,EAAAA,GAAAA,IAAO,IAChBolC,GAAmB,MACnBlB,GAAgB,MAChBC,GAAgB,KAClBzlC,OAAW1sB,EAAWylB,EAAgB,CAACA,QAAiBzlB,GAC7D,GACA,CAACuvD,EAAa9pC,EAAeksC,EAAiBlqD,EAAMyqD,EAAcC,EAAczlC,KAEnF+0B,EAAAA,GAAAA,GAAoBmR,GAAmBd,EAAahmD,QAAQ,GAE5D,MAAM+lD,GAAgBrwD,EAAAA,EAAAA,KAAQ,KACvB+tD,GAAeA,EAAYzjD,OArGO,IAqGyCkmD,IAAkBC,EACzFpR,GAAAA,GAGFpyB,EAAAA,EAAAA,KACLT,EAAAA,GAAAA,IAAO,IAAIgkC,KAAkBC,IAC7BvlC,GACA,IAED,CAACA,EAAWslC,EAAeC,EAAe1C,IAEvC8D,GAAgB7xD,EAAAA,EAAAA,KAAQ,KACtB+tD,GAAgBa,IAAgB/pC,GAAgC,IAApBA,EAASva,OAIpDua,EACJ9e,KAAKrK,IACJ,MAAO+I,EAAQie,GAAahnB,EAAGo2D,MAAM,KAErC,OAAOjB,IAAyBpsD,IAASwmB,KAAKmN,OAAO1V,GAAW,IAEjEoJ,OAAOrsB,SACPsyD,MAAK,CAACC,EAAGC,IAAMA,EAAEluC,KAAOiuC,EAAEjuC,OAVpBs7B,GAAAA,GAWR,CAACx6B,EAAUgsC,EAAwB9C,EAAaa,IAE7CsD,GAA2BtsD,EAAAA,EAAAA,KAAY,KAC3C0rD,GAAwBD,EAAoB,GAC3C,CAACA,IAEEc,GAA4BvsD,EAAAA,EAAAA,KAAY,KAC5C4rD,GAAyBD,EAAqB,GAC7C,CAACA,IAmBEa,EAAehC,IAAmBA,EAAeplC,QAAUolC,EAAetqD,WAC1EwqD,EAAahmD,SAAW+lD,EAAc/lD,SAAWunD,EAAcvnD,OACrE,OAAKyjD,GAAgBa,EAenBzoD,EAAAA,GAAAA,cAAC0hD,GAAAA,EAAc,CACbvhD,UAAU,2BACVwhD,MAAO+J,EACP9J,WAAYjB,EAEZkJ,sBAAoB,EACpBC,YAAU,GAETe,GACC7qD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4CACbH,EAAAA,GAAAA,cAACwoD,GAAW,CACVC,WAAYoC,EACZ5F,SAAU6F,KAIfmB,GACCjsD,EAAAA,GAAAA,cAACksD,GAAAA,EAAY,CACX/mD,KAAMrF,EAAK,6BACX6gC,YAAa7gC,EAAK,0CAGrBxG,QAAQkxD,IAAiBA,GAAcrmD,OAAS,GAC/CnE,EAAAA,GAAAA,cAAA,OACEG,UAAU,2CACVkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,EAC1BoR,IAAKwhD,GAEJT,EAAc5qD,KAAKrK,GAClByK,EAAAA,GAAAA,cAACmsD,GAAAA,EAAkB,CACjBC,aAAc72D,EACdiL,QAAS+qD,EACThW,SAAUhgD,OAKjB+D,QAAQ6wD,EAAahmD,SACpBnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkBkG,IAAKvG,EAAKqc,MAAQ,YAAS9jB,GACxD8xD,EAAahmD,OAhNK,GAiNjBnE,EAAAA,GAAAA,cAAC4uC,GAAAA,EAAI,CAACzuC,UAAU,OAAOK,QAASurD,GAC7BjsD,EAAKorD,EAAsB,2BAA6B,6BAG5DprD,EAAK,oCAEPqqD,EAAavqD,KAAI,CAACrK,EAAI0uB,KACrB,GAAKinC,KAAuBjnC,GAxNT,GA4NnB,OACEjkB,EAAAA,GAAAA,cAAC6lD,GAAoB,CACnBvnD,OAAQ/I,EACRiL,QAAS8qD,GACT,KAKThyD,QAAQ4wD,EAAc/lD,SACrBnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkBkG,IAAKvG,EAAKqc,MAAQ,YAAS9jB,GACxD6xD,EAAc/lD,OAxOI,GAyOjBnE,EAAAA,GAAAA,cAAC4uC,GAAAA,EAAI,CAACzuC,UAAU,OAAOK,QAASwrD,GAC7BlsD,EAAKsrD,EAAuB,2BAA6B,6BAG7DtrD,EAAK,mCAEPoqD,EAActqD,KAAI,CAACrK,EAAI0uB,KACtB,GAAKmnC,KAAwBnnC,GAhPV,GAoPnB,OACEjkB,EAAAA,GAAAA,cAAC6lD,GAAoB,CACnBvnD,OAAQ/I,EACRuwD,cAAY,EACZtlD,QAAS8qD,GACT,KAKThyD,QAAQoyD,EAAcvnD,SACrBnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkBkG,IAAKvG,EAAKqc,MAAQ,YAAS9jB,GAAYyH,EAAK,mBAC3E4rD,EAAc9rD,KA3HvB,SAA4BzJ,GAC1B,MAAMgP,GAAOijD,EAAAA,EAAAA,GAAqBtoD,EAAM3J,GAClCiI,EAAO2mB,EAAU5uB,EAAQmI,QAE/B,GAAK6G,GAAS/G,EAId,OACE4B,EAAAA,GAAAA,cAAC2nD,GAAW,CACVrpD,OAAQnI,EAAQmI,OAChBnI,QAASA,EACTyxD,YAAaA,GAGnB,MAKK+C,EAEC3qD,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACspD,GAAO,CAAC1B,YAAa,GAAIV,QAASA,EAAS6B,UAAW,KAKzD/oD,EAAAA,GAAAA,cAACinD,GAAc,CAACC,QAASA,GAkGZ,KC3RfmF,GAAO,CACX,CAAEzqD,KAAM0qD,EAAAA,GAAAA,SAA8BlsD,MAAO,uBAC7C,CAAEwB,KAAM0qD,EAAAA,GAAAA,MAA2BlsD,MAAO,mBAC1C,CAAEwB,KAAM0qD,EAAAA,GAAAA,MAA2BlsD,MAAO,mBAC1C,CAAEwB,KAAM0qD,EAAAA,GAAAA,MAA2BlsD,MAAO,mBAC1C,CAAEwB,KAAM0qD,EAAAA,GAAAA,MAA2BlsD,MAAO,mBAC1C,CAAEwB,KAAM0qD,EAAAA,GAAAA,MAA2BlsD,MAAO,oBAmF5C,IA/EUksD,EAAAA,GAAAA,SACLD,GAAKhoB,MAAM,GAGgBtuC,OAAOw2D,KAAKD,EAAAA,IAAqBnoD,QA2ElDvG,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,eAAE0uD,EAAc,OAAEluD,IAAWgT,EAAAA,EAAAA,IAAexT,GAAQssD,cACpD,QAACpB,GAAWlrD,GACZ,KAACmrD,GAAQD,EACTyD,EAAOxD,EAAOA,EAAMrpD,KAAI,CAAC8sD,EAAI/sC,KAC1B,CAAC/d,KAAK+d,EAAEvf,MAAMssD,EAAItsD,UACxB,CACD,CACEwB,KAAM,EACNxB,MAAM,OAIV,OADAqsD,EAAK,GAAGrsD,MAAQ,KACT,CACL6oD,KAAKA,GAAQ,GACbwD,OACAD,iBACAluD,SACD,GAnBeT,EAzE0B8uD,EAC5CF,OACA7E,cACAa,aACA72C,WACA46C,iBAAiBF,EAAAA,GAAAA,SACjBpF,cAEA,MAAM,uBACJ0F,EAAsB,oBACtBC,IACEttD,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACNgpD,EAAW+D,IAAgBtnD,EAAAA,EAAAA,IAAS,GACrCqlD,GAAkBhxD,EAAAA,EAAAA,KAAQ,KAAMkzD,EAAAA,GAAAA,IAAgBnF,IAAc,CAACA,IAE/DoF,GAAkBvtD,EAAAA,EAAAA,KAAawkB,IACnC,GAAGwoC,GAAQA,EAAKxoC,GAAO,CACrB,MAAMgpC,EAAMR,EAAKxoC,GACjB2oC,EAAuB,CAAEv6C,QAAS46C,EAAIrrD,OACtCkrD,EAAa7oC,EACf,MACE2oC,EAAuB,CAAEv6C,QAAS,IAClCy6C,EAAa,EACf,GACC,CAACF,IAEEM,GAAyBztD,EAAAA,EAAAA,KAAawK,IAC1C4iD,EAAoB,CAAEjvC,KAAM3T,EAAMumB,UAAY,KAAO,GACpD,CAACq8B,KAEJ73C,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIV,MAAM1zC,GAAerY,EAAAA,EAAAA,IAAuB,MACtCic,GAAgB+1C,EAAAA,GAAAA,GAA0B35C,EAAc5B,OAAUvZ,EAAW,oBAAoB,GACjG+0D,EAAcX,EAAKtoD,OAAO,EAChC,OACEnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aAAasJ,IAAK+J,EAAc65C,UAAWj2C,GAEtDq1C,EAAKtoD,OAAS,GAAKnE,EAAAA,GAAAA,cAACstD,GAAAA,EAAO,CAACvE,UAAWyD,EAAgBC,KAAMA,EAAMc,YAAaP,IAGlFhtD,EAAAA,GAAAA,cAACskB,EAAAA,EAAU,CACTE,KAAM1kB,EAAKqc,MAAQ,sBAAwB,kBAC3CixC,YAAaA,EACb7oC,UAAWioC,GAIF,IADCA,EAGFxsD,EAAAA,GAAAA,cAAC4qD,GAAW,CACVhD,YAAaA,EACba,WAAYA,EACZoC,gBAAiBA,EACjB3D,QAASA,EACT4D,mBAAoBoC,IAIjBltD,EAAAA,GAAAA,cAACspD,GAAO,CAAC1B,YAAaA,EAAaV,QAASA,EAAS6B,UAAWyD,KAI3E,M,gBCxGV,MAAMgB,GAA4B,CAChCC,gBAAiB,GACjBC,SAAU,GACVC,KAAM,GACNC,MAAO,IAGHC,GAAuDA,CAC3DC,EACAx7C,KAEA,OAAQA,EAAO1Q,MACb,IAAK,qBACH,MAAO,IACFksD,EACHL,gBAAiBn7C,EAAOy7C,SAG5B,IAAK,cACH,MAAO,IACFD,EACHJ,SAAUp7C,EAAOy7C,SAGrB,IAAK,UACH,MAAO,IACFD,EACHH,KAAMr7C,EAAOy7C,SAGjB,IAAK,WACH,MAAO,IACFD,EACHF,MAAOt7C,EAAOy7C,SAGlB,IAAK,QACH,OAAOP,GAET,QACE,OAAOM,EAAM,EC0OnB,IAAelwD,EAAAA,EAAAA,KAxQsBowD,EACnCC,gBACAC,iBACAhH,UACAiH,eACAC,qBAEA,MAAM,QACJC,EAAO,0BACPC,IACE/uD,EAAAA,EAAAA,OAEE,SAAEoD,IAAaC,EAAAA,EAAAA,OACd2rD,EAAqBC,IAA0BhpD,EAAAA,EAAAA,KAAS,GAEzDipD,ECpCO,SAAuBplB,EAAgBqlB,GACpD,MAAMC,GAAmBxzD,EAAAA,EAAAA,IAAO,GAC1Bc,GAAad,EAAAA,EAAAA,MAkBnB,OAjBoBsE,EAAAA,EAAAA,KAAY,KAE9B,GADAkvD,EAAiBrzD,UDgCoB,IC/BjCqzD,EAAiBrzD,QAGnB,OAFAqzD,EAAiBrzD,QAAU,OAC3BozD,IAIEzyD,EAAWX,SACbc,aAAaH,EAAWX,SAG1BW,EAAWX,QAAUsB,YAAW,KAC9B+xD,EAAiBrzD,QAAU,CAAC,GAlBZ,IAmBD,GAChB,CDkBoC,EClB3BozD,GAGd,CDe2BE,CAAc,GAAG,KACxCR,EAAeS,EAAAA,GAAAA,aAA6B,IAOxCC,IAJ0BrvD,EAAAA,EAAAA,KAAY,KAC1C+uD,GAAuB,EAAK,GAC3B,KAE8B/uD,EAAAA,EAAAA,KAAY,KAC3C+uD,GAAuB,EAAM,GAC5B,KAEGO,GAA+BtvD,EAAAA,EAAAA,KAAY,KAC1CyuD,GAELI,EAA0B,CAAEU,SAAUd,GAAiB,GACtD,CAACA,EAAgBI,IAEdW,GAAuBxvD,EAAAA,EAAAA,KAAY,KACvCqvD,IACAT,EAAQ,CAAEa,cAAc,GAAO,GAC9B,CAACJ,EAA0BT,IAExBc,GAAsEt1D,EAAAA,EAAAA,KAAQ,IAC3E,EAAG0J,YAAWtE,YACnBe,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLqG,QAASlH,EACTnG,KAAK,UACL8D,MAAM,cACNH,UAAWlB,EAAS,SAAW,GAC/BuB,QAAS+C,EACTE,UAAU,gBAEVzD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGhB,CAACwC,IAEE7C,GAAOC,EAAAA,EAAAA,KA0Lb,OACEC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cACNE,QAAS0mD,EACTzjD,UAAW3D,EAAK,mBAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAjMnB,WACE,OAAQ8tD,GACN,KAAKY,EAAAA,GAAAA,YACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,6BACnB,KAAK+uD,EAAAA,GAAAA,QACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,YACnB,KAAK+uD,EAAAA,GAAAA,cACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,qBACnB,KAAK+uD,EAAAA,GAAAA,YACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,UACnB,KAAK+uD,EAAAA,GAAAA,cACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,kBACnB,KAAK+uD,EAAAA,GAAAA,YACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,iBACnB,KAAK+uD,EAAAA,GAAAA,QACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,oBACnB,KAAK+uD,EAAAA,GAAAA,SACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,aACnB,KAAK+uD,EAAAA,GAAAA,eACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,mBACnB,KAAK+uD,EAAAA,GAAAA,SACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,iBACnB,KAAK+uD,EAAAA,GAAAA,aACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,8BAEnB,KAAK+uD,EAAAA,GAAAA,sBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,mBACnB,KAAK+uD,EAAAA,GAAAA,2BACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,aAEnB,KAAK+uD,EAAAA,GAAAA,mBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,iBACnB,KAAK+uD,EAAAA,GAAAA,gBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,oBACnB,KAAK+uD,EAAAA,GAAAA,oBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,yBACnB,KAAK+uD,EAAAA,GAAAA,kBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,oBACnB,KAAK+uD,EAAAA,GAAAA,qBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,yBACnB,KAAK+uD,EAAAA,GAAAA,kBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,2BACnB,KAAK+uD,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,oBACnB,KAAK+uD,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,mBAEnB,KAAK+uD,EAAAA,GAAAA,eACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,kBACnB,KAAK+uD,EAAAA,GAAAA,eACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,qBACnB,KAAK+uD,EAAAA,GAAAA,oBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,iBAEnB,KAAK+uD,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,wBACnB,KAAK+uD,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,+BACnB,KAAK+uD,EAAAA,GAAAA,wBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,0BACnB,KAAK+uD,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,wBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,iBACnB,KAAK+uD,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,mBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,uBACnB,KAAK+uD,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,uBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAI,uBACb,KAAK6uD,EAAAA,GAAAA,qBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,mCACnB,KAAK+uD,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,+BAEnB,KAAK+uD,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,wBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,aAEnB,KAAK+uD,EAAAA,GAAAA,gBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,qCAEnB,KAAK+uD,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,0BACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,oCAEnB,KAAK+uD,EAAAA,GAAAA,8BACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,mDAEnB,KAAK+uD,EAAAA,GAAAA,QACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,YACnB,KAAK+uD,EAAAA,GAAAA,oBACH,OAAO7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,cACnB,KAAK+uD,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE7uD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAA,UAAKF,EAAK,eACTxG,QAAQ40D,IAAsC,IAAnBA,GAC1BluD,EAAAA,GAAAA,cAACoE,EAAAA,EAAY,CACXjE,UAAU,qBACVkE,QAAS8qD,EACT7qD,UAAU,SAEVtE,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,SAASw6B,aAAW,EAAC99B,QAASuuD,GAC1CjvD,EAAK,aAMlB,KAAK+uD,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE7uD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACX8tD,IAAkBY,EAAAA,GAAAA,sBACfZ,IAAkBY,EAAAA,GAAAA,iCACnB7uD,EAAAA,GAAAA,cAAA,UAAKF,EAAK,kBAEVE,EAAAA,GAAAA,cAAA,UAAKF,EAAK,kBAGdE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cACNH,UAAU,gBACVK,QAAS2tD,EACT1qD,UAAW3D,EAAK,sBAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iBAKrB,QACE,OACEH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBAEbH,EAAAA,GAAAA,cAAA,MAAIQ,QAASiuD,GACV3uD,EAAK,aAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLqG,QAASlH,EACTnG,KAAK,UACL8D,MAAM,cAENE,QAASA,IAAM4tD,EAAeS,EAAAA,GAAAA,aAC9BprD,UAAW3D,EAAK,6BAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAYzB,CAaKivD,GACDpvD,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQsvD,EACRnvD,QAAS0vD,EACT3pD,KAAMrF,EAAK,mBACXisB,aAAcjsB,EAAK,0BACnBksB,eAAgBijC,EAChBvwB,sBAAoB,IAElB,I,4BEhQV,MA4IA,IAAe9gC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEggB,EAAa,aAAE2pC,GAAiB3pD,EAExC,MAAO,CACLuxD,aAAcvxD,EAAOwxD,eAAeC,cAAcprD,OAClDgoB,YAAarO,GAAgBpf,EAAAA,EAAAA,IAAWZ,EAAQggB,QAAiBzlB,EACjEovD,eACAjY,gBAAgBC,EAAAA,EAAAA,IAA+B3xC,GAChD,GATeD,EA5I4B2xD,EAC9C59C,WACAw8C,iBACAlH,UACA/6B,cACAkjC,eACA5H,eACAjY,oBAEA,MAAM,kBACJigB,EAAiB,mBACjBC,EAAkB,iBAClB/hB,IACEpuC,EAAAA,EAAAA,MAGEmB,IADOX,EAAAA,EAAAA,KACKosB,GAAa52B,IAmB/B,OAjBA8G,EAAAA,EAAAA,KAAU,KACJqE,GAAa+mD,GACfgI,EAAkB,CAAE/uD,aACtB,GACC,CAAC+mD,EAAc/mD,EAAW+uD,KAE7Bz6C,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,KAGV7qD,EAAAA,EAAAA,KAAU,KACJorD,GACFiI,GACF,GACC,CAACjI,EAAciI,IAGhB1vD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACZgsB,GACCnsB,EAAAA,GAAAA,cAAC2vD,GAAAA,EAAW,CACVp8B,OAAQpH,EAAY52B,GACpBq6D,aAAct2D,QAAQsY,GACtBi+C,eAAa,IAGhB1jC,GACCnsB,EAAAA,GAAAA,cAAC8vD,GAAAA,EAAS,CACR1D,aAAcjgC,EAAY52B,GAC1Bs6D,eAAa,KAwFf,K,wDClIV,MAAME,GAAqB,CAAEp8C,EAAG,EAAGC,EAAG,GA0ItC,IAAehW,EAAAA,EAAAA,KAxIiBoyD,EAC9BjsD,WACAxO,KACA+T,SACA2mD,YACAh6D,MAAOi6D,EACPC,YACAp0D,iBAEA,MAAM+D,GAAOC,EAAAA,EAAAA,KAEP0J,GAAMtO,EAAAA,EAAAA,IAAuB,OAE5B2yD,EAAOsC,IAAY5qD,EAAAA,EAAAA,IAAyB,CACjD6qD,YAAY,EACZx8D,OAAQk8D,GACRO,YAAaP,KAGTQ,EAAmBpqD,IACvBA,EAAEC,kBACFD,EAAEgK,iBACF,MAAM,EAAEwD,EAAC,EAAEC,GAAM48C,GAAoBrqD,GAErCiqD,EAAS,IACJtC,EACHuC,YAAY,EACZx8D,OAAQ,CAAE8f,IAAGC,KACbrY,MAAOkO,EAAInO,SAAS0+C,YACpBp+C,OAAQ6N,EAAInO,SAAS3F,cACrB,EAGE86D,GAAkBhxD,EAAAA,EAAAA,KAAa0G,IACnC,MAAM,EAAEwN,EAAC,EAAEC,GAAM48C,GAAoBrqD,GAE/BmqD,EAAc,CAClB38C,EAAGA,EAAIm6C,EAAMj6D,OAAO8f,EACpBC,EAAGA,EAAIk6C,EAAMj6D,OAAO+f,GAGtBw8C,GAAU90D,IAAO,IACZA,EACHg1D,kBAGFhnD,EAAOgnD,EAAa/6D,EAAG,GACtB,CAACA,EAAI+T,EAAQwkD,EAAMj6D,OAAO8f,EAAGm6C,EAAMj6D,OAAO+f,IAEvC88C,GAAgBjxD,EAAAA,EAAAA,KAAY,KAChCgjB,uBAAsB,KACpB2tC,GAAU90D,IAAO,IACZA,EACH+0D,YAAY,EACZ90D,WAAOlD,EACPuD,YAAQvD,MAGV43D,GAAW,GACX,GACD,CAACA,KAEJ5zD,EAAAA,EAAAA,KAAU,KACJyxD,EAAMuC,YAAct0D,GACtBq0D,GAAU90D,IAAO,IACZA,EACH+0D,YAAY,EACZ90D,WAAOlD,EACPuD,YAAQvD,KAEZ,GACC,CAAC0D,EAAY+xD,EAAMuC,cAEtBh0D,EAAAA,EAAAA,KAAU,KACJyxD,EAAMuC,YACR1zD,OAAOoJ,iBAAiB,YAAa0qD,GACrC9zD,OAAOoJ,iBAAiB,YAAa0qD,GACrC9zD,OAAOoJ,iBAAiB,WAAY2qD,GACpC/zD,OAAOoJ,iBAAiB,cAAe2qD,GACvC/zD,OAAOoJ,iBAAiB,UAAW2qD,KAEnC/zD,OAAOqJ,oBAAoB,YAAayqD,GACxC9zD,OAAOqJ,oBAAoB,YAAayqD,GACxC9zD,OAAOqJ,oBAAoB,WAAY0qD,GACvC/zD,OAAOqJ,oBAAoB,cAAe0qD,GAC1C/zD,OAAOqJ,oBAAoB,UAAW0qD,GAEtCN,GAAU90D,IAAO,IACZA,EACHg1D,YAAaP,QAIV,KACDjC,EAAMuC,aACR1zD,OAAOqJ,oBAAoB,YAAayqD,GACxC9zD,OAAOqJ,oBAAoB,YAAayqD,GACxC9zD,OAAOqJ,oBAAoB,WAAY0qD,GACvC/zD,OAAOqJ,oBAAoB,cAAe0qD,GAC1C/zD,OAAOqJ,oBAAoB,UAAW0qD,GACxC,IAED,CAACD,EAAiBC,EAAe5C,EAAMuC,aAE1C,MAAM9V,GAAgBr0C,EAAAA,GAAAA,GC5II,uBD4I6B4nD,EAAMuC,YC5IC,wBD8IxDM,GAAY92D,EAAAA,EAAAA,KAAQ,KACjB+2D,EAAAA,GAAAA,GACL9C,EAAMuC,YAAe,wBAAuBvC,EAAMwC,YAAY38C,QAAQm6C,EAAMwC,YAAY18C,OACxFk6C,EAAMvyD,MAAS,UAASuyD,EAAMvyD,eAAYlD,EAC1Cy1D,EAAMlyD,OAAU,WAAUkyD,EAAMlyD,gBAAavD,EAC7C63D,IAED,CAACA,EAAepC,EAAMlyD,OAAQkyD,EAAMuC,WAAYvC,EAAMwC,YAAY38C,EAAGm6C,EAAMwC,YAAY18C,EAAGk6C,EAAMvyD,QAEnG,OACEyE,EAAAA,GAAAA,cAAA,OAAK/J,MAAO06D,EAAWxwD,UAAWo6C,EAAe9wC,IAAKA,GACnD1F,GAEChI,GACAiE,EAAAA,GAAAA,cAAA,OACE,aAAYF,EAAK,mBACjB6yB,SAAU,EACVD,KAAK,SACLvyB,WAAW+F,EAAAA,GAAAA,GChKyE,uBDgK7C,kBACvC2qD,YAAaN,EACbO,aAAcP,EACdt6D,MAAOk6D,GAEPnwD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,YAAY,oBAGzB,IAMV,SAASqwD,GAAoBrqD,GAC3B,IAAIwN,EACAC,EAUJ,MARI,YAAazN,GACfwN,EAAIxN,EAAEsT,QAAQ,GAAG7Q,QACjBgL,EAAIzN,EAAEsT,QAAQ,GAAGlL,UAEjBoF,EAAIxN,EAAEyC,QACNgL,EAAIzN,EAAEoI,SAGD,CAAEoF,IAAGC,IACd,CE3LA,MCmNA,IAAehW,EAAAA,EAAAA,KAlLuBmzD,EACpCzyD,SACA0yD,YACAC,qBAEA,MAAM,iBACJnpC,EAAgB,eAChBopC,EAAc,mBACdC,EAAkB,cAClBC,EAAa,kBACbC,IACE9xD,EAAAA,EAAAA,MACEO,GAAOC,EAAAA,EAAAA,MACNuxD,EAAoBC,IAAyB/rD,EAAAA,EAAAA,MAE9CgsD,GAAe33D,EAAAA,EAAAA,KAAQ,IAAMm3D,EAAUpxD,KAAI,EAAG6xD,cAAeA,KAAW,CAACT,IACzEU,GAAmBr9C,EAAAA,EAAAA,GAAYm9C,IAE9B1D,EAAOsC,IAAY5qD,EAAAA,EAAAA,IAAoB,CAC5CmsD,iBAAkBH,EAClBI,mBAAoBJ,EACpBK,kBAAcx5D,KAIhBgE,EAAAA,EAAAA,KAAU,KACJq1D,IAAqBF,GACvBpB,EAAS,CACPuB,iBAAkBH,EAClBI,mBAAoBJ,EACpBK,kBAAcx5D,GAElB,GACC,CAACq5D,EAAkBF,IAEtB,MAAMM,GAAqBryD,EAAAA,EAAAA,KAAawK,KACtC8nD,EAAAA,GAAAA,IAAqB,IAAG9nD,KACxB6d,EAAiB,CACf3xB,QAAS2J,EAAK,mBACd,GACD,CAACA,EAAMgoB,IAEJkqC,GAAsBvyD,EAAAA,EAAAA,KAAam6B,IACnCA,EAAKq4B,WACPhB,EAAer3B,EAAK63B,UAEpBF,EAAsB33B,EACxB,GACC,CAACq3B,IAEEiB,GAA6BzyD,EAAAA,EAAAA,KAAY,KAC7C8xD,OAAsBl5D,EAAU,GAC/B,IAEG85D,GAAuB1yD,EAAAA,EAAAA,KAAY,KACnCnB,EACF6yD,EAAmB,CACjB7yD,SACAmzD,SAAUH,EAAoBG,SAC9B7/C,UAAW0/C,EAAoB1/C,WAGjCs/C,EAAe,CACbO,SAAUH,EAAoBG,SAC9B7/C,UAAW0/C,EAAoB1/C,WAGnCsgD,GAA4B,GAC3B,CAAC5zD,EAAQ4zD,EAA4Bf,EAAoBD,EAAgBI,IAEtEc,GAAa3yD,EAAAA,EAAAA,KAAY,CAAC6wD,EAAuC/6D,KACrE,MAAMgmB,EAAQvX,KAAKR,MAAM8sD,EAAY18C,EAzEd,IA0EjBqQ,EAAQ6pC,EAAM6D,kBAAkB7xC,QAAQvqB,IAAiB,EACzDq8D,EAAqB9D,EAAM6D,kBAAkBhsC,QAAQ8rC,GAAaA,IAAal8D,IAEhFq8D,IAAuBh6C,EAAAA,GAAAA,IAAUqM,EAAQ1I,EAAO,EAAGi2C,EAAartD,UAIrEytD,EAAmBS,OAAOpuC,EAAQ1I,EAAO,EAAGhmB,GAC5C66D,GAAU90D,IAAO,IACZA,EACHu2D,aAAc5tC,EACd2tC,yBACC,GACF,CAAC9D,EAAM6D,iBAAkBH,EAAartD,SAEnCmuD,GAAgB7yD,EAAAA,EAAAA,KAAY,KAChC2wD,GAAU90D,IACJgD,EACF+yD,EAAkB,CAChB/yD,SACA0yD,UAAW11D,EAAQs2D,qBAGrBR,EAAc,CAAEJ,UAAW11D,EAAQs2D,qBAG9B,IACFt2D,EACHq2D,iBAAkBr2D,EAAQs2D,mBAC1BC,kBAAcx5D,KAEhB,GACD,CAACiG,EAAQ+yD,EAAmBD,IAE/B,OACEpxD,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UD7IiB,wBC8IpBH,EAAAA,GAAAA,cAAA,MAAIG,UD9IgD,uBC8ItBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACrDyH,EAAK,2BAERE,EAAAA,GAAAA,cAAA,OAAKG,UDjJ+H,uBCiJ1FlK,MAAQ,WAlH/B,GAkH0C+6D,EAAU7sD,YACpE6sD,EAAUpxD,KAAI,CAAC2yD,EAAc5yC,KAAM,IAAA6yC,EAAAC,EAClC,MAAMC,EAAY5E,EAAM+D,eAAiBlyC,EACnCgzC,EArHS,IAqH2D,QAAvDH,EAAC1E,EAAM6D,kBAAkB7xC,QAAQyyC,EAAad,iBAAS,IAAAe,EAAAA,EAAI,GACxEhkD,EAtHS,IAsHsD,QAAzDikD,EAAC3E,EAAM8D,oBAAoB9xC,QAAQyyC,EAAad,iBAAS,IAAAgB,EAAAA,EAAI,GACnEG,EAAWL,EAAaN,WAC1B,qBACCM,EAAa3gD,SAAW,uBAAyB,2BAEtD,OACE5R,EAAAA,GAAAA,cAACgwD,GAAS,CACRxrD,IAAK+tD,EAAad,SAClBl8D,GAAIg9D,EAAad,SACjBnoD,OAAQ8oD,EACRnC,UAAWqC,EACXr8D,MAAQ,QAAOy8D,EAAYC,EAAankD,OACxC2hD,WAAcrwD,EAAKqc,MAAQ,OAAS,SAAxB,UACZpgB,YAAaw2D,EAAa3gD,UAE1B5R,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAK+tD,EAAad,SAClBtxD,WAAW+F,EAAAA,GAAAA,GAAe,eDtK8H,wBCuKxJ6+C,QAAM,EACNF,cAAc,OACd/gD,KAAMyuD,EAAa3gD,SAAW,OAAS,cACvCkzC,WAAS,EACToB,eAAgB,CACd,CACE2M,QAASA,KACPf,EAAmBS,EAAad,SAAS,EAE3CrxD,MAAON,EAAK,QACZgE,KAAM,SAIVtD,QAASA,KACPwxD,EAAoBO,EAAa,GAGnCvyD,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAQ,IAAEoyD,EAAad,UACvCzxD,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYL,EAAK8yD,KAEzB,KAIlB5yD,EAAAA,GAAAA,cAAA,KAAGG,UDhMsF,uBCgMvDkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACzDyH,EAAK,+BAGVE,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQ3F,QAAQg4D,GAChBlyD,QAAS8yD,EACT9xD,MAAON,EAAKwxD,GAAoB1/C,SAAW,gCAAkC,+BAC7EzM,KAAMrF,EAAKwxD,GAAoB1/C,SAAW,+BAAiC,8BAC3Ema,aAAcjsB,EAAKwxD,GAAoB1/C,SACnC,+BACA,8BACJoa,eAAgBmmC,EAChBzzB,sBAAuB4yB,GAAoB1/C,WAE5C,IC/JDg1C,IAAe9gD,EAAAA,GAAAA,KAAU+gD,GAAOA,KAAM,KAAO,GAE7CiM,GAA2B,iCAgPjC,IAAel1D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEggB,GAAkBhgB,GACpB,SACJ4G,EAAQ,oBAAEquD,EAAmB,gBAAEC,EAAiB9pC,MAAO+pC,IACrD3hD,EAAAA,EAAAA,IAAexT,GAAQo1D,aAAe,CAAC,EACrC/mC,EAAcrO,GAAgBpf,EAAAA,EAAAA,IAAWZ,EAAQggB,QAAiBzlB,EAElE86D,GAAeC,EAAAA,GAAAA,GAAmBt1D,EAAQ,eAEhD,IAAKquB,EACH,MAAO,CACLznB,WACAsuD,kBACAD,sBACAE,oBACAE,gBAIJ,MACE3+B,UAAW6+B,EACX3+B,SAAU4+B,EAAe,UACzBtC,EAAS,SACTvsC,GACE0H,GACIonC,IAAKC,GAAe/uC,GAAY,CAAC,EAGzC,MAAO,CACLgvC,mBAHwBz5D,EAAAA,EAAAA,IAAkBmyB,GAI1CknC,mBACAC,kBACAE,aACA9uD,WACAquD,sBACAC,kBACAC,oBACAE,eACAnC,YACD,GAxCenzD,EA9OmC61D,EACrD9hD,WACA6hD,oBACAJ,mBACAC,kBACAE,aACA9uD,WACAsuD,kBACAC,oBACAF,sBACAI,eACAnC,YACA9J,cAEA,MAAM,gBACJyM,EAAe,cACfC,IACEr0D,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,KAEP8zD,GAAwBh6D,EAAAA,EAAAA,KAAQ,IAAMm3D,GAAWjpB,MAAK,EAAGkqB,gBAAiBA,KAAa,CAACjB,IACxF8C,EAAkBD,GAAuBpC,UAAY,IACpDsC,EAAmBC,IAAwBxuD,EAAAA,EAAAA,KAAS,IACpDyuD,EAAwBC,IAA6B1uD,EAAAA,EAAAA,KAAS,IAC9D0jB,EAAOirC,IAAY3uD,EAAAA,EAAAA,OAEnBrN,EAAOi8D,IAAY5uD,EAAAA,EAAAA,OACnBgvB,EAAWC,IAAgBjvB,EAAAA,EAAAA,IAAS6tD,GAAoB,KACxD3+B,EAAUC,IAAenvB,EAAAA,EAAAA,IAAS8tD,GAAmB,KACrDC,EAAKc,IAAU7uD,EAAAA,EAAAA,IAASguD,GAAc,KACtCc,EAAkBC,IAAuB/uD,EAAAA,EAAAA,IAAyBsuD,GAEnEU,GAAuBr6D,EAAAA,EAAAA,GAASs5D,GAAmB,EAAOr5D,EAAAA,GAAAA,SAChE5C,QAAQC,IAAI,CAAC+8D,uBAAqBf,sBAClC,MAAMgB,EAAY/vD,IAAagwD,EAAAA,GAAAA,WACzBC,GAAuC,IAArBL,EAElBM,GAA8BvgD,EAAAA,EAAAA,GAAY0+C,GAC1C8B,EAA+B9B,QAAAA,EAAuB6B,EACtDE,EAA8B9D,GAAaA,EAAU7sD,OAAS,EAE9D4wD,GAAoBl7D,EAAAA,EAAAA,KAAQ,KAC5B86D,IAIGr7D,QAAQnB,IAAU87D,GAA2BF,IAAsD,IAAjCc,IACxE,CAACF,EAAiBx8D,EAAO87D,EAAwBF,EAAmBc,KAEvE7/C,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,KAKV7qD,EAAAA,EAAAA,KAAU,KACRuqD,IAAa,KACX+M,GAAiB,GACjB,GACD,CAACA,KAEJt3D,EAAAA,EAAAA,KAAU,KACR+3D,OAAS/7D,EAAU,GAClB,CAACm8D,KAEJn4D,EAAAA,EAAAA,KAAU,KACRo4B,EAAa4+B,GAAoB,IACjC1+B,EAAY2+B,GAAmB,IAC/Be,EAAOb,GAAc,GAAG,GACvB,CAACH,EAAkBC,EAAiBE,KAEvCn3D,EAAAA,EAAAA,KAAU,KACRk4D,EAAoBT,GAAmB,GAAG,GACzC,CAACA,KAEJz3D,EAAAA,EAAAA,KAAU,KACJqI,IAAagwD,EAAAA,GAAAA,WACfR,GAA0B,GAC1BF,GAAqB,GACrBG,OAAS97D,GACX,GACC,CAACqM,IAEJ,MAAMswD,GAAoBv1D,EAAAA,EAAAA,KAAaw1D,IACrCb,EAASa,EAAS,GACjB,IAEG3/B,GAAwB71B,EAAAA,EAAAA,KAAa0G,IACzCsuB,EAAatuB,EAAEgR,OAAOlN,OACtBiqD,GAA0B,EAAK,GAC9B,IAiBGgB,IAfuBz1D,EAAAA,EAAAA,KAAa0G,IACxCwuB,EAAYxuB,EAAEgR,OAAOlN,OACrBiqD,GAA0B,EAAK,GAC9B,KAEqBz0D,EAAAA,EAAAA,KAAa0G,IACnCkuD,EAAOluD,EAAEgR,OAAOlN,OAChBiqD,GAA0B,EAAK,GAC9B,KAE0Bz0D,EAAAA,EAAAA,KAAawK,IACxCsqD,EAAoBtqD,GACpB+pD,EAAqBF,IAAoB7pD,EAAM,GAC9C,CAAC6pD,KAEsBr0D,EAAAA,EAAAA,KAAY,KACpC,MAAM01D,EAAmB3gC,EAAUwF,OAC7Bo7B,EAAkB1gC,EAASsF,OAC3Bq7B,EAAa9B,EAAIv5B,OAIlBm7B,EAAiBhxD,OAKtByvD,EAAc,CACZz7D,WACI87D,GAA0B,CAC5Bz/B,UAAW2gC,EACXzgC,SAAU0gC,EACV7B,IAAK8B,MAEHtB,GAAqB,CACvBtC,SAAU6C,KAZZH,EAASrB,GAcT,GACD,CACD36D,EACAq8B,EAAWE,EAAU6+B,EAAKU,EAC1BK,EAAkBP,EAClBH,KAkBF,OACE5zD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4CACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4CACbH,EAAAA,GAAAA,cAACs1D,GAAAA,EAAc,CACbd,qBAAsBA,EACtBtqD,SAAU8qD,EACV50D,MAAM,0BACNsK,SAAU+pD,IAEZz0D,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACR1rB,MAAOuqB,EACPtqB,SAAUorB,EACVjI,MAAOvtB,EAAK,aACZ4K,SAAU+pD,EACVvrC,MAAOA,IAAU4pC,GAA2B5pC,OAAQ7wB,KA6CvDy8D,GACC90D,EAAAA,GAAAA,cAAC+wD,GAAe,CACdC,UAAWA,EACXC,eAAgBsD,KAKtBv0D,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASgtC,EACTv0D,QAAS00D,EACTxqD,SAAU+pD,EACVhxD,UAAW3D,EAAK,SAEf20D,EACCz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGb,KCrGV,IAAevC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQgtB,EAAAA,GAAAA,IAAKhtB,EAAO2e,SAASC,MAAO,CACjC,+BACA,iCACA,2BACA,6BACA,+BACA,iCACA,2BACA,6BACA,8BACA,gCACA,0BACA,4BACA,kBACA,oBACA,2BAjBc7e,EArJmC23D,EACrD5jD,WACAs1C,UACAuO,+BACAC,iCACAC,2BACAC,6BACAC,+BACAC,iCACAC,2BACAC,6BACAC,8BACAC,gCACAC,0BACAC,4BACAC,kBACAC,oBACAC,4BAEA,MAAM,iBAAEC,IAAqBj3D,EAAAA,EAAAA,MAEvBO,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGV,MAAMuP,GAAyBh3D,EAAAA,EAAAA,KAAawK,GACnCnK,EAAK,4BAA6BA,EAAK,cAAewuB,OAAOooC,EAAAA,IAAgCzsD,IAAS,OAC5G,CAACnK,IAEE62D,GAAuBl3D,EAAAA,EAAAA,KAAawK,IACxCusD,EAAiB,CAAED,sBAAuBG,EAAAA,IAAgCzsD,IAAS,GAClF,CAACusD,IAEEI,GAA8Bn3D,EAAAA,EAAAA,KAAawK,IAC/CusD,EAAiB,CAAEH,gBAAiBpsD,GAAQ,GAC3C,CAACusD,IAEEK,GAAgCp3D,EAAAA,EAAAA,KAAawK,IACjDusD,EAAiB,CAAEF,kBAAmBrsD,GAAQ,GAC7C,CAACusD,IAmBJ,SAASM,EACP12D,EACAoE,EACAuyD,EACAC,EACAC,EACAC,GAEA,OACEl3D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAY+H,GAE3EJ,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,iCACZstB,QAAS2pC,EAGTxpC,QAAU4pC,GAAcX,EAAiB,CAAE,CAAE,cAAahyD,iBAAoB2yD,MAEhFn3D,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,qCACZstB,QAAS4pC,EAETzpC,QAAU4pC,GAAcX,EAAiB,CAAE,CAAE,cAAahyD,mBAAsB2yD,MAElFn3D,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,mCACZstB,QAAS6pC,EAET1pC,QAAU4pC,GAAcX,EAAiB,CAAE,CAAE,cAAahyD,aAAgB2yD,MAE5En3D,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,iCACZstB,QAAS8pC,EAET3pC,QAAU4pC,GAAcX,EAAiB,CAAE,CAAE,cAAahyD,eAAkB2yD,MAGrE,SAAR3yD,GAvDP,WACE,MAAMyF,EAAQysD,EAAAA,IAAAA,QAAwCH,GAEtD,OACEv2D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACbH,EAAAA,GAAAA,cAAC+J,GAAAA,EAAW,CACVsjB,MAAOvtB,EAAK,2BACZkJ,IAAK,EACLD,IAAK,EACLkB,OAAkB,IAAXA,EAAeA,EAAQ,EAC9BmtD,YAAaX,EACbvsD,SAAUysD,IAIlB,CAwCyBU,GAGzB,CAEA,OACEr3D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACZ22D,EACCh3D,EAAK,2BACL,QACA21D,EACAC,EACAC,EACAC,GAEDkB,EACCh3D,EAAK,2BACL,QACA+1D,EACAC,EACAC,EACAC,GAEDc,EACC,sBACA,OACAb,EACAC,EACAC,EACAC,GAGFp2D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYyH,EAAK,kBAEhFE,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,YACZstB,QAASipC,EACT9oC,QAASqpC,IAEX52D,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,kCACZstB,QAASkpC,EACT/oC,QAASspC,KAGT,K,oDCpIV,MACMS,IAAiCxxD,EAAAA,GAAAA,KAAU+gD,GAAOA,KAAM,KAAO,GAwSrE,IAAejpD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACE8nD,WAAY2R,EACZzyC,KAAM0yC,EACNC,YAAaC,GACX55D,EAAO6nD,YAEX,MAAO,CACL4R,YACAC,cACA/wB,WAAWwE,EAAAA,EAAAA,IAA2BntC,GACtC45D,yBACAC,YAAYvE,EAAAA,GAAAA,GAAmBt1D,EAAQ,iBACxC,GAdeD,EAtSmC+5D,EACrDhmD,WACAimD,iBACAC,eACA5Q,UACAqQ,YACAC,cACA/wB,YACAixB,yBACAC,iBAEA,MAAM,2BACJI,EAA0B,cAC1BC,EAAa,sBACbC,EAAqB,0BACrB3J,EAAyB,gBACzB4J,IACE34D,EAAAA,EAAAA,OAEGuuD,EAAOsC,IAAY5qD,EAAAA,EAAAA,IAAoB,CAC5C2yD,iBAAkBZ,EAClBa,aAAcb,EACd1F,kBAAcx5D,IAGVggE,GAAgBhkD,EAAAA,EAAAA,GAAYkjD,IAGlCl7D,EAAAA,EAAAA,KAAU,KACJg8D,IAAkBd,GACpBnH,EAAS,CACP+H,iBAAkBZ,EAClBa,aAAcb,EACd1F,kBAAcx5D,GAElB,GACC,CAACggE,EAAed,EAAWzJ,EAAMqK,kBAAkBh0D,UAItD9H,EAAAA,EAAAA,KAAU,KACRi7D,IAA+B,KAC7BS,GAA4B,GAC5B,GACD,CAACA,IAEJ,MAAMO,GAAqB74D,EAAAA,EAAAA,KAAY,KACjC1J,OAAOw2D,KAAKiL,GAAarzD,QAAUwzD,EAAa,EAClDM,EAAsB,CACpBl+C,MAAO,kBAMX89C,GAAgB,GACf,CAACL,EAAaG,EAAYE,EAAgBI,IAEvCn4D,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGV,MAAMqR,GAAuBC,EAAAA,GAAAA,MACvBC,GAAc5+D,EAAAA,EAAAA,KAAQ,KAC1B,GAAK09D,EAIL,OAAIA,EAAUpzD,QAAU,EACf+0C,GAAAA,EAGFqe,EAAU33D,KAAKrK,IACpB,MAAMmjE,EAASlB,EAAYjiE,GAC3B,OAAIA,IAAOojE,EAAAA,IACF,CACLpjE,KACA6K,MAAON,EAAK,mBAIT,CACLvK,GAAImjE,EAAOnjE,GACX6K,MAAOs4D,EAAOt4D,MACdwyD,UAAUgG,EAAAA,EAAAA,IAAyB94D,EAAM44D,EAAQH,EAAqBG,EAAOnjE,KAC9E,GACD,GACD,CAACgiE,EAAWC,EAAa13D,EAAMy4D,IAE5BM,GAAoCp5D,EAAAA,EAAAA,KAAai5D,IACjD3iE,OAAOw2D,KAAKiL,GAAarzD,QAAUwzD,EAAa,EAClDM,EAAsB,CACpBl+C,MAAO,kBAMXi+C,EAAc,CAAEU,UAAS,GACxB,CAAClB,EAAaG,EAAYK,EAAeC,IAEtC7F,GAAa3yD,EAAAA,EAAAA,KAAY,CAAC6wD,EAAuC/6D,KACrE,MAAMgmB,EAAQvX,KAAKR,MAAM8sD,EAAY18C,EA5GhB,IA6GfqQ,EAAQ6pC,EAAMqK,kBAAkBr4C,QAAQvqB,IAAiB,EACzD6iE,EAAetK,EAAMqK,kBAAkBxyC,QAAQqpC,GAAaA,IAAaz5D,IAE1E6iE,IAAiBxgD,EAAAA,GAAAA,IAAUqM,EAAQ1I,EAAO,EAAGg8C,GAAWpzD,QAAU,KAIvEi0D,EAAa/F,OAAOpuC,EAAQ1I,GAASkrB,EAAY,EAAI,GAAI,EAAGlxC,GAC5D66D,GAAU90D,IAAO,IACZA,EACHu2D,aAAc5tC,EACdm0C,mBACC,GACF,CAACb,GAAWpzD,OAAQsiC,EAAWqnB,EAAMqK,mBAElC7F,GAAgB7yD,EAAAA,EAAAA,KAAY,KAChC2wD,GAAU90D,IACR48D,EAAgB,CAAEX,UAAWj8D,EAAQ88D,eAE9B,IACF98D,EACH68D,iBAAkB78D,EAAQ88D,aAC1BvG,kBAAcx5D,KAEhB,GACD,CAAC6/D,IAEEY,GAAqBj/D,EAAAA,EAAAA,KAAQ,KACzB4sC,GAAa1wC,OAAOw2D,KAAKiL,GAAarzD,OAASwzD,EAAa,GACnE,CAACH,EAAa/wB,EAAWkxB,IAC5B,OACE33D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4CACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAAC+4D,GAAAA,EAAY,CACXv8D,KAAMw8D,EAAAA,IACNr1B,OAAQs1B,GAAAA,EAAAA,WACR94D,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiCkG,IAAI,QAC/CvG,EAAK,wBAGPg5D,GACC94D,EAAAA,GAAAA,cAACK,EAAAA,EACD,CACEF,UAAU,iBACVG,MAAM,UACN9D,KAAK,UACLs4C,MAAI,EACJC,OAAK,EACLv0C,QAAS83D,EACTn8C,MAAOrc,EAAKqc,OAEZnc,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aACZL,EAAK,qBAKZE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYyH,EAAK,YAErFE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,8BAA8BlK,MAAQ,WA5KpC,IA4K+CshE,GAAWpzD,QAAU,QAClFs0D,GAAat0D,OAASs0D,EAAY74D,KAAI,CAAC84D,EAAQ/4C,KAAM,IAAAu5C,EAAAC,EACpD,MAAMC,EAAYz5C,EAAIg4C,EAAa,EAC7BjF,EAAY5E,EAAM+D,eAAiBlyC,EACnCgzC,EAhLO,IAgLiD,QAA3CuG,EAACpL,EAAMqK,kBAAkBr4C,QAAQ44C,EAAOnjE,WAAG,IAAA2jE,EAAAA,EAAI,GAC5D1qD,EAjLO,IAiLsC,QAAvC2qD,EAACrL,EAAMsK,cAAct4C,QAAQ44C,EAAOnjE,WAAG,IAAA4jE,EAAAA,EAAI,GAEvD,OAAIT,EAAOnjE,KAAOojE,EAAAA,KAAiBD,EAAOnjE,KAAO8jE,GAAAA,GAE7Cr5D,EAAAA,GAAAA,cAACgwD,GAAS,CACRxrD,IAAKk0D,EAAOnjE,GACZA,GAAImjE,EAAOnjE,GACX+T,OAAQ8oD,EACRnC,UAAWqC,EACXr8D,MAAQ,QAAOy8D,EAAYC,EAAankD,OACxC2hD,WAAcrwD,EAAKqc,MAAQ,OAAS,SAAxB,cACZpgB,YAAa0qC,IAAc70B,GAE3B5R,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKk0D,EAAOnjE,GACZ4K,UAAU,sCACV4kD,QAAM,EACNuU,UAAQ,EACRxU,WAAS,EACTyU,UAAQ,GAERv5D,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SACbu4D,EAAOt4D,OAEVJ,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYL,EAAK,0BAOvCE,EAAAA,GAAAA,cAACgwD,GAAS,CACRxrD,IAAKk0D,EAAOnjE,GACZA,GAAImjE,EAAOnjE,GACX+T,OAAQ8oD,EACRnC,UAAWqC,EACXr8D,MAAQ,QAAOy8D,EAAYC,EAAankD,OACxC2hD,WAAcrwD,EAAKqc,MAAQ,OAAS,SAAxB,UACZpgB,WAAYq9D,IAAcxnD,GAE1B5R,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,sCACV4kD,QAAM,EACNF,cAAc,OACdC,WAAS,EACToB,eAA8B,IAAdwS,EAAOnjE,QAAW8C,EAAY,CAC5C,CACEw6D,QAASA,KACPvE,EAA0B,CAAEU,SAAU0J,EAAOnjE,IAAK,EAEpD+oC,aAAa,EACbl+B,MAAON,EAAK,UACZgE,KAAM,WAIVtD,QAASA,KACH44D,EACFnB,EAAsB,CACpBl+C,MAAO,kBAGT+9C,EAAaN,EAAYkB,EAAOnjE,IAClC,GAGFyK,EAAAA,GAAAA,cAAA,QAAMG,UAAU,UACbud,EAAAA,GAAAA,GAAWg7C,EAAOt4D,MAAO,CAAC,UAC1Bg5D,GAAap5D,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mDAE7BH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYu4D,EAAO9F,WAE3B,IAEX6F,IAAgBA,EAAYt0D,OAC/BnE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiCkG,IAAI,QAAO,4BAGvDrG,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,QAId0c,GAA0Bp+D,QAAQo+D,EAAuBvzD,SACzDnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACjEyH,EAAK,sBAGP43D,EAAuB93D,KAAK84D,GAC3B14D,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,OACV4kD,QAAM,EAENvkD,QAASA,IAAMq4D,EAAkCH,IAEjD14D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,UAASud,EAAAA,GAAAA,GAAWg7C,EAAOt4D,MAAO,CAAC,WACnDJ,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYu4D,EAAO/3B,cAGrC3gC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,OACVG,MAAM,UACN9D,KAAK,OACLs4C,MAAI,EACJC,OAAK,EACL54B,MAAOrc,EAAKqc,OAEXrc,EAAK,aAOd,K,gBCtUV,MAyBA,GAzBqC05D,EACnCr3B,QACAs3B,WACAC,iBACAjF,YACAj0D,cAEA,MAAMV,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,iBACVG,MAAM,cACN9D,KAAK,UACL+D,QAAM,EACNk0D,UAAWA,EACXt4C,MAAOrc,EAAKqc,MACZ3b,QAASA,GAETR,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAc,QACrBgiC,EAAM,SAAOA,EAAQ,EAAIu3B,GAAmB,GAAED,KAAcA,EAC3D,ECmBPE,GAAiB,QAiPvB,IAAe/7D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUgwD,YACT,MAAM,QAAE9oC,GAAYlnB,EAAO+mB,OACrB,KAAEC,GAAShnB,EAAO6nD,YAExB,MAAO,CACLiU,oBAAqB50C,EAAQG,OAC7B00C,sBAAuB70C,EAAQK,SAC/By0C,eAA8BzhE,IAAnBy1D,EAAMkB,WAA2BlqC,EAAKgpC,EAAMkB,UACxD,GATenxD,EA9OmCk8D,EACrDjM,QACAkM,WACAC,qBACAC,qBACAtoD,WACAs1C,UACA4S,YACA7kD,SACA2kD,sBACAC,4BAEA,MAAM,eACJM,EAAc,cACdnC,IACEz4D,EAAAA,EAAAA,OAEG66D,EAA6BC,IAAkC70D,EAAAA,EAAAA,KAAS,IACxE80D,EAA6BC,IAAkC/0D,EAAAA,EAAAA,KAAS,IAE/EnJ,EAAAA,EAAAA,KAAU,KACJy9D,GACF5S,GACF,GACC,CAAC4S,EAAW5S,IAEf,MACEsT,gBAAiBC,EACjBC,kBAAmBC,IACjBC,EAAAA,GAAAA,IAAkB9M,EAAO,aAE3B0M,gBAAiBK,EACjBH,kBAAmBI,IACjBF,EAAAA,GAAAA,IAAkB9M,EAAO,aAE7BzxD,EAAAA,EAAAA,KAAU,KACRg+D,GAA+B,GAC/BE,GAA+B,EAAM,GACpC,CAACzM,EAAMkB,WAEV,MAAO+L,EAAwBC,IAA0BnhE,EAAAA,EAAAA,KAAQ,KAC/D,MAAMohE,EAAoB,IAAIpmB,IAAI,IAC5B+kB,GAAuB,MACvBC,GAAyB,KAGzBqB,GAAwBC,EAAAA,GAAAA,IAAwBV,EAAiBQ,GACjEG,GAAwBD,EAAAA,GAAAA,IAAwBN,EAAiBI,GAEvE,MAAO,CACLb,EACIc,EACAA,EAAsB72B,MAAM,EA7DV,EA6DmCs2B,EAAkBx2D,QAC3Em2D,EACIc,EACAA,EAAsB/2B,MAAM,EAhEV,EAgEmCy2B,EAAkB32D,QAC5E,GACA,CACD02D,EAAiBJ,EAAiBE,EAAmBG,EACrDR,EAA6BF,EAC7BR,EAAqBC,IAGjB/5D,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,WAGF,MAAMk4B,GAAe1tC,EAAAA,EAAAA,KAAa2Z,IAChC,MAAM,cAAE5J,GAAkB4J,EAC1B4gD,EAAS,CAAEp4D,KAAM,WAAYmsD,QAASv+C,EAAcvF,MAAM+vB,QAAS,GAClE,CAACggC,IAEEnoC,GAAepyB,EAAAA,EAAAA,KAAY,KAC/B,MAAM,MAAEW,GAAU0tD,EAAM4K,OAEnBt4D,GAUL45D,EAAS,CAAEp4D,KAAM,eAAgBmsD,SAAS,IACvB,SAAfD,EAAMuN,KACRlB,EAAe,CAAE5kE,GAAIu4D,EAAMkB,SAAWsM,aAAcxN,EAAM4K,SAE1DV,EAAc,CAAEU,OAAQ5K,EAAM4K,SAGhC97D,YAAW,KACTsqD,GAAS,GA3GQ,MA0FjB8S,EAAS,CAAEp4D,KAAM,WAAYmsD,QAAS4L,IAkBtB,GACjB,CAAC3B,EAAegC,EAAUG,EAAgBM,EAAgBt2D,OAAQw2D,EAAmBzT,EAAS4G,IAwBjG,SAASyN,EAAYF,GACnB,MAAMX,EAA6B,aAATW,EAAsBV,EAAoBG,EAC9DU,EAA0B,aAATH,EAAsBN,EAAyBC,EAEhES,EAAsB,aAATJ,EAAsBjB,EAA8BE,EAEjEoB,GADsB,aAATL,EAAsBZ,EAAkBI,GACzB12D,OAASu2D,EAAkBv2D,OAASq3D,EAAer3D,OAC/Ew3D,EAAwB,aAATN,EACjB,IAAMhB,GAA+B,GACrC,IAAME,GAA+B,GAEzC,OACEv6D,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACG06D,EAAkB96D,KAAK4E,GAnC9B,SAAwBA,EAAa62D,GACnC,MAAMO,EAAoB,aAATP,EACbQ,GAAAA,GAAAA,MAAyB,EAAGr3D,IAAKs3D,KAAcA,IAAYt3D,IAC3Du3D,GAAAA,GAAAA,MAAyB,EAAGv3D,IAAKs3D,KAAcA,IAAYt3D,IAE/D,GAAKo3D,EAIL,OACE57D,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKo3D,EAASp3D,IACdrE,UAAU,kCACV2D,KAAM83D,EAAS93D,KACfihD,QAAM,EACNuU,UAAQ,GAEPx5D,EAAK87D,EAASx7D,OAGrB,CAesC47D,CAAex3D,EAAK62D,KACnDG,EAAe57D,KAAKrK,GACnByK,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,kCACV4kD,QAAM,EACNuU,UAAQ,IAEP96D,EAAAA,EAAAA,IAASjJ,GACRyK,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CAAC2G,WAAW,QAAQhzB,OAAQh+B,IAE5CyK,EAAAA,GAAAA,cAACymD,GAAAA,EAAa,CAACF,WAAW,QAAQjoD,OAAQ/I,QAI7CkmE,GAAcC,EAAiB,GAChC17D,EAAAA,GAAAA,cAACw5D,GAAc,CACbr3B,MAAOu5B,EACPjC,SAAS,OAETj5D,QAASm7D,IAKnB,CAEA,OACE37D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4CACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAAC+4D,GAAAA,EAAY,CACXv8D,KAAMw8D,EAAAA,IACNr1B,OAAQs1B,GAAAA,EAAAA,WACRr1B,KAAMtV,OAAOw/B,EAAMkB,UACnB7uD,UAAU,0BAGI,WAAf2tD,EAAMuN,MACLr7D,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiCkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACrEyH,EAAK,sBAIVE,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRx1B,UAAU,OACVktB,MAAOvtB,EAAK,kBACZmK,MAAO6jD,EAAM4K,OAAOt4D,MACpB8J,SAAUijC,EACVjkB,MAAO4kC,EAAM5kC,OAAS4kC,EAAM5kC,QAAUywC,GAAiBA,QAAiBthE,KAI5E2H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCACZ2tD,EAAM5kC,OA9LM,WA8LG4kC,EAAM5kC,OACpBlpB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,8CAA8CkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAClFyH,EAAKguD,EAAM5kC,QAIhBlpB,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYyH,EAAK,kBAErFE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,gDACV2D,KAAK,MACLtD,QAASy5D,GAERn6D,EAAK,mBAGPy7D,EAAY,aAGfv7D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYyH,EAAK,kBAErFE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,gDACV2D,KAAK,MACLtD,QAAS05D,GAERp6D,EAAK,mBAGPy7D,EAAY,cAIjBv7D,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASzuB,QAAQw0D,EAAMmO,WACvBvxD,SAAUojD,EAAM2G,UAChBj0D,QAASqxB,EACTpuB,UAA0B,SAAfqqD,EAAMuN,KAAkB,eAAiB,iBAEnDvN,EAAM2G,UACLz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGb,KCvEV,IAAevC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLo+D,UAAU9I,EAAAA,GAAAA,GAAmBt1D,EAAQ,yBAHvBD,EA9K0Cs+D,EAC5Dd,OACA50C,UACA21C,cACA1B,oBACA2B,cACAC,sBACAC,4BACAC,iBACAN,eAEA,MAAM,sBAAEjE,IAA0B14D,EAAAA,EAAAA,MAE5Bg1B,GAAWp5B,EAAAA,EAAAA,IAAyB,MACpCshE,EAAqB,aAATpB,EAAsBQ,GAAAA,GAAsBE,GAAAA,GACxDW,EAAiBN,EAAYj4D,OAASu2D,EAAkBv2D,OAtBzC,IAwBrB9H,EAAAA,EAAAA,KAAU,KACRO,YAAW,KACT6lB,uBAAsB,KACpB8R,EAASj5B,QAAS+5B,OAAO,GACzB,GA9Be,IA+BD,GACjB,IAEH,MAAMsnC,GAAkBl9D,EAAAA,EAAAA,KAAalK,IACnC,MAAMqnE,EAAiB,IAAIR,GAC3B,GAAIQ,EAAepnE,SAASD,GAC1BqnE,EAAevK,OAAOuK,EAAe98C,QAAQvqB,GAAK,OAC7C,CACL,GAAI6mE,EAAYj4D,QAAU+3D,GAAqB,aAATb,EAIpC,YAHApD,EAAsB,CACpBl+C,MAAO,uBAIX6iD,EAAe/4D,KAAKtO,EACtB,CACA+mE,EAAoBM,EAAe,GAClC,CAACR,EAAaE,EAAqBJ,EAAUb,EAAMpD,IAEhD4E,GAAsBp9D,EAAAA,EAAAA,KAAa+E,IACvC,MAAMs4D,EAAuB,IAAIpC,GAC7BoC,EAAqBtnE,SAASgP,GAChCs4D,EAAqBzK,OAAOyK,EAAqBh9C,QAAQtb,GAAM,GAE/Ds4D,EAAqBj5D,KAAKW,GAE5B+3D,EAA0BO,EAAqB,GAC9C,CAACpC,EAAmB6B,IAEjBQ,GAAqBt9D,EAAAA,EAAAA,KAAa0G,IACtC,MAAM,MAAE8D,GAAU9D,EAAEqJ,cACpBgtD,EAAevyD,EAAM,GACpB,CAACuyD,IAEE18D,GAAOC,EAAAA,EAAAA,MAiENkhD,EAAaC,IAAWC,EAAAA,GAAAA,QAAkB9oD,EAAWouB,EAASntB,QAAQ+iE,IAE7E,OACEr8D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,+BACZu6D,EAAkB96D,KApEzB,SAAgC4E,GAC9B,MAAMw4D,EAAeP,EAAU10B,MAAK,EAAGvjC,IAAKs3D,KAAct3D,IAAQs3D,IAClE,GAAKkB,EAIL,OACEh9D,EAAAA,GAAAA,cAACmsD,GAAAA,EAAkB,CACjBroD,KAAMk5D,EAAal5D,KACnB1D,MAAON,EAAKk9D,EAAa58D,OACzB68D,YAAaP,EACbQ,UAAQ,EACR18D,QAASq8D,EACTtnB,SAAUynB,EAAax4D,KAG7B,IAqDO43D,EAAYx8D,KAAI,CAACrK,EAAIoqB,IACpB3f,EAAAA,GAAAA,cAACmsD,GAAAA,EAAkB,CACjBC,aAAc72D,EACd0nE,YAAaP,GAAkB/8C,EAAIy8C,EAAYj4D,OAxI3B,EAyIpB+4D,UAAQ,EACR18D,QAASm8D,EACTpnB,SAAUhgD,MAGdyK,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRlsB,IAAK8qB,EACLtqB,MAAOoyD,EACPnyD,SAAU6yD,EACVpY,YAAa7kD,EAAK,aAGtBE,EAAAA,GAAAA,cAAC0hD,GAAAA,EAAc,CACbvhD,UAAU,4BACVg9D,aAAa,aACbxb,MAAOV,EACPW,WAAYV,KAETD,IAAgBA,EAAY98C,QAAU88C,EAAYzrD,SAASixB,EAAQ,MACpEzmB,EAAAA,GAAAA,cAAA,OAAKwE,IAAI,WAYVy8C,GAAa98C,OACZ88C,EAAYrhD,KAnEpB,SAAoBrK,GAClB,MAAM6nE,EAAahB,EAAY5mE,SAASD,GAExC,OACEyK,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKjP,EACL4K,UAAU,iDAEVK,QAASA,IAAMm8D,EAAgBpnE,GAC/BsU,QAAM,IAELrL,EAAAA,EAAAA,IAASjJ,GACRyK,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CAACrsB,OAAQh+B,IAEzByK,EAAAA,GAAAA,cAACymD,GAAAA,EAAa,CAACnoD,OAAQ/I,EAAI8nE,cAAY,IAEzCr9D,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAM,GACND,QAASgwC,EACT55D,OAAK,IAIb,IA6CUy9C,IAAgBA,EAAY98C,OAC9BnE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAAaqE,IAAI,cAAa,yBAE3CxE,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,CAACx2C,IAAI,aAGb,KC9FV,IAAe5G,EAAAA,EAAAA,KA/FkC0/D,EAC/CjC,OACAvN,QACAkM,WACApoD,WACAs1C,cAEA,MAAM,WAAEqW,GAAezP,GACjB,gBAAE0M,EAAe,kBAAEE,IAAsBE,EAAAA,GAAAA,IAAkB9M,EAAOuN,GAAM,GAExEv7D,GAAOC,EAAAA,EAAAA,KAEPy9D,GAAsBC,EAAAA,GAAAA,IAA8B9E,EAAAA,KACpD+E,GAA2BD,EAAAA,GAAAA,IAA8BE,EAAAA,KAEzDC,GAAe/jE,EAAAA,EAAAA,KAAQ,KAE3B,MAAMkrB,GAAYuB,EAAAA,EAAAA,MAAYzB,MAAMC,KAE9B2B,EAAU,IAAI+2C,GAAuB,MAAOE,GAA4B,IAC9E,OAAOr3C,EAAAA,GAAAA,IAAO,IACTm0C,MACAzzC,EAAAA,EAAAA,IAAkBjnB,EAAM2mB,EAAS1B,EAAWw4C,IAC/C,GACD,CAACC,EAAqBE,EAA0BlD,EAAiB16D,EAAMy9D,IAEpER,GAAqBt9D,EAAAA,EAAAA,KAAao+D,IACtC7D,EAAS,CACPp4D,KAAM,gBACNmsD,QAAS8P,GACT,GACD,CAAC7D,IAEE8D,GAA0Br+D,EAAAA,EAAAA,KAAa0mB,IAEzC6zC,EADW,aAATqB,EACO,CACPz5D,KAAM,oBACNmsD,QAAS,IAAKD,EAAMiQ,eAAgBtD,gBAAiBt0C,IAG9C,CACPvkB,KAAM,oBACNmsD,QAAS,IAAKD,EAAMkQ,eAAgBnD,gBAAiB10C,IAEzD,GACC,CAACk1C,EAAMvN,EAAOkM,IAEXiE,GAAgCx+D,EAAAA,EAAAA,KAAa8sD,IACjD,MAAM2R,EAAsC,CAAC,EAC7C3R,EAAK3T,SAASp0C,IACZ05D,EAAW15D,IAAO,CAAI,IAItBw1D,EADW,aAATqB,EACO,CACPz5D,KAAM,oBACNmsD,QAAS,CACP0M,gBAAiBD,KACd0D,IAIE,CACPt8D,KAAM,oBACNmsD,QAAS,CACP8M,gBAAiBL,KACd0D,IAGT,GACC,CAAC7C,EAAMb,EAAiBR,IAO3B,OALAhlD,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGL0W,EAKH59D,EAAAA,GAAAA,cAACm8D,GAA0B,CACzBd,KAAMA,EACN50C,QAASm3C,EACTxB,YAAa5B,EACbE,kBAAmBA,EACnB2B,YAAakB,EACbjB,oBAAqBwB,EACrBvB,0BAA2B0B,EAC3BzB,eAAgBO,IAZX/8D,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,KAab,IC2BN,IAAep9C,EAAAA,EAAAA,KA1HuBugE,EACpClQ,gBACAmQ,cACAtQ,QACAkM,WACApoD,WACAw8C,iBACAlH,cAEA,MAAMmX,GAAc5+D,EAAAA,EAAAA,KAAY,KAE5BwuD,IAAkBY,EAAAA,GAAAA,qBACfZ,IAAkBY,EAAAA,GAAAA,mBAClBZ,IAAkBY,EAAAA,GAAAA,+BAErBjyD,YAAW,KACTo9D,EAAS,CAAEp4D,KAAM,SAAU,GA5BP,KAiCtBqsD,IAAkBY,EAAAA,GAAAA,sBACfZ,IAAkBY,EAAAA,GAAAA,qBAUvB3H,IARqB,WAAf4G,EAAMuN,KACRjN,EAAeS,EAAAA,GAAAA,qBAEfT,EAAeS,EAAAA,GAAAA,kBAKV,GACR,CACDf,EAAMuN,KAAMrB,EACZ/L,EAAe/G,EAASkH,IAGpBkK,GAAqB74D,EAAAA,EAAAA,KAAY,KACrCu6D,EAAS,CAAEp4D,KAAM,UACjBwsD,EAAeS,EAAAA,GAAAA,oBAAoC,GAClD,CAACT,EAAgB4L,IAEdsE,GAAmB7+D,EAAAA,EAAAA,KAAai5D,IACpCsB,EAAS,CAAEp4D,KAAM,aAAcmsD,QAAS2K,IACxCtK,EAAeS,EAAAA,GAAAA,kBAAkC,GAChD,CAACmL,EAAU5L,IAERmQ,GAAyB9+D,EAAAA,EAAAA,KAAY,KACzCu6D,EAAS,CAAEp4D,KAAM,uBACjBwsD,EAAeH,IAAkBY,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,qBAAqC,GACxC,CAACZ,EAAe+L,EAAU5L,IAEvBoQ,GAAyB/+D,EAAAA,EAAAA,KAAY,KACzCu6D,EAAS,CAAEp4D,KAAM,uBACjBwsD,EAAeH,IAAkBY,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,qBAAqC,GACxC,CAACZ,EAAe+L,EAAU5L,IAE7B,OAAQH,GACN,KAAKY,EAAAA,GAAAA,QACH,OACE7uD,EAAAA,GAAAA,cAAC43D,GAAmB,CAClBC,eAAgBS,EAChBR,aAAcwG,EACd1sD,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXlX,QAASA,IAGf,KAAK2H,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE7uD,EAAAA,GAAAA,cAAC+5D,GAAmB,CAClBjM,MAAOA,EACPkM,SAAUA,EACVC,mBAAoBsE,EACpBrE,mBAAoBsE,EACpBtX,QAASmX,EACTzsD,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXnpD,OAAQiyC,IAGd,KAAK2H,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE7uD,EAAAA,GAAAA,cAACs9D,GAA0B,CACzBjC,KAAK,WACLvN,MAAOA,EACPkM,SAAUA,EACV9S,QAASmX,EACTzsD,SAAUA,IAGhB,KAAKi9C,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE7uD,EAAAA,GAAAA,cAACs9D,GAA0B,CACzBjC,KAAK,WACLvN,MAAOA,EACPkM,SAAUA,EACV9S,QAASmX,EACTzsD,SAAUA,IAIhB,QACE,OAAiB,I,wCCvGvB,MAAM6sD,GAA0B,CAC9B,mBACA,gBACA,iBAGIC,GAAsC,CAAC,CAC3CrxC,MAAO,UACPpjB,MAAO,OACN,CACDojB,MAAO,UACPpjB,MAAO,QAkKT,IAAerM,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,MAAEw4B,EAAK,qBAAEqoC,GAAyB7gE,EAAO2e,SAASC,MAExD,MAAO,KACFoO,EAAAA,GAAAA,IAAKhtB,EAAO2e,SAASC,MAAO,CAC7B,kBACA,iBACA,sBACA,qBACA,qBACA,eAEF4Z,QACAqoC,uBACD,GAfe9gE,EA/J+B+gE,EACjDhtD,WACAw8C,iBACAlH,UACA2X,kBACAhtD,iBACAitD,sBACAC,aACAzoC,QACAqoC,2BAEA,MAAM,iBACJnI,IACEj3D,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,KAEPi/D,EAA2C,CAAC,CAChD3xC,MAAOvtB,EAAK,8BACZmK,MAAO,SACN,CACDojB,MAAOvtB,EAAK,6BACZmK,MAAO,QACN,CACDojB,MAAOvtB,EAAK,+BACZmK,MAAO,SAGHg1D,EAAyB52D,EAAAA,QAO3BhQ,EAP0C,CAC5C,CAAE4R,MAAO,QAASojB,MAAOvtB,EAAK,2BAA4Bo/D,SAAU,6BACpE,CACEj1D,MAAO,aACPojB,MAAOvtB,EAAKq/D,EAAAA,GAAY,6BAA+B,+BACvDD,SAAU,sBAIRE,GAA6B3/D,EAAAA,EAAAA,KAAa4/D,IAC9CZ,GAAwB7lB,SAAQ,CAACtW,EAAG3iB,KAClC5rB,SAASwU,KAAKtU,UAAUgsB,OAAQ,mBAAkBN,IAAK0/C,IAAa1/C,EAAE,IAGxE62C,EAAiB,CAAE3kD,eAAgBwtD,GAA6B,GAC/D,CAAC7I,IAEE8I,GAA8B7/D,EAAAA,EAAAA,KAAa8/D,IAC/CxrE,SAASyrE,gBAAgBvpE,MAAMoyC,YAC7B,uBAAyB,GAAErkC,KAAK+E,IAAIw2D,EAASz1D,EAAAA,GAAS,GAAK,SAE7D/V,SAASyrE,gBAAgBvpE,MAAMoyC,YAAY,wBAA0B,GAAErkC,KAAKipC,MAAgB,OAAVsyB,QAClFxrE,SAASyrE,gBAAgBvpE,MAAMoyC,YAAY,sBAAwB,GAAEk3B,OACrExrE,SAASyrE,gBAAgBC,aAAa,yBAA0BF,EAAQj3B,YAExEkuB,EAAiB,CAAEqI,gBAAiBU,GAAU,GAC7C,CAAC/I,IAEEkJ,GAA8BjgE,EAAAA,EAAAA,KAAawK,IAC/C,MAAM01D,EAAqB,SAAV11D,GAAmB21D,EAAAA,EAAAA,MAAmB31D,EAEvDusD,EAAiB,CAAElgC,MAAOqpC,IAC1BnJ,EAAiB,CAAEmI,qBAAgC,SAAV10D,IACrC01D,IAAarpC,IACfupC,EAAAA,GAAAA,GAAYF,EAAU9tD,IAAmBiuD,EAAAA,IAC3C,GACC,CAACjuD,EAAgB2kD,EAAkBlgC,IAEhCypC,GAAyBtgE,EAAAA,EAAAA,KAAaugE,IAC1CxJ,EAAiB,CAAEuI,WAAYiB,IAC/BxJ,EAAiB,CAAEyJ,0BAA0B,KAE7CC,EAAAA,GAAAA,IAAcF,EAA4B,GACzC,CAACxJ,IAEE2J,GAA+B1gE,EAAAA,EAAAA,KAAa2gE,IAChD5J,EAAiB,CAAEsI,oBAAqBsB,GAA+C,GACtF,CAAC5J,IAOJ,OALAxhD,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYyH,EAAK,aAEhFE,EAAAA,GAAAA,cAAC+J,GAAAA,EAAW,CACVsjB,MAAOvtB,EAAK,YACZkJ,IAAK,GACLD,IAAK,GACLkB,MAAO40D,EACP30D,SAAUo1D,IAGZt/D,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,QAELtD,QAASA,IAAM4tD,EAAeS,EAAAA,GAAAA,wBAE7B/uD,EAAK,oBAIVE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAC5DyH,EAAK,UAERE,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACT77C,KAAK,QACLsjB,QAASk3B,EACTsB,SAAU3B,EAAuB,OAASroC,EAC1CpsB,SAAUw1D,KAId1/D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAW,eAG1E2H,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACT77C,KAAK,aACLsjB,QAAS42B,GACT4B,SAAUvB,EACV70D,SAAU61D,KAId//D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAW,mBAG1E2H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,4BAA4BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAW,yCAI9E2H,EAAAA,GAAAA,cAAC+J,GAAAA,EAAW,CACV+9B,QAAS22B,GACTx0D,MAAO4H,EACP3H,SAAUk1D,KAIbH,GACCj/D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYyH,EAAK,uBAEhFE,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACT77C,KAAK,yBACLsjB,QAASm3B,EACT/0D,SAAUi2D,EACVG,SAAUxB,KAIZ,K,wCCrLV,MAiFA,IAAelhE,EAAAA,EAAAA,KAjFqB2iE,EAClCC,YACAlqC,QACA8mC,aACA58D,cAEA,MAAM,KAAE24B,EAAI,SAAEplC,GAAaysE,EACrBC,EAAkB,YAAW1sE,EAASwB,KACtCsF,EAAe9G,EAASuG,eACxBA,GAAiBH,EAAAA,EAAAA,GAAU,GAAEsmE,YAC7BC,GAAWt/B,EAAAA,GAAAA,GAAcrtC,EAASk1C,WAAWhuC,QAAS3B,QAAQgB,IAAiB,IAC/E,qBAAEwU,IAAyBE,EAAAA,GAAAA,GAC/B1V,QAAQgB,GAAkBO,QAC1BxC,OACAA,EACA,SAEKsoE,EAAeC,IAAoBp7D,EAAAA,EAAAA,KAAS,IAEjDhL,UAAWqmE,EAAS,aAAEnmE,IACpBC,EAAAA,EAAAA,GAAyB8lE,GAAiBE,GACxCG,GAAiD,KAA/BzsD,EAAAA,EAAAA,GAAYssD,IAC5B/xD,aAAcC,EAAqBC,qBAAsBC,IAAsBC,EAAAA,GAAAA,GACpF2xD,IAAkBE,GAAc1nC,IAAS4nC,EAAAA,QAC1C1oE,EACAyoE,EACA,QAGIE,GAAc7lE,EAAAA,EAAAA,MACpB6lE,EAAY1lE,QAAUg7B,EAEtB,MAAMutB,GAAepkD,EAAAA,EAAAA,KAAY,KAC/B,WACE,MAAMwhE,QAAaC,EAAAA,EAAAA,IAAUL,SACvBM,GAASC,KAAKC,EAAAA,IAAsBL,EAAY1lE,QAAU2lE,GAChEzgE,EAAQ24B,EACT,EAJD,EAII,GACH,CAAC0nC,EAAWrgE,EAAS24B,KAExB98B,EAAAA,EAAAA,KAAU,KACJwkE,GACFhd,GACF,GACC,CAACgd,EAAWhd,IAEf,MAAMx0C,GAAc5P,EAAAA,EAAAA,KAAY,KAC1BohE,EACFhd,IAEA+c,GAAkBU,IAAeA,GACnC,GACC,CAACT,EAAWhd,IAET1jD,GAAY+F,EAAAA,GAAAA,GAChB,gBACAk3D,GAAc,YAGhB,OACEp9D,EAAAA,GAAAA,cAAA,OAAKG,UAAWA,EAAWK,QAAS6O,GAClCrP,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAAA,UACEyJ,IAAKi3D,EACLvgE,UAAU,cAEZH,EAAAA,GAAAA,cAAA,OACExL,IAAK8F,GAAkBO,EACvBsF,WAAW+F,EAAAA,GAAAA,GAAe,aAAc4I,GACxC+D,IAAI,KAELhE,GACC7O,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAe,oBAAqB6I,IAClD/O,EAAAA,GAAAA,cAACyE,EAAAA,EAAe,CAACC,SAAUhK,EAAc8F,QAAS6O,MAIpD,ICjEJu3C,IAAe9gD,EAAAA,GAAAA,KAAU+gD,GAAOA,KAAM,KAAO,GAiInD,IAAejpD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMw4B,GAAQC,EAAAA,EAAAA,IAAYz4B,IACpB,WAAEyjE,EAAU,UAAEC,GAAc1jE,EAAO2e,SAASglD,OAAOnrC,IAAU,CAAC,GAC9D,iBAAEorC,GAAqB5jE,EAAO2e,SAEpC,MAAO,CACL8kD,aACAC,YACAE,mBACAprC,QACD,GAXez4B,EA/HyC8jE,EAC3D/vD,WACAw8C,iBACAlH,UACAqa,aACAC,YACAE,mBACAprC,YAEA,MAAM,eACJsrC,EAAc,gBACdC,EAAe,iBACfC,IACEviE,EAAAA,EAAAA,MAEEwiE,GAAW5mE,EAAAA,EAAAA,MACjB4mE,EAASzmE,QAAUg7B,GAGnBj6B,EAAAA,EAAAA,KAAU,KACRuqD,IAAa,KACXgb,GAAgB,GAChB,GACD,CAACA,IAEJ,MAAMI,GAAmBviE,EAAAA,EAAAA,KAAa0G,IACpC,MAAM,MAAEsiB,GAAUtiB,EAAEgR,OAEd8qD,GAAiBC,EAAAA,EAAAA,IAAcz5C,GACjCw5C,GAAgB99D,QAClB09D,EAAgBI,EAAe,GACjC,GACC,CAACJ,IAEEM,GAAwB1iE,EAAAA,EAAAA,KAAY,MACxC2iE,EAAAA,GAAAA,GAvCoB,aAuCmBJ,GAAkB,EAAK,GAC7D,CAACA,IAEEK,GAAiB5iE,EAAAA,EAAAA,KAAY,KACjC2uD,EAAeS,EAAAA,GAAAA,2BAA2C,GACzD,CAACT,IAEEkU,GAAuB7iE,EAAAA,EAAAA,KAAY,KACvCqiE,EAAiB,CACfxrC,QACAirC,gBAAYlpE,EACZo/B,qBAAiBp/B,EACjBmpE,WAAW,EACXe,aAAwB,SAAVjsC,EAAmBksC,EAAAA,IAA2BC,EAAAA,KAC5D,GACD,CAACX,EAAkBxrC,IAEhBosC,GAAwBjjE,EAAAA,EAAAA,KAAa05B,IACzC2oC,EAAiB,CAAExrC,MAAOyrC,EAASzmE,QAAUimE,WAAYpoC,IACzD,MAAMwpC,EAAmBjB,GAAoBA,EAAiB35B,MAAMy4B,GAAcA,EAAUrnC,OAASA,IACjGwpC,GAAkB5uE,SAASk1C,YAC7B25B,EAAAA,GAAAA,IAAgBD,EAAiB5uE,SAASk1C,UAAUhuC,SACjDohC,MAAM/7B,IACL,MAAMiiE,GAAeM,EAAAA,GAAAA,IAAgBviE,GAC/BwiE,EAAY,KAAGC,EAAAA,GAAAA,IAAQziE,KAC7BwhE,EAAiB,CAAExrC,MAAOyrC,EAASzmE,QAAUm8B,gBAAiBqrC,EAAUP,gBAAe,GAE7F,GACC,CAACb,EAAkBI,IAEhBkB,GAA4BvjE,EAAAA,EAAAA,KAAa0G,IAC7C27D,EAAiB,CAAExrC,MAAOyrC,EAASzmE,QAAUkmE,UAAWr7D,EAAEgR,OAAOiW,SAAU,GAC1E,CAAC00C,IAEEhiE,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGV,MAAM+b,EAAcvB,IAAmB,IAAMA,EAAiB,GAAGvoC,OAAS4nC,EAAAA,GAE1E,OACE/gE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4DACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,aACL3D,UAAU,OACVuK,SAAUu4D,EACVziE,QAAS2hE,GAERriE,EAAK,gBAGRE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,WACL3D,UAAU,OACVK,QAAS6hE,GAERviE,EAAK,aAGRE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,WAAWtD,QAAS8hE,GAChCxiE,EAAK,yBAGRE,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,qBACZstB,QAAS9zB,QAAQkoE,GACjBt3D,SAAU84D,KAIbtB,EACC1hE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACZuhE,EAAiB9hE,KAAK4gE,GACrBxgE,EAAAA,GAAAA,cAACugE,GAAa,CACZC,UAAWA,EACXlqC,MAAOA,EACP8mC,WAAYmE,IAAef,EAAUrnC,KACrC34B,QAASkiE,OAKf1iE,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,MAEN,KCvHJkoB,IAAcC,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ,WAC9BC,GAAoB,CACxB,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WA4MzD,SAASC,GAAcC,EAA+BC,GACpD,MAAO,CACLC,cAAe,CACbz/D,KAAKR,MAAO+/D,EAAI,IAAOC,EAAME,UAAUnoE,MAAQ,IAC/CyI,KAAKR,OAAO,EAAI+/D,EAAI,KAAOC,EAAME,UAAU9nE,OAAS,KAEtD+nE,YAAa3/D,KAAKR,MAAM+/D,EAAI,IAAMC,EAAMI,QAAQroE,MAAQ,IAE5D,CAEA,SAASsoE,IACP,cAAEJ,EAAa,YAAEE,GACjBH,GAEA,MAAO,CACLG,GAAeH,EAAMI,QAAQroE,MAAQ,GACrCkoE,EAAc,IAAMD,EAAME,UAAUnoE,MAAQ,GAC5C,EAAIkoE,EAAc,IAAMD,EAAME,UAAU9nE,OAAS,GAErD,CA4EA,UAAegC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMw4B,GAAQC,EAAAA,EAAAA,IAAYz4B,IACpB,gBAAE25B,GAAoB35B,EAAO2e,SAASglD,OAAOnrC,IAAU,CAAC,EAC9D,MAAO,CACLmB,kBACAnB,QACD,GAPez4B,EAxSyC8jE,EAC3D/vD,WACAs1C,UACA5wB,QACAmB,sBAEA,MAAM,iBAAEqqC,IAAqBviE,EAAAA,EAAAA,MAEvBwiE,GAAW5mE,EAAAA,EAAAA,MACjB4mE,EAASzmE,QAAUg7B,EAEnB,MAAM9iB,GAAerY,EAAAA,EAAAA,IAAuB,MAEtC2oE,GAAiB3oE,EAAAA,EAAAA,IAAuB,MAExC4oE,GAAe5oE,EAAAA,EAAAA,IAAuB,MACtC6oE,GAAgB7oE,EAAAA,EAAAA,KAAO,IAEtBooE,EAAKU,IAAUz+D,EAAAA,EAAAA,IAiLxB,SAAuBiyB,GACrB,OAAOA,GAAmBA,EAAgBohB,WAAW,MACjDsqB,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ3rC,EAAgB1F,QAAQ,IAAK,MAC7CmxC,EACN,CArLiCgB,CAAczsC,IAEvC0sC,GAAShpE,EAAAA,EAAAA,IAAOooE,IACtBlnE,EAAAA,EAAAA,KAAU,KACR8nE,EAAO7oE,QAAUioE,CAAG,GACnB,CAACA,IAEJ,MAAOlT,EAAY+T,EAAgBC,IAAoB3hE,EAAAA,EAAAA,MAChD4hE,EAAUC,IAAe/+D,EAAAA,EAAAA,IAAS,KAClCg/D,EAAUC,IAAej/D,EAAAA,EAAAA,IAAS,IAEnCk/D,GAAWvpE,EAAAA,EAAAA,MACXwpE,GAAcxpE,EAAAA,EAAAA,OAGpBkB,EAAAA,EAAAA,KAAU,KAER,MAAMqnE,EAAY,CAChBkB,WAAYd,EAAexoE,QAASspE,eACjC95C,EAAAA,GAAAA,IAAKg5C,EAAexoE,QAASqN,wBAAyB,CAAC,MAAO,QAAS,YAEtEi7D,EAAU,CACdgB,WAAYb,EAAazoE,QAASspE,eAC/B95C,EAAAA,GAAAA,IAAKi5C,EAAazoE,QAASqN,wBAAyB,CAAC,WAK1D,SAASk8D,EAAgB1+D,GACvB,MAAMs9D,EAAgB,CACpBz/D,KAAKgF,IAAIhF,KAAK+E,IAAI,EAAG5C,EAAE0P,MAAS6tD,EAAUkB,YAAalB,EAAUnoE,MAAQ,GACzEyI,KAAKgF,IAAIhF,KAAK+E,IAAI,EAAG5C,EAAEyP,MAAS8tD,EAAUl1D,IAAMgF,EAAalY,QAAS5F,WAAYguE,EAAU9nE,OAAS,KAGjG,YAAE+nE,GAAgBL,GAAca,EAAO7oE,QAASopE,EAASppE,SAK/D,OAHA2oE,EAAOJ,GAAc,CAAEJ,gBAAeE,eAAee,EAASppE,UAC9D8oE,KAEO,CACT,CAWA,SAASU,EAAc3+D,GACrB,MAAM,cAAEs9D,GAAkBH,GAAca,EAAO7oE,QAASopE,EAASppE,SAC3DqoE,EAAc3/D,KAAKgF,IAAIhF,KAAK+E,IAAI,EAAG5C,EAAE0P,MAAS+tD,EAAQgB,YAAahB,EAAQroE,MAAQ,GAKzF,OAHA0oE,EAAOJ,GAAc,CAAEJ,gBAAeE,eAAee,EAASppE,UAC9D8oE,KAEO,CACT,CAjCAM,EAASppE,QAAU,CAAEooE,YAAWE,YAgBhCz6D,EAAAA,GAAAA,IAAc26D,EAAexoE,QAAU,CACrC8N,UAAWy7D,EACXv7D,OAAQu7D,EACRx7D,UAAWg7D,EACX7jE,QAAS6jE,EACTU,wBAAyB,kCACzBC,YAAY,KAad77D,EAAAA,GAAAA,IAAc46D,EAAazoE,QAAU,CACnC8N,UAAW07D,EACXx7D,OAAQw7D,EACRz7D,UAAWg7D,EACX7jE,QAAS6jE,EACTU,wBAAyB,kCACzBC,YAAY,GACZ,GACD,CAACZ,EAAgBC,IAEpB,MAAM,cAAEZ,EAAgB,CAAC,EAAG,GAAE,YAAEE,EAAc,GAAMe,EAASppE,QAAUgoE,GAAcC,EAAKmB,EAASppE,SAAW,CAAC,EACzG2pE,GAAMlC,EAAAA,GAAAA,KAAQmC,EAAAA,GAAAA,IAAQ3B,IACtB4B,EAAM5B,EAAI,GACV6B,GAASrC,EAAAA,GAAAA,KAAQmC,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,MAGxC9oE,EAAAA,EAAAA,KAAU,KACR,MAAMgpE,GAAMH,EAAAA,GAAAA,IAAQ3B,GACdjjE,EAAS,KAAGyiE,EAAAA,GAAAA,IAAQsC,KAK1B,GAHAd,EAAYc,EAAIl0D,KAAK,OACrBszD,EAAYnkE,IAEP0jE,EAAc1oE,QAAS,CAC1B,MAAMinE,GAAeM,EAAAA,GAAAA,IAAgBwC,GACrCvD,EAAiB,CACfxrC,MAAOyrC,EAASzmE,QAChBimE,gBAAYlpE,EACZo/B,gBAAiBn3B,EACjBiiE,gBAEJ,CACAyB,EAAc1oE,SAAU,CAAK,GAC5B,CAACioE,EAAKzB,KAGTzlE,EAAAA,EAAAA,KAAU,MA2GZ,SACEb,EACA2pE,EACAR,EACAD,GAEA,IAAIY,EACAC,EACAC,EAECb,EAAYrpE,SAAYopE,EAASppE,SAWpCgqE,EAAIZ,EAASppE,QAAQooE,UAAUnoE,MAC/BgqE,EAAIb,EAASppE,QAAQooE,UAAU9nE,OAC/B4pE,EAAMb,EAAYrpE,UAXlBgqE,EAAI9pE,EAAOw+C,YACXurB,EAAI/pE,EAAO7F,aACX6vE,EAAMhqE,EAAOG,WAAW,MAExBH,EAAOD,MAAQ+pE,EACf9pE,EAAOI,OAAS2pE,EAEhBZ,EAAYrpE,QAAUkqE,GAOxB,MAAMC,EAAUD,EAAKE,gBAAgBJ,EAAGC,GAClCI,EAASF,EAAQ7rC,KACjBgsC,GAAMV,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,IAE7B,IAAIlhD,EAAQ,EAEZ,IAAK,IAAIrQ,EAAI,EAAGA,EAAI2xD,EAAG3xD,IAAK,CAC1B,MAAMiyD,EAAO,EAAIjyD,GAAK2xD,EAAI,GACpBO,EAAK,CAAC,IAAMD,EAAM,IAAMA,EAAM,IAAMA,GACpCE,EAAK,CAACH,EAAI,GAAKC,EAAMD,EAAI,GAAKC,EAAMD,EAAI,GAAKC,GACnD,IAAK,IAAIlyD,EAAI,EAAGA,EAAI2xD,EAAG3xD,IAAK,CAC1B,MAAMqyD,EAAOryD,GAAK2xD,EAAI,GACtBK,EAAO1hD,KAAW6hD,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAO1hD,KAAW6hD,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAO1hD,KAAW6hD,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAO1hD,KAAW,GACpB,CACF,CAEAuhD,EAAKS,aAAaR,EAAS,EAAG,EAChC,CAxJIS,CAAUpC,EAAexoE,QAAS1E,WAAiCuuE,EAAKR,EAAaD,EAAS,GAC7F,CAACS,KAGJ9oE,EAAAA,EAAAA,KAAU,MAsJZ,SAAiBb,GACf,MAAM8pE,EAAI9pE,EAAOw+C,YAEjBx+C,EAAOD,MAAQ+pE,EACf9pE,EAAOI,OAFG,EAGV,MAAM4pE,EAAMhqE,EAAOG,WAAW,MAExB8pE,EAAUD,EAAIE,gBAAgBJ,EAL1B,GAMJK,EAASF,EAAQ7rC,KAEvB,IAAI3V,EAAQ,EAEZ,IAAK,IAAItQ,EAAI,EAAGA,EAAI2xD,EAAG3xD,IAAK,CAC1B,MAAMwxD,EAAMxxD,GAAK2xD,EAAI,GACfD,GAAMH,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,IAE7BQ,EAAO1hD,KAAWohD,EAAI,GACtBM,EAAO1hD,KAAWohD,EAAI,GACtBM,EAAO1hD,KAAWohD,EAAI,GAEtBM,EAAO1hD,KAAW,GACpB,CAEAuhD,EAAIS,aAAaR,EAAS,EAAG,EAC/B,CA7KIU,CAAQpC,EAAazoE,QAAS1E,WAAgC,GAC7D,IAEH,MAAMwvE,GAAkB3mE,EAAAA,EAAAA,KAAa0G,IACnC,MAAMkgE,EAAWlgE,EAAEqJ,cAAcvF,MAAM8nB,QAAQ,WAAY,IAAIsS,MAAM,EAAG,IAExE,GAAIgiC,EAAS13B,MAAM,mCAAoC,CACrD,MAAM02B,EAAMgB,EAAS1a,MAAM,KAAK/rD,KAAK0mE,GAAYr0C,OAAOq0C,EAAQtsC,UAChEiqC,GAAOd,EAAAA,GAAAA,IAAQkC,GACjB,CAEAl/D,EAAEqJ,cAAcvF,MAAQo8D,CAAQ,GAC/B,IAEGE,GAAkB9mE,EAAAA,EAAAA,KAAa0G,IACnC,MAAMqgE,EAAWrgE,EAAEqJ,cAAcvF,MAAM8nB,QAAQ,gBAAiB,IAAIsS,MAAM,EAAG,GAEzEmiC,EAAS73B,MAAM,uBACjBs1B,GAAOd,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQoD,EAASz0C,QAAQ,IAAK,OAG/C5rB,EAAEqJ,cAAcvF,MAAQu8D,CAAQ,GAC/B,IAEGC,GAA6BhnE,EAAAA,EAAAA,KAAa0G,IAC9C89D,GAAOd,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQj9D,EAAEqJ,cAAck3D,QAAQpmE,MAAOyxB,QAAQ,IAAK,MAAM,GACxE,IAEG5xB,GAAY+F,EAAAA,GAAAA,GAChB,gEACAmqD,GAAc,eAQhB,OALAr7C,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKyJ,IAAK+J,EAAcrT,UAAWA,GACjCH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,OAAKyJ,IAAKq6D,EAAgB3jE,UAAU,gBAClCH,EAAAA,GAAAA,cAAA,eACAA,EAAAA,GAAAA,cAAA,OACEG,UAAU,SACVlK,MAAQ,wBAAuBwtE,EAAc,SAASA,EAAc,6BAA6BwB,QAGrGjlE,EAAAA,GAAAA,cAAA,OAAKyJ,IAAKs6D,EAAc5jE,UAAU,cAChCH,EAAAA,GAAAA,cAAA,eACAA,EAAAA,GAAAA,cAAA,OACEG,UAAU,SACVlK,MAAQ,yBAAwB0tE,4BAAsCyB,QAG1EplE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SACbH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CAAC1rB,MAAOu6D,EAAUn3C,MAAM,MAAMnjB,SAAUq8D,IAClDvmE,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CAAC1rB,MAAOq6D,EAAUj3C,MAAM,MAAMnjB,SAAUk8D,MAGtDpmE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qBACZkjE,GAAkBzjE,KAAKU,GACtBN,EAAAA,GAAAA,cAAA,OACEG,UAAWG,IAAW,IAAG2kE,IAAQ,cAAW5sE,EAC5C,aAAYiI,EACZrK,MAAQ,qBAAoBqK,KAC5BE,QAASimE,OAIX,K,4BCrNV,MAmNA,IAAe7oE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACL6oE,6BAA8BrtE,QAAQwE,EAAO2e,SAASC,MAAMiqD,8BAC5DC,8BAA+BttE,QAAQwE,EAAO2e,SAASC,MAAMkqD,+BAC7DC,sBAAuBvtE,QAAQwE,EAAO2e,SAASC,MAAMmqD,uBACrDC,uBAAwBxtE,QAAQwE,EAAO2e,SAASC,MAAMoqD,wBACtDC,0BAA2BztE,QAAQwE,EAAO2e,SAASC,MAAMqqD,2BACzDC,2BAA4B1tE,QAAQwE,EAAO2e,SAASC,MAAMsqD,4BAC1DC,8BAA+B3tE,QAAQwE,EAAO2e,SAASC,MAAMuqD,+BAC7DC,oBAAqBppE,EAAO2e,SAASC,MAAMwqD,oBAC3CC,qBAAsBrpE,EAAO2e,SAASC,MAAMyqD,qBAC5CC,wBAAyBtpE,EAAO2e,SAASC,MAAM0qD,2BAZjCvpE,EAnNqCwpE,EACvDz1D,WACAs1C,UACAyf,+BACAC,gCACAC,wBACAC,yBACAC,4BACAC,6BACAC,gCACAE,uBACAD,sBACAE,8BAEA,MAAM,yBACJE,EAAwB,gCACxBC,EAA+B,2BAC/BC,EAA0B,8BAC1BC,IACEloE,EAAAA,EAAAA,OAEJlD,EAAAA,EAAAA,KAAU,KACRirE,GAA0B,GACzB,CAACA,IAEJ,MAAMI,GAAeC,EAAAA,GAAAA,GAAgB,KAAK,GAEpCC,GAAuBnoE,EAAAA,EAAAA,KAAY,CACvC0G,EACA0hE,EACAC,KAEA,MAAMC,EAA+B,YAAbF,GACnBlB,IACc,UAAbkB,EAAuBhB,EAAwBE,GAC/CiB,EAAyC,YAAbH,EAC9BjB,EACc,UAAbiB,EAAuBf,EAAyBE,EAErDQ,EAA2B,CACzBK,cACgB,WAAZC,GAAwB,CAAEnrB,UAAWx2C,EAAEgR,OAAOiW,QAAS66C,mBAAoBD,MAC/D,iBAAZF,GAA8B,CAAEG,mBAAoB9hE,EAAEgR,OAAOiW,QAASuvB,SAAUorB,IACpF,GACD,CACDf,EAA4BD,EAC5BD,EAAwBD,EACxBD,EAA+BD,EAC/Ba,IAGIU,GAA+BzoE,EAAAA,EAAAA,KAAa0G,IAChDshE,EAA8B,CAC5BP,oBAAqB/gE,EAAEgR,OAAOiW,SAC9B,GACD,CAACq6C,IAEEU,GAAgC1oE,EAAAA,EAAAA,KAAa0G,IACjDshE,EAA8B,CAC5BN,qBAAsBhhE,EAAEgR,OAAOiW,SAC/B,GACD,CAACq6C,IAEEW,GAAwC3oE,EAAAA,EAAAA,KAAa0G,IACzDyhE,EAAqBzhE,EAAG,UAAW,SAAS,GAC3C,CAACyhE,IAEES,GAAkC5oE,EAAAA,EAAAA,KAAa0G,IACnDyhE,EAAqBzhE,EAAG,UAAW,eAAe,GACjD,CAACyhE,IAEEU,GAAkC7oE,EAAAA,EAAAA,KAAa0G,IACnDyhE,EAAqBzhE,EAAG,QAAS,SAAS,GACzC,CAACyhE,IAEEW,GAA4B9oE,EAAAA,EAAAA,KAAa0G,IAC7CyhE,EAAqBzhE,EAAG,QAAS,eAAe,GAC/C,CAACyhE,IAEEY,GAAoC/oE,EAAAA,EAAAA,KAAa0G,IACrDyhE,EAAqBzhE,EAAG,YAAa,SAAS,GAC7C,CAACyhE,IAEEa,GAA8BhpE,EAAAA,EAAAA,KAAa0G,IAC/CyhE,EAAqBzhE,EAAG,YAAa,eAAe,GACnD,CAACyhE,IAEEc,GAAkCjpE,EAAAA,EAAAA,KAAa0G,IACnDohE,EAAgC,CAC9B5qB,UAAWx2C,EAAEgR,OAAOiW,SACpB,GACD,CAACm6C,IAEE33D,GAAqBnQ,EAAAA,EAAAA,KAAa0H,IACtCsgE,EAA8B,CAC5BL,wBAAyBjgE,IAE3BugE,GAAa,KAAMiB,EAAAA,GAAAA,SAAgBtwE,EAAW8O,IAAQ,GACrD,CAACugE,EAAcD,IAEZ3nE,GAAOC,EAAAA,EAAAA,KAOb,OALAiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAW,qBAG1E2H,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAM,oBAEN6xC,SAAUp/D,EAAKonE,EAAsB,gCAAkC,kCACvE95C,QAAS85C,EACTh9D,SAAUg+D,IAEZloE,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAM,wBACN3iB,UAAWw8D,EAEXhI,SAAUp/D,EAAKqnE,EAAuB,gCAAkC,kCACxE/5C,QAAS+5C,EACTj9D,SAAUi+D,IAEZnoE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAC+J,GAAAA,EAAW,CACVsjB,MAAM,QACNrkB,IAAK,EACLD,IAAK,GACLkB,MAAOm9D,EACPl9D,SAAU0F,MAIhB5P,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAC5DyH,EAAK,6BAGRE,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,gCAEZo/D,SAAUp/D,EAAK6mE,EAA+B,gCAAkC,kCAChFv5C,QAASu5C,EACTz8D,SAAUk+D,IAEZpoE,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,kBACZ4K,UAAWi8D,EAEXzH,SAAUp/D,EAAK8mE,EAAgC,gCAAkC,kCACjFx5C,QAASw5C,EACT18D,SAAUm+D,KAIdroE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYyH,EAAK,iBAEhFE,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,0BACZo/D,SAAUp/D,EAAK+mE,EAAwB,gCAAkC,kCACzEz5C,QAASy5C,EACT38D,SAAUo+D,IAEZtoE,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,kBACZ4K,UAAWm8D,EACX3H,SAAUp/D,EAAKgnE,EAAyB,gCAAkC,kCAC1E15C,QAAS05C,EACT58D,SAAUq+D,KAIdvoE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYyH,EAAK,mBAEhFE,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,4BAEZo/D,SAAUp/D,EAAKinE,EAA4B,gCAAkC,kCAC7E35C,QAAS25C,EACT78D,SAAUs+D,IAEZxoE,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,kBACZ4K,UAAWq8D,EAEX7H,SAAUp/D,EAAKknE,EAA6B,gCAAkC,kCAC9E55C,QAAS45C,EACT98D,SAAUu+D,KAIdzoE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYyH,EAAK,eAEhFE,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,iBACZstB,QAAS65C,EACT/8D,SAAUw+D,KAGV,KC4IV,IAAe9qE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACE2e,UACEC,OAAO,YACLksD,EAAW,mBAAEC,EAAkB,mBAAEC,EAAkB,kCAAEC,EAAiC,sBACtFC,GACD,QACDC,GACD,QACDC,EACAC,UAAU,YACRC,GACD,UACD79B,EAAS,QACT89B,GACEvrE,EAEJ,MAAO,CACLurE,UACA14B,sBAAsB1F,EAAAA,EAAAA,IAA2BntC,GACjD8qE,cACAQ,YAAa9vE,QAAQ8vE,GACrBE,aAAcJ,EAAQK,WACtBC,aAAc1rE,EAAO2rE,kBAAkBla,cAAcprD,OACrD0kE,qBACAa,6BAA8BpwE,QAAQiyC,GAAWm+B,8BACjDX,oCACAD,qBACAa,mBAAoBV,EAAQn0C,YAC5B80C,gBAAiBX,EAAQY,SACzBC,oBAAqBb,EAAQc,aAC7BC,kBAAmBf,EAAQgB,SAC3BC,qBAAsBjB,EAAQkB,cAC9BC,kBAAmBnB,EAAQoB,WAC3BC,iBAAkBrB,EAAQsB,UAC1BC,gBAAiBvB,EAAQwB,SACzBzB,wBACD,GAtCenrE,EAjV+B6sE,EACjDrB,UACAz3D,WACA++B,uBACAi4B,cACAQ,cACAE,eACAE,eACAX,qBACAC,qBACAY,+BACAX,oCACAC,wBACAW,qBACAC,kBACAE,sBACAE,oBACAE,uBACAE,oBACAE,mBACAE,kBACApc,iBACAlH,cAEA,MAAM,oBACJyjB,EAAmB,oBACnBC,EAAmB,mBACnBlb,EAAkB,oBAClBmb,EAAmB,sBACnBC,EAAqB,0BACrBC,EAAyB,4BACzBC,EAA2B,sBAC3BC,EAAqB,iBACrBnjD,EAAgB,iBAChB0uC,EAAgB,gBAChB0U,IACE3rE,EAAAA,EAAAA,OAEJlD,EAAAA,EAAAA,KAAU,KACRuuE,IACAlb,IACAib,IACAE,IACAI,GAAuB,GACtB,CAACL,EAAqBlb,EAAoBib,EAAqBE,EAAqBI,KAEvF5uE,EAAAA,EAAAA,KAAU,KACJuV,GACFm5D,GACF,GACC,CAACn5D,EAAUm5D,IAEd,MAAMjrE,GAAOC,EAAAA,EAAAA,KAyDb,OAvDAiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,KAGyBznD,EAAAA,EAAAA,KAAa0M,IAC9C6+D,EAA4B,CAC1BjC,kCAAmC58D,GACnC,GACD,CAAC6+D,KAE6BvrE,EAAAA,EAAAA,KAAY,KACvCkxC,EACFyd,EAAeS,EAAAA,GAAAA,sBAEf/mC,EAAiB,CACf3xB,QAAS2J,EAAK,oCAElB,GACC,CAAC6wC,EAAsB7wC,EAAMsuD,EAAgBtmC,KAEhBroB,EAAAA,EAAAA,KAAa03D,IAC3CX,EAAiB,CACfwS,sBAAuB7R,IAEzB+T,GAAiB,GAChB,KACiCzrE,EAAAA,EAAAA,KAAa03D,IAC/C2T,EAAsB3T,EAAU,GAC/B,CAAC2T,IA2BF9qE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBA8NX,KC9NV,IAAevC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,SACJqtE,EAAQ,UAAEC,EAAS,aAAEC,EAAY,eAAEC,GACjCxtE,EAAO2e,SAASC,MAEpB,MAAO,CACL+qC,aAAc3pD,EAAO2pD,aACrB2jB,YACAD,WACAE,eACAC,iBACD,GAZeztE,EAxHgC0tE,EAClD35D,WACAw5D,YACAD,WACAE,eACAC,iBACA7jB,eACA2G,iBACAlH,cAEA,MAAM,cACJskB,EAAa,eACbC,EAAc,iBACdjV,IACEj3D,EAAAA,EAAAA,OAEGmsE,EAAkBC,IAAuBnmE,EAAAA,EAAAA,IAAiB2lE,IAC1D1W,EAAWmX,EAAeC,IAAmBnpE,EAAAA,EAAAA,KAE9C5C,GAAOC,EAAAA,EAAAA,MAEb1D,EAAAA,EAAAA,KAAU,KACJorD,IAAiB2jB,GAAWjnE,QAC9BqnE,GACF,GACC,CAACJ,EAAW3jB,EAAc+jB,IAE7B,MAAMr+B,GAAe1tC,EAAAA,EAAAA,KAAaykD,IAChCynB,EAAoBznB,GACpB0nB,KAEKE,EAAAA,GAAAA,IAAY5nB,GAAsB,KACrC2nB,IAEArV,EAAiB,CAAE2U,SAAUjnB,IAE7BunB,GAAgB,GAChB,GACD,CAACG,EAAeC,EAAiBrV,EAAkBiV,IAEhD3jC,GAAUjuC,EAAAA,EAAAA,KAAQ,IACfuxE,EAkEX,SAAsBA,GACpB,MAAMW,GAAmBpvE,OAAOs/B,UAAUkvC,UAAY,MAAM1mB,cACtDunB,EAAgBD,EAAgBE,OAAO,EAAG,GAEhD,OAAOb,EAAUxrE,KAAI,EAAGskD,WAAUgoB,aAAY1nD,WAAW,CACvDva,MAAOi6C,EACP72B,MAAO6+C,EACPhN,SAAU16C,MACRonC,MAAMC,IACDkgB,GAAoBlgB,EAAE5hD,QAAU8hE,GAAmBlgB,EAAE5hD,QAAU+hE,EAAsB,GAAJ,GAE5F,CA7EuBG,CAAaf,QAAa/yE,GAC5C,CAAC+yE,IAEEgB,GAA8B3sE,EAAAA,EAAAA,KAAa4sE,IAC/C7V,EAAiB,CAAE6U,aAAcgB,GAAW,GAC3C,CAAC7V,IAEE8V,GAAqBzyE,EAAAA,EAAAA,KAAQ,KACjC,MAAM0yE,GAA6BlmD,EAAAA,GAAAA,IAAO,IAAIilD,EAAgBH,IAE9D,OAA0C,IAAtCoB,EAA2BpoE,OACxBinE,EAGEA,EAAUrjC,MAAK,EAAGmc,cAAeA,IAAainB,KAAWe,WAFvDpsE,EAAK,WAKTA,EAAK,YAAaysE,EAA2BpoE,OAAO,GAC1D,CAACmnE,EAAgBxrE,EAAMqrE,EAAUC,IAE9BoB,GAAwB/sE,EAAAA,EAAAA,KAAY,KACxC2uD,EAAeS,EAAAA,GAAAA,eAA+B,GAC7C,CAACT,IAOJ,OALAp5C,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oDACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,uBACZstB,QAASi+C,EACT99C,QAAS6+C,IAEVf,GACCrrE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjpC,QAASgsE,GAER1sE,EAAK,kBACNE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,gCAAgCmsE,IAGpDtsE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,uCACVL,EAAK,kCAGVE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACZ2nC,EACC9nC,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACT77C,KAAK,oBACLsjB,QAASA,EACTw4B,SAAUoL,EACVe,cAAehY,EAAYiX,OAAmBrzE,EAC9C6R,SAAUijC,IAGZntC,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,OAGR,KCpIH,SAAS0xB,GAAcC,GAC5B,OAAQA,GACN,KAAK9d,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,MAAO,cACT,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,MAAO,eACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,mCACH,MAAO,gBACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,aACT,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BACH,MAAO,YACT,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,MAAO,WAIb,C,gBCvCA,MCqDA,IAAejxD,EAAAA,EAAAA,KAxCoBgvE,EACjC1iE,WACAqqB,eAEA,MAAOs4C,EAAcC,IAAmBtnE,EAAAA,EAAAA,MAalCunE,GAAmBttE,EAAAA,EAAAA,KAAautE,IACpCF,OAAgBz0E,GAChB6R,EAAS8iE,EAAW,GACnB,CAAC9iE,IAEE+iE,GAAmBxtE,EAAAA,EAAAA,KAAY,KACnCqtE,OAAgBz0E,EAAU,GACzB,IAEH,OACE2H,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,SACE4B,KAAK,OACLsI,SAxBN,SAA0BkP,GACxB,MAAMjC,EAASiC,EAAMjC,OAEhBA,GAAQsR,QAAQ,KAIrBqkD,EAAgB31D,EAAOsR,MAAM,IAC7BtR,EAAOlN,MAAQ,GACjB,EAgBMijE,OAAO,wBACPzjE,IAAK8qB,EACLp0B,UD9CgB,yBCgDlBH,EAAAA,GAAAA,cAACmtE,GAAAA,EAAS,CAACC,KAAMP,EAAcztE,QAAS6tE,EAAkB/iE,SAAU6iE,IACnE,ICkDP,IAAenvE,EAAAA,EAAAA,KA9EyCyvE,EACtDlhD,kBAEA,MAAM,aACJmhD,EAAY,mBAAEC,EAAkB,mBAAE5sE,EAAkB,iBAAEmnB,IACpDvoB,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,KAEP2kB,EAAgByH,EAAY1H,UAAUC,eACrC8oD,EAAgCC,EAA8BC,IAAiChrE,EAAAA,EAAAA,IAAQ,GAGxG6xB,GAAWp5B,EAAAA,EAAAA,IAAyB,OAE1CkB,EAAAA,EAAAA,KAAU,KACH8vB,EAAY1H,UACf6oD,EAAa,CAAE/5C,OAAQpH,EAAY52B,IACrC,GACC,CAAC42B,EAAY1H,SAAU0H,EAAY52B,GAAI+3E,IAE1C,MAAMK,GAAmBluE,EAAAA,EAAAA,KAAa2tE,IACpCG,EAAmB,CACjBH,OACAQ,YAAY,IAEd9lD,EAAiB,CACf3xB,QAAS2J,EAAK,4CACd,GACD,CAACA,EAAMgoB,EAAkBylD,IAEtBM,GAAsBpuE,EAAAA,EAAAA,KAAY,KACtCiuE,IACA/sE,EAAmB,CAAExI,MAAOusB,GAAiB,GAC5C,CAACgpD,EAA+B/sE,EAAoB+jB,IAEjDopD,GAAyBruE,EAAAA,EAAAA,KAAY,KACzC80B,EAASj5B,SAASyyE,OAAO,GACxB,IAEH,OACE/tE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,aACLtD,QAASstE,GAET9tE,EAAAA,GAAAA,cAAC4sE,GAAY,CACX1iE,SAAUyjE,EACVp5C,SAAUA,IAEXz0B,EAAK4kB,EAAgB,yCAA2C,wCAElEA,GACC1kB,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPukC,YAAahuE,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAACplB,MAAOusB,EAAeloB,KAAK,OAAO2D,UC3EO,yBD4E9DK,QAASitE,EACTnvC,aAAW,GAEVx+B,EAAK4kB,EAAcnrB,QAChB,yCACA,0CACJyG,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQuuE,EACRpuE,QAASsuE,EACTvoE,KAAMrF,EAAK,8BACXisB,aAAcjsB,EAAK,UACnBksB,eAAgB6hD,EAChBnvC,sBAAoB,KAI1B1+B,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mCAAmCkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACvEyH,EAAK,yCAEJ,IE+IV,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAU6uE,aACT,IAAIsB,EAEJ,MACEppD,OAASC,KAAMC,GACftI,UAAU,QAAEwsD,IACVnrE,EAEEquB,GAAcztB,EAAAA,EAAAA,IAAWZ,EAAQA,EAAOggB,eAE9C,OAAQ6uD,GACN,KAAK9d,EAAAA,GAAAA,mBACHof,EAAkBhF,EAAQn0C,YAC1B,MAEF,KAAK+5B,EAAAA,GAAAA,gBACHof,EAAkBhF,EAAQY,SAC1B,MAEF,KAAKhb,EAAAA,GAAAA,oBACHof,EAAkBhF,EAAQc,aAC1B,MAEF,KAAKlb,EAAAA,GAAAA,iBACHof,EAAkBhF,EAAQsB,UAC1B,MAEF,KAAK1b,EAAAA,GAAAA,gBACHof,EAAkBhF,EAAQwB,SAC1B,MAEF,KAAK5b,EAAAA,GAAAA,kBACHof,EAAkBhF,EAAQgB,SAC1B,MAEF,KAAKpb,EAAAA,GAAAA,qBACHof,EAAkBhF,EAAQkB,cAC1B,MAEF,KAAKtb,EAAAA,GAAAA,kBACHof,EAAkBhF,EAAQoB,WAI9B,OAAK4D,EAME,IACFA,EACHlpD,YACAoH,eARO,CACLA,cAQH,GAvDetuB,EAhNyCqwE,EAC3DvB,SACA/6D,WACAw8C,iBACAlH,UACAinB,aACAC,eACAC,eACAC,eACAC,eACAxpD,YACAoH,kBAEA,MAAM,qBAAEqiD,IAAyBjvE,EAAAA,EAAAA,MAE3BO,GAAOC,EAAAA,EAAAA,KAEP0uE,GAAoB50E,EAAAA,EAAAA,KAAQ,IACxB8yE,IACD9d,EAAAA,GAAAA,kBACI,CACL,CAAE5kD,MAAO,YAAaojB,MAAOvtB,EAAK,iBAClC,CAAEmK,MAAO,WAAYojB,MAAOvtB,EAAK,iBAI5B,CACL,CAAEmK,MAAO,YAAaojB,MAAOvtB,EAAK,iBAClC,CAAEmK,MAAO,WAAYojB,MAAOvtB,EAAK,gBACjC,CAAEmK,MAAO,SAAUojB,MAAOvtB,EAAK,gBAGpC,CAACA,EAAM6sE,IAEJ+B,EAAiB,CACrBC,iBAAiC,WAAfR,EAClBS,kBAAkC,cAAfT,GAGfU,EAAanC,GAAcC,GAE3BmC,GAAaj1E,EAAAA,EAAAA,KAAQ,KACzB,OAAQ8yE,GACN,KAAK9d,EAAAA,GAAAA,mBACH,OAAO/uD,EAAK,qBACd,KAAK+uD,EAAAA,GAAAA,gBACH,OAAO/uD,EAAK,iBACd,KAAK+uD,EAAAA,GAAAA,oBACH,OAAO/uD,EAAK,4BACd,KAAK+uD,EAAAA,GAAAA,kBACH,OAAO/uD,EAAK,wBACd,KAAK+uD,EAAAA,GAAAA,qBACH,OAAO/uD,EAAK,6BACd,KAAK+uD,EAAAA,GAAAA,kBACH,OAAO/uD,EAAK,eACd,KAAK+uD,EAAAA,GAAAA,iBACH,OAAO/uD,EAAK,gBACd,KAAK+uD,EAAAA,GAAAA,gBACH,OAAO/uD,EAAK,cACd,QACE,OAAiB,GAEpB,CAACA,EAAM6sE,KAEV33D,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGV,MAAM6nB,GAAkBl1E,EAAAA,EAAAA,KAAQ,KAC9B,GAAQ8yE,IACD9d,EAAAA,GAAAA,gBACH,OAAO/uD,EAAK,aAEK,GAEpB,CAACA,EAAM6sE,IAEJqC,EAAwB,MAC5B,OAAQrC,GACN,KAAK9d,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,mCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,iCACT,KAAKA,EAAAA,GAAAA,iBACH,OAAOA,EAAAA,GAAAA,gCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,qBACH,OAAOA,EAAAA,GAAAA,oCACT,QACE,OAAOA,EAAAA,GAAAA,iCAEZ,EAnB6B,GAqBxBogB,EAAuB,MAC3B,OAAQtC,GACN,KAAK9d,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,iCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,8BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,gCACT,KAAKA,EAAAA,GAAAA,iBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,8BACT,KAAKA,EAAAA,GAAAA,qBACH,OAAOA,EAAAA,GAAAA,mCACT,QACE,OAAOA,EAAAA,GAAAA,gCAEZ,EAnB4B,GAqBvBqgB,GAAer1E,EAAAA,EAAAA,KAAQ,IACtBu0E,GAAiBC,GAAiBtpD,EAIhCspD,EAAajgC,QAAO,CAAC+gC,EAAQ7wE,IAC3B6wE,GAAUpqD,EAAUzmB,GAAUymB,EAAUzmB,GAAQ8wE,aAAgB,IACtEhB,EAAajqE,QALP,GAMR,CAACkqE,EAAcD,EAAcrpD,IAE1BsqD,GAAax1E,EAAAA,EAAAA,KAAQ,IACpBy0E,GAAiBC,GAAiBxpD,EAIhCwpD,EAAangC,QAAO,CAAC+gC,EAAQ7wE,IAC3B6wE,GAAUpqD,EAAUzmB,GAAUymB,EAAUzmB,GAAQ8wE,aAAgB,IACtEd,EAAanqE,QALP,GAMR,CAACoqE,EAAcD,EAAcvpD,IAE1BuqD,GAAyB7vE,EAAAA,EAAAA,KAAawK,IAC1CukE,EAAqB,CACnBK,WAAYA,EACZV,WAAYlkE,GACZ,GACD,CAAC4kE,EAAYL,IAEhB,OACExuE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYy2E,GAE3E9uE,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACT77C,KAAO,cAAaqqD,IACpB/mC,QAAS2mC,EACTvkE,SAAUolE,EACVhP,SAAU6N,IAGXY,GACC/uE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mCAAmCkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAY02E,IAI1F/uE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAAYyH,EAAK,sBAEpF4uE,EAAeE,mBACd5uE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPsb,QAAM,EACNjhD,KAAK,WAELtD,QAASA,KACP4tD,EAAe4gB,EAAsB,GAGvChvE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACZ+uE,EAAe,GAAKlvE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,OAAOkG,IAAI,QAAO,IAAE6oE,GACzDlvE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,gBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYL,EAAK,wBAItC4uE,EAAeC,kBACd3uE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPsb,QAAM,EACNjhD,KAAK,cAELtD,QAASA,KACP4tD,EAAe6gB,EAAqB,GAGtCjvE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACZkvE,EAAa,GAAKrvE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,OAAOkG,IAAI,QAAO,IAAQgpE,GAC7DrvE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,eAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYL,EAAK,yBAMxC6sE,IAAW9d,EAAAA,GAAAA,qBAAuC6f,EAAeE,mBAChE5uE,EAAAA,GAAAA,cAACqtE,GAAiC,CAAClhD,YAAaA,IAE9C,KCzOK,SAASojD,GAAelG,GACrC,MAAMmG,EAAWnG,EAAQmG,SAAS/qB,cAC5BgrB,EAASpG,EAAQqG,YAAYjrB,cAC7BkrB,EAAgBtG,EAAQsG,cAAclrB,cAE5C,OAAIgrB,EAAOj6E,SAAS,QACX,OAGLi6E,EAAOj6E,SAAS,YAAci6E,EAAOj6E,SAAS,cACzC,SAELi6E,EAAOj6E,SAAS,SACX,QAELi6E,EAAOj6E,SAAS,WACX,UAELi6E,EAAOj6E,SAAS,UACX,SAELi6E,EAAOj6E,SAAS,WACX,UAELi6E,EAAOj6E,SAAS,SACX,QAELi6E,EAAOj6E,SAAS,kBACX,UAELg6E,EAASh6E,SAAS,WACb,UAGPi6E,EAAOj6E,SAAS,WACbi6E,EAAOj6E,SAAS,SAChBg6E,EAASh6E,SAAS,QAClBg6E,EAASh6E,SAAS,UAClBm6E,EAAcn6E,SAAS,SAEnB,QAELg6E,EAASh6E,SAAS,WAAam6E,EAAcn6E,SAAS,UACjD,SAELg6E,EAASh6E,SAAS,UAAYm6E,EAAcn6E,SAAS,SAChD,QAELg6E,EAASh6E,SAAS,YAAcm6E,EAAcn6E,SAAS,WAClD,UAGF,SACT,C,gBCtDA,UAAgB,sBAAwB,uBAAuB,sBAAwB,uBAAuB,WAAa,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,kBAAoB,uBAAuB,gBAAkB,uBAAuB,kBAAoB,uBAAuB,gBAAkB,uBAAuB,mBAAqB,uBAAuB,iBAAmB,uBAAuB,iBAAmB,uBAAuB,eAAiB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,kBAAoB,uBAAuB,gBAAkB,uBAAuB,kBAAoB,uBAAuB,gBAAkB,uBAAuB,mBAAqB,uBAAuB,iBAAmB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,mBAAqB,uBAAuB,iBAAmB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,oBAAsB,uBAAuB,kBAAoB,uBAAuB,iBAAmB,uBAAuB,eAAiB,uBAAuB,MAAQ,uBAAuB,KAAO,uBAAuB,KAAO,uBAAuB,IAAM,uBAAuB,aAAe,uBAAuB,WAAa,uBAAuB,aAAe,wBCwIzmD,IAAeoI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAqB,CAACC,GAAUksB,WAC3C,CACLq/C,QAASr/C,EAAOlsB,EAAOwxD,eAAesgB,OAAO5lD,QAAQ3xB,KAFrCwF,EA5GqCgyE,EACvD5wE,SAAQoqE,UAASjqE,cAEjB,MAAM,sBAAE0wE,EAAqB,uBAAEC,IAA2BxwE,EAAAA,EAAAA,MACpDO,GAAOC,EAAAA,EAAAA,KAEPiwE,GAAmB7oD,EAAAA,GAAAA,GAAiBkiD,GAAS,GAE7C4G,GAA+BxwE,EAAAA,EAAAA,KAAY,KAC/CqwE,EAAsB,CACpB9lD,KAAMq/C,EAASr/C,KACfkmD,uBAAwB7G,EAAS6G,uBACjC,GACD,CAACJ,EAAuBzG,IAErB8G,GAAyB1wE,EAAAA,EAAAA,KAAY,KACzCqwE,EAAsB,CACpB9lD,KAAMq/C,EAASr/C,KACfomD,iBAAkB/G,EAAS+G,iBAC3B,GACD,CAACN,EAAuBzG,IAErBgH,GAA8B5wE,EAAAA,EAAAA,KAAY,KAC9CswE,EAAuB,CAAE/lD,KAAMq/C,EAASr/C,OACxC5qB,GAAS,GACR,CAACA,EAASiqE,EAAS0G,IAEtB,GAAKC,EAqBL,OACEhwE,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJuqB,OAjBAxqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBAAyBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAChE2H,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACmD,OAAK,EAAClD,MAAM,cAAc9D,KAAK,UAAUiH,UAAW3D,EAAK,SAAUU,QAASpB,GAClFY,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAeL,EAAK,yBACnCE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,SACNE,QAAS6vE,EACTlwE,WAAW+F,EAAAA,GAAAA,GAAe,sBAAuBpQ,GAAAA,eAEhDgK,EAAK,qCAQVb,OAAQA,EACR0/B,gBAAc,EACdv/B,QAASA,EACTe,UAAWrK,GAAAA,uBAEXkK,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GACdpQ,GAAAA,WACAk6E,GAAoBl6E,GAAQ,eAAcy5E,GAAeS,SAG3DhwE,EAAAA,GAAAA,cAAA,MAAIG,UAAWrK,GAAAA,MAAcuQ,IAAI,QAAQ2pE,GAAkBN,aAC3D1vE,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,KAAa,aAAYgK,EAAK,8BAC3CwwE,EAAAA,GAAAA,IAAqD,IAA9BN,EAAiBO,WAAmBzwE,EAAK4xB,OAGnE1xB,EAAAA,GAAAA,cAAA,MAAIG,UAAWrK,GAAAA,KACbkK,EAAAA,GAAAA,cAAA,UAAKF,EAAK,uBACVE,EAAAA,GAAAA,cAAA,UACGgwE,GAAkBQ,QAAQ,IAAER,GAAkBS,WAAW,IAAE,IAC3DT,GAAkBR,SAAS,IAAEQ,GAAkBL,eAGlD3vE,EAAAA,GAAAA,cAAA,UAAKF,EAAK,sBACVE,EAAAA,GAAAA,cAAA,UAAKgwE,GAAkBU,IAEvB1wE,EAAAA,GAAAA,cAAA,UAAKF,EAAK,4BACVE,EAAAA,GAAAA,cAAA,UAAKgwE,GA2Bb,SAAqB3G,GACnB,MAAO,CAACA,EAAQsH,OAAQtH,EAAQuH,SAASjrD,OAAOrsB,SAAS6X,KAAK,KAChE,CA7BiC0/D,CAAYb,KAGvChwE,EAAAA,GAAAA,cAAA,KAAGG,UAAWrK,GAAAA,MAAcgK,EAAK,0BAEjCE,EAAAA,GAAAA,cAAA,MAAIG,UAAWrK,GAAAA,cAAsBgK,EAAK,kCAE1CE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAACjpC,QAASyvE,GACjBjwE,EAAAA,GAAAA,cAAA,QAAMG,UAAWrK,GAAAA,YAAoBgK,EAAK,iCAC1CE,EAAAA,GAAAA,cAAC8wE,GAAAA,EAAQ,CACPv7E,GAAG,iBACH83B,MAAM,KACND,QAAS4iD,EAAiBE,yBAG9BlwE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAACjpC,QAAS2vE,GACjBnwE,EAAAA,GAAAA,cAAA,QAAMG,UAAWrK,GAAAA,YAAoBgK,EAAK,gCAC1CE,EAAAA,GAAAA,cAAC8wE,GAAAA,EAAQ,CACPv7E,GAAG,eACH83B,MAAM,KACND,QAAS4iD,EAAiBI,mBAGxB,KCgIZ,SAASS,GAAYxH,GACnB,MAAO,CAACA,EAAQsH,OAAQtH,EAAQuH,SAASjrD,OAAOrsB,SAAS6X,KAAK,KAChE,CAEA,UAAevT,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,GAAuBA,EAAOwxD,gBADbzxD,EApOsCkzE,EACxDn/D,WACAs1C,UACA0oB,SACArgB,gBACAyhB,cAEA,MAAM,uBACJjB,EAAsB,2BACtBkB,EAA0B,iBAC1BC,IACE3xE,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACNoxE,EAAiCC,EAA+BC,IAAkC3uE,EAAAA,EAAAA,MAClG4uE,EAAmBC,IAAwB/rE,EAAAA,EAAAA,OAC3CkkB,EAAaC,EAAWC,IAAclnB,EAAAA,EAAAA,KAEvC8uE,GAAqB33E,EAAAA,EAAAA,KAAQ,KAGjC,QAAgBxB,IAAZ24E,EAIJ,OAAIA,GAAW,EACN,IAGLA,GAAW,GACN,KAGLA,GAAW,GACN,KAGLA,GAAW,IACN,MAGLA,EAAU,IACL,WADT,CAIgB,GACf,CAACA,IAEES,GAAyB53E,EAAAA,EAAAA,KAAQ,KACrC,MAAMiuC,EAAU,CAAC,CACfza,MAAOvtB,EAAK,QAAS,EAAG,KACxBmK,MAAO,KACN,CACDojB,MAAOvtB,EAAK,SAAU,EAAG,KACzBmK,MAAO,MACN,CACDojB,MAAOvtB,EAAK,SAAU,EAAG,KACzBmK,MAAO,MACN,CACDojB,MAAOvtB,EAAK,SAAU,EAAG,KACzBmK,MAAO,QAQT,OANI+mE,GAAWA,GAAW,KACxBlpC,EAAQjkC,KAAK,CACXwpB,MAAOvtB,EAAK,QAAS,EAAG,KACxBmK,MAAO,QAGJ69B,CAAO,GACb,CAAChoC,EAAMkxE,IAEJX,GAA8B5wE,EAAAA,EAAAA,KAAauqB,IAC/C+lD,EAAuB,CAAE/lD,QAAO,GAC/B,CAAC+lD,IAEE2B,GAA6BjyE,EAAAA,EAAAA,KAAY,KAC7C4xE,IACAJ,GAA4B,GAC3B,CAACI,EAAgCJ,IAE9BU,GAAyBlyE,EAAAA,EAAAA,KAAauqB,IAC1CunD,EAAqBvnD,GACrBL,GAAW,GACV,CAACA,IAEEioD,GAA0BnyE,EAAAA,EAAAA,KAAY,KAC1C8xE,OAAqBl5E,GACrBuxB,GAAY,GACX,CAACA,IAEEioD,GAAyBpyE,EAAAA,EAAAA,KAAawK,IAC1CinE,EAAiB,CAAEY,KAAM7/C,OAAOhoB,IAAS,GACxC,CAACinE,IAEEa,GAAiBl4E,EAAAA,EAAAA,KAAQ,KAC7B,MAAMm4E,EAAqBziB,EAAcxnB,MAAM/d,GAAS4lD,EAAO5lD,GAAMioD,YAErE,OAAOD,EAAqBpC,EAAOoC,QAAsB35E,CAAS,GACjE,CAACu3E,EAAQrgB,IAEN2iB,GAAqBr4E,EAAAA,EAAAA,KAAQ,IAC1B01D,EAAc5pC,QAAQqE,IAAU4lD,EAAO5lD,GAAMioD,aACnD,CAACrC,EAAQrgB,IACN4iB,EAAmB74E,QAAQ44E,EAAmB/tE,QAoGpD,OAlGA6Q,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAiGRlnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yDACZ4xE,IA/FyB1I,EA+Fc0I,EA7FxC/xE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACjEyH,EAAK,gCAGRE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAACsb,QAAM,EAACuU,UAAQ,EAACx1D,KAAO,UAASyrE,GAAelG,kBACvDrpE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBAAsBkG,IAAI,QACvCrG,EAAAA,GAAAA,cAAA,QAAMG,UAAU,QAAQkG,IAAI,QAAQgjE,EAAQqG,aAC5C1vE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,wBACbkpE,EAAQmH,QAAQ,IAAEnH,EAAQoH,WAAW,KAAGpH,EAAQmG,SAAS,IAAEnG,EAAQsG,eAEtE3vE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYkpE,EAAQqH,GAAG,MAAIG,GAAYxH,MAI1D8I,GACCnyE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,2BACV2D,KAAK,OACL+F,QAAM,EACNk7C,QAAM,EACNvkD,QAAS4wE,GAERtxE,EAAK,2BAuEXqyE,IAhEwBC,EAgEgBF,EA9DzClyE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACjEyH,EAAK,kBAGPsyE,EAAcxyE,KAuBrB,SAAuByyE,GACrB,MAAMhJ,EAAUuG,EAAOyC,GAEvB,OACEryE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAK6kE,EAAQr/C,KACbngB,QAAM,EACNk7C,QAAM,EACNmB,eAAgB,CAAC,CACf9lD,MAAO,YACP0D,KAAM,OACNw6B,aAAa,EACbu0B,QAASA,KACPwd,EAA4BhH,EAAQr/C,KAAK,IAG7ClmB,KAAO,UAASyrE,GAAelG,iBAC/B7oE,QAASA,KAAQmxE,EAAuBtI,EAAQr/C,KAAK,GAErDhqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCAAgCkG,IAAI,QACjDrG,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAQgoD,EAAAA,GAAAA,IAAoBroD,EAA2B,IAArBupE,EAAQkH,aAC1DvwE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASkpE,EAAQqG,aACjC1vE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,wBACbkpE,EAAQmH,QAAQ,IAAEnH,EAAQoH,WAAW,KAAGpH,EAAQmG,SAAS,IAAEnG,EAAQsG,eAEtE3vE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYkpE,EAAQqH,GAAG,IAAEG,GAAYxH,KAI7D,MA7CIrpE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACjEyH,EAAK,8BAGRE,EAAAA,GAAAA,cAAA,SAAIF,EAAK,kBACTE,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACT77C,KAAK,cACLsjB,QAAS2pC,EACTnR,SAAUkR,EACVtnE,SAAU2nE,KA0CbM,GACCnyE,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQkyE,EACR/xE,QAASiyE,EACTlsE,KAAMrF,EAAK,sBACXisB,aAAcjsB,EAAK,wBACnBksB,eAAgB0lD,EAChBhzC,sBAAoB,EACpB4zC,oBAAkB,IAGtBtyE,EAAAA,GAAAA,cAAC6vE,GAAqB,CAAC5wE,OAAQyqB,EAAaM,KAAMsnD,EAAmBlyE,QAASwyE,KA7ElF,IAA6BQ,EAhCC/I,CA8GtB,KC5PV,GAAoH,uBCoGpH,IAAezrE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAqB,CAACC,GAAUksB,WAClD,MAAMq/C,EAAUr/C,EAAOlsB,EAAO2rE,kBAAkBmG,OAAO5lD,QAAQ3xB,EAE/D,MAAO,CACLgxE,UACAvgD,IAHUugD,EAAUvrE,EAAO0oB,MAAM1B,KAAKukD,EAAQx8C,YAASx0B,EAIvDwZ,eAAgB/T,EAAO2e,SAASC,MAAM7K,eACvC,GAPiBhU,EAtEqC00E,EACvDtzE,SACAoqE,UACAvgD,MACAjX,iBACAzS,cAEA,MAAM,0BAAEozE,IAA8BjzE,EAAAA,EAAAA,MAChCO,GAAOC,EAAAA,EAAAA,KAEPiwE,GAAmB7oD,EAAAA,GAAAA,GAAiBkiD,GAAS,GAC7C5pC,GAAetY,EAAAA,GAAAA,GAAiB2B,GAAK,GAErCunD,GAA8B5wE,EAAAA,EAAAA,KAAY,KAC9C+yE,EAA0B,CAAExoD,KAAMq/C,EAASr/C,OAC3C5qB,GAAS,GACR,CAACA,EAASiqE,EAASmJ,IAEtB,GAAKxC,EAqBL,OACEhwE,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJuqB,OAjBAxqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBAAyBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAChE2H,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACmD,OAAK,EAAClD,MAAM,cAAc9D,KAAK,UAAUiH,UAAW3D,EAAK,SAAUU,QAASpB,GAClFY,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAeL,EAAK,qBACnCE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,SACNE,QAAS6vE,EACTlwE,WAAW+F,EAAAA,GAAAA,GAAe,sBD9DgV,yBCgEzWpG,EAAK,yBAQVb,OAAQA,EACR0/B,gBAAc,EACdv/B,QAASA,EACTe,UD3EiB,wBC6EjBH,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAACpd,UD7EyC,uBC6Efqd,KAAMiiB,EAAcjjC,KAAK,QAAQqV,eAAgBA,EAAgB4L,WAAS,IAC3GgiB,GAAgBz/B,EAAAA,GAAAA,cAACgiD,GAAAA,EAAa,CAAC7hD,UD9EgD,uBC8EvB8hD,KAAMxiB,IAC/Dz/B,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,IACbk6E,GAAkBpjD,QAGrB5sB,EAAAA,GAAAA,cAAA,MAAIG,UDnFuI,wBCoFzIH,EAAAA,GAAAA,cAAA,UAAKF,EAAK,8BACVE,EAAAA,GAAAA,cAAA,UACGgwE,GAAkByC,SAGrBzyE,EAAAA,GAAAA,cAAA,UAAKF,EAAK,sBACVE,EAAAA,GAAAA,cAAA,UAAKgwE,GAAkBU,IAEvB1wE,EAAAA,GAAAA,cAAA,UAAKF,EAAK,4BACVE,EAAAA,GAAAA,cAAA,UAAKgwE,GAAkBW,SAEzB3wE,EAAAA,GAAAA,cAAA,KAAGG,UAAWrK,IAAcgK,EAAK,mCAC3B,KChGZ,IAAgB,OAAS,uBAAuB,aAAa,uBAAuB,UAAY,wBC+JhG,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAE8xE,EAAM,cAAErgB,GAAkBzxD,EAAO2rE,kBACzC,MAAO,CACLmG,SACArgB,gBACA19C,eAAgB/T,EAAO2e,SAASC,MAAM7K,eACvC,GAPehU,EA7HsC60E,EACxD9gE,WACAg+D,SACArgB,gBACA19C,iBACAq1C,cAEA,MAAM,0BACJsrB,EAAyB,8BACzBG,IACEpzE,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACNoxE,EAAiCC,EAA+BC,IAAkC3uE,EAAAA,EAAAA,MAClGkwE,EAAmBC,IAAwBrtE,EAAAA,EAAAA,OAC3CkkB,EAAaC,EAAWC,IAAclnB,EAAAA,EAAAA,KAEvCowE,GAA2BrzE,EAAAA,EAAAA,KAAauqB,IAC5CwoD,EAA0B,CAAExoD,QAAO,GAClC,CAACwoD,IAEEO,GAAyBtzE,EAAAA,EAAAA,KAAY,KACzC4xE,IACAsB,GAA+B,GAC9B,CAACtB,EAAgCsB,IAE9BhB,GAAyBlyE,EAAAA,EAAAA,KAAauqB,IAC1C6oD,EAAqB7oD,GACrBL,GAAW,GACV,CAACA,IAEEqpD,GAA0BvzE,EAAAA,EAAAA,KAAY,KAC1CozE,OAAqBx6E,GACrBuxB,GAAY,GACX,CAACA,IAcJ,IAAwBwoD,EA6CxB,IAxDA/1E,EAAAA,EAAAA,KAAU,KACHkzD,EAAcprD,QACjB+iD,GACF,GACC,CAACA,EAASqI,KAEbv6C,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAgDLqI,EAAcprD,OAEnB,OACEnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,2BACV2D,KAAK,OACL+F,QAAM,EACNk7C,QAAM,EACNvkD,QAAS4wE,GAERtxE,EAAK,oCAERE,EAAAA,GAAAA,cAAA,KAAGG,WAAW+F,EAAAA,GAAAA,GAAe,4BAA6BpQ,GAAAA,YACvDgK,EAAK,gCA5DUsyE,EA+DJ7iB,EA7DhBvvD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,4BAA4BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACjEyH,EAAK,qBAGPsyE,EAAcxyE,KAKrB,SAAuByyE,GACrB,MAAMhJ,EAAUuG,EAAOyC,GACjBvpD,GAAMxC,EAAAA,EAAAA,MAAYE,MAAM1B,KAAKukD,EAAQx8C,OAE3C,OACE7sB,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAK6kE,EAAQr/C,KACbngB,QAAM,EACNk7C,QAAM,EACNmB,eAAgB,CAAC,CACf9lD,MAAO,YACP0D,KAAM,OACNw6B,aAAa,EACbu0B,QAASA,KACPigB,EAAyBzJ,EAAQr/C,KAAK,IAI1CxpB,QAASA,IAAMmxE,EAAuBtI,EAAQr/C,OAE9ChqB,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAACpd,UAAWrK,GAAAA,OAAe0nB,KAAMsL,EAAKtsB,KAAK,OAAOqV,eAAgBA,EAAgB4L,WAAS,IAClGzd,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCAAgCkG,IAAI,QACjDrG,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAQgoD,EAAAA,GAAAA,IAAoBroD,EAA2B,IAArBupE,EAAQkH,aACzDznD,GAAO9oB,EAAAA,GAAAA,cAACgiD,GAAAA,EAAa,CAAC7hD,UAAWrK,GAAAA,MAAcmsD,KAAMn5B,IACtD9oB,EAAAA,GAAAA,cAAA,QAAMG,WAAW+F,EAAAA,GAAAA,GAAe,WAAY,QAAS,QAASpQ,GAAAA,WAC3DuzE,EAAQz8C,OAAO,KAAGy8C,EAAQoJ,QAAQ,KAAGpJ,EAAQmG,UAEhDxvE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYkpE,EAAQqH,GAAG,IAAErH,EAAQsH,SAIzD,MAqBI3wE,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQkyE,EACR/xE,QAASiyE,EACTjxE,MAAON,EAAK,mCACZqF,KAAMrF,EAAK,yBACXksB,eAAgB+mD,EAChBr0C,sBAAoB,IAEtB1+B,EAAAA,GAAAA,cAACuyE,GAAqB,CAACtzE,OAAQyqB,EAAaM,KAAM4oD,EAAmBxzE,QAAS4zE,IAC1E,KCpEV,IAAep1E,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACE0oB,OACE1B,KAAMyB,GAER2iD,SACE/iD,IAAK8sD,GACN,YACDztD,EAAW,cACX1H,GACEhgB,EAEJ,MAAO,CACLyoB,YACA0sD,aACA1tD,WAAYC,GAAaC,QACzBukC,iBAAiB14C,EAAAA,EAAAA,IAAexT,GAAQo1E,WAAW1oB,aACnD1sC,gBACD,GAnBejgB,EA5D8Bs1E,EAChD5sD,YACA0sD,aACA1tD,aACAykC,kBACAlsC,gBACA7e,SACAG,cAEA,MAAM,mBACJg0E,EAAkB,aAClBC,IACE9zE,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACNkmB,EAAQC,IAAa1gB,EAAAA,EAAAA,IAAS,KAErCnJ,EAAAA,EAAAA,KAAU,KACR+2E,EAAmB,CAAEE,MAAOrtD,GAAS,GACpC,CAACA,EAAQmtD,IAEZ,MAAMG,GAAqB15E,EAAAA,EAAAA,KAAQ,KACjC,MAAM25E,GAAsBntD,EAAAA,GAAAA,IAAO,IAC7Bd,GAAc,MACdykC,GAAmB,IACvBrkC,QAAQ8tD,GACDA,IAAc31D,IAAkBm1D,EAAWz9E,SAASi+E,MAG7D,OAAOzsD,EAAAA,EAAAA,IAAkBwsD,EAAqBjtD,EAAWN,GACtD2lC,MAAK,CAAC8nB,EAASC,KACd,MAAMn/C,GAAYlH,EAAAA,EAAAA,IAAgB/G,EAAUmtD,KAAa,GACnDE,GAAatmD,EAAAA,EAAAA,IAAgB/G,EAAUotD,KAAc,GAE3D,OAAOn/C,EAAUq/C,cAAcD,EAAW,GAC1C,GACH,CAACX,EAAY1tD,EAAYzH,EAAemI,EAAQ+jC,EAAiBzjC,IAE9DutD,GAAmBr0E,EAAAA,EAAAA,KAAa8zB,IACpC,MAAQh+B,GAAIk+E,EAAS,WAAE3/B,GAAevtB,EAAUgN,IAAW,CAAC,EACvDkgD,GAAc3/B,IAGnBu/B,EAAa,CAAEI,YAAW3/B,eAC1B10C,IAAS,GACR,CAACi0E,EAAcj0E,EAASmnB,IAE3B,OACEvmB,EAAAA,GAAAA,cAAConB,GAAAA,EAAgB,CACfnoB,OAAQA,EACRooB,cAAeksD,EACf1tD,kBAAmB/lB,EAAK,0BACxBmmB,OAAQA,EACRqB,eAAgBpB,EAChBqB,mBAAoBusD,EACpB10E,QAASA,GACT,KC6DN,IAAexB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACE+mB,OACEC,KAAMivD,GAERvtD,OACE1B,KAAMkvD,GAER9K,SAAS,IACP/iD,GAEFwN,aACEC,WAAYF,IAEZ51B,EAEJ,MAAO,CACLi2E,aACAC,aACAf,WAAY9sD,EACZuN,gBACD,GAtBe71B,EAhH2Co2E,EAC7DriE,WACAs1C,UACA6sB,aACAC,aACAf,aACAv/C,oBAEA,MAAM,eAAEwgD,IAAmB30E,EAAAA,EAAAA,MAErBO,GAAOC,EAAAA,EAAAA,MACNo0E,EAAsBC,EAAoBC,IAAuB3xE,EAAAA,EAAAA,KAClE4xE,GAAqB70E,EAAAA,EAAAA,KAAag0E,IACtCS,EAAe,CAAET,aAAY,GAC5B,CAACS,KAEJl/D,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGV,MAAMqtB,GAAuB16E,EAAAA,EAAAA,KAAQ,IAC5Bo5E,EAAW7kC,QAAO,CAACC,EAAKolC,KAC7B,MACMj2D,GADYhf,EAAAA,EAAAA,IAASi1E,GACFO,EAAWP,QAAap7E,EAC3Cm8E,EAAeh3D,IAASA,EAAKsX,cAAe2/C,EAAAA,EAAAA,IAAgBj3D,GAMlE,OAJIg3D,IACFnmC,EAAIolC,GAAae,GAGZnmC,CAAG,GACT,CAAC,IACH,CAAC4kC,EAAYe,IA0ChB,OACEh0E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,6CAA6CkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACjFyH,EAAK,sBAIVE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACZ8yE,GAAY9uE,OACXnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBACZ8yE,EAAYrzE,KAAI,CAAC6zE,EAAW9zD,IApDzC,SAAuB8zD,EAAmB9zD,EAAW+0D,GACnD,MAAMC,GAAYn2E,EAAAA,EAAAA,IAASi1E,GACrBj2D,EAAOm3D,EAAYX,EAAWP,QAAap7E,EAC3C+F,EAAQu2E,OAAoCt8E,EAAxB07E,EAAWN,GAC/BmB,EAAap3D,GAAQpf,EAErB+B,GAAY+F,EAAAA,GAAAA,GAChB,wDACAyuE,EAAY,UAAY,SAGpBE,EAAmBN,EAAqBd,GAE9C,OACEzzE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKivE,EACLtzE,UAAWA,EACX0J,QAAM,EACNk7C,QAAM,EACNmB,eAAgB,CAAC,CACf9lD,MAAO,UACP0D,KAAM,SACN+uD,QAASA,KACPyhB,EAAmBb,EAAU,IAGjCx9E,MAAQ,SA0B6D,EA1BpC0pB,GAAKm1D,EAAAA,UAEtC90E,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAAC/gB,KAAK,SAASghB,KAAMA,EAAMpf,KAAMA,IACxC4B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAekG,IAAI,QAC/BuuE,GAAc50E,EAAAA,GAAAA,cAACgiD,GAAAA,EAAa,CAACC,KAAM2yB,IACnCp3D,GAAMsX,aACL90B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBAAgBkG,IAAI,SAAQmvB,EAAAA,GAAAA,IAA0B9B,EAAelW,EAAKsX,cAE1F+/C,GAAqB70E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAmBkG,IAAI,QAAO,IAAEwuE,IAI7E,CAc+CE,CAActB,EAAW9zD,MAE5DszD,IAAeA,EAAW9uE,OAC5BnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aAAakG,IAAI,QAAQvG,EAAK,cAE7CE,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,CAACx2C,IAAI,cAKnBxE,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,SAAO,EACPvnB,QAAS4zE,EACT3wE,UAAW3D,EAAK,iBAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAEfH,EAAAA,GAAAA,cAACmzE,GAAc,CACbl0E,OAAQk1E,EACR/0E,QAASi1E,IAEP,K,2BCxHV,MAoDA,IAAez2E,EAAAA,EAAAA,KApD4Bo3E,EACzCpjE,WAAUs1C,UAASkH,qBAEnB,MAAMtuD,GAAOC,EAAAA,EAAAA,KAOb,OALAiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACi1E,GAAAA,EAAuB,CACtBtxC,OAAQs1B,GAAAA,EAAAA,KACRic,WAAYC,GACZ34E,KAAM,IACN2D,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiCkG,IAAI,SAC/CqX,EAAAA,GAAAA,GAAW5d,EAAK,uBAAwB,CAAC,SAI9CE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,OAELtD,QAASA,IAAM4tD,EAAeS,EAAAA,GAAAA,6BAE7B/uD,EAAK,mBAERE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,eAELtD,QAASA,IAAM4tD,EAAeS,EAAAA,GAAAA,eAE7B/uD,EAAK,oBAERE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,QAELtD,QAASA,IAAM4tD,EAAeS,EAAAA,GAAAA,oCAE7B/uD,EAAK,sBAGN,I,4BC9CV,MAiEA,IAAelC,EAAAA,EAAAA,KA/D4Bw3E,EACzCxjE,WACAs1C,UACAh+B,QACAurC,YACA4gB,+BACAC,mBACA3wB,cAAc,mBACdgJ,OACAn8B,cACA+jD,aACArmD,eAEA,MAAOsmD,EAAiBC,IAAsBjwE,EAAAA,EAAAA,IAAiB,KACxDkwE,EAAoBC,IAAyBnwE,EAAAA,EAAAA,KAAS,GAEvDqsB,GAAepyB,EAAAA,EAAAA,KAAam2E,IAC5BN,GAAoBM,IAAgBN,EACtCG,EApBuB,6BAsBvBvmD,EAAS0mD,EACX,GACC,CAAC1mD,EAAUomD,IAERO,GAAmBp2E,EAAAA,EAAAA,KAAY,KAC/B81E,GACFA,IAEFE,EAAmB,GAAG,GACrB,CAACF,IAEEz1E,GAAOC,EAAAA,EAAAA,KAOb,OALAiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gDACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAAC81E,GAAAA,EAAc,CAACC,OAAK,EAACC,kBAAmBN,KAG3C11E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACi2E,GAAAA,EAAY,CACX/sD,MAAOssD,GAAmBtsD,EAC1BykC,KAAMA,EACNhJ,YAAaA,EACb0wB,6BAA8BA,EAC9B7jD,YAAaA,GAAe1xB,EAAK,QACjCy1E,WAAYM,EACZphB,UAAWA,EACXuhB,kBAAmBN,EACnBQ,iBAAkBtkE,EAClBukE,2BAA4BR,EAC5BzmD,SAAU2C,KAGV,IClCV,IAAej0B,EAAAA,EAAAA,KAhC0Bw4E,EACvCxkE,WAAUs1C,UAASmvB,cAEnB,MAAMv2E,GAAOC,EAAAA,EAAAA,KAOb,OALAiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACi1E,GAAAA,EAAuB,CACtBtxC,OAAQs1B,GAAAA,EAAAA,KACRic,WAAYC,GACZ34E,KAAM,IACN2D,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiCkG,IAAI,QAC/CvG,EAAK,+BAIVE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAAS61E,GAAUv2E,EAAK,kCAE9B,I,gBCRV,MAiIA,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAqB,CAACC,GAAUgG,WAC3C,CACLwyE,eAAeC,EAAAA,EAAAA,IAAoBz4E,EAAiB,UAATgG,EAAmB,KAAO,SAFrDjG,EA/H0C24E,EAC5DF,gBACA10E,OAAO,OACP6yD,YACAvrC,QACAy7B,cACA8xB,gBACAlB,aACArmD,WACAtd,WACAs1C,cAGA,MAAM3yB,GAAWp5B,EAAAA,EAAAA,IAAyB,OACpC,SAAEwH,IAAaC,EAAAA,EAAAA,MAEf8zE,EAAsB/zE,EAAW,IAAM,KACtCsH,EAAO0sE,IAAYnxE,EAAAA,EAAAA,IAAiB,KACpCoxE,EAAgBC,EAAoBC,IAAwBp0E,EAAAA,EAAAA,IAAQ,IAE3ErG,EAAAA,EAAAA,KAAU,KACHgM,EAAAA,IACHzL,YAAW,KACT23B,EAASj5B,QAAS+5B,OAAO,GACxBqhD,EACL,GACC,CAACA,IAEJ,MAAMK,GAAoBt3E,EAAAA,EAAAA,KAAa0G,IACjC+iB,GAASqsD,GACXA,IAGFoB,EAASxwE,EAAEgR,OAAOlN,MAAM,GACvB,CAACsrE,EAAYrsD,IAYV8tD,GAAav3E,EAAAA,EAAAA,KAAY,KAC7ByvB,GAAU,GACT,CAACA,IAEE+nD,GAAoBx3E,EAAAA,EAAAA,KAAY,KACpCq3E,IACA5nD,GAAU,GACT,CAACA,EAAU4nD,IAERh3E,GAAOC,EAAAA,EAAAA,KAOb,OALAiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACk3E,GAAAA,EAAuB,CAACp0C,QAASwzC,EAAe95E,KAnEvC,IAmEwD2D,UAAU,2BAG9EH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,QAAMsS,OAAO,GAAG4c,SAjCA/oB,IACpBA,EAAEgK,iBAEGokB,EAASj5B,SAId4zB,EAASjlB,EAAM,GA2BTjK,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRlsB,IAAK8qB,EACLtqB,MAAOA,EACP4oB,UAAWjxB,EACXyrB,MAAOs3B,EACPz7B,MAAOA,EACPhf,SAAU6sE,IAGX9sE,EACCjK,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACuB,KAAK,SAAS6yD,UAAWA,EAAW5qD,QAAM,GAAE/J,EAAK,aAEzDE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLE,QAAM,EACNk0D,UAAWA,EACX5qD,QAAM,EACNrJ,QAASi2E,EAAgBI,EAAqBG,GAE7Cl3E,EAAK,mBAIX22E,GACCz2E,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UAAU,SACVlB,OAAQ23E,EACRx2E,MAAON,EAAK,wBACZV,QAAS03E,IAERp5D,EAAAA,GAAAA,GAAW5d,EAAK,4BAA6B,CAAC,KAAM,oBACrDE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,SACNuJ,QAAM,EACNtJ,QAAM,EACNJ,UAAU,wBACVK,QAASy2E,GAERn3E,EAAK,kBAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,UACNuJ,QAAM,EACNtJ,QAAM,EACNJ,UAAU,wBACVK,QAASs2E,GAERh3E,EAAK,cAMZ,KC7GV,IAAelC,EAAAA,EAAAA,KAnCoCu5E,EACjDvlE,WAAUs1C,UAASkH,qBAEnB,MAAMtuD,GAAOC,EAAAA,EAAAA,KAEPsP,GAAc5P,EAAAA,EAAAA,KAAY,KAC9B2uD,EAAeS,EAAAA,GAAAA,QAAwB,GACtC,CAACT,IAOJ,OALAp5C,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAAC+4D,GAAAA,EAAY,CACXv8D,KAAM46E,EAAAA,IACNzzC,OAAQs1B,GAAAA,EAAAA,gBACR94D,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiCkG,IAAI,QAC/CvG,EAAK,wCAIVE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAAS6O,GAAcvP,EAAK,+CAElC,ICoDV,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACjC,CACLw4E,eAAeC,EAAAA,EAAAA,IAAoBz4E,EAAQ,MAC3Cu5E,WAAYv5E,EAAOw5E,cAAcC,0BAHjB15E,EApEsC25E,EACxDlB,gBACAe,aACA5iB,YACAvrC,QACAqsD,aACArmD,WACAtd,WACAs1C,cAGA,MAAM3yB,GAAWp5B,EAAAA,EAAAA,IAAyB,OACpC,SAAEwH,IAAaC,EAAAA,EAAAA,MACf8zE,EAAsB/zE,EAAW,IAAM,KAEtCsH,EAAO0sE,IAAYnxE,EAAAA,EAAAA,IAAiB,KAE3CnJ,EAAAA,EAAAA,KAAU,KACHgM,EAAAA,IACHzL,YAAW,KACT23B,EAASj5B,QAAS+5B,OAAO,GACxBqhD,EACL,GACC,CAACA,IAEJ,MAAM52E,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGV,MAAM6vB,GAAoBt3E,EAAAA,EAAAA,KAAa0G,IACjC+iB,GAASqsD,GACXA,IAGF,MAAMlJ,EAAWlmE,EAAEgR,OAAOlN,MAAMo6B,MAAM,EAAGgzC,GAErChL,EAASloE,SAAWkzE,GACtBnoD,EAASm9C,GAGXsK,EAAStK,GACTlmE,EAAEgR,OAAOlN,MAAQoiE,CAAQ,GACxB,CAACkJ,EAAY8B,EAAYnuD,EAAOgG,IAEnC,OACElvB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACk3E,GAAAA,EAAuB,CAACp0C,QAASwzC,EAAe95E,KApDvC,IAoDwD2D,UAAU,2BAG9EH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACR1rB,MAAOA,EACPR,IAAK8qB,EACL1B,UAAU,UACVxF,MAAOvtB,EAAK,iBACZopB,MAAOA,EACPhf,SAAU6sE,IAEXtiB,GAAaz0D,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,OAEpB,KCkTV,IAAep9C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAM,IAAuBA,EAAOw5E,iBADnBz5E,EAvX6B45E,EAC/CxpB,gBACAmQ,cACAtQ,QACAH,OACA8G,YACAvrC,QACAquD,yBACAvd,WACApoD,WACAw8C,iBACAlH,cAEA,MAAM,eACJwwB,EAAc,cACdC,EAAa,gBACbC,EAAe,oBACfC,EAAmB,sBACnBC,EAAqB,cACrBC,IACEx4E,EAAAA,EAAAA,OAEJlD,EAAAA,EAAAA,KAAU,KACJk7E,IACEtpB,IAAkBY,EAAAA,GAAAA,sBACpBT,EAAeS,EAAAA,GAAAA,2BACNZ,IAAkBY,EAAAA,GAAAA,oBAC3BT,EAAeS,EAAAA,GAAAA,wBAEnB,GACC,CAACZ,EAAeG,EAAgBmpB,IAEnC,MAAMS,GAAoBv4E,EAAAA,EAAAA,KAAY,KACpCu6D,EAAS,CAAEp4D,KAAM,UACjBwsD,EAAeS,EAAAA,GAAAA,iBAAiC,GAC/C,CAACmL,EAAU5L,IAER6pB,GAAoBx4E,EAAAA,EAAAA,KAAawK,IACrC+vD,EAAS,CAAEp4D,KAAM,cAAemsD,QAAS9jD,IACzCmkD,EAAeS,EAAAA,GAAAA,wBAAwC,GACtD,CAACmL,EAAU5L,IAER8pB,GAA2Bz4E,EAAAA,EAAAA,KAAY,KAC3C2uD,EAAeS,EAAAA,GAAAA,qBAAqC,GACnD,CAACT,IAEE+pB,GAAwB14E,EAAAA,EAAAA,KAAawK,IACzC+vD,EAAS,CAAEp4D,KAAM,UAAWmsD,QAAS9jD,IACrCmkD,EAAeS,EAAAA,GAAAA,sBAAsC,GACpD,CAACmL,EAAU5L,IAERgqB,GAAyB34E,EAAAA,EAAAA,KAAawK,IAC1C+vD,EAAS,CAAEp4D,KAAM,WAAYmsD,QAAS9jD,IACtCytE,EAAe,IACV5pB,EACHF,MAAO3jD,EACPouE,UAAWA,KACTjqB,EAAeS,EAAAA,GAAAA,qBAAqC,GAEtD,GACD,CAACmL,EAAU5L,EAAgBN,EAAO4pB,IAE/BY,GAA8B74E,EAAAA,EAAAA,KAAawK,IAC/C+vD,EAAS,CAAEp4D,KAAM,qBAAsBmsD,QAAS9jD,IAChD0tE,EAAc,CACZlqB,gBAAiBxjD,EACjBouE,UAAWA,KACTjqB,EAAeS,EAAAA,GAAAA,uBAAuC,GAExD,GACD,CAAC8oB,EAAe3d,EAAU5L,IAEvBmqB,GAA0B94E,EAAAA,EAAAA,KAAawK,IAC3C+vD,EAAS,CAAEp4D,KAAM,cAAemsD,QAAS9jD,IACzCmkD,EAAeS,EAAAA,GAAAA,2BAA2C,GACzD,CAACmL,EAAU5L,IAERoqB,GAA8B/4E,EAAAA,EAAAA,KAAY,KAC9C2uD,EAAeS,EAAAA,GAAAA,wBAAwC,GACtD,CAACT,IAEEqqB,GAA2Bh5E,EAAAA,EAAAA,KAAawK,IAC5C+vD,EAAS,CAAEp4D,KAAM,UAAWmsD,QAAS9jD,IACrCytE,EAAe,IACV5pB,EACHH,KAAM1jD,EACNouE,UAAWA,KACTjqB,EAAeS,EAAAA,GAAAA,qBAAqC,GAEtD,GACD,CAACmL,EAAU5L,EAAgBN,EAAO4pB,IAE/BgB,GAAgBj5E,EAAAA,EAAAA,KAAawK,IACjC8tE,EAAc,CACZtqB,gBAAiBxjD,EACjBouE,UAAWA,KACTjqB,EAAeS,EAAAA,GAAAA,QAAwB,GAEzC,GACD,CAACkpB,EAAe3pB,IAEbuqB,GAAqCl5E,EAAAA,EAAAA,KAAawK,IACtD+vD,EAAS,CAAEp4D,KAAM,qBAAsBmsD,QAAS9jD,IAChD0tE,EAAc,CACZlqB,gBAAiBxjD,EACjBouE,UAAWA,KACTjqB,EAAeS,EAAAA,GAAAA,mBAAmC,GAEpD,GACD,CAAC8oB,EAAe3d,EAAU5L,IAEvBwqB,GAAsBn5E,EAAAA,EAAAA,KAAawK,IACvC+vD,EAAS,CAAEp4D,KAAM,WAAYmsD,QAAS9jD,IACtC4tE,EAAoB,IACf/pB,EACHF,MAAO3jD,EACPouE,UAAWA,KACTjqB,EAAeS,EAAAA,GAAAA,qBAAqC,GAEtD,GACD,CAACmL,EAAU5L,EAAgBN,EAAO+pB,IAE/BgB,GAAkBp5E,EAAAA,EAAAA,KAAaiyB,IACnComD,EAAsB,CAAEpmD,QAAO,GAC9B,CAAComD,IAEEh4E,GAAOC,EAAAA,EAAAA,KAEb,OAAQkuD,GACN,KAAKY,EAAAA,GAAAA,cACH,OACE7uD,EAAAA,GAAAA,cAACo2E,GAAkB,CACjBC,QAAS2B,EACTpmE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,iBACH,OACE7uD,EAAAA,GAAAA,cAAC84E,GAAqB,CACpBn0B,YAAa7kD,EAAK,uBAClB0xB,YAAa1xB,EAAK,YAClBovB,SAAU+oD,EACVrmE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,wBACH,OACE7uD,EAAAA,GAAAA,cAAC84E,GAAqB,CACpBxD,iBAAkBxnB,EAAMJ,SACxB/I,YAAa7kD,EAAK,yBAClB0xB,YAAa1xB,EAAK,YAClBovB,SAAUgpD,EACVtmE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,qBACH,OACE7uD,EAAAA,GAAAA,cAACw2E,GAA0B,CACzB1yE,KAAK,OACL6gD,YAAa7kD,EAAK,2BAClBovB,SAAUipD,EACVvmE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,sBACH,OACE7uD,EAAAA,GAAAA,cAACw2E,GAA0B,CACzB1yE,KAAK,QACLlC,KAAK,QACL6yD,UAAWA,EACXvrC,MAAOA,EACPqsD,WAAYqC,EACZjzB,YAAa7kD,EAAK,sBAClB22E,eAAa,EACbvnD,SAAUkpD,EACVxmE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,0BACH,OACE7uD,EAAAA,GAAAA,cAACw3E,GAAsB,CACrB/iB,UAAWA,EACXvrC,MAAOA,EACPqsD,WAAYqC,EACZ1oD,SAAU2pD,EACVjnE,SAAUA,GAAYwsD,IAAgBvP,EAAAA,GAAAA,qBACtC3H,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,qBACH,OACE7uD,EAAAA,GAAAA,cAACm3E,GAA4B,CAC3B/oB,eAAgBA,EAChBx8C,SAAUA,EACVs1C,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,aACH,OACE7uD,EAAAA,GAAAA,cAACg1E,GAAoB,CACnB5mB,eAAgBA,EAChBx8C,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,2BACH,OACE7uD,EAAAA,GAAAA,cAAC84E,GAAqB,CACpBrkB,UAAWA,EACXvrC,MAAOA,EACPqsD,WAAYqC,EACZjqB,KAAMA,EACNz+B,SAAUopD,EACV1mE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,uBACH,OACE7uD,EAAAA,GAAAA,cAAC84E,GAAqB,CACpBn0B,YAAa7kD,EAAK,+BAClBovB,SAAUqpD,EACV3mE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,2BACH,OACE7uD,EAAAA,GAAAA,cAAC84E,GAAqB,CACpBxD,iBAAkBxnB,EAAMJ,SACxB/I,YAAa7kD,EAAK,yBAClBovB,SAAUspD,EACV5mE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,wBACH,OACE7uD,EAAAA,GAAAA,cAACw2E,GAA0B,CACzB/hB,UAAWA,EACXvrC,MAAOA,EACPqsD,WAAYqC,EACZ9zE,KAAK,OACL6gD,YAAa7kD,EAAK,2BAClBovB,SAAUupD,EACV7mE,SAAUA,GAAYwsD,IAAgBvP,EAAAA,GAAAA,qBACtC3H,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,aACH,OACE7uD,EAAAA,GAAAA,cAAC84E,GAAqB,CACpBrkB,UAAWA,EACXvrC,MAAOA,EACPqsD,WAAYqC,EACZjqB,KAAMA,EACNz+B,SAAUwpD,EACV9mE,SAAUA,EACVs1C,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,kCACH,OACE7uD,EAAAA,GAAAA,cAAC84E,GAAqB,CACpBrkB,UAAWA,EACXvrC,MAAOA,EACPqsD,WAAYqC,EACZjqB,KAAMA,EACNz+B,SAAUypD,EACV/mE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,mBACH,OACE7uD,EAAAA,GAAAA,cAACw2E,GAA0B,CACzB1yE,KAAK,QACLlC,KAAK,QACL+iD,YAAa7kD,EAAK,sBAClBovB,SAAU0pD,EACVhnE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,uBACH,OACE7uD,EAAAA,GAAAA,cAACw3E,GAAsB,CACrB/iB,UAAWA,EACXvrC,MAAOA,EACPqsD,WAAYqC,EACZ1oD,SAAU2pD,EACVjnE,SAAUA,GAAYwsD,IAAgBvP,EAAAA,GAAAA,qBACtC3H,QAASA,IAIf,QACE,OAAiB,K,gBCpRvB,SAAS6xB,GAA0Bj7E,EAAqB6uE,GACtD,MAAM,QAAE1D,GAAYnrE,EAAO2e,SAC3B,OAAQkwD,GACN,KAAK9d,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAOoa,EAAQn0C,YACjB,KAAK+5B,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,OAAOoa,EAAQY,SACjB,KAAKhb,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,OAAOoa,EAAQc,aACjB,KAAKlb,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BACH,OAAOoa,EAAQsB,UACjB,KAAK1b,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,OAAOoa,EAAQwB,SACjB,KAAK5b,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAOoa,EAAQgB,SACjB,KAAKpb,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,mCACH,OAAOoa,EAAQkB,cACjB,KAAKtb,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAOoa,EAAQoB,WAIrB,CAEA,UAAezsE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAU6uE,aACF,CACL7uD,cAAehgB,EAAOggB,cACtBrB,SAAUs8D,GAA0Bj7E,EAAQ6uE,MAJ9B9uE,EA1HsDm7E,EACxEC,cACAtM,SACA/6D,WACAw8C,iBACAlH,UACAppC,gBACArB,eAEA,MAAM,mBAAEy8D,IAAuB35E,EAAAA,EAAAA,MAEzBO,GAAOC,EAAAA,EAAAA,KAEPo5E,GAAqBt/E,EAAAA,EAAAA,KAAQ,IAC5B4iB,EAIDw8D,EACK,IAAIx8D,EAAS2xD,gBAAiB3xD,EAAS4xD,cAEvC,IAAI5xD,EAAS6xD,gBAAiB7xD,EAAS8xD,cANvC,IAQR,CAAC0K,EAAax8D,KACVmrC,EAAawxB,IAAkB5zE,EAAAA,EAAAA,IAAiB,KAChD6zE,EAAeC,IAAoB9zE,EAAAA,EAAAA,KAAkB,IACrD+zE,EAAuBC,IAA4Bh0E,EAAAA,EAAAA,IAAmB2zE,GAEvE3b,GAAsBC,EAAAA,GAAAA,IAA8B9E,EAAAA,KACpD+E,GAA2BD,EAAAA,GAAAA,IAA8BE,EAAAA,KACzDC,GAAe/jE,EAAAA,EAAAA,KAAQ,KAE3B,MAAMkrB,GAAYuB,EAAAA,EAAAA,MAAYzB,MAAMC,KAE9B2B,GAAUJ,EAAAA,GAAAA,IAAO,IAAIm3C,GAAuB,MAAOE,GAA4B,KAClF/3C,QAAQrnB,IACP,MAAMF,EAAO2mB,EAAUzmB,GAEvB,OAAOF,IAAQI,EAAAA,EAAAA,IAASJ,EAAK7I,KAAO6I,EAAK7I,KAAOuoB,CAAa,IAGjE,OAAOuI,EAAAA,GAAAA,IAAO,IACT8yD,MACApyD,EAAAA,EAAAA,IAAkBjnB,EAAM2mB,EAAS1B,EAAW6iC,IAC/C,GACD,CAAC4V,EAAqBE,EAA0Byb,EAAoBr5E,EAAM8nD,EAAa9pC,IAEpF27D,GAAiCh6E,EAAAA,EAAAA,KAAawK,IAClDuvE,EAAyBvvE,GACzBqvE,GAAiB,EAAK,GACrB,IAEGznD,GAAepyB,EAAAA,EAAAA,KAAY,KAC/By5E,EAAmB,CACjBrK,WAAYnC,GAAcC,GAC1BsM,YAAa3/E,QAAQ2/E,GACrBS,YAAaH,IAGfnrB,EAAeS,EAAAA,GAAAA,QAAwB,GACtC,CAACoqB,EAAaM,EAAuBnrB,EAAgBue,EAAQuM,IAOhE,OALAlkE,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAC25E,GAAAA,EAAM,CACLC,QAAShc,GAAgB,GACzBxB,YAAamd,EACbld,YAAazU,EACbiyB,kBAAiC/5E,EAAdm5E,EAAmB,yBAAiC,yBACvEa,cAAc,0BACdxd,oBAAqBmd,EACrBjd,eAAgB4c,IAGlBp5E,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASsxD,EACT74E,QAASqxB,EACTpuB,UAAyB3D,EAAdm5E,EAAmB,cAAsB,eAEpDj5E,EAAAA,GAAAA,cAAA,KAAGG,UAAU,sBAEX,KCvDV,IAAevC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,mBAAEmiD,EAAkB,OAAE85B,GAAWj8E,EAEvC,MAAO,CACLmiD,qBACA+5B,iBAAkBD,GAAQE,gBAC3B,GAPep8E,EA5CqCq8E,EACvDtoE,WACAquC,qBACA+5B,mBACA9yB,cAEA,MAAM,mBAAEizB,IAAuB56E,EAAAA,EAAAA,OAE/ByV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGV,MAAMpf,GAAUjuC,EAAAA,EAAAA,KAAQ,KACrBomD,GAAsB,IAAIt6B,QAAQy0D,IAAuBA,EAAkBC,aACzEz6E,KAAKw6E,IAAiB,CACrB/sD,MACErtB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACyhD,GAAAA,EAAmB,CAACX,SAAUs5B,EAAkBt5B,SAAUb,mBAAoBA,IAC9Em6B,EAAkBh6E,OAGvB6J,MAAOmwE,EAAkBt5B,SAASw5B,cAErC,CAACr6B,IAEE9S,GAAe1tC,EAAAA,EAAAA,KAAaqhD,IAChCq5B,EAAmB,CACjBr5B,SAAU,CAAEw5B,SAAUx5B,IACtB,GACD,CAACq5B,IAEJ,OACEn6E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wEACbH,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACT77C,KAAK,0BACLsjB,QAASA,EACTw4B,SAAU0Z,EACV9vE,SAAUijC,IAER,K,gBC1CV,MAiCA,IAAevvC,EAAAA,EAAAA,KAjC6B28E,EAC1C3oE,WAAUs1C,UAASmvB,cAEnB,MAAMv2E,GAAOC,EAAAA,EAAAA,KAIb,OAFAiV,EAAAA,GAAAA,GAAe,CAAEpD,WAAUqD,OAAQiyC,IAGjClnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iDACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACi1E,GAAAA,EAAuB,CACtBtxC,OAAQs1B,GAAAA,EAAAA,KACRic,WAAYC,GACZ34E,KAAMg+E,EAAAA,IACNr6E,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,4BAA4BkG,IAAI,QAAO,oIAIpDrG,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiCkG,IAAI,QAAO,uGAK3DrG,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAAS61E,GAAUv2E,EAAK,oBAE9B,ICcV,IAAelC,EAAAA,EAAAA,KA1C+B68E,EAC5C7oE,WAAUs1C,UAASkH,qBAEnB,MAAMtuD,GAAOC,EAAAA,EAAAA,KAIb,OAFAiV,EAAAA,GAAAA,GAAe,CAAEpD,WAAUqD,OAAQiyC,IAGjClnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iDACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAACi1E,GAAAA,EAAuB,CACtBtxC,OAAQs1B,GAAAA,EAAAA,KACRic,WAAYC,GACZ34E,KAAM,IACN2D,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiCkG,IAAI,QAAO,+BAK3DrG,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,OAELtD,QAASA,IAAM4tD,EAAeS,EAAAA,GAAAA,gCAE7B/uD,EAAK,oBAERE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,eAELtD,QAASA,IAAM4tD,EAAeS,EAAAA,GAAAA,kBAE7B/uD,EAAK,sBAGN,ICPV,IAAelC,EAAAA,EAAAA,KAnCuC88E,EACpD9oE,WAAUs1C,cAEV,MAAMpnD,GAAOC,EAAAA,EAAAA,KAEP46E,GAAYl7E,EAAAA,EAAAA,KAAY,KAC5BynD,GAAQ,EAAK,GACZ,CAACA,IAIJ,OAFAlyC,EAAAA,GAAAA,GAAe,CAAEpD,WAAUqD,OAAQiyC,IAGjClnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iDACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAAC+4D,GAAAA,EAAY,CACXv8D,KAAMg+E,EAAAA,IACN72C,OAAQs1B,GAAAA,EAAAA,gBACR94D,UAAU,0BAGZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiCkG,IAAI,QAAO,oBAGzDrG,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiCkG,IAAI,QAAO,2EAK3DrG,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAASm6E,GAAY76E,EAAK,UAEhC,IC+KV,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAM,IAAuBA,EAAOqrE,YADnBtrE,EAnMgC+8E,EAClDzR,WACAlb,gBACAmQ,cACAl1C,QACAtX,WACA6iD,YACArG,iBACAysB,gBACA3zB,cAEA,MAAM,YACJ4zB,EAAW,cACXC,EAAa,iBACbC,EAAgB,mBAChBC,IACE17E,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,KAEPi4E,GAAoBv4E,EAAAA,EAAAA,KAAY,KACpCo7E,EAAc,IACdzsB,EAAeS,EAAAA,GAAAA,oBAAoC,GAClD,CAACT,EAAgBysB,IAEd5C,GAAoBx4E,EAAAA,EAAAA,KAAawK,IACrC4wE,EAAc5wE,GACdmkD,EAAeS,EAAAA,GAAAA,2BAA2C,GACzD,CAACT,EAAgBysB,IAEd3C,GAA2Bz4E,EAAAA,EAAAA,KAAY,KAC3Cq7E,EAAY,CAAE3R,aACd0R,EAAc,IACdzsB,EAAeS,EAAAA,GAAAA,wBAAwC,GACtD,CAACT,EAAgBysB,EAAe1R,EAAU2R,IAEvCxC,GAA8B74E,EAAAA,EAAAA,KAAay7E,IAC/CL,EAAc,KACdM,EAAAA,GAAAA,IAAeD,GAAiB7+C,MAAK,KACnC+xB,EAAeS,EAAAA,GAAAA,0BAA0C,IACxD,KACDmsB,EAAiB,CACf9xD,MAAOppB,EAAK,qCACZ,GACF,GACD,CAACA,EAAMsuD,EAAgBysB,EAAeG,IAEnCzC,GAA0B94E,EAAAA,EAAAA,KAAawK,IAC3C4wE,EAAc5wE,GACdmkD,EAAeS,EAAAA,GAAAA,8BAA8C,GAC5D,CAACT,EAAgBysB,IAEdnC,GAAgBj5E,EAAAA,EAAAA,KAAay7E,KACjCC,EAAAA,GAAAA,IAAeD,GAAiB7+C,MAAK,KACnC0+C,IACA3sB,EAAeS,EAAAA,GAAAA,QAAwB,IACtC,KACDmsB,EAAiB,CACf9xD,MAAOppB,EAAK,qCACZ,GACF,GACD,CAACi7E,EAAej7E,EAAMsuD,EAAgB4sB,IAEzC,OAAQ/sB,GACN,KAAKY,EAAAA,GAAAA,iBACH,OACE7uD,EAAAA,GAAAA,cAACu6E,GAAqB,CACpBlE,QAAS2B,EACTpmE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,yBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,oBACH,OACE7uD,EAAAA,GAAAA,cAACo7E,GAAoB,CACnB/F,8BAA4B,EAC5B1wB,YAAa7kD,EAAK,oBAClB0xB,YAAa1xB,EAAK,YAClBovB,SAAU+oD,EACVrmE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,yBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,2BACH,OACE7uD,EAAAA,GAAAA,cAACo7E,GAAoB,CACnB/F,8BAA4B,EAC5BC,iBAAkBnM,EAClBxkB,YAAa7kD,EAAK,uBAClB0xB,YAAa1xB,EAAK,YAClB20D,UAAWA,EACXvlC,SAAUgpD,EACVtmE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,yBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,wBACH,OACE7uD,EAAAA,GAAAA,cAAC06E,GAA+B,CAC9B9oE,SAAUA,EACVs1C,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,gBACH,OACE7uD,EAAAA,GAAAA,cAACy6E,GAAuB,CACtBrsB,eAAgBA,EAChBx8C,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,iBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,8BACH,OACE7uD,EAAAA,GAAAA,cAACo7E,GAAoB,CACnB/F,8BAA4B,EAC5BnsD,MAAOA,EACPqsD,WAAY0F,EACZt2B,YAAa7kD,EAAK,0CAClBovB,SAAUopD,EACV1mE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,yBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,0BACH,OACE7uD,EAAAA,GAAAA,cAACo7E,GAAoB,CACnB/F,8BAA4B,EAC5B1wB,YAAa7kD,EAAK,+BAClBovB,SAAUqpD,EACV3mE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,yBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,8BACH,OACE7uD,EAAAA,GAAAA,cAACo7E,GAAoB,CACnB/F,8BAA4B,EAC5BC,iBAAkBnM,EAClBxkB,YAAa7kD,EAAK,kDAClB20D,UAAWA,EACXvlC,SAAUgpD,EACVtmE,SAAUA,GAAY,CACpBi9C,EAAAA,GAAAA,yBACAr5D,SAAS4oE,GACXlX,QAASA,IAIf,KAAK2H,EAAAA,GAAAA,gBACH,OACE7uD,EAAAA,GAAAA,cAACo7E,GAAoB,CACnB/F,8BAA4B,EAC5BnsD,MAAOA,EAAQppB,EAAKopB,QAAS7wB,EAC7Bk9E,WAAY0F,EACZt2B,YAAa7kD,EAAK,0CAClBovB,SAAUwpD,EACV9mE,SAAUA,EACVs1C,QAASA,IAIf,QACE,OAAiB,KC5HvB,IAAetpD,EAAAA,EAAAA,KApEsBy9E,EACnChrC,aACAgF,YACAl1C,YACA4wC,sBACAvwC,cAEA,MAAMV,GAAOC,EAAAA,EAAAA,KAEPy6C,EAAenK,GAAYtM,WAAW,GAEtCu3C,GAAkB77E,EAAAA,EAAAA,KAAY,KAC9B+6C,GAAch6C,EAAQg6C,EAAa,GACtC,CAACA,EAAch6C,IAElB,GAAK6vC,GAAeA,EAAWtM,SAqC/B,OACE/jC,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPsb,QAAM,EACN5kD,WAAW+F,EAAAA,GAAAA,GAAe,iBAAkB/F,GAC5Cm5D,UAAW9e,EACXh6C,QAAS86E,GAtCb,WACE,GAAKjrC,EACL,OAAIA,EAAWyF,eAAiB0E,EAE5Bx6C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLoD,UAAW4sC,EAAWjwC,MACtBE,MAAM,cACN6b,MAAOrc,EAAKqc,OAEZnc,EAAAA,GAAAA,cAAC41C,GAAe,CACdvF,WAAYA,EACZ7zC,KAAM++E,EAAAA,IACNlmC,UAAWA,EACXtE,oBAAqBA,KAMzB/wC,EAAAA,GAAAA,cAACo1C,GAAAA,EAAa,CACZtS,QAAS0X,EACTh+C,KAAM++E,EAAAA,IACNn7E,MAAOiwC,EAAWjwC,MAClBi1C,UAAWA,EACXtE,oBAAqBA,EACrBgK,eAAa,EACbpK,sBAAoB,EACpB4E,cAAUl9C,GAIlB,CASKmjF,GACDx7E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SAASkwC,EAAWjwC,OACnCJ,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YAAYL,EAAK,2BAA4BuwC,EAAWlO,MAAO,OAEvE,IC9DTs5C,GAAwB,IAAM71E,EAAAA,GA+HpC,IAAehI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,KACFgtB,EAAAA,GAAAA,IAAKhtB,EAAO2e,SAASC,MAAO,CAC7B,wBACA,uBAEFg/D,YAAa59E,EAAOimC,SAAS0T,MAAMC,OACnCikC,kBAAmB79E,EAAOi5C,aAAaU,MAAMC,OAC7CZ,gBAAiBh5C,EAAOimC,SAAS8S,SACjCojC,gBAAiBn8E,EAAOi8E,QAAQE,gBAChCh6B,mBAAoBniD,EAAOmiD,sBAXbpiD,EA3GgC+9E,EAClDhqE,WACA8pE,cACAC,oBACA7kC,kBACAmjC,kBACA4B,wBACAjkC,qBACAqI,qBACAiH,UACAkH,qBAEA,MAAM,iBACJoI,EAAgB,eAChBslB,IACEv8E,EAAAA,EAAAA,MACEO,GAAOC,EAAAA,EAAAA,KAGPg8E,GAAqB5gF,EAAAA,EAAAA,IAAuB,OAC1Co9C,QAASQ,IAAiCP,EAAAA,GAAAA,IAAwB,CAAEC,QAASsjC,IAE/EC,GAAwBv8E,EAAAA,EAAAA,KAAaqjC,IACzCg5C,EAAe,CACb3oC,eAAgBrQ,EAAQqQ,gBACxB,GACD,CAAC2oC,IAEEG,GAA8Bx8E,EAAAA,EAAAA,KAAa4sE,IAC/C7V,EAAiB,CAAEqlB,sBAAuBxP,GAAW,GACpD,CAAC7V,IAEE0lB,GAAiCz8E,EAAAA,EAAAA,KAAa4sE,IAClD7V,EAAiB,CAAE5e,mBAAoBy0B,GAAW,GACjD,CAAC7V,IAEE2lB,GAActiF,EAAAA,EAAAA,KAAQ,IAC1B6hF,GAAe3lF,OAAOsiD,QAAOvtB,EAAAA,GAAAA,IAAKgsB,EAAiB4kC,KAClD,CAACA,EAAa5kC,IAOjB,OALA9hC,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,mBACZstB,QAASyuD,EACTtuD,QAAS0uD,IAEXj8E,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,wBACZstB,QAASwqB,EACTrqB,QAAS2uD,IAEXl8E,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,OAEVK,QAASA,IAAM4tD,EAAeS,EAAAA,GAAAA,aAC9B/qD,KAAK,SAEJhE,EAAK,0BACL67E,GAAqB37E,EAAAA,GAAAA,cAAA,QAAMG,UAAU,gCAAgCw7E,EAAkBx3E,SAEzF81E,GACCj6E,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,0BAEVK,QAASA,IAAM4tD,EAAeS,EAAAA,GAAAA,gBAE9B7uD,EAAAA,GAAAA,cAACyhD,GAAAA,EAAmB,CAClBX,SAAUm5B,EACV95E,UAAU,2BACV3D,KAAMi/E,GACNx7B,mBAAoBA,IAEtBjgD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SAASL,EAAK,uBAIlCq8E,GACCn8E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAC5DyH,EAAK,+BAERE,EAAAA,GAAAA,cAAA,OAAKyJ,IAAKsyE,GACPI,EAAYv8E,KAAKywC,GAChBrwC,EAAAA,GAAAA,cAACq7E,GAAc,CACb72E,IAAK6rC,EAAW96C,GAChB86C,WAAYA,EACZU,oBAAqBgI,EACrBv4C,QAASw7E,OAIfh8E,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiCkG,IAAI,SAC/CqX,EAAAA,GAAAA,GAAW5d,EAAK,mBAAoB,CAAC,YAIxC,KC3DV,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,KACFgtB,EAAAA,GAAAA,IAAKhtB,EAAO2e,SAASC,MAAO,CAC7B,6BAEFi/D,kBAAmB79E,EAAOi5C,aAAaU,MAAMC,OAC7CZ,gBAAiBh5C,EAAOimC,SAAS8S,YAPnBh5C,EA7DmCu+E,EACrDxqE,WACA+pE,oBACA7kC,kBACAulC,2BACAn1B,cAEA,MAAM,eAAE40B,EAAc,iBAAEtlB,IAAqBj3D,EAAAA,EAAAA,MACvCO,GAAOC,EAAAA,EAAAA,KAGPg8E,GAAqB5gF,EAAAA,EAAAA,IAAuB,OAC1Co9C,QAASQ,IAAiCP,EAAAA,GAAAA,IAAwB,CAAEC,QAASsjC,KAErF/mE,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGV,MAAM80B,GAAwBv8E,EAAAA,EAAAA,KAAaqjC,IACzCg5C,EAAe,CACb3oC,eAAgBrQ,EAAQqQ,gBACxB,GACD,CAAC2oC,IAEEQ,GAAiC78E,EAAAA,EAAAA,KAAa4sE,IAClD7V,EAAiB,CAAE6lB,yBAA0BhQ,GAAW,GACvD,CAAC7V,IAEE+lB,GAAkB1iF,EAAAA,EAAAA,KAAQ,IAC9B8hF,GAAqB5lF,OAAOsiD,QAAOvtB,EAAAA,GAAAA,IAAKgsB,EAAiB6kC,KACxD,CAACA,EAAmB7kC,IAEvB,OACE92C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACZo8E,GACCv8E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,wBACZstB,QAASivD,EACT9uD,QAAS+uD,IAEXt8E,EAAAA,GAAAA,cAAA,OAAKG,UAAU,OAAOsJ,IAAKsyE,GACxBQ,EAAgB38E,KAAKywC,GACpBrwC,EAAAA,GAAAA,cAACq7E,GAAc,CACb72E,IAAK6rC,EAAW96C,GAChB86C,WAAYA,EACZU,oBAAqBgI,EACrBv4C,QAASw7E,OAIfh8E,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iCAAiCkG,IAAI,SAC/CqX,EAAAA,GAAAA,GAAW5d,EAAK,gBAAiB,CAAC,YAIrC,K,cCvFV,MCsBM08E,GAAsC,CAC1C,KAAM,MAAO,KAAM,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,KACzD,MAAO,KAAM,MAAO,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,MACzD,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,KAAM,KAAM,MACzD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KACvD,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MACvD,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KACxD,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KACvD,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,MACxD,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,MAC1D,MAAO,MAAO,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KACzD,KAAM,MAAO,MAAO,KAAM,MAAO,MAAO,KAAM,KAAM,KAAM,KAC1D,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5D,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAC7D,MAAO,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,MAAO,MAAO,MAC5D,KAAM,KAAM,MAAO,MAGfC,GAAsBx4B,EAAAA,IAAAA,QAAwCnkD,GAClE08E,GAAoChnF,SAASsK,KA8H/C,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,SACJqtE,EAAQ,eAAEG,GACRxtE,EAAO2e,SAASC,MAEpB,MAAO,CACLyuD,WACAG,iBACD,GATeztE,EApHsC6+E,EACxD9qE,WACAu5D,WACAG,iBACApkB,cAEA,MAAM,iBAAEsP,IAAqBj3D,EAAAA,EAAAA,MAEvBO,GAAOC,EAAAA,EAAAA,MACN48E,EAAkBC,IAAuBp3E,EAAAA,EAAAA,IAAyB,KAClEygB,EAAQC,IAAa1gB,EAAAA,EAAAA,IAAS,IAE/BsiC,GAA0BjuC,EAAAA,EAAAA,KAAQ,IAC/B4iF,GAAoB78E,KAAKskD,IAOvB,CACLA,WACAC,eARsB,IAAIC,KAAKC,aAAa,CAAC8mB,GAAW,CAAEvpE,KAAM,aAC3B0iD,GAAGJ,GAQxCK,aANoB,IAAIH,KAAKC,aAAa,CAACH,GAAW,CAAEtiD,KAAM,aAC7B0iD,GAAGJ,OAOrCtkD,KAAI,EAAGskD,WAAUC,iBAAgBI,mBAAmB,CACrDl3B,MAAO82B,EACP+a,SAAU3a,EACVt6C,MAAOi6C,EACPx5C,SAAUw5C,IAAainB,OAExB,CAACA,IAEE0R,GAAchjF,EAAAA,EAAAA,KAAQ,KACnBwsB,EAAAA,GAAAA,IAAO,IAAIilD,EAAgBH,KACjC,CAACG,EAAgBH,KAEpB9uE,EAAAA,EAAAA,KAAU,KACHuV,GAAUsU,EAAU,GAAG,GAC3B,CAACtU,KAEJkrE,EAAAA,GAAAA,IAAsB,EAAEC,MACtB,GAAIA,IAAiBnrE,EAAU,OAC/B,GAAIA,GAAY+qE,EAAiBx4E,OAAQ,OAEzC,MAAOm8D,EAAU0c,IAAcC,EAAAA,GAAAA,IAAUn1C,GAAUE,GAAW60C,EAAYrnF,SAASwyC,EAAO/9B,SACpF3O,EAAUglE,EAASv4B,MAAMC,GAAWA,EAAO/9B,QAAUkhE,IACrD+R,EAAmB5c,EAAS36C,QAAQqiB,GAAWA,EAAO/9B,QAAUkhE,IAEtEyR,EAAoB,CAACthF,KAAa4hF,KAAqBF,GAAY,GAClE,CAACprE,EAAUirE,EAAaF,EAAiBx4E,OAAQgnE,EAAUrjC,IAE9D,MAAMqF,GAAe1tC,EAAAA,EAAAA,KAAa2Z,IAChC,MAAM,MAAEnP,EAAK,QAAEmjB,GAAYhU,EAAM5J,cACjC,IAAI2tE,EAEFA,EADE/vD,GACkB/G,EAAAA,GAAAA,IAAO,IAAIilD,EAAgBrhE,IAE3BqhE,EAAe3lD,QAAQy3D,GAAMA,IAAMnzE,IAGzDusD,EAAiB,CACf8U,eAAgB6R,GAChB,GACD,CAAC7R,EAAgB9U,IAEdzS,GAAetkD,EAAAA,EAAAA,KAAa0G,IAChC+f,EAAU/f,EAAEgR,OAAOlN,MAAM,GACxB,IAEGozE,GAA2BxjF,EAAAA,EAAAA,KAAQ,IAClCosB,EAAO+T,OAIL2iD,EAAiBh3D,QAAQqiB,GAC9BA,EAAO3a,MAAMo3B,cAAcjvD,SAASywB,EAAOw+B,gBACxCzc,EAAOk3B,UAAUza,cAAcjvD,SAASywB,EAAOw+B,gBAC/Czc,EAAO/9B,MAAMw6C,cAAcjvD,SAASywB,EAAOw+B,iBANvCk4B,GAQR,CAACA,EAAkB12D,IAOtB,OALAjR,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GD9IG,uBC8IyB,mCAC1ClG,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GD/I+B,uBC+IH,kBAC1ClG,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRnxB,IAAI,SACJyF,MAAOgc,EACP/b,SAAU65C,EACVY,YAAa7kD,EAAK,UAClB8kD,2BAAyB,IAE3B5kD,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GDvJkG,uBCuJjE,8BAC9Cm3E,EAAyBz9E,KAAKooC,GAC7BhoC,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPhtB,UD1JyE,uBC2JzEktB,MAAO2a,EAAO3a,MACd6xC,SAAUl3B,EAAOk3B,SACjB9xC,QAASyvD,EAAYrnF,SAASwyC,EAAO/9B,OACrCA,MAAO+9B,EAAO/9B,MACdS,SAAUs9B,EAAOt9B,SACjBlG,IAAKwjC,EAAO/9B,MACZC,SAAUijC,QAKd,KChHV,IAAevvC,EAAAA,EAAAA,KArC4B0/E,EACzC1rE,WACAs1C,cAEA,MAAM,gBAAEnb,IAAoBxsC,EAAAA,EAAAA,MACtBO,GAAOC,EAAAA,EAAAA,KAOb,OALAiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAIRlnD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qCACbH,EAAAA,GAAAA,cAAC+4D,GAAAA,EAAY,CACXp1B,OAAQs1B,GAAAA,EAAAA,aACRz8D,KAAM,IACN2D,UAAU,oBACVo9E,gBAAc,EACdz5C,QAAQ,IAEV9jC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,4BAA4BkG,IAAI,QAAQvG,EAAK,qCAE5DE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAACypC,GAAAA,EACC,CACAjpC,QAASA,IAAMurC,IACfjoC,KAAK,cAEL9D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SAAQ,2BAGvB,ICfJq9E,GAA0BznF,OAAOw2D,KAAKsC,EAAAA,IAAiB1qD,OAAS,EAGhEs5E,GAAiB,CACrB5uB,EAAAA,GAAAA,cACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,wBAGI6uB,GAAmB,CACvB7uB,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,iBAGI8uB,GAAkB,CACtB9uB,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,kCAGI+uB,GAAkB,CACtB/uB,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,gBAGIgvB,GAA+B,CACnChvB,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,kCAGIivB,GAAkC,CACtCjvB,EAAAA,GAAAA,+BACAA,EAAAA,GAAAA,+BAGIkvB,GAAgC,CACpClvB,EAAAA,GAAAA,mCACAA,EAAAA,GAAAA,mCAGImvB,GAA6B,CACjCnvB,EAAAA,GAAAA,gCACAA,EAAAA,GAAAA,gCAGIovB,GAA4B,CAChCpvB,EAAAA,GAAAA,+BACAA,EAAAA,GAAAA,+BAGIqvB,GAA6B,CACjCrvB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCAGIsvB,GAAiC,CACrCtvB,EAAAA,GAAAA,oCACAA,EAAAA,GAAAA,oCAGIuvB,GAA8B,CAClCvvB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCAuVF,IAAejxD,EAAAA,EAAAA,KA1UgBygF,EAC7BzsE,WACAq8C,gBACAqwB,eACAC,kBACAnwB,iBACAlH,UACAs3B,2BAEA,MAAOC,EAAYC,I1D9EZC,EAAAA,GAAAA,GAAW9wB,GAAcL,K0D+EzBoxB,EAAiBC,IAAsBr5E,EAAAA,EAAAA,IAAiB,IAEzD64D,GAAc5+D,EAAAA,EAAAA,KAAaq/E,KACD,IAA1BA,GAMF7wB,IAAkBY,EAAAA,GAAAA,qBACfZ,IAAkBY,EAAAA,GAAAA,mBAClBZ,IAAkBY,EAAAA,GAAAA,+BAErBjyD,YAAW,KACT2hF,EAAgB,CAAE38E,KAAM,SAAU,GApHd,KAyHtBqsD,IAAkBY,EAAAA,GAAAA,sBACfZ,IAAkBY,EAAAA,GAAAA,qBAUvB3H,IAR4B,WAAtBo3B,EAAajjB,KACfjN,EAAeS,EAAAA,GAAAA,qBAEfT,EAAeS,EAAAA,GAAAA,oBArBjB3H,GAAQ,EA0BD,GACR,CACDo3B,EAAajjB,KAAMkjB,EACnBtwB,EAAe/G,EAASkH,IAGpB2wB,GAAmBt/E,EAAAA,EAAAA,KAAY,KACnC8+E,EAAgB,CAAE38E,KAAM,gBACxBy8D,GAAa,GACZ,CAACkgB,EAAiBlgB,IA8PrB,SAAS2gB,EAAqBC,EAAyBC,EAAiBC,GACtE,OACEn/E,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACguD,GAAc,CACbC,cAAeA,EACf/G,QAASmX,EACTlQ,aAAc4wB,EACd3wB,eAAgBA,EAChBF,eAAgBowB,EAAatvB,WApQrC,SAAqCiwB,EAAyBtS,GAC5D,MAAMyS,EAA+C,CACnD,CAACvwB,EAAAA,GAAAA,oBAAqCgvB,GAA6BroF,SAASm3E,GAC5E,CAAC9d,EAAAA,GAAAA,iBAAkCivB,GAAgCtoF,SAASm3E,GAC5E,CAAC9d,EAAAA,GAAAA,qBAAsCkvB,GAA8BvoF,SAASm3E,GAC9E,CAAC9d,EAAAA,GAAAA,kBAAmCmvB,GAA2BxoF,SAASm3E,GACxE,CAAC9d,EAAAA,GAAAA,iBAAkCovB,GAA0BzoF,SAASm3E,GACtE,CAAC9d,EAAAA,GAAAA,mBAAoCqvB,GAA2B1oF,SAASm3E,GACzE,CAAC9d,EAAAA,GAAAA,sBAAuCsvB,GAA+B3oF,SAASm3E,GAChF,CAAC9d,EAAAA,GAAAA,mBAAoCuvB,GAA4B5oF,SAASm3E,IAGtE0S,EAAgB5B,GAAejoF,SAASm3E,GACxC2S,EAAmB5B,GAAiBloF,SAASm3E,GAC7C4S,EAAkB5B,GAAgBnoF,SAASm3E,GAC3C6S,EAAkB5B,GAAgBpoF,SAASm3E,IAC5C0S,GACAC,GACAvpF,OAAOw2D,KAAK6yB,GAAqB5pF,SAASm3E,EAAOrkC,aACjDvyC,OAAOsiD,OAAO+mC,GAAqBr3C,MAAMvjC,IAAgB,IAARA,IAEtD,OAAQypD,GACN,KAAKY,EAAAA,GAAAA,KACH,OACE7uD,EAAAA,GAAAA,cAACwvD,GAAY,CAACpB,eAAgBA,EAAgBx8C,SAAUA,EAAUs1C,QAASmX,IAE/E,KAAKxP,EAAAA,GAAAA,YACH,OACE7uD,EAAAA,GAAAA,cAAC0zD,GAAmB,CAClB9hD,SAAUA,GAAYqtE,EACtB/3B,QAASmX,IAGf,KAAKxP,EAAAA,GAAAA,QACH,OACE7uD,EAAAA,GAAAA,cAAC4+D,GAAe,CACdxQ,eAAgBA,EAChBx8C,SAAUqtE,GACLtS,IAAW9d,EAAAA,GAAAA,4BACX8d,IAAW9d,EAAAA,GAAAA,uBACX8d,IAAW9d,EAAAA,GAAAA,eACX8d,IAAW9d,EAAAA,GAAAA,aACX2wB,GAAmBD,EACxBr4B,QAASmX,IAGf,KAAKxP,EAAAA,GAAAA,cACH,OACE7uD,EAAAA,GAAAA,cAACk6E,GAAqB,CAACtoE,SAAUqtE,EAAgB/3B,QAASmX,IAE9D,KAAKxP,EAAAA,GAAAA,YACH,OACE7uD,EAAAA,GAAAA,cAACo8E,GAAmB,CAACxqE,SAAUqtE,EAAgB/3B,QAASmX,IAE5D,KAAKxP,EAAAA,GAAAA,cACH,OACE7uD,EAAAA,GAAAA,cAACqnE,GAAqB,CAACz1D,SAAUqtE,EAAgB/3B,QAASmX,IAE9D,KAAKxP,EAAAA,GAAAA,YACH,OACE7uD,EAAAA,GAAAA,cAACw1D,GAAmB,CAAC5jD,SAAUqtE,EAAgB/3B,QAASmX,IAE5D,KAAKxP,EAAAA,GAAAA,QACH,OACE7uD,EAAAA,GAAAA,cAAC0qE,GAAe,CACdtc,eAAgBA,EAChBx8C,SAAUqtE,GAAkBO,EAC5Bt4B,QAASmX,IAGf,KAAKxP,EAAAA,GAAAA,SACH,OACE7uD,EAAAA,GAAAA,cAACurE,GAAgB,CACf35D,SAAUqtE,GAAkBtS,IAAW9d,EAAAA,GAAAA,eACvC3H,QAASmX,EACTjQ,eAAgBA,IAGtB,KAAKS,EAAAA,GAAAA,eACH,OACE7uD,EAAAA,GAAAA,cAAC08E,GAAsB,CAAC9qE,SAAUqtE,EAAgB/3B,QAASmX,IAE/D,KAAKxP,EAAAA,GAAAA,SACH,OACE7uD,EAAAA,GAAAA,cAAC47E,GAAgB,CAAChqE,SAAUqtE,EAAgB/3B,QAASmX,EAAajQ,eAAgBA,IAEtF,KAAKS,EAAAA,GAAAA,aACH,OACE7uD,EAAAA,GAAAA,cAACs9E,GAAoB,CAAC1rE,SAAUqtE,EAAgB/3B,QAASmX,IAE7D,KAAKxP,EAAAA,GAAAA,sBACH,OACE7uD,EAAAA,GAAAA,cAAC2hE,GAAyB,CACxBvT,eAAgBA,EAChBx8C,SAAUqtE,GAAkBtS,IAAW9d,EAAAA,GAAAA,2BACvC3H,QAASmX,IAGf,KAAKxP,EAAAA,GAAAA,2BACH,OACE7uD,EAAAA,GAAAA,cAACy/E,GAA8B,CAC7B7tE,SAAUqtE,EACV/3B,QAASmX,IAGf,KAAKxP,EAAAA,GAAAA,eACH,OACE7uD,EAAAA,GAAAA,cAAC+wE,GAAsB,CACrBn/D,SAAUqtE,EACV/3B,QAASmX,IAGf,KAAKxP,EAAAA,GAAAA,eACH,OACE7uD,EAAAA,GAAAA,cAAC0yE,GAAsB,CACrB9gE,SAAUqtE,EACV/3B,QAASmX,IAGf,KAAKxP,EAAAA,GAAAA,oBACH,OACE7uD,EAAAA,GAAAA,cAACi0E,GAA2B,CAC1BriE,SAAUqtE,EACV/3B,QAASmX,IAGf,KAAKxP,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,kBACH,OACE7uD,EAAAA,GAAAA,cAACkuE,GAAyB,CACxBvB,OAAQ1e,EACRG,eAAgBA,EAChBx8C,SAAUqtE,GAAkBG,EAAoBnxB,GAChD/G,QAASmX,IAIf,KAAKxP,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,iCACH,OACE7uD,EAAAA,GAAAA,cAACg5E,GAAsC,CACrCC,aAAW,EACXtM,OAAQ1e,EACRG,eAAgBA,EAChBx8C,SAAUqtE,GAAkBG,EAAoBnxB,GAChD/G,QAASmX,IAIf,KAAKxP,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,gCACH,OACE7uD,EAAAA,GAAAA,cAACg5E,GAAsC,CACrCrM,OAAQ1e,EACRG,eAAgBA,EAChBx8C,SAAUqtE,EACV/3B,QAASmX,IAIf,KAAKxP,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE7uD,EAAAA,GAAAA,cAACm+D,GAAe,CACdlQ,cAAeA,EACfmQ,YAAauO,EACb7e,MAAOwwB,EACPtkB,SAAUukB,EACV3sE,SAAUqtE,EACV7wB,eAAgBA,EAChBlH,QAASmX,IAIf,KAAKxP,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,uBACH,OACE7uD,EAAAA,GAAAA,cAACy3E,GAAa,CACZxpB,cAAeA,EACfH,MAAO2wB,EACPzkB,SAAU0kB,EACVtgB,YAAauO,EACb/6D,SAAUqtE,EACV7wB,eAAgBA,EAChBlH,QAASmX,IAIf,KAAKxP,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,gBACH,OACE7uD,EAAAA,GAAAA,cAAC46E,GAAgB,CACf3sB,cAAeA,EACfkb,SAAUyV,EACV/D,cAAegE,EACfzgB,YAAauO,EACb/6D,SAAUqtE,EACV7wB,eAAgBA,EAChBlH,QAASmX,IAIf,QACE,OAEN,CAYOqhB,CAA4BT,EAAgBE,GAGnD,CAEA,OACEn/E,EAAAA,GAAAA,cAACskB,EAAAA,EAAU,CACT/uB,GAAG,WACHivB,KAAMg6D,EAAuB,OAASmB,EAAAA,GACtCp7D,UAAW0pC,EACXb,YAAaowB,IAEZwB,EACU,ICnWjB,IAAephF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQ2nB,QAASF,GAAeznB,EAAO0nB,aAAe,CAAC,GAC/CV,KAAMyB,EAAWq5D,aAAcC,GAAqB/hF,EAAO0oB,MAEnE,MAAO,CACLD,YACAs5D,mBACAt6D,aACD,GATe1nB,EAtE2BiiF,EAC7CluE,WACA+T,SACAY,YACAs5D,mBACAt6D,aACA2hC,cAEA,MAAM,SACJhwB,EAAQ,qBACR6oD,IACExgF,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACP,SAAE4C,IAAaC,EAAAA,EAAAA,OAErBoS,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGV,MAAM73C,GAAc5P,EAAAA,EAAAA,KAAalK,IAC/B2hC,EAAS,CAAE3hC,KAAIgyD,sBAAsB,GAAO,GAC3C,CAACrwB,IAEElS,GAAUnrB,EAAAA,EAAAA,KAAQ,KACtB,IAAK0rB,EACH,OAGF,MAAMy6D,GAAch5D,EAAAA,EAAAA,IAAkBzB,EAAYgB,EAAWZ,GAE7D,OAAOs6D,EAAAA,EAAAA,IAAYD,EAAaz5D,EAAWs5D,EAAiB,GAC3D,CAACt6D,EAAYI,EAAQY,EAAWs5D,KAE5B5+B,EAAaC,IAAWC,EAAAA,GAAAA,QAAkB9oD,EAAW2sB,EAAS1rB,QAAQqsB,IAE7E,OACE3lB,EAAAA,GAAAA,cAAC0hD,GAAAA,EAAc,CAACC,MAAOV,EAAaW,WAAYV,EAAS/gD,UAAU,2BAChE8gD,GAAa98C,OACZ88C,EAAYrhD,KAAKrK,GACfyK,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKjP,EACL4K,UAAU,sBAEVK,QAASA,IAAM6O,EAAY9Z,GAC3BsU,QAASlH,GAET3C,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CAACrsB,OAAQh+B,EAAIs6D,eAAa,EAACtJ,WAAW,aAGxDtF,IAAgBA,EAAY98C,OAC9BnE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAAaqE,IAAI,aAAa6B,IAAI,QAC5Csf,EAAOxhB,OAAS,mCAAqC,0BAGxDnE,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,CAACx2C,IAAI,YAEfxE,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnB/wD,IAAI,qBACJujB,SAAO,EACPvnB,QAASu/E,EACTt8E,UAAW3D,EAAK,qBAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,0BAEA,KCoCrB,IAAevC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQ2nB,QAASukC,GAAoBlsD,EAAO0nB,aAAe,CAAC,GACpDV,KAAMC,GAAcjnB,EAAO+mB,OAGjCyuD,MAAO1rB,EAAW,eAClBqC,EAAc,cACdC,EAAa,aACbC,IACE74C,EAAAA,EAAAA,IAAexT,GAAQssD,cACnB3kC,QAAS6kC,GAAkBJ,GAAiB,CAAC,GAC7CzkC,QAAS+kC,GAAiBL,GAAgB,CAAC,EAEnD,MAAO,CACLplC,YACAilC,kBACApC,cACAs4B,YAAaj2B,GAAgBplC,MAC7BylC,gBACAE,eACD,GArBe3sD,EAlG4BsiF,EAC9Ch2D,YACAvY,WACAwuE,oBACAC,4BACAC,aACAp5B,UACAniC,YACAilC,kBACApC,cACAs4B,cACA11B,eACAF,oBAEA,MAAM,qBACJi2B,IACEhhF,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGV,MAAM6V,GAAqBt9D,EAAAA,EAAAA,KAAa6zE,IACtCiN,EAAqB,CAAEjN,SAAQ,GAC9B,CAACiN,IAEE3iB,GAAe/jE,EAAAA,EAAAA,KAAQ,KAE3B,MAAM0sB,GAAYD,EAAAA,EAAAA,MAAYE,MAAM1B,KAC9B2mC,EAAkBzB,GAAkBhjC,EAAAA,EAAAA,IAAkBgjC,EAAiBzjC,EAAWqhC,GAAe,GAEvG,OAAO9gC,EAAAA,EAAAA,KACLT,EAAAA,GAAAA,IAAO,IACFolC,KACCjB,GAAgB,MAChBF,GAAiB,KACpB3kC,QAAQ8tD,IACT,MAAMj2D,EAAO+I,EAAUktD,GACvB,OAAKj2D,IAIGA,EAAK0qC,SAAW1qC,EAAKgjE,uBAAwBC,EAAAA,EAAAA,IAAUjjE,GAAM,IAEvEuH,GACA,EACAq7D,EACD,GACA,CAACp2B,EAAiBjlC,EAAW6iC,EAAa4C,EAAcF,EAAe81B,IAEpEM,GAAiBjhF,EAAAA,EAAAA,KAAY,MAC7B2gF,EAAkBj8E,QAAUgmB,KAC9Bo2D,EAAqB,CAAEjN,MAAO,KAC9BgN,IACF,GACC,CAACF,EAAkBj8E,OAAQgmB,EAAWo2D,EAAsBD,IAE/D,OACEtgF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cACNE,QAAS0mD,EACTzjD,UAAU,uBAEVzD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAAA,UAAKF,EAAK,qBAEZE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAC25E,GAAAA,EAAM,CACLC,QAAShc,EACTxB,YAAagkB,EACb/jB,YAAazU,EACbiyB,kBAAmB/5E,EAAK,iBACxBg6E,cAAc,0BACdrlB,UAAWyrB,EACX5jB,oBAAqB+jB,EACrB7jB,eAAgBO,IAGlB/8D,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASzuB,QAAQ8mF,EAAkBj8E,QAAUgmB,GAC7C3pB,QAASkgF,EACTj9E,UAAW0mB,EAAY,2BAA6B,0BAEpDnqB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,uBAGb,K,4BC/FV,MAwKA,IAAevC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACE4G,SAAUi8E,EACVz3D,MAAO03D,IACLtvE,EAAAA,EAAAA,IAAexT,GAAQ+iF,cAAgB,CAAC,EAE5C,MAAO,CACLF,mBACAC,gBACAE,aAAchjF,EAAOi8E,QAAQ+G,aAC9B,GAXejjF,EAxK6BkjF,EAC/C52D,YACAvY,WACA0tC,YACAwhC,eACAH,mBACAC,gBACA15B,cAEA,MAAM,gBACJ85B,EAAe,cACfC,EAAa,WACbC,IACE3hF,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGV,MAAO9mD,EAAO+gF,IAAY37E,EAAAA,EAAAA,IAAS,KAC5B47E,EAAUC,IAAe77E,EAAAA,EAAAA,KAAS,IAClCykB,EAAOq3D,IAAY97E,EAAAA,EAAAA,IAAS,KAC5BisD,EAAU8vB,IAAe/7E,EAAAA,EAAAA,IAAS,KAClCrN,EAAOi8D,IAAY5uD,EAAAA,EAAAA,OACnB0jB,EAAOirC,IAAY3uD,EAAAA,EAAAA,MAEpBg8E,EAAsB,4BACtBC,EAAyB,+BAEzBhtB,EAAYksB,IAAqBe,EAAAA,GAAAA,WAEjCC,GAAoBliF,EAAAA,EAAAA,KAAa0G,IACrC,MAAM,MAAE8D,GAAU9D,EAAEqJ,cACd68D,EAAWpiE,EAAM8nB,QAAQ,OAAQ,IAEvCovD,EAAS9U,GAELA,IAAapiE,IACf9D,EAAEqJ,cAAcvF,MAAQoiE,EAC1B,GACC,IAGGuV,GAAiBniF,EAAAA,EAAAA,KAAa0G,IAClCk7E,GAAaD,EAAS,GACrB,CAACA,IAGES,GAAiBpiF,EAAAA,EAAAA,KAAa0G,IAClCo7E,EAAYp7E,EAAEgR,OAAOlN,MAAM,GAC1B,CAACwnD,IAEEqwB,GAA0BriF,EAAAA,EAAAA,KAAa0G,IAC3Cm7E,EAASn7E,EAAEqJ,cAAcvF,MAAM,GAC9B,IAEG83E,GAAsBtiF,EAAAA,EAAAA,KAAY,KAElCgyD,EAASttD,OAAS,IAChBstD,EAASuwB,SAAS,QACpBC,GAAAA,EAAAA,iBAA+B,kDAInCf,EAAW,CACT9gF,QACA6pB,QACAwnC,WACA2vB,YACA,GACD,CAAChhF,EAAMqxD,EAAS2vB,EAASH,EAAeh3D,EAAO9xB,EAAOmnD,EAAWmiC,KAEpEplF,EAAAA,EAAAA,KAAU,KACJskF,IAAqBe,EAAAA,GAAAA,UACvBx6B,GAAQ,EACV,GACC,CAACy5B,EAAkBz5B,IAEtB,MAAMg7B,EAAiBtB,GAAiB9gF,EAAK8gF,KAC3C13D,IAAUs4D,GAAuBt4D,IAAUu4D,EACvCv4D,OACA7wB,GAGN,OACE2H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cAENE,QAASA,IAAM0mD,IACfzjD,UAAU,8BAEVzD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAAA,UAAI,UAENA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,6BAMbH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACR1rB,MAAO7J,EACP8J,SAAUy3E,EACVt0D,MAAO,KACPnE,MAAOA,IAAUs4D,GAAuBt4D,IAAUu4D,EAAyBv4D,OAAQ7wB,IAGrF2H,EAAAA,GAAAA,cAACmiF,GAAAA,EAAQ,CACPl4E,MAAOwnD,EACPvnD,SAAU23E,EACVx0D,MAAO,qCAGTrtB,EAAAA,GAAAA,cAACmiF,GAAAA,EAAQ,CACPl4E,MAAOggB,EACP/f,SAAU43E,EACVz0D,MAAO,cAGTrtB,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAO,UACPD,QAASg0D,EACT7zD,QAASq0D,IAGVM,GACCliF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,SAAS+hF,GAGvB5iC,EAAUn7C,OAAS,GAClBnE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,MAAIG,UAAU,wBAAwBL,EAAK,6BAA8Bw/C,EAAUn7C,OAAQ,MAE3FnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mCACZm/C,EAAU1/C,KAAKrK,GACdyK,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC6vB,UAAQ,EAACn5D,UAAU,uBAC3BH,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CAACrsB,OAAQh+B,UAQrCyK,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAA0B,IAAjB3nB,EAAM+D,OACf3D,QAASuhF,EACTr3E,SAAU+pD,EACVhxD,UAAW,cAEVgxD,EACCz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,sBAGb,KChLJiiF,GAAersF,OAAOw2D,KAAK81B,EAAAA,IAAmBl+E,OAAS,EAsD7D,IAAevG,EAAAA,EAAAA,KApDe0kF,EAC5B1wE,WACAuY,aAAY,EACZ9X,UACAkwE,kBACAr7B,cAEA,MAAOs7B,EAAkBC,IAAuBj9E,EAAAA,EAAAA,IAAmB,IAE7Dk7E,GAAiBjhF,EAAAA,EAAAA,KAAY,KACjC8iF,EAAgBp4D,EAAYk4D,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,cAAgC,GAC/F,CAACl4D,EAAWo4D,IAEf,OACEviF,EAAAA,GAAAA,cAACskB,EAAAA,EAAU,CACT/uB,GAAG,UACHivB,KAAMm7D,EAAAA,GACNvyB,YAAag1B,GACb79D,UAAWlS,IAETqwE,IACA,OAAQrwE,GACN,KAAKgwE,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACEriF,EAAAA,GAAAA,cAACmgF,GAAY,CACXh2D,UAAWA,EACXvY,SAAUA,EACVwuE,kBAAmBoC,EACnBnC,0BAA2BoC,EAC3BnC,WAAYI,EACZx5B,QAASA,IAGf,KAAKm7B,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACEriF,EAAAA,GAAAA,cAAC+gF,GAAY,CACX52D,UAAWA,EACXvY,SAAU8wE,GAAgB9wE,EAC1B0tC,UAAWkjC,EACXt7B,QAASA,IAGf,QACE,OAAiB,GAGZ,I,oDCrCjB,MAsFA,IAAetpD,EAAAA,EAAAA,KAtFqB+kF,EAClC/wE,WACAgxE,mBACAC,kBACA37B,UACA47B,gBACAC,yBACAC,4BACAzE,sBAEA,MAAM,sBAAE0E,IAA0B1jF,EAAAA,EAAAA,MAC5BO,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQiyC,IAGV,MAAMg8B,GAA8BzjF,EAAAA,EAAAA,KAAY,KAC9CwjF,EAAsB,CAAE79E,UAAU,GAAQ,GACzC,CAAC69E,KAEE,uCACJE,EAAsC,gCACtCC,IACEC,EAAAA,GAAAA,GAAsCT,IAGxCh0E,aAAc00E,EACdx0E,qBAAsBy0E,IACpBv0E,EAAAA,GAAAA,IAAmB4zE,IAEjB,uBAAEY,EAAsB,6BAAEC,IAAiCC,EAAAA,GAAAA,GAAoBd,GAErF,OACE5iF,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACZL,EAAKqc,OAASnc,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBAC9BH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cACNE,QAAS0mD,EACTzjD,UAAU,sBACVtD,WAAW+F,EAAAA,GAAAA,GACTpG,EAAKqc,OAAS,MACdymE,GAAoB9iF,EAAKqc,OAAS,gBAClCgnE,EAAuC7nF,SAAWwE,EAAKqc,OAAS,sBAElEwnE,gBAAiBP,GAEjBpjF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEdmjF,GAAqBtjF,EAAAA,GAAAA,cAAA,MAAIG,UAAWojF,GAAkBzjF,EAAK,kBAC3D+iF,EAAgBz9E,UACfpF,EAAAA,GAAAA,cAACoE,EAAAA,EAAY,CACXjE,UAAU,2BACVmE,UAAU,QACVq/E,gBAAiB7jF,EAAKqc,MAAQinE,OAAkC/qF,GAEhE2H,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,oBAAoBtD,QAAS0iF,GACzCpjF,EAAK,kCAKdE,EAAAA,GAAAA,cAAC4jF,GAAAA,EAAQ,CACPC,WAAW,WACXjyE,SAAUA,EACVgxE,iBAAkBA,EAClBG,uBAAwBA,EACxBC,0BAA2BA,EAC3BzE,gBAAiBA,EACjBsE,gBAAiBA,IAElBW,GACCxjF,EAAAA,GAAAA,cAAC8jF,GAAAA,EAAU,CACT7kF,OAAQ2jF,EACRE,cAAeA,EACf98D,oBAAqBy9D,IAGrB,I,gBCzFV,MAyEA,IAAe7lF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAQgnB,KAAM0yC,EAAa5R,WAAYm+B,GAAqBjmF,EAAO6nD,YAEnE,MAAO,CACL6R,cACAusB,mBACD,GAPelmF,EAzE+B8oD,EACjD1nD,SACAX,SACAk5D,cACAusB,mBACA3kF,UACA4mB,0BAEA,MAAM,gBAAEg+D,IAAoBzkF,EAAAA,EAAAA,MAEtBO,GAAOC,EAAAA,EAAAA,KAEPkkF,GAA2BpqF,EAAAA,EAAAA,KAAQ,IAClC29D,EAIEzhE,OAAOw2D,KAAKiL,GAAappB,QAAO,CAAC+gC,EAAQngB,KAC9C,MAAM,gBAAEyL,EAAe,cAAEypB,GAAkB1sB,EAAYvlC,OAAO+8B,IAK9D,OAJIyL,EAAgBjlE,SAAS8I,IAAW4lF,GAAe1uF,SAAS8I,KAC9D6wE,EAAOtrE,KAAKmrD,GAGPmgB,CAAM,GACZ,IAVM,IAWR,CAAC7wE,EAAQk5D,KAEL2sB,EAAmBC,IAAwB5+E,EAAAA,EAAAA,IAAmBy+E,GAE/DI,GAAUxqF,EAAAA,EAAAA,KAAQ,IACfkqF,GAAkBp+D,QAAQqpC,GAAaA,IAAa2J,EAAAA,MAAe/4D,KAAKovD,IAAQ,CACrF3hC,MAAOmqC,EAAcA,EAAYxI,GAAU5uD,MAAQ,GACnD6J,MAAOqkB,OAAO0gC,QACT,IACN,CAAC+0B,EAAkBvsB,IAEhB3lC,GAAepyB,EAAAA,EAAAA,KAAY,KAC/B,MAAM6kF,EAAcL,EAAyBt+D,QAAQpwB,IAAQ4uF,EAAkB3uF,SAASD,KAAKqK,IAAIqyB,QAC3FsyD,EAAWJ,EAAkBx+D,QAAQpwB,IAAQ0uF,EAAyBzuF,SAASD,KAAKqK,IAAIqyB,QAE9F+xD,EAAgB,CAAE1lF,SAAQgmF,cAAaC,aACvCnlF,GAAS,GACR,CAACd,EAAQ0lF,EAAiBC,EAA0B7kF,EAAS+kF,IAEhE,GAAK3sB,GAAgBusB,EAIrB,OACE/jF,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQA,EACRG,QAASA,EACT4mB,oBAAqBA,EACrB9lB,QAAS2xB,EACT1xB,UAAU,SACVC,MAAON,EAAK,gBAEZE,EAAAA,GAAAA,cAACwkF,GAAAA,EAAa,CACZ18C,QAASu8C,EACT/jB,SAAU6jB,EACVj6E,SAAUk6E,EACV5gF,OAAK,IAEPxD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACC,MAAM,UAAUH,UAAU,wBAAwBI,QAAM,EAACC,QAASqxB,GACvE/xB,EAAK,gBAERE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,wBAAwBI,QAAM,EAACC,QAASpB,GAAUU,EAAK,YAErE,K,wCCiBZ,SAAS2kF,GAAaC,GACpB,OAAIA,EACK,4BAEF,uBACT,CCtHA,IAAIC,GACA5rE,GAEJ,MAAM6rE,GAAwC,CAC5CC,MAAM,EACNC,WAAW,EACXC,IAAI,EACJC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,OAAO,EACPC,YAAY,EACZ,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,KAAK,EACLC,MAAM,EACNC,KAAK,GAkBMC,GAAav/E,GAChB,mBAAoBA,EAAIA,EAAEw/E,eAAe,GAAGp3E,QAAU,EAG1D4B,GAAkBhK,IACtB,MAAMuV,EAAS,WAAYvV,EAAIA,EAAEuV,OAASgqE,GAAUv/E,GAEpD,IACGw+E,KAEGA,GAAahiE,SAASxc,EAAEgR,SAExBwtE,GAAajvF,WAAa,GAAKgmB,GAAU,GAEzCipE,GAAajvF,WAAcivF,GAAal9C,aAAek9C,GAAahvF,cAAiB+lB,GAAU,EACnG,CACA,GAAI3C,IAA4B5S,EAAEgR,OAAuB7hB,QAAQyjB,IAA0B,OAC3F5S,EAAEgK,gBACJ,GAGF,SAASy1E,GAA4Bz/E,GAC/By+E,GAAaz+E,EAAE3B,OArCrB,SAAmB2S,GACjB,KAAKA,GAAYA,aAAkB0uE,aAAc,OAAO,EACxD,MAAMhwF,EAAUshB,EACV2uE,EAAUjwF,EAAQiwF,QAAQrhC,cAChC,GAAgB,aAAZqhC,EAAwB,OAAO,EACnC,GAAgB,UAAZA,EAAqB,OAAO,EAChC,MAAMlkF,EAAO/L,EAAQkwF,aAAa,QAClC,QAAKnkF,GACc,CACjB,OAAQ,WAAY,SAAU,QAAS,MAAO,MAC9C,SAAU,OAAQ,WAAY,iBAAkB,OAAQ,QAAS,QAEjDke,QAAQle,EAAK6iD,gBAAkB,CACnD,CAwB8BuhC,CAAU7/E,EAAEgR,SACtChR,EAAEgK,gBAEN,CAEO,SAAS81E,GAAiBC,EAAyBC,GACxDxB,GAAeuB,EACfntE,GAA0BotE,EAE1BpyF,SAASgS,iBAAiB,QAASoK,GAAgB,CAAEi2E,SAAS,IAC9DryF,SAASgS,iBAAiB,YAAaoK,GAAgB,CAAEi2E,SAAS,IAClEryF,SAASsyF,UAAYT,EACvB,CAEO,SAASU,KACd3B,QAAetsF,EACf0gB,QAA0B1gB,EAC1BtE,SAASiS,oBAAoB,QAASmK,IACtCpc,SAASiS,oBAAoB,YAAamK,IAE1Cpc,SAASsyF,UAAY,IACvB,C,gBChEA,MAAME,GAAgBC,EAAAA,GAAkB,GAAK,GAUvCC,IAAKC,EAAAA,GAAAA,GAAuB,4BA+ClC,IAAe9oF,EAAAA,EAAAA,KA7CgC+oF,EAC7C7lC,WACA8lC,eACAtwC,UACAuwC,SACAC,uBAEA,MAAMtsF,GAAYL,EAAAA,EAAAA,GAAU,WAAU2mD,EAASimC,iBAAiBxxF,MAAO+gD,IAEhErT,EAAa+jD,EAAUC,IAAcvkF,EAAAA,EAAAA,MACrCwkF,EAAmBC,IAAuBzkF,EAAAA,EAAAA,KAE3C0kF,GAAsB9wC,IAAY4wC,EAClCG,EAAuB/tF,QAAQg9C,GAAW97C,GAMhD,OACEwF,EAAAA,GAAAA,cAAA,OACEG,UAAWsmF,GAAG,IAAKD,EAAAA,IAAmB,UAAWK,GAAU,UAC3DrmF,QAPJ,WACEsmF,EAAiBhmC,EAASA,SAC5B,EAMIwmC,aAAchxC,EAAU0wC,OAAW3uF,GAElC+uF,GACCpnF,EAAAA,GAAAA,cAAA,OACEG,UAAWsmF,GAAG,UACdxwF,MAAQ,0BAAyB2wF,GAAgBL,UAGpDc,GACCrnF,EAAAA,GAAAA,cAAC0jC,GAAAA,EAAe,CACdC,OAAQnpC,EACRopC,KAAMX,EACNa,QAAM,EACNtnC,KAAM+pF,GACN1rD,OAAQssD,EACRn2E,QAASi2E,IAGT,ICnCJR,IAAKC,EAAAA,GAAAA,GAAuB,oBAuElC,IAAe9oF,EAAAA,EAAAA,KArEwB2pF,EACrCtnC,qBACAunC,mBACAC,mBACAC,qBACA/S,YACAr+B,UACAwwC,uBAGA,MAAMa,GAAiBxsF,EAAAA,EAAAA,IAAuB,OAC9C2+C,EAAAA,GAAAA,GAAoB6tC,GAEpB,MAAMC,EAAezhF,KACJ,WAAYA,EAAIA,EAAEuV,OAASgqE,GAAUv/E,KAEtCA,EAAE0hF,YACd1hF,EAAEgK,gBACJ,EAGI23E,GAAoBjuF,EAAAA,EAAAA,KAAQ,IACzBomD,GAAoBrgD,KAAKw6E,IAC9B,IAAIA,EAAkBC,aACjB1F,GAAe6S,IAAqBO,EAAAA,EAAAA,IAAgB3N,EAAkBt5B,SAAU0mC,QAGjFE,GAAsBD,GAAoBA,EAAiBtjF,QAAUujF,IACnED,EAAiBzzC,MAAK,EAAG8M,eAAeE,EAAAA,EAAAA,IAAeF,EAAUs5B,EAAkBt5B,aAGzF,OAAOs5B,CAAiB,KACpB,IACL,CAACn6B,EAAoBwnC,EAAkBD,EAAkB7S,EAAW+S,IAEjEM,GAAsBnuF,EAAAA,EAAAA,KAAQ,KAClC,MAAMouF,EAAkBR,GAAkB9hE,QAAO,EAAGuiE,sBAAkC7vF,IAAhB6vF,KAA8B,GACpG,OAAO,IAAIrzC,IAAIozC,EAAgBroF,KAAI,EAAGkhD,cACpCgnC,EAAkBK,WAAWpnC,GAAMA,IAAKC,EAAAA,EAAAA,IAAeD,EAAED,SAAUA,OAClE,GACF,CAAC2mC,EAAkBK,IAEtB,GAAKA,EAAkB3jF,OAEvB,OACEnE,EAAAA,GAAAA,cAAA,OAAKG,UAAWsmF,GAAG,IAAKD,EAAAA,IAAmB,WAAY4B,eAAgBR,EAAaS,YAAaT,GAC/F5nF,EAAAA,GAAAA,cAAA,OAAKG,UAAWsmF,GAAG,gBACnBzmF,EAAAA,GAAAA,cAAA,OAAKG,UAAWsmF,GAAG,kBACnBzmF,EAAAA,GAAAA,cAAA,OAAKG,UAAWsmF,GAAG,kBACjBzmF,EAAAA,GAAAA,cAAA,OAAKG,UAAWsmF,GAAG,QAAS,CAAC,iBAAkBh9E,IAAKk+E,GACjDG,EAAkBloF,KAAI,CAACkhD,EAAUnhC,KAChC,GAAKmhC,EACL,OACE9gD,EAAAA,GAAAA,cAAC2mF,GAAwB,CACvBniF,KAAKg9C,EAAAA,EAAAA,IAAqBV,EAASA,UACnC8lC,aAAcjnE,EACd22B,QAASA,EACTwwC,iBAAkBA,EAClBhmC,SAAUA,EACV+lC,OAAQmB,EAAoBvyC,IAAI91B,IAChC,MAKN,IC4VV,IAAe/hB,EAAAA,EAAAA,KA3U0B0qF,EACvCroC,qBACAhhD,SACA9I,UACAw+E,YACAhkC,uBACA62C,mBACAE,qBACAa,SACAC,aACAC,gBACAj5C,gBACAk5C,WACAC,UACAC,YACAC,SACAC,WACAxnF,YACAS,YACA27C,aACAqrC,iBACAC,mBACAC,UACAC,cACAC,YACA7rC,cACA8rC,aACAC,YACAC,eACAje,eACAke,kBACAC,oBACAxoF,gBACAyoF,oBACAC,gBACAC,wBACAC,sBACAC,oBACAC,iBACAvN,kBACAwN,UACAC,eACAC,SACAC,QACAptC,UACAz6C,YACA28C,YACA98C,YACAioF,WACAC,iBACAC,mBACAplC,YACAqlC,UACAC,gBACAnrF,WACA4mB,uBACAwkE,cACAC,gBACAC,cACAC,aACAC,gBACAC,eACAC,gBACAC,kBACAjE,oBACAkE,kBACAC,cACAC,WACAC,mBACAC,eACAC,kBACAC,wBAEA,MAAM,iBAAExjE,GAAgB,eAAEg0D,GAAc,oBAAEyP,GAAmB,eAAC/sC,KAAmBj/C,EAAAA,EAAAA,MAE3EisF,IAAUrwF,EAAAA,EAAAA,IAAuB,MAEjCswF,IAAgBtwF,EAAAA,EAAAA,IAAuB,MACvC2E,IAAOC,EAAAA,EAAAA,KAEP2rF,GAAgB9B,MADDjV,IAAc6S,GAE7BmE,KAAuB,OAAQx1F,GAC/BomB,GAAaovE,GAAkC,GAAbx1F,EAAQZ,IAEzC+gD,GAASs1C,GAAaC,KAAiBnpF,EAAAA,EAAAA,MACxC,SAAEC,KAAaC,EAAAA,EAAAA,MAEfkpF,IAAkBrsF,EAAAA,EAAAA,KAAY,KAClCqoB,GAAiB,CACf3xB,QAAS2J,GAAK,uBAEhBV,IAAS,GACR,CAACU,GAAMV,GAAS0oB,KAkBbikE,KAhB4BtsF,EAAAA,EAAAA,KAAY,KACvC88E,IAC0B,IAA3BA,EAAgBp4E,OAClB23E,GAAe,CACb3oC,eAAgB,CACdxT,UAAW48C,EAAgB,GAAG58C,aAIlC4rD,GAAoB,CAClB7zC,OAAQ6kC,EAAgB38E,KAAKlD,GAAQA,EAAInH,OAG7C6J,KAAS,GACR,CAACm9E,EAAiBn9E,GAASmsF,GAAqBzP,KAE/B6P,GAChB,GJvMC,SACLx1F,EACA61F,EACAxB,EACAQ,EACAP,GAEA,MAAM3iD,EAAwB,GACxB3iC,GAAO8mF,EAAAA,EAAAA,IAAe91F,GACtBgC,GAAQC,EAAAA,EAAAA,IAAgBjC,MACvByC,EAAAA,EAAAA,IAAuBzC,QAA6CkC,GAAlCK,EAAAA,EAAAA,IAAuBvC,IAC1D00B,GAAUqhE,EAAAA,EAAAA,IAAkB/1F,GAC5BkgD,GAAYp8C,EAAAA,EAAAA,IAAoB9D,EAAS,UACzCg2F,EAAmBh0F,IAAUk+C,IAAa+1C,EAAAA,EAAAA,IAAuBj2F,KAAak2F,GAAAA,GAC9EC,EAAY3vF,OAAO4vF,eAezB,GAbIJ,GACFrkD,EAAQjkC,KAAK,CACXwpB,MAAO,yBACPvpB,KAAM,aACN+uD,QAASA,KACP25B,QAAQC,QAAQp2C,EAAYq2C,GAAAA,GAAkBr2C,EAAWj8C,EAAAA,GAAAA,SAA0BjC,EAAO2C,SACvFuhC,KAAKswD,GAAAA,IAERX,KAAe,IAKjB7mF,EAAM,CAER,MAAMu/E,EAAeprF,QACnBgzF,GAAWM,YAAYC,YACnBP,EAAUM,WAAWC,WAA2Bv3F,QAAQ,4BACD,KAAxDg3F,EAAUhkD,WAAWvW,QAAQ,kBAAmB,KAGrD+V,EAAQjkC,KAAK,CACXwpB,MAAOo3D,GAAaC,GACpB5gF,KAAM,OACN+uD,QAASA,KACP,MAAMnzD,GAAaotF,EAAAA,GAAAA,KACnB,GAAIptF,GAAYyE,QAAU6mF,EACxBA,EAAetrF,QACV,GAAIglF,EACT3wF,SAASg5F,YAAY,YAChB,CACL,MAAMC,GAAgBz6E,EAAAA,EAAAA,GACpBpc,OAASkC,OAAWA,OAAWA,OAAWA,OAAWA,GAAW,GAE9D20F,IAAeC,EAAAA,GAAAA,IAAoBD,EAAc77E,KAAK,KAAK+7E,EAAAA,EAAAA,IAA2B/2F,GAC5F,CAEA61F,KAAe,GAGrB,CA0BA,OAxBIxB,GACF1iD,EAAQjkC,KAAK,CACXwpB,MAAO,OACPvpB,KAAM,OACN+uD,QAASA,KACP23B,IAEAwB,KAAe,IAKjBnhE,GAAW4/D,GACb3iD,EAAQjkC,KAAK,CACXwpB,MAAO,yBACPvpB,KAAM,OACN+uD,QAASA,KACP43B,IAEAuB,KAAe,IAKdlkD,CACT,CIqHMqlD,CACAh3F,EAAS21F,GAAiB5C,EAAcsB,QAAanyF,EAAW2yF,GAAgBP,KAG9E2C,IAAoB3tF,EAAAA,EAAAA,KAAY,IAC7BksF,GACH53F,SAASe,cAAc,+DACvBf,SAASe,cAAe,kEAAiEynB,SAC5F,CAACovE,GAAoBpvE,KAElB8wE,IAAiB5tF,EAAAA,EAAAA,KACrB,IAAM1L,SAASe,cAAc,8CAC7B,IAGIw4F,IAAiB7tF,EAAAA,EAAAA,KACrB,IAAM1L,SAASe,cAAc,gCAC7B,IAGIy4F,IAAY9tF,EAAAA,EAAAA,KAAY,KAC5B,MAAM+tF,EAA0B7qF,IAC1B5O,SAASe,cAA2B,yBAA0Ba,cAAiB,EAC/E83F,EAAgB15F,SAASe,cAA2B,gCACpD44F,GAAuB/qF,KAAa6qF,IACnC7qF,IAAY8qF,GAAex5F,UAAU0uB,SAAS,gBAChD8qE,GAAe93F,cAAiB,EAErC,MAAO,CACLg4F,cAjJkB,GAkJlBC,gBAAkB75F,SAASe,cAA2B,iBAAmBa,aACzEk4F,YAAanC,GAlJiB,QAkJ6BrzF,EAC3Dy1F,eAAgBJ,EAAoBF,EACrC,GACA,CAAC7qF,GAAU+oF,MAEdrvF,EAAAA,EAAAA,KAAU,KACH4C,EAKLrC,YAAW,KACTgvF,IAAa,GA7JQ,KAwJrBC,IAMoB,GACrB,CAAC5sF,EAAQ2sF,GAAaC,KAEzB,MAAM,UACJvnF,GAAS,UAAEiG,GAAS,iBAAE+wC,GAAgB,iBAAEyyC,GAAgB,MAAE93F,GAAK,UAAE+3F,GAAS,WAAEC,KAC1EC,EAAAA,GAAAA,GAAuB3F,EAAQ6E,GAAmBC,GAAgBC,GAAgBC,IAiBtF,OAfAlxF,EAAAA,EAAAA,KAAU,KACR4pF,GAAiBgI,GAAaxC,GAAcnwF,aAAUjD,EAAW,qBAE1DiuF,KACN,CAAC2H,MAEyBxuF,EAAAA,EAAAA,KAAY,KACnC,OAAQtJ,GACVqoD,GAAe,CACblgD,OAAQnI,EAAQmI,OAChB6vF,MAAOh4F,EAAQZ,KAGnB6J,IAAS,GACR,CAACo/C,KAEFx+C,EAAAA,GAAAA,cAACsK,GAAAA,EAAI,CACHb,IAAK+hF,GACLvsF,OAAQA,EACRq8C,iBAAkBA,GAClByyC,iBAAkBA,GAClBzpF,UAAWA,GACXiG,UAAWA,GACXtU,MAAOA,GACPm4F,YAAaJ,GACb7tF,WAAW+F,EAAAA,GAAAA,GACT,qBAAsB,QAASwlF,IAAiB,kBAElDtsF,QAASA,GACT4mB,oBAAqBA,IAEpB0lE,IACC1rF,EAAAA,GAAAA,cAACunF,GAAgB,CACfC,iBAAkBA,EAClBC,iBAAmBkE,QAAkDtzF,EAA7BlC,EAAQ4pD,WAAWS,QAC3DknC,mBAAoBA,EACpBZ,iBAAkBA,GAClBnS,UAAWA,EACX10B,mBAAoBA,EACpB3J,QAASA,GACT9G,cAAeA,EACfmB,qBAAsBA,IAI1B3wC,EAAAA,GAAAA,cAAA,OACEG,UAAU,mCACVlK,MAAO+3F,GACPvkF,IAAKgiF,IAELzrF,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,eAAetD,QAAS0qF,IAAUprF,GAAK,OAErDurE,GAAgBrrE,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,WAAWtD,QAAS4qF,IAActrF,GAAK,qBACtEypF,GAAmBvpF,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,WAAWtD,QAAS6qF,IAAiBvrF,GAAK,SAC5E0pF,GACAxpF,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,MAAMtD,QAAS8qF,IAAmBxrF,GAAK,OAGvDE,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,cAActD,QAAS2pF,IAAUrqF,GAAK,OAMpD4oF,GAAY1oF,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,QAAQtD,QAASupF,GAAUjqF,GAAK,UAQ3D6oF,GAAW3oF,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,OAAOtD,QAASypF,GAASnqF,GAAK,SAYxDmpF,GAAW8C,GAAYnsF,KAAKooC,GAC3BhoC,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACC,IAAKwjC,EAAO3a,MAAOvpB,KAAMkkC,EAAOlkC,KAAMtD,QAASwnC,EAAO6qB,SAAU/yD,GAAKkoC,EAAO3a,UAOtFiwB,GACCt9C,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,WAAWtD,QAASkqF,IAChB5qF,GAAhBkB,EAAqB,8BAAsC,uBAI/DmoF,GAAanpF,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,SAAStD,QAASykD,IAAWnlD,GAAK,kBAqC9DwB,GAAatB,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAAC+5B,aAAW,EAACx6B,KAAK,SAAStD,QAASw+C,IAAWl/C,GAAK,WAsB1E6rF,IAAsB3rF,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,OAAOtD,QAASyqF,IAAanrF,GAAK,0BAOtE,I,2BCjaX,MAgGA,IAAelC,EAAAA,EAAAA,KAhGkBywF,EAC/BpvF,SACAqvF,mBACAC,cACAhyE,YACAje,SACAc,cAEA,MAAMtB,GAASwoB,EAAAA,EAAAA,OACRkoE,EAAUC,IAAejpF,EAAAA,EAAAA,IAAS,KAClCkpF,EAAgBC,IAAqBnpF,EAAAA,EAAAA,KAAS,IAC9CL,EAAMypF,IAAWppF,EAAAA,EAAAA,IAAS,KACjCnJ,EAAAA,EAAAA,KAAU,KAiCL4C,GAhCU4oC,WAEX,IAAIj9B,GADJikF,EAAAA,GAAAA,KAAgB,GAEhB,MAAMC,EAAYC,GAAAA,GAEZ54F,GAAUqb,EAAAA,EAAAA,IAAkB1T,EAAOQ,EAAOie,GAChD,GAAGpmB,GAASmI,OAAO,CACjB,MAAMkf,GAAO9e,EAAAA,EAAAA,KAAW4nB,EAAAA,EAAAA,MAAYnwB,GAASmI,QAC7CswF,EAAS,qBAAoBpxE,GAAMgX,gBAAgBhX,GAAMiH,UAAU8uC,cAAc52D,OAAOqyF,SAAS/qF,SACnG,CAEGqqF,GAAoBC,GACrB3jF,QAAYqkF,EAAAA,GAAAA,GACV,CAAC,UAAUV,EAAY,UAAUD,GACjC,GACA,UACAQ,IAEct9E,EAAAA,EAAAA,IAAkB1T,EAAOQ,EAAOiwF,IAEhD3jF,QAAYqkF,EAAAA,GAAAA,GACV,CAAC,UAAU1yE,GACX,GACA,UACAuyE,GAKJL,EAAY7jF,IACZikF,EAAAA,GAAAA,KAAgB,EAAM,EAGtBK,EACF,GACA,CAACjwF,IAEH,MAAMkwF,GAAsB1vF,EAAAA,EAAAA,KAAYooC,UACtC,GAAG2mD,EAAS,CACV,MAAMvtB,QAAaC,EAAAA,EAAAA,IAAUstB,SACvBY,EAAAA,GAAAA,IAAoBnuB,IAC1B1hE,EAAAA,EAAAA,MAAauoB,iBAAiB,CAAC3xB,QAAQ,SACvCw4F,GAAkB,EACpB,IACC,CAACH,IAGJ,OADazuF,EAAAA,EAAAA,KAEXC,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJovF,iBAAiB,EACjB1wD,gBAAgB,EAChB1/B,OAAQA,EACRG,QAASA,KACPqvF,EAAY,IACZrvF,GAAS,EAEXgB,MAAO,MAEPJ,EAAAA,GAAAA,cAAA,WACGmF,GAEHnF,EAAAA,GAAAA,cAAA,OAAKG,UAAW,oBAEZquF,GACAxuF,EAAAA,GAAAA,cAAA,KAAGiE,KAAMuqF,EAAUr3E,OAAO,SAAShX,UAAW,eAAgBH,EAAAA,GAAAA,cAAA,OAAKxL,IAAKg6F,EAAU37E,IAAI,OAG1F7S,EAAAA,GAAAA,cAAA,OAAKG,UAAW,uBACdH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACuB,KAAK,SAASpB,QAAS2uF,EAAqBtlF,QAAQ,EAAM4qD,WAAY+5B,EAAU9jF,UAAW8jF,GAAU,UAG7GxuF,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACL4D,KAAO,yCAAwCqrF,mBAAmBnqF,iBAAoBmqF,mBAAmBd,KACzG5sF,KAAK,SACLuV,OAAQ,SACRtN,QAAQ,EAAMa,UAAWgkF,GAAgB,wBAIvC,ICodZ,IAAe9wF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAU3H,UAASwL,kBAAiB4tF,uBACnC,MAAM,SAAEvxF,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,CAAC,EACpD0xF,GAAkBC,EAAAA,EAAAA,IAAwB3xF,EAAQ3H,EAAQmI,QAC1DF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQ3H,EAAQmI,SAClC,gBAAEoxF,EAAe,qBAAEC,EAAoB,mBAAEjI,GAAuB5pF,EAAOytC,WAAa,CAAC,GACrF,UACJqkD,EAAS,SACTlH,EAAQ,OACRG,EAAM,SACNC,EAAQ,UACRxnF,EAAS,UACTS,EAAS,QACT4mF,EAAO,WACPjrC,EAAU,eACVqrC,EAAc,iBACdC,EAAgB,QAChBC,EAAO,YACPC,EAAW,UACXC,EAAS,YACT7rC,EAAW,WACX8rC,EAAU,UACVC,EAAS,aACTC,GACGtrF,IAAYG,EAAAA,EAAAA,IAA4BL,EAAQ3H,EAAS6H,IAAc,CAAC,EAEvE6xF,GAAQC,EAAAA,EAAAA,IAAa35F,GACrBkvD,EAA+B,WAApB1jD,EACXouF,EAAkC,cAApBpuF,EACdwoB,EAAY/rB,IAAQ69C,EAAAA,EAAAA,IAAc79C,GAClC4xF,GAAUC,EAAAA,EAAAA,IAAe95F,GACzBuzF,EAAgBpwF,QAAQ8E,GACzBuxF,GACAD,IACAQ,EAAAA,EAAAA,IAAY9xF,IACZyxF,IACCE,GACD3xF,EAAKgxE,cACLhxE,EAAKgxE,cAAgBugB,GACrBx5F,EAAQynB,KAAOvH,KAAKC,MAAQ,IAAOo5E,GAClC/a,EAAYv2E,IAAQI,EAAAA,EAAAA,IAASJ,EAAK7I,IAClC46F,GAAWC,EAAAA,EAAAA,IAAgBj6F,GAC3BwzF,GAAyBqG,IAAY7lE,IAAc4lE,IAAgBI,IAAaxb,GAAax+E,EAAQ4pD,aACrGswC,EAAAA,EAAAA,IAAkBl6F,EAAQ4pD,YAAc5pD,EAAQ4pD,UAAUuwC,WAC1DpvF,GAAcC,EAAAA,EAAAA,IAAyBrD,EAAQ3H,GAC/Co6F,EAAgBj3F,QAAQnD,EAAQkc,QAAQwY,SACxC8lB,GAAuB1F,EAAAA,EAAAA,IAA2BntC,GAElD0yF,GAAsBC,EAAAA,EAAAA,IAA6B3yF,EAAQ3H,GAC3Du6F,EAA6BF,GAAqB5wF,KAAKlD,IAAQw9C,EAAAA,EAAAA,IAAiBp8C,EAAQpB,KACxF6/E,EAAkBmU,GAA4BC,MAAqBr3F,SACrEo3F,OAA6Br4F,EAE3Bu4F,GAA6BntC,EAAAA,EAAAA,IAAmC3lD,EAAQ3H,EAAQmI,OAAQnI,EAAQZ,IAChGs7F,EAAiBD,EACnBt3F,SAAQw3F,EAAAA,EAAAA,IAA0BhzF,EAAQ3H,EAAQmI,OAAQsyF,GAA4Bz6F,EAAQZ,KAAK4P,WACnG9M,GAEIgzE,aAAc0lB,EAAoB,SAAE5lB,EAAQ,eAAEG,GAAmBxtE,EAAO2e,SAASC,OACnF,kBAAEs0E,GAAsBlzF,EACxBmzF,EAAUD,EAAkB76F,EAAQmI,SAAW,CAAC,EACtD,IAAIgwF,EAAiBC,GAElB0C,EAAQ96F,EAAQZ,KACjB+4F,EAAmBn4F,EAAQZ,GAC3Bg5F,GAAc0C,EAAQ96F,EAAQZ,KAE9BQ,OAAOw2D,KAAK0kC,GAASr4C,SAAQrjD,IACxB07F,EAAQ17F,KAAQY,EAAQZ,KACzBg5F,GAAcp4F,EAAQZ,GACtB+4F,EAAmB4C,SAAS37F,GAC9B,IAGJ,MAAM47F,IAAwB5B,IACvBjkB,EAAe91E,SAAS+5F,IAAqBpkB,IAAaokB,EAC3DlkB,GAAe+lB,EAAAA,IAA4BL,GAAwB56F,EAAQkc,QAAQlN,MACpFgsF,KAAyBnB,IAAYD,IAAgBI,IAAaU,IAAmB16F,EAAQk7F,eAElG,MAAO,CACL/C,mBACAC,eACAtuC,mBAAoBniD,EAAOmiD,mBAC3B2vC,YACApH,WAAYuH,EACZtH,cAAesH,EACfrH,UAAWrjC,IAAa0qC,GAAerH,EACvCG,QAASkH,GAAelH,EACxBC,UAAWiH,GAAejH,EAC1BxnF,YACAS,YACA4mF,SAAUtjC,GAAYsjC,EACtBjrC,YAAaqyC,GAAeryC,EAC5BqrC,gBAAiBgH,GAAehH,EAChCC,kBAAmB+G,GAAe/G,EAClCC,QAASsH,IAAmBrvF,GAAe+nF,EAC3CC,aAAc6G,GAAe7G,EAC7BC,YACA7rC,aAAcp8C,GAAeo8C,EAC7B8rC,YAAaloF,GAAekoF,EAC5BC,YACAC,cAAeyG,GAAezG,EAC9BkG,kBACA9F,gBACAlC,iBAAkBppF,GAAMkzF,iBAAcj5F,EAAY+F,GAAMqmB,UAAU+iE,iBAClEE,qBACA/S,YACAhkC,uBACA4gD,YAAaj4F,QAAQ8E,GAAMqmB,UAC3BklE,wBACAC,qBAAsBoG,IAAYG,IAAaJ,GAAe3xF,GAAM7I,KAAOi8F,EAAAA,IAC3EhiD,eAAgBmB,KAAyBlB,EAAAA,EAAAA,IAA+B3xC,GACxE0yF,sBACAjU,kBACAkV,wBAAwBC,EAAAA,EAAAA,IAA6B5zF,EAAQ3H,EAAQmI,QACrEN,WACAqtE,gBACAke,gBAAiBsH,EACjBrH,kBAAmBqH,EACpB,GAvHehzF,EAxdoC8zF,EACtDrD,mBACAC,cACAtuC,qBACAhhD,SACA0C,kBACAiwF,eACAz7F,UACAq6F,sBACAjU,kBACAr9E,QACAqpF,SACAqH,YACApH,aACA+I,cACA9I,gBACAC,WACAG,SACAY,oBACAX,WACAxnF,YACAS,YACA4nF,wBACAC,sBACAjB,UACAnB,mBACAE,qBACA/S,YACAhkC,uBACA+M,aACAlO,gBACAu5C,iBACAC,mBACAC,UACAC,cACAC,YACA7rC,cACA8rC,aACAC,YACAC,eACAkG,kBACA5G,YACAc,gBACA+H,yBACApmB,eACAke,kBACAC,oBACAxrF,WACAoB,UACA4mB,2BAEA,MAAM,SACJkR,GAAQ,gBACR26D,GAAe,QACf1H,GAAO,aACP2H,GAAY,WACZx1C,GAAU,gBACVr9B,GAAe,YACf8yE,GAAW,cACXC,GAAa,uBACbC,GAAsB,sBACtBC,GAAqB,kBACrBC,GAAiB,qBACjBtvF,GAAoB,2BACpBC,GAA0B,WAC1BsvF,GAAU,gBACVC,GAAe,qBACfC,GAAoB,aACpBC,GAAY,aACZpyC,GAAY,kBACZqyC,GAAiB,QACjBC,GAAO,aACP/gD,GAAY,eACZghD,GAAc,UACdC,GAAS,eACTC,GAAc,0BACdjvC,GAAyB,oBACzBkvC,GAAmB,yBACnBC,KACEvzF,EAAAA,EAAAA,MAEEO,IAAOC,EAAAA,EAAAA,MACP,qBAAE+O,KAAyBE,EAAAA,GAAAA,GAAkB/P,EAAQ+mB,QAAqB3tB,GAAW,IACpFglC,GAAY01D,KAAiBvtF,EAAAA,EAAAA,KAAS,IACtCjD,GAAmBywF,KAAwBxtF,EAAAA,EAAAA,KAAS,IACpD6Z,GAAmB4zE,KAAwBztF,EAAAA,EAAAA,KAAS,IACpD0tF,GAAkBC,KAAuB3tF,EAAAA,EAAAA,KAAS,IAClD4tF,GAAgBC,KAAqB7tF,EAAAA,EAAAA,KAAS,IAC9C8tF,GAAuBC,GAAqBC,KAAwB9wF,EAAAA,EAAAA,MAEpE+wF,GAAiBC,KAAYC,EAAAA,GAAAA,GAAYlC,EAAwBryF,EAASjJ,EAAQynB,MAGnFksE,QAAyCzxF,IAAxBm4F,GAAqCl3F,QAAQk3F,EAAoBrsF,SAExF9H,EAAAA,EAAAA,KAAU,KACJqtF,GAAiBzqF,GACnBmzF,GAAW,CAAE9zF,OAAQnI,EAAQmI,OAAQie,UAAWpmB,EAAQZ,IAC1D,GACC,CAAC68F,GAAYnzF,EAAQ9I,EAAQmI,OAAQnI,EAAQZ,GAAIm0F,KAEpDrtF,EAAAA,EAAAA,KAAU,KACJstF,GAAyB1qF,GAC3BkhD,GAAa,CAAE7hD,OAAQnI,EAAQmI,OAAQie,UAAWpmB,EAAQZ,IAC5D,GACC,CAACo0F,EAAuB1qF,EAAQkhD,GAAchqD,EAAQmI,OAAQnI,EAAQZ,MAEzE8G,EAAAA,EAAAA,KAAU,KACJm0F,GAAqBrsF,QAAUo4E,GAAiBp4E,SAAWqsF,EAAoBrsF,QACjFqsF,EAAoB53C,SAASl8C,IAC3Bg1C,GAAa,CAAEyB,eAAgBz2C,GAAM,GAEzC,GACC,CAAC8zF,EAAqBjU,EAAiB7qC,MAE1Cr1C,EAAAA,EAAAA,KAAU,KACHk1F,GAAgB5c,IAAa11E,GAChCszF,GAAa,CAAEj0F,OAAQnI,EAAQmI,QACjC,GACC,CAACizF,EAAatyF,EAAQ01E,EAAW4d,GAAcp8F,EAAQmI,SAE1D,MAAMurF,IAAoBhwF,EAAAA,EAAAA,KAAQ,KAChC,GAAI1D,EAAQ4pD,WAAW6zC,iBAAiBzvF,OAAQ,CAE9C,MAAMoiB,GAAYD,EAAAA,EAAAA,MAAYE,MAAM1B,KAE9B+uE,EAAiB,IAAIh/C,IAAI1+C,EAAQ4pD,WAAW6zC,iBAAiBh0F,KAAI,EAAG2zB,YAAahN,EAAUgN,MAEjG,OAAO6O,MAAMtrB,KAAK+8E,GAAgBluE,OAAOrsB,SAAS+qC,MAAM,EAAG,EAC7D,CAEA,IAAKluC,EAAQopD,cACX,OAIF,MAAMh5B,GAAYD,EAAAA,EAAAA,MAAYE,MAAM1B,KACpC,OAAO3uB,EAAQopD,eAAelb,MAAM,EAAG,GAAGzkC,KAAKrK,GAAOgxB,EAAUhxB,KAAKowB,OAAOrsB,QAAQ,GACnF,CAACnD,EAAQ4pD,WAAW6zC,gBAAiBz9F,EAAQopD,gBAE1Cv+C,GAAgB9B,EAAQA,EAAMS,SAASq0C,MAAM8/C,GAAQtE,EAAgBh6F,SAASs+F,EAAIv+F,MACpFi6F,EAAgBh6F,SAASW,EAAQZ,IAE/B6wD,IAAe3mD,EAAAA,EAAAA,KAAY,KAC/BszF,IAAc,GACdC,IAAqB,EAAK,GACzB,IAEGe,IAAet0F,EAAAA,EAAAA,KAAY,KAC/BszF,IAAc,GACdE,IAAqB,EAAK,GACzB,IAEGe,IAAYv0F,EAAAA,EAAAA,KAAY,KAC5BszF,IAAc,GACd3zF,GAAS,GACR,CAACA,IAEEqD,IAAmBhD,EAAAA,EAAAA,KAAY,KACnCuzF,IAAqB,GACrB5zF,GAAS,GACR,CAACA,IAEEmgB,IAAmB9f,EAAAA,EAAAA,KAAY,KACnCwzF,IAAqB,GACrB7zF,GAAS,GACR,CAACA,IAEE60F,IAAkBx0F,EAAAA,EAAAA,KAAY,KAClC0zF,IAAoB,GACpB/zF,GAAS,GACR,CAACA,IACE80F,IAAgBz0F,EAAAA,EAAAA,KAAY,KAChC4zF,IAAkB,GAClBj0F,GAAS,GACR,CAACA,IAEE+0F,IAAc10F,EAAAA,EAAAA,KAAY,KAC9B0qF,GAAQ,CAAE5tE,UAAWpmB,EAAQZ,GAAG+I,OAAOnI,EAAQmI,SAC/C01F,IAAW,GACT,CAAC79F,EAAQZ,GAAIy+F,KAEXI,IAAc30F,EAAAA,EAAAA,KAAY,KAC9BoyF,GAAgB,CAAEt1E,UAAWpmB,EAAQZ,KACrCy+F,IAAW,GACV,CAACnC,GAAiB17F,EAAQZ,GAAIy+F,KAE3BK,IAAmB50F,EAAAA,EAAAA,KAAY,KACnCy3B,GAAS,CACP3hC,GAAIY,EAAQmI,OACZN,SAAU7H,EAAQZ,KAEpBy+F,IAAW,GACV,CAACA,GAAW79F,EAAQmI,OAAQnI,EAAQZ,GAAI2hC,KAErCo9D,IAAa70F,EAAAA,EAAAA,KAAY,KAC7BqyF,GAAa,CAAEv1E,UAAWpmB,EAAQZ,KAClCy+F,IAAW,GACV,CAAClC,GAAc37F,EAAQZ,GAAIy+F,KAExBO,IAAY90F,EAAAA,EAAAA,KAAY,KAC5BszF,IAAc,GACdM,IAAkB,EAAK,GACtB,IAEGmB,IAAc/0F,EAAAA,EAAAA,KAAY,KAC9B68C,GAAW,CAAE//B,UAAWpmB,EAAQZ,GAAIinD,SAAS,IAC7Cw3C,IAAW,GACV,CAAC13C,GAAYnmD,EAAQZ,GAAIy+F,KAEtBrwE,IAAgBlkB,EAAAA,EAAAA,KAAY,KAEhC,GADAu0F,KACI90F,GAAOS,SAAU,CACnB,MAAMD,EAAaR,EAAMS,SAASC,KAAI,EAAGrK,QAASA,IAClD0pB,GAAgB,CAAE2E,WAAYztB,EAAQmI,OAAQoB,cAChD,MACEuf,GAAgB,CAAE2E,WAAYztB,EAAQmI,OAAQoB,WAAY,CAACvJ,EAAQZ,KACrE,GACC,CAAC0pB,GAAiB9oB,EAAS69F,GAAW90F,IAEnCu1F,IAAoBh1F,EAAAA,EAAAA,KAAY,KACpCu0F,KACAjC,GAAY,CAAEjvD,QAAS3sC,EAAQkc,QAAQywB,SAAW,GACjD,CAACkxD,GAAW79F,EAAQkc,QAAQywB,QAASivD,KAElC2C,IAAsBj1F,EAAAA,EAAAA,KAAY,KACtCu0F,KACAhC,GAAc,CAAElvD,QAAS3sC,EAAQkc,QAAQywB,SAAW,GACnD,CAACkxD,GAAW79F,EAAQkc,QAAQywB,QAASkvD,KAElC2C,IAAmBl1F,EAAAA,EAAAA,KAAY,KACnCu0F,KACAtB,GAAe,CAAEp0F,OAAQnI,EAAQmI,OAAQie,UAAWpmB,EAAQZ,IAAK,GAChE,CAACy+F,GAAW79F,EAASu8F,KAElBkC,IAAkBn1F,EAAAA,EAAAA,KAAY,KAClCu0F,KACArB,GAAU,CAAEr0F,OAAQnI,EAAQmI,OAAQie,UAAWpmB,EAAQZ,IAAK,GAC3D,CAACy+F,GAAW79F,EAASw8F,KAElBkC,IAAsBp1F,EAAAA,EAAAA,KAAY,KACtC,MAAMq1F,EAAS51F,GAAOS,SAClB,CACA4c,UAAWpmB,EAAQZ,GACnBw/F,gBAAiB71F,EAAMS,SAASC,KAAI,EAAGrK,QAASA,IAChDy/F,WAAW,GAEX,CAAEz4E,UAAWpmB,EAAQZ,GAAIy/F,WAAW,GAExC/C,GAAuB6C,GACvBd,IAAW,GACV,CAACA,GAAW79F,EAAQZ,GAAI08F,GAAwB/yF,IAE7C+1F,IAA6Bx1F,EAAAA,EAAAA,KAAY,KAC7CyyF,GAAsB,CAAE5zF,OAAQnI,EAAQmI,OAAQ/I,GAAIY,EAAQZ,KAC5Dy+F,IAAW,GACV,CAACA,GAAW79F,EAAQmI,OAAQnI,EAAQZ,GAAI28F,KAErCgD,IAA0Bz1F,EAAAA,EAAAA,KAAa01F,IAC3ChD,GAAkB,CAChB7zF,OAAQnI,EAAQmI,OAChBie,UAAWpmB,EAAQZ,GACnB4/F,gBAEF/1F,GAAS,GACR,CAACjJ,EAAQmI,OAAQnI,EAAQZ,GAAI6J,EAAS+yF,KAEnCiD,IAAqB31F,EAAAA,EAAAA,KAAY,KACrCszF,IAAc,GACdU,GAAgByB,GAAwB,GACvC,CAACA,GAAyBzB,KAEvB4B,IAAwB51F,EAAAA,EAAAA,KAAY,KACxCu0F,KACA3B,GAAgB,CAAE/zF,OAAQnI,EAAQmI,OAAQie,UAAWpmB,EAAQZ,IAAK,GACjE,CAACy+F,GAAW79F,EAAQmI,OAAQnI,EAAQZ,GAAI88F,KAErCiD,IAA6B71F,EAAAA,EAAAA,KAAY,KAC7Cu0F,KACA1B,GAAqB,CAAEh0F,OAAQnI,EAAQmI,OAAQie,UAAWpmB,EAAQZ,IAAK,GACtE,CAACy+F,GAAW1B,GAAsBn8F,EAAQmI,OAAQnI,EAAQZ,KAEvDggG,IAAqB91F,EAAAA,EAAAA,KAAaC,IACtC8yF,GAAkB,CAAE9yF,eACpBs0F,IAAW,GACV,CAACA,GAAWxB,KAETgD,IAAiB/1F,EAAAA,EAAAA,KAAY,MACjCsyD,EAAAA,GAAAA,KAAoB0jC,EAAAA,EAAAA,IAAmBt/F,EAAQmI,OAAQszF,EAAc5zF,EAAU7H,EAAQZ,KACvFy+F,IAAW,GACV,CAACpC,EAAcoC,GAAW79F,EAAS6H,IAEhC03F,IAAmBj2F,EAAAA,EAAAA,KAAY,MACnCsyD,EAAAA,GAAAA,IAAoB57D,EAAQkc,QAAQwY,QAASiK,aAC7Ck/D,IAAW,GACV,CAACA,GAAW79F,IAET+M,IAAsBzD,EAAAA,EAAAA,KAAY,MACrCP,GAAOS,UAAY,CAACxJ,IAAUyiD,SAASk7C,IAClC9yF,GACF8B,GAA2B,CAAE3M,QAAS29F,IAEtCjxF,GAAqB,CAAE1M,QAAS29F,GAClC,IAEFE,IAAW,GACV,CAAC90F,EAAO/I,EAAS69F,GAAWhzF,GAAe8B,GAA4BD,KAEpE8yF,IAAgBl2F,EAAAA,EAAAA,KAAY,KAChC,MAAM1I,GAAQyB,EAAAA,EAAAA,IAAgBrC,GAC9Bs8F,GAAQ,CAAEmD,IAAK7+F,IACfi9F,IAAW,GACV,CAACA,GAAW79F,EAASs8F,KAElBoD,IAAuBp2F,EAAAA,EAAAA,KAAaqhD,IACxC8xC,GAAe,CACbt0F,OAAQnI,EAAQmI,OAAQie,UAAWpmB,EAAQZ,GAAIurD,aAEjDkzC,IAAW,GACV,CAACA,GAAW79F,EAASy8F,KAElBkD,IAAkBr2F,EAAAA,EAAAA,KAAY,KAClCkkD,GAA0B,CACxBrlD,OAAQnI,EAAQmI,OAChB/I,GAAIY,EAAQZ,KAEdy+F,IAAW,GACV,CAACA,GAAW79F,EAASwtD,KAElBoyC,IAAqBt2F,EAAAA,EAAAA,KAAY,KACrCozF,GAAoB,CAClBv0F,OAAQnI,EAAQmI,OAChB/I,GAAIY,EAAQZ,KAEdy+F,IAAW,GACV,CAACA,GAAW79F,EAAS08F,KAClBmD,IAAcv2F,EAAAA,EAAAA,KAAY,KAC9BszF,IAAc,GACdn2F,YAAW,KACTu2F,IAAoB,EAAK,GACzB,IAAI,GACN,CAACA,KACG8C,IAAuBx2F,EAAAA,EAAAA,KAAY,KACvCqzF,GAAyB,CACvBx0F,OAAQnI,EAAQmI,OAChB/I,GAAIY,EAAQZ,KAEdy+F,IAAW,GACV,CAACA,GAAW79F,EAAQmI,OAAQnI,EAAQZ,GAAIu9F,KAErCoD,IAAmBr8F,EAAAA,EAAAA,KAAQ,KAAOqF,EAAQA,EAAMS,SAAW,CAACxJ,IAAUyJ,KAAI,EAAGrK,QAASA,KAAK,CAAC2J,EAAO/I,IAEzG,GAAIy5F,EAGF,YAFAoE,KAKF,MAAMmC,GAAmB,IAAI9/E,KAG7B,OAFA8/E,GAAiBllE,YAAYklE,GAAiBtmE,cAAgB,GAG5D7vB,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAe,uBAAwB4I,KACrD9O,EAAAA,GAAAA,cAACsoF,GAAkB,CACjBroC,mBAAoBA,EACpB9pD,QAASA,EACTw+E,UAAWA,EACXhkC,qBAAsBA,EACtBnB,cAAeA,EACfvwC,OAAQo+B,GACRmqD,iBAAkBA,EAClBE,mBAAoBA,EACpBa,OAAQA,EACRoB,sBAAuBA,EACvBC,oBAAqBA,EACrBpB,WAAYA,EACZC,cAAeA,EACfC,SAAUA,EACVpnF,UAAWA,EACXS,UAAWA,EACX8mF,OAAQA,EACRY,kBAAmBA,EACnBX,SAAUA,EACVH,QAASA,EACTjrC,WAAYA,EACZqrC,eAAgBA,EAChBC,iBAAkBA,EAClBC,QAASA,EACTC,YAAaA,EACbC,UAAWA,EACX7rC,YAAaA,EACb8rC,WAAYA,EACZC,UAAWA,EACXC,aAAcA,EACdI,cAAeA,EACfre,cAAc,EACdke,gBAAiBA,EACjBC,mBAAmB,EACnBM,eAAgBA,GAChBvN,gBAAiBA,EACjBv7E,cAAeA,GACf6oF,kBAAmBA,GACnBjB,UAAWA,EACXoB,aAAcqK,GACdtK,QAASqK,GACTjK,QAASgK,GACTlK,OAAQqK,GACRpK,MAAOqK,GACPz3C,QAAS03C,GACTnyF,UAAWshB,GACXq7B,SAAUoH,GACVlkD,SAAU6xF,GACV3J,cAAeqK,GACfpK,gBAAiBqK,GACjBzvC,SAAU4vC,GACVvK,OAAQ2K,GACR1K,aAAc6K,GACdh2F,QAAS40F,GACTxJ,WAAYgL,GACZxK,eAAgBuK,GAChB9K,aAAciL,GACdhL,WAAYxnF,GACZynF,UAAWgL,GACX/K,aAAc+J,GACd9J,YAAa0I,GACbzI,aAAcuK,GACdvO,iBAAkB+O,GAClB9K,eAAgBuK,GAChBlK,YAAa0K,GACbzK,eAAgB0K,GAChBzK,iBAAkB2K,GAClB/K,QAAS8K,KAEXh2F,EAAAA,GAAAA,cAAChB,GAAkB,CACjBC,OAAQsD,GACRxE,WAAgC,cAApB4D,EACZvC,QAASqD,GACTvD,MAAOA,EACP/I,QAASA,IAEX6J,EAAAA,GAAAA,cAAC2kB,EAAAA,EAAW,CACV1lB,OAAQogB,GACRjgB,QAASmgB,GACT7f,WAAYw2F,KAGdl2F,EAAAA,GAAAA,cAACo2F,GAAU,CACT75E,UAAWpmB,EAAQZ,GACnB+4F,iBAAkBA,EAClBC,YAAaA,EACbjwF,OAAQnI,EAAQmI,OAChBW,OAAQi0F,GACR9zF,QAAS60F,KAEXj0F,EAAAA,GAAAA,cAACq8C,GAAe,CACdp9C,OAAQm0F,GACR72E,UAAWpmB,EAAQZ,GACnB+I,OAAQnI,EAAQmI,OAChBc,QAAS80F,KAEXl0F,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQq0F,GACRl0F,QAASo0F,GACTruF,KAAMrF,GAAK,0BACXisB,aAAcjsB,GAAK,uBACnBksB,eAAgB4oE,KAEjBnM,GAAiBiL,GACd,KC/fV,IAAe91F,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACL0xC,gBAAgBvE,EAAAA,EAAAA,IAA2BntC,MAAY2xC,EAAAA,EAAAA,IAA+B3xC,MAHxED,EA3CoDw4F,EACtElgG,UACAoyF,SACA0C,aACA7rF,UACA4mB,sBACAwpB,oBAEA,MAAM,iBAAE7B,IAAqBpuC,EAAAA,EAAAA,OAEtB89B,EAAW,CAAG22D,IAAatxF,EAAAA,EAAAA,IAAQ,IACpC,qBAAEoM,IAAyBE,EAAAA,GAAAA,GAAkBquB,EAAYrX,OAAqB3tB,GAAW,GAEzFi+F,GAAqB72F,EAAAA,EAAAA,KAAY,KACrCwrF,IACA+I,GAAW,GACV,CAACA,EAAW/I,IAETsL,GAAsB92F,EAAAA,EAAAA,KAAY,KACtCu0F,IACArmD,IACAvuC,GAAS,GACR,CAAC40F,EAAW50F,EAASuuC,IAExB,GAAK46C,EAIL,OACEvoF,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAe,uBAAwB4I,IACrD9O,EAAAA,GAAAA,cAACsoF,GAAkB,CACjBrpF,OAAQo+B,EACRkrD,OAAQA,EACRpyF,QAASA,EACTiJ,QAAS40F,EACThuE,oBAAqBguE,EACrB/I,WAAYqL,EACZnL,gBAAiB37C,EAAgB+mD,OAAsBl+F,IAErD,KCqKV,IAAeuF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAU04F,cAAaC,0BACtB,MAAM11F,GAAqB9C,EAAAA,EAAAA,IAAyBH,IAC9C,OAAEQ,EAAM,SAAEN,GAAa+C,GAAsB,CAAC,EAC9C3C,EAAOE,IAAUD,EAAAA,EAAAA,IAAWP,EAAQQ,GACpCo4F,EAAct4F,GAAOu4F,EAAAA,EAAAA,IAA4Bv4F,QAAQ/F,EACzDu+F,EAAat4F,GAAUN,GAAW64F,EAAAA,EAAAA,IAAiB/4F,EAAQQ,EAAQN,QAAY3F,EAC/Ey+F,EAAax9F,QAAQs9F,GAAYG,iBACjCC,EAAkB19F,QACtB8E,GAAQJ,IAAY2oB,EAAAA,EAAAA,IAAiBvoB,EAAMJ,EAAU84F,IAAeJ,GAAaM,iBAE7EvmD,EAAkBn3C,QAAQgF,KAAW4f,EAAAA,EAAAA,IAAqBpgB,EAAQQ,GAElE60C,EAAiBqjD,EAAcA,EAAYrjD,eAC7CsjD,EAAsB,CAAE92D,UAAW82D,QAAwBp+F,EAEzDg4C,EAAa8C,GAAiB+G,EAAAA,EAAAA,IAAiBp8C,EAAQq1C,QAAkB96C,EAE/E,MAAO,CACLo5F,uBAAwBn4F,QAAQgF,KAAWozF,EAAAA,EAAAA,IAA6B5zF,EAAQQ,GAChF04F,kBACAvmD,kBACAwmD,gBAAgBC,EAAAA,EAAAA,IAAqBp5F,GACrCuyC,aACAM,sBAAsB1F,EAAAA,EAAAA,IAA2BntC,GAClD,GAzBeD,EAlL+Bs5F,EACjDl4F,SACAu3F,cACAC,sBACApmD,aACA2mD,kBACAvF,yBACAwF,iBACAxmD,kBACAE,uBACAvxC,cAEA,MAAM,aACJsyC,EAAY,iBACZD,EAAgB,YAChBhoB,EAAW,iBACX3B,IACEvoB,EAAAA,EAAAA,MAGEiU,GAAerY,EAAAA,EAAAA,IAAuB,MAEtCw2C,GAAkBx2C,EAAAA,EAAAA,IAA0B,MAE5C2E,GAAOC,EAAAA,EAAAA,MAEP,SAAE4C,IAAaC,EAAAA,EAAAA,MAEfw0F,GAAiB/iF,EAAAA,EAAAA,GAAYg8B,GAC7BgnD,EAAsBhnD,GAAc+mD,EAEpCE,EAAUh+F,SAAS+9F,GAAqBjjD,YAAcijD,GAAqBljD,eAC3EzB,EAAU2kD,GAAqB3kD,SAE9B+gD,EAAiBC,IAAYC,EAAAA,GAAAA,GAAYlC,IAG9Cl5C,QAASxH,IACPyH,EAAAA,GAAAA,IAAwB,CAAEC,QAASjlC,EAAcklC,WAxCzB,IAwC4D38C,YAAakD,KAErG5C,EAAAA,EAAAA,KAAU,KACJ4C,IAAWo4F,GAAqBtzD,UAClC2N,EAAa,CACXyB,eAAgBqjD,EAAcA,EAAYrjD,eAAiB,CAAExT,UAAW82D,IAE5E,GACC,CAACx3F,EAAQu3F,EAAa9kD,EAAc+kD,EAAqBY,IAE5D,MAAMxzC,GAAepkD,EAAAA,EAAAA,KAAY,CAACqjC,EAAqB6Z,EAAoB46C,KACzEz0D,EAAU,IACLA,EACH00D,qBAAqB,GAGnBP,GAAkBM,EACpB9D,GAAiB0B,IACf1rE,EAAY,CACVqZ,UAAS6Z,WAAUw4C,gBAErB/1F,GAAS,KAGXqqB,EAAY,CAAEqZ,UAAS6Z,WAAU86C,6BAA8BH,IAC/Dl4F,IACF,GACC,CAACA,EAASq0F,EAAiBhqE,EAAawtE,EAAgBK,IAErDI,GAAoBj4F,EAAAA,EAAAA,KAAY,KAChC43F,IACF5lD,EAAiB,CAAEsB,aAAcskD,EAAoB9hG,KACrD6J,IACF,GACC,CAACA,EAASi4F,EAAqB5lD,IAE5B+jD,GAAiB/1F,EAAAA,EAAAA,KAAY,KACjC,IAAK43F,EAAqB,OAC1B,MAAM,UAAE13D,GAAc03D,EAChBM,EAASjlD,EAAU,WAAa,cAChC9nC,EAAO,GAAEyuB,EAAAA,MAAkBs+D,KAAUh4D,KAC3CoyB,EAAAA,GAAAA,IAAoBnnD,GACpBkd,EAAiB,CACf3xB,QAAS2J,EAAK,eACd,GACD,CAAC4yC,EAAS5yC,EAAMu3F,EAAqBvvE,IAclCsV,GAAkEvjC,EAAAA,EAAAA,KAAQ,IACvE,EAAG0J,YAAWtE,OAAQo+B,KAC3Br9B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLqG,QAASlH,EACTnG,KAAK,UACL8D,MAAM,cACNH,UAAWk9B,EAAa,SAAW,GACnC78B,QAAS+C,EACTE,UAAU,gBAEVzD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGhB,CAACwC,IAsBJ,OACE3C,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UAAU,kBACVlB,OAAQA,EACRG,QAASA,EACTorB,OAvBAxqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAekG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACtD2H,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACmD,OAAK,EAAClD,MAAM,cAAc9D,KAAK,UAAUiH,UAAW3D,EAAK,SAAUU,QAASpB,GAClFY,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACZk3F,GAAsB35E,EAAAA,GAAAA,GAAW25E,EAAoBj3F,MAAO,CAAC,QAAS,UAAYN,EAAK,uBAE1FE,EAAAA,GAAAA,cAACoE,EAAAA,EAAY,CACXjE,UAAU,2CACVkE,QAAS+4B,EACT94B,UAAU,SAEVtE,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,OAAOtD,QAASg1F,GAAiB11F,EAAK,oBAaxDu3F,GAAqBtzD,SACpB/jC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKyJ,IAAK+J,EAAcrT,UAAU,0BAChCH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAAA,UAAQyJ,IAAKkoC,EAAiBxxC,UAAU,kBACvCk3F,EAAoBtzD,SAASnkC,KAAKkjC,GACjC9iC,EAAAA,GAAAA,cAACo1C,GAAAA,EAAa,CACZtS,QAASA,EACTtmC,KAAMk2C,EAAUklD,EAAAA,IAAmBC,EAAAA,IACnC9mD,oBAAqBA,EACrBvwC,QAASw2F,IAAoBtkD,EAAUmR,OAAexrD,EACtDk9C,SAAUzS,EACV2N,gBAAiBA,EACjBE,qBAAsBA,EACtBgB,gBAAiBA,QAKzB3xC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACL7D,KAAK,UACLu4C,OAAK,EACLz0C,MAAOg3F,EAAU,SAAW,UAC5B92F,QAASk3F,GA/EII,MACvB,IAAKT,EAAqB,OAAOv3F,EAAK,WAEtC,MAAM63F,EAASjlD,EAAU,QAAU,UAEnC,OAAO5yC,EACLw3F,EAAW,qBAAoBK,SAAiB,kBAAiBA,SACjEN,EAAoBl1D,MACpB,IACD,EAwEU21D,MAKP93F,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,MAET04C,EACK,KCnOZ,IAAgB,KAAO,uBAAuB,KAAO,wBCoErD,IAAe91F,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAU69E,wBACT,MAAMY,EAAkBZ,GAAmB/7E,KAAKrK,GAAOuI,EAAOimC,SAAS8S,SAASthD,KAEhF,MAAO,CACLgnF,kBACD,GANe1+E,EA1CoCk6F,EACtDxb,kBACAn9E,cAEA,MAAM,eAAE08E,IAAmBv8E,EAAAA,EAAAA,MAGrBy4F,GAAsB78F,EAAAA,EAAAA,IAAuB,OAC3Co9C,QAASQ,IAAiCP,EAAAA,GAAAA,IAAwB,CAAEC,QAASu/C,IAE/EC,GAAsB5jF,EAAAA,EAAAA,GAAYkoE,GAClC2b,EAA2B3b,GAAmB0b,EAE9CE,GAAiB14F,EAAAA,EAAAA,KAAaqjC,IAClCg5C,EAAe,CACb3oC,eAAgBrQ,EAAQqQ,gBACxB,GACD,CAAC2oC,IAEJ,OACE97E,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQ3F,QAAQijF,GAChBp8E,UAAWrK,GAAAA,KACXsJ,QAASA,EACTu/B,gBAAc,EACdv+B,MAAM,sBAENJ,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAepQ,GAAAA,KAAa,iBAAkB2T,IAAKuuF,GAChEE,GAA0Bt4F,KAAKw4F,GAC9Bp4F,EAAAA,GAAAA,cAACq7E,GAAc,CACb72E,IAAK4zF,EAAe7iG,GACpB4K,UAAWrK,GAAAA,QACXu6C,WAAY+nD,EACZ53F,QAAS23F,EACTpnD,oBAAqBgI,OAIrB,K,4BCnBZ,MAAMs/C,GAA+D,CACnE57E,SAAU,CACR3Y,KAAM,OACNupB,MAAO,eAET47C,QAAS,CACPnlE,KAAM,OACNupB,MAAO,WAETirE,KAAM,CACJx0F,KAAM,OACNupB,MAAO,YAgeX,IAAezvB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,SAAQN,eACjB,MAAMI,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAChC,IAAKF,GAAQA,EAAKm6F,aAChB,MAAO,CAAC,EAEV,MAAM5jB,GAAYn2E,EAAAA,EAAAA,IAASJ,EAAK7I,IAC1BioB,EAAOm3D,GAAYj2E,EAAAA,EAAAA,IAAWZ,EAAQQ,QAAUjG,EAChDmgG,EAAgBh7E,IAAQi7E,EAAAA,EAAAA,IAAiBj7E,GACzCk7E,EAAe16F,IAAa4oB,EAAAA,GAC5B+xE,EAAgBD,KAAiBz8C,EAAAA,EAAAA,IAAc79C,KAAS8xF,EAAAA,EAAAA,IAAY9xF,IAAUof,IAASA,EAAK0qC,SAC1F5pD,OAAQs6F,EAAe56F,SAAU66F,IAAoB56F,EAAAA,EAAAA,IAAyBH,IAAW,CAAC,EAE5Fg7F,EAAUx6F,IAAWy6F,EAAAA,KAAkBC,EAAAA,EAAAA,IAAcl7F,EAAQQ,QAAUjG,EACvE4gG,EAAiB3/F,QACrBwE,EAAO2pD,cACJjqC,GAAMiH,UAAUgpB,cAActpC,UAC7BsrC,EAAAA,EAAAA,IAA+B3xC,IAG/Bo7F,EAAQ96F,GAAM+6F,SAASn7F,GACvBo7F,EAAiBh7F,EAAKi7F,UAC1Bj7F,EAAKk7F,aAAcC,EAAAA,EAAAA,IAAkBn7F,EAAM,kBAAmBo7F,EAAAA,EAAAA,IAAiBp7F,EAAM,iBAEjFq7F,EAAeP,IAASQ,EAAAA,EAAAA,IAAkBt7F,EAAM86F,GAEtD,MAAO,CACL96F,OACAgJ,SAASm+C,EAAAA,EAAAA,IAAkBnnD,GAAMonD,EAAAA,EAAAA,IAAqB1nD,IAAS2nD,EAAAA,EAAAA,IAAuB3nD,IACtF62E,YACAglB,QAASv7F,GAAMi7F,UAAYX,EAC3BW,QAASj7F,GAAMi7F,QACfb,gBACAG,gBACAiB,eAAeC,EAAAA,EAAAA,IAAiBz7F,GAChC66F,iBACAa,cAAexgG,QAAQ8E,GAAMqmB,UAAUs1E,cACvCC,YAAalB,GAASr0E,UAAU2kC,SAAS6wC,SACzCC,iBAAiB5oF,EAAAA,EAAAA,IAAexT,GAAQo8F,iBACnCtB,IAAkBt6F,GAAUu6F,IAAoB76F,EACrDo7F,iBACAK,eACD,GA1Ce57F,EA9amCs8F,EACrD77F,SACAN,WACAiB,SACAm7F,mBACA7R,SACAp+D,YACA6vE,cACAK,mBACAV,UACAN,UACAa,kBACAI,cACAC,gBACAC,eACAC,YACAC,UACAC,UACAC,oBACAC,sBACAC,WACAC,oBACAC,qBACA58F,OACAu2E,YACAvtE,UACAuxF,gBACAiB,gBACAX,iBACAa,gBACAtB,gBACAY,iBACAK,eACAwB,sBACAC,qBACAC,gBACAC,oBACAh8F,UACA4mB,0BAEA,MAAM,qBACJq1E,EAAoB,uBACpBC,EAAsB,eACtB7xC,EAAc,WACd8xC,EAAU,8BACVC,EAA6B,gBAC7BC,EAAe,eACfC,EAAc,qBACdC,EAAoB,4BACpBC,EAA2B,iBAC3BC,EAAgB,qBAChBC,GAAoB,iBACpBC,GAAgB,qBAChBC,GAAoB,mBACpBC,GAAkB,SAClB/kE,KACE33B,EAAAA,EAAAA,OAEE,SAAEoD,KAAaC,EAAAA,EAAAA,OACdy6B,GAAY01D,KAAiBvtF,EAAAA,EAAAA,KAAS,IACtCjD,GAAmBywF,KAAwBxtF,EAAAA,EAAAA,KAAS,IACpD6Z,GAAmB4zE,KAAwBztF,EAAAA,EAAAA,KAAS,IACrD,EAAEmO,GAAC,EAAEC,IAAM20E,GAEjBv5E,EAAAA,GAAAA,GAAkB/P,EAAQ+mB,OAAqB3tB,GAAW,GAC1D,MAAM6jG,IAAuBC,EAAAA,GAAAA,KACzBjC,IAAmBb,SAAkBhhG,EApEL,KAuE9B07F,IAAet0F,EAAAA,EAAAA,KAAY,KAC/BszF,IAAc,GACdE,IAAqB,EAAK,GACzB,IAEG1zE,IAAmB9f,EAAAA,EAAAA,KAAY,KACnCwzF,IAAqB,GACrB7zF,GAAS,GACR,CAACA,IAEEgnD,IAAe3mD,EAAAA,EAAAA,KAAY,KAC/BszF,IAAc,GACdC,IAAqB,EAAK,GACzB,IAEGgB,IAAYv0F,EAAAA,EAAAA,KAAY,KAC5BszF,IAAc,GACd3zF,GAAS,GACR,CAACA,IAEEg9F,IAAsB38F,EAAAA,EAAAA,KAAY,KACtCs8F,GAAiB,CAAExmG,GAAI+I,EAAQN,aAC/Bg2F,IAAW,GACV,CAAC11F,EAAQ01F,GAAW+H,GAAkB/9F,IAEnCyE,IAAmBhD,EAAAA,EAAAA,KAAY,KACnCuzF,IAAqB,GACrB5zF,GAAS,GACR,CAACA,IAEEi9F,IAAiB58F,EAAAA,EAAAA,KAAY,KACjCgqD,EAAe,CAAEG,QAAS,UAAW,GACpC,CAACH,IAEE6yC,IAAmB78F,EAAAA,EAAAA,KAAY,KACnC87F,EAAW,CAAEj9F,UAAS,GACrB,CAACA,EAAQi9F,IAENgB,IAAwB98F,EAAAA,EAAAA,KAAY,KACxC47F,EAAqB,CAAE/8F,SAAQ8I,SAAUA,IACzC4sF,IAAW,GACV,CAAC11F,EAAQ01F,GAAW5sF,EAASi0F,IAE1BmB,IAAyB/8F,EAAAA,EAAAA,KAAY,KACzCu8F,GAAqB,CAAE19F,WACvB01F,IAAW,GACV,CAACgI,GAAsB19F,EAAQ01F,KAE5ByI,IAAuBh9F,EAAAA,EAAAA,KAAY,KACvCw8F,GAAmB,CAAE39F,SAAQ8pB,QAASpqB,IACtCg2F,IAAW,GACV,CAACiI,GAAoB39F,EAAQN,EAAUg2F,KAEpC0I,IAA0Bj9F,EAAAA,EAAAA,KAAY,KAC1Cy3B,GAAS,CAAE3hC,QAAI8C,IACf27F,IAAW,GACV,CAACA,GAAW98D,KAETylE,IAA4Bl9F,EAAAA,EAAAA,KAAY,KACxCu7F,EAEFS,EAAgB,CACdn9F,WAGFk9F,EAA8B,CAC5Bl9F,WAGJ01F,IAAW,GACV,CAACA,GAAWgH,EAAoB18F,EAAQk9F,EAA+BC,IAEpEmB,IAAwBn9F,EAAAA,EAAAA,KAAY,KACxCi8F,EAAe,CAAEnmG,GAAI+I,IACrB01F,IAAW,GACV,CAAC11F,EAAQ01F,GAAW0H,IAEjBmB,IAAyBp9F,EAAAA,EAAAA,KAAY,KACzCq8F,GAAqB,CAAE1uD,UAAW9uC,IAClC01F,IAAW,GACV,CAAC8H,GAAsBx9F,EAAQ01F,KAE5B8I,IAAwBr9F,EAAAA,EAAAA,KAAY,KACxCk8F,EAAqB,CAAEpoE,OAAQj1B,IAC/B01F,IAAW,GACV,CAAC2H,EAAsBr9F,EAAQ01F,KAE5B+I,IAAkBt9F,EAAAA,EAAAA,KAAY,KAClCy7F,IACAlH,IAAW,GACV,CAACA,GAAWkH,IAET8B,IAAkBv9F,EAAAA,EAAAA,KAAY,KAClCm8F,EAA4B,CAAEroE,OAAQj1B,EAAQ/E,SAAS,IACvDy6F,IAAW,GACV,CAAC11F,EAAQ01F,GAAW4H,IAEjBqB,IAAax9F,EAAAA,EAAAA,KAAY,KAC7Bm8F,EAA4B,CAAEroE,OAAQj1B,IACtC01F,IAAW,GACV,CAAC11F,EAAQ01F,GAAW4H,IAEjB73C,IAAetkD,EAAAA,EAAAA,KAAY,KAC/B07F,IACAnH,IAAW,GACV,CAACA,GAAWmH,IAET+B,IAAwBz9F,EAAAA,EAAAA,KAAY,KACxCo8F,IACA7H,IAAW,GACV,CAACA,GAAW6H,IAETsB,IAAuB19F,EAAAA,EAAAA,KAAY,KACvC67F,IACAtH,IAAW,GACV,CAACA,GAAWsH,IAET8B,IAAuB39F,EAAAA,EAAAA,KAAY,KACvC27F,IACApH,IAAW,GACV,CAACA,GAAWoH,KAEf/+F,EAAAA,EAAAA,KAAU,KACR4pF,KAEOK,KACN,IAEH,MAAMxmF,IAAOC,EAAAA,EAAAA,KAEPs9F,IAAaxjG,EAAAA,EAAAA,KAAQ,IAClBmgG,GAAap6F,KAAI,EAAGgqD,cACzB,MAAM0zC,EAAMjF,GAAYzuC,GACxB,GAAK0zC,EAML,OACEt9F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPC,IAAKolD,EACL9lD,KAAMw5F,EAAIx5F,KAEVtD,QAVgB6O,KAClBo6C,EAAe,CAAEG,QAAU,IAAGA,MAC9BoqC,IAAW,GAURl0F,GAAKw9F,EAAIjwE,OACD,KAGd,CAAC2sE,EAAahG,GAAWl0F,GAAM2pD,IAElC,OACEzpD,EAAAA,GAAAA,cAAC07C,GAAAA,EAAM,KACL17C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACsK,GAAAA,EAAI,CACHrL,OAAQo+B,GACR/4B,UAAU,QACVrO,MAAQ,SAAQ0d,aAAYC,QAC5BxU,QAAS40F,IAERqG,GAAoBjB,GACnBp5F,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,WACLtD,QAASg8F,IAER18F,GAAK,2BAERE,EAAAA,GAAAA,cAACu9F,GAAAA,EAAa,OAGjBrB,IACCl8F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,OACLtD,QAAS47F,IAEEt8F,GAAV65F,EAAe,yBAAiC,2BAGpDF,GACCz5F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,OACLtD,QAASi8F,IAER38F,GAAK,yBAGT6C,KAAa03F,GAAoBhB,IAAYM,GAC5C35F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,SACLtD,QAASk8F,IAER58F,GAAK,6BAGTu6F,GAAoB/gG,QAAQuhG,IAC3B76F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,OACLtD,QAASy6F,GAEIn7F,GAAZqqB,EAAiB,oBAA4B,kBAC9CnqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAe06F,IAGjCR,IAAqBV,GACpB35F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,UACLtD,QAAS48F,IAERt9F,GAAK,+BAGTs6F,GAAoBE,GACnBt6F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,OACLtD,QAAS67F,IAERv8F,GAAK,aAGTs6F,GAAoBG,GACnBv6F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,OACLtD,QAAS87F,IAERx8F,GAAK,eAGTs6F,GAAoBI,GACnBx6F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAMqmB,EAAY,UAAY,QAC9B3pB,QAASu8F,IAERj9F,GAAKqqB,EAAY,qBAAuB,qBAG5CquE,GACCx4F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,WACLtD,QAASs8F,IAERh9F,GAAK,eAGT6C,IAAY+3F,GACX16F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,QACLtD,QAASy8F,IAERn9F,GAAK,SAGT46F,GACC16F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,iBACLtD,QAASw8F,IAERl9F,GAAK,cAGT6C,IAAY83F,GACXz6F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,SACLtD,QAASujD,IAERjkD,GAAK,WAGT66F,GACC36F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAMsD,EAAU,SAAW,OAC3B5G,QAAS+7F,IAERz8F,GAAKsH,EAAU,cAAgB,eAGlC2zF,GAAqBC,IACrBh7F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,aACLtD,QAASm8F,IAER78F,GAAKk7F,EAAqB,gBAAkB,sBAGhDlB,GACC95F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAMqmB,EAAY,WAAa,UAC/B3pB,QAASo8F,IAER98F,GAAKqqB,EAAY,iBAAmB,8BAGvCkwE,GACAr6F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,SACLtD,QAAS28F,IAERr9F,GAAK,yBAGT86F,GACC56F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,QACLtD,QAAS08F,IAERp9F,GAAK,eAGT64F,GACC34F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,OACLtD,QAASuzF,IAERj0F,GAAK,sBAGTu9F,GACApE,GACCj5F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,OACLtD,QAASq8F,IAER/8F,GAAK,gBAGTg7F,GACC96F,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACu9F,GAAAA,EAAa,MACdv9F,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACP+5B,aAAW,EACXx6B,KAAK,SACLtD,QAAS4lD,IAERtmD,GAAK60E,EACF,iBACCilB,EAAgB,0BAA6BzvE,EAAY,eAAiB,uBAKtF/rB,GACC4B,EAAAA,GAAAA,cAAC0mD,GAAAA,EAAe,CACdznD,OAAQsD,GACRnD,QAASqD,GACTrE,KAAMA,IAGTu6F,GAAiBv6F,GAAM7I,IACtByK,EAAAA,GAAAA,cAAC2kB,EAAAA,EAAW,CACV1lB,OAAQogB,GACRjgB,QAASmgB,GACTqF,QAAQ,OACRtmB,OAAQF,EAAK7I,MAIZ,K,gBCjfb,MAAMioG,IAAwBhnF,EAAAA,GAAAA,KAAUqwC,GAAOA,KAAM,KAAK,GA+K1D,IAAejpD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAMM,GAAOi4B,EAAAA,EAAAA,IAAkBv4B,GAC/B,IAAKM,EACH,MAAO,CAAC,EAGV,MAAM,MAAEk1E,EAAK,QAAE9yB,IAAYi9C,EAAAA,EAAAA,IAAwB3/F,IAAW,CAAC,GACzD,SAAEE,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,CAAC,GACpD,WAAEyrE,EAAU,SAAE7qD,GAAa8hC,GAAW,CAAC,EAE7C,MAAO,CACLpiD,OACAk1E,QACA/J,aACAvrE,WACA0gB,WACAg/E,sBAAuBpkG,SAAQgY,EAAAA,EAAAA,IAAexT,GAAQk1B,2BACvD,GAlBen1B,EA7KuB8/F,EACzC/rF,WACAxT,OACAJ,WACAs1E,QACA/J,aACA7qD,WACAg/E,4BAEA,MAAM,wBACJE,EAAuB,wBACvBC,EAAuB,aACvB7gF,EAAY,qBACZ8gF,EAAoB,oBACpBC,IACEx+F,EAAAA,EAAAA,MAGEg1B,GAAWp5B,EAAAA,EAAAA,IAAyB,OACnC6iG,EAAcC,IAAmBz4F,EAAAA,EAAAA,IAAS,IAGjDnJ,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAE6hG,GAAmBvhG,OAC3B,IAAKuhG,EACH,OAGF,MAAMC,EAASpqG,SAASgvB,eAAe,QACjCld,EAAeA,KACnB,MAAM,cAAEs/C,GAAkBpxD,SAC1B,GAAIoxD,GAAkBA,IAAkB5wB,EAASj5B,QAAU,CACzD,MAAM,QAAE8iG,EAAO,OAAExiG,GAAWsiG,EAC5BC,EAAOloG,MAAMikB,UAAa,cAAakkF,OACvCD,EAAOloG,MAAM2F,OAAU,GAAEA,MACzB7H,SAASyrE,gBAAgB9pE,UAAY0oG,CACvC,MACED,EAAOloG,MAAMikB,UAAY,GACzBikF,EAAOloG,MAAM2F,OAAS,EACxB,EAKF,OAFAsiG,EAAen4F,iBAAiB,SAAUF,GAEnC,KACLq4F,EAAel4F,oBAAoB,SAAUH,EAAa,CAC3D,GACA,KAGHxJ,EAAAA,EAAAA,KAAU,KACJ+B,GAAM7I,IAAMmpB,GAAUva,QACxB6Y,EAAa,CAAE1e,OAAQF,EAAK7I,GAAIgnB,UAAWmC,EAAS,GAAI1gB,aACxDigG,EAAgB,IAEhBA,GAAiB,EACnB,GACC,CAAC7/F,GAAM7I,GAAIynB,EAAc0B,EAAU1gB,KAGtC3B,EAAAA,EAAAA,KAAU,KACR+lC,MAAMtrB,KAAK/iB,SAAS0C,iBAAmC,UAAUmiD,SAASylD,IACxEA,EAAM3zF,SAAWpR,QAAQsY,GAAYysF,IAAU9pE,EAASj5B,QAAQ,IAGlE8mC,MAAMtrB,KAAK/iB,SAAS0C,iBAAiC,yBAAyBmiD,SAAS0lD,IACrFA,EAAIC,gBAAkB3sF,EAAW,QAAU,MAAM,GACjD,GACD,CAACA,KAGJvV,EAAAA,EAAAA,KAAU,KACHuV,GACH2iB,EAASj5B,QAASkjG,MACpB,GACC,CAAC5sF,KAEJ3F,EAAAA,EAAAA,KAAgB,KACMlY,SAASe,cAAgC,uBACjD0pG,MAAM,GACjB,CAACd,IAEJ,MAAMe,GAAiCh/F,EAAAA,EAAAA,KAAai/F,IAClDd,EAAwB,CAAEtqB,MAAOorB,IAE7BA,EAASv6F,QACXq5F,GAAsBK,EACxB,GACC,CAACA,EAAyBD,IAEvBe,GAAWl/F,EAAAA,EAAAA,KAAY,KAC3B,GAAIrB,GAAQsgB,EAAU,CACpB,MAAMkgF,EAAgBZ,EAAe,EACrChhF,EAAa,CAAE1e,OAAQF,EAAK7I,GAAIgnB,UAAWmC,EAASkgF,GAAgB5gG,aACpEigG,EAAgBW,EAClB,IACC,CAACxgG,EAAMsgB,EAAUs/E,EAAchgG,IAE5B6gG,GAAap/F,EAAAA,EAAAA,KAAY,KAC7B,GAAIrB,GAAQsgB,EAAU,CACpB,MAAMkgF,EAAgBZ,EAAe,EACrChhF,EAAa,CAAE1e,OAAQF,EAAK7I,GAAIgnB,UAAWmC,EAASkgF,GAAgB5gG,aACpEigG,EAAgBW,EAClB,IACC,CAACxgG,EAAMsgB,EAAUs/E,EAAchgG,IAE5B8gG,GAA6Br/F,EAAAA,EAAAA,KAAY,KAC7Cq+F,GAAsB,GACrB,CAACA,IAEJ,OACE99F,EAAAA,GAAAA,cAAA,OAAKzK,GAAG,eAAe4K,UAAWyR,EAAW,SAAW,IACtD5R,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACL7D,KAAK,UACLgH,OAAK,EACLlD,MAAM,cACNE,QAASs+F,GAET9+F,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBAEfH,EAAAA,GAAAA,cAAC++F,GAAAA,EAAW,CACVt1F,IAAK8qB,EACLtqB,MAAOqpE,EACPppE,SAAUu0F,KAGdz+F,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACZmzE,EACC50D,GAAUva,OACP,GAAE65F,EAAe,QAAQz0B,IACxB7qD,IAAaA,EAASva,OACxB,aAEA,GAGFnE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cAENE,QAASA,IAAMu9F,EAAoB,CAAErvE,YAAYswE,EAAAA,GAAAA,IAAc3oF,KAAKC,SACpE7S,UAAU,2BAEVzD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oBAInBH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cACNE,QAASm+F,EACTj0F,UAAWgU,IAAaA,EAASva,QAAU65F,IAAiBt/E,EAASva,OAAS,GAE9EnE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAEfH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLhH,KAAK,UACL8D,MAAM,cACNE,QAASq+F,EACTn0F,UAAWgU,IAAaA,EAASva,QAA2B,IAAjB65F,GAE3Ch+F,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGb,K,4BC7MV,MAAMm+F,GAAMvqG,SAASC,cAAc,O,oDCAnC,MAAMirG,GAAY,EAEH,SAASC,GAAiBC,EAAYF,IACnD,MAAOG,EAAeC,IAAoB75F,EAAAA,EAAAA,KAAS,IAC5C85F,EAASC,IAAc/5F,EAAAA,EAAAA,KAAS,GASvC,MAAO,CAAE45F,gBAAeE,UAASE,cAPZ//F,EAAAA,EAAAA,KAAa0G,IAChC,MAAM,aAAEshC,EAAY,UAAE/xC,EAAS,aAAEiQ,GAAiBQ,EAAEgR,OAEpDkoF,EAAiB3pG,EAAYypG,GAC7BI,EAAW93D,EAAe/xC,EAAYiQ,EAAew5F,EAAU,GAC9D,CAACA,IAGN,C,wCChBe,SAASM,GACtBxqG,EACAyqG,EACAjsD,EAAS,EACTksD,GAAU,EACVC,GAAsB,EACtBC,GAAe,GAEf,MAAMC,EAAa7qG,EAAU4qG,EAAe,aAAe,aACrDE,EAAaD,EAAa7qG,EAAU4qG,EAAe,cAAgB,gBACnEG,EAA4C,iBAAvBN,EACvBzqG,EAAUwB,iBAA8BipG,GACxCA,GACE,OAAEv7F,GAAW67F,EACbC,EAA2B,GACjC,IAAIC,GAAU,EAEd,IAAK,IAAIvgF,EAAI,EAAGA,EAAIxb,EAAQwb,IAAK,CAC/B,MAAM9pB,EAAUmqG,EAAYrgF,GACtBrH,EAAKziB,EAAQgqG,EAAe,aAAe,aAC3CM,EAAK7nF,EAAKziB,EAAQgqG,EAAe,cAAgB,gBAKvD,GAJkBD,EACdO,GAAML,EAAarsD,GAAU0sD,GAAMJ,EAAatsD,EAChDn7B,GAAMynF,EAAatsD,GAAU0sD,GAAML,EAAarsD,EAGlDwsD,EAAep8F,KAAK8b,GACpBugF,GAAU,OACL,GAAIA,IAAYP,EACrB,KAEJ,CAEA,MAAO,CAAEK,cAAaC,iBACxB,CC1BA,SARA,SAAwBhrG,EAAwBY,EAAsBgqG,GAAe,GACnF,MAAMC,EAAa7qG,EAAU4qG,EAAe,aAAe,aACrDE,EAAaD,EAAa7qG,EAAU4qG,EAAe,cAAgB,gBACnEvnF,EAAKziB,EAAQgqG,EAAe,aAAe,aAC3CM,EAAK7nF,EAAKziB,EAAQgqG,EAAe,cAAgB,gBACvD,OAAOvnF,EAAKwnF,GAAcK,EAAKJ,CACjC,ECFMK,GAAkB,EAClBC,GAAgB,GAEP,SAASC,GAAsBjkF,EAAkB4H,EAAezQ,GAC7E,MAAMve,EAAYue,EAAalY,QAC/B,IAAKrG,GAAagvB,EAAQ,EACxB,OAEF,MAAM,eAAEg8E,EAAc,YAAED,GAAgBP,GACtCxqG,EACAonB,EACA+jF,IACA,GACA,GAGF,IAAKJ,EAAY77F,SAAW67F,EAAY/7E,GACtC,OAEF,MAAMs8E,EAAQN,EAAe,GAC7B,IAAKA,EAAezqG,SAASyuB,IACvBA,IAAUs8E,IAAUC,GAAevrG,EAAW+qG,EAAYO,IAAU,CACxE,MAAM5wF,EAAWsU,EAAQg8E,EAAeA,EAAe97F,OAAS,GAAK,QAAU,OAC/Ei2C,EAAAA,GAAAA,GAAiBnlD,EAAW+qG,EAAY/7E,GAAQtU,EAAU0wF,GAC5D,CACF,CCzBO,SAASI,IAAsB,SACpC7uF,EAAQ,aACRiuF,EAAY,iCACZa,EAAgC,6BAChCC,EAA4B,kBAC5BC,EAAiB,MACjBj/C,EAAK,kBACLk/C,EAAiB,SACjB57C,EAAQ,QACR7lD,IAYA,MAAO0hG,EAAmBC,IAAwBv7F,EAAAA,EAAAA,KAAU,GAEtDw7F,GAAmBvhG,EAAAA,EAAAA,KAAawhG,GAC/Bt/C,GAIErd,EAAAA,GAAAA,GAAcqd,EAAMx9C,OAAQ88F,IAHzB,GAIT,CAACt/C,IAEEu/C,GAAiBzhG,EAAAA,EAAAA,KAAY,CAACwK,EAAe9D,KACjDA,EAAEgK,iBACF4wF,GAAsB98E,GAAW+8E,EAAiB/8E,EAAQha,IAAQ,GACjE,CAAC82F,EAAsBC,IAEpBG,GAAmB1hG,EAAAA,EAAAA,KAAa0G,IACpC,GAAIw7C,GAASA,EAAMx9C,QAAU28F,GAAqB,EAAG,CACnD,MAAMM,EAAOz/C,EAAMm/C,GACnB,GAAIM,EAAM,CACR,IAAuB,IAAnBn8C,EAASm8C,GACX,OAAO,EAGTj7F,EAAEgK,gBACJ,CACF,CAEA,OAAO,CAAI,GACV,CAACwxC,EAAOsD,EAAU67C,IAEfO,GAAyB1/C,GAASm/C,EAAoBn/C,EAAMx9C,OAAS,EAmB3E,OAlBA9H,EAAAA,EAAAA,KAAU,KACHqkG,IAAoCW,GACvCN,EAAqBJ,GAAgC,EAAI,EAC3D,GACC,CAACU,EAAuBV,EAA8BD,KAEzDrkG,EAAAA,EAAAA,KAAU,IAAOuV,GAAWktC,EAAAA,GAAAA,GAAyB,CACnDG,MAAO7/C,EACPkiG,KAAMV,GAAqBf,OAAexnG,EAAa8N,GAAqB+6F,GAAgB,EAAG/6F,GAC/Fo7F,OAAQX,GAAqBf,OAAexnG,EAAa8N,GAAqB+6F,EAAe,EAAG/6F,GAChGq7F,OAAQZ,IAAsBf,OAAexnG,EAAa8N,GAAqB+6F,GAAgB,EAAG/6F,GAClGs7F,QAASb,IAAsBf,OAAexnG,EAAa8N,GAAqB+6F,EAAe,EAAG/6F,GAClGu7F,MAAOb,EAAoBM,OAAmB9oG,EAC9C6H,QAASihG,SACN9oG,GAAY,CACfuoG,EAAmBM,EAAgBC,EAAkBvvF,EAAUiuF,EAAczgG,EAASyhG,IAGjFC,CACT,CCjDA,MAoFA,IAAeljG,EAAAA,EAAAA,KApFsB+jG,EACnC1iG,SACAG,UACAwiG,mBACAC,oBAGA,MAAMruF,GAAerY,EAAAA,EAAAA,IAAuB,OACtC,aAAEyT,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB/P,OAAQ5G,OAAWA,GAAW,GAEzFypG,GAAmBriG,EAAAA,EAAAA,KAAY,CAAC8zB,EAAgBwuE,GAAa,KAEjE,MACMvkF,GADY8I,EAAAA,EAAAA,MAAYE,MAAM1B,KACbyO,GAClB/V,GAILokF,EAAiBpkF,EAAMukF,EAAW,GACjC,CAACH,IAEEI,GAAsBviG,EAAAA,EAAAA,KAAawiG,IACvCH,EAAiBG,EAAO1sG,IAAI,EAAK,GAChC,CAACusG,IAEEI,EAAuBzB,GAAsB,CACjD7uF,SAAU3S,EACV0iD,MAAOkgD,EACP58C,SAAU+8C,EACVnB,mBAAmB,EACnBH,kCAAkC,EAClCthG,aAGF/C,EAAAA,EAAAA,KAAU,KACRikG,GAAsB,uBAAwB4B,EAAsB1uF,EAAa,GAChF,CAAC0uF,KAEJ7lG,EAAAA,EAAAA,KAAU,KACJwlG,IAAkBA,EAAc19F,QAClC/E,GACF,GACC,CAACyiG,EAAeziG,IAEnB,MAAM+iG,GAAkB9tF,EAAAA,EAAAA,GACtBwtF,GAAe19F,OACX09F,OACAxpG,EACJuW,GAEIwzF,EAAsBP,IAAkBA,EAAc19F,OACxDg+F,EACAN,EAEJ,IAAKjzF,GAAiBwzF,IAAwBA,EAAoBj+F,OAChE,OAGF,MAAMhE,GAAY+F,EAAAA,GAAAA,GAChB,gDACA4I,GAGF,OACE9O,EAAAA,GAAAA,cAAA,OAAKG,UAAWA,EAAWsJ,IAAK+J,GAC7B4uF,GAAqBxiG,KAAI,EAAGrK,MAAM0uB,IACjCjkB,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKjP,EACL4K,UAAU,kCAEVK,QAASA,IAAMshG,EAAiBvsG,GAChC8/B,MAAO6sE,IAAyBj+E,GAEhCjkB,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CACdrsB,OAAQh+B,EACRgxD,WAAW,QACXT,cAAY,OAId,I,gECzGV,SAAwD,uBAAxD,GAA2U,uBC0BrUu8C,GAAmB,GAAKz8F,EAAAA,GAkH9B,IAAehI,EAAAA,EAAAA,KAhH2B0kG,EACxCC,aACApiG,YACAqiG,WACAC,0BACAC,uBACAz+E,QACA+6B,WACA2jD,sBAEA,MAAMC,EA0FR,SAAwBL,EAA2BE,GACjD,GAAIA,GAA2BF,EAAWM,MAAO,CAC/C,GAAIC,EAAAA,IAAAA,IAAkCP,EAAWQ,UAC/C,MAAO,QAET,GAAIC,EAAAA,IAAAA,IAAkCT,EAAWQ,UAC/C,MAAO,OAEX,CACA,MAAO,MACT,CApGsBE,CAAeV,EAAYE,GAEzCS,GAAqBzjG,EAAAA,EAAAA,KAAY,KACrCkjG,IAAkB1+E,EAAM,GACvB,CAACA,EAAO0+E,IAELtwF,GAAUxY,EAAAA,EAAAA,KAAQ,KACtB,OAAQ+oG,GACN,IAAK,QACH,OACE5iG,EAAAA,GAAAA,cAAA,OACEG,UAAWrK,GACXtB,IAAK+tG,EAAWznG,QAChB+X,IAAI,GACJxe,WAAW,IAGjB,IAAK,QACH,OACE2L,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACG1G,QAAQipG,EAAWM,OAAOl8F,WACzB3G,EAAAA,GAAAA,cAAA,OAAKG,UD3DuE,yBC2D1CgK,EAAAA,GAAAA,IAAoBo4F,EAAWM,MAAOl8F,WAE1E3G,EAAAA,GAAAA,cAAA,SACEG,UAAWrK,GACXtB,IAAK+tG,EAAWznG,QAChB6V,UAAQ,EACRZ,OAAK,EACLe,MAAI,EACJnD,yBAAuB,KAI/B,QACE,OACE3N,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACmjG,GAAAA,EAAI,CACHhjG,UD3EmN,uBC4EnNqkB,KAAM+9E,EAAWa,SACjBC,WAAWC,EAAAA,GAAAA,IAAiBf,EAAWa,SAAUb,EAAWQ,UAC5DQ,YAAahB,EAAWjoG,eACxBkC,KAAM+lG,EAAW/lG,KACjBgnG,SAAO,IAERxkD,GACCh/C,EAAAA,GAAAA,cAAA,KACEG,WAAW+F,EAAAA,GAAAA,GAAe,cAAepQ,GDpF2V,wBCqFpY0K,QAASA,IAAMw+C,EAAS/6B,MAI9B,GAEL,CAACs+E,EAAYK,EAAa3+E,EAAO+6B,IAE9BykD,EAAqC,SAAhBb,IAA2BF,EAChDgB,EAAuBpqG,QAAwB,SAAhBspG,GAA0BL,EAAWoB,qBACpEC,EAAsC,SAAhBhB,EAEtBiB,GAAgB39F,EAAAA,GAAAA,GACpB/F,EDlGmB,uBCkGKqiG,GDlG8F,uBCkGnEiB,GDlG4I,wBCqGjM,OACEzjG,EAAAA,GAAAA,cAAA,OAAKG,UAAW0jG,GACbxxF,EACDrS,EAAAA,GAAAA,cAAC8jG,GAAAA,EAAY,CACX78F,UAAWy8F,EACX1oG,aAAcunG,EAAWjoG,gBAAkBioG,EAAWznG,QACtDS,MAAO8mG,GACPzmG,OAAQymG,KAETuB,GACC5jG,EAAAA,GAAAA,cAAA,OAAKG,UD/GqP,wBCgHxPH,EAAAA,GAAAA,cAAA,KACEG,WAAW+F,EAAAA,GAAAA,GACTq8F,EAAWoB,oBAAsB,uBAAyB,eAC1D7tG,IAEF0K,QAAS0iG,IAEVlkD,GACCh/C,EAAAA,GAAAA,cAAA,KAAGG,WAAW+F,EAAAA,GAAAA,GAAe,cAAepQ,IAAoB0K,QAASA,IAAMw+C,EAAS/6B,MAI1F,I,gBC5HV,SAAwkB,uBAAxkB,GAAymB,uBC0lBzmB,IAAermB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAM,cACJwf,EAAa,aACbimF,EAAY,aACZhtD,EAAY,mBACZitD,GACElmG,EAEEM,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAC1B2f,GAAiBC,EAAAA,EAAAA,IAAqBpgB,EAAQQ,IAC9C,SAAE6sE,EAAQ,yBAAEkR,GAA6Bv+E,EAAO2e,SAASC,MACzDunF,EAAoBnmG,EAAOomG,cAAcC,EAAAA,KACzCD,EAAgB/4B,IAAag5B,EAAAA,IAA0BrmG,EAAOomG,cAAc/4B,QAAY9yE,EAE9F,MAAO,CACL4lB,iBACAH,gBACAsmF,iBAAkBhmG,GAAMqmB,UAAU4/E,QAClCN,eACAE,kBAAmBA,GAAmBK,SACtCJ,cAAeA,GAAeI,SAC9BjoB,2BACAkoB,oBAAqBxtD,EAAaytD,SAASzgE,SAC3C0gE,cAAcrxC,EAAAA,GAAAA,GAAmBt1D,EAAQ,iBACzCkmG,qBACD,GA1BenmG,EA7f+B6mG,EACjDpmG,SACAN,WACA2mG,cACAC,UACAC,wBACAJ,eACAnuD,UACAr4B,iBACAH,gBACAsmF,mBACAL,eACAE,oBACAC,gBACAjN,iBACA5a,2BACAkoB,sBACAP,qBACAc,2BACAC,yBACAC,oBACAC,0BACAC,sBACAC,kBACA7a,SACA8a,eACAC,UACAC,eACAC,kBACAttD,sBACAutD,iBACAC,oBAEA,MAAM,qBAAEC,EAAoB,eAAEC,EAAc,yBAAEC,IAA6BrmG,EAAAA,EAAAA,MAErEO,GAAOC,EAAAA,EAAAA,KAGP8lG,GAAgB1qG,EAAAA,EAAAA,IAAiC,MAEjDo5B,GAAWp5B,EAAAA,EAAAA,IAAuB,MAElC2qG,GAAiB3qG,EAAAA,EAAAA,MACjB4qG,GAAkB1xF,EAAAA,EAAAA,GAAYswF,GAC9BqB,EAAuBrB,EAAYxgG,OAASwgG,EAAcoB,GAC1D,SAAEpjG,IAAaC,EAAAA,EAAAA,OAEdqjG,EAAkBC,GAAgBC,KAAmBzjG,EAAAA,EAAAA,MAErD0jG,GAAsBC,KAA2B7gG,EAAAA,EAAAA,IACtDs/F,QAAAA,EAA4Bd,EAAmBsC,gBAE3CC,GAAsBjtG,SAAS8sG,IAAwBrB,KAA4BC,IAClFwB,GAAmBC,KAAwBjhG,EAAAA,EAAAA,IAASw+F,EAAmBwC,oBAG5EhH,aAAckH,GACdtH,cAAeuH,GACfrH,QAASsH,IACP1H,MAEIM,aAAcqH,GAAqBzH,cAAe0H,IAAyB5H,KAE7EjgG,GAAS3F,QAAQqrG,EAAYxgG,QAC7B4iG,GAAkBztG,QAAQ0sG,GAAsB7hG,SAC/C6iG,GAAWC,GAAaC,KAAiBxkG,EAAAA,EAAAA,MAEhDrG,EAAAA,EAAAA,KAAU,KACH4C,IACHknG,IACF,GACC,CAACA,GAAiBlnG,KAErB,MAAOkoG,GAAUC,KAAgBvtG,EAAAA,EAAAA,KAAQ,IACrBP,QAAQ0sG,GAAsBrV,OAAO9kC,GAAMA,EAAEg3C,OAASh3C,EAAEw7C,SACpD,EAAC,GAAM,GAEtB,CADU/tG,QAAQ0sG,GAAsBhyD,MAAM6X,GAAMA,EAAEg3C,OAASh3C,EAAEw7C,UACtD,IACjB,CAACrB,KAEGsB,GAAYC,KAAkB1tG,EAAAA,EAAAA,KAAQ,IACpBP,QAAQ0sG,GAAsBrV,OAAO9kC,GAAMA,EAAE83C,uBACzC,EAAC,GAAM,GAE3B,CADerqG,QAAQ0sG,GAAsBhyD,MAAM6X,GAAMA,EAAE83C,wBAC3C,IACtB,CAACqC,IAEEwB,IAAoBC,EAAAA,GAAAA,GAAsB,IAAGC,EAAAA,QAE7C,mBACJC,GAAkB,eAClBC,GAAc,qBACdC,GAAoB,YACpBC,GAAW,kBACXC,KACEC,EAAAA,GAAAA,GACF1uG,QAAQg9C,GAAW2uD,GAA2B8B,IAC9CnC,EACAO,EACAuC,EAAAA,IACA3D,EACAE,EACAC,IAGI,yBACJ+D,GAAwB,kBACxBC,GAAiB,wBACjBC,KACEC,EAAAA,GAAAA,GACF9uG,QAAQg9C,GAAW2uD,GAA2B8B,IAAmB1qB,GACjEuoB,EACAO,EACAqC,GACAjzE,EACAgwE,IAGI,qBACJ8D,GAAoB,oBACpBC,GAAmB,cACnBC,GAAa,qBACbC,KACEC,EAAAA,GAAAA,GACFnvG,QAAQg9C,GAAW2uD,GAA2B8B,IAC9CnC,EACAO,EACAqC,GACAjzE,EACA6vE,OACA/rG,EACAylB,IAGFzhB,EAAAA,EAAAA,KAAU,IAAO4C,IAAS6kB,EAAAA,EAAAA,GAAsBuhF,QAAWhtG,GAAY,CAAC4G,GAAQomG,KAEhFhpG,EAAAA,EAAAA,KAAU,KACJ4C,KACFonG,GAAwBvB,QAAAA,EAA4Bd,EAAmBsC,gBACvEG,GAAqBzC,EAAmBwC,mBAC1C,GACC,CAACxC,EAAoB/kG,GAAQ6lG,IAEhC,MACE4D,kBAAmBC,GAAoB,kBACvCC,GAAiB,uBACjBC,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuBlD,GAAgBhB,IAA0B5lG,IAE/D+pG,IAAkBvpG,EAAAA,EAAAA,KAAY,CAACk9C,EAAoBssD,KACnDhqG,MACYg4F,GAAkBgS,EAAuB1D,EACnD5oD,EAAW2oD,EAAehb,GACzBic,GAAqBC,IAC1BZ,EAAyB,CACvBU,eAAgBC,GAChBC,uBAEJ,GACC,CACDvnG,GAAQg4F,EAAgBsO,EAAiBD,EAAchb,EAAQic,GAAqBC,GACpFZ,IAOIsD,KAJmBzpG,EAAAA,EAAAA,KAAY,KACnCupG,IAAgB,EAAK,GACpB,CAACA,MAEoBvpG,EAAAA,EAAAA,KAAY,KAClCupG,IAAiB,GAChB,CAACA,MA0BEG,KAxBsB1pG,EAAAA,EAAAA,KAAY,KACtCupG,IAAgB,GAAO,EAAK,GAC3B,CAACA,MAsBoBvpG,EAAAA,EAAAA,KAAYooC,UAClC1hC,EAAEgK,iBACF+2F,KAEA,MAAM,aAAEkC,GAAiBjjG,EAEnBsiB,QAAc4gF,EAAAA,GAAAA,GAA8BD,EAAaznD,OAC3Dl5B,GAAOtkB,QACTihG,EAAa38E,EAAO8+E,GACtB,GACC,CAACA,GAAgBnC,EAAc8B,MAW5BllC,IAAmBviE,EAAAA,EAAAA,KAAa0G,IACpC,MAAM,MAAEsiB,GAAUtiB,EAAEgR,OACd8qD,GAAiBC,EAAAA,EAAAA,IAAcz5C,GAEjCw5C,GAAgB99D,QAClBihG,EAAanjC,EAAgBslC,GAC/B,GACC,CAACA,GAAgBnC,IAEdkE,IAAuB7pG,EAAAA,EAAAA,KAAY,MACvC2iE,EAAAA,GAAAA,GAAsB,KAAMj8D,GAAM67D,GAAiB77D,IAAG,GACrD,CAAC67D,KAEE5b,IAAe3mD,EAAAA,EAAAA,KAAawkB,IAChCihF,EAAoBP,EAAYh/E,QAAO,CAACkmC,EAAGlsC,IAAMA,IAAMsE,IAAO,GAC7D,CAAC0gF,EAAaO,IAEXqE,IAAuB9pG,EAAAA,EAAAA,KAAYooC,UACvCq9D,EAAoBP,EAAY/kG,KAAKisD,IAAC,IAAWA,EAAG83C,qBAAqB,MAAS,GACjF,CAACgB,EAAaO,IAEXsE,IAAwB/pG,EAAAA,EAAAA,KAAY,KACxCylG,EAAoBP,EAAY/kG,KAAKisD,IAAC,IAAWA,EAAG83C,yBAAqBtrG,MAAc,GACtF,CAACssG,EAAaO,IAEXuE,IAAsBhqG,EAAAA,EAAAA,KAAYooC,UACtCq9D,EAAoBP,EAAY/kG,KAAI,CAAC2iG,EAAY5iF,IAC3CA,IAAMsE,EACD,IACFs+E,EACHoB,qBAAsBpB,EAAWoB,0BAAuBtrG,GAIrDkqG,IACN,GACF,CAACoC,EAAaO,IAEX9nE,IAAkEvjC,EAAAA,EAAAA,KAAQ,IACvE,EAAG0J,YAAWtE,OAAQo+B,KAC3Br9B,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLqG,QAASlH,EACTnG,KAAK,UACL8D,MAAM,cACNH,UAAWk9B,EAAa,SAAW,GACnC78B,QAAS+C,EACTE,UAAU,gBAEVzD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGhB,CAACwC,IAEE+mG,IAAYC,EAAAA,GAAAA,IAAgB,KAChC,IAAK5C,GAAiB,OAEtB,MAAM6C,EAAuBnF,GV7WCoF,EU6WgCjF,IV5WhEtG,GAAIwL,UAAYD,GAChBE,EAAAA,GAAAA,IAAgBzL,IAChBA,GAAI7nG,iBAAiB,MAAMmiD,SAASoxD,IAClCA,EAAGC,YAAY,KAAK,IAEf3L,GAAI4L,aAAalwE,OAAO71B,QAAU,GANpC,IAA2B0lG,EU8W9B,OAAOD,GAtRoB,IAsR6BA,OAAuBvxG,CAAS,GACvF,CAACosG,EAAcG,EAASmC,KAErBoD,GAAiB5D,IAAuBa,IAEvCgD,GAAcC,GAAcC,KAAgBzwG,EAAAA,EAAAA,KAAQ,IACpDswG,IAAmBnE,EAIjB,CAHYA,EAAqBrV,OAAO9kC,GAAMi3C,EAAAA,IAAAA,IAAkCj3C,EAAEk3C,YACtEiD,EAAqBrV,OAAO9kC,GAAMm3C,EAAAA,IAAAA,IAAkCn3C,EAAEk3C,YACtEiD,EAAqBrV,OAAO9kC,GAAM0+C,EAAAA,IAAAA,IAAkC1+C,EAAEk3C,aAHpC,EAAC,GAAO,GAAO,IAKnE,CAACiD,EAAsBmE,KAE1B,IAAKnE,EACH,OAGF,MAAMwE,GAAaxE,EAAqB7hG,OAAS,EAEjD,IAAI/D,GAAQ,GAEVA,GAAQN,EADNsqG,GACW,0BACJC,GACI,0BACJC,GACI,0BAEA,yBAN2BtE,EAAqB7hG,OAAQ,KA2EvE,MAAMsmG,IAAwB7D,KAAmCE,GAEjE,OACE9mG,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJhB,OAAQA,GACRG,QAASimG,EACT76E,OAxEJ,WACE,GAAKw7E,EAIL,OACEhmG,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBAAyBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAChE2H,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACmD,OAAK,EAAClD,MAAM,cAAc9D,KAAK,UAAUiH,UAAU,qBAAqBjD,QAAS6kG,GACvFrlG,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAeC,IAC9BJ,EAAAA,GAAAA,cAACoE,EAAAA,EAAY,CACXjE,UAAU,mDACVkE,QAAS+4B,GACT94B,UAAU,SAEVtE,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,MAAMtD,QAAS8oG,IAAuBxpG,EAAK,QACzDqnG,IACCnnG,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,MAEKglG,IAAsBD,IAA2BwB,GAEhDvmG,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,WAAWtD,QAASA,IAAM6lG,IAAwB,IAC9DvmG,EAAK0qG,GAAa,yBAA2B,0BAIhDxqG,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,QAAQtD,QAASA,IAAM6lG,IAAwB,IAC3DmE,GAAa,oBAAsB,kBAIzCjE,KACCe,GACEtnG,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,kBAAkBtD,QAASgpG,IACvC1pG,EAAK,8BAGRE,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,UAAUtD,QAAS+oG,IAC/BzpG,EAAK,+BAMf0qG,KACChE,GACExmG,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CACPT,KAAK,kBAELtD,QAASA,IAAMimG,IAAqB,IACrC,qBAKDzmG,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,UAAUtD,QAASA,IAAMimG,IAAqB,IAAO,qBAQhF,CAQYiE,GACRvqG,WAAW+F,EAAAA,GAAAA,GDxdM,uBC0df8gG,IAAalxG,IACZ6wG,ID3dmK,uBC4dpKhkG,GD5d+C,uBC6d/CsjG,GD7duF,wBC+dzF5W,iBAAe,GAEfrvF,EAAAA,GAAAA,cAAA,OACEG,UAAWrK,GACX60G,YAAa1D,GACb2D,OAAQzB,GACR0B,WAvLN,SAAwB1kG,GACtBA,EAAEgK,iBAEE21F,EAAexqG,UACjBqB,OAAOP,aAAa0pG,EAAexqG,SACnCwqG,EAAexqG,aAAUjD,EAE7B,EAiLMyyG,YAxNmB3kG,IACvB,MAAQ4kG,cAAeC,EAAU7zF,OAAQ8zF,GAAe9kG,EAGnD8kG,EAA8B3uF,QAAS,IAAGxmB,QAAyBk1G,IACtElF,EAAexqG,QAAUqB,OAAOC,WAAWsqG,GAzLnB,MA6LtB+D,GAAeA,EAA2B31G,QAAS,IAAGQ,QAItDk1G,GACF7kG,EAAEC,kBAGJ8gG,KAAe,EAwMX1mG,QAAS0mG,GACT,0BAAyBpnG,EAAK,4BAA6B,IAC3D,oBAEAE,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GD5e4L,uBC8erM,gBACAukG,ID/e2S,wBCif7SviE,SAAUw+D,IAETV,EAAqBpmG,KAAI,CAAC2iG,EAAY5iF,IACrC3f,EAAAA,GAAAA,cAACsiG,GAAmB,CAClBC,WAAYA,EACZE,wBAAyB8D,GACzB7D,qBAAsB8D,GACtBhE,SAA0C,IAAhCwD,EAAqB7hG,OAC/B8f,MAAOtE,EACPnb,IAAK+9F,EAAW2I,UAAYvrF,EAC5Bq/B,SAAUoH,GACVu8C,gBAAiB8G,QAIvBzpG,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GDjgBmX,uBCmgB5XukG,IDngBkd,yBCsgBpdzqG,EAAAA,GAAAA,cAAC2hG,GAAc,CACb1iG,OAAQopG,GACRxG,cAAe2G,GACf5G,iBAAkB2G,GAClBnpG,QAASkpG,KAEXtoG,EAAAA,GAAAA,cAACmrG,GAAAA,EAAY,CACXlsG,OAAQ0oG,GACRvwD,OAAQwwD,GACR7wD,aAAc8wD,GACdlC,eAAgBA,EAChBD,qBAAsBA,EACtBD,cAAeqC,GACf7vD,oBAAqB6vD,GACrB1oG,QAAS2oG,KAEX/nG,EAAAA,GAAAA,cAACorG,GAAAA,EAAkB,CACjB9sG,OAAQA,EACRW,OAAQgpG,GACRvC,qBAAsBA,EACtBztD,oBAAqBiwD,GACrB9oG,QAAS+oG,KAEXnoG,EAAAA,GAAAA,cAAA,OAAKG,UD7hBgf,wBC8hBnfH,EAAAA,GAAAA,cAACqrG,GAAAA,EAAgB,CACf/sG,OAAQA,EACRN,SAAUA,EACV2E,SAAUA,EACV2zC,QAASA,EACT2vD,iBAAkBA,EAClBC,eAAgBA,GAChBC,gBAAiBA,GACjBluD,oBAAqBA,EACrButD,eAAgBA,EAChBC,cAAeA,EACf6F,mBAAiB,EACjBC,kBAAgB,EAChBprG,UAAU,uDAEZH,EAAAA,GAAAA,cAACwrG,GAAAA,EAAY,CACX/hG,IAAK8qB,EACLh/B,GAAG,qBACH+I,OAAQA,EACRN,SAAUA,EACVytG,wBAAsB,EACtB75F,SAAU3S,GACV2lG,QAASA,EACT8G,gBAAiBhE,EAAAA,IACjB/iD,YAAa7kD,EAAK,cAClBmX,SAAUkuF,EACV7a,OAAQ4e,GACRhhE,SAAU2+D,GACV8E,aAAcryG,QAAQg9C,GAAW2uD,GAA2BN,EAAYxgG,QACxEsgG,aAAciF,GACdkC,oBAAqBjpG,GAAYsjG,EACjC4F,kBAAmB1F,KAErBnmG,EAAAA,GAAAA,cAAA,OAAKG,UD/jBmqB,wBCgkBtqBH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLoJ,IAAKo8F,EACL1lG,UDlkBksB,uBCmkBlsBK,QAAS0oG,GACT14F,cAAeq0F,EAAwB+D,QAAoBvwG,GAE1DyH,EAAK,aAgBV,KClOZ,IAAelC,EAAAA,EAAAA,KAnViBkuG,EAC9B7sG,SAAQ8sG,SAAQC,oBAAmB1hB,SAAQ+a,cAG3C,MAAM4G,GAAmB9wG,EAAAA,EAAAA,IAAyB,MAE5C+wG,GAAiB/wG,EAAAA,EAAAA,IAAuB,MAExCgxG,GAAchxG,EAAAA,EAAAA,IAAuB,OAEpCixG,EAAUC,IAAe7mG,EAAAA,EAAAA,IAAiB,KAC1CsiC,EAASwkE,IAAc9mG,EAAAA,EAAAA,IAAmB,CAAC,MAC3C+mG,EAAaC,IAAkBhnG,EAAAA,EAAAA,KAAS,IACxCinG,EAAmBC,IAAwBlnG,EAAAA,EAAAA,KAAS,IACpDmnG,EAAYC,IAAiBpnG,EAAAA,EAAAA,IAASumG,IAAU,IAChDc,EAAUC,IAAetnG,EAAAA,EAAAA,IAAiB,KAC1CunG,EAAeC,IAAoBxnG,EAAAA,EAAAA,OACnCynG,EAAWC,IAAgB1nG,EAAAA,EAAAA,KAAkB,GAE9C1F,GAAOC,EAAAA,EAAAA,KAEPotG,GAAa1tG,EAAAA,EAAAA,KAAagK,IAC1BxK,GAAUwK,EAAInO,SAChBmO,EAAInO,QAAQ+5B,OACd,GACC,CAACp2B,KAEJ5C,EAAAA,EAAAA,KAAU,IAAO4C,GAAS6kB,EAAAA,EAAAA,GAAsBuhF,QAAWhtG,GAAY,CAAC4G,EAAQomG,KAChFhpG,EAAAA,EAAAA,KAAU,KACH4C,IACHotG,EAAY,IACZC,EAAW,CAAC,KACZE,GAAe,GACfE,GAAqB,GACrBE,EAAcb,IAAU,GACxBe,EAAY,IACZE,OAAiB30G,GACjB60G,GAAa,GACf,GACC,CAACnB,EAAQ9sG,KAEZ5C,EAAAA,EAAAA,KAAU,IAAM8wG,EAAWlB,IAAmB,CAACkB,EAAYluG,KAE3DgN,EAAAA,EAAAA,KAAgB,KACd,MAAMmhG,EAAajB,EAAY7wG,QAE3B8xG,GAAcP,IAAaO,EAAWtD,YACxCsD,EAAWtD,UAAY+C,EACzB,GACC,CAACA,IAEJ,MAAMQ,GAAe5tG,EAAAA,EAAAA,KAAY,CAAC6tG,EAAuB,MACvDhB,EAAW,IAAIgB,EAAY,KAC3B7qF,uBAAsB,KACpB,MAAM8qF,EAAOrB,EAAe5wG,QACvBiyG,IAILA,EAAKt5G,UAAUgsB,OAAO,YAAastF,EAAK9lE,aAjEtB,KAkElB8lE,EAAKC,SAAS,CAAEh/F,IAAK++F,EAAK9lE,aAAcgmE,SAAU,WAAW,GAC7D,GACD,IAEGC,GAAejuG,EAAAA,EAAAA,KAAY,KAE/B,GADAytG,GAAa,IACRjuG,EACH,OAGF,MAAM0uG,EAAkBvB,EAASpyE,OAAO4zE,UAAU,EAzE1B,KA0ElBC,EAAiB/lE,EAAQloC,KAAKkuG,GAAMA,EAAE9zE,OAAO4zE,UAAU,EA3EvC,OA2E8DjoF,QAAQmoF,GAAMA,EAAE3pG,SAEpG,IAAKwpG,GAAmBE,EAAe1pG,OAAS,EAY9C,OAXAkoG,EAAYsB,GACRE,EAAe1pG,OACb0pG,EAAe1pG,OAAS,EAC1BkpG,EAAaQ,GAEbvB,EAAWuB,GAGbR,SAEFH,GAAa,GAIf,GAAIP,SAAiCt0G,IAAlB00G,IAAgCc,EAAed,IAEhE,YADAG,GAAa,GAIf,MAOMn/C,EAAsB,CAC1BggD,QAAS,CACP3B,SAAUuB,EACVK,QAVYH,EACbjuG,KAAI,CAACuF,EAAM8e,KAAU,CACpB9e,KAAMA,EAAK60B,OACXgO,OAAQ1Z,OAAOrK,MACXA,IAAU8oF,GAAiB,CAAEkB,SAAS,WAOrC1B,GAAe,CAAE2B,UAAU,MAC5BzB,GAAqB,CAAE0B,gBAAgB,MACvCxB,GAAc,CAAEyB,MAAM,KAI9B,GAAIzB,EAAY,CACd,MAAM,KAAExnG,EAAI,SAAEkpG,GAAcxB,IAAYyB,EAAAA,GAAAA,IAAkBzB,EAASe,UAAU,EAjHvD,OAiHoF,CAAC,EAE3G7/C,EAAQqgD,KAAO,CACbG,eAAgB,CAACjgF,OAAOy+E,OACpB5nG,GAAQ,CAAE0nG,SAAU1nG,MACpBkpG,GAAY,CAAEG,iBAAkBH,GAExC,CAEA/jB,EAAOv8B,EAAQ,GACd,CACD9uD,EACAmtG,EACAtkE,EACA6kE,EACAI,EACAR,EACAE,EACAniB,EACA+iB,EACAR,IAGI4B,GAAehvG,EAAAA,EAAAA,KAAY,CAACwkB,EAAe9e,KAC/C,MAAMmoG,EAAa,IAAIxlE,GACvBwlE,EAAWrpF,GAAS9e,EAChBmoG,EAAWA,EAAWnpG,OAAS,GAAG61B,OAAO71B,QAAUmpG,EAAWnpG,OA9I5C,GA+IpBkpG,EAAaC,GAEbhB,EAAWgB,EACb,GACC,CAACxlE,EAASulE,IAEPqB,GAAejvG,EAAAA,EAAAA,KAAawkB,IAChC,MAAMqpF,EAAa,IAAIxlE,GACvBwlE,EAAWj7C,OAAOpuC,EAAO,GACzBqoF,EAAWgB,QAEWj1G,IAAlB00G,IACEA,IAAkB9oF,EACpB+oF,OAAiB30G,GACR4rB,EAAQ8oF,GACjBC,EAAiBD,EAAgB,IAIrCtqF,uBAAsB,KACfypF,EAAe5wG,SAIpB4wG,EAAe5wG,QAAQrH,UAAUgsB,OAAO,YAAaisF,EAAe5wG,QAAQmsC,aAxK1D,IAwKyF,GAC3G,GACD,CAACslE,EAAejlE,IAEb6mE,GAA4BlvG,EAAAA,EAAAA,KAAa4sE,IAC7C2gC,EAAiB/6E,OAAOo6C,GAAU,GACjC,CAAC2gC,IAEE4B,GAA0BnvG,EAAAA,EAAAA,KAAa0G,IAC3CqmG,EAAermG,EAAEgR,OAAOiW,QAAQ,GAC/B,IAEGyhF,GAA8BpvG,EAAAA,EAAAA,KAAa0G,IAC/CumG,EAAqBvmG,EAAEgR,OAAOiW,QAAQ,GACrC,IAEG0hF,GAAuBrvG,EAAAA,EAAAA,KAAa0G,IACxCymG,EAAczmG,EAAEgR,OAAOiW,QAAQ,GAC9B,IAEG2hF,GAAiBtvG,EAAAA,EAAAA,KAAa0G,IAChB,KAAdA,EAAE6oG,SACJtB,GACF,GACC,CAACA,IAEEuB,GAAuBxvG,EAAAA,EAAAA,KAAa0G,IACxCkmG,EAAYlmG,EAAEgR,OAAOlN,MAAM,GAC1B,IAEGilG,GAAmBzvG,EAAAA,EAAAA,KAAY,KACnC,GAAIwtG,IAAcb,EAASpyE,OAAO71B,OAChC,OAAOrE,EAAK,4BAGE,GACf,CAACmtG,EAAWntG,EAAMssG,IAEf+C,GAAkB1vG,EAAAA,EAAAA,KAAawkB,IACnC,MAAM4pF,EAAiB/lE,EAAQloC,KAAKkuG,GAAMA,EAAE9zE,SAAQrU,QAAQmoF,GAAMA,EAAE3pG,SACpE,GAAI8oG,GAAaY,EAAe1pG,OAAS,IAAM2jC,EAAQ7jB,GAAO+V,OAAO71B,OACnE,OAAOrE,EAAK,2BAEE,GACf,CAACmtG,EAAWntG,EAAMgoC,IAqBrB,SAASsnE,IACP,OAAOtnE,EAAQloC,KAAI,CAACooC,EAAQ/jB,IAC1BjkB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRtI,MAAOpJ,IAAU6jB,EAAQ3jC,OAAS,GA5OlB,KA4OuB2jC,EAAQ3jC,OAC3CrE,EAAK,cACLA,EAAK,wBACTopB,MAAOimF,EAAgBlrF,GACvBha,MAAO+9B,EAEP99B,SAAW/D,GAAMsoG,EAAaxqF,EAAO9d,EAAEqJ,cAAcvF,OACrDolG,WAAYN,IAEb9qF,IAAU6jB,EAAQ3jC,OAAS,GAC1BnE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,uBACVqD,OAAK,EACLlD,MAAM,cACN9D,KAAK,UACLiH,UAAW3D,EAAK,UAEhBU,QAASA,IAAMkuG,EAAazqF,IAE5BjkB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBAKvB,CAeA,OACEH,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CAAChB,OAAQA,EAAQG,QAASimG,EAAS76E,OA7DvCxqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,0BACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACmD,OAAK,EAAClD,MAAM,cAAc9D,KAAK,UAAUiH,UAAU,uBAAuBjD,QAAS6kG,GACzFrlG,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAeL,EAAK,YACnCE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLC,MAAM,UACN9D,KAAK,UACL2D,UAAU,sBACVK,QAASktG,GAER5tG,EAAK,YAkDqDK,UAAU,aACzEH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRlsB,IAAKwiG,EACL5+E,MAAOvtB,EAAK,gBACZmK,MAAOmiG,EACPljF,MAAOgmF,IACPhlG,SAAU+kG,EACVI,WAAYN,IAEd/uG,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,6BAA6BsJ,IAAKyiG,GAC/ClsG,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkBL,EAAK,gBAEpCmtG,GAvBP,WACE,MAAMY,EAAiB/lE,EAAQloC,KAAKkuG,GAAMA,EAAE9zE,SAAQrU,QAAQmoF,GAAMA,EAAE3pG,SAEpE,OAAOwoG,SAAiCt0G,IAAlB00G,IAAgCc,EAAed,KACnE/sG,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAcL,EAAK,4BAEpC,CAiBoBwvG,GACb3C,EACC3sG,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACT77C,KAAK,gBACLsjB,QA/BDsnE,IACJxvG,KAAI,CAACytB,EAAOpJ,KAAU,CAAGha,MAAOqkB,OAAOrK,GAAQoJ,QAAOkiF,OAAQtrF,IAAU6jB,EAAQ3jC,OAAS,MA+BpFm8D,SAAUhyC,OAAOy+E,GACjB7iG,SAAUykG,IAGZS,KAKJpvG,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBAEfH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACX6rG,GACAhsG,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,iBACZstB,QAASm/E,EACTriG,SAAU0kG,IAGd5uG,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,gBACZstB,QAASq/E,EACT/hG,SAAUiiG,EACVziG,SAAU2kG,IAEZ7uG,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,YACZstB,QAASu/E,EACTjiG,SAAU+hG,QAAgCp0G,IAAX0zG,EAC/B7hG,SAAU4kG,IAEXnC,GACC3sG,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkBL,EAAK,6BACrCE,EAAAA,GAAAA,cAAA,OACEyJ,IAAK0iG,EACLhsG,UAAU,eACVo+F,iBAAe,EACfl4F,IAAI,OACJ6D,SAAW/D,GAAM2mG,EAAY3mG,EAAEqJ,cAAcs6F,aAE/C9pG,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QAAQL,EAAK,iCAI5B,I,4BCjWZ,MAsCA,IAAelC,EAAAA,EAAAA,KAtCmB4xG,EAChCl1D,QAAOjlB,QAAO70B,cAEd,MAAM6O,GAAc5P,EAAAA,EAAAA,KAAa0G,IAE/BA,EAAEgK,iBAEF3P,EAAQ85C,EAAMm1D,OAAQn1D,EAAM/kD,GAAG,GAC9B,CAAC+kD,EAAO95C,IAELL,GAAY+F,EAAAA,GAAAA,GAChB,cACAmvB,GAAS,SAGL7gC,EAAO,kBAAiB8lD,EAAMo1D,YAC9Bt3E,EAAWu3E,GAAAA,GAAAA,IAAkBn7G,GAEnC,OACEwL,EAAAA,GAAAA,cAAA,OACEG,UAAWA,EACX0wD,YAAaxhD,EACbjP,MAAQ,IAAGk6C,EAAMs1D,MAAM,OAEtBC,EAAAA,GAAqBv1D,EAAMm1D,OAC1BzvG,EAAAA,GAAAA,cAAA,OACExL,IAAKA,EACL2L,UAAYi4B,OAAwC//B,EAA7B,2BACvBwa,IAAKynC,EAAMm1D,OACXK,QAAQ,OACR,YAAWt7G,EACXqmC,OAASzC,OAA6B//B,EAAlB03G,GAAAA,KAGpB,ICsCV,IAAenyG,EAAAA,EAAAA,KA1DqBoyG,EAClCC,WAAUhsF,QAAOisF,YAAWn/D,sBAAqBniC,eAAc62F,oBAG/D,MAAMh8F,GAAMtO,EAAAA,EAAAA,IAAuB,OAEnCg1G,EAAAA,GAAAA,IAAe1mG,EAAKsnC,GAEpB,MAAMjiC,GAAuBuyB,EAAAA,GAAAA,GAAmBzyB,GAE1C9O,GAAOC,EAAAA,EAAAA,MACP,SAAE4C,IAAaC,EAAAA,EAAAA,MAEfwtG,EAAeztG,EACjBqB,KAAKipC,OAAOjsB,EAAAA,EAAAA,MAAiBzlB,MA1BF,GA0BsC,IA5BrC,EA8B1BK,EAA4D,GAAnDoI,KAAKwkC,KAAKynE,EAAS74D,OAAOjzC,OAASisG,GAElD,OACEpwG,EAAAA,GAAAA,cAAA,OACEyJ,IAAKA,EACLjF,IAAKyrG,EAAS16G,GACdA,GAAK,kBAAiB0uB,IACtB9jB,UAAU,cAEVH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qBACbH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBAAkBkG,IAAI,QAChCvG,EAAKmwG,EAAS16G,KAAOg9C,EAAAA,IAAuB,iBAAoB,QAAOtuB,OAG5EjkB,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GAAe,uBAAwB4I,GAClD7Y,MAAQ,WAAU2F,OAClByK,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAEzBuW,GAAgBqhG,EAAS74D,OAAOx3C,KAAK4kB,IACpC,MAAM81B,EAAQ41D,EAAU1rF,GAExB,IAAK81B,EACH,OAIF,MAAM+1D,EAAiB,OAAQ/1D,EAAQA,EAAQA,EAAM,GAErD,OACEt6C,EAAAA,GAAAA,cAACwvG,GAAW,CACVhrG,IAAK6rG,EAAe96G,GACpB+kD,MAAO+1D,EACP7vG,QAASilG,GACT,KAIJ,IC1CJ6K,GAA4C,CAChDC,OAAQ,cACRC,OAAQ,aACRC,OAAQ,eACRC,MAAO,YACPC,SAAU,aACVC,OAAQ,WACRC,QAAS,YACTC,QAAS,gBACTC,MAAO,aAUHC,GAAmC,GAEzC,IAAIC,GACAC,GACAC,GA6KJ,UAAevzG,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuBgtB,EAAAA,GAAAA,IAAKhtB,EAAQ,CAAC,kBADpBD,EA3K2BuzG,EAC7CjxG,YACA4jG,eACA0B,oBAGA,MAAMjyF,GAAerY,EAAAA,EAAAA,IAAuB,MAEtC+8C,GAAY/8C,EAAAA,EAAAA,IAAuB,OAElCk2G,EAAYC,IAAiB9rG,EAAAA,EAAAA,OAC7B4xC,EAAQm6D,IAAa/rG,EAAAA,EAAAA,OACrBgsG,EAAqBC,IAA0BjsG,EAAAA,EAAAA,IAAS,IACzD,SAAE7C,IAAaC,EAAAA,EAAAA,OAEb21C,QAASxH,IAAwByH,EAAAA,GAAAA,IAAwB,CAC/DC,QAASjlC,EACTklC,WAzB0B,MA0BxBC,IACFA,EAAQC,SAASjF,IACf,MAAM,GAAEp+C,GAAOo+C,EAAMx8B,OACrB,IAAK5hB,IAAOA,EAAGsjD,WAAW,mBACxB,OAGF,MAAM50B,EAAQgO,OAAO18B,EAAGw8B,QAAQ,kBAAmB,KACnDi/E,GAAsB/sF,GAAS0vB,EAAMzB,cAAc,IAGrD,MAAM4G,EAA0Bk4D,GAC7BpxG,KAAI,CAACsyC,EAAgBjuB,KAAU,CAAGA,QAAOiuB,qBACzCvsB,QAAO,EAAGusB,oBAAqBA,IAE7B4G,EAAwB30C,QAI7BstG,EAAuB34D,EAAwB90C,KAAKipC,MAAM6L,EAAwB30C,OAAS,IAAI8f,MAAM,IAGjGy1B,GAAoBC,EAAAA,GAAAA,GAAkB,GAAI+3D,EAAAA,KAC1CC,EAAsBv6D,GAAUsC,GAEtCI,EAAAA,GAAAA,GAAoB5B,IAAav1C,GAAYgvG,KAG7Ct1G,EAAAA,EAAAA,KAAU,KACR,IAAKg1G,EACH,OAGF,MAAM7mF,EAAS0tB,EAAU58C,QACzB,IAAKkvB,EACH,OAGF,MAAMuvB,EAjEkB,GAiERy3D,EAA4ChnF,EAAOwvB,YAAc,EAAIC,IAErFtS,EAAAA,GAAAA,GAA2Bnd,EAAQuvB,EAAQ,GAC1C,CAACs3D,EAAYG,IAEhB,MAAM1xG,GAAOC,EAAAA,EAAAA,KAEP6xG,GAAgB/3G,EAAAA,EAAAA,KAAQ,KAC5B,IAAKw3G,EACH,OAAOn4D,GAAAA,EAET,MAAM24D,EAAkB,IAAIR,GAS5B,OARItN,GAAc5/F,QAChB0tG,EAAgBC,QAAQ,CACtBv8G,GAAIg9C,EAAAA,IACJ/tB,KAAM1kB,EAAK,kBACXs3C,OAAQ2sD,IAIL8N,CAAe,GACrB,CAACR,EAAYvxG,EAAMikG,KAGtB1nG,EAAAA,EAAAA,KAAU,KACRO,YAAW,KACT,MAAMm1G,EAAOA,KACXT,EAAcH,GAAUE,YAExBE,EAAUJ,GAAU/5D,OAAoB,EAGtC+5D,GACFY,IAuERlqE,iBAQE,OAPKopE,KACHA,GAAmB,qCACnBC,UAAsBD,IAAkBe,QAExCb,IAAYc,EAAAA,GAAAA,IAAgBf,KAGvBD,EACT,CA9EQiB,GACG71E,KAAK01E,EACV,GA1GuB,IA2GD,GACvB,IAEH,MAAMI,GAAiB1yG,EAAAA,EAAAA,KAAawkB,IAClCwtF,EAAuBxtF,GACvB,MAAMmuF,EAAa5+F,EAAalY,QAAShG,QAAqB,oBAC3DR,cAAe,mBAAkBmvB,MACpCm2B,EAAAA,GAAAA,GAAiB5mC,EAAalY,QAAU82G,EAAY,QA/GnC,GADU,IAgHuE,GACjG,IAEG/3D,GAAoB56C,EAAAA,EAAAA,KAAY,CAAC66C,EAAe91B,KACpDihF,EAAcnrD,EAAO91B,EAAK,GACzB,CAACihF,IAoBE4M,GAAqBnsG,EAAAA,GAAAA,GAAe,cAAe/F,GAEzD,OAAKwxG,EASH3xG,EAAAA,GAAAA,cAAA,OAAKG,UAAWkyG,GACdryG,EAAAA,GAAAA,cAAA,OAAKyJ,IAAKyuC,EAAW/3C,UAAU,qBAAqBkG,IAAKvG,EAAKqc,MAAQ,MAAQ,IAC3Ey1F,EAAchyG,KA/BrB,SAA8BqwG,EAA6BhsF,GACzD,MAAMngB,EAAOwsG,GAAkBL,EAAS16G,IAExC,OAAOuO,GACL9D,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAY,sBAAoB8jB,IAAUutF,EAAsB,YAAc,IAC9EhuG,OAAK,EACLs3C,OAAK,EACLx6C,MAAM,cAENE,QAASA,IAAM2xG,EAAeluF,GAC9BxgB,UAAWwsG,EAASzrF,MAEpBxkB,EAAAA,GAAAA,cAAA,KAAGG,UAAW2D,IAGpB,KAiBI9D,EAAAA,GAAAA,cAAA,OACEyJ,IAAK+J,EACLrT,WAAW+F,EAAAA,GAAAA,GAAe,gCAAiCmC,EAAAA,GAAe,eAAiB,kBAE1FupG,EAAchyG,KAAI,CAACqwG,EAAUtwF,IAC5B3f,EAAAA,GAAAA,cAACgwG,GAAa,CACZC,SAAUA,EACVhsF,MAAOtE,EACPuwF,UAAW94D,EACXrG,oBAAqBA,EACrBniC,aAAc4iG,GAAuB7xF,EAAI,GAAK6xF,GAAuB7xF,EAAI,EACzE8lF,cAAeprD,QAtBrBr6C,EAAAA,GAAAA,cAAA,OAAKG,UAAWkyG,GACdryG,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,MAyBN,K,2BC/JV,MAIMpE,GAAqC,GA4T3C,IAAeh5C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAM,SACJu4C,EAAQ,MACRY,EAAK,OACL84D,EAAM,SACN+B,EAAQ,WACRC,GACEz0G,EAAOimC,SAEL0M,GAAkBvyB,EAAAA,EAAAA,IAAqBpgB,EAAQQ,GAGrD,MAAO,CACLF,MAHWC,EAAAA,EAAAA,IAAWP,EAAQQ,GAI9Bk0G,eAAgBjC,EAAOxsE,SACvByM,iBAAkB8hE,EAASvuE,SAC3B0uE,gBAAiBF,EAAWxuE,SAC5B+S,gBAAiBD,EACjB6kC,YAAajkC,EAAMC,OACnBC,WAAY75C,EAAO2e,SAASC,MAAMk7B,mBAClCnH,kBACAE,sBAAsB1F,EAAAA,EAAAA,IAA2BntC,GAClD,GAvBeD,EA1T6B60G,EAC/Ct0G,OACAJ,WACAmC,YACAmwC,cACA0mD,kBACAwb,iBACAhiE,mBACAiiE,kBACA/2B,cACA5kC,kBACAa,aACAlH,kBACAE,uBACAK,sBAEA,MAAM,mBACJ2hE,EAAkB,iBAClBC,EAAgB,cAChB5gB,EAAa,YACbD,EAAW,oBACX8gB,IACEtzG,EAAAA,EAAAA,MAGEiU,GAAerY,EAAAA,EAAAA,IAAuB,MAEtC+8C,GAAY/8C,EAAAA,EAAAA,IAAuB,MAEnCw2C,GAAkBx2C,EAAAA,EAAAA,IAA0B,OAE3Cg9C,EAAgBC,IAAqB5yC,EAAAA,EAAAA,IAAiB,GAEvDstG,GAAoBC,EAAAA,GAAAA,GAAqB30G,EAAM7I,GAAIyI,IAEjDu6C,QAASxH,IAAwByH,EAAAA,GAAAA,IAAwB,CAC/DC,QAASjlC,EACTklC,WAzCkC,MA0ChCC,IACFA,EAAQC,SAASjF,IACf,MAAM,GAAEp+C,GAAOo+C,EAAMx8B,OACrB,IAAK5hB,IAAOA,EAAGsjD,WAAW,gBACxB,OAGF,MAAM50B,EAAQgO,OAAO18B,EAAGw8B,QAAQ,eAAgB,KAChD6kB,GAAwB3yB,GAAS0vB,EAAMzB,cAAc,IAGvD,MAAM4G,EAA0BlC,GAC7Bh3C,KAAI,CAACsyC,EAAgBjuB,KAAU,CAAGA,QAAOiuB,qBACzCvsB,QAAO,EAAGusB,oBAAqBA,IAE7B4G,EAAwB30C,QAI7Bi0C,EAAkBU,EAAwB90C,KAAKipC,MAAM6L,EAAwB30C,OAAS,IAAI8f,MAAM,KAE1Fs0B,QAASQ,IAAiCP,EAAAA,GAAAA,IAAwB,CAAEC,QAASP,IAE/Ep4C,GAAOC,EAAAA,EAAAA,KAEPi5C,EAAiB1/C,QAAQoiF,GAEzBziC,GAAUp/C,EAAAA,EAAAA,KAAQ,KACtB,IAAK6hF,EACH,OAAOxiC,GAAAA,EAGT,MAAMC,EAAc,GAEd65D,EAAsBj9G,OAAOsiD,QAAOC,EAAAA,GAAAA,IAAWxB,EAAiB4kC,IAsBtE,GApBIlrC,EAAiBrsC,QACnBg1C,EAAYt1C,KAAK,CACftO,GAAIk9C,EAAAA,IACJqB,WAAY,IACZ1zC,MAAON,EAAK,oBACZikC,SAAUyM,EACVrO,MAAOqO,EAAiBrsC,SAIxBquG,EAAeruG,QACjBg1C,EAAYt1C,KAAK,CACftO,GAAIg9C,EAAAA,IACJuB,WAAY,IACZ1zC,MAAON,EAAK,kBACZikC,SAAUyuE,EACVrwE,MAAOqwE,EAAeruG,SAItBwsC,EAAsB,CACxB,MAAMsiE,EAAuBD,EAC1BpzG,KAAI,EAAGmkC,cAAeA,GAAUpe,QAAQmd,GAAYA,EAAQowE,cAC5DC,OACAxtF,OAAOrsB,SAEJ85G,GAAuBC,EAAAA,GAAAA,IAAc,IAAIJ,KAAyBR,GAAkB,MAEtFW,EAAqBjvG,QACvBg1C,EAAYt1C,KAAK,CACftO,GAAIslD,EAAAA,IACJ/G,WAAY,IACZ1zC,MAAON,EAAK,mBACZikC,SAAUqvE,EACVjxE,MAAOixE,EAAqBjvG,QAGlC,CAEA,GAAI/F,GAAMqmB,UAAU4rB,WAAY,CAC9B,MAAMijE,EAAUx8D,EAAgB14C,EAAKqmB,SAAS4rB,WAAW96C,IACrD+9G,GACFn6D,EAAYt1C,KAAK,CACftO,GAAIqlD,EAAAA,IACJ9G,WAAYw/D,EAAQx/D,WACpB1zC,MAAON,EAAK,iBACZikC,SAAUuvE,EAAQvvE,SAClB5B,MAAOmxE,EAAQvvE,SAAU5/B,QAG/B,CAEA,MAAO,IACFg1C,KACA65D,EACJ,GACA,CACDt3B,EAAa5kC,EAAiBtG,EAAkBgiE,EAAgB7hE,EAAsBvyC,EAAM0B,EAAM2yG,IAG9Fh5D,GAAkB5/C,EAAAA,EAAAA,KAAQ,IAC9Bm/C,GAC4D,IAAzDC,EAAQtzB,QAAQjpB,GAAQA,EAAIqnC,UAAU5/B,SAAQA,QAChD,CAAC80C,EAASD,KAEb38C,EAAAA,EAAAA,KAAU,KACHi0C,IACLqiE,IACK3b,GACL8b,EAAkB,CAAElxG,KAAM,kBAAkB,GAC3C,CAACo1F,EAAiB1mD,EAAaqiE,EAAoBG,IAEtD,MAAMp5D,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,KAC1CC,EAAuBb,GAAkBU,IAAsBD,GAAmBu9C,GAExFl9C,EAAAA,GAAAA,GAAoB5B,GAAY2B,IAGhCx9C,EAAAA,EAAAA,KAAU,KACR,IAAK28C,EACH,OAGF,MAAMxuB,EAAS0tB,EAAU58C,QACzB,IAAKkvB,EACH,OAGF,MAAMuvB,EAvKkB,GAuKR5B,GAAwC3tB,EAAOwvB,YAAc,EAAIC,KAEjFtS,EAAAA,GAAAA,GAA2Bnd,EAAQuvB,EAAQ,GAC1C,CAACf,EAAgBb,IAEpB,MAAM+B,GAAmBz6C,EAAAA,EAAAA,KAAawkB,IACpCm0B,EAAkBn0B,GAClB,MAAMk2B,EAAepmD,SAASgvB,eAAgB,eAAckB,MAC5Dm2B,EAAAA,GAAAA,GAAiB5mC,EAAalY,QAAU6+C,EAAc,aAAS9hD,EAhLpC,IAgLsE,GAChG,IAEGk7G,GAAsB9zG,EAAAA,EAAAA,KAAY,CAACqjC,EAAqB6Z,EAAoBs6C,KAChFjmD,EAAgBlO,EAAS6Z,EAAUs6C,GAAgB,GACnD2b,EAAiB,CAAE9vE,WAAU,GAC5B,CAAC8vE,EAAkB5hE,IAEhBwiE,GAAsB/zG,EAAAA,EAAAA,KAAaqjC,IACvCkvD,EAAc,CAAElvD,WAAU,GACzB,CAACkvD,IAEEyhB,GAAoBh0G,EAAAA,EAAAA,KAAaqjC,IACrCivD,EAAY,CAAEjvD,WAAU,GACvB,CAACivD,IAEEthC,GAAkBhxD,EAAAA,EAAAA,KAAY,KAC7Bu3F,GACL8b,EAAkB,CAAElxG,KAAM,iBAAkB,GAC3C,CAACo1F,EAAiB8b,IAEfY,GAA4Bj0G,EAAAA,EAAAA,KAAaqjC,IAC7C+vE,EAAoB,CAAE/vE,WAAU,GAC/B,CAAC+vE,IAmEEt4D,GAAgBr0C,EAAAA,GAAAA,GAAe,gBAAiB/F,GAEtD,OAAK05C,EAeH75C,EAAAA,GAAAA,cAAA,OAAKG,UAAWo6C,GACdv6C,EAAAA,GAAAA,cAAA,OACEyJ,IAAKyuC,EACL/3C,UAAU,kDAEVH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAAA,UAAQyJ,IAAKkoC,EAAiBxxC,UAAU,kBACvC84C,EAAQr5C,KAzFjB,SAAqBywC,EAAgCpsB,GACnD,MAAMu2B,EAAenK,EAAWtM,WAAW,GACrC2F,GAAkBxjC,EAAAA,GAAAA,GACtB,uCACA+d,IAAUk0B,GAAkB,aAGxBsC,EAAmBx2B,EAAQy2B,EAAAA,IAEjC,OAAIrK,EAAW96C,KAAOg9C,EAAAA,KACjBlC,EAAW96C,KAAOk9C,EAAAA,KAClBpC,EAAW96C,KAAOqlD,EAAAA,KAClBvK,EAAW96C,KAAOslD,EAAAA,KAClBxK,EAAWyF,eACV0E,EAGFx6C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmE,IAAK6rC,EAAW96C,GAChB4K,UAAWupC,EACXjmC,UAAW4sC,EAAWjwC,MACtBoD,OAAK,EACLs3C,MAAOzK,EAAW96C,KAAOg9C,EAAAA,KAAwBlC,EAAW96C,KAAOk9C,EAAAA,IACnEnyC,MAAM,cAENE,QAASA,IAAM05C,EAAiBj2B,IAE/BosB,EAAW96C,KAAOslD,EAAAA,IACjB76C,EAAAA,GAAAA,cAAC2zG,GAAAA,EAAW,CAACC,cAAY,EAACC,KAAG,IAC3BxjE,EAAW96C,KAAOg9C,EAAAA,IACpBvyC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBACXkwC,EAAW96C,KAAOk9C,EAAAA,IACpBzyC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBACXkwC,EAAW96C,KAAOqlD,EAAAA,IACpB56C,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAACnf,KAAMA,EAAM5B,KAAK,UAEzBwD,EAAAA,GAAAA,cAAC41C,GAAe,CACdvF,WAAYA,EACZgF,WAAYsC,IAAerH,EAC3BS,oBAAqBgI,EACrBpH,gBAAiB8I,EAAmB9I,OAAkBt5C,KAO5D2H,EAAAA,GAAAA,cAACo1C,GAAAA,EAAa,CACZ5wC,IAAK6rC,EAAW96C,GAChButC,QAAS0X,EACTh+C,KAAMq5C,EAAAA,IACNz1C,MAAOiwC,EAAWjwC,MAClBD,UAAWupC,EACX2L,WAAYsC,IAAerH,EAC3BS,oBAAqBgI,EACrBgC,eAAa,EACbpK,sBAAoB,EACpBgB,gBAAiB8I,EAAmB9I,OAAkBt5C,EACtDmI,QAAS05C,EACT3E,SAAUtxB,GAIlB,MA6BIjkB,EAAAA,GAAAA,cAAA,OACEyJ,IAAK+J,EACLlD,YAAamgD,EACbtwD,WAAW+F,EAAAA,GAAAA,GAAe,kCAAmCmC,EAAAA,GAAe,eAAiB,kBAE5F4wC,EAAQr5C,KAAI,CAACywC,EAAY1wB,IACxB3f,EAAAA,GAAAA,cAACowC,GAAU,CACT5rC,IAAK6rC,EAAW96C,GAChB86C,WAAYA,EACZC,YAAah3C,QAAQq+C,GAAcrH,GACnCrsB,MAAOtE,EACPoxB,oBAAqBA,EACrBniC,aAAcupC,GAAkBx4B,EAAI,GAAKw4B,GAAkBx4B,EAAI,EAC/D6wB,iBAAkBA,EAClBC,gBAAiBA,EACjBE,qBAAsBA,EACtBK,gBAAiBuiE,EACjBtiE,gBAAiBuiE,EACjBtiE,cAAeuiE,EACftiE,sBAAuBuiE,QA1C7B1zG,EAAAA,GAAAA,cAAA,OAAKG,UAAWo6C,GACZy8C,EAEEv9C,EACFz5C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAmBL,EAAK,eAEvCE,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,MAJRh7C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAmBL,EAAK,mCA4CvC,K,uPCrVV,MAkLA,IAAelC,EAAAA,EAAAA,KAlLiBk2G,EAC9Ble,MACA75F,aACAoE,YACA4wC,sBACAvwC,UACAuzG,gBACAtjE,sBAGA,MAAMhnC,GAAMtO,EAAAA,EAAAA,IAAuB,MAE7B2E,GAAOC,EAAAA,EAAAA,KAEP0gE,EAAkB,MAAKm1B,EAAIrgG,KAE3B+6C,GADiB6B,EAAAA,GAAAA,IAAkB1oC,EAAKsnC,KACPh1C,EACjCzB,GAAiBH,EAAAA,EAAAA,GAAU,GAAEsmE,YAA0BnwB,EAAal2C,EAAAA,GAAAA,UACnE45G,IAAaxuG,EAAAA,EAAAA,IAASowF,EAAI3sD,WAAWhuC,UAAYX,GAClDomE,GAAWt/B,EAAAA,GAAAA,GAAcw0D,EAAI3sD,WAAWhuC,SAAU+4G,GAClDC,GAAY95G,EAAAA,EAAAA,GAASsmE,GAAiBnwB,EAAal2C,EAAAA,GAAAA,SACnD85G,EAAoB56G,QAAQg3C,GAAe2jE,IAC3C,WAAE/sG,EAAU,kBAAEwH,IAAsBC,EAAAA,GAAAA,IAAa,GACjDE,EAAsByhC,IAAgBppC,EACtCitG,EAAe7jE,GAAeppC,GAE9B,kBACJwhG,EAAiB,oBAAE0L,EAAmB,wBACtCC,EAAuB,kBAAEzL,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBt/F,GAErB2jF,GAAoB3tF,EAAAA,EAAAA,KAAY,IAAMgK,EAAInO,SAAS,IAEnD+xF,GAAiB5tF,EAAAA,EAAAA,KACrB,IAAMgK,EAAInO,QAAShG,QAAQ,kCAC3B,IAGIg4F,GAAiB7tF,EAAAA,EAAAA,KACrB,IAAMgK,EAAInO,QAASxG,cAAc,8BACjC,KAGI,UACJwP,EAAS,UAAEiG,EAAS,iBAAE+wC,EAAgB,iBAAEyyC,EAAkB93F,MAAO+3F,IAC/DE,EAAAA,GAAAA,GACFkmB,EACAhnB,EACAC,EACAC,GAGIj+E,GAAc5P,EAAAA,EAAAA,KAAY,MAC1BipG,GAAsBloG,GAC1BA,EAAQ,IACHo1F,EACH96F,QAASm5G,GACT,GACD,CAACvL,EAAmBloG,EAASo1F,EAAKqe,IAE/BK,GAAoB70G,EAAAA,EAAAA,KAAa0G,IACrCA,EAAEC,kBACFD,EAAEgK,iBACF4jG,EAAene,EAAI,GAClB,CAACme,EAAene,IAEb2e,GAAsB90G,EAAAA,EAAAA,KAAY,KACtCs0G,IAAgBne,EAAI,GACnB,CAACA,EAAKme,IAEHS,GAAkB/0G,EAAAA,EAAAA,KAAY,KAClCe,EAAS,IACJo1F,EACH96F,QAASm5G,IACR,EAAK,GACP,CAACre,EAAKp1F,EAASyzG,IAEZQ,GAAsBh1G,EAAAA,EAAAA,KAAY,KACtCe,EAAS,IACJo1F,EACH96F,QAASm5G,QACR57G,GAAW,EAAK,GAClB,CAACu9F,EAAKp1F,EAASyzG,IAEZ1jD,GAAkB9wD,EAAAA,EAAAA,KAAa0G,KACnCuuG,EAAAA,GAAAA,GAAoCvuG,GACpCkuG,EAAwBluG,EAAE,GACzB,CAACkuG,KAEJh4G,EAAAA,EAAAA,KAAU,KACJN,GAAY8sG,GAAwB,GACvC,CAACA,EAAwB9sG,IAE5B,MAAMw+C,GAAgBr0C,EAAAA,GAAAA,GACpB,YACA0vF,EAAIr6F,OAASq6F,EAAIh6F,QAAUg6F,EAAIr6F,MAAQq6F,EAAIh6F,OAAS,WAAa,aACjE4E,GAAW,cACXigE,EACAtgE,GAGF,OACEH,EAAAA,GAAAA,cAAA,OACEyJ,IAAKA,EACLtJ,UAAWo6C,EACXsW,YAAaN,EACb/vD,QAAS6O,EACTmB,cAAeo4F,IAEbvgG,EAAAA,IAAgB0rG,GAChB/zG,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,oBACVG,MAAM,OACNw0C,MAAI,EACJt0C,QAAS8zG,GAETt0G,EAAAA,GAAAA,cAAA,KAAGG,UAAU,uCAGhB6zG,GACCh0G,EAAAA,GAAAA,cAAA,UACEyJ,IAAKi3D,EACLvgE,UAAU,YAEVlK,MAAOk+G,EAAe,sBAAmB97G,IAG5CiC,IAAmB65G,GAClBn0G,EAAAA,GAAAA,cAAA,OACExL,IAAK8F,EACLuY,IAAI,GACJ1S,UAAU,YAGb+zG,GACCl0G,EAAAA,GAAAA,cAACuhC,GAAAA,EAAc7wB,GAAA,CACb8wB,SAAO,EACPhtC,IAAKy/G,EACLtjG,UAAQ,EACRG,MAAI,EACJf,OAAK,EACLpC,yBAAuB,EACvBkD,aAAW,EACX8jG,QAAQ,QAEJjmG,IAGPG,GACC7O,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAOhG,GAAkB05G,EAAY,QAAU,UAEzDxzG,QAAmCnI,IAAxB+7G,GACVp0G,EAAAA,GAAAA,cAACsK,GAAAA,EAAI,CACHrL,OAAQypG,EACRptD,iBAAkBA,EAClByyC,iBAAkBA,EAClBzpF,UAAWA,EACXiG,UAAWA,EACXtU,MAAO+3F,EACP7tF,UAAU,mBACVqK,WAAS,EACTpL,QAASypG,EACT7iF,oBAAqB8iF,IAEnBr4D,GAAmBzwC,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAAC/D,QAASg0G,EAAiB1wG,KAAK,QAAQhE,EAAK,qBAC3EE,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAAC/D,QAASi0G,EAAqB3wG,KAAK,YAC1ChE,EAAK2wC,EAAkB,cAAgB,oBAEzCsjE,GACC/zG,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAAC+5B,aAAW,EAACx6B,KAAK,SAAStD,QAAS+zG,GAAsBz0G,EAAK,YAI1E,ICzHV,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,OAAEQ,IAAWL,EAAAA,EAAAA,IAAyBH,IAAW,CAAC,EAClD2yC,EAAkBn3C,QAAQgF,KAAW4f,EAAAA,EAAAA,IAAqBpgB,EAAQQ,GACxE,MAAO,CACLwnC,UAAWhoC,EAAO82G,KAAKC,MAAMD,KAC7BnkE,kBACD,GAPe5yC,EAzDyBi3G,EAC3C30G,YACAmwC,cACAykE,cACAjvE,YACA2K,kBACAukE,kBAEA,MAAM,cAAEC,EAAa,QAAExiB,IAAYlzF,EAAAA,EAAAA,MAG7BiU,GAAerY,EAAAA,EAAAA,IAAuB,OAG1Co9C,QAASxH,IACPyH,EAAAA,GAAAA,IAAwB,CAAEC,QAASjlC,EAAc0hG,WAjBzB,OAmB5B74G,EAAAA,EAAAA,KAAU,KACJi0C,GACF2kE,GACF,GACC,CAAC3kE,EAAa2kE,IAEjB,MAAMX,GAAoB70G,EAAAA,EAAAA,KAAam2F,IACrCnD,EAAQ,CAAEmD,MAAKuf,cAAc,GAAO,GACnC,CAAC1iB,IAEE/4C,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,KAEhD,OACE55C,EAAAA,GAAAA,cAAA,OACEyJ,IAAK+J,EACLrT,WAAW+F,EAAAA,GAAAA,GAAe,YAAa/F,EAAWkI,EAAAA,GAAe,eAAiB,kBAEhF0sG,EAEEr7D,GAAqB5T,GAAaA,EAAU3hC,OAC9C2hC,EAAUlmC,KAAKg2F,GACb51F,EAAAA,GAAAA,cAAC8zG,GAAS,CACRtvG,IAAKoxF,EAAIrgG,GACTqgG,IAAKA,EACL7kD,oBAAqBA,EACrBh1C,YAAau0C,EACb9vC,QAASu0G,EAAcC,OAAc38G,EACrC07G,cAAeO,EACf7jE,gBAAiBA,MAGnBiJ,GAAqB5T,EACvB9lC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAkB,kBAEjCH,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,MAhBRh7C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mBAAkB,6CAkB/B,KCxEH,IAAKi1G,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,iBAAdA,EAAAA,EAAc,6BAAdA,EAAAA,EAAc,uBAAdA,EAAAA,EAAc,eAAdA,CAAc,MAOnB,MAAMC,GAAyD,CACpE,CAACD,GAAeE,OAAQ,QACxB,CAACF,GAAeG,aAAc,yBAC9B,CAACH,GAAeI,UAAW,mBAC3B,CAACJ,GAAeK,MAAO,WAGnBC,GAAwB,CAC5B,CAACN,GAAeE,OAAQ,aACxB,CAACF,GAAeG,aAAc,gBAC9B,CAACH,GAAeI,UAAW,gBAC3B,CAACJ,GAAeK,MAAO,aAqEzB,IAAe73G,EAAAA,EAAAA,KAlEwB+3G,EACrC5sD,YAAWwE,cAAai4C,iBAAgBoQ,eAActK,oBACtDC,uBAEA,MAAMzrG,GAAOC,EAAAA,EAAAA,KAkBP81G,GAAmBp2G,EAAAA,EAAAA,KAAY,KACnCm2G,EAAa7sD,IAAcqsD,GAAeI,SAAW,WAAa,OAAO,GACxE,CAACzsD,EAAW6sD,IAMf,OACE51G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBAAoBK,QALrC,SAAyB4Y,GACvBA,EAAMhT,iBACR,EAG+DC,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACpF0wD,IAAcqsD,GAAeE,OAASvsD,IAAcqsD,GAAeG,aAClEv1G,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,uBACVsD,UAAWslD,IAAcqsD,GAAeI,SAAW,kBAAoB,cACvEhyG,OAAK,EACLs3C,OAAK,EACLx6C,MAAM,cACNE,QAASq1G,GAET71G,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iBAIhBorG,IAvCoBt+C,EAuCgBmoD,GAAeE,MArCpDt1G,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAY,sBAAoB4oD,IAAckE,EAAM,YAAc,IAElEzsD,QAASA,IAAM+sD,EAAYN,GAC3BxpD,UAAW3D,EAAKu1G,GAAuBpoD,IACvCzpD,OAAK,EACLs3C,OAAK,EACLx6C,MAAM,eAENN,EAAAA,GAAAA,cAAA,KAAGG,UAAWu1G,GAAsBzoD,QAiCpClE,IAAcqsD,GAAeE,OAASvsD,IAAcqsD,GAAeG,cACnEv1G,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,uBACVK,QAASglG,EACT/hG,UAAU,gBACVD,OAAK,EACLs3C,OAAK,EACLx6C,MAAM,eAENN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,uBArDrB,IAAyB8sD,CAwDjB,IC3BV,IAAIhqB,IAAc,EAElB,MA2QA,IAAerlC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACQ,CACLg4G,mBAAmBxkG,EAAAA,EAAAA,IAAexT,GAAQg4G,kBAC1CnlE,sBAAsB1F,EAAAA,EAAAA,IAA2BntC,GACjD2pD,aAAc3pD,EAAO2pD,gBALP5pD,EA3Q0Bk4G,EAC5Cz3G,SACAN,WACAiB,SACA+3F,kBACA+d,cACAe,oBACAnlE,uBACA8W,eACA5sB,SACAz7B,UACAqmG,gBACA6F,oBACAC,mBACAtzD,sBACAjH,kBACA7wC,YACA60G,cACAxP,iBACAoQ,eACAjQ,iBACAD,uBACAphG,YACAiG,YACA+wC,mBACAyyC,mBACA93F,YAEA,MAAM,uBAAE+/G,EAAsB,0BAAE36D,IAA8B97C,EAAAA,EAAAA,OACvDwpD,EAAW+D,IAAgBtnD,EAAAA,EAAAA,IAAiB,IAC5Cu+F,EAAckS,IAAmBzwG,EAAAA,EAAAA,IAAmB,KACpD8xC,EAAoB4+D,IAAyB1wG,EAAAA,EAAAA,IAAmB,KACjE,SAAE7C,IAAaC,EAAAA,EAAAA,OAEduzG,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAep3G,EAAQG,OAAS/G,EAAWsK,IAClF,aAAEiM,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB/P,EAAQG,GAAS,GAAO,IAEpF6jC,IAAehkC,IAClBgkC,IAAc,IAGhB5mC,EAAAA,EAAAA,KAAU,KACRw+B,GAAQ,GACP,CAACA,KAGJx+B,EAAAA,EAAAA,KAAU,KACJkvG,GACJz+C,EA1FuB,EA0FS,GAC/B,CAACy+C,KAEJlvG,EAAAA,EAAAA,KAAU,KACHorD,IACD9W,GACFqlE,IAEF36D,IAA2B,GAC1B,CAAC1K,EAAsB8W,EAAcpM,EAA2B26D,KAEnE/pG,EAAAA,EAAAA,KAAgB,KACd,GAAKtJ,IAAY2oG,EASjB,OALIrsG,IACFlL,SAASwU,KAAKtU,UAAUC,IAAI,iCAC5BH,SAASwU,KAAKtU,UAAUC,IAAI,wBAGvB,KACD+K,IACFq3G,EAAAA,GAAAA,KAAQ,KACNviH,SAASwU,KAAKtU,UAAUuU,OAAO,uBAC/B5L,YAAW,KACT7I,SAASwU,KAAKtU,UAAUuU,OAAO,gCAAgC,GArHhD,IAsHK,GAE1B,CACD,GACA,CAAC8iG,EAAmB3oG,EAAU1D,IAEjC,MAAMs3G,GAAkBp7G,EAAAA,EAAAA,IAAO4oG,GAC/BwS,EAAgBj7G,QAAUyoG,GAC1B1nG,EAAAA,EAAAA,KAAU,KACHk6G,EAAgBj7G,QAAQ6I,SAAUlF,IAIvCs3G,EAAgBj7G,QAAQs9C,SAASp0B,IAC/BmhF,EAAe,CAAErrD,MAAO91B,GAAO,IAGjCyxF,EAAgB,IAAG,GAClB,CAACh3G,EAAQ0mG,IAEZ,MAAMtrD,GAAoB56C,EAAAA,EAAAA,KAAY,CAAC66C,EAAe91B,KACpDyxF,GAAiB7+D,GAAW,IAAIA,EAAQ5yB,KAExCihF,EAAcnrD,EAAM,GACnB,CAACmrD,IAEE+Q,GAAwBr7G,EAAAA,EAAAA,IAAOm8C,GACrCk/D,EAAsBl7G,QAAUg8C,GAChCj7C,EAAAA,EAAAA,KAAU,KACHm6G,EAAsBl7G,QAAQ6I,SAAUlF,IAI7Cu3G,EAAsBl7G,QAAQs9C,SAAS69D,IACrC/Q,EAAqB,CACnB+Q,cACA,IAGJR,EAAgB,IAAG,GAClB,CAACh3G,EAAQymG,IAEZ,MAAMgR,GAA0Bj3G,EAAAA,EAAAA,KAAa66C,IAC3C47D,GAAuB/vF,GAAQ,IAAIA,EAAKm0B,EAAM/kD,MAE9C0iD,EAAoBqC,EAAM,GACzB,CAACrC,IAEE8L,GAAetkD,EAAAA,EAAAA,KAAamC,IAChCxC,IACAw2G,EAAah0G,EAAK,GACjB,CAACxC,EAASw2G,IAEPrC,GAAsB9zG,EAAAA,EAAAA,KAAY,CACtCqjC,EAAqB6Z,EAAoBs6C,EAA0BQ,KAEnEzmD,IAAkBlO,EAAS6Z,EAAUs6C,GAAgB,EAAMQ,EAA6B,GACvF,CAACzmD,IAEElxC,GAAOC,EAAAA,EAAAA,KAEb,SAAS42G,EAAc/kG,EAAmBstE,GACxC,OAAQn2B,GACN,KAAKqsD,GAAeE,MAClB,OACEt1G,EAAAA,GAAAA,cAACoxG,GAAW,CACVjxG,UAAU,aACVslG,cAAeprD,IAGrB,KAAK+6D,GAAeG,YAClB,OACEv1G,EAAAA,GAAAA,cAAC+3C,GAAiB,CAChB53C,UAAU,aACVmwC,YAAarxC,IAAW2S,GAAYstE,GACpCjnC,oBAAqBy+D,EACrBp4G,OAAQA,IAGd,KAAK82G,GAAeI,SAClB,OACEx1G,EAAAA,GAAAA,cAAC0yG,GAAa,CACZvyG,UAAU,aACVmwC,cAAa0mD,GAAkB/3F,IAAW2S,GAAYstE,GACtD8X,gBAAiBA,EACjBhmD,gBAAiBuiE,EACjBj1G,OAAQA,EACRN,SAAUA,IAGhB,KAAKo3G,GAAeK,KAClB,OACEz1G,EAAAA,GAAAA,cAAC80G,GAAS,CACR30G,UAAU,aACVmwC,cAAaykE,GAAc91G,IAAW2S,GAAYstE,GAClD61B,YAAaA,EACbC,YAAaA,IAMvB,CAMA,MAAM3iG,GACJrS,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBAAkBK,QANrC,SAAyB4Y,GACvBA,EAAMhT,iBACR,GAKO68B,IACCjjC,EAAAA,GAAAA,cAACskB,EAAAA,EAAU,CAACE,KAAK,QAAQD,UAAWwkC,EAAWqE,YAAar3D,OAAOsiD,OAAOg9D,IAAwBlxG,QAC/FwyG,IAINh0G,GACC3C,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLs3C,OAAK,EACLx6C,MAAM,cACNmD,UAAW3D,EAAK,SAChBK,UAAU,sBACV3D,KAAK,OACLgE,QAASpB,GAETY,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGjBH,EAAAA,GAAAA,cAAC21G,GAAgB,CACf5sD,UAAWA,EACXwE,YAAaT,EACb04C,eAAgBA,EAChBoQ,aAAc7xD,EACdunD,kBAAmBA,EACnBC,iBAAkBA,KAKxB,GAAI5oG,EAAU,CACZ,IAAKiM,EACH,OAGF,MAAMgoG,GAAkB1wG,EAAAA,GAAAA,GACtB,yBACA4I,EACAgnG,GAAqB,mBACrBxK,GAAqB,uBAGvB,OAAIA,EAEAtrG,EAAAA,GAAAA,cAAA,OAAKG,UAAWy2G,GACbvkG,IAMLrS,EAAAA,GAAAA,cAAC07C,GAAAA,EAAM,KACL17C,EAAAA,GAAAA,cAAA,OAAKG,UAAWy2G,GACbvkG,IAIT,CAEA,OACErS,EAAAA,GAAAA,cAACsK,GAAAA,EAAI,CACHrL,OAAQA,EACRqF,UAAWgnG,EAAoBhnG,EAAY,OAC3CiG,UAAW+gG,EAAoB/gG,EAAY,SAC3CnL,QAASA,EACTy3G,WAAYvL,EACZnrG,WAAW+F,EAAAA,GAAAA,GAAe,aAAc/F,GACxC6lB,oBAAqB5mB,EACrBkoF,aAAej/E,EAAAA,QAAkChQ,EAAnB89G,EAC9BW,aAAezuG,EAAAA,QAAkChQ,EAAnB+9G,EAC9Bv6D,mBAAoBxzC,EAAAA,GACpBszC,WAAS,EACTL,iBAAkBA,EAClByyC,iBAAkBA,EAClB93F,MAAOA,GAENoc,GACI,KCjSX,IAAezU,EAAAA,EAAAA,KA3BkBm5G,EAC/BC,aACA3hF,QACA4hF,aACAnuF,MACAtoB,aAGER,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKyyG,EAAWrtD,QAChBzpD,WAAW+F,EAAAA,GAAAA,GAAe,6CAA8C8wG,GAAc,eACtFlyD,WAAS,EAETtkD,QAASA,IAAMA,EAAQy2G,GACvB5hF,MAAOA,GAEN2hF,GACCh3G,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAAC/gB,KAAK,QAAQghB,KAAMsL,IAE7B9oB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAQ,IAAE82G,EAAWrtD,SACrC5pD,EAAAA,GAAAA,cAAA,QAAMG,UAAU,aAAYud,EAAAA,GAAAA,GAAWu5F,EAAWt2E,kBCoE1D,IAAe/iC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAM,CACLyoB,UAAWzoB,EAAO0oB,MAAM1B,QAFRjnB,EA9EiCq5G,EACnD3wF,YACAtnB,SACA6mD,eACAk0C,cACA4K,UACApkG,UACApB,cAEA,MAAM,eAAEqqD,IAAmBlqD,EAAAA,EAAAA,MAGrBiU,GAAerY,EAAAA,EAAAA,IAAuB,OACtC,aAAEyT,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB/P,OAAQ5G,OAAWA,GAAW,GAEzF8+G,GAAoB13G,EAAAA,EAAAA,KAAY,EAAGotB,QAAO+8B,cAC9C,MAAM9gC,EAAMvC,EAAUsG,GACtB48B,EAAe,CACbG,QAAU,IAAGA,IAAU9D,GAAgBh9B,EAAO,IAAGA,EAAIkoC,UAAW,GAAGS,WAAa,OAElFjxD,GAAS,GACR,CAACA,EAASipD,EAAgBljC,EAAWu/B,IAElCjC,GAAepkD,EAAAA,EAAAA,KAAaw3G,KAE3BA,EAAWrtD,QAAQ/Q,WAAW+rD,IAAUvgE,MAAM,MAInD8yE,EAAkBF,IACX,IACN,CAACrS,EAASuS,IAEPC,EAAuB3W,GAAsB,CACjD7uF,SAAU3S,EACV0iD,MAAOq4C,EACP/0C,SAAUpB,EACVzkD,aAGF/C,EAAAA,EAAAA,KAAU,KACJ29F,IAAgBA,EAAY71F,QAC9B/E,GACF,GACC,CAAC46F,EAAa56F,KAEjB/C,EAAAA,EAAAA,KAAU,KACRikG,GAAsB,uBAAwB8W,EAAsB5jG,EAAa,GAChF,CAAC4jG,IAEJ,MAAMC,GAAehjG,EAAAA,EAAAA,GAAY2lF,GAAeA,EAAY71F,OAAS61F,OAAc3hG,EAAWuW,GACxF0oG,EAAmBtd,IAAgBA,EAAY71F,OAASkzG,EAAerd,EAE7E,IAAKprF,GAAiB0oG,IAAqBA,EAAiBnzG,OAC1D,OAGF,MAAMhE,GAAY+F,EAAAA,GAAAA,GAChB,mDACA4I,GAGF,OACE9O,EAAAA,GAAAA,cAAA,OAAKG,UAAWA,EAAWsJ,IAAK+J,GAC7B8jG,GAAoBA,EAAiB13G,KAAI,CAAC23G,EAAgBtzF,IACzDjkB,EAAAA,GAAAA,cAAC+2G,GAAU,CACTvyG,IAAM,GAAE+yG,EAAe1qF,SAAS0qF,EAAe3tD,UAC/CqtD,WAAYM,EACZzuF,IAAKvC,EAAUgxF,EAAe1qF,OAC9BmqF,YAAU,EACVx2G,QAAS22G,EACT9hF,MAAO+hF,IAAyBnzF,MAGhC,KC9CV,IAAermB,EAAAA,EAAAA,KAvCsB45G,EACnCv4G,SAAQ+6F,cAAa56F,cAErB,MAAM,eAAEqqD,IAAmBlqD,EAAAA,EAAAA,OACrB,SAAEoD,IAAaC,EAAAA,EAAAA,OAEduzG,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAep3G,EAAQG,OAAS/G,EAAWsK,GAElF0M,GAAc5P,EAAAA,EAAAA,KAAaw3G,IAC/BxtD,EAAe,CACbG,QAAU,IAAGqtD,EAAWrtD,YAE1BxqD,GAAS,GACR,CAACA,EAASqqD,IAEb,OACEzpD,EAAAA,GAAAA,cAACsK,GAAAA,EAAI,CACHrL,OAAQA,EACRqF,UAAU,OACViG,UAAU,SACVnL,QAASA,EACTe,UAAU,iBACV6lB,oBAAqB5mB,EACrBkoF,aAAej/E,EAAAA,QAAkChQ,EAAnB89G,EAC9BW,aAAezuG,EAAAA,QAAkChQ,EAAnB+9G,EAC9Bv6D,mBAAoBxzC,EAAAA,GACpBszC,WAAS,GAERq+C,EAAYp6F,KAAKq3G,GAChBj3G,EAAAA,GAAAA,cAAC+2G,GAAU,CACTvyG,IAAKyyG,EAAWrtD,QAChBqtD,WAAYA,EACZz2G,QAAS6O,MAGR,ICwCX,IAAezR,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAM,SAAEylC,GAAajmC,EAAOimC,SAASygE,SAGrC,MAAO,CAAEzgE,WAAU0M,iBAFKvyB,EAAAA,EAAAA,IAAqBpgB,EAAQQ,GAEjBqyC,sBADP1F,EAAAA,EAAAA,IAA2BntC,GACE,GAL1CD,EA5D8B45G,EAChDn5G,SACAN,WACAiB,SACA+xC,kBACA5xC,UACA2kC,WACA0M,kBACAE,2BAGA,MAAMn9B,GAAerY,EAAAA,EAAAA,IAAuB,OACtC,aAAEyT,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB/P,OAAQ5G,OAAWA,GAAW,GACzFq/G,GAAerjG,EAAAA,EAAAA,GAAY0vB,GAAU,GACrC4zE,EAAoB5zE,GAAY2zE,EAChC5E,GAAoBC,EAAAA,GAAAA,GAAqBz0G,EAAQN,IAGrDu6C,QAASxH,IACPyH,EAAAA,GAAAA,IAAwB,CAAEC,QAASjlC,EAAcklC,WArBzB,OAuB5Br8C,EAAAA,EAAAA,KAAU,IAAO4C,GAAS6kB,EAAAA,EAAAA,GAAsB1kB,QAAW/G,GAAY,CAAC4G,EAAQG,IAEhF,MAIMe,GAAY+F,EAAAA,GAAAA,GAChB,gDACA4I,GACE6oG,GAAmBxzG,QAAW,UAGlC,OACEnE,EAAAA,GAAAA,cAAA,OACEyJ,IAAK+J,EACLrT,UAAWA,EACXmQ,YAdoBmgD,KACtBqiD,EAAkB,CAAElxG,KAAM,iBAAkB,GAezCgN,GAAgB+oG,EACfA,EAAkB/3G,KAAKkjC,GACrB9iC,EAAAA,GAAAA,cAACo1C,GAAAA,EAAa,CACZ5wC,IAAKs+B,EAAQvtC,GACbutC,QAASA,EACTtmC,KAAMg3C,EAAAA,IACNzC,oBAAqBA,EACrBvwC,QAASvB,EAAS+xC,OAAkB34C,EACpCk9C,SAAUzS,EACV2N,gBAAiBA,EACjB6E,YAAU,EACV3E,qBAAsBA,MAGxB/hC,EACF5O,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,WACN3iD,EACA,KC3FV,IAAgB,KAAO,uBAAuB,YAAc,wBC2G5D,IAAeuF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAQylC,SAAU6zE,GAAgB95G,EAAOi5C,aAAaytD,SAItD,MAAO,CAAEoT,cAAannE,iBAHEvyB,EAAAA,EAAAA,IAAqBpgB,EAAQQ,GAGdqyC,sBAFV1F,EAAAA,EAAAA,IAA2BntC,GAEK,GAN7CD,EApEkCutG,EACpDnsG,SACAymG,uBACAztD,sBACA74C,UACAw4G,cACAnnE,kBACAE,2BAEA,MAAM,yBAAEknE,IAA6Bt4G,EAAAA,EAAAA,MAG/BiU,GAAerY,EAAAA,EAAAA,IAAuB,OACtC,aAAEyT,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB/P,OAAQ5G,OAAWA,GAAW,GACzFq/G,GAAerjG,EAAAA,EAAAA,GAAYujG,GAAa,GACxCD,EAAoBC,GAAeF,GAEzC59D,EAAAA,GAAAA,GAAoBtmC,GAEpB,MACE+kC,QAASxH,IACPyH,EAAAA,GAAAA,IAAwB,CAAEC,QAASjlC,EAAcklC,WAvBzB,IAuB4D38C,YAAakD,KAErG5C,EAAAA,EAAAA,KAAU,IAAO4C,GAAS6kB,EAAAA,EAAAA,GAAsB1kB,QAAW/G,GAAY,CAAC4G,EAAQG,IAEhF,MAAMs3G,GAA0Bj3G,EAAAA,EAAAA,KAAaq4G,IACtC74G,IACLg5C,EAAoB6/D,GACpBpS,EAAqB,CACnB+Q,WAAYqB,EAAGviH,KAEjBsiH,IAA0B,GACzB,CAACnS,EAAsBmS,EAA0B54G,EAAQg5C,IAEtD93C,GAAY+F,EAAAA,GAAAA,GAChBpQ,GAAAA,KACA,mCACAgZ,GACC6oG,GAAmBxzG,QAAUrO,GAAAA,QAGhC,OACEkK,EAAAA,GAAAA,cAAA,OACEyJ,IAAK+J,EACLrT,UAAWA,GAEVyO,GAAgB+oG,EACfA,EAAkB/3G,KAAKkjC,GACrB9iC,EAAAA,GAAAA,cAACo1C,GAAAA,EAAa,CACZ5wC,IAAKs+B,EAAQvtC,GACbutC,QAASA,EACT3iC,UAAWrK,GAAAA,YACX0G,KAAMu7G,EAAAA,IACNhnE,oBAAqBA,EACrBvwC,QAASk2G,EACTnhE,SAAUzS,EACV2N,gBAAiBA,EACjB6E,YAAU,EACV3E,qBAAsBA,MAGxB/hC,EACF5O,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,WACN3iD,EACA,KC9CV,IAAeuF,EAAAA,EAAAA,KApCsBo6G,EACnC/4G,SACAg5G,kBAAiB,EACjBxnE,kBACA60D,eACA4S,iBACA94G,UACA4mB,0BAEA,MAAOmwF,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAep3G,EAAQG,GAE9DU,GAAOC,EAAAA,EAAAA,KAEb,OACEC,EAAAA,GAAAA,cAACsK,GAAAA,EAAI,CACHrL,OAAQA,EACRuL,WAAS,EACTlG,UAAU,QACViG,UAAW0tG,EAAiB,MAAQ,SACpC93G,UAAU,uCACVf,QAASA,EACT4mB,oBAAqBA,EACrBshE,aAAej/E,EAAAA,QAAkChQ,EAAnB89G,EAC9BW,aAAezuG,EAAAA,QAAkChQ,EAAnB+9G,EAC9Bv6D,mBAAoBxzC,EAAAA,IAEnBi9F,GAAgBtlG,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,OAAOtD,QAAS8kG,GAAexlG,EAAK,qBACnEo4G,GACCl4G,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,WAAWtD,QAAS03G,GAChCp4G,EAAK2wC,EAAkB,cAAgB,oBAGvC,I,wCC1CX,MAyCA,IAAe7yC,EAAAA,EAAAA,KAhCyBu6G,EACtC79D,QAAOjlB,QAAO70B,UAASuwC,0BAEvB,MAAM1hC,GAAc5P,EAAAA,EAAAA,KAAa0G,IAE/BA,EAAEgK,iBAEF3P,IAAU85C,EAAM,GACf,CAACA,EAAO95C,IAELL,GAAY+F,EAAAA,GAAAA,GAChB,cACAmvB,GAAS,SAGX,OACEr1B,EAAAA,GAAAA,cAAA,OACEG,UAAWA,EACX0wD,YAAaxhD,EACbjP,MAAOk6C,EAAMA,OAEbt6C,EAAAA,GAAAA,cAACu1G,GAAAA,EAAW,CACVkB,WAAYn8D,EAAM/kD,GAClBiH,KAhCkB,GAiClB47G,qBAAmB,EACnBC,sBAAoB,EACpBC,8BAA+BvnE,IAE7B,ICuHV,IAAenzC,EAAAA,EAAAA,KAnGoButG,EACjClsG,SACAm4C,SACAL,eACA33C,UACAqmG,gBACAxtD,sBACA0tD,iBACAD,2BAGA,MAAMlyF,GAAerY,EAAAA,EAAAA,IAAuB,OACtC,aAAEyT,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB/P,OAAQ5G,OAAWA,GAAW,GACzFkgH,GAAqCpc,EAAAA,GAAAA,GACzC/kD,EAAOjzC,OAAS,IAAI4yC,KAAiBK,QAAU/+C,EAzD5B,MA0DhB,IAELyhD,EAAAA,GAAAA,GAAoBtmC,GAEpB,MACE+kC,QAASxH,IACPyH,EAAAA,GAAAA,IAAwB,CAAEC,QAASjlC,EAAcklC,WAvBzB,IAuB4D38C,YAAakD,IAE/Fu5G,GAAoB/4G,EAAAA,EAAAA,KAAa66C,IACrCmrD,EAAcnrD,EAAMm1D,QACpB9J,EAAe,CAAErrD,MAAOA,EAAM/kD,IAAK,GAClC,CAACowG,EAAgBF,IAEdiR,GAA0Bj3G,EAAAA,EAAAA,KAAa66C,IAC3CrC,EAAoBqC,GACpBorD,EAAqB,CAAE+Q,WAAYn8D,EAAM/kD,IAAK,GAC7C,CAACmwG,EAAsBztD,IAEpB4L,GAAepkD,EAAAA,EAAAA,KAAa66C,IAC5B,WAAYA,EACdk+D,EAAkBl+D,GAElBo8D,EAAwBp8D,EAC1B,GACC,CAACo8D,EAAyB8B,IAEvBnpG,GAAc5P,EAAAA,EAAAA,KAAY,CAACgwG,EAAgBl6G,KAC/CkwG,EAAcgK,GACd9J,EAAe,CAAErrD,MAAO/kD,GAAK,GAC5B,CAACowG,EAAgBF,IAEdgT,GAAyBh5G,EAAAA,EAAAA,KAAa66C,IAC1CrC,EAAoBqC,GACpBorD,EAAqB,CAAE+Q,WAAYn8D,EAAM/kD,IAAK,GAC7C,CAACmwG,EAAsBztD,IAEpBygE,EAAgBjY,GAAsB,CAC1C7uF,SAAU3S,EACV4gG,cAAc,EACdl+C,MAAO42D,EACPtzD,SAAUpB,EACVzkD,aAGF/C,EAAAA,EAAAA,KAAU,MApGZ,SAAwB4nB,EAAezQ,GACrC,MAAMve,EAAYue,EAAalY,QAC/B,IAAKrG,EACH,OAGF,MAAM,eAAEgrG,EAAc,YAAED,GAAgBP,GACtCxqG,EACA,eAZoB,GAcpB,GACA,GACA,GAGF,IAAK+qG,EAAY77F,SAAW67F,EAAY/7E,GACtC,OAEF,MAAMs8E,EAAQN,EAAe,GAC7B,IAAKA,EAAezqG,SAASyuB,IACvBA,IAAUs8E,IAAUC,GAAevrG,EAAW+qG,EAAYO,IAAQ,GAAQ,CAC9E,MACMxmD,EAAuB,UADZ91B,EAAQg8E,EAAeA,EAAe97F,OAAS,GAAK,QAAU,OAxBxD,GAyBgB8f,EAA6B,GAEpE0jB,EAAAA,GAAAA,GAA2B1yC,EAAW8kD,EACxC,CACF,CA2EI4+D,CAAeD,EAAellG,EAAa,GAC1C,CAACklG,IAEJ,MAAMv4G,GAAY+F,EAAAA,GAAAA,GAChB,gDACA4I,GAGF,OACE9O,EAAAA,GAAAA,cAAA,OACEyJ,IAAK+J,EACLrT,UAAWA,GAEVyO,GAAgB2pG,EACfA,EAAW34G,KAAI,CAAC06C,EAAOr2B,IACrB,WAAYq2B,EACVt6C,EAAAA,GAAAA,cAACwvG,GAAW,CACVhrG,IAAK81C,EAAM/kD,GACX+kD,MAAOA,EACPjlB,MAAOqjF,IAAkBz0F,EACzBzjB,QAAS6O,IAGXrP,EAAAA,GAAAA,cAACm4G,GAAiB,CAChB3zG,IAAK81C,EAAM/kD,GACX+kD,MAAOA,EACPjlB,MAAOqjF,IAAkBz0F,EACzBzjB,QAASi4G,EACT1nE,oBAAqBA,MAIzBniC,EACF5O,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,WACN3iD,EACA,ICpGV,IAAeuF,EAAAA,EAAAA,KAxCkBg7G,EAC/Bx4G,QACAugC,cACAsI,YACA4vE,WACAxjF,QACAvmB,uBAAuB,GACvBtO,cAEA,IAAI6R,EAEJ,MAAMymG,GAAmB3+G,EAAAA,EAAAA,GAAS8uC,EAAa,eAAcA,EAAUr+B,WAAQvS,GAW/E,OAVAwgH,EAAWA,GAAYC,GAGrBzmG,EACErS,EAAAA,GAAAA,cAAA,OAAKxL,IAAKqkH,EAAU14G,UAAW2O,EAAsB+D,IAAI,GAAGkmG,SAAS,QAAQ1kH,WAAW,IAEjF+L,IACTiS,GAAUskC,EAAAA,GAAAA,IAAgBv2C,EAAO,IAIjCJ,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPpU,MAAOA,EACPl1B,UAAU,iCACV0wD,YAAa6jD,GAAAA,EACbl0G,QAASA,GAETR,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SACM,iBAAZkS,GAAuBqL,EAAAA,GAAAA,GAAWrL,GAAWA,GAEvDrS,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACZC,GAAUJ,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SAASC,GAClCugC,GAAgB3gC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eAAewgC,IAExC,ICWf,IAAe/iC,EAAAA,EAAAA,KAjDmBo7G,EAChC3jF,QAAO4jF,eAAcC,eAAc14G,cAEnC,IAAIrI,EACA8wC,EACAkwE,EAEA,UAAWD,IACb/gH,EAAQ+gH,EAAa/gH,OAGnB,cAAe+gH,IACjBjwE,EAAYiwE,EAAajwE,WAEvB,iBAAkBiwE,GAAgBD,IACpCE,EAAeD,EAAaC,cAG9B,MAAML,GAAmB3+G,EAAAA,EAAAA,GAASg/G,EAAgB,eAAcA,EAAavuG,WAAQvS,GAC/E0vD,GAAe5tD,EAAAA,EAAAA,GAAShC,GAAU,QAAOA,EAAM5C,aAC/CuZ,GAAuBuyB,EAAAA,GAAAA,GAAmB0mB,GAE1C14C,GAAc5P,EAAAA,EAAAA,KAAY,KAC9Be,EAAQ04G,EAAa,GACpB,CAACA,EAAc14G,IAElB,GAAIy4G,EACF,OACEj5G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCAAkCK,QAAS6O,GACxDrP,EAAAA,GAAAA,cAAA,OAAKxL,IAAM2D,GAAO8wC,WAAWhuC,SAAY69G,EAAkBjmG,IAAI,KAC/D7S,EAAAA,GAAAA,cAAA,OAAKxL,IAAKuzD,EAAc5nD,WAAW+F,EAAAA,GAAAA,GAAe,aAAc4I,GAAuB+D,IAAI,MAKjG,MAAM,MAAEzS,EAAK,YAAEugC,GAAgBu4E,EAE/B,OACEl5G,EAAAA,GAAAA,cAAC44G,GAAU,CACTvjF,MAAOA,EACPwjF,SAAU9wD,GAAiB9e,GAAWhuC,SAAW69G,EACjDhqG,qBAAsBA,EACtB1O,MAAOA,EACPugC,YAAaA,EACbngC,QAAS6O,GACT,IClCN,IAAezR,EAAAA,EAAAA,KApBqBw7G,EAAG/jF,QAAO6jF,eAAc14G,cAC1D,MAAM,MACJJ,EAAK,IAAEwK,EAAG,YAAE+1B,EAAW,aAAEw4E,GACvBD,EAEE7pG,GAAc5P,EAAAA,EAAAA,KAAY,KAC9Be,EAAQ04G,EAAa,GACpB,CAACA,EAAc14G,IAElB,OACER,EAAAA,GAAAA,cAAC44G,GAAU,CACTvjF,MAAOA,EACP4T,UAAWkwE,EACX/4G,MAAOA,GAASwK,EAChB+1B,YAAaA,EACbngC,QAAS6O,GACT,ICYN,IAAezR,EAAAA,EAAAA,KAxBiBy7G,EAC9BH,eAAczoE,kBAAiBskE,cAAahkE,sBAAqBvwC,cAEjE,MAAM,IAAEo1F,GAAQsjB,EAEV7pG,GAAc5P,EAAAA,EAAAA,KAAY,CAAC65G,EAAgB38D,EAAoBs6C,KACnEz2F,EAAQ04G,EAAcv8D,EAAUs6C,EAAe,GAC9C,CAACiiB,EAAc14G,IAElB,GAAKo1F,EAIL,OACE51F,EAAAA,GAAAA,cAAC8zG,GAAS,CACRle,IAAKA,EACL7kD,oBAAqBA,EACrB5wC,UAAU,sBACVK,QAASu0G,EAAc1lG,OAAchX,EACrCo4C,gBAAiBA,GACjB,ICWN,IAAe7yC,EAAAA,EAAAA,KA9BqB27G,EAClCL,eACAzoE,kBACAM,sBACAvwC,UACAmwC,2BAEA,MAAM,QAAE7N,GAAYo2E,EAEpB,GAAKp2E,EAIL,OACE9iC,EAAAA,GAAAA,cAACo1C,GAAAA,EAAa,CACZtS,QAASA,EACTtmC,KAAMg9G,EAAAA,IACNzoE,oBAAqBA,EACrB3wC,MAAO0iC,EAAQwX,MACfn6C,UAAU,sBACVK,QAASA,EACT+0C,SAAU2jE,EACVzoE,gBAAiBA,EACjB6E,YAAU,EACVmkE,eAAa,EACb9oE,qBAAsBA,GACtB,ICfAiW,IAAe9gD,EAAAA,GAAAA,KAAU+gD,GAAOA,KAAM,KAAK,GAoLjD,IAAejpD,EAAAA,EAAAA,KAlKwB87G,EACrCz6G,SACA4tB,QACA8sF,YACAC,mBACAC,WACAppE,kBACAskE,cACAjvF,WACA1mB,UACA06G,iBACAnpE,2BAEA,MAAM,SACJzZ,EAAQ,SACR6iF,IACEx6G,EAAAA,EAAAA,MAGEiU,GAAerY,EAAAA,EAAAA,IAAuB,OACtC,aAAEyT,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAAkB/P,OAAQ5G,OAAWA,GAAW,GACzF2hH,GAAoB7yF,EAAAA,GAAAA,GAAiBwyF,EAAW/qG,IAEpD2pC,QAASxH,IACPyH,EAAAA,GAAAA,IAAwB,CAC1BC,QAASjlC,EACT0hG,WA7C6B,IA8C7Bn5G,YAAakD,IAGT0hD,GAAiBlhD,EAAAA,EAAAA,KAAY,EAAGiX,gBAChCA,IAAc2qC,EAAAA,GAAAA,WAChBuF,GAAa9gC,EACf,GACC,CAACA,IAEE4yF,EAAgBjY,GAAsB,CAC1C7uF,SAAU3S,EACV0hG,6BAA8BqZ,EAC9BpZ,kBAAmBoZ,EACnBr4D,MAAOi4D,EACP30D,SAAU60D,EACV16G,aAGF/C,EAAAA,EAAAA,KAAU,KACRikG,GAAsB,uBAAwBoY,EAAellG,EAAa,GACzE,CAACklG,IAEJ,MAAMuB,GAAex6G,EAAAA,EAAAA,KAAY,KAC/By3B,EAAS,CAAE3hC,GAAIs3B,IACfktF,EAAS,CAAEltF,MAAOA,EAAQqtF,MAAOL,EAAU9wF,YAAa,GACvD,CAAC8D,EAAOqK,EAAU6iF,EAAUF,IAEzBM,GAAuB9lG,EAAAA,EAAAA,GAC3BulG,GAAkBz1G,OACdy1G,OACAvhH,EACJuW,GAEIwrG,EAA2BR,GAAkBz1G,OAASy1G,EAAmBO,EAE/E,IAAKvrG,IAAkBwrG,GAA0Bj2G,SAAU01G,EACzD,OAGF,MAAM15G,GAAY+F,EAAAA,GAAAA,GAChB,oCACAmC,EAAAA,GAAe,eAAiB,gBAChC2xG,GAAqB,UACrBlrG,GA4EF,OACE9O,EAAAA,GAAAA,cAAC0hD,GAAAA,EAAc,CACbj4C,IAAK+J,EACLrT,UAAWA,EACXwhD,MAAOy4D,EACPj9C,aAAa,uBACbrT,YAAU,EACVlI,WAAYjB,EACZ05D,cAAe,KAEdR,GAjFD75G,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC5/B,QAAM,EAAC1J,UAAU,wBAAwBK,QAASy5G,GAC1Dj6G,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAS05G,EAAU10G,OAiFpC7L,QAAQ8gH,GAA0Bj2G,SA3E9Bi2G,EAA0Bx6G,KAAI,CAAC06G,EAAiBr2F,KACrD,OAAQq2F,EAAgB14G,MACtB,IAAK,MACH,OACE5B,EAAAA,GAAAA,cAACq5G,GAAS,CACR70G,IAAK81G,EAAgB/kH,GACrB2jH,aAAcoB,EACdvpE,oBAAqBA,EACrBvwC,QAASs5G,EACTrpE,gBAAiBA,EACjBskE,YAAaA,IAInB,IAAK,QACH,OACE/0G,EAAAA,GAAAA,cAACg5G,GAAW,CACVx0G,IAAK81G,EAAgB/kH,GACrB0jH,aAAce,EACdd,aAAcoB,EACd95G,QAASs5G,IAIf,IAAK,UACH,OACE95G,EAAAA,GAAAA,cAACu5G,GAAa,CACZ/0G,IAAK81G,EAAgB/kH,GACrB2jH,aAAcoB,EACdvpE,oBAAqBA,EACrBvwC,QAASs5G,EACTrpE,gBAAiBA,EACjBE,qBAAsBA,IAI5B,IAAK,QACL,IAAK,OACL,IAAK,OACH,OACE3wC,EAAAA,GAAAA,cAACg5G,GAAW,CACVx0G,IAAK81G,EAAgB/kH,GACrB8/B,MAAOqjF,IAAkBz0F,EACzBi1F,aAAcoB,EACd95G,QAASs5G,IAGf,IAAK,UACL,IAAK,QACH,OACE95G,EAAAA,GAAAA,cAACo5G,GAAa,CACZ50G,IAAK81G,EAAgB/kH,GACrB8/B,MAAOqjF,IAAkBz0F,EACzBi1F,aAAcoB,EACd95G,QAASs5G,IAIf,QACE,OAAiB,IAiBN,IC5DrB,IAAel8G,EAAAA,EAAAA,KAjHkB28G,EAC/Bt7G,SACAX,SACAk8G,mBACAC,gBACA9pE,uBACAvxC,cAEA,MAAM,kBAAEs7G,EAAiB,iBAAE5yF,IAAqBvoB,EAAAA,EAAAA,MAG1CgnB,GAAYD,EAAAA,EAAAA,MAAYE,MAAM1B,KAC9BC,GAAYuB,EAAAA,EAAAA,MAAYzB,MAAMC,KAE9BhlB,GAAOC,EAAAA,EAAAA,KAEPyT,GAAerY,EAAAA,EAAAA,IAAuB,OAErCg7G,EAAkBC,EAAkBuE,IAAmBtE,EAAAA,GAAAA,GAAep3G,EAAQG,OAAS/G,IAE9FgE,EAAAA,EAAAA,KAAU,KACJ4C,GACF07G,GACF,GACC,CAAC17G,EAAQ07G,IAEZ,MAAM7Y,GAAmBriG,EAAAA,EAAAA,KAAalK,IACpC6J,IACAs7G,EAAkB,CAAEp8G,OAAQA,EAASs8G,SAAUrlH,GAAK,GACnD,CAAC+I,EAAQc,EAASs7G,IAEfG,EAAsBpa,GAAsB,CAChD7uF,SAAU3S,EACV0iD,MAAO84D,EACPx1D,SAAU68C,EACVjB,mBAAmB,EACnBH,kCAAkC,EAClCthG,YAaF,OAVA/C,EAAAA,EAAAA,KAAU,KACRikG,GAAsB,uBAAwBua,EAAqBrnG,EAAa,GAC/E,CAACqnG,KAEJx+G,EAAAA,EAAAA,KAAU,KACJo+G,IAAkBA,EAAct2G,QAClC/E,GACF,GACC,CAACq7G,EAAer7G,IAGjBY,EAAAA,GAAAA,cAACsK,GAAAA,EAAI,CACHrL,OAAQA,EACRqF,UAAU,OACViG,UAAU,SACVnL,QAASA,EACTe,UAAU,aACV6lB,oBAAqB5mB,EACrBkoF,aAAej/E,EAAAA,QAAkChQ,EAAnB89G,EAC9BW,aAAezuG,EAAAA,QAAkChQ,EAAnB+9G,EAC9Bv6D,mBAAoBxzC,EAAAA,GACpBszC,WAAS,GAET37C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBAAgBkG,IAAI,QAAQvG,EAAK,uBAC/CymB,GAAaxB,GAAa01F,GAAe76G,KAAI,EAAGrK,KAAIkxC,aAAaxiB,KAChE,MAAMzG,GAAOhf,EAAAA,EAAAA,IAASjJ,GAAMgxB,EAAUhxB,QAAM8C,EACtC+F,EAAQof,OAAuBnlB,EAAhB0sB,EAAUxvB,GACzBq/E,EAAap3D,GAAQpf,EAiB3B,OACE4B,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKjP,EACL4K,UAAU,yDAEVK,QApBgB6O,MACbo3B,GAAakK,EAChBmxD,EAAiBvsG,GAEjBuyB,EAAiB,CACf3xB,QAAS2J,EAAK,+BACdsrB,WAAYtrB,EAAK,QACjBwS,OAAQ,CACNA,OAAQ,mBACRy7C,QAAS,CAAC,IAGhB,EASE14B,MAAOwlF,IAAwB52F,EAC/B62F,cAAenqE,GAAwBlK,GAAazmC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,yCAEjEH,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CACL/gB,KAAK,QACLghB,KAAMA,EACNpf,KAAMA,EACN+B,WAAW+F,EAAAA,GAAAA,GAAes0G,IAAqBjlH,GAAM,cAEvDyK,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACZy0E,GAAc50E,EAAAA,GAAAA,cAACgiD,GAAAA,EAAa,CAACC,KAAM2yB,EAAYmmC,QAAM,IACtD/6G,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYqd,EACxB1d,EAAK,4BACLA,EAAK,cAAe1B,GAAMgxE,aAAc,OAGrC,IAGV,I,gBC3FX,MA6IA,IAAexxE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAC1B08G,EAAe58G,IAAQigB,EAAAA,EAAAA,IAAmBvgB,EAAQM,EAAK7I,IAC7D,IAAK6I,IAAS48G,EACZ,MAAO,CAAC,EAGV,MAAM,MAAE1nC,EAAK,QAAE9yB,IAAYi9C,EAAAA,EAAAA,IAAwB3/F,IAAW,CAAC,GACzD,WAAEyrE,EAAU,SAAE7qD,GAAa8hC,GAAW,CAAC,EAE7C,MAAO,CACLpiD,OACA48G,eACA1nC,QACA/J,aACA7qD,WACA7M,eAAgB/T,EAAO2e,SAASC,MAAM7K,eACvC,GAlBehU,EA7I2Bo9G,EAC7C38G,SACAN,WACA4T,WACAxT,OACA48G,eACA1nC,QACA/J,aACA7qD,WACA7M,iBACAzS,cAEA,MAAM,wBACJy+F,EAAuB,aACvB7gF,IACEzd,EAAAA,EAAAA,MAGEiU,GAAerY,EAAAA,EAAAA,IAAuB,MAEtC2E,GAAOC,EAAAA,EAAAA,MACbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,KAGV/C,EAAAA,EAAAA,KAAU,KACR,GAAKuV,EAML,OAFAmO,EAAAA,EAAAA,MAEOC,EAAAA,EAAqB,GAC3B,CAACpO,IAEJ,MAAMspG,GAAgCz7G,EAAAA,EAAAA,KAAY,KAChDo+F,GAAyB,GACxB,CAACA,KAEG58C,EAAaC,IAAWC,EAAAA,GAAAA,GAAkB+5D,EAA+Bx8F,GAE1Ey8F,GAAkBthH,EAAAA,EAAAA,KAAQ,IACzBy5E,GAAUryB,GAAa98C,QAAW62G,EAIhC/5D,EAAYrhD,KAAKrK,IACtB,MAAMY,EAAU6kH,EAAazlH,GAC7B,IAAKY,EACH,OAGF,MAAMilH,EAAajlH,EAAQsb,UAAW/S,EAAAA,EAAAA,KAAW4nB,EAAAA,EAAAA,MAAanwB,EAAQsb,eAAYpZ,EAElF,IAAIgjH,EACJ,GAAIj9G,IAAQ69C,EAAAA,EAAAA,IAAc79C,GACxBi9G,EAAaj9G,OACR,GAAIjI,EAAQmlH,YAAa,CAC9B,MAAM,cAAEC,EAAa,WAAE33F,GAAeztB,EAAQmlH,YAC9CD,EAAaE,GAAiB33F,GAAavlB,EAAAA,EAAAA,KAAWioB,EAAAA,EAAAA,MAAa1C,QAAcvrB,CACnF,MACEgjH,EAAallH,EAAQsb,UAAWpT,EAAAA,EAAAA,KAAWioB,EAAAA,EAAAA,MAAanwB,EAAQsb,eAAYpZ,EAG9E,MAAO,CACLlC,UACAilH,aACAC,aACA76G,QAASA,IAAMwc,EAAa,CAAE1e,SAAQN,WAAUue,UAAWhnB,IAC5D,IACAowB,OAAOrsB,SA3BD4/C,GAAAA,GA4BR,CAACo6B,EAAOryB,EAAa+5D,EAAc58G,EAAM4e,EAAc1e,EAAQN,IAE5DoZ,GAAgB+1C,EAAAA,GAAAA,GAA0B35C,GAAc,GAAOyQ,IACnE,MAAMu3F,EAAcL,KAA6B,IAAXl3F,EAAe,EAAIA,GACrDu3F,GACFA,EAAYh7G,SACd,GACC,oBAAoB,GAiCjBi7G,EAAUx6D,IAAc,KAAOviC,IAAW,GAEhD,OACE1e,EAAAA,GAAAA,cAAC0hD,GAAAA,EAAc,CACbj4C,IAAK+J,EACLrT,UAAU,4BACVwhD,MAAOw5D,EACPO,iBAAkB,EAClB95D,WAAYV,EACZmM,UAAWj2C,GAEVqkG,GACCz7G,EAAAA,GAAAA,cAAA,KAAGwE,IAAI,cAAcrE,UAAU,cAAckG,IAAI,QAC7CitE,EAEkB,IAAf/J,GAAqB4xC,EAAgBh3G,OAEvB,IAAfolE,EACF,kBAEC,GAAG4xC,EAAgBh3G,SAAWolE,GAAc4xC,EAAgBh3G,yBAJ7DrE,EAAK,yBAFLA,EAAK,gCAUVq7G,EAAgBv7G,KAvDM+7G,EACzBxlH,UAASilH,aAAYC,aAAY76G,cAOjC,MAAM2E,GAAOijD,EAAAA,EAAAA,GAAqBtoD,EAAM3J,OAASkC,EAAWi7E,GAE5D,OACEtzE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKrO,EAAQZ,GACbqmH,eAAgBzlH,EAAQynB,KACxBzd,UAAU,gDACVK,QAASA,GAETR,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAACnf,KAAMi9G,EAAY79F,KAAM49F,EAAYvpG,eAAgBA,EAAgB4L,WAAS,IACrFzd,EAAAA,GAAAA,cAAA,OAAKG,UAAU,QACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,6BACbH,EAAAA,GAAAA,cAACgiD,GAAAA,EAAa,CAACC,KAAOm5D,GAAcC,IACpCr7G,EAAAA,GAAAA,cAAC67G,GAAAA,EAAe,CAAC1lH,QAASA,KAE5B6J,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WAAWkG,IAAI,QAC3BlB,IAGI,IA6BI,KCjErB,IAAevH,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUi1C,mBACF,CACLr2C,KAAKw9C,EAAAA,EAAAA,IAAiBp8C,EAAQi1C,GAC9B+oE,YAAYC,EAAAA,EAAAA,IAAyBj+G,GACrC6yC,sBAAsB1F,EAAAA,EAAAA,IAA2BntC,MALnCD,EA1FgCm+G,EAClDjpE,eAAchC,sBAAqBr0C,MAAKo/G,aACxCpyF,cAAainB,2BAEb,MAAM,aAAEe,EAAY,iBAAED,EAAgB,eAAEqqC,IAAmBv8E,EAAAA,EAAAA,MAGrDoyC,GAAkBx2C,EAAAA,EAAAA,IAA0B,MAE5C2E,GAAOC,EAAAA,EAAAA,KACPu3F,EAAU56F,IAAQA,EAAI03C,YAAc96C,QAAQoD,EAAIy3C,eAChD8nE,EAAoB3iH,QAAQoD,GAAKqnC,UAEjC4zE,GAAoB99G,EAAAA,EAAAA,KAAQ,KAAM,IAAAqiH,EACtC,IAAKx/G,EACH,MAAO,GAGT,MAAMy/G,GAAuE,QAAnDD,EAACx/G,EAAIqnC,UAAUpe,QAAO,EAAGutF,eAAgBA,WAAU,IAAAgJ,EAAAA,EAAI,IAC9E73E,MAAM,EAtBuB,GAuB1B+3E,GAAmB1/G,EAAI2/G,QAAU,IAAIz8G,KAAI,EAAGrK,QAASA,IACrD+mH,EAAgB5/G,EAAIqnC,SAAWrnC,EAAIqnC,SAASpe,QAAO,EAAGpwB,SAAU6mH,EAAgB5mH,SAASD,KAAO,GAEtG,MAAO,IAAI4mH,KAAuBz/G,EAAI2/G,QAAU,MAAQC,GAAej4E,MAAM,EAzBrD,EAyB4E,GACnG,CAAC3nC,KAEJL,EAAAA,EAAAA,KAAU,MAEH4/G,GAAqBtE,EAAkBxzG,OA9BpB,GA8BoDzH,GAC1Eg1C,EAAa,CACXyB,eAAgB,CACdxT,UAAWjjC,EAAIijC,YAGrB,GACC,CAACs8E,EAAmBtE,EAAkBxzG,OAAQutC,EAAch1C,EAAKq2C,IAEpE,MAAMD,GAAiBrzC,EAAAA,EAAAA,KAAY,KACjCgyC,EAAiB,CAAEsB,gBAAe,GACjC,CAACtB,EAAkBsB,IAEhBwpE,GAAqB98G,EAAAA,EAAAA,KAAaqjC,IACtCg5C,EAAe,CAAE3oC,eAAgBrQ,EAAQqQ,gBAAiB,GACzD,CAAC2oC,IAEJ,IAAKp/E,EACH,OAGF,MAAM8/G,EAAoB7E,EAAkBxzG,OAAS,EAErD,OACEnE,EAAAA,GAAAA,cAAA,OAAKwE,IAAK9H,EAAInH,GAAI4K,UAAU,cAAckG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAClE2H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,QAAQkG,IAAI,QAAQ3J,EAAI0D,OACtCJ,EAAAA,GAAAA,cAAA,KAAGG,UAAU,QAAQkG,IAAI,QAAQvG,EAAK,WAAYpD,EAAIylC,MAAO,OAE/DniC,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAWm3F,EAAU,gBAAaj/F,EAClCiI,MAAM,UACN9D,KAAK,OACLs4C,MAAI,EACJC,OAAK,EACLv0C,QAASsyC,GAERhzC,EAAKw3F,EAAU,qBAAuB,sBAG3Ct3F,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4CACbH,EAAAA,GAAAA,cAAA,UAAQyJ,IAAKkoC,EAAiBxxC,UAAU,mBACtCq8G,GAAqBx8G,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,MAC9B6pG,GAAqB7E,EAAkB/3G,KAAKkjC,GAC3C9iC,EAAAA,GAAAA,cAACo1C,GAAAA,EAAa,CACZtS,QAASA,EACTtmC,KAAMigH,EAAAA,IACN1rE,oBAAqBA,EACrBsE,WAAYymE,GAAcpyF,EAC1B6rB,SAAUzS,EACVtiC,QAAS+7G,EACTxhE,eAAa,EACbpK,qBAAsBA,EACtBgB,gBAAiBA,OAInB,KCvFJiV,IAAe9gD,EAAAA,GAAAA,KAAU+gD,GAAOA,KAAM,KAAO,GA2EnD,IAAejpD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM0gB,GAAgBk+F,EAAAA,EAAAA,IAA2B5+G,IAC3C,MAAEw1E,EAAK,UAAEqpC,GAAcn+F,GAAiB,CAAC,GACzC,SAAEo+F,GAAa9+G,EAAOimC,SAE5B,MAAO,CACLuvC,QACAr8B,YAAa2lE,EAASllE,OACtBilE,YACAjzF,YAAapwB,SAAQgY,EAAAA,EAAAA,IAAexT,GAAQ++G,2BAC7C,GAXeh/G,EAzE6Bi/G,EAC/ClrG,WACA0hE,QACAr8B,cACA0lE,YACAjzF,cACAtqB,cAEA,MAAM,qBAAE29G,IAAyBx9G,EAAAA,EAAAA,MAG3BiU,GAAerY,EAAAA,EAAAA,IAAuB,MAEtC2E,GAAOC,EAAAA,EAAAA,MAGXw4C,QAASxH,IACPyH,EAAAA,GAAAA,IAAwB,CAAEC,QAASjlC,EAAcklC,WArBzB,MAsE5B,OA7CAr8C,EAAAA,EAAAA,KAAU,KACRuqD,IAAa,KACXm2D,GAAsB,GACtB,KAGJ/nG,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IAsCRY,EAAAA,GAAAA,cAAA,OAAKyJ,IAAK+J,EAAcrT,UAAU,8BAA8BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAnC5F,WACE,QAAcA,IAAVi7E,EAIJ,OAAKA,GAASr8B,EACLA,EAAYr3C,KAAKrK,GACtByK,EAAAA,GAAAA,cAACg8G,GAAgB,CACfx3G,IAAKjP,EACLw9C,aAAcx9C,EACdw7C,oBAAqBA,EACrBrnB,YAAaA,MAKfizF,EACGA,EAAUx4G,OAIRw4G,EAAU/8G,KAAKrK,GACpByK,EAAAA,GAAAA,cAACg8G,GAAgB,CACfx3G,IAAKjP,EACLw9C,aAAcx9C,EACdw7C,oBAAqBA,EACrBrnB,YAAaA,MARR1pB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAckG,IAAI,QAAO,kBAa1CrG,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,KACjB,CAIK27D,GACG,KC+CV,IAAe/4G,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM0gB,GAAgBw+F,EAAAA,EAAAA,IAAuBl/G,IACvC,MAAEw1E,EAAK,QAAE9yB,GAAYhiC,GAAiB,CAAC,GACvC,OAAElgB,EAAM,SAAEN,IAAaC,EAAAA,EAAAA,IAAyBH,IAAW,CAAC,EAC5DM,EAAOE,GAASD,EAAAA,EAAAA,IAAWP,EAAQQ,QAAUjG,EAC7C4kH,EAAgB7+G,GAAO8+G,EAAAA,EAAAA,IAAoBp/G,EAAQM,QAAQ/F,EAC3Do4C,EAAkBn3C,QAAQgF,KAAW4f,EAAAA,EAAAA,IAAqBpgB,EAAQQ,GAClEs4F,EAAat4F,GAAUN,GAAW64F,EAAAA,EAAAA,IAAiB/4F,EAAQQ,EAAQN,QAAY3F,EAC/Ey+F,EAAax9F,QAAQs9F,GAAYG,iBAGvC,MAAO,CACLzjB,QACA9yB,UACApiD,OACA6+G,gBACAxsE,kBACA0sE,cARoB7jH,QAAQ8E,IAAS9E,QAAQ0E,KAAa2oB,EAAAA,EAAAA,IAAiBvoB,EAAMJ,EAAU84F,GAS3FrF,uBAAwBn4F,QAAQgF,KAAWozF,EAAAA,EAAAA,IAA6B5zF,EAAQQ,GACjF,GApBeT,EAvGyBu/G,EAC3CxrG,WACA0hE,QACA9yB,UACApiD,OACA6+G,gBACAxrB,yBACAhhD,kBACA0sE,gBACA/9G,cAEA,MAAM,eACJi+G,EAAc,YACd5zF,EAAW,kBACX6zF,IACE/9G,EAAAA,EAAAA,MAGEiU,GAAerY,EAAAA,EAAAA,IAAuB,OAErCs4F,EAAiBC,IAAYC,EAAAA,GAAAA,GAAYlC,IAG9Cl5C,QAASxH,IACPyH,EAAAA,GAAAA,IAAwB,CAAEC,QAASjlC,EAAc0hG,WA1BzB,MA4BtBH,EAAcoI,IAAiBxmB,EAAAA,EAAAA,IAA4Bv4F,EAAM6+G,GAAelI,YAEhFwI,GAAiB99G,EAAAA,EAAAA,KAAY,CAACm2F,EAAej5C,EAAoBs6C,KACjE8d,IACE9d,EACFxD,GAAiB0B,IACf1rE,EAAY,CAAEmsE,MAAKT,cAAax4C,YAAW,IAG7ClzB,EAAY,CAAEmsE,MAAKj5C,cAInBt0C,EAAAA,IACFi1G,EAAkB,CAAEhqC,WAAOj7E,GAC7B,GACC,CAAC08G,EAAathB,EAAiBhqE,EAAa6zF,IAEzCE,GAAuB/9G,EAAAA,EAAAA,KAAY,KACvC49G,GAAgB,GACf,CAACA,IAEEv9G,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IA+BV,MAAMq+G,EAAankH,aAAkBjB,IAAVi7E,GAAuB9yB,GAAWA,EAAQr8C,QAErE,OACEnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YAAYkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACnD2H,EAAAA,GAAAA,cAAC0hD,GAAAA,EAAc,CACbj4C,IAAK+J,EACLrT,WAAW+F,EAAAA,GAAAA,GAAe,8BAA+Bu3G,GAAc,QACvE97D,MAAOnB,EACP2c,aAAa,aACbu+C,iBA/FkB,GAgGlB5xD,YAAU,EACVlI,WAAY47D,GAvClB,WACE,QAAcnlH,IAAVi7E,EAIJ,OAAK9yB,EAMAA,EAAQr8C,OAMNq8C,EAAQ5gD,KAAKg2F,GAClB51F,EAAAA,GAAAA,cAAC8zG,GAAS,CACRtvG,IAAKoxF,EAAIrgG,GACTqgG,IAAKA,EACL7kD,oBAAqBA,EACrBvwC,QAASu0G,EAAcwI,OAAiBllH,EACxCo4C,gBAAiBA,MAVjBzwC,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAckG,IAAI,QAAQvG,EAAK,gBAN5CE,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,KAmBd,CAeO27D,IAEFjjB,EACG,K,gBC3HV,MAAMgqB,GAAqC,CACzC,CACE,CAAEl5F,KAAM,YAAapkB,MAAO,mCAC5B,CAAEokB,KAAM,uBAAwBpkB,MAAO,6CAA8Cu9G,cAAc,IAErG,CACE,CAAEn5F,KAAM,eAAgBpkB,MAAO,sCAC/B,CAAEokB,KAAM,gBAAiBpkB,MAAO,yCAI9Bw9G,GAAmC,CACvC,CACE,CAAEp5F,KAAM,UAAWpkB,MAAO,sBAC1B,CAAEokB,KAAM,WAAYpkB,MAAO,wBAE7B,CACE,CAAEokB,KAAM,UAAWpkB,MAAO,sBAC1B,CAAEokB,KAAM,UAAWpkB,MAAO,wBAIxBy9G,GAAqC,CACzC,CACE,CAAEr5F,KAAM,QAASpkB,MAAO,sBAAuB09G,SAAS,GACxD,CACEt5F,KAAM,WAAYpkB,MAAO,8BAA+B09G,SAAS,EAAMC,eAAe,IAG1F,CACE,CAAEv5F,KAAM,iBAAkBpkB,MAAO,6BAA8B09G,SAAS,KA2F5E,IAAelgH,EAAAA,EAAAA,KAjF0BogH,EAAG9hE,UAAS+hE,YAAWC,iBAC9D,MAAMp+G,GAAOC,EAAAA,EAAAA,MAsBP,OAAEo+G,GAAYD,EAEpB,OACEl+G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,sBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,8BACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,6BAA6BL,EAAK,sBAEhDq+G,GACCn+G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCACZi+G,EAAAA,GAAAA,IAAet+G,EAAuB,IAAjBq+G,EAAOpwF,SAAgB,OAAIqwF,EAAAA,GAAAA,IAAet+G,EAAuB,IAAjBq+G,EAAOnwF,WAKnFhuB,EAAAA,GAAAA,cAAA,SAAOG,UAAU,8BACb89G,EAAYJ,GAAmB3hE,EAAU0hE,GAAiBF,IAAkB99G,KAAK8sD,GACjF1sD,EAAAA,GAAAA,cAAA,UACG0sD,EAAI9sD,KAAKy+G,IACR,MAAMC,EAASJ,EAAmBG,EAAK75F,MAEvC,OAAI65F,EAAKP,QAEL99G,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kCACZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mCACVk+G,EAAKN,cAAiB,KAAGQ,EAAAA,GAAAA,IAAcD,MAAWC,EAAAA,GAAAA,IAAcD,IAEnEt+G,EAAAA,GAAAA,cAAA,MAAIG,UAAU,qCAAqCL,EAAKu+G,EAAKj+G,SAK/Di+G,EAAKV,aAEL39G,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kCACZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mCAAmCm+G,EAAME,WAAW,KACjEx+G,EAAAA,GAAAA,cAAA,MAAIG,UAAU,qCAAqCL,EAAKu+G,EAAKj+G,SAMjEJ,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kCACZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oCACVmhD,EAAAA,GAAAA,IAAqBg9D,EAAMhjH,UAE7B,IAjEemjH,GAAGC,SAAQF,iBACzC,IAAKE,EACH,OAGF,MAAMC,EAAmB1sF,OAAOysF,GAAU,EAE1C,OACE1+G,EAAAA,GAAAA,cAAA,QAAMG,WAAW+F,EAAAA,GAAAA,GAAe,4BAA6By4G,GAAoB,aAC9EA,EAAoB,KAAGr9D,EAAAA,GAAAA,IAAqBt9C,KAAKiU,IAAIymG,MAAc,KAAGp9D,EAAAA,GAAAA,IAAqBo9D,KAC3FF,GACCx+G,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACG,IAAI,IACHw+G,EAAW,MAGZ,EAkDMC,CAAwBH,GACzBt+G,EAAAA,GAAAA,cAAA,MAAIG,UAAU,qCAAqCL,EAAKu+G,EAAKj+G,QAC1D,QAMX,IC1DV,IAAexC,EAAAA,EAAAA,KAvD+BghH,EAAGzoH,cAC/C,MAAM2J,GAAOC,EAAAA,EAAAA,MACP,wBAAE8+G,IAA4Bt/G,EAAAA,EAAAA,MAE9BsoD,GAAiB9qD,EAAAA,EAAAA,IAA4B5G,GAC7C4xD,GAAe5tD,EAAAA,EAAAA,IAASF,EAAAA,EAAAA,IAAoB9D,EAAS,UACrD6xD,EAAe1uD,SAAQ2uD,EAAAA,EAAAA,IAAqB9xD,IAE5CkZ,GAAc5P,EAAAA,EAAAA,KAAY,KAC9Bo/G,EAAwB,CAAEtiG,UAAWpmB,EAAQZ,IAAK,GACjD,CAACspH,EAAyB1oH,EAAQZ,KAErC,OACEyK,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GACT,0BACA5M,QAAQyuD,GAAgBF,IAAmB,uCAE7CrnD,QAAS6O,GAETrP,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oCAoBvB,SAAuBL,EAAc3J,EAAqB2E,EAAkBktD,GAC1E,OAAKltD,EAKHkF,EAAAA,GAAAA,cAAA,QAAMG,UAAU,iBACdH,EAAAA,GAAAA,cAAA,OAAKxL,IAAKsG,EAAS+X,IAAI,GAAG1S,WAAW+F,EAAAA,GAAAA,GAAe,uBAAwB8hD,GAAgB,YAC3FxvD,EAAAA,EAAAA,IAAgBrC,IAAY6J,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eACzCioD,EAAAA,EAAAA,GAAqBtoD,EAAM3J,GAAS,KAPhCiyD,EAAAA,EAAAA,GAAqBtoD,EAAM3J,EAUtC,CA/BWoyD,CAAczoD,EAAM3J,EAAS4xD,GAAgBF,EAAgBG,IAEhEhoD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACZL,EAAK,0BAA2B3J,EAAQ2oH,MAAO,OAIpD9+G,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACZmwE,EAAAA,GAAAA,IAAsC,IAAfn6E,EAAQynB,KAAa9d,EAAK4xB,OAEpD1xB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACZhK,EAAQ8zE,SAAWnqE,EAAK,2BAA4B3J,EAAQ8zE,UAAY,cAGzE,ICpCV,IAAI80C,GACAC,GAWJ,MAAMC,GAAwB,CAC5BC,YAAa,4BACbC,eAAgB,+BAChBC,UAAW,mCACXC,cAAe,kCACfC,mBAAoB,mCACpBC,0BAA2B,0CAC3BC,eAAgB,8BAChBC,kBAAmB,mCAEfC,GAAiB3pH,OAAOw2D,KAAK0yD,IAE7BU,GAAsB,CAC1BT,YAAa,yBACbU,aAAc,0BACdJ,eAAgB,4BAChBK,cAAe,2BACfC,aAAc,0BACdT,cAAe,4BAEXU,GAAehqH,OAAOw2D,KAAKozD,IA8IjC,IAAe/hH,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAM4/G,GAAa8B,EAAAA,EAAAA,IAAiBliH,EAAQQ,GACtCF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAC1B2hH,EAAO7hH,GAAMqmB,UAAUy7F,eAG7B,MAAO,CACLhC,aAAY+B,OAAM/jE,QAHW,uBAAf99C,GAAMwD,KAIrB,GATe/D,EAlI0BsiH,EAC5C7hH,SACA4/G,aACA+B,OACA/jE,cAEA,MAAMp8C,GAAOC,EAAAA,EAAAA,KAEPyT,GAAerY,EAAAA,EAAAA,IAAuB,OACrCm7C,EAAS8pE,IAAc56G,EAAAA,EAAAA,KAAS,GACjC66G,GAAellH,EAAAA,EAAAA,IAAiB,KAEhC,eAAEmlH,EAAc,yBAAEC,IAA6BhhH,EAAAA,EAAAA,MAC/CrD,GAAcC,EAAAA,EAAAA,MAEpBE,EAAAA,EAAAA,KAAU,KACRikH,EAAe,CAAEhiH,SAAQ49C,WAAU,GAClC,CAAC59C,EAAQgiH,EAAgBpkE,IAE5B,MAAMskE,GAAS3mH,EAAAA,EAAAA,KAAQ,IACdqiD,EAAU6jE,GAAeL,IAC/B,CAACxjE,IAEEukE,GAAc5mH,EAAAA,EAAAA,KAAQ,IACnBqiD,EAAUyjE,GAAsBV,IACtC,CAAC/iE,IA4EJ,OAzEA7/C,EAAAA,EAAAA,KAAU,KACH6hH,GAILsC,EAAO5nE,SAASp0B,IACd,MAAMk8F,EAAQxC,EAAW15F,GACQ,iBAAVk8F,GAGrBH,EAAyB,CACvB/7F,OACAlmB,SACAqiH,MAAOD,EAEP/C,aAAuB,mBAATn5F,GAElB,GACA,GACD,CAACg8F,EAAQliH,EAAQ4/G,EAAYqC,KAEhClkH,EAAAA,EAAAA,KAAU,KACR,iBA3FJwrC,iBAME,OALKk3E,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CAqFY6B,GAEDtqE,EAKA4nE,GAAe1qG,EAAalY,UAIjCklH,EAAO5nE,SAAQ,CAACp0B,EAAMP,KACpB,MAAMy8F,EAAQxC,EAAW15F,GAGzB,GAFiC,iBAAVk8F,GAERL,EAAa/kH,QAAQ9F,SAASgvB,GAC3C,OAGF,IAAKk8F,EAGH,YAFAL,EAAa/kH,QAAQuI,KAAK2gB,GAK5B,MAAM,UAAEq8F,GAAcH,EAEtB1B,GAAY8B,OACVttG,EAAalY,QAASyI,SAASkgB,GAC/B,CACE7jB,MAAON,EAAM2gH,EAAuCj8F,OACjDq8F,EAAY,CACb1mG,OAASxG,IAAcotG,EAAAA,GAAAA,IAAQ,4BAA6B,CAAEJ,MAAOE,EAAWltG,IAAGssG,SACnFe,aAAclhH,EAAK,kBACjB,CAAC,KACF4gH,IAIPL,EAAa/kH,QAAQuI,KAAK2gB,GAE1BhR,EAAalY,QAASyI,SAASkgB,GAAOhwB,UAAUuU,OAAO,SAAS,IAGlEtM,KAzCEkkH,GAAW,EA0Cd,EA9CD,EA8CI,GACH,CACDI,EAAQC,EAAanqE,EAAS4nE,EAAYp+G,EAAMxB,EAAQiiH,EAA0BN,EAAM/jH,IAGrFo6C,GAAY4nE,EAKfl+G,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAe,2BAA4BowC,GAAW,UACpEt2C,EAAAA,GAAAA,cAACg+G,GAAkB,CAACE,WAAYA,EAAYhiE,QAASA,KAEnDmkE,EAAa/kH,QAAQ6I,QAAUnE,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,MAEzCh7C,EAAAA,GAAAA,cAAA,OAAKyJ,IAAK+J,GACPgtG,EAAO5gH,KAAK8gH,GACX1gH,EAAAA,GAAAA,cAAA,OAAKwE,IAAKk8G,EAAOvgH,UAAU,gCAI9B7G,QAAS4kH,EAAoC+C,mBAAmB98G,SAC/DnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,wBACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,8BAA8BL,EAAK,+BAE/Co+G,EAAoC+C,kBAAkBrhH,KAAKzJ,GAC3D6J,EAAAA,GAAAA,cAAC4+G,GAAuB,CAACzoH,QAASA,QApBnC6J,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,KAwBT,KCzJV,IAAep9C,EAAAA,EAAAA,KA1B+BsjH,EAAGtnF,WAC/C,MAAM95B,GAAOC,EAAAA,EAAAA,MACP,mBAAEohH,IAAuB5hH,EAAAA,EAAAA,MAEzBkyD,GAAW53D,EAAAA,EAAAA,KAAQ,KAAM46E,EAAAA,EAAAA,IAAgB76C,EAAKx7B,OAAO,CAACw7B,EAAKx7B,OAC3DiR,GAAc5P,EAAAA,EAAAA,KAAY,KAC9B0hH,EAAmB,CAAE1vD,SAAUA,EAAWl1C,UAAWqd,EAAKrd,WAAY,GACrE,CAACqd,EAAKrd,UAAW4kG,EAAoB1vD,IAExC,OACEzxD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,0BAA0BK,QAAS6O,GAChDrP,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CAAC/gB,KAAK,SAAS4B,KAAMw7B,EAAKx7B,OAEjC4B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACZy5B,EAAKx5B,OAGRJ,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCACZL,EAAK,0BAA2B85B,EAAKklF,MAAO,OAG7C,ICnBV,IAAIC,GACAC,GAWJ,MAAMoC,GAAe,CACnBC,WAAY,kCAERC,GAASvrH,OAAOw2D,KAAK60D,IAyI3B,IAAexjH,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAC1B2hH,EAAO7hH,GAAMqmB,UAAUy7F,eACvB9iE,GAAW9rC,EAAAA,EAAAA,IAAexT,GAIhC,MAAO,CAAEogH,WAHU9gE,EAAS8gE,WAAWqD,eAGlBtB,OAAM1jG,UAFT6gC,EAAS8gE,WAAWsD,iBAEA,GARtB3jH,EA5H0BsiH,EAC5C7hH,SACAsT,WACAssG,aACA+B,OACA1jG,gBAEA,MAAMzc,GAAOC,EAAAA,EAAAA,KAEPyT,GAAerY,EAAAA,EAAAA,IAAuB,OACrCm7C,EAAS8pE,IAAc56G,EAAAA,EAAAA,KAAS,GACjC66G,GAAellH,EAAAA,EAAAA,IAAiB,KAEhC,sBAAEsmH,EAAqB,yBAAElB,IAA6BhhH,EAAAA,EAAAA,MACtDrD,GAAcC,EAAAA,EAAAA,KAiFpB,OA/EAE,EAAAA,EAAAA,KAAU,KACJkgB,GACFklG,EAAsB,CAAEnjH,SAAQie,aAClC,GACC,CAACje,EAAQmjH,EAAuBllG,KAEnClgB,EAAAA,EAAAA,KAAU,KACHuV,IAAY2K,IACf8jG,EAAa/kH,QAAU,GACvB8kH,GAAW,GACb,GACC,CAACxuG,EAAU2K,KAGdlgB,EAAAA,EAAAA,KAAU,KACH6hH,GAILoD,GAAO1oE,SAASp0B,IACd,MAAMk8F,EAAQxC,EAAW15F,GACQ,iBAAVk8F,GAGrBH,EAAyB,CAAE/7F,OAAMlmB,SAAQqiH,MAAOD,GAClD,GACA,GACD,CAACpiH,EAAQ4/G,EAAYqC,KAExBlkH,EAAAA,EAAAA,KAAU,KACR,iBAvEJwrC,iBAME,OALKk3E,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CAiEY6B,GAEDtqE,EAKA4nE,GAAe1qG,EAAalY,UAIjCgmH,GAAO1oE,SAAQ,CAACp0B,EAAMP,KACpB,MAAMy8F,EAAQxC,EAAW15F,GAGzB,GAFiC,iBAAVk8F,GAERL,EAAa/kH,QAAQ9F,SAASgvB,GAC3C,OAGF,IAAKk8F,EAGH,YAFAL,EAAa/kH,QAAQuI,KAAK2gB,GAK5B,MAAM,UAAEq8F,GAAcH,EAEtB1B,GAAY8B,OACVttG,EAAalY,QAASyI,SAASkgB,GAC/B,CACE7jB,MAAON,EAAMshH,GAAwC58F,OAClDq8F,EAAY,CACb1mG,OAASxG,IAAcotG,EAAAA,GAAAA,IAAQ,4BAA6B,CAAEJ,MAAOE,EAAWltG,IAAGssG,SACnFe,aAAclhH,EAAK,kBACjB,CAAC,KACF4gH,IAIPL,EAAa/kH,QAAQuI,KAAK2gB,EAAK,IAGjCtoB,KAvCEkkH,GAAW,EAwCd,EA5CD,EA4CI,GACH,CACD9pE,EAAS4nE,EAAYp+G,EAAMxB,EAAQie,EAAWgkG,EAA0BN,EAAM/jH,IAG3Eo6C,GAAY4nE,GAAe3hG,EAK9Bvc,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAe,2BAA4BowC,GAAW,UACpEt2C,EAAAA,GAAAA,cAACg+G,GAAkB,CAACE,WAAYA,EAAYD,WAAS,KAEnDoC,EAAa/kH,QAAQ6I,QAAUnE,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,MAEzCh7C,EAAAA,GAAAA,cAAA,OAAKyJ,IAAK+J,GACP8tG,GAAO1hH,KAAK8gH,GACX1gH,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAe,qBAAsBm6G,EAAa/kH,QAAQ9F,SAASkrH,IAAU,eAIhGpnH,QAAQ4kH,EAAWwD,iBAClB1hH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,+BACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,qCAAqCL,EAAK,+BAEvDo+G,EAAWyD,mBAAoB/hH,KAAKwhG,GACnCphG,EAAAA,GAAAA,cAACkhH,GAAuB,CAACtnF,KAAMwnE,QApBhCphG,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,KAwBT,KClCV,IAAep9C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAU8jH,aACT,MAAM,OAAEC,EAAM,QAAEC,IAAYxwG,EAAAA,EAAAA,IAAexT,GAAQikH,YAEnD,MAAO,CACLF,OAAQA,IAASD,EAAO55E,QACxBpxB,OAASkrG,IAAUF,EAAO55E,SAAY,GACvC,GAPenqC,EAhGiCmkH,EACnD5jH,OACAjI,UACAyrH,SACAK,aACAC,cACAL,SACAjrG,aAEA,MAAM,sBACJurG,EAAqB,SACrBjrF,EAAQ,iBACRkrF,IACE7iH,EAAAA,EAAAA,MAEE8iH,GAAkBhuG,EAAAA,EAAAA,GAAoB4tG,EAAWK,cAChD7tD,EAAW8tD,IAAgB/8G,EAAAA,EAAAA,KAAkB,GAC9Cg9G,EAAkBlpH,QAAQuoH,IAC1B,OAAE75E,EAAM,KAAE7iC,GAASy8G,EACnB9hH,GAAOC,EAAAA,EAAAA,MAEb1D,EAAAA,EAAAA,KAAU,KAEHmmH,GAAmBH,IAAoBJ,EAAWK,aACrDH,EAAsB,CACpB/jH,OAAMme,UAAWpmB,EAAQZ,GAAIyyC,SAAQpxB,SAAQmD,MA5B/B,EA4BqD0oG,mBAAmB,GAE1F,GAEC,CAACR,EAAWK,YAAaE,IAE5B,MAAME,GAAsBjjH,EAAAA,EAAAA,KAAY,KACtC8iH,GAAa,GACbJ,EAAsB,CACpB/jH,OAAMme,UAAWpmB,EAAQZ,GAAIyyC,SAAQpxB,SAAQmD,MApC3B,IAqClB,GACD,CAAC3b,EAAM+jH,EAAuBhsH,EAAQZ,GAAIqhB,EAAQoxB,KAErD3rC,EAAAA,EAAAA,KAAU,KACRkmH,GAAa,EAAM,GAClB,CAACV,IAEJ,MAAMc,GAAoBljH,EAAAA,EAAAA,KAAalK,IACrC2hC,EAAS,CAAE3hC,OACX6sH,GAAkB,GACjB,CAACA,EAAkBlrF,IAetB,OACEl3B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACZ0hH,EACGA,EAAOjiH,KAAKrK,GACZyK,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKjP,EACL4K,UAAU,sBAEVK,QAASA,IAAMmiH,EAAkBptH,IAEjCyK,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CACd2G,WAAW,OACXhzB,OAAQh+B,EACRs6D,eAAa,EACbhQ,kBAAgB,OAIpB7/C,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,MACX6mE,GAjCP,WACE,MAAMe,EAAkBX,EAAWK,YAAcT,EAAQ19G,OAEzD,OAAO89G,EAAWK,YArDA,GAqD+BM,EAAkB,GACjE5iH,EAAAA,GAAAA,cAACw5D,GAAc,CACbr3B,MAAOygF,EACPnpD,SAAS,QACThF,UAAWA,EACXj0D,QAASkiH,GAGf,CAsBiBG,IAEb7iH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cAAckG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACrD2H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,eAAekG,IAAI,QAAQlB,GAC3CnF,EAAAA,GAAAA,cAAA,QAAMG,UAAU,iBAAiBkG,IAAKvG,EAAKqc,MAAQ,YAAS9jB,IAQ7C4R,EAPEg4G,EAAWK,aAOEQ,EAPWZ,GAQhC,GAAMj4G,EAAQ64G,EAAS,KAAK1mG,UAAY,GARK,OAO9D,IAAuBnS,EAAe64G,CAJ5B,KCvDV,IAAellH,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MACEikH,aAAa,OAAEzjH,EAAM,UAAEie,KACrBjL,EAAAA,EAAAA,IAAexT,IACb,aAAE2pD,GAAiB3pD,EAEzB,OAAKQ,GAAWie,EAOT,CACLne,MAJWC,EAAAA,EAAAA,IAAWP,EAAQQ,GAK9BnI,SAJcqb,EAAAA,EAAAA,IAAkB1T,EAAQQ,EAAQie,GAKhDkrC,gBATO,CAAC,CAUT,GAlBe5pD,EA5C2BklH,EAC7C3jH,UACAwS,WACAxT,OACAjI,UACAsxD,mBAEA,MAAM3nD,GAAOC,EAAAA,EAAAA,KAMb,IALAiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,KAGLjJ,IAAYiI,EACf,OAAO4B,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,MAGjB,MAAM,QAAE+yD,EAAO,QAAEvtD,IAAYwiE,EAAAA,EAAAA,IAAe7sH,GAC5C,IAAKqqD,EAAQA,QACX,OAGF,MAAMyiE,GAAkBC,EAAAA,GAAAA,IAAqB1iE,EAAQA,QAAS,UAE9D,OACExgD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cAAckG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACrD2H,EAAAA,GAAAA,cAAA,MAAIG,UAAU,gBAAgBkG,IAAI,SAAQqX,EAAAA,GAAAA,GAAWqwF,EAAQ3B,SAAU,CAAC,QAAS,QACjFpsG,EAAAA,GAAAA,cAAA,OAAKG,UAAU,mCACZ7G,QAAQmuD,IAAiBsmD,EAAQC,QAAQpuG,KAAKgiH,GAC7C5hH,EAAAA,GAAAA,cAACgiH,GAAiB,CAChBx9G,IAAM,GAAErO,EAAQZ,MAAMqsH,EAAO55E,SAC7B5pC,KAAMA,EACNjI,QAASA,EACTyrH,OAAQA,EACRK,WAAYgB,EAAgBrB,EAAO55E,QACnCk6E,YAAa1hE,EAAQ0hE,iBAGvBz6D,GAAgBznD,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,OAExB,K,2BCnEV,SAAuB,uBAAvB,GAAwD,uBAAxD,GAAyF,uBAAzF,GAAsH,uBAAtH,GAAsJ,uBAAtJ,GAA2L,uBAA3L,GAAyN,uBAAzN,GAA6R,uBAA7R,GAAsW,uBC2BhWmoE,GAAY,EAAIv9G,EAAAA,GAoItB,IAAehI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,iBAAEslH,IAAqB9xG,EAAAA,EAAAA,IAAexT,GAC5C,MAAO,CACLM,KAAMglH,GAAkB9kH,QAASD,EAAAA,EAAAA,IAAWP,EAAQslH,EAAiB9kH,aAAUjG,EAC/E+qH,mBACAzyE,sBAAsB1F,EAAAA,EAAAA,IAA2BntC,GAClD,GAPeD,EAvH2BwlH,EAC7CzxG,WACAxT,OACAglH,mBACAzyE,uBACAvxC,cAEA,MAAM,YAAEkkH,EAAW,iBAAE31E,IAAqBpuC,EAAAA,EAAAA,OACnCa,EAAO+gF,IAAY37E,EAAAA,EAAAA,IAAS,KAC5B+9G,EAAgBC,IAAqBh+G,EAAAA,EAAAA,IAAS,IAC9Ci+G,EAAaC,IAAkBl+G,EAAAA,EAAAA,SAA6BnN,GAC7DyH,GAAOC,EAAAA,EAAAA,KAEPk8D,EAAY3iE,QAAQ8G,GACpBq0D,EAAYn7D,QAAQ8pH,GAAkB3uD,YAE5Cz/C,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IAGV,MAAMuiF,GAAoBliF,EAAAA,EAAAA,KAAa0G,IACrCg7E,EAASh7E,EAAEgR,OAAOlN,MAAM,GACvB,IAEG05G,GAAkBlkH,EAAAA,EAAAA,KAAY,KAClC+jH,GAAmBI,IAASt/E,EAAAA,GAAAA,IAAcu/E,EAAAA,GAAAA,MAAiB1/G,OAAQy/G,EAAO,IAAG,GAC5E,IAEGE,GAAoBrkH,EAAAA,EAAAA,KAAY,KACpC6jH,EAAY,CACVhlH,OAAQF,EAAM7I,GACd6K,QACA2jH,WAAWF,EAAAA,GAAAA,MAAiBN,GAC5BE,eACA,GACD,CAACrlH,EAAMklH,EAAaC,EAAgBE,EAAarjH,IAE9Cs2G,GAA0Bj3G,EAAAA,EAAAA,KAAa66C,IACtCA,EAAMrG,QAAWtD,GAAwB2J,EAAM/kD,KAAO09C,EAAAA,IAKvDqH,EAAM/kD,KAAO09C,EAAAA,IAKjBywE,EAAeppE,EAAM/kD,IAJnBmuH,OAAerrH,GALfs1C,EAAiB,CAAEpH,eAAgB,kBASb,GACvB,CAACoK,EAAsBhD,IAEpBq2E,GAAanqH,EAAAA,EAAAA,KAAQ,KAClB,CACLtE,GAAI,EACJ6K,QACA2jH,WAAWF,EAAAA,GAAAA,MAAiBN,GAC5BE,iBAED,CAACF,EAAgBE,EAAarjH,IAEjC,GAAKhC,GAAMi7F,QAIX,OACEr5F,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,IACdkK,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAepQ,GAAgB,kBAC7CkK,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAepQ,GAAgBA,KAC7CkK,EAAAA,GAAAA,cAAA,QAAMG,UAAWrK,IAAiBgK,EAAK,qBACvCE,EAAAA,GAAAA,cAACskB,EAAAA,EAAU,CACTE,KAAK,YACLD,UAAW0N,OAAO+xF,EAAWP,cAAgB,EAC7CQ,eAAa,EACbvtG,UAAW,EACXvW,UAAWrK,IAEXkK,EAAAA,GAAAA,cAACkkH,GAAAA,EAAS,CACRhrB,MAAO8qB,EACP7jH,WAAW+F,EAAAA,GAAAA,GAAepQ,GDvHoN,wBCwH9O0K,QAASmjH,EACTnnH,KAAM2mH,GACNgB,aAAW,KAGfnkH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACR1rB,MAAO7J,EACP8J,SAAUy3E,EACVt0D,MAAOvtB,EAAK,yBACZ4K,SAAU+pD,EACV7P,2BAAyB,KAG7B5kD,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAepQ,GAAgBA,KAC7CkK,EAAAA,GAAAA,cAAC+3C,GAAiB,CAChBxH,SAAS,0BACTD,YAAa1+B,EACbqmC,oBAAqBy+D,EACrBv2G,UAAWrK,GACXkiD,uBAAqB,MAI3Bh4C,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASk0C,EACTvxD,SAAU+pD,EACVj0D,QAASsjH,EACTrgH,UAAW3D,EAAK,SAEf20D,EACCz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGb,KCjIJgjH,GAAY,EAAIv9G,EAAAA,GAmJtB,IAAehI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,eAAEsmH,IAAmB9yG,EAAAA,EAAAA,IAAexT,GACpCM,EAAOgmH,GAAgB9lH,QAASD,EAAAA,EAAAA,IAAWP,EAAQsmH,EAAe9lH,aAAUjG,EAElF,MAAO,CACL+F,OACA86F,MAHYkrB,GAAgBh8F,QAAUhqB,GAAM+6F,SAASirB,GAAgBh8F,cAAW/vB,EAIhF+rH,iBACAzzE,sBAAsB1F,EAAAA,EAAAA,IAA2BntC,GAClD,GAVeD,EApIyBwmH,EAC3CzyG,WACAxT,OACA86F,QACAkrB,iBACAzzE,uBACAvxC,cAEA,MAAM,UAAEklH,EAAS,iBAAE32E,IAAqBpuC,EAAAA,EAAAA,OACjCa,EAAO+gF,IAAY37E,EAAAA,EAAAA,IAAS,KAC5Bi+G,EAAaC,IAAkBl+G,EAAAA,EAAAA,SAA6BnN,GAC7DyH,GAAOC,EAAAA,EAAAA,KAEP00D,EAAYn7D,QAAQ8qH,GAAgB3vD,WACpC8vD,EAAYrrB,GAAO3jG,KAAOivH,EAAAA,KAEhCxvG,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,KAGV/C,EAAAA,EAAAA,KAAU,MACJ68F,GAAO94F,OAAS84F,GAAOuqB,eACzBtiC,EAAS+X,EAAM94F,OACfsjH,EAAexqB,EAAMuqB,aACvB,GACC,CAACvqB,IAEJ,MAAMj9B,GAAYpiE,EAAAA,EAAAA,KAAQ,IACjBuG,IAAU84F,GAAO94F,OAASqjH,IAAgBvqB,GAAOuqB,aACvD,CAACA,EAAarjH,EAAO84F,GAAOuqB,YAAavqB,GAAO94F,QAE7CuhF,GAAoBliF,EAAAA,EAAAA,KAAa0G,IACrC,MAAMs+G,EAAWt+G,EAAEgR,OAAOlN,MAC1Bk3E,EAASsjC,EAAS,GACjB,IAEGC,GAAkBjlH,EAAAA,EAAAA,KAAY,KAClC6kH,EAAU,CACRhmH,OAAQF,EAAM7I,GACd6K,QACAgoB,QAAS8wE,EAAO3jG,GAChBkuH,eACA,GACD,CAACrlH,EAAMkmH,EAAWb,EAAarjH,EAAO84F,IAEnCwd,GAA0Bj3G,EAAAA,EAAAA,KAAa66C,IACtCA,EAAMrG,QAAWtD,GAAwB2J,EAAM/kD,KAAO09C,EAAAA,IAKvDqH,EAAM/kD,KAAO09C,EAAAA,IAKjBywE,EAAeppE,EAAM/kD,IAJnBmuH,EAnEgB,KA8DhB/1E,EAAiB,CAAEpH,eAAgB,kBASb,GACvB,CAACoK,EAAsBhD,IAEpBq2E,GAAanqH,EAAAA,EAAAA,KAAQ,KAClB,IACFq/F,EACH94F,QACAqjH,iBAED,CAACA,EAAarjH,EAAO84F,IAExB,GAAK96F,GAAMi7F,QAIX,OACEr5F,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,IACdkK,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAepQ,GAAgB,mBAC3CojG,GAASl5F,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,MAClBk+C,GACCl5F,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAepQ,GAAgBA,KAC7CkK,EAAAA,GAAAA,cAAA,QAAMG,UAAWrK,IAAiBgK,EAAK,qBACvCE,EAAAA,GAAAA,cAACskB,EAAAA,EAAU,CACTE,KAAK,YACLD,UAAW0N,OAAO+xF,EAAWP,cAAgB,EAC7CQ,eAAa,EACbvtG,UAAW,EACXvW,UAAWrK,IAEXkK,EAAAA,GAAAA,cAACkkH,GAAAA,EAAS,CACRhrB,MAAO8qB,EACP7jH,UAAWrK,GACX0G,KAAM2mH,GACNgB,aAAW,KAGfnkH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACR1rB,MAAO7J,EACP8J,SAAUy3E,EACVt0D,MAAOvtB,EAAK,yBACZ4K,SAAU+pD,EACV7P,2BAAyB,MAG3B2/D,GACAvkH,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAepQ,GAAgBA,KAC7CkK,EAAAA,GAAAA,cAAC+3C,GAAiB,CAChBxH,SAAS,wBACTD,YAAa1+B,EACbqmC,oBAAqBy+D,EACrBv2G,UAAWrK,GACXkiD,uBAAqB,OAOjCh4C,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASk0C,EACTvxD,SAAU+pD,EACVj0D,QAASkkH,EACTjhH,UAAW3D,EAAK,SAEf20D,EACCz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGb,KC7HJ2yD,GAA2B,4BAyQjC,IAAel1D,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUy1B,aACT,MAAM/V,GAAO9e,EAAAA,EAAAA,IAAWZ,EAAQy1B,GAC1Bn1B,GAAOC,EAAAA,EAAAA,IAAWP,EAAQy1B,IAC1B,SAAE7uB,IAAa4M,EAAAA,EAAAA,IAAexT,GAAQ6mH,WAG5C,MAAO,CACLnnG,OAAM9Y,WAAU0C,QAHFhJ,IAAQmnD,EAAAA,EAAAA,IAAkBnnD,GAAMonD,EAAAA,EAAAA,IAAqB1nD,IAAS2nD,EAAAA,EAAAA,IAAuB3nD,IAIpG,GATeD,EAvQ0B+mH,EAC5CrxF,SACA/V,OACA9Y,WACA0C,UACAhI,UACAwS,eAEA,MAAM,cACJsiB,EAAa,cACb2wF,EAAa,cACbC,EAAa,gBACbC,EAAe,0BACfC,IACEzlH,EAAAA,EAAAA,OAEG0lH,EAAoBC,EAAkBC,IAAqBziH,EAAAA,EAAAA,MAC3D0iH,EAAgCC,EAA8BC,IAAiC5iH,EAAAA,EAAAA,MAC/FuxD,EAAwBC,IAA6B1uD,EAAAA,EAAAA,KAAS,IAC9D0jB,EAAOirC,IAAY3uD,EAAAA,EAAAA,MACpB1F,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IAGV,MAAMi0D,EAAmB71C,GAAQA,EAAKgX,WAAmB,GACnD8+B,EAAkB91C,GAAQA,EAAKkX,UAAkB,GACjD8+B,EAAah2C,GAAQA,EAAKiH,UAAU8uC,KAAa,IAEhDA,EAAKc,IAAU7uD,EAAAA,EAAAA,IAASguD,IACxBh/B,EAAWC,IAAgBjvB,EAAAA,EAAAA,IAAS6tD,IACpC3+B,EAAUC,IAAenvB,EAAAA,EAAAA,IAAS8tD,IAClCiyD,EAAwBC,IAA6BhgH,EAAAA,EAAAA,KAAU4B,IAEtE/K,EAAAA,EAAAA,KAAU,KACRmpH,GAA2Bp+G,EAAQ,GAClC,CAACA,KAEJ/K,EAAAA,EAAAA,KAAU,KACR63D,GAA0B,GAC1BixD,GAAmB,GAClB,CAACA,EAAmB5xF,KAEvBl3B,EAAAA,EAAAA,KAAU,KACRo4B,EAAa4+B,GACb1+B,EAAY2+B,EAAgB,GAC3B,CAACD,EAAkBC,EAAiB91C,KAEvCnhB,EAAAA,EAAAA,KAAU,KACJqI,IAAa+gH,EAAAA,GAAAA,WACfvxD,GAA0B,GAC1BC,OAAS97D,GACT8sH,IACF,GACC,CAACA,EAAmBzgH,IAEvB,MAAM4wB,GAAwB71B,EAAAA,EAAAA,KAAa0G,IACzCsuB,EAAatuB,EAAEgR,OAAOlN,OACtBiqD,GAA0B,EAAK,GAC9B,IAEGwxD,GAAkBjmH,EAAAA,EAAAA,KAAa0G,IACnCkuD,EAAOluD,EAAEgR,OAAOlN,OAChBiqD,GAA0B,EAAK,GAC9B,IAYGgB,IAVuBz1D,EAAAA,EAAAA,KAAa0G,IACxCwuB,EAAYxuB,EAAEgR,OAAOlN,OACrBiqD,GAA0B,EAAK,GAC9B,KAE8Bz0D,EAAAA,EAAAA,KAAa0G,IAC5Cq/G,EAA0Br/G,EAAEgR,OAAOiW,SACnC8mC,GAA0B,EAAK,GAC9B,KAEuBz0D,EAAAA,EAAAA,KAAY,KACpC,MAAM01D,EAAmB3gC,EAAUwF,OAC7Bo7B,EAAkB1gC,EAASsF,OAC3Bq7B,EAAa9B,EAAIv5B,OAElBm7B,EAAiBhxD,QACpBgwD,EAASrB,IAGX5+B,EAAc,CACZX,SACAnsB,SAAUm+G,EACV/wF,UAAW2gC,EACXzgC,SAAU0gC,EACV7B,IAAI8B,GACJ,GACD,CAAC7gC,EAAU++B,EAAK7+B,EAAUR,EAAeX,EAAQgyF,KAE9CI,GAAsBlmH,EAAAA,EAAAA,KAAY,KACtCqlH,EAAc,CAACxmH,OAAOi1B,IAEtB4xF,IACAJ,GAAiB,GAChB,CAACI,EAAmBJ,EAAiBF,EAAetxF,IAGjDgB,GAAWp5B,EAAAA,EAAAA,IAAyB,MACpCyqH,GAAezqH,EAAAA,EAAAA,KAAO,GAEtB0qH,GAAqBpmH,EAAAA,EAAAA,KAAY,KACrC80B,EAASj5B,SAASyyE,QAClB63C,EAAatqH,SAAU,CAAI,GAC1B,IAEGwqH,GAAoBrmH,EAAAA,EAAAA,KAAY,KACpC80B,EAASj5B,SAASyyE,QAClB63C,EAAatqH,SAAU,CAAI,GAC1B,IAEGyqH,GAAyBtmH,EAAAA,EAAAA,KAAY,KACzC80B,EAASj5B,SAASyyE,QAClB63C,EAAatqH,SAAU,CAAK,GAC3B,IAEG0qH,GAA4BvmH,EAAAA,EAAAA,KAAY,KAC5C6lH,IACApxD,GAA0B,GAC1B8wD,EAA0B,CAAEzxF,UAAS,GACpC,CAAC+xF,EAA+BN,EAA2BzxF,IAExD0yF,GAAqBxmH,EAAAA,EAAAA,KAAa2tE,IACtClZ,GAA0B,GAC1B8wD,EAA0B,CAAEzxF,SAAQ65C,OAAM84C,UAAWN,EAAatqH,SAAU,GAC3E,CAAC0pH,EAA2BzxF,IAE/B,IAAK/V,EACH,OAGF,IAAI2oG,IAAuB1lC,EAAAA,EAAAA,IAAUjjE,IAASA,EAAKjoB,KAAOi8F,EAAAA,IAC1D,MAAM/8B,EAAY/vD,IAAa+gH,EAAAA,GAAAA,WACzBW,EAAgB5oG,EAAKiH,UAAU2hG,cAC/BC,GAAmB7oG,EAAKiH,UAAUslD,cAAgBvsD,EAAKiH,UAAUC,cAEvE,OACE1kB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CACd0mE,UAAU,EACV/yF,OAAQ/V,EAAKjoB,GACbgxD,WAAW,QACX9vB,OAAO,gBACP8vF,cAAY,IAEdvmH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRpgC,GAAG,kBAEH83B,MAAO,KACPnjB,SAAUorB,EACVrrB,MAAOuqB,EACPtL,MAAOA,IAAU4pC,GAA2B5pC,OAAQ7wB,IAGtD2H,EAAAA,GAAAA,cAACmiF,GAAAA,EAAQ,CACP5sF,GAAG,WACH83B,MAAO,KACPnjB,SAAUw7G,EACVz7G,MAAOspD,KAmBXvzD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,aAAa+F,QAAM,EAACrJ,QAASslH,GAAmB,SAIhEK,GACCnmH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,aAAa+F,QAAM,EAACrJ,QAASqlH,GACzC/lH,EAAK,wBAAyB0d,EAAKgX,YAEtCx0B,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,aAAa+F,QAAM,EAACrJ,QAASulH,GACzCjmH,EAAK,0BAA2B0d,EAAKgX,YAEvC4xF,GACCpmH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPukC,YACEhuE,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CACLplB,MAAOkuH,GACPG,iBAAe,EACfhpG,KAAMA,EACNhhB,KAAK,OACL2D,UAAU,mBAGd0J,QAAM,EACNrJ,QAAS6kH,GAERvlH,EAAK,8BAGVE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAAakG,IAAI,QAAQvG,EAAK,2BAA4B0d,EAAKgX,aAI5EiyF,GAAAA,KAAmBlzF,GACrBvzB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,SAAS+F,QAAM,EAACy0B,aAAW,EAAC99B,QAAS0kH,GACjDplH,EAAK,SAKdE,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASksC,EACTzzD,QAAS00D,EACTxqD,SAAU+pD,EACVhxD,UAAW3D,EAAK,SAEf20D,EACCz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGjBH,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQgmH,EACR7lH,QAAS+lH,EACThgH,KAAMrF,EAAK,WACXisB,aAAcjsB,EAAK,MACnBksB,eAAgB25F,EAChBjnF,sBAAoB,IAEtB1+B,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQmmH,EACRhmH,QAASkmH,EACTngH,KAAMrF,EAAK,oCAAqC0d,EAAKgX,WACrDzI,aAAcjsB,EAAK,SACnBksB,eAAgBg6F,EAChBtnF,sBAAoB,IAEtB1+B,EAAAA,GAAAA,cAAC4sE,GAAY,CACX1iE,SAAU+7G,EACV1xF,SAAUA,IAER,KCrPJmyF,GAAoB,6BAGpBC,GAAoD,CACxD,eACA,aACA,YACA,aACA,cACA,cACA,eACA,aACA,aACA,kBACA,aACA,aACA,YAIIC,GAA0BD,GAAgBxiH,OAAS,EAmYzD,IAAevG,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IAC1B,WAAEqmH,EAAU,kBAAEkC,IAAsBv1G,EAAAA,EAAAA,IAAexT,IACnD,SAAE4G,GAAaigH,EACfmC,EAAmBxtH,QAAQ8E,EAAKqmB,UAAUs1E,cAC1CgtB,GAAeloH,EAAAA,EAAAA,IAAiBT,IAChC,QAAE4oH,GAAYrC,EAAWl6D,SAASnsD,IAAW,CAAC,EAC9C2oH,GAAgBH,KAAqBttB,EAAAA,EAAAA,IAAiBp7F,EAAM,eAAiBA,EAAKk7F,WAExF,MAAO,CACLl7F,OACAsG,WACAqiH,eACAD,mBACAI,cAAeH,EAAe3oH,EAAKk7F,WAAYE,EAAAA,EAAAA,IAAiBp7F,EAAM,cACtE+oH,YAAaJ,EAAe3oH,EAAKk7F,WAAYE,EAAAA,EAAAA,IAAiBp7F,EAAM,YACpEgpH,UAAWL,EAAe3oH,EAAKk7F,WAAYE,EAAAA,EAAAA,IAAiBp7F,EAAM,eAClEipH,gBAAiBL,EACjBv/D,aAAc3pD,EAAO2pD,aACrB6/D,8BAA4D,aAA7BT,GAAmB9sG,MAClDkmC,mBAAoBniD,EAAOmiD,mBAC3BgnE,eACD,GAvBeppH,EAjY2B0pH,EAC7CjpH,SACAF,OACAsG,WACAqiH,eACAD,mBACAI,gBACAC,cACAC,YACAH,eACAr1G,WACAy1G,kBACA5/D,eACA6/D,gCACArnE,qBACAmO,iBACAhvD,cACI,IAAAooH,EACJ,MAAM,uBACJC,EAAsB,WACtBC,EAAU,WACVC,EAAU,aACVC,EAAY,cACZC,EAAa,gBACb9C,EAAe,SACf7tF,EAAQ,wBACR4wF,EAAuB,qBACvBC,EAAoB,YACpBC,IACEzoH,EAAAA,EAAAA,OAEG0lH,EAAoBC,EAAkBC,IAAqBziH,EAAAA,EAAAA,KAC5DulH,EAAe7pH,EAAKgC,MACpB8nH,EAAe9pH,EAAKqmB,UAAYrmB,EAAKqmB,SAASwF,OAAe,IAE5DgqC,EAAwBC,IAA6B1uD,EAAAA,EAAAA,KAAS,IAC9DpF,EAAO+gF,IAAY37E,EAAAA,EAAAA,IAASyiH,IAC5Bh+F,EAAOq3D,IAAY97E,EAAAA,EAAAA,IAAS0iH,IAC5B/vH,EAAOi8D,IAAY5uD,EAAAA,EAAAA,OACnB0jB,EAAOirC,IAAY3uD,EAAAA,EAAAA,MACpB2iH,GAAYnuH,EAAAA,EAAAA,IAAkBoE,GAC9Bo2D,GAAuBr6D,EAAAA,EAAAA,GAASguH,GAAW,EAAO/tH,EAAAA,GAAAA,SAClDguH,GAAgBvuH,EAAAA,EAAAA,KAAQ,IAAMitH,IAAoBuB,EAAAA,EAAAA,IAAajqH,IAAO,CAACA,EAAM0oH,IAC7EhnH,GAAOC,EAAAA,EAAAA,KAEPuoH,IAAgCntH,EAAAA,EAAAA,IAAuB,OAE7D6Z,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,KAGV/C,EAAAA,EAAAA,KAAU,KACJorD,GAAgB2/D,IAClBU,EAAwB,CAAExpH,WAC1BwpH,EAAwB,CAAExpH,SAAQiqH,WAAW,IAC7CR,EAAqB,CAAEzpH,WACzB,GACC,CAACA,EAAQwpH,EAAyBrgE,EAAc2/D,EAAWW,KAE9D1rH,EAAAA,EAAAA,KAAU,KACJqI,IAAa+gH,EAAAA,GAAAA,WACfvxD,GAA0B,GAC1BC,OAAS97D,GACX,GACC,CAACqM,IAEJ,MAAM8jH,IAAsB/oH,EAAAA,EAAAA,KAAY,KACtC2uD,EAAeq6D,EAAAA,GAAAA,gBAAkC,GAChD,CAACr6D,IAEEs6D,IAAwBjpH,EAAAA,EAAAA,KAAY,KACxC2uD,EAAeq6D,EAAAA,GAAAA,WAA6B,GAC3C,CAACr6D,IAEEu6D,IAAuBlpH,EAAAA,EAAAA,KAAY,KACvC2uD,EAAeq6D,EAAAA,GAAAA,UAA4B,GAC1C,CAACr6D,IAEEw6D,IAAyBnpH,EAAAA,EAAAA,KAAY,KACzC2uD,EAAeq6D,EAAAA,GAAAA,iBAAmC,GACjD,CAACr6D,IAEEy6D,IAA4BppH,EAAAA,EAAAA,KAAY,KAC5C2uD,EAAeq6D,EAAAA,GAAAA,mBAAqC,GACnD,CAACr6D,IAEE06D,IAAqBrpH,EAAAA,EAAAA,KAAY,KACrC2uD,EAAeq6D,EAAAA,GAAAA,QAA0B,GACxC,CAACr6D,IAEE26D,IAAsBtpH,EAAAA,EAAAA,KAAY,KACtC2uD,EAAeq6D,EAAAA,GAAAA,aAA+B,GAC7C,CAACr6D,IAEE46D,IAAiBvpH,EAAAA,EAAAA,KAAa2tE,IAClChZ,EAASgZ,GACTlZ,GAA0B,EAAK,GAC9B,IAEGytB,IAAoBliF,EAAAA,EAAAA,KAAa0G,IACrCg7E,EAASh7E,EAAEgR,OAAOlN,OAClBiqD,GAA0B,EAAK,GAC9B,IAEG+0D,IAAoBxpH,EAAAA,EAAAA,KAAa0G,IACrCm7E,EAASn7E,EAAEgR,OAAOlN,OAClBiqD,GAA0B,EAAK,GAC9B,IAEGg1D,IAAoBzpH,EAAAA,EAAAA,KAAY,KACpC,MAAM0pH,EAAe/oH,EAAM45B,OACrBovF,EAAen/F,EAAM+P,OAEtBmvF,EAAahlH,OAKlBujH,EAAW,CACTppH,SACA8B,MAAO+oH,EACPl/F,MAAOm/F,EACPjxH,UARAg8D,EAASuyD,GAST,GACD,CAACz8F,EAAO3rB,EAAQnG,EAAOiI,EAAOsnH,IAE3B2B,IAAqB5pH,EAAAA,EAAAA,KAAY,KACrC2uD,EAAeq6D,EAAAA,GAAAA,aAA+B,GAC7C,CAACr6D,IAEEk7D,IAAyB7pH,EAAAA,EAAAA,KAAY,KACzC,IAAKrB,EAAKqmB,SACR,OAGF,MAAM,mBAAE8kG,GAAuBnrH,EAAKqmB,SAEpCgjG,EAAuB,CAAEnpH,OAAQF,EAAK7I,GAAI4W,WAAYo9G,GAAqB,GAC1E,CAACnrH,EAAMqpH,IAEJ+B,IAAoB/pH,EAAAA,EAAAA,KAAY,KACpCuoH,EAAY,CAAE1pH,SAAQ6N,WAAY/N,EAAKi7F,SAAU,GAChD,CAACj7F,EAAKi7F,QAAS/6F,EAAQ0pH,KAE1B3rH,EAAAA,EAAAA,KAAU,KACR,IAAKirH,EACH,OAKF,MAAMmC,EAAWnB,GAA8BhtH,SAASxG,cAAc,SACtE20H,EAASr8F,SAAWhvB,EAAKqmB,UAAU8kG,kBAAkB,GACpD,CAACjC,EAA+BlpH,EAAKqmB,UAAU8kG,qBAElD,MAAMG,IAA2B7vH,EAAAA,EAAAA,KAAQ,KACvC,IAAKuE,EAAKqmB,UAAU+iE,iBAClB,OAAO1nF,EAAK,gBAGd,GAA4C,QAAxC1B,EAAKqmB,SAAS+iE,iBAAiB5lF,KACjC,OAAO9B,EAAK,gBAGd,MAAM6pH,EAAgBvrH,EAAKqmB,SAAS+iE,iBAAiBoiC,QAAQzlH,OACvD0lH,EAAc5pE,GAAoBt6B,QAAQm7B,IAAcA,EAASu5B,aAAYl2E,QAAU,EAE7F,OAAO0lH,EACF,GAAEF,OAAmBE,IACrB,GAAEF,GAAe,GACrB,CAAC1pE,EAAoB7hD,EAAM0B,IAExBgqH,IAA0BjwH,EAAAA,EAAAA,KAAQ,KACtC,IAAKuE,EAAK2rH,oBACR,OAAO,EAGT,IAAIxgD,EAAao9C,GAAgBhhG,QAC9BnhB,IAASpG,EAAK2rH,oBAAqBvlH,KACpCL,OAEF,MAAM,aAAE6lH,EAAY,SAAEC,GAAa7rH,EAAK2rH,oBAOxC,OAJKC,GAAiBC,IACpB1gD,GAAc,GAGTA,CAAU,GAChB,CAACnrE,IAEE8rH,IAAcrwH,EAAAA,EAAAA,KAAQ,IACnB9D,OAAOw2D,KAAKnuD,EAAKqmB,UAAU0lG,kBAAoB,CAAC,GAAGhmH,QACzD,CAAC/F,EAAKqmB,UAAU0lG,mBAEbC,IAAoB3qH,EAAAA,EAAAA,KAAY,KAChCsnH,EACFY,EAAW,CAAErpH,OAAQF,EAAK7I,KAChB6I,EAAKk7F,UAGfuuB,EAAc,CAAEvpH,OAAQF,EAAK7I,KAF7BqyH,EAAa,CAAEtpH,OAAQF,EAAK7I,KAI9B4vH,IACAJ,IACA7tF,EAAS,CAAE3hC,QAAI8C,GAAY,GAC1B,CACD0uH,EAAc3oH,EAAKk7F,UAAWl7F,EAAK7I,GACnC4vH,EAAmBJ,EAAiB6C,EAAcC,EAAeF,EAAYzwF,IAG/E,GAAI94B,EAAKm6F,cAAgBn6F,EAAKkzF,YAC5B,OAGF,MAAM78B,GAAY/vD,IAAa+gH,EAAAA,GAAAA,WAE/B,OACEzlH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACs1D,GAAAA,EAAc,CACb+0D,WAAYjsH,EAAKi7F,QACjB7kC,qBAAsBA,EACtBtqD,SAAU8+G,GACVt+G,UAAWw8G,IAEblnH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRpgC,GAAG,cACH83B,MAAOvtB,EAAK,aACZoK,SAAUy3E,GACV13E,MAAO7J,EACP8oB,MAAOA,IAAUw9F,GAAoBx9F,OAAQ7wB,EAC7CqS,UAAWw8G,IAEblnH,EAAAA,GAAAA,cAACmiF,GAAAA,EAAQ,CACP5sF,GAAG,cACH4K,UAAU,OACVktB,MAAOvtB,EAAK,0BACZijC,UArQkB,IAsQlBunF,oBAtQkB,IAsQ2BrgG,EAAM9lB,QAAQmkC,WAC3Dp+B,SAAU++G,GACVh/G,MAAOggB,EACPvf,UAAWw8G,EACXqD,mBAAiB,IAElBnsH,EAAKk7F,WACJt5F,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,OAAOghD,WAAS,EAACtkD,QAASgoH,IACvCxoH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,cAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAA4BL,EAAhBsoH,EAAqB,aAAqB,iBAGzEtB,GACC9mH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,UACLghD,WAAS,EACTtkD,QAASkoH,IAET1oH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,kBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYL,EAAK,sBAGrCE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,cACLghD,WAAS,EACTtkD,QAASooH,GACTl+G,UAAWy8G,GAEXnnH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,uBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAWkG,IAAI,QAC5ByjH,GAAwB,IAAElD,IAA2BxoH,EAAKi7F,QAAU,EAAI,KAG7Er5F,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,gBACLghD,WAAS,EACTtkD,QAASmoH,GACTj+G,UAAWw8G,GAEXlnH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,cAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAWkG,IAAI,QAC5BqjH,KAGL1pH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,QACLghD,WAAS,EACTtkD,QAASqoH,IAET7oH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,0BAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,aAAYo+G,EAAAA,GAAAA,IAAc2L,MAE3C9C,GACCpnH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,OACLtD,QAASsoH,GACThkE,WAAS,EACTp6C,UAAW28G,GAEXrnH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,0BAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YACbknH,GAAkB9I,EAAAA,GAAAA,IAAc8I,EAAgBljH,QAAUrE,EAAK,aAIrExG,QAAQ8E,EAAKosH,cAAcrmH,SAC1BnE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,kBACLtD,QAASuoH,GACTjkE,WAAS,GAET9kD,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,mBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,aACbo+G,EAAAA,GAAAA,IAAcngH,EAAKosH,aAAcrmH,UAIvC8iH,GACCjnH,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,SAAS+F,QAAM,EAACrJ,QAASgpH,IACtCxpH,EAAAA,GAAAA,cAAA,YAAOF,EAAK,kBACZE,EAAAA,GAAAA,cAAC8wE,GAAAA,EAAQ,CACPv7E,GAAG,sBACH83B,MAAOvtB,EAAK,iBACZstB,QAAShvB,EAAKi7F,QACd//B,UAAQ,KAGZt5D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kCAAkCL,EAAK,6BAI5DE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,QAAQghD,WAAS,EAACtkD,QAAS6oH,IACxCrpH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,iBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,aAAYo+G,EAAAA,GAAAA,IAA+B,QAAlBiJ,EAACppH,EAAKgxE,oBAAY,IAAAo4C,EAAAA,EAAI,MAG/DY,GAAiBhqH,EAAKqmB,UACtBzkB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,+BAA+BsJ,IAAK6+G,IACjDtoH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPC,SAAUhvB,EAAKqmB,SAAS8kG,mBACxBl8F,MAAOvtB,EAAK,eACZoK,SAAUo/G,GACV5+G,UAAWy8G,MAKnBnnH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,SAAS+F,QAAM,EAACy0B,aAAW,EAAC99B,QAAS0kH,GACjDplH,EAAK,iBAIZE,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASksC,EACTzzD,QAAS0oH,GACTx+G,SAAU+pD,GACVhxD,UAAW3D,EAAK,SAEf20D,GACCz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGjBH,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQgmH,EACR7lH,QAAS+lH,EACT/yG,WAAWsL,EAAAA,GAAAA,GACTqpG,IAAiB3oH,EAAKk7F,UAClBx5F,EAAK,2BACLA,EAAK,oCAAqC1B,EAAKgC,OACnD,CAAC,KAAM,oBAET2rB,aAAcg7F,IAAiB3oH,EAAKk7F,UAAYx5F,EAAK,cAAgBA,EAAK,qBAC1EksB,eAAgBo+F,GAChB1rF,sBAAoB,IAElB,KC3cJ+rF,GAAuC,IACvCC,GAAsD,CAC1D,aACA,YACA,aACA,aACA,kBACA,aACA,aACA,WACA,eACA,YAEIC,GAAgD,IAAID,GAAmB,aAE9D,SAASE,GAAqBC,GAC3C,MAAOC,EAAaC,IAAkBvlH,EAAAA,EAAAA,IAA8B,CAAC,IAC9DwlH,EAAuBC,IAA4BzlH,EAAAA,EAAAA,KAAS,IAC5DivD,EAAW8tD,IAAgB/8G,EAAAA,EAAAA,KAAS,IAE3CnJ,EAAAA,EAAAA,KAAU,KACR0uH,EAAeF,GAAsB,CAAC,GACtCI,GAAyB,GACzBruH,YAAW,KACT2lH,GAAa,EAAM,GAClBkI,GAAqC,GACvC,CAACI,IAEJ,MAAMK,GAAyBzrH,EAAAA,EAAAA,KAAa0G,IAC1C,MAAQqe,KAAM2mG,GAAehlH,EAAEgR,OAEzBqN,EAAO2mG,EAEb,SAASC,EAA0BnhH,GACjC,OAAOA,QAAQ5R,CACjB,CAEA,MAAMgzH,EAAiBP,EAEvB,IAAIQ,EAAsC,IACrCD,EACH,CAAC7mG,GAAO4mG,EAA0BC,EAAe7mG,OACpC,iBAATA,GAA2B,CAC7BylG,SAAUmB,EAA0BC,EAAe7mG,MAIvD,MAAM+mG,EAAaA,KACjB,MAAMC,EAAmBd,GAAkB9qH,KAAK4E,GAAQ8mH,EAAe9mH,KACnEgnH,EAAiBx3E,MAAMopC,IAAOA,IAChCkuC,EAAiB,IACZA,EACHG,eAAWpzH,GAEJmzH,EAAiB76B,MAAMr3F,WAChCgyH,EAAiB,IACZA,EACHG,WAAW,GAEf,EAGW,cAATjnG,EACF+mG,IAEAD,EAAiB,IACZA,KACCZ,GAAkBt8E,QAAO,CAACC,EAAK7pC,IACjCzO,OAAOC,OAAOq4C,EAAK,CAAE,CAAC7pC,GAAM8mH,EAAeG,aAC1C,CAAC,IAKK,eAATjnG,IAA0B8mG,EAAeI,YAAcJ,EAAeK,YACxEL,EAAiB,IACZA,EACHI,YAAY,IAIH,cAATlnG,IAAyB8mG,EAAeI,YAAcJ,EAAeK,YACvEL,EAAiB,IACZA,EACHK,eAAWtzH,IAIF,cAATmsB,GACF+mG,IAGF,MAAMK,EAAejB,GAAoBh6B,OAAOnsF,GAAQ8mH,EAAe9mH,KACvE8mH,EAAiB,IACZA,EACHM,eAAcA,QAAsBvzH,GAGtC0yH,EAAeO,GAEfL,GAA0BJ,GAAsB90H,OAAOw2D,KAAK++D,GAAgBt3E,MAAMz7B,IAChF,MAAM/T,EAAM+T,EACZ,OAAOjf,QAAQuxH,EAAmBrmH,MAAUlL,QAAQgyH,EAAe9mH,GAAK,IACvE,GACF,CAACqmH,EAAoBC,IAExB,MAAO,CACLA,cACAr2D,YACAu2D,wBACAE,yBACA3I,eAEJ,CCtCA,MA0VA,IAAe3kH,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAC1Bw7F,EAAgBxgG,QAAQ8E,GAAMqmB,UAAUs1E,cAE9C,MAAO,CAAE37F,OAAM0f,cAAehgB,EAAOggB,cAAeg8E,gBAAe,GALnDj8F,EA1VsCguH,EACxDz9D,iBACA09D,qBACA1tH,OACA0f,gBACAg8E,gBACA16F,UACAwS,eAEA,MAAM,8BAAEm6G,EAA6B,iBAAEjkG,IAAqBvoB,EAAAA,EAAAA,OAEtD,YACJurH,EAAW,sBAAEE,EAAqB,UAAEv2D,EAAS,uBAAEy2D,EAAsB,aAAE3I,GACrEqI,GAAqBxsH,GAAM2rH,qBACzBjqH,GAAOC,EAAAA,EAAAA,MACP,QAAEs5F,GAAYj7F,GAAQ,CAAC,EACvB8vG,GAAWr0G,EAAAA,EAAAA,KAAQ,IAAMuE,IAAQiqH,EAAAA,EAAAA,IAAajqH,IAAO,CAACA,IACtD4tH,EAAwClyB,GAAiBoU,GAE/Dl5F,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IAGV,MAAM6sH,GAA0BxsH,EAAAA,EAAAA,KAAY,KAC1C2uD,EAAeq6D,EAAAA,GAAAA,kBAAoC,GAClD,CAACr6D,IAEE89D,GAA0BzsH,EAAAA,EAAAA,KAAY,KAC1C2uD,EAAeq6D,EAAAA,GAAAA,2BAA6C,GAC3D,CAACr6D,IAEE+9D,GAA6B1sH,EAAAA,EAAAA,KAAawiG,IAC9C6pB,EAAmB7pB,EAAO1uE,OAAQ0uE,EAAOmqB,mBAAqBtuG,GAC9DswC,EAAeq6D,EAAAA,GAAAA,qBAAuC,GACrD,CAAC3qG,EAAeguG,EAAoB19D,KAEhCi+D,EAAqBC,IAA0B9mH,EAAAA,EAAAA,KAAS,GACzD+mH,GAA0B9sH,EAAAA,EAAAA,KAAa0G,KAC3C5R,EAAAA,EAAAA,GAAU4R,GACVmmH,GAAwBD,EAAoB,GAC3C,CAACA,IAEEG,GAAsB/sH,EAAAA,EAAAA,KAAY,KACtCqoB,EAAiB,CAAE3xB,QAAS2J,EAAK,sCAAuC,GACvE,CAACA,EAAMgoB,IAEJ2kG,GAAwBhtH,EAAAA,EAAAA,KAAY,KACnCrB,IAILmkH,GAAa,GACbwJ,EAA8B,CAAEztH,OAAQF,EAAK7I,GAAIm3H,aAAc5B,IAAc,GAC5E,CAAC1sH,EAAM0sH,EAAavI,EAAcwJ,IAE/BY,GAAoB9yH,EAAAA,EAAAA,KAAQ,IAC3BuE,GAASA,EAAKqmB,UAAarmB,EAAKqmB,SAASmoG,cAIvCxuH,EAAKqmB,SAASmoG,cAAczoH,OAH1B,GAIR,CAAC/F,IAEEyuH,GAAmBhzH,EAAAA,EAAAA,KAAQ,IAC1BuE,GAASA,EAAKqmB,UAAarmB,EAAKqmB,SAAS4/E,QAIvCjmG,EAAKqmB,SAAS4/E,QAAQ1+E,QAAO,EAAG+mG,kBAAmBpzH,QAAQozH,KAHzD,IAIR,CAACtuH,IAEE0uH,GAAsBrtH,EAAAA,EAAAA,KAAawiG,IACvC,MAAM,aAAEyqB,GAAiBzqB,EACzB,IAAKyqB,IAAiBtuH,EACpB,OAGF,MAAM,oBAAE2rH,GAAwB3rH,EAEhC,OAAOrI,OAAOw2D,KAAKmgE,GAAct+E,QAAO,CAAC+gC,EAAQ52D,KAC/C,MAAM/T,EAAM+T,EACZ,IACGm0G,EAAaloH,IACVulH,IAAsBvlH,IACf,eAARA,GAAgC,iBAARA,GAAkC,cAARA,EAErD,OAAO2qE,EAGT,MAAM49C,EAjIZ,SAAqCvoH,GACnC,OAAQA,GACN,IAAK,eACH,MAAO,yBACT,IAAK,YACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,aACH,MAAO,+BACT,IAAK,YACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,cACH,MAAO,8BACT,IAAK,cACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,YACH,MAAO,6BACT,IAAK,WACH,MAAO,6BACT,IAAK,kBACH,MAAO,8BACT,IAAK,aACH,MAAO,8BACT,IAAK,aACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,aACH,MAAO,+BACT,QACE,OAEN,CA4FsBwoH,CAA4BxoH,GAE5C,IAAKuoH,EACH,OAAO59C,EAGT,MAAM89C,EAAmBntH,EAAKitH,GAE9B,MAAQ,GAAE59C,IAAUA,EAAOhrE,OAA6B,KAAI8oH,IAAxBA,GAA4C,GAC/E,GAAG,GACL,CAAC7uH,EAAM0B,IAEV,OACEE,EAAAA,GAAAA,cAAA,OACEG,UAAU,mCACVlK,MAAQ,uDAGR+J,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkBkG,IAAI,QAAQvG,EAAK,6BAEjDE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,YACL4I,SAAU09F,EAAYa,UACtBt+F,MAAOvtB,EAAK,wBACZotH,UAAQ,EACRhjH,SAAUghH,KAGdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,YACL4I,SAAU09F,EAAYW,UACtBp+F,MAAOvtB,EAAK,6BACZotH,UAAQ,EACRC,UAAWd,EAAsB,KAAO,OACxCniH,SAAUghH,EACVkC,aAAcb,KAGlBvsH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBACbH,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GACT,eACAmmH,GAAuB,uBAGzBrsH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAU09F,EAAYuC,WACtBhgG,MAAOvtB,EAAK,8BACZotH,UAAQ,EACRhjH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAU09F,EAAYwC,WACtBjgG,MAAOvtB,EAAK,8BACZotH,UAAQ,EACRhjH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,eACL4I,SAAU09F,EAAYd,eAAiBc,EAAYb,SACnD58F,MAAOvtB,EAAK,gCACZotH,UAAQ,EACRhjH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAU09F,EAAYyC,WACtBlgG,MAAOvtB,EAAK,6BACZotH,UAAQ,EACRhjH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,WACL4I,SAAU09F,EAAY0C,SACtBngG,MAAOvtB,EAAK,6BACZotH,UAAQ,EACRhjH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAU09F,EAAY2C,WACtBpgG,MAAOvtB,EAAK,8BACZotH,UAAQ,EACRhjH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,kBACL4I,SAAU09F,EAAY4C,gBACtBrgG,MAAOvtB,EAAK,6BACZotH,UAAQ,EACRhjH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAU09F,EAAYY,WACtBr+F,MAAOvtB,EAAK,8BACZotH,UAAQ,EACRhjH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,YACL4I,SAAU09F,EAAY6C,UACtBtgG,MAAOvtB,EAAK,6BACZotH,UAAQ,EACRhjH,SAAUghH,OAMlBlrH,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAe,OAAQmmH,GAAuB,YAC5DrsH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,cACL4I,SAAU09F,EAAY8C,YACtBvgG,MAAOvtB,EAAK,+BACZotH,UAAQ,EACRhjH,SAAUghH,KAGdlrH,EAAAA,GAAAA,cAAA,OACEG,UAAU,sCACVK,QAASwrH,EAAwCQ,OAAsBn0H,GAEvE2H,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,cACL4I,SAAU09F,EAAY+C,YACtBxgG,MAAOvtB,EAAK,+BACZ4K,SAAUshH,EACVkB,UAAQ,EACRhjH,SAAUghH,KAGdlrH,EAAAA,GAAAA,cAAA,OACEG,UAAU,sCACVK,QAASwrH,EAAwCQ,OAAsBn0H,GAEvE2H,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAU09F,EAAYgD,WACtBzgG,MAAOvtB,EAAK,8BACZotH,UAAQ,EACRxiH,SAAUshH,EACV9hH,SAAUghH,KAGb7xB,GACCr5F,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,eACL4I,SAAU09F,EAAYiD,aACtB1gG,MAAOvtB,EAAK,0BACZotH,UAAQ,EACRhjH,SAAUghH,OAOpBlrH,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GACT,UACAmmH,GAAuB,YAGzBrsH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,cACLghD,WAAS,EACTC,QAAM,EACNvkD,QAASyrH,GAETjsH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,wBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYwsH,KAIhC3sH,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GACT,UACAmmH,GAAuB,YAGzBrsH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkBkG,IAAI,QAAQvG,EAAK,sBAEjDE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,WACLtD,QAAS0rH,GAERpsH,EAAK,wBAGP+sH,EAAiBjtH,KAAKqiG,GACrBjiG,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKy9F,EAAO1uE,OACZpzB,UAAU,wCAEVK,QAASA,IAAM2rH,EAA2BlqB,IAE1CjiG,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CACdrsB,OAAQ0uE,EAAO1uE,OACfkD,OAAQq2F,EAAoB7qB,GAC5BpyC,eAAa,SAOvB7vD,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASijG,EACTxqH,QAASisH,EACThpH,UAAW3D,EAAK,QAChB4K,SAAU+pD,GAETA,EACCz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGb,KC/VV,IAAevC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAEggB,GAAkBhgB,EAE1B,MAAO,CAAEggB,gBAAe,GAJRjgB,EAhDoCmwH,EACtD5vH,OACA0f,gBACA7e,SACAG,cAEA,MAAM,gBACJ6uH,EAAe,iBACfC,IACE3uH,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACNkmB,EAAQC,IAAa1gB,EAAAA,EAAAA,IAAS,IAE/B2oH,GAAUt0H,EAAAA,EAAAA,KAAQ,KACtB,MAAMu0H,GAAsBhwH,EAAKqmB,UAAU4/E,SAAW,IACnDj2D,QAAO,CAACC,EAAe4zD,KACjBA,EAAOosB,SAAYpsB,EAAOqsB,SAAWrsB,EAAO1uE,SAAWzV,GAC1DuwB,EAAIxqC,KAAKo+F,EAAO1uE,QAEX8a,IACN,IAGC9nB,GAAYD,EAAAA,EAAAA,MAAYE,MAAM1B,KAEpC,OAAOkC,EAAAA,EAAAA,IAAkBonG,EAAoB7nG,EAAWN,EAAO,GAC9D,CAAC7nB,EAAKqmB,UAAU4/E,QAASvmF,EAAemI,IAErC6tD,GAAmBr0E,EAAAA,EAAAA,KAAa8zB,IACpC26F,EAAiB,CAAE5vH,OAAQF,EAAK7I,GAAIg+B,WACpCn0B,GAAS,GACR,CAAChB,EAAK7I,GAAI24H,EAAkB9uH,IAE/B,OACEY,EAAAA,GAAAA,cAAConB,GAAAA,EAAgB,CACfnoB,OAAQA,EACRooB,cAAe8mG,EACftoG,kBAAmB/lB,EAAK,oBACxBmmB,OAAQA,EACRqB,eAAgBpB,EAChBJ,SAAUmoG,EACV1mG,mBAAoBusD,EACpB10E,QAASA,GACT,KC6DN,IAAexB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IACxBwmB,KAAMyB,GAAczoB,EAAO0oB,MAGnC,MAAO,CACLpoB,OACAmoB,YACAgoG,iBALuBnwH,KAASo7F,EAAAA,EAAAA,IAAiBp7F,EAAM,aAAeA,EAAKk7F,WAM3EnvE,UAAW/rB,IAAQ69C,EAAAA,EAAAA,IAAc79C,GAClC,GAXeP,EAlGsC2wH,EACxDpwH,OACAmoB,YACAgoG,mBACApkG,YACA/qB,UACAwS,eAEA,MAAM,6BAAE68G,IAAiClvH,EAAAA,EAAAA,MAEnCO,GAAOC,EAAAA,EAAAA,MACN2uH,EAAuBC,EAAqBC,IAAwBlsH,EAAAA,EAAAA,MAE3EsS,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IAGV,MAAMyvH,GAAiBh1H,EAAAA,EAAAA,KAAQ,IACxBuE,GAASA,EAAKqmB,UAAarmB,EAAKqmB,SAASmoG,cAIvCxuH,EAAKqmB,SAASmoG,cAHZ,IAIR,CAACxuH,IAEE0wH,GAAervH,EAAAA,EAAAA,KAAawiG,IAChC,IAAKA,EAAO8sB,eACV,OAGF,MAAMC,EAAezoG,EAAU07E,EAAO8sB,gBACtC,OAAKC,EAIElvH,EAAK,iBAAiBwtB,EAAAA,EAAAA,IAAgB0hG,SAJ7C,CAI2D,GAC1D,CAAClvH,EAAMymB,IAEJ0oG,GAAoBxvH,EAAAA,EAAAA,KAAawiG,IACrC,GAAK7jG,EAIL,MAAO,CAAC,CACNgC,MAAON,EAAK,WACZgE,KAAM,SACNw6B,aAAa,EACbu0B,QAASA,IAAM47D,EAA6B,CAC1CnwH,OAAQF,EAAK7I,GACbg+B,OAAQ0uE,EAAO1uE,OACfm5F,aAAc,CAAC,KAEjB,GACD,CAAC5sH,EAAM1B,EAAMqwH,IAEhB,OACEzuH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAUkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACjD2H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAcL,EAAKqqB,EAAY,oBAAsB,oBAEjE0kG,EAAejvH,KAAKqiG,GACnBjiG,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKy9F,EAAO1uE,OACZpzB,UAAU,sBACV0J,QAAM,EACNq8C,eAAgB+oE,EAAkBhtB,IAElCjiG,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CACdrsB,OAAQ0uE,EAAO1uE,OACfkD,OAAQq4F,EAAa7sB,GACrBpyC,eAAa,OAIlB0+D,GACCvuH,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,SAAO,EACPvnB,QAASmuH,EACTlrH,UAAW3D,EAAK,0CAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,0BAGhB/B,GAAQmwH,GACPvuH,EAAAA,GAAAA,cAACguH,GAAoB,CACnB5vH,KAAMA,EACNa,OAAQyvH,EACRtvH,QAASwvH,MAKb,KC5EJM,GAAsB,+BAwT5B,IAAetxH,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IAC1B,WAAEqmH,IAAerzG,EAAAA,EAAAA,IAAexT,IAChC,SAAE4G,GAAaigH,EACfwK,EAAoB71H,QAAQ8E,GAAM+wH,oBAClC,QAAEnI,GAAYrC,EAAWl6D,SAASnsD,IAAW,CAAC,EAEpD,MAAO,CACLF,OACAsG,WACAyqH,oBACAjI,eAAe1tB,EAAAA,EAAAA,IAAiBp7F,EAAM,cACtCgpH,WAAW5tB,EAAAA,EAAAA,IAAiBp7F,EAAM,eAClCqpD,aAAc3pD,EAAO2pD,aACrB4/D,gBAAiBL,EACjB/mE,mBAAoBniD,EAAOmiD,mBAC5B,GAjBepiD,EArT6BuxH,EAC/C9wH,SACAF,OACAsG,WACAyqH,oBACAjI,gBACAE,YACAC,kBACA5/D,eACA71C,WACAquC,qBACAmO,iBACAhvD,cACI,IAAAooH,EACJ,MAAM,WACJE,EAAU,iBACV2H,EAAgB,gBAChBtK,EAAe,aACf6C,EAAY,cACZC,EAAa,SACb3wF,EAAQ,wBACR4wF,EAAuB,qBACvBC,IACExoH,EAAAA,EAAAA,MAEE0oH,EAAe7pH,GAAMgC,OAAS,GAC9B8nH,EAAe9pH,GAAMqmB,UAAYrmB,EAAKqmB,SAASwF,OAAe,GAC9D6vE,EAAgB17F,GAAMqmB,UAAUs1E,cAE/BkrB,EAAoBC,EAAkBC,IAAqBziH,EAAAA,EAAAA,MAC3DuxD,EAAwBC,IAA6B1uD,EAAAA,EAAAA,KAAS,IAC9DpF,EAAO+gF,IAAY37E,EAAAA,EAAAA,IAASyiH,IAC5Bh+F,EAAOq3D,IAAY97E,EAAAA,EAAAA,IAAS0iH,IAC5B/vH,EAAOi8D,IAAY5uD,EAAAA,EAAAA,OACnB0jB,EAAOirC,IAAY3uD,EAAAA,EAAAA,MACpB2iH,EAAY/pH,IAAQpE,EAAAA,EAAAA,IAAkBoE,GACtCo2D,GAAuBr6D,EAAAA,EAAAA,GAASguH,GAAW,EAAO/tH,EAAAA,GAAAA,SAClD0F,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,KAGV/C,EAAAA,EAAAA,KAAU,KACJorD,IACFqgE,EAAwB,CAAExpH,WAC1BwpH,EAAwB,CAAExpH,SAAQiqH,WAAW,IAC7CR,EAAqB,CAAEzpH,WACzB,GACC,CAACA,EAAQwpH,EAAyBrgE,EAAcsgE,KAEnD1rH,EAAAA,EAAAA,KAAU,KACJqI,IAAa+gH,EAAAA,GAAAA,WACfvxD,GAA0B,GAC1BC,OAAS97D,GACX,GACC,CAACqM,IAEJ,MAAMwlH,EAAcn0H,OAAOw2D,KAAKnuD,EAAKqmB,UAAU0lG,kBAAoB,CAAC,GAAGhmH,OACjEwoH,EAAqBvuH,GAAMqmB,UAAUmoG,eAAezoH,QAAW,EAE/DqkH,GAAsB/oH,EAAAA,EAAAA,KAAY,KACtC2uD,EAAeq6D,EAAAA,GAAAA,gBAAkC,GAChD,CAACr6D,IAEEs6D,GAAwBjpH,EAAAA,EAAAA,KAAY,KACxC2uD,EAAeq6D,EAAAA,GAAAA,WAA6B,GAC3C,CAACr6D,IAEEu6D,GAAuBlpH,EAAAA,EAAAA,KAAY,KACvC2uD,EAAeq6D,EAAAA,GAAAA,UAA4B,GAC1C,CAACr6D,IAEEy6D,GAA4BppH,EAAAA,EAAAA,KAAY,KAC5C2uD,EAAeq6D,EAAAA,GAAAA,mBAAqC,GACnD,CAACr6D,IAEE06D,IAAqBrpH,EAAAA,EAAAA,KAAY,KACrC2uD,EAAeq6D,EAAAA,GAAAA,QAA0B,GACxC,CAACr6D,IAEE26D,IAAsBtpH,EAAAA,EAAAA,KAAY,KACtC2uD,EAAeq6D,EAAAA,GAAAA,aAA+B,GAC7C,CAACr6D,IAEE46D,IAAiBvpH,EAAAA,EAAAA,KAAa2tE,IAClChZ,EAASgZ,GACTlZ,GAA0B,EAAK,GAC9B,IAEGytB,IAAoBliF,EAAAA,EAAAA,KAAa0G,IACrCg7E,EAASh7E,EAAEgR,OAAOlN,OAClBiqD,GAA0B,EAAK,GAC9B,IAEG+0D,IAAoBxpH,EAAAA,EAAAA,KAAa0G,IACrCm7E,EAASn7E,EAAEgR,OAAOlN,OAClBiqD,GAA0B,EAAK,GAC9B,IAEGo7D,IAAsB7vH,EAAAA,EAAAA,KAAY,KACtC,MAAM0pH,EAAe/oH,EAAM45B,OACrBovF,EAAen/F,EAAM+P,OAEtBmvF,EAAahlH,OAKlBujH,EAAW,CACTppH,SACA8B,MAAO+oH,EACPl/F,MAAOm/F,EACPjxH,UARAg8D,EAAS+6D,GAST,GACD,CAACjlG,EAAO3rB,EAAQnG,EAAOiI,EAAOsnH,IAE3B6H,IAAyB9vH,EAAAA,EAAAA,KAAY,KACzC4vH,EAAiB,CAAE/wH,SAAQ6N,WAAYgjH,GAAoB,GAC1D,CAAC7wH,EAAQ6wH,EAAmBE,IAEzBG,IAAyB/vH,EAAAA,EAAAA,KAAY,KACzC2uD,EAAeq6D,EAAAA,GAAAA,mBAAqC,GACnD,CAACr6D,IAEE69D,IAA0BxsH,EAAAA,EAAAA,KAAY,KAC1C2uD,EAAeq6D,EAAAA,GAAAA,oBAAsC,GACpD,CAACr6D,IAEEqhE,IAAsBhwH,EAAAA,EAAAA,KAAY,KAClCrB,EAAKk7F,UACPuuB,EAAc,CAAEvpH,OAAQF,EAAK7I,KAE7BqyH,EAAa,CAAEtpH,OAAQF,EAAK7I,KAG9B4vH,IACAJ,IACA7tF,EAAS,CAAE3hC,QAAI8C,GAAY,GAC1B,CAAC+F,EAAKk7F,UAAWl7F,EAAK7I,GAAI4vH,EAAmBJ,EAAiB6C,EAAcC,EAAe3wF,IAExFwyF,IAA2B7vH,EAAAA,EAAAA,KAAQ,KACvC,IAAKuE,EAAKqmB,UAAU+iE,iBAClB,OAAO1nF,EAAK,gBAGd,GAA4C,QAAxC1B,EAAKqmB,SAAS+iE,iBAAiB5lF,KACjC,OAAO9B,EAAK,gBAGd,MAAM6pH,EAAgBvrH,EAAKqmB,SAAS+iE,iBAAiBoiC,QAAQzlH,OACvD0lH,EAAc5pE,GAAoBt6B,QAAQm7B,IAAcA,EAASu5B,aAAYl2E,QAAU,EAG7F,OADa0lH,EAAe,GAAEF,OAAmBE,IAAiB,GAAEF,GACzD,GACV,CAAC1pE,EAAoB7hD,EAAM0B,IACxB4vH,IAAkB71H,EAAAA,EAAAA,KAAQ,KAAMwuH,EAAAA,EAAAA,IAAajqH,IAAO,CAACA,IAE3D,GAAIA,EAAKm6F,cAAgBn6F,EAAKkzF,YAC5B,OAGF,MAAM78B,GAAY/vD,IAAa+gH,EAAAA,GAAAA,WAE/B,OACEzlH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACs1D,GAAAA,EAAc,CACbd,qBAAsBA,EACtBtqD,SAAU8+G,GACVt+G,UAAWw8G,IAEblnH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRpgC,GAAG,gBACH83B,MAAOvtB,EAAK,oBACZoK,SAAUy3E,GACV13E,MAAO7J,EACP8oB,MAAOA,IAAUgmG,GAAsBhmG,OAAQ7wB,EAC/CqS,UAAWw8G,IAEblnH,EAAAA,GAAAA,cAACmiF,GAAAA,EAAQ,CACP5sF,GAAG,gBACH4K,UAAU,OACVktB,MAAOvtB,EAAK,0BACZoK,SAAU++G,GACVh/G,MAAOggB,EACP8Y,UA9LoB,IA+LpBunF,oBA/LoB,IA+L2BrgG,EAAM9lB,QAAQmkC,WAC7D59B,UAAWw8G,EACXqD,mBAAiB,IAElBnsH,EAAKk7F,WACJt5F,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,OAAOghD,WAAS,EAACtkD,QAASgoH,GACvCxoH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,gBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAA8BL,EAAlB4vH,GAAuB,aAAqB,iBAG5E1vH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,UACLghD,WAAS,EACTtkD,QAASkoH,EACTh+G,UAAWw8G,GAEXlnH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,eAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAA4BL,EAAhBg6F,EAAqB,mBAA2B,SAE7EstB,GACCpnH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,OACLtD,QAASsoH,GACThkE,WAAS,EACTp6C,UAAW28G,GAEXrnH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,0BAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YACbknH,GAAkB9I,EAAAA,GAAAA,IAAc8I,EAAgBljH,QAAUrE,EAAK,aAIrExG,QAAQ8E,EAAKosH,cAAcrmH,SAC1BnE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,kBACLtD,QAASuoH,GACTjkE,WAAS,GAET9kD,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,sBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,aACbo+G,EAAAA,GAAAA,IAAcngH,EAAKosH,aAAcrmH,UAIxCnE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,gBACLghD,WAAS,EACTtkD,QAASmoH,EACTj+G,UAAWw8G,GAEXlnH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,cAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAWkG,IAAI,QAC5BqjH,KAGL1pH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gCACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPC,QAAS+hG,EACT9hG,MAAOvtB,EAAK,uBACZoK,SAAUqlH,OAIhBvvH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,QACLghD,WAAS,EACTtkD,QAASqoH,GAET7oH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,0BAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAY+pH,IAE9BlqH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,QACLghD,WAAS,EACTtkD,QAASgvH,IAETxvH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,QAAQkG,IAAI,QAAQvG,EAAK,uBACzCE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAWkG,IAAI,QAAQvG,EAAK,cAAgC,QAAnB0nH,EAAEppH,EAAKgxE,oBAAY,IAAAo4C,EAAAA,EAAI,EAAG,OAErFxnH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,cACLghD,WAAS,EACTC,QAAM,EACNvkD,QAASyrH,IAETjsH,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,wBAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYwsH,KAGhC3sH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,SAAS+F,QAAM,EAACy0B,aAAW,EAAC99B,QAAS0kH,GACjD9mH,EAAKk7F,UAAYx5F,EAAK,iBAAmBA,EAAK,mBAIrDE,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASksC,EACTzzD,QAAS8uH,GACT5kH,SAAU+pD,GACVhxD,UAAW3D,EAAK,SAEf20D,GACCz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGjBH,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQgmH,EACR7lH,QAAS+lH,EACThgH,KAAM/G,EAAKk7F,UAAYx5F,EAAK,sBAAwBA,EAAK,qBACzDisB,aAAc3tB,EAAKk7F,UAAYx5F,EAAK,iBAAmBA,EAAK,gBAC5DksB,eAAgByjG,GAChB/wF,sBAAoB,IAElB,KC1UJixF,GAAoB,sBACpBC,GAAiB,sBAEjBC,IAA+Br5G,EAAAA,GAAAA,KAAUqwC,GAAOA,KAAM,KAAK,GA0FjE,IAAejpD,EAAAA,EAAAA,KAhFqBkyH,EAClCh8D,kBACAi8D,SACAt7D,YACA1B,sBACAC,kBACA9oD,eAEA,MAAM,cAAE8lH,EAAa,gBAAEC,IAAoB1wH,EAAAA,EAAAA,OACpCkyD,EAAU8vB,IAAe/7E,EAAAA,EAAAA,IAASsuD,GAAmB,IAEtDh0D,GAAOC,EAAAA,EAAAA,KACPmwH,EAAaH,EAAS,SAAW,WACjC1iG,EAAiBvtB,EAATiwH,EAAc,oBAA4B,YAElDn7D,GAA8BvgD,EAAAA,EAAAA,GAAY0+C,GAC1C8B,EAA+Bf,IAAoBrC,EACpDsB,QAAAA,EAAuB6B,OAA+Bv8D,EACrD83H,EAAa1+D,GAAYqC,IAAoBrC,GAAYuB,IAAoBvB,GAE5E2+D,EAAiBC,IAAiBx2H,EAAAA,EAAAA,KAAQ,IAC1C43D,EAASttD,OAIVstD,EAASttD,OAxCW,EAyCf,MAAC9L,EAAWyH,EAAM,GAAEowH,kBAEzBz+D,EAASttD,OA1CW,GA2Cf,MAAC9L,EAAWyH,EAAM,GAAEowH,iBAExBN,GAAeU,KAAK7+D,QAIYp5D,IAAjCw8D,GAA8Cs7D,EACzC,GAIF,CACLt7D,EAA+B/0D,EAAM,GAAEowH,aAAuB7iG,QAASh1B,GACtC,IAAjCw8D,EAAyC/0D,EAAM,GAAEowH,eAAqB73H,GAV/D,MAACA,EAAWyH,EAAM,GAAEowH,aAVpB,IAsBR,CAACz+D,EAAUoD,EAA8Bs7D,EAAYrwH,EAAMowH,EAAY7iG,KAE1EhxB,EAAAA,EAAAA,KAAU,KACRklF,EAAYztB,GAAmB,GAAG,GACjC,CAACi8D,EAAQj8D,IAEZ,MAAMy8D,GAAuB9wH,EAAAA,EAAAA,KAAa0G,IACxC,MAAMqqH,EAAcrqH,EAAEgR,OAAOlN,MAAM+vB,OAAOjI,QAAQ49F,GAAmB,IACrEpuC,EAAYivC,GAEZ,MAAMC,EA9DV,SAAyBh/D,GACvB,OAA2B,IAApBA,EAASttD,QACdstD,EAASttD,QATe,GAUrBstD,EAASttD,QATY,IAUrByrH,GAAeU,KAAK7+D,EAE3B,CAwDoBi/D,CAAgBF,GAC3BC,IAELvmH,IAAWsmH,GAEXX,IAA6B,KACvBW,IAAgB18D,IACJi8D,EAASE,EAAkBD,GACnC,CAAEv+D,SAAU++D,GACpB,IACA,GACD,CAACT,EAAQE,EAAiBD,EAAel8D,EAAiB5pD,IAE7D,OACElK,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACR1rB,MAAQ,GAAE8lH,EAAS12F,EAAAA,IAAkB,KAAKo4B,IAC1CvnD,SAAUqmH,EACVljG,MAAO8iG,EAAarwH,EAAK,YAAcutB,EACvCnE,MAAOmnG,EACPM,QAASP,EACTQ,SAAUn8D,EACV7P,2BAAyB,GACzB,IC2KN,IAAehnD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IAC1B,oBAAEy0D,EAAmB,gBAAEC,EAAe,MAAE9pC,IAAU2nG,EAAAA,EAAAA,IAAiB/yH,EAAQQ,GAEjF,MAAO,CACLF,OACA+rB,WAAW8xB,EAAAA,EAAAA,IAAc79C,GACzBsG,UAAU4M,EAAAA,EAAAA,IAAexT,GAAQ6mH,WAAWjgH,SAC5CwkB,QACA6pC,sBACAC,kBACA9xD,YAAa9C,GAAM8C,YACnB4vH,gBAAgB19D,EAAAA,GAAAA,GAAmBt1D,EAAQ,kBAC5C,GAdeD,EA7OqCkzH,EACvD3yH,OACAwT,WACAuY,YACAzlB,WACAquD,sBACAC,kBACA9pC,QACAhoB,cACA4vH,iBACA1xH,cAEA,MAAM,iBACJ4xH,EAAgB,kBAChBC,EAAiB,kBACjBC,EAAiB,sBACjBj5D,IACE14D,EAAAA,EAAAA,MAEEs0D,GAAwBh6D,EAAAA,EAAAA,KAAQ,IAAMuE,EAAK4yD,WAAWjpB,MAAK,EAAGkqB,gBAAiBA,KAAa,CAAC7zD,EAAK4yD,YAClG8C,EAAkBD,GAAuBpC,UAAY,GACrDy8C,GAAWr0G,EAAAA,EAAAA,KAAQ,KAAMwuH,EAAAA,EAAAA,IAAajqH,IAAO,CAACA,IAC9C+yH,EAAc/yH,EAAKqmB,UAAU2sG,YAE5Bn9D,EAAwBC,IAA6B1uD,EAAAA,EAAAA,KAAS,IAC9D6rH,EAAaC,IAAkB9rH,EAAAA,EAAAA,IAAsB0oG,EAAW,SAAW,YAC3E55C,EAAkBC,IAAuB/uD,EAAAA,EAAAA,OACzC+rH,EAA2BC,EAAyBC,IAA4B/uH,EAAAA,EAAAA,MAChFgvH,EAA0BC,EAAwBC,IAA2BlvH,EAAAA,EAAAA,KAE9EkyD,GAA8BvgD,EAAAA,EAAAA,GAAY0+C,GAG1CrxD,EAAYuyD,GAA0B36D,QACzB,WAAhB+3H,IACK/8D,GAAqBR,GAAwC,KAArBQ,KAJXvB,QAAAA,EAAuB6B,IAMtC,YAAhBy8D,GAA6BnjB,IAGnCl5F,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,KAGV/C,EAAAA,EAAAA,KAAU,KACR63D,GAA0B,EAAM,GAC/B,CAACJ,KAEJz3D,EAAAA,EAAAA,KAAU,KACJg1H,IAAgBF,GAClBF,GACF,GACC,CAACI,EAAaF,EAAaF,IAE9B,MAAMV,GAAuB9wH,EAAAA,EAAAA,KAAawK,IACxCsqD,EAAoBtqD,GACpBiqD,GAA0B,EAAK,GAC9B,IAEG29D,GAAqBpyH,EAAAA,EAAAA,KAAY,CAACwK,EAAe9D,KAIrD,GAHgBpQ,OAAOsiD,QAAO/xB,EAAAA,EAAAA,MAAYzB,MAAMC,MAC7Ca,QAAO,EAAG2zE,YAAWtoC,eAAgBsoC,GAAatoC,GAAWhd,MAAM89E,GAAMA,EAAElgH,aAElEzN,QAAU2sH,GAA4B,WAAV7mH,EAAoB,CAC1DguD,EAAsB,CAAEl+C,MAAO,mBAC/B,MAAMg4G,EAAa5rH,EAAEqJ,cAAcla,QAAQ,gBAK3C,OAFCy8H,EAAWj9H,cAAc,kBAAuCs4B,SAAU,OAC1E2kG,EAAWj9H,cAAc,mBAAwCs4B,SAAU,EAE9E,CACAkkG,EAAernH,GACfiqD,GAA0B,EAAK,GAC9B,CAAC48D,EAAgB74D,IAEd+5D,GAA+BvyH,EAAAA,EAAAA,KAAawK,IAChDinH,EAAkB,CAChB5yH,OAAQF,EAAK7I,GACb2L,YAAuB,cAAV+I,GACb,GACD,CAAC7L,EAAK7I,GAAI27H,IAEPe,GAAaxyH,EAAAA,EAAAA,KAAY,KACzByuG,GAA4B,YAAhBmjB,EACdM,IAEAX,EAAiB,CAAEv/D,SAA0B,WAAhB4/D,EAA2B/8D,EAAmB,IAC7E,GACC,CAAC45C,EAAUyjB,EAAwBN,EAAaL,EAAkB18D,IAE/D49D,GAAkCzyH,EAAAA,EAAAA,KAAY,KAClDuxH,EAAiB,CAAEv/D,SAAU,KAC7BmgE,GAAyB,GACxB,CAACA,EAAyBZ,IAEvBmB,GAA0B1yH,EAAAA,EAAAA,KAAY,KAC1CgyH,IACAR,GAAmB,GAClB,CAACQ,EAA0BR,IAExBnxH,GAAOC,EAAAA,EAAAA,KACPqyH,EAAcjoG,EAAY,UAAY,OACtCkoG,EAAcloG,EAAY,UAAY,QAEtC2d,EAAU,CACd,CAAE79B,MAAO,UAAWojB,MAAOvtB,EAAM,GAAEsyH,YAAuBlzD,SAAUp/D,EAAM,GAAEsyH,iBAC5E,CAAEnoH,MAAO,SAAUojB,MAAOvtB,EAAM,GAAEsyH,WAAsBlzD,SAAUp/D,EAAM,GAAEsyH,iBAGtEE,EAAoB,CAAC,CACzBroH,MAAO,UACPojB,MAAOvtB,EAAK,yCACX,CACDmK,MAAO,YACPojB,MAAOvtB,EAAK,2CAGR20D,EAAY/vD,IAAa+gH,EAAAA,GAAAA,WACzB3wD,EAA8C,WAAhBu8D,GAA4BjzH,EAAK4yD,WAAa5yD,EAAK4yD,UAAU7sD,OAAS,EAiB1G,OACEnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAUkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACjD2H,EAAAA,GAAAA,cAAA,MAAIG,UAAU,mBAAmBL,EAAM,GAAEuyH,UACzCryH,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACTC,SAAU+wD,EACV7sG,KAAK,eACLsjB,QAASA,EACT59B,SAAU2nH,KAGG,YAAhBR,EACCrxH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAUkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAChD84H,EACCnxH,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC+7C,GAAAA,EAAQ,CAACnxC,IAAKumH,EAAahxH,UAAU,aAAagF,KAAMgsH,IACzDnxH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eAAekG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACnDyH,EAAM,GAAEsyH,qBAGXpyH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,SAAS+F,QAAM,EAACy0B,aAAW,EAAC99B,QAASgxH,GACjD1xH,EAAK,eAERE,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQsyH,EACRnyH,QAASqyH,EACTtsH,KAAMrF,EAAK,eACXisB,aAAcjsB,EAAK,gBACnBksB,eAAgBmmG,EAChBzzF,sBAAoB,KAIxB1+B,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,OAIZh7C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qBACbH,EAAAA,GAAAA,cAAC8vH,GAAa,CACZC,QAAM,EACNj8D,gBAAiBA,EACjBW,UAAWA,EACX1B,oBAAqBA,EACrBC,gBAAiBA,EACjB9oD,SAAUqmH,IAEXrnG,IAAUqpG,EAAAA,KA9DrB,WACE,MAAMC,EAAoB,GAAEn5F,EAAAA,MAAkBo5F,EAAAA,MAE9C,OACEzyH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eAAekG,IAAI,QAC5BvG,EAAK,mCACJiyB,QAAQ,SAAU,mBAClB45B,MAAM,KACN/rD,KAAK8yH,GACU,kBAANA,EAAwB1yH,EAAAA,GAAAA,cAAC+7C,GAAAA,EAAQ,CAACnxC,IAAK4nH,EAAkBrtH,KAAO,IAAGstH,EAAAA,QAA0BC,IAI/G,CAiDgDC,GACtC3yH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eAAekG,IAAI,QAC7BvG,EAAM,GAAEuyH,qCAIdv9D,GACC90D,EAAAA,GAAAA,cAAC+wD,GAAe,CACdzyD,OAAQF,EAAK7I,GACby7D,UAAW5yD,EAAK4yD,UAChBC,eAAgBs/D,IAGpBvwH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAUkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACjD2H,EAAAA,GAAAA,cAAA,MAAIG,UAAU,mBACXL,EAAKqqB,EAAY,4CAA8C,4CAElEnqB,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACTC,SAAUp/D,EAAc,YAAc,UACtCsjB,KAAK,kBACLsjB,QAASwqF,EACTpoH,SAAU8nH,IAEZhyH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEPL,EADHqqB,EACQ,2CACA,6CAIfnqB,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASrmB,EACTgJ,SAAU+pD,EACVhxD,UAAW3D,EAAK,QAChBU,QAASyxH,GAERx9D,EACCz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGjBH,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQyyH,EACRtyH,QAASwyH,EACTzsH,KAAMrF,EAAK,gDAAiDg0D,GAC5D9nC,eAAgBkmG,EAChBxzF,sBAAoB,IAElB,KCIV,IAAe9gC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IAC1B,iBAAEs0H,EAAkB9tG,KAAMivD,GAAej2E,EAAO+mB,MAKtD,MAAO,CACLzmB,OACA21E,aACA6+C,mBACAC,WARiBz0H,GAAMqmB,UAAUs1E,cAC/B17F,EAAAA,EAAAA,IAAWP,EAAQM,EAAKqmB,SAASs1E,mBACjC1hG,EAOF8xB,UAAW/rB,IAAQ69C,EAAAA,EAAAA,IAAc79C,GAClC,GAdeP,EArPgCi1H,EAClD10H,OACAgB,UACAwS,WACAtT,SACAy1E,aACA8+C,aACAD,mBACAzoG,YACAikC,qBAEA,MAAM,wBACJ2kE,EAAuB,oBACvBC,EAAmB,sBACnBC,EAAqB,kBACrBC,EAAiB,iBACjBC,IACE5zH,EAAAA,EAAAA,OAEG6zH,EAAeC,IAAoB7tH,EAAAA,EAAAA,OACnC8tH,EAAgCC,EAA8BC,IAAiC9wH,EAAAA,EAAAA,MAC/F+wH,EAA8BC,EAA4BC,IAA+BjxH,EAAAA,EAAAA,MACzFkxH,EAAcC,IAAmBruH,EAAAA,EAAAA,IAASqtH,GAAYe,eACtDE,EAAeC,IAAoBvuH,EAAAA,EAAAA,IAASqtH,GAAYiB,eACzDh0H,GAAOC,EAAAA,EAAAA,KACPg6F,EAAe84B,GAAYt9H,IAEjCyf,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,KAGV/C,EAAAA,EAAAA,KAAU,KACR02H,GAAyB,GACxB,CAACA,KAEJ12H,EAAAA,EAAAA,KAAU,KACJuV,IACFiiH,EAAgBhB,GAAYe,eAAgB,GAC5CG,EAAiBlB,GAAYiB,gBAAiB,GAChD,GACC,CAACjB,EAAYjhH,IAEhB,MAAMoiH,GAA4Bv0H,EAAAA,EAAAA,KAAY,KAC5C+zH,IACAP,EAAsB,CAAEgB,UAAW9pG,EAAY7rB,EAASy7F,IACnD5vE,GACHikC,EAAeq6D,EAAAA,GAAAA,QACjB,GACC,CAAC+K,EAA+BP,EAAuB9oG,EAAW7rB,EAAQy7F,EAAc3rC,IAErF8lE,GAA0Bz0H,EAAAA,EAAAA,KAAY,KAC1Ck0H,IACAX,EAAoB,CAAEiB,UAAW31H,EAAQA,OAAQ80H,GAAgB,GAChE,CAACO,EAA6BX,EAAqB10H,EAAQ80H,IAExDe,GAAwB10H,EAAAA,EAAAA,KAAa2tB,IACzCymG,EAAgBzmG,GAChB+lG,EAAiB,CAAE70H,OAAQy7F,EAAe5tF,UAAWihB,IAChDA,GACH2mG,GAAiB,EACnB,GACC,CAACh6B,EAAco5B,IAEZiB,GAAyB30H,EAAAA,EAAAA,KAAa2tB,IAC1C2mG,EAAiB3mG,GACjB8lG,EAAkB,CAAE50H,OAAQy7F,EAAe5tF,UAAWihB,GAAU,GAC/D,CAAC2sE,EAAcm5B,IA6IlB,OACElzH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAC+4D,GAAAA,EAAY,CACXp1B,OAAQs1B,GAAAA,EAAAA,iBACRz8D,KAAM63H,EAAAA,IACNl0H,UAAU,iBAEX0yH,GAtFL7yH,EAAAA,GAAAA,cAAA,WACEA,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,sBACVm5D,UAAQ,GAERt5D,EAAAA,GAAAA,cAACymD,GAAAA,EAAa,CAACnoD,OAAQu0H,EAAYt9H,MAErCyK,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,SACL+F,QAAM,EACNy0B,aAAW,EACX99B,QAAS+yH,GAERzzH,EAAKqqB,EAAY,wBAA0B,4BAE9CnqB,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQq0H,EACRl0H,QAASo0H,EACThpG,OAzEJxqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACbH,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CACL/gB,KAAK,OACL4B,KAAMy0H,IAER7yH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACZL,EAAKqqB,EAAY,wBAA0B,6BAoE5C/X,WAAWsL,EAAAA,GAAAA,GACT5d,EAAKqqB,EAAY,+BAAiC,6BAA8B0oG,EAAYzyH,OAC5F,CAAC,KAAM,oBAET2rB,aAAcjsB,EAAKqqB,EAAY,wBAA0B,2BACzD6B,eAAgBgoG,EAChBt1F,sBAAoB,MA8DlBm0F,GAtDN7yH,EAAAA,GAAAA,cAAA,WACEA,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eAAekG,IAAI,QAAQvG,EAAK,0BAE7CE,EAAAA,GAAAA,cAAA,OAAKs0H,eAAa,GAChBt0H,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAI,eACJV,KAAK,QACL+F,QAAM,EACN+xG,cAAe,EACfz7G,UAAU,mBAETL,EAAK,0BAEP8yH,EACCA,EAAiBhzH,KAAI,CAACrK,EAAIoqB,IACxB3f,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKjP,EACLqmH,cAAej8F,EAAI,EACnBxf,UAAU,kCAEVK,QAASA,KAlHrB6yH,EAmHgC99H,GAlHhCm+H,GAkHmC,GAGvB1zH,EAAAA,GAAAA,cAACymD,GAAAA,EAAa,CAACnoD,OAAQ/I,OAI3ByK,EAAAA,GAAAA,cAACksD,GAAAA,EAAY,CAAC1nD,IAAI,gBAAgBo3G,cAAe,EAAGz2G,KAAK,gCAG7DnF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,yBAAyBkG,IAAI,QAAQvG,EAAK,2BACvDE,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQw0H,EACRr0H,QAASu0H,EACTnpG,OA/GR,WACE,MAAM+pG,EAAcxgD,EAAWq/C,GAE/B,GAAKmB,EAIL,OACEv0H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACbH,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CACL/gB,KAAK,OACL4B,KAAMm2H,IAERv0H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACZL,EAAK,sCAId,CA6FgB00H,GACRpiH,UA5FR,WACE,MAAMmiH,EAAcxgD,EAAWq/C,GAE/B,GAAKmB,EAIL,OAAIA,EAAYE,gBACP/2G,EAAAA,GAAAA,GACJ,yBAAwB62G,EAAYn0H,sCAAsChC,EAAMgC,WACjF,CAAC,KAAM,qBAIJsd,EAAAA,GAAAA,GAEJ,yBAAwB62G,EAAYn0H,sCAAsChC,EAAMgC,kFACjF,CAAC,KAAM,mBAEX,CAyEmBs0H,GACX3oG,aAAcjsB,EAAK,uBACnBksB,eAAgBkoG,MAkBjBrB,GACC7yH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,mBAAmBL,EAAK,6BACtCE,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPC,QAASwmG,EACTrmG,QAAS4mG,EACT9mG,MAAOvtB,EAAK,+BAEb8zH,GACC5zH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPC,QAAS0mG,EACTvmG,QAAS6mG,EACT/mG,MAAOvtB,EAAK,gCAGhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cACKL,EAAf8zH,EAAoB,iCAAyC,oCAKlE,KCgFV,IAAeh2H,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,SAAQq2H,8BACjB,MAAMv2H,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAGhC,MAAO,CAAEF,OAAMw2H,sBAFex2H,EAAKk7F,WAAaq7B,GAEZ,GALpB92H,EA9T0Cg3H,EAC5Dz2H,OACA02H,uBACA1mE,iBACAwmE,sBACAx1H,UACAwS,eAEA,MAAM,6BAAE68G,IAAiClvH,EAAAA,EAAAA,MAEnCw1H,GAAqBl7H,EAAAA,EAAAA,KAAQ,KACjC,GAAKuE,GAASA,EAAKqmB,UAAarmB,EAAKqmB,SAAS4/E,QAI9C,OAAOjmG,EAAKqmB,SAAS4/E,QAAQt8D,MAAK,EAAGxU,YAAaA,IAAWuhG,GAAqB,GACjF,CAAC12H,EAAM02H,KAEJ,YACJhK,EAAW,sBAAEE,EAAqB,UAAEv2D,EAAS,uBAAEy2D,EAAsB,aAAE3I,GACrEqI,GAAqBmK,GAAoBrI,cAAgBtuH,GAAM2rH,sBAC5DiL,EAA6BC,EAA2BC,IAA8BxyH,EAAAA,EAAAA,KACvF5C,GAAOC,EAAAA,EAAAA,MAEP,QAAEs5F,GAAYj7F,GAAQ,CAAC,GAE7B4W,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,KAGV/C,EAAAA,EAAAA,KAAU,KACJ+B,GAAMqmB,UAAYqwG,IAAyBC,GAC7C3mE,EAAeq6D,EAAAA,GAAAA,iBACjB,GACC,CAACrqH,EAAMgwD,EAAgB2mE,EAAoBD,IAE9C,MAAMrI,GAAwBhtH,EAAAA,EAAAA,KAAY,KACnCrB,GAAS02H,IAIdvS,GAAa,GACbkM,EAA6B,CAC3BnwH,OAAQF,EAAK7I,GACbg+B,OAAQuhG,EACRpI,aAAc5B,IACd,GACD,CAAC1sH,EAAM02H,EAAsBvS,EAAckM,EAA8B3D,IAEtEqK,GAAqB11H,EAAAA,EAAAA,KAAY,KAChCrB,GAAS02H,GAIdrG,EAA6B,CAC3BnwH,OAAQF,EAAK7I,GACbg+B,OAAQuhG,EACRpI,aAAc,CACZ0I,cAAc,IAEhB,GACD,CAACh3H,EAAM02H,EAAsBrG,IAE1B4G,GAAuB51H,EAAAA,EAAAA,KAAa+E,KACpCowH,MAICx2H,IAASA,EAAK2rH,sBAIZ3rH,EAAK2rH,oBAAoBvlH,IAC/B,CAACpG,EAAMw2H,KAEHvI,EAAqBC,IAA0B9mH,EAAAA,EAAAA,KAAS,GACzD+mH,GAA0B9sH,EAAAA,EAAAA,KAAa0G,KAC3C5R,EAAAA,EAAAA,GAAU4R,GACVmmH,GAAwBD,EAAoB,GAC3C,CAACA,IAEJ,GAAK0I,EAIL,OACE/0H,EAAAA,GAAAA,cAAA,OACEG,UAAU,mCACVlK,MAAQ,uDAGR+J,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC6vB,UAAQ,EAACn5D,UAAU,uBAC3BH,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CAACrsB,OAAQwhG,EAAmBxhG,OAAQs8B,eAAa,KAGnE7vD,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAI,QAAQvG,EAAK,0BAEtDE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,YACL4I,SAAU09F,EAAYa,UACtBt+F,MAAOvtB,EAAK,wBACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,aAC/BnrH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,YACL4I,SAAU09F,EAAYW,UACtBp+F,MAAOvtB,EAAK,6BACZotH,UAAQ,EACRC,UAAWd,EAAsB,KAAO,OACxC3hH,SAAU2qH,EAAqB,aAC/BnrH,SAAUghH,EACVkC,aAAcb,KAIlBvsH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,oBACbH,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GACT,eACAmmH,GAAuB,uBAGzBrsH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAU09F,EAAYuC,WACtBhgG,MAAOvtB,EAAK,8BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,cAC/BnrH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAU09F,EAAYwC,WACtBjgG,MAAOvtB,EAAK,8BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,cAC/BnrH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,eACL4I,SAAU09F,EAAYd,eAAiBc,EAAYb,SACnD58F,MAAOvtB,EAAK,gCACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,gBAC/BnrH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAU09F,EAAYyC,WACtBlgG,MAAOvtB,EAAK,6BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,cAC/BnrH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,WACL4I,SAAU09F,EAAY0C,SACtBngG,MAAOvtB,EAAK,6BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,YAC/BnrH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAU09F,EAAY2C,WACtBpgG,MAAOvtB,EAAK,8BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,cAC/BnrH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,kBACL4I,SAAU09F,EAAY4C,gBACtBrgG,MAAOvtB,EAAK,6BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,mBAC/BnrH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAU09F,EAAYY,WACtBr+F,MAAOvtB,EAAK,8BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,cAC/BnrH,SAAUghH,KAIdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,YACL4I,SAAU09F,EAAY6C,UACtBtgG,MAAOvtB,EAAK,6BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,aAC/BnrH,SAAUghH,OAMlBlrH,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAe,OAAQmmH,GAAuB,YAE5DrsH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,cACL4I,SAAU09F,EAAY8C,YACtBvgG,MAAOvtB,EAAK,+BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,eAC/BnrH,SAAUghH,KAGdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,cACL4I,SAAU09F,EAAY+C,YACtBxgG,MAAOvtB,EAAK,+BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,eAC/BnrH,SAAUghH,KAGdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAU09F,EAAYgD,WACtBzgG,MAAOvtB,EAAK,8BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,cAC/BnrH,SAAUghH,KAGb7xB,GACCr5F,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,eACL4I,SAAU09F,EAAYiD,aACtB1gG,MAAOvtB,EAAK,0BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,gBAC/BnrH,SAAUghH,QAOlB0J,GACA50H,EAAAA,GAAAA,cAAA,OACEG,WAAW+F,EAAAA,GAAAA,GACT,UACAmmH,GAAuB,YAGzBrsH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,cAAc+F,QAAM,EAACy0B,aAAW,EAAC99B,QAASy0H,GACtDn1H,EAAK,4BAMdE,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASijG,EACTxqH,QAASisH,EACThpH,UAAW3D,EAAK,QAChB4K,SAAU+pD,GAETA,EACCz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAIjBH,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQ+1H,EACR51H,QAAS81H,EACT/vH,KAAK,oEACL4mB,aAAa,SACbC,eAAgBmpG,EAChBz2F,sBAAoB,IAElB,KCxNV,IAAe9gC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAEhC,MAAO,CACLF,OACA0f,cAAehgB,EAAOggB,cACtBqM,WAAW8xB,EAAAA,EAAAA,IAAc79C,GAC1B,GAReP,EAhHwCy3H,EAC1Dl3H,OACA+rB,YACArM,gBACAswC,iBACA09D,qBACA1sH,UACAwS,eAEA,MAAM9R,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IAGV,MAAMm2H,GAA2B91H,EAAAA,EAAAA,KAAY,KAC3C2uD,EAAeq6D,EAAAA,GAAAA,mBAAqC,GACnD,CAACr6D,IAEEonE,EAAkBl8H,QAAQ8E,EAAKk7F,WAAal7F,EAAKq3H,aAAaC,WAE9DC,GAAe97H,EAAAA,EAAAA,KAAQ,IACtBuE,EAAKqmB,UAAU0lG,iBAIbp0H,OAAOsiD,OAAOj6C,EAAKqmB,SAAS0lG,kBAAkBv+D,MAAK,CAACC,EAAGC,IACxDD,EAAEyiE,SACI,EACCxiE,EAAEwiE,QACJ,EAGF,IAVA,IAYR,CAAClwH,IAEEw3H,GAAyBn2H,EAAAA,EAAAA,KAAawiG,IAC1C6pB,EAAmB7pB,EAAO1uE,OAAQ0uE,EAAOmqB,mBAAqBtuG,GAC9DswC,EAAeq6D,EAAAA,GAAAA,gBAAkC,GAChD,CAAC3qG,EAAeguG,EAAoB19D,IAEjCynE,GAAsBp2H,EAAAA,EAAAA,KAAY,KACtC2uD,EAAeq6D,EAAAA,GAAAA,eAAiC,GAC/C,CAACr6D,IAEE0nE,GAAkBr2H,EAAAA,EAAAA,KAAawiG,IACnC,GAAIA,EAAOqsB,QACT,OAAOxuH,EAAK,kBAId,MAAMymB,GAAYD,EAAAA,EAAAA,MAAYE,MAAM1B,KAC9BixG,EAAiB9zB,EAAOmqB,iBAAmB7lG,EAAU07E,EAAOmqB,uBAAoB/zH,EAEtF,OAAI09H,EACKj2H,EAAK,uBAAuBwtB,EAAAA,EAAAA,IAAgByoG,IAG9Cj2H,EAAK,eAAe,GAC1B,CAACA,IAEJ,OACEE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,SACLghD,WAAS,EACTtkD,QAAS+0H,GAETv1H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,aAC9BE,EAAAA,GAAAA,cAAA,QAAMG,UAAU,YAAYL,EAAKqqB,EAAY,4BAA8B,yBAI/EnqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAUkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACjD2H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAAakG,IAAI,QAC3B8jB,EACG,8DACA,6DAGLwrG,EAAa/1H,KAAKqiG,GACjBjiG,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKy9F,EAAO1uE,OACZpzB,UAAU,sBAEVK,QAASA,IAAMo1H,EAAuB3zB,IAEtCjiG,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CACdrsB,OAAQ0uE,EAAO1uE,OACfkD,OAAQq/F,EAAgB7zB,GACxBpyC,eAAa,OAKnB7vD,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASytG,EACTh1H,QAASq1H,EACTpyH,UAAW3D,EAAK,oCAEhBE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,4BAIf,KCcV,IAAevC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aAGF,CAAEF,MAFIC,EAAAA,EAAAA,IAAWP,EAAQQ,MAFhBT,EAjIwCm4H,EAAG53H,OAAMgB,UAASwS,eAC5E,MAAM9R,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IAGV,MAAMu2H,GAAe97H,EAAAA,EAAAA,KAAQ,IACtBuE,GAAMqmB,UAAU0lG,iBAIdp0H,OAAOsiD,OAAOj6C,EAAKqmB,SAAS0lG,kBAAkBv+D,MAAK,CAACC,EAAGC,IACxDD,EAAEyiE,SACI,EACCxiE,EAAEwiE,QACJ,EAGF,IAVA,IAYR,CAAClwH,IAEE03H,GAAkBr2H,EAAAA,EAAAA,KAAawiG,GAC/BA,EAAOqsB,QACFxuH,EAAK,kBAGPA,EAAK,iBACX,CAACA,IAEJ,OACEE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,0BAA0BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACjE2H,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkBkG,IAAI,QAAO,WAE3CrG,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAS,EACTC,MAAOvtB,EAAK,qBACZoK,cAAU7R,KAGd2H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAS,EACTC,MAAOvtB,EAAK,2BACZoK,cAAU7R,KAGd2H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAS,EACTC,MAAOvtB,EAAK,4BACZoK,cAAU7R,KAGd2H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAS,EACTC,MAAOvtB,EAAK,6BACZoK,cAAU7R,KAGd2H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAS,EACTC,MAAOvtB,EAAK,iCACZoK,cAAU7R,KAGd2H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAS,EACTC,MAAOvtB,EAAK,gCACZoK,cAAU7R,KAGd2H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAS,EACTC,MAAOvtB,EAAK,gCACZoK,cAAU7R,MAKhB2H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,0BAA0BkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GACjE2H,EAAAA,GAAAA,cAAA,MAAIG,UAAU,kBAAkBkG,IAAI,QAAQvG,EAAK,6BAEjDE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,SAAS,EACTC,MAAOvtB,EAAK,qBACZoK,cAAU7R,KAIbs9H,EAAa/1H,KAAKqiG,GACjBjiG,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKy9F,EAAO1uE,OACZpzB,UAAU,uCACVK,aAASnI,EACTwR,QAAM,GAEN7J,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CAACE,MAAM,GAAGD,SAAS,IAC5BptB,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CACdrsB,OAAQ0uE,EAAO1uE,OACfkD,OAAQq/F,EAAgB7zB,GACxBpyC,eAAa,SAMnB,KC8OV,IAAejyD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,SAAQq2H,8BACjB,MAAMv2H,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IACxBwmB,KAAMyB,GAAczoB,EAAO0oB,OAC7B,cAAE1I,GAAkBhgB,EACpBqsB,GAAY8xB,EAAAA,EAAAA,IAAc79C,GAC1Bw2H,IAAwBx2H,EAAKk7F,WAAaq7B,GAGhD,MAAO,CACLv2H,OACAmoB,YACAzI,gBACAqM,YACAkvE,QAPcj7F,EAAKi7F,QAQnBu7B,sBACAqB,cAAe73H,EAAKq3H,YACrB,GAjBe53H,EArVsCq4H,EACxDC,aACAC,iBACAH,gBACA7nE,iBACAhwD,OACAmoB,YACAzI,gBACAqM,YACAkvE,UACAu7B,sBACAx1H,UACAwS,eAEA,MAAM,gBAAEykH,IAAoB92H,EAAAA,EAAAA,OAErBurH,EAAaC,IAAkBvlH,EAAAA,EAAAA,IAA6B,CAAC,IAC7Dy2D,EAAWq6D,IAAgB9wH,EAAAA,EAAAA,IAASlM,QAAQ68H,KAC5C1hE,EAAW8tD,IAAgB/8G,EAAAA,EAAAA,KAAS,IACpC+wH,EAAiCC,EAA+BC,IAAkC/zH,EAAAA,EAAAA,MAClGg0H,EAAaC,IAAkBnxH,EAAAA,EAAAA,IAAS,IACzC1F,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IAGV,MAAM21H,GAAqBl7H,EAAAA,EAAAA,KAAQ,KACjC,MAAM+8H,EAAsBR,EAAiBh4H,EAAKqmB,UAAU0lG,mBAAmBiM,QAAkB/9H,EAIjG,IAAI89H,IAAeS,GAAwBR,EAA3C,CAIA,GAAID,EAAY,CACd,MAAM34G,GAAO8I,EAAAA,EAAAA,MAAYE,MAAM1B,KAAKsxG,GAEpC,OAAO54G,EAAO,CACZ+V,OAAQ/V,EAAKjoB,GACbkgI,YAAaQ,EACbS,YAAa52H,EAAK,gBAClBwuH,SAAS,EACTlC,sBAAkB/zH,QAChBA,CACN,CAEA,OAAOu+H,CAdP,CAc0B,GACzB,CAACx4H,EAAKqmB,UAAU0lG,iBAAkB8L,EAAeE,EAAYr2H,EAAMs2H,KAEtE/5H,EAAAA,EAAAA,KAAU,KACJ+B,GAAMqmB,UAAY2xG,IAAmBrB,GACvC3mE,EAAeq6D,EAAAA,GAAAA,mBACjB,GACC,CAACrqH,EAAMgwD,EAAgB2mE,EAAoBqB,KAE9C/5H,EAAAA,EAAAA,KAAU,KACR0uH,EAAegK,GAAoBU,aAAe,CAAC,GACnDkB,GAAgB5B,GAAoB2B,aAAe,IAAIzqD,OAAO,EA9DlC,KA+D5BqqD,EAAah9H,QAAQ68H,IACrB5T,GAAa,EAAM,GAClB,CAAC0T,EAAeE,EAAYpB,IAE/B,MAAM7J,GAAyBzrH,EAAAA,EAAAA,KAAa0G,IAC1C,MAAM,KAAEqe,GAASre,EAAEgR,OAMnB4zG,GAAgBrrG,IAAC,UACZA,EACH,CAAC8E,IANgCva,EAMCyV,EAAE8E,IAL7Bva,QAAQ5R,IADjB,IAAmC4R,CAOjC,IACFqsH,GAAa,EAAK,GACjB,IAEG7J,GAAwBhtH,EAAAA,EAAAA,KAAY,KACnC22H,IAIL7T,GAAa,GACb8T,EAAgB,CACd/3H,OAAQF,EAAK7I,GACbg+B,OAAQ6iG,EACRX,YAAa3K,EACb4L,gBACA,GACD,CAACN,EAAgBC,EAAiBj4H,EAAK7I,GAAIu1H,EAAa4L,IAErDG,GAAqBp3H,EAAAA,EAAAA,KAAY,KAChC22H,IAILC,EAAgB,CACd/3H,OAAQF,EAAK7I,GACbg+B,OAAQ6iG,EACRX,YAAa,CAAC,IAEhBgB,IAAgC,GAC/B,CAACr4H,EAAK7I,GAAIkhI,EAAgCL,EAAgBC,IAEvDhB,GAAuB51H,EAAAA,EAAAA,KAAa+E,MACpC3F,EAAAA,EAAAA,IAAiBT,KAIjBw2H,GAAwBx2H,EAAKq3H,cAI7Br3H,EAAKk7F,WAIDl7F,EAAKq3H,YAAajxH,MACzB,CAACpG,EAAMw2H,IAEJkC,GAAej9H,EAAAA,EAAAA,KAAQ,KAC3B,GAAIs8H,IAAepB,EACjB,OAGF,GAAIA,EAAmBzG,QACrB,OAAOxuH,EAAK,kBAGd,MAAMi2H,EAAiBhB,EAAmB3I,iBACtC7lG,EAAUwuG,EAAmB3I,uBAC7B/zH,EAEJ,OAAI09H,EACKj2H,EAAK,uBAAuBwtB,EAAAA,EAAAA,IAAgByoG,IAG9Cj2H,EAAK,eAAe,GAC1B,CAACq2H,EAAYpB,EAAoBxuG,EAAWzmB,IAEzCi3H,GAA0Bt3H,EAAAA,EAAAA,KAAa0G,IAC3C,MAAM,MAAE8D,GAAU9D,EAAEgR,OACpBw/G,EAAe1sH,GACfqsH,GAAa,EAAK,GACjB,IAEH,GAAKvB,EAIL,OACE/0H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC6vB,UAAQ,EAACn5D,UAAU,uBAC3BH,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CACdrsB,OAAQwhG,EAAmBxhG,OAC3BkD,OAAQqgG,EACRjnE,eAAa,KAIjB7vD,EAAAA,GAAAA,cAAA,MAAIG,UAAU,uBAAuBkG,IAAI,QAAQvG,EAAK,uBAEtDE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,QAAS9zB,QAAQwxH,EAAYgD,YAC7BzgG,MAAOvtB,EAAKqqB,EAAY,6BAA+B,4BACvD+iG,UAAQ,EACRxiH,SAAU2qH,EAAqB,cAC/BnrH,SAAUghH,KAGb/gG,GACCnqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,eACL4I,QAAS9zB,QAAQwxH,EAAYkM,cAC7B3pG,MAAOvtB,EAAK,yBACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,gBAC/BnrH,SAAUghH,KAIf/gG,GACCnqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,eACL4I,QAAS9zB,QAAQwxH,EAAYmM,cAC7B5pG,MAAOvtB,EAAK,yBACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,gBAC/BnrH,SAAUghH,KAIhBlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,iBACL4I,QAAS9zB,QAAQwxH,EAAYzrH,gBAC7BguB,MAAOvtB,EAAKqqB,EAAY,0BAA4B,gCACpD+iG,UAAQ,EACRxiH,SAAU2qH,EAAqB,kBAC/BnrH,SAAUghH,MAGZ/gG,GACAnqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,WACL4I,QAAS9zB,QAAQwxH,EAAYoM,UAC7B7pG,MAAOvtB,EAAK,qBACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,YAC/BnrH,SAAUghH,KAIhBlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,cACL4I,QAAS9zB,QAAQwxH,EAAY8C,aAC7BvgG,MAAOvtB,EAAK,qBACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,eAC/BnrH,SAAUghH,MAGZ/gG,GACAnqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,cACL4I,QAAS9zB,QAAQwxH,EAAY+C,aAC7BxgG,MAAOvtB,EAAK,wBACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,eAC/BnrH,SAAUghH,KAIhBlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,YACL4I,QAAS9zB,QAAQwxH,EAAY4K,WAC7BroG,MAAOvtB,EAAK,sBACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,aAC/BnrH,SAAUghH,KAGdlrH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,aACL4I,QAAS9zB,QAAQwxH,EAAYqM,YAC7B9pG,MAAOvtB,EAAK,2BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,cAC/BnrH,SAAUghH,KAGb7xB,GACCr5F,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,eACL4I,QAAS9zB,QAAQwxH,EAAYiD,cAC7B1gG,MAAOvtB,EAAK,0BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,gBAC/BnrH,SAAUghH,MAId/gG,GACAnqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAK,YACL4I,QAAS9zB,QAAQwxH,EAAYsM,WAC7B/pG,MAAOvtB,EAAK,4BACZotH,UAAQ,EACRxiH,SAAU2qH,EAAqB,aAC/BnrH,SAAUghH,KAKf0J,GACC50H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oBAAoBkG,IAAI,QAClCvG,EAAK,kCAIRqqB,GACAnqB,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRpgC,GAAG,cACH83B,MAAOvtB,EAAK,iBACZoK,SAAU6sH,EACV9sH,MAAOysH,EACPhsH,SAAUkqH,EACV7xF,UAhTkB,KAoTrBjlB,IAAkBs4G,IAAmBxB,IAAwBuB,GAC5Dn2H,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,SAAS+F,QAAM,EAACy0B,aAAW,EAAC99B,QAASg2H,GACjD12H,EAAK,2BAMdE,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASk0C,EACTz7D,QAASisH,EACThpH,UAAW3D,EAAK,QAChB4K,SAAU+pD,GAETA,EACCz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iBAIfg2H,GACAn2H,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQs3H,EACRn3H,QAASq3H,EACTtxH,KAAK,+CACL4mB,aAAcjsB,EAAK,yBACnBksB,eAAgB6qG,EAChBn4F,sBAAoB,IAGpB,K,gBCzUV,MAoMA,IAAe9gC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IACxBshF,aAAcC,GAAqB/hF,EAAO0oB,MAC5C69E,EAAUjmG,GAAMqmB,UAAU4/E,QAC1B8lB,EAAmB/rH,GAAMqmB,UAAU0lG,iBACnChgG,EAAY/rB,IAAQ69C,EAAAA,EAAAA,IAAc79C,IAChCqnB,QAASukC,GAAoBlsD,EAAO0nB,aAAe,CAAC,GAG1D8tD,MAAO1rB,EAAW,eAClBqC,EAAc,cACdK,EAAa,aACbE,IACEl5C,EAAAA,EAAAA,IAAexT,GAAQo1E,WAErBq7C,EAAmBnwH,IAASA,EAAKk7F,YAAaE,EAAAA,EAAAA,IAAiBp7F,EAAM,aAE3E,MAAO,CACL2oH,aAAcztH,QAAQ8E,IAAQS,EAAAA,EAAAA,IAAiBT,IAC/Ci5H,sBAAuB/9H,QAAQ8E,GAAQA,EAAKqmB,UAAU4yG,uBACtDhzB,UACA8lB,mBACAtqC,mBACA11D,YACA6/B,kBACApC,cACAs4B,YAAaj2B,EACbK,gBACAE,eACA+jE,mBACAzwG,cAAehgB,EAAOggB,cACvB,GAhCejgB,EApMkCy5H,EACpDh5H,SACAi5H,WACAlzB,UACA8lB,mBACAtqC,mBACA11D,YACAvY,WACA04C,gBACAN,kBACAQ,eACA01B,cACAt4B,cACA9pC,gBACAywG,mBACAxH,eACAsQ,wBACAj4H,UACAgvD,iBACA09D,yBAEA,MAAM,SACJ50F,EAAQ,mBAAEk8C,EAAkB,gBAAE2xC,EAAe,yBAAEyS,IAC7Cj4H,EAAAA,EAAAA,MACEO,GAAOC,EAAAA,EAAAA,KAEPw0B,GAAWp5B,EAAAA,EAAAA,IAAyB,MAEpCqY,GAAerY,EAAAA,EAAAA,IAAuB,OAErCs8H,EAAgBC,IAAqBlyH,EAAAA,EAAAA,MAEtCmyH,GAAW99H,EAAAA,EAAAA,KAAQ,IAChB09H,GAAYpN,EAAmBp0H,OAAOw2D,KAAK49D,GAAoB,IACrE,CAACA,EAAkBoN,IAEhBj4E,GAAYzlD,EAAAA,EAAAA,KAAQ,KAExB,MAAM0sB,GAAYD,EAAAA,EAAAA,MAAYE,MAAM1B,KACpC,IAAKu/E,IAAY99E,EACf,MAAO,GAGT,MAAMd,GAAUw6D,EAAAA,EAAAA,IACdokB,EAAQzkG,KAAI,EAAG2zB,YAAaA,IAC5BhN,EACAs5D,GAGF,OAAO03C,EAAW9xG,EAAQE,QAAQ4N,IAAYokG,EAASniI,SAAS+9B,KAAW9N,CAAO,GACjF,CAAC4+E,EAASxkB,EAAkB03C,EAAUI,IAEnC/5D,GAAe/jE,EAAAA,EAAAA,KAAQ,KAE3B,MAAM0sB,GAAYD,EAAAA,EAAAA,MAAYE,MAAM1B,KAC9BC,GAAYuB,EAAAA,EAAAA,MAAYzB,MAAMC,KAC9B8yG,EAAyBt+H,QAAQsuD,GACjCiwE,EAAaD,EAEd5tE,GAAkBhjC,EAAAA,EAAAA,IAAkBgjC,EAAiBzjC,EAAWqhC,GAAe,GADhFtI,EAGJ,OAAOx4B,EAAAA,EAAAA,KACLT,EAAAA,GAAAA,IAAO,IACFwxG,KACCD,GAAyBptE,GAAqB,MAC9CotE,GAAyBttE,GAAsB,KAClD3kC,QAAQ8tD,IACT,MAAMj2D,EAAO+I,EAAUktD,GACvB,OAAKj2D,IAIG2M,GAAa3M,EAAKgjE,uBAAwBC,EAAAA,EAAAA,IAAUjjE,OACrD+5G,IAAaI,EAASniI,SAASi+E,GAAW,IAEnD1uD,GACA,EACD,GACA,CAACu6B,EAAW0K,EAAiBpC,EAAa4C,EAAcF,EAAengC,EAAWotG,EAAUI,KAExF12E,EAAaC,IAAWC,EAAAA,GAAAA,QAAkB9oD,EAAWulE,EAActkE,QAAQsuD,IAE5E+6D,GAAoBljH,EAAAA,EAAAA,KAAalK,IACjCgiI,GACFzL,EAAoBv2H,GAAI,GACxB64D,EAAgBq6D,EAAAA,GAAAA,sBAEhB1D,IACA7tF,EAAS,CAAE3hC,OACb,GACC,CAACwvH,EAAiBwS,EAAUzL,EAAoB19D,EAAgBl3B,IAE7D6lC,GAAqBt9D,EAAAA,EAAAA,KAAa0G,IACtCitE,EAAmB,CAAEE,MAAOntE,EAAEgR,OAAOlN,OAAQ,GAC5C,CAACmpE,IACEh8D,GAAgB+1C,EAAAA,GAAAA,GAA0B35C,EAAc5B,GAAWqS,IACnEg9B,GAAeA,EAAY98C,OAAS,GACtCw+G,EAAkB1hE,GAAuB,IAAXh9B,EAAe,EAAIA,GACnD,GACC,oBAAoB,GAEjB6zG,GAAgCr4H,EAAAA,EAAAA,KAAY,KAChDi4H,OAAkBr/H,EAAU,GAC3B,IAEG0/H,GAAiCt4H,EAAAA,EAAAA,KAAY,KACjD+3H,EAAyB,CAAEl5H,SAAQ6N,WAAYkrH,GAAwB,GACtE,CAACA,EAAuB/4H,EAAQk5H,IA8BnC,OA5BAxiH,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IA2BRY,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACZo3H,GAbDv3H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,qBAAqBkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAC5D2H,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRlsB,IAAK8qB,EACLtqB,MAAO29C,EACP19C,SAAU6yD,EACVpY,YAAa7kD,EAAK,aAStBE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACX4mH,GACA/mH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CAAC3lC,KAAK,QAAQ+F,QAAM,EAACrJ,QAASu3H,GACrC/3H,EAAAA,GAAAA,cAAA,YAAOF,EAAK,uBACZE,EAAAA,GAAAA,cAAC8wE,GAAAA,EAAQ,CAACzjD,MAAOvtB,EAAK,sBAAuBstB,QAASiqG,KAExDr3H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBACVL,EAAKu3H,EAAwB,+BAAiC,mCAIrEr3H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACZ8gD,GAAa98C,OACZnE,EAAAA,GAAAA,cAAC0hD,GAAAA,EAAc,CACbvhD,UAAU,4BACVwhD,MAAOic,EACPhc,WAAYV,EACZ82E,gBAAiB1+H,QAAQsuD,GACzBn+C,IAAK+J,EACL65C,UAAWj2C,GAEV6pC,EAAYrhD,KAAKrK,IAChByK,SAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKjP,EACL4K,UAAU,kCAEVK,QAASA,IAAMmiH,EAAkBptH,GACjC2wD,gBAtDgB+xE,EAsDuB1iI,EArD9C0iI,IAAan6G,GAAkBywG,EAA+B,CAAC,CACpEnuH,MAAON,EAAK,iCACZgE,KAAM,OACN+uD,QAASA,KACP6kE,EAAkBO,EAAS,SAJ0B5/H,IAuD3C2H,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CAACrsB,OAAQh+B,EAAIs6D,eAAa,KAxD1D,IAAgCooE,CA0DnB,KAEA/3C,IAAej/B,GAAgBA,EAAY98C,OAO9CnE,EAAAA,GAAAA,cAACg7C,GAAAA,EAAO,MANRh7C,EAAAA,GAAAA,cAACksD,GAAAA,EAAY,CACX0vD,cAAe,EACfp3G,IAAI,gBACJW,KAAMglB,EAAY,uBAAyB,uBAOlDokG,GACCvuH,EAAAA,GAAAA,cAACk4H,GAAAA,EAAiB,CAChBj5H,OAAQ3F,QAAQm+H,GAChBlkG,OAAQkkG,EACRr4H,QAAS04H,IAGT,KC1JV,IAAel6H,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,IACxBwmB,KAAMyB,EAAWq5D,aAAcC,GAAqB/hF,EAAO0oB,MAC7D69E,EAAUjmG,GAAMqmB,UAAU4/E,QAGhC,MAAO,CACLA,UACA99E,YACAs5D,mBACA11D,UANgB/rB,IAAQ69C,EAAAA,EAAAA,IAAc79C,GAOvC,GAZeP,EA7DgDs6H,EAClE5xG,YACAs5D,mBACAwkB,UACAl6E,YACAikC,iBACA09D,qBACA1sH,UACAwS,gBAEAoD,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IAGV,MAAMkgD,GAAYzlD,EAAAA,EAAAA,KAAQ,KACxB,GAAKwqG,GAAY99E,EAIjB,OAAO05D,EAAAA,EAAAA,IACLokB,EAAQ1+E,QAAQs8E,IAAYA,EAAOqsB,UAAS1uH,KAAI,EAAG2zB,YAAaA,IAChEhN,EACAs5D,EACD,GACA,CAACwkB,EAAS99E,EAAWs5D,IAElBssC,GAA6B1sH,EAAAA,EAAAA,KAAaw4H,IAC9CnM,EAAmBmM,GACnB7pE,EAAeq6D,EAAAA,GAAAA,qBAAuC,GACrD,CAACqD,EAAoB19D,IAExB,OACEpuD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAUm0H,eAAa,GACnCh1E,EACCA,EAAU1/C,KAAI,CAACrK,EAAIoqB,IACjB3f,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPjlC,IAAKjP,EACLqmH,cAAej8F,EACfxf,UAAU,kCAEVK,QAASA,IAAM2rH,EAA2B52H,IAE1CyK,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CAACrsB,OAAQh+B,EAAIs6D,eAAa,OAI9C7vD,EAAAA,GAAAA,cAACksD,GAAAA,EAAY,CACX0vD,cAAe,EACfp3G,IAAI,gBACJW,KAAMglB,EAAY,uBAAyB,uBAK/C,K,gBC1CV,MAAMiuG,GAAS,IAEf,SAASC,GAAiBC,EAAuBC,GAC/C,MAAQC,YAAaC,EAAeC,MAAOC,EAAU,EAAG/6G,KAAMg7G,GAAWN,GACjEE,YAAaK,EAAeH,MAAOI,EAAU,EAAGl7G,KAAMm7G,GAAWR,EACzE,OAAIE,GAAiBI,EAAsB5mG,OAAOwmG,GAAiBxmG,OAAO4mG,GACtEF,GAAWG,EAAgBA,EAAUH,EAClCI,EAASH,CAClB,CAEA,MAyWA,IAAeh7H,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAM,QAAE0oH,EAAO,eAAEgS,IAAmB1nH,EAAAA,EAAAA,IAAexT,GAAQ6mH,WAAWl6D,SAASnsD,GACzEF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAGhC,MAAO,CACL+oH,gBAAiBL,EACjBiS,uBAAwBD,EACxB56H,OACA+rB,UANgB/rB,IAAQ69C,EAAAA,EAAAA,IAAc79C,GAOvC,GAXeP,EAzW6Bq7H,EAC/C56H,SACAF,OACAipH,kBACA4R,yBACArnH,WACAuY,YACA/qB,UACAgvD,qBAEA,MAAM,yBACJ+qE,EAAwB,iBACxBrxG,EAAgB,uBAChBsxG,EAAsB,yBACtBC,EAAwB,iCACxBC,EAAgC,oBAChCC,IACEh6H,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MAENy5H,EAA6BC,EAA2BC,IAA8Bh3H,EAAAA,EAAAA,MACtFi3H,EAAoBC,EAAkBC,IAAqBn3H,EAAAA,EAAAA,MAC3Do3H,EAAgBC,IAAqBv0H,EAAAA,EAAAA,OACrCy/G,EAAoBC,EAAkBC,IAAqBziH,EAAAA,EAAAA,MAC3Ds3H,EAAgBC,IAAqBz0H,EAAAA,EAAAA,OACtC,SAAE7C,IAAaC,EAAAA,EAAAA,OAErBoS,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IAGV,MAAM86H,GAAuBrgI,EAAAA,EAAAA,KAAQ,KACnC,GAAKwtH,EACL,OAAOA,EACJrzE,MAAK,EAAGmmF,gBACPA,GAAeA,GAAaC,EAAAA,GAAAA,MAAkBC,GAAAA,GAAsB,KACpE,GACH,CAAChT,IACEnrH,GAAcC,EAAAA,EAAAA,MACpBogC,EAAAA,GAAAA,IAAY,KACVrgC,GAAa,GACZg+H,EAAuB,SAAO7hI,GAEjC,MAAMiiI,GAAmBzgI,EAAAA,EAAAA,KAAQ,IAAMuE,IAAQq2E,EAAAA,EAAAA,IAAgBr2E,IAAO,CAACA,IACjEm8H,EAAgBlT,GAAiBt/E,MAAK,EAAGywF,iBAAkBA,IAC3DgC,EAAoBF,EAAoB,GAAEjhG,EAAAA,MAAkBihG,IAAqBC,GAAeE,KAChGC,GAAkB7gI,EAAAA,EAAAA,KAAQ,KAC9B,MAAMmtH,EAAU5oH,GAAM4yD,UAAYq2D,EAAkBA,GAAiB1hG,QAAO,EAAG6yG,kBAAmBA,IAClG,OAAOxR,GAASp7D,KAAKysE,GAAiB,GACrC,CAACj6H,GAAM4yD,UAAWq2D,IAOfsT,GAAel7H,EAAAA,EAAAA,KAAasqB,IAChC,MAAM,KACJ0wG,EAAI,MAAEr6H,EAAK,gBAAEgqB,EAAe,WAAE+vG,EAAU,WAAES,GACxC7wG,EACJqvG,EAAuB,CACrB96H,SACAm8H,OACAr6H,QACAgqB,kBACA+vG,aACAS,aACArS,WAAW,GACX,GACD,CAACjqH,EAAQ86H,IAENyB,GAAcp7H,EAAAA,EAAAA,KAAasqB,IAC/BgwG,EAAkBhwG,GAClB6vG,GAAkB,GACjB,CAACA,IAEEkB,GAAer7H,EAAAA,EAAAA,KAAY,KAC1Bq6H,IACLa,EAAab,GACbC,OAAkB1hI,GAClBwhI,IAAmB,GAClB,CAACA,EAAmBc,EAAcb,IAE/BiB,GAAuBt7H,EAAAA,EAAAA,KAAY,KACvC2uD,EAAeq6D,EAAAA,GAAAA,WAA6B,GAC3C,CAACr6D,IAEE4sE,GAAsBv7H,EAAAA,EAAAA,KAAY,KAClC86H,GACFM,EAAYN,EACd,GACC,CAACM,EAAaN,IAEXU,GAAyBx7H,EAAAA,EAAAA,KAAY,KACzC65H,EAAiC,CAAEh7H,WACnCo7H,GAA4B,GAC3B,CAACp7H,EAAQo7H,EAA4BJ,IAElC4B,GAAiBz7H,EAAAA,EAAAA,KAAasqB,IAClCwvG,EAAoB,CAAEj7H,SAAQyrB,WAC9BqkC,EAAeq6D,EAAAA,GAAAA,WAA6B,GAC3C,CAACnqH,EAAQ8vD,EAAgBmrE,IAEtB4B,IAAe17H,EAAAA,EAAAA,KAAasqB,IAChCsvG,EAAyB,CAAE/6H,SAAQm8H,KAAM1wG,EAAO0wG,MAAO,GACtD,CAACn8H,EAAQ+6H,IAEN+B,IAAc37H,EAAAA,EAAAA,KAAasqB,IAC/BkwG,EAAkBlwG,GAClBm7F,GAAkB,GACjB,CAACA,IAEE9+D,IAAe3mD,EAAAA,EAAAA,KAAY,KAC1Bu6H,IACLmB,GAAanB,GACbC,OAAkB5hI,GAClB8sH,IAAmB,GAClB,CAACA,EAAmBgW,GAAcnB,IAE/BqB,IAAW57H,EAAAA,EAAAA,KAAag7H,KAC5B1oE,EAAAA,GAAAA,IAAoB0oE,GACpB3yG,EAAiB,CACf3xB,QAAS2J,EAAK,eACd,GACD,CAACA,EAAMgoB,IAEJwzG,IAA2B77H,EAAAA,EAAAA,KAAY,KAC3C47H,GAASb,EAAmB,GAC3B,CAACa,GAAUb,IAERe,GAAoBxxG,IACxB,MAAM,MACJ2uG,EAAQ,EAAC,WAAEkC,EAAU,WAAET,EAAU,YAAE3B,EAAW,UAAEgD,EAAS,UAAEjT,GACzDx+F,EACJ,IAAI5kB,EAAO,GASX,GAPEA,GADGojH,GAAaqS,GAAclC,EAAQkC,EAC/B96H,EAAK,UAAW86H,EAAalC,GAC3BA,EACF54H,EAAK,eAAgB44H,GAErB54H,EAAK,eAGVyoH,EAEF,OADApjH,GAAS,IAAGizH,MAAUt4H,EAAK,aACpBqF,EAOT,GAJIq2H,IACFr2H,GAAS,IAAGizH,MAAUt4H,EAAK,eAAgB07H,WAG1BnjI,IAAfuiI,GAA4BlC,IAAUkC,EACxCz1H,GAAS,IAAGizH,MAAUt4H,EAAK,2BACtB,GAAIq6H,EAAY,CACrB,MAAMsB,EAAwC,KAAhCtB,GAAaC,EAAAA,GAAAA,OAC3Bj1H,GAAS,IAAGizH,MAEVjzH,GADEs2H,EAAO,EACD37H,EAAK,wBAAwB47H,EAAAA,GAAAA,GAAgB57H,EAAM27H,IAEnD37H,EAAK,qBAEjB,MAAW04H,IACTrzH,GAAS,IAAGizH,MAAUt4H,EAAK,gBAG7B,OAAOqF,CAAI,EAGPw2H,GAAsB5xG,IAC1B,MAAM,MACJ2uG,EAAQ,EAAC,WAAEkC,EAAU,UAAErS,EAAS,WAAE4R,GAChCpwG,EACJ,OAAIw+F,EACK,wBAELqS,GAAclC,EAAQkC,EACjB,yBAELT,GAC4C,KAAhCA,GAAaC,EAAAA,GAAAA,QACf,EACH,uBAGJ,uBAAuB,EAG1BwB,GAAyB7xG,IAC7B,MAAM8xG,EAAU,GA8BhB,OA7BAA,EAAQh4H,KAAK,CACXzD,MAAON,EAAK,QACZgE,KAAM,OACN+uD,QAASA,IAAMwoE,GAAStxG,EAAO0wG,QAG5B1wG,EAAOyuG,aAAgBzuG,EAAOw+F,WACjCsT,EAAQh4H,KAAK,CACXzD,MAAON,EAAK,QACZgE,KAAM,OACN+uD,QAASA,IArJK9oC,KAClBovG,EAAyB,CAAE76H,SAAQyrB,WACnCqkC,EAAeq6D,EAAAA,GAAAA,WAA6B,EAmJzBqT,CAAW/xG,KAIzBA,EAAOw+F,UAQVsT,EAAQh4H,KAAK,CACXzD,MAAON,EAAK,cACZgE,KAAM,SACN+uD,QAASA,IAAMuoE,GAAYrxG,GAC3BuU,aAAa,IAXfu9F,EAAQh4H,KAAK,CACXzD,MAAON,EAAK,gBACZgE,KAAM,SACN+uD,QAASA,IAAMgoE,EAAY9wG,GAC3BuU,aAAa,IAUVu9F,CAAO,EAGVE,IAAyEliI,EAAAA,EAAAA,KAAQ,IAC9E,EAAG0J,YAAWtE,YACnBe,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLmD,OAAK,EACLqG,QAASlH,EACTnG,KAAK,UACL8D,MAAM,cACNH,UAAWlB,EAAS,SAAW,GAC/BuB,QAAS+C,EACTE,UAAU,WAEVzD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGhB,CAACwC,IAEJ,OACE3C,EAAAA,GAAAA,cAAA,OAAKG,UAAU,4BACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAC+4D,GAAAA,EAAY,CACXp1B,OAAQs1B,GAAAA,EAAAA,OACRz8D,KAAMw/H,EAAAA,IACN77H,UAAU,iBAEZH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAA0BL,EAAZqqB,EAAiB,yBAAiC,qBAE9EqwG,GACCx6H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cACQL,EAAlB1B,GAAM4yD,UAAiB,aAAqB,oCAE/ChxD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACbH,EAAAA,GAAAA,cAAA,SACEG,UAAU,kCACV8J,MAAOuwH,EACP5J,UAAQ,EACRpwH,QAAS86H,KAEXt7H,EAAAA,GAAAA,cAACoE,EAAAA,EAAY,CACXjE,UAAU,yBACVkE,QAAS03H,GACTz3H,UAAU,SAEVtE,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,OAAOtD,QAAS86H,IAA2Bx7H,EAAK,UAC7D1B,GAAM4yD,WACNhxD,EAAAA,GAAAA,cAACuE,EAAAA,EAAQ,CAACT,KAAK,SAAStD,QAASw6H,EAAqB18F,aAAW,GAAEx+B,EAAK,mBAI9EE,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACG,QAAS86H,IAA2Bx7H,EAAK,cAGrDE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAUm0H,eAAa,GACpCt0H,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACE,QAAM,EAACiE,IAAI,SAASrE,UAAU,cAAcK,QAASu6H,GAC1Dj7H,EAAK,oBAEL46H,IAAoBA,EAAgBv2H,SAAWnE,EAAAA,GAAAA,cAACksD,GAAAA,EAAY,CAAC/mD,KAAK,iBAAiBX,IAAI,YACzFk2H,GAAiB96H,KAAKmqB,GACrB/pB,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPukC,YAAahuE,EAAAA,GAAAA,cAAA,KAAGG,UAAY,8BAA6Bw7H,GAAmB5xG,OAC5E86B,cAAc,OACdC,WAAS,EAETtkD,QAASA,IAAM06H,EAAenxG,GAC9Bm8B,eAAgB01E,GAAsB7xG,GACtCvlB,IAAKulB,EAAO0wG,MAEZz6H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,sBAAsB4pB,EAAO3pB,OAAS2pB,EAAO0wG,MAC7Dz6H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAWkG,IAAI,QAC5Bk1H,GAAiBxxG,OAIxB/pB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,kBAAkBqE,IAAI,cAAc1E,EAAK,yBAEvDm5H,GAA0B3/H,QAAQ2/H,EAAuB90H,SACxDnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAUm0H,eAAa,GACpCt0H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAAaqE,IAAI,SAAS1E,EAAK,iBAC5CE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACP3lC,KAAK,SACLw6B,aAAW,EACX95B,IAAI,SACJhE,QAASi5H,GAETz5H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAASL,EAAK,2BAE/Bm5H,GAAwBr5H,KAAKmqB,GAC5B/pB,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPukC,YAAahuE,EAAAA,GAAAA,cAAA,KAAGG,UAAY,8BAA6Bw7H,GAAmB5xG,OAC5E86B,cAAc,OACdC,WAAS,EAETtkD,QAASA,IAAM06H,EAAenxG,GAC9Bm8B,eAAgB01E,GAAsB7xG,GACtCvlB,IAAKulB,EAAO0wG,MAEZz6H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,SAAS4pB,EAAO3pB,OAAS2pB,EAAO0wG,MAChDz6H,EAAAA,GAAAA,cAAA,QAAMG,UAAU,WAAWkG,IAAI,QAC5Bk1H,GAAiBxxG,SAO9B/pB,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQu6H,EACRp6H,QAASs6H,EACTt5H,MAAON,EAAK,yBACZqF,KAAMrF,EAAK,4BACX4+B,sBAAoB,EACpB3S,aAAcjsB,EAAK,aACnBksB,eAAgBivG,IAElBj7H,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQ06H,EACRv6H,QAASy6H,EACTz5H,MAAON,EAAK,cACZqF,KAAMrF,EAAK,eACX4+B,sBAAoB,EACpB3S,aAAcjsB,EAAK,gBACnBksB,eAAgB8uG,IAElB96H,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQgmH,EACR7lH,QAAS+lH,EACT/kH,MAAON,EAAK,cACZqF,KAAMrF,EAAK,kBACX4+B,sBAAoB,EACpB3S,aAAcjsB,EAAK,UACnBksB,eAAgBo6B,KAEd,KCrYJ61E,GAAuB,CAAC,EAAG,GAAI,KAC/BC,GAAsB,CAC1BC,KAAM,KACNruG,IAAK,MACLsuG,KAAM,QAEFC,GAA6BH,GAAoBC,KA6OvD,IAAev+H,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAM,cAAEg+H,IAAkBhrH,EAAAA,EAAAA,IAAexT,GAAQ6mH,WAAWl6D,SAASnsD,GAErE,MAAO,CACLg+H,gBACD,GANez+H,EAhO4B0+H,EAC9Cj+H,SACAg+H,gBACA1qH,WACAxS,UACAgvD,qBAEA,MAAM,uBAAEgrE,EAAsB,iBAAEoD,IAAqBj9H,EAAAA,EAAAA,MAE/CO,GAAOC,EAAAA,EAAAA,MACN08H,EAAkBC,EAAcC,IAAiBj6H,EAAAA,EAAAA,MACjD0nB,EAAiBwyG,IAAsBp3H,EAAAA,EAAAA,KAAS,IAChDpF,EAAO+gF,IAAY37E,EAAAA,EAAAA,IAAS,KAC5Bq3H,EAAkBC,IAAuBt3H,EAAAA,EAAAA,IAAiB6Q,KAAKC,MAAQ+lH,KACvEU,EAAsBC,IAA2Bx3H,EAAAA,EAAAA,IAAS,cAC1Dy3H,EAAkBC,IAAuB13H,EAAAA,EAAAA,IAA6B,KACtE23H,EAAqBC,IAA0B53H,EAAAA,EAAAA,IAAS,MACxD63H,EAAiBC,IAAsB93H,EAAAA,EAAAA,KAAS,IAEvDwP,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,KAGV/D,EAAAA,EAAAA,IAAc,EAAEkiI,MACd,GAAIA,IAAqBjB,EACzB,GAAKA,EAOE,CACL,MACEl8H,MAAOo9H,EAAY,WAAE5C,EAAU,WAAET,EAAY/vG,gBAAiBqzG,GAC5DnB,EAMJ,GALIkB,GAAcr8C,EAASq8C,GACvB5C,IACFwC,EAAuBnB,GAAqBzmI,SAASolI,GAAcA,EAAWtyF,WAAa,UAC3F40F,EAAoBtC,IAElBT,EAAY,CACd,MAAMuD,GAActD,EAAAA,GAAAA,MAAkBiC,GACtCW,EAAwB,UACxBF,EAAwD,IAApC94H,KAAK+E,IAAIoxH,EAAYuD,GAC3C,CACID,GACFb,GAAmB,EAEvB,MAvBEz7C,EAAS,IACT67C,EAAwB,aACxBI,EAAuB,KACvBN,EAAsC,KAAlB1C,EAAAA,GAAAA,MAAyBiC,IAC7Ca,EAAoB,IACpBN,GAAmB,EAkBrB,GACC,CAACN,IAEJ,MAAMqB,GAAwBl+H,EAAAA,EAAAA,KAAa0G,IACzCy2H,EAAmBz2H,EAAEgR,OAAOiW,QAAQ,GACnC,IAEGu0D,GAAoBliF,EAAAA,EAAAA,KAAa0G,IACrCg7E,EAASh7E,EAAEgR,OAAOlN,MAAM,GACvB,IAEG2zH,GAA+Bn+H,EAAAA,EAAAA,KAAa0G,IAChD+2H,EAAoBjrG,OAAOi/D,SAAS/qF,EAAEgR,OAAOlN,MAAO,IAAI,GACvD,IAEG4zH,GAAyBp+H,EAAAA,EAAAA,KAAame,IAC1Ck/G,EAAoBl/G,EAAK4S,WACzBmsG,GAAe,GACd,CAACA,IAEEmB,GAAkBr+H,EAAAA,EAAAA,KAAY,KAClC69H,GAAmB,GACnB,MAAM1C,EAAqC,WAAxBuC,EAAmCF,EAAmBhrG,OAAOkrG,GAChF,IAAIhD,EACJ,OAAQ4C,GACN,IAAK,SACH5C,GAAaC,EAAAA,GAAAA,OAAmByC,EAAmBxmH,KAAKC,OAAS,IACjE,MACF,IAAK,OACL,IAAK,MACL,IAAK,OACH6jH,GAAaC,EAAAA,GAAAA,MAAkB8B,GAAoBa,GAAwB,IAC3E,MACF,IAAK,YACH5C,EAAa,EACb,MACF,QACEA,OAAa9hI,EAGbikI,EACFlD,EAAuB,CACrBqB,KAAM6B,EAAc7B,KACpBn8H,SACA8B,QACAgqB,kBACA+vG,aACAS,eAGF4B,EAAiB,CACfl+H,SACA8B,QACAgqB,kBACA+vG,aACAS,eAGJxsE,EAAeq6D,EAAAA,GAAAA,QAA0B,GACxC,CACDnqH,EAAQu+H,EAAkBI,EAAkB7D,EAAwBkD,EACpEE,EAAkBpyG,EAAiB2yG,EAAsBI,EAAqB/8H,EAAOguD,IAGvF,OACEpuD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,2BACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,qBACZo/D,SAAUp/D,EAAK,gCACfstB,QAAShD,EACTlgB,SAAUyzH,KAGd39H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRx1B,UAAU,YACVwkD,YAAa7kD,EAAK,gBAClBmK,MAAO7J,EACP8J,SAAUy3E,IAEZ3hF,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAAmBL,EAAK,kBAEvCE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBAAkBL,EAAK,kBACtCE,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACT77C,KAAK,gBACLsjB,QAAS,CACP,CACE79B,MAAO,OACPojB,MAAOvtB,EAAK,QAAS,IAEvB,CACEmK,MAAO,MACPojB,MAAOvtB,EAAK,OAAQ,IAEtB,CACEmK,MAAO,OACPojB,MAAOvtB,EAAK,QAAS,IAEvB,CACEmK,MAAO,YACPojB,MAAOvtB,EAAK,YAEd,CACEmK,MAAO,SACPojB,MAAOvtB,EAAK,oCAGhBoK,SAAU8yH,EACV18D,SAAUy8D,IAEc,WAAzBA,GACC/8H,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,eAAeI,QAAM,EAACC,QAASk8H,IAC9Cte,EAAAA,GAAAA,IAAet+G,EAAM+8H,GAAkB,KAAElrG,EAAAA,GAAAA,IAAW7xB,EAAM+8H,IAG/D78H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAAmBL,EAAK,oBAErCsqB,GACApqB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBAAkBL,EAAK,sBACtCE,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACT77C,KAAK,eACLsjB,QAAS,IACJm0F,GAAqBr8H,KAAKm+H,IAAC,CAAQ9zH,MAAO8zH,EAAEz1F,WAAYjb,MAAO0wG,MAClE,CACE9zH,MAAO,IACPojB,MAAOvtB,EAAK,YAEd,CACEmK,MAAO,SACPojB,MAAOvtB,EAAK,mCAGhBoK,SAAUkzH,EACV98D,SAAU68D,IAEa,WAAxBA,GACCn9H,EAAAA,GAAAA,cAAA,SACEG,UAAU,2BACVyB,KAAK,SACLoH,IAAI,IACJD,IAAI,QACJkB,MAAOgzH,EACP/yH,SAAU0zH,IAGd59H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,mBAAmBL,EAAK,mBAGzCE,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,SAAO,EACPvnB,QAASs9H,EACTpzH,SAAU2yH,EACV55H,UAA2B3D,EAAhBw8H,EAAqB,WAAmB,eAEnDt8H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,iBAGjBH,EAAAA,GAAAA,cAACyuB,GAAa,CACZxvB,OAAQw9H,EACR5tG,cAAY,EACZE,gBAAc,EACd3vB,QAASu9H,EACTztG,SAAU2uG,EACVnvG,WAAYmuG,EACZ7tG,kBAAmBlvB,EAAK,UAEtB,KCrFV,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAEhC,MAAO,CACLkpF,iBAAkBppF,EAAKqmB,UAAU+iE,iBACjCvnC,mBAAoBniD,EAAOmiD,mBAC3B7hD,OACD,GAReP,EAhJ+BmgI,EACjD/9E,qBACAunC,mBACAppF,OACAwT,WACAxS,cAEA,MAAM,wBAAE6+H,IAA4B1+H,EAAAA,EAAAA,MAE9BO,GAAOC,EAAAA,EAAAA,MACNk8D,EAAWq6D,IAAgB9wH,EAAAA,EAAAA,KAAS,IACpCivD,EAAW8tD,IAAgB/8G,EAAAA,EAAAA,KAAS,IACpC04H,EAAuBC,IAA4B34H,EAAAA,EAAAA,IAAuCgiF,IAEjGxyE,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IAGV,MAAMg/H,GAAmBvkI,EAAAA,EAAAA,KAAQ,IAAM,CAAC,CACtCoQ,MAAO,MACPojB,MAAOvtB,EAAK,iBACX,CACDmK,MAAO,OACPojB,MAAOvtB,EAAK,kBACX,CACDmK,MAAO,OACPojB,MAAOvtB,EAAK,kBACV,CAACA,IAECu+H,GAAsB5+H,EAAAA,EAAAA,KAAY,KACjCrB,IACLmkH,GAAa,GAEb0b,EAAwB,CACtB3/H,OAAQF,EAAK7I,GACbiyF,iBAAkB02C,IAClB,GACD,CAAC9/H,EAAM8/H,EAAuBD,KAEjC5hI,EAAAA,EAAAA,KAAU,KACRkmH,GAAa,GACb+T,GAAa,GACb6H,EAAyB32C,EAAiB,GACzC,CAACA,IAEJ,MAAM82C,GAA2BzkI,EAAAA,EAAAA,KAC/B,IAAMomD,GAAoBt6B,QAAO,EAAG00D,iBAAkBA,KACtD,CAACp6B,IAGGs+E,GAA8B9+H,EAAAA,EAAAA,KAAawK,IAE7Ck0H,EADY,QAAVl0H,EACuB,CAAErI,KAAM,OACd,SAAVqI,EACgB,CACvBrI,KAAM,OACNgoH,QAAoC,SAA3BpiC,GAAkB5lF,KAAkB4lF,EAAiBoiC,QAAU,SAGjDvxH,GAE3Bi+H,GAAa,EAAK,GACjB,CAAC9uC,IAEEg3C,GAAuB/+H,EAAAA,EAAAA,KAAa0G,IACxC,IAAK/H,IAASkgI,EAA0B,OAExC,MAAM,KAAE95G,EAAI,QAAE4I,GAAYjnB,EAAEqJ,cAC5B,GAAoC,SAAhC0uH,GAAuBt8H,KAAiB,CAC1C,MAAMk/C,EAAW,CAAEw5B,SAAU91D,GAE3B25G,EADE/wG,EACuB,CACvBxrB,KAAM,OACNgoH,QAAS,IAAIsU,EAAsBtU,QAAS9oE,IAGrB,CACvBl/C,KAAM,OACNgoH,QAASsU,EAAsBtU,QAAQjkG,QAAQ84G,KAAWz9E,EAAAA,EAAAA,IAAey9E,EAAO39E,MAGtF,CACAw1E,GAAa,EAAK,GACjB,CAACgI,EAA0BlgI,EAAM8/H,IACpC,OACEl+H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,mBACXL,EAAK,uBAERE,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACTC,SAAU49D,GAAuBt8H,MAAQ,OACzC4iB,KAAK,YACLsjB,QAASs2F,EACTl0H,SAAUq0H,IAEZv+H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,qBACsB,QAAhC+9H,GAAuBt8H,MAAkB9B,EAAK,0BACd,SAAhCo+H,GAAuBt8H,MAAmB9B,EAAK,4BAC9Co+H,GAAyBp+H,EAAK,0BAGH,SAAhCo+H,GAAuBt8H,MACtB5B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,mBACXL,EAAK,uBAEPw+H,GAA0B1+H,KAAI,EAAGkhD,WAAU1gD,WAC1CJ,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBACbH,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACP3I,KAAMs8B,EAASw5B,SACfltD,QAAS8wG,GAAuBtU,QAAQ51E,MAAM+M,IAAMC,EAAAA,EAAAA,IAAeF,EAAUC,KAC7E1zB,MACErtB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YACbH,EAAAA,GAAAA,cAACyhD,GAAAA,EAAmB,CAACX,SAAUA,EAAUb,mBAAoBA,IAC5D7/C,GAGL8J,SAAUs0H,SAQtBx+H,EAAAA,GAAAA,cAACu1D,GAAAA,EAAoB,CACnBxtC,QAASk0C,EACTz7D,QAAS69H,EACT56H,UAAW3D,EAAK,QAChB4K,SAAU+pD,GAETA,EACCz0D,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAEfN,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAGb,KCMV,IAAevC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAM,WAAEogI,IAAeptH,EAAAA,EAAAA,IAAexT,GAAQ6mH,WAAWl6D,SAASnsD,IAC5D,OAAEyrB,EAAM,UAAE40G,EAAS,WAAEC,GAAeF,GAAc,CAAC,EACnDtgI,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAGhC,MAAO,CACLyrB,SACA40G,YACAC,aACAz0G,UANgB/rB,IAAQ69C,EAAAA,EAAAA,IAAc79C,GAOvC,GAZeP,EAlJgCghI,EAClDvgI,SACAyrB,SACA40G,YACAC,aACAz0G,YACAvY,WACAxS,cAEA,MAAM,iBACJ0oB,EAAgB,wBAChBg3G,EAAuB,yBACvBC,EAAwB,SACxB7nG,IACE33B,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MACP,MACJ24H,EAAQ,EAAC,WAAEkC,EAAU,KAAEH,EAAI,QAAEuE,GAC3Bj1G,GAAU,CAAC,EACTowG,EAAapwG,GAAQowG,YAAsD,KAAvCpwG,EAAOowG,YAAaC,EAAAA,GAAAA,OAA0B/jH,KAAKC,MACvF2oH,GAAcl1G,GAAQowG,YAAc,IAAKC,EAAAA,GAAAA,MAAmB,GAElE/9H,EAAAA,EAAAA,KAAU,KACJo+H,IACFqE,EAAwB,CAAExgI,SAAQm8H,SAClCsE,EAAyB,CAAEzgI,SAAQm8H,SACrC,GACC,CAACn8H,EAAQm8H,EAAMqE,EAAyBC,IAE3C,MAAMG,GAAoBz/H,EAAAA,EAAAA,KAAY,MACpCsyD,EAAAA,GAAAA,IAAoBhoC,EAAQ0wG,MAC5B3yG,EAAiB,CACf3xB,QAAS2J,EAAK,eACd,GACD,CAACiqB,EAAQjqB,EAAMgoB,IA6DlB,OA3DA9S,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,IA0DRY,EAAAA,GAAAA,cAAA,OAAKG,UAAU,+BACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACX4pB,GACA/pB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cAAcL,EAAK,YAEjCiqB,GACC/pB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,MAAIG,UAAU,cAAc4pB,EAAO3pB,OAAS2pB,EAAO0wG,MACnDz6H,EAAAA,GAAAA,cAAA,SACEG,UAAU,eACV8J,MAAO8f,EAAO0wG,KACd7J,UAAQ,EACRpwH,QAAS0+H,IAEXl/H,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,YAAYK,QAAS0+H,GAAoBp/H,EAAK,aAC/DxG,QAAQ6gI,IACPn6H,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cACV8+H,EACGn/H,EAAK,eACLA,EAAK,gBAAkB,IAAEs+G,EAAAA,GAAAA,IAAet+G,EAAMq6H,OAAexoG,EAAAA,GAAAA,IAAW7xB,EAAMq6H,QAIvF6E,GACCh/H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,SAAIF,EAAK,mBACTE,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,6CAEVK,QAASA,IAAM02B,EAAS,CAAE3hC,GAAIypI,KAE9Bh/H,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CACdrsB,OAAQyrG,EACRvoG,QAAQ9Y,EAAAA,GAAAA,IAAoB7d,EAAoB,IAAdiqB,EAAOnM,MAAa,GACtDiyC,eAAa,MA1FPsvE,MACtB,GAAKR,GAAWx6H,SAAUy6H,GAAYz6H,OACtC,OAAKw6H,EAEH3+H,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,SAAI2+H,EAAUx6H,OAASrE,EAAK,eAAgB44H,GAAS54H,EAAK,gBAC1DE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eACTw+H,EAAUx6H,SACVy2H,EAAa96H,EAAK,4BAA6B86H,EAAalC,GAAS54H,EAAK,mBAE3E6+H,EAAU/+H,KAAKw/H,GACdp/H,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,6CAEVK,QAASA,IAAM02B,EAAS,CAAE3hC,GAAI6pI,EAAS7rG,UAEvCvzB,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CACdrsB,OAAQ6rG,EAAS7rG,OACjBkD,QAAQ9Y,EAAAA,GAAAA,IAAoB7d,EAAsB,IAAhBs/H,EAASxhH,MAAa,GACxDiyC,eAAa,SAjBF7vD,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,KAsBvB,EAuECwsH,GAnEcE,MACvB,IAAIt1G,GAAQw+F,UAAZ,CACA,IAAKqW,GAAcD,EAAW,OAAO3+H,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,MAC7C,GAAKisH,GAAYz6H,OACjB,OACEnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAA,SAAgBF,EAAZqqB,EAAiB,oBAA4B,mBACjDnqB,EAAAA,GAAAA,cAAA,KAAGG,UAAU,cACVy+H,EAAWh/H,KAAK0/H,GACft/H,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPtpC,UAAU,6CAEVK,QAASA,IAAM02B,EAAS,CAAE3hC,GAAI+pI,EAAU/rG,UAExCvzB,EAAAA,GAAAA,cAAC4/C,GAAAA,EAAe,CACdrsB,OAAQ+rG,EAAU/rG,OAClBkD,QAAQ9Y,EAAAA,GAAAA,IAAoB7d,EAAuB,IAAjBw/H,EAAU1hH,MAAa,GACzDiyC,eAAa,QAhBc,CAqB/B,EA8CCwvE,KAIH,KChFV,IAAezhI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUy1B,aAGF,CACL/V,MAHW9e,EAAAA,EAAAA,IAAWZ,EAAQy1B,GAI9B1hB,eAAgB/T,EAAO2e,SAASC,MAAM7K,kBANxBhU,EA9D2B0hI,EAC7ChsG,SACAj1B,SACA2rB,QACArM,OACAuM,YACA3M,OACA3L,qBAEA,MAAM,SAAEqlB,EAAQ,oBAAEsoG,IAAwBjgI,EAAAA,EAAAA,MAEpC2G,GAAiBwgF,EAAAA,GAAAA,GAAuB,eACxC5mF,GAAOC,EAAAA,EAAAA,KAEP0/H,GAAWnyG,EAAAA,EAAAA,IAAgB9P,GAC3BkiH,EAAuC,KAA1B9hH,GAAOw8G,EAAAA,GAAAA,OAA0B/jH,KAAKC,MAEnDqpH,GAAaC,EAAAA,GAAAA,IAAQ,IAAIvpH,KAAKqpH,KAChC/tG,EAAAA,GAAAA,IAAW7xB,EAAM4/H,IAAaG,EAAAA,GAAAA,IAAgB//H,EAAM4/H,GAAW,GAAM,GAAO,GAM1EI,GAAsBrgI,EAAAA,EAAAA,KAAY,KACtC+/H,EAAoB,CAAElhI,SAAQi1B,SAAQwsG,YAAY,GAAO,GACxD,CAACzhI,EAAQkhI,EAAqBjsG,IAE3BysG,GAAsBvgI,EAAAA,EAAAA,KAAY,KACtC+/H,EAAoB,CAAElhI,SAAQi1B,SAAQwsG,YAAY,GAAQ,GACzD,CAACzhI,EAAQkhI,EAAqBjsG,IAEjC,OACEvzB,EAAAA,GAAAA,cAAA,OAAKG,UAAW+F,EAAe,MAC7BlG,EAAAA,GAAAA,cAAA,OAAKG,UAAW+F,EAAe,QAC7BlG,EAAAA,GAAAA,cAAA,OAAKG,UAAW+F,EAAe,QAAS1F,QAftBy/H,KACtB/oG,EAAS,CAAE3hC,GAAIg+B,GAAS,GAelBvzB,EAAAA,GAAAA,cAACud,GAAAA,EAAM,CACL/Y,IAAK+uB,EACL/2B,KAAK,SACLghB,KAAMA,EACN3L,eAAgBA,EAChB4L,WAAS,IAEXzd,EAAAA,GAAAA,cAAA,OAAKG,UAAW+F,EAAe,cAC7BlG,EAAAA,GAAAA,cAAA,OAAKG,UAAW+F,EAAe,cAAeu5H,GAC9Cz/H,EAAAA,GAAAA,cAAA,OAAKG,UAAW+F,EAAe,kBAAmB+jB,KAGtDjqB,EAAAA,GAAAA,cAAA,OAAKG,UAAW+F,EAAe,SAAUy5H,IAE3C3/H,EAAAA,GAAAA,cAAA,OAAKG,UAAW+F,EAAe,YAC7BlG,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAW+F,EAAe,UAAW1F,QAASs/H,GACvChgI,EAAZqqB,EAAiB,sBAA8B,sBAElDnqB,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAW+F,EAAe,UAAW3F,QAAM,EAACC,QAASw/H,GAC1DlgI,EAAK,oBAGN,KCiCV,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAClB,CAACC,GAAUQ,aACT,MAAMF,GAAOC,EAAAA,EAAAA,IAAWP,EAAQQ,GAEhC,MAAO,CACLF,OACA+rB,UAAW/rB,IAAQ69C,EAAAA,EAAAA,IAAc79C,GAClC,GAPeP,EA7FkCqiI,EACpD9hI,OACAE,SACAsT,WACAuY,YACA/qB,cAEA,MAAM,wBAAE+gI,EAAuB,qBAAEpY,IAAyBxoH,EAAAA,EAAAA,OACnD6gI,EAAuBC,EAAqBC,IAAwB59H,EAAAA,EAAAA,MACpE69H,EAAuBC,EAAqBC,IAAwB/9H,EAAAA,EAAAA,KAErE5C,GAAOC,EAAAA,EAAAA,MAEbiV,EAAAA,GAAAA,GAAe,CACbpD,WACAqD,OAAQ7V,KAGV/C,EAAAA,EAAAA,KAAU,KACH+B,GAAMosH,eAAiBhsH,EAAAA,EAAAA,IAASF,IACnCypH,EAAqB,CAAEzpH,UACzB,GACC,CAACF,EAAME,EAAQypH,IAElB,MAAM2Y,GAA0BjhI,EAAAA,EAAAA,KAAY,KAC1C0gI,EAAwB,CAAE7hI,SAAQyhI,YAAY,IAC9CO,GAAsB,GACrB,CAACH,EAAyB7hI,EAAQgiI,IAE/BK,GAA0BlhI,EAAAA,EAAAA,KAAY,KAC1C0gI,EAAwB,CAAE7hI,SAAQyhI,YAAY,IAC9CU,GAAsB,GACrB,CAACN,EAAyB7hI,EAAQmiI,IAErC,OACEzgI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,GAAAA,cAAC+4D,GAAAA,EAAY,CACXp1B,OAAQs1B,GAAAA,EAAAA,YACRz8D,KAAMokI,EAAAA,IACNzgI,UAAU,iBAEX7G,QAAQ8E,GAAMosH,cAAcrmH,SAC3BnE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,qBAAqBK,QAAS6/H,GAAqB,cACrErgI,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACF,UAAU,qBAAqBK,QAASggI,EAAqBjgI,QAAM,GAAC,iBAIlFP,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UAAUm0H,eAAa,GACpCt0H,EAAAA,GAAAA,cAAA,KAAGwE,IAAI,SACHpG,GAAMosH,aAAiCpsH,EAAKosH,aAAarmH,OACvDrE,EAAK,eAAgB1B,EAAKosH,aAAarmH,QAAUrE,EAAK,oBADnCA,EAAK,aAG5B1B,GAAMosH,cACNxqH,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACnO,IAAI,YAEiB,IAA/BpG,GAAMosH,cAAcrmH,QACnBnE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,aAAaqE,IAAI,SACf1E,EAAZqqB,EAAiB,iCAAyC,gCAG9D/rB,GAAMosH,cAAc5qH,KAAI,EAAG2zB,SAAQtJ,QAAOrM,UACzC5d,EAAAA,GAAAA,cAACu/H,GAAW,CACVhsG,OAAQA,EACRtJ,MAAOA,EACPrM,KAAMA,EACNuM,UAAWA,EACX7rB,OAAQA,EACRkG,IAAK+uB,QAKbvzB,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQmhI,EACRhhI,QAASkhI,EACTlgI,MAAM,uBACN+E,KAAK,gDACL6mB,eAAgB00G,IAElB1gI,EAAAA,GAAAA,cAAC8rB,GAAAA,EAAa,CACZ7sB,OAAQshI,EACRnhI,QAASqhI,EACTrgI,MAAM,uBACN+E,KAAK,gDACL6mB,eAAgB20G,IAEd,KCsKV,IAAe/iI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAGQ,CACL+iI,gBAHqBC,EAAAA,EAAAA,IAA4BhjI,MAFnCD,EAnP0BkjI,EAC5CziI,SACA2vD,gBACA6mE,uBACAH,0BACAvmE,iBACA09D,qBACA1sH,UACAwS,WACAivH,qBAEA,OAAQ5yE,GACN,KAAKw6D,EAAAA,GAAAA,QACH,OAAQoY,GACN,IAAK,OACH,OACE7gI,EAAAA,GAAAA,cAAC4kH,GAAU,CACTpgH,IAAKlG,EACLi1B,OAAQj1B,EACRc,QAASA,EACTwS,SAAUA,IAGhB,IAAK,QACH,OACE5R,EAAAA,GAAAA,cAACunH,GAAW,CACV/iH,IAAKlG,EACLA,OAAQA,EACR8vD,eAAgBA,EAChBhvD,QAASA,EACTwS,SAAUA,GAAY,CACpB62G,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACAjzH,SAASy4D,KAGjB,IAAK,UACH,OACEjuD,EAAAA,GAAAA,cAACovH,GAAa,CACZ5qH,IAAKlG,EACLA,OAAQA,EACR8vD,eAAgBA,EAChBhvD,QAASA,EACTwS,SAAUA,GAAY,CACpB62G,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACAjzH,SAASy4D,KAKnB,MAGF,KAAKw6D,EAAAA,GAAAA,gBACH,OACEzoH,EAAAA,GAAAA,cAAC+wH,GAAqB,CACpBzyH,OAAQA,EACRsT,SAAUA,EACVxS,QAASA,IAIf,KAAKqpH,EAAAA,GAAAA,WACH,OACEzoH,EAAAA,GAAAA,cAAC8yH,GAAgB,CACfx0H,OAAQA,EACR8vD,eAAgBA,EAChBx8C,SAAUA,EACVxS,QAASA,IAIf,KAAKqpH,EAAAA,GAAAA,iBACH,OACEzoH,EAAAA,GAAAA,cAAC6rH,GAAsB,CACrBvtH,OAAQA,EACR8vD,eAAgBA,EAChB09D,mBAAoBA,EACpBl6G,SAAUA,GAAY,CACpB62G,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,sBACAjzH,SAASy4D,GACX7uD,QAASA,IAIf,KAAKqpH,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACH,OACEzoH,EAAAA,GAAAA,cAACwuH,GAAsB,CACrBlwH,OAAQA,EACRsT,SAAUA,EACVxS,QAASA,IAIf,KAAKqpH,EAAAA,GAAAA,2BACH,OACEzoH,EAAAA,GAAAA,cAACm4H,GAAgC,CAC/B75H,OAAQA,EACRwtH,mBAAoBA,EACpB19D,eAAgBA,EAChBx8C,SAAUA,GAAY,CACpB62G,EAAAA,GAAAA,sBACAjzH,SAASy4D,GACX7uD,QAASA,IAIf,KAAKqpH,EAAAA,GAAAA,qBACH,OACEzoH,EAAAA,GAAAA,cAAC60H,GAA0B,CACzBv2H,OAAQA,EACRw2H,qBAAsBA,EACtBH,wBAAyBA,EACzBvmE,eAAgBA,EAChBx8C,SAAUA,EACVxS,QAASA,IAIf,KAAKqpH,EAAAA,GAAAA,mBACH,OACEzoH,EAAAA,GAAAA,cAACs1H,GAAwB,CACvBh3H,OAAQA,EACR8vD,eAAgBA,EAChB09D,mBAAoBA,EACpBl6G,SAAUA,GAAY,CACpB62G,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,oBACAjzH,SAASy4D,GACX7uD,QAASA,IAIf,KAAKqpH,EAAAA,GAAAA,mBACH,OACEzoH,EAAAA,GAAAA,cAACg2H,GAAwB,CACvB13H,OAAQA,EACRsT,SAAUA,EACVxS,QAASA,IAIf,KAAKqpH,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACH,OACEzoH,EAAAA,GAAAA,cAACk2H,GAAsB,CACrB53H,OAAQA,EACR63H,WAAYloE,IAAkBw6D,EAAAA,GAAAA,mBAC9B2N,eAAgBtB,EAChBH,wBAAyBA,EACzBvmE,eAAgBA,EAChBx8C,SAAUA,EACVxS,QAASA,IAIf,KAAKqpH,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACH,OACEzoH,EAAAA,GAAAA,cAACs3H,GAAkB,CACjBh5H,OAAQA,EACRsT,SAAUA,EACVxS,QAASA,IAGf,KAAKqpH,EAAAA,GAAAA,QACH,OACEzoH,EAAAA,GAAAA,cAACk5H,GAAa,CACZ56H,OAAQA,EACRsT,SAAUA,EACVxS,QAASA,EACTgvD,eAAgBA,IAGtB,KAAKq6D,EAAAA,GAAAA,WACH,OACEzoH,EAAAA,GAAAA,cAACu8H,GAAY,CACXj+H,OAAQA,EACRsT,SAAUA,EACVxS,QAASA,EACTgvD,eAAgBA,IAGtB,KAAKq6D,EAAAA,GAAAA,eACH,OACEzoH,EAAAA,GAAAA,cAACs3H,GAAkB,CACjBh5H,OAAQA,EACRi5H,UAAQ,EACR3lH,SAAUA,EACVxS,QAASA,EACTgvD,eAAgBA,EAChB09D,mBAAoBA,IAI1B,KAAKrD,EAAAA,GAAAA,UACH,OACEzoH,EAAAA,GAAAA,cAACg+H,GAAe,CACd1/H,OAAQA,EACRsT,SAAUA,EACVxS,QAASA,IAGf,KAAKqpH,EAAAA,GAAAA,WACH,OACEzoH,EAAAA,GAAAA,cAAC6+H,GAAgB,CACfvgI,OAAQA,EACRsT,SAAUA,EACVxS,QAASA,IAGf,KAAKqpH,EAAAA,GAAAA,aACH,OACEzoH,EAAAA,GAAAA,cAACkgI,GAAkB,CACjB5hI,OAAQA,EACRsT,SAAUA,EACVxS,QAASA,IAKD,KC3RZ4hI,GAAO,OACPC,GAAc,UACdC,GAAc,eACdC,GAAM,YAEL,IAAKC,GAAQ,SAARA,GAAQ,OAARA,EAAAA,EAAQ,qBAARA,EAAAA,EAAQ,eAARA,EAAAA,EAAQ,2BAARA,EAAAA,EAAQ,aAARA,CAAQ,MAOpB,MAAMC,GAAgC,CACpC,CAACD,GAASE,SAAU,GACpB,CAACF,GAASG,MAAO,OACjB,CAACH,GAASI,YAAa,aACvB,CAACJ,GAASK,KAAM,OAGX,SAASC,GAAeC,GAE7B,OADAA,EAAaA,EAAW5vG,QAAQ,MAAO,IACnCivG,GAAK1Q,KAAKqR,GACLP,GAASG,KAEdJ,GAAI7Q,KAAKqR,GACJP,GAASK,IAEdR,GAAY3Q,KAAKqR,IAAeT,GAAY5Q,KAAKqR,GAC5CP,GAASI,WAEXJ,GAASE,OAClB,CCKA,MAAM9zE,GAA2B,CAC/Bo0E,YAAa,GACbC,YAAa,GACbC,KAAM,GACNh0E,MAAO,GACPi0E,YAAa,GACbC,SAAU,GACVvC,SAAU,GACV7xE,MAAO,GACPh5B,MAAO,GACPqtG,SAAU,GACVN,WAAY,GACZO,WAAY,GACZC,OAAQ,GACRC,IAAK,GACLC,eAAgB,GAChBC,WAAY,GACZC,UAAU,EACVC,iBAAiB,EACjBC,WAAY,CAAC,EACbC,UAAW,EACXC,kBAAmB,IAGfC,GAAgDA,CAAC90E,EAAOx7C,KAC5D,OAAQA,EAAO1Q,MACb,IAAK,iBACH,MAAO,IACFksD,EACH8zE,YAAatvH,EAAOy7C,QACpB00E,WAAY,IACP30E,EAAM20E,WACTb,iBAAavpI,IAGnB,IAAK,iBACH,MAAO,IACFy1D,EACH+zE,YAAavvH,EAAOy7C,QACpB00E,WAAY,IACP30E,EAAM20E,WACTZ,iBAAaxpI,IAGnB,IAAK,aACH,MAAO,IACFy1D,EACHg0E,KAAMxvH,EAAOy7C,QACb00E,WAAY,IACP30E,EAAM20E,WACTX,UAAMzpI,IAGZ,IAAK,cACH,MAAO,IACFy1D,EACHA,MAAOx7C,EAAOy7C,QACd00E,WAAY,IACP30E,EAAM20E,WACT30E,WAAOz1D,IAGb,IAAK,gBACH,MAAO,IACFy1D,EACHi0E,YAAazvH,EAAOy7C,QAAQ80E,KAC5BR,eAAgB/vH,EAAOy7C,QAAQ+0E,YAC/BL,WAAY,IACP30E,EAAM20E,WACTV,iBAAa1pI,IAGnB,IAAK,iBACH,MAAO,IACFy1D,EACHk0E,SAAU1vH,EAAOy7C,QACjB00E,WAAY,IACP30E,EAAM20E,WACTT,cAAU3pI,IAGhB,IAAK,iBACH,MAAO,IACFy1D,EACH2xE,SAAUntH,EAAOy7C,QACjB00E,WAAY,IACP30E,EAAM20E,WACThD,cAAUpnI,IAGhB,IAAK,cACH,MAAO,IACFy1D,EACHF,MAAOt7C,EAAOy7C,QACd00E,WAAY,IACP30E,EAAM20E,WACT70E,WAAOv1D,IAGb,IAAK,cACH,MAAO,IACFy1D,EACHl5B,MAAOtiB,EAAOy7C,QACd00E,WAAY,IACP30E,EAAM20E,WACT7tG,WAAOv8B,IAGb,IAAK,iBACH,MAAO,IAAKy1D,EAAOm0E,SAAU3vH,EAAOy7C,SACtC,IAAK,mBACH,MAAO,IACFD,EACH6zE,WAAYrvH,EAAOy7C,QACnB00E,WAAY,IACP30E,EAAM20E,WACTd,gBAAYtpI,IAGlB,IAAK,mBACH,MAAO,IACFy1D,EACHo0E,WAAY5vH,EAAOy7C,QACnB00E,WAAY,IACP30E,EAAM20E,WACTP,gBAAY7pI,IAGlB,IAAK,mBACH,MAAO,IACFy1D,EACHq0E,OAAQ7vH,EAAOy7C,QACf00E,WAAY,IACP30E,EAAM20E,WACTN,YAAQ9pI,IAGd,IAAK,gBACH,MAAO,IACFy1D,EACHs0E,IAAK9vH,EAAOy7C,QACZ00E,WAAY,IACP30E,EAAM20E,WACTL,SAAK/pI,IAGX,IAAK,uBACH,MAAO,IACFy1D,EACHu0E,eAAgB/vH,EAAOy7C,QACvB00E,WAAY,IACP30E,EAAM20E,WACTJ,oBAAgBhqI,IAGtB,IAAK,mBACH,MAAO,IACFy1D,EACHw0E,WAAYhwH,EAAOy7C,QACnB00E,WAAY,IACP30E,EAAM20E,WACTH,gBAAYjqI,IAGlB,IAAK,iBACH,MAAO,IAAKy1D,EAAOy0E,SAAUjwH,EAAOy7C,SACtC,IAAK,wBACH,MAAO,IAAKD,EAAO00E,gBAAiBlwH,EAAOy7C,SAC7C,IAAK,iBACH,OAAIz7C,EAAOy7C,QAAQ6iB,QACV,IACF9iB,KACAx7C,EAAOy7C,QACVs0E,eAAgB/vH,EAAOy7C,QAAQ6iB,SAG5B,IAAK9iB,KAAUx7C,EAAOy7C,SAC/B,IAAK,gBACH,MAAO,IACFD,EACH20E,WAAY,IACP30E,EAAM20E,cACNnwH,EAAOy7C,UAGhB,IAAK,eACH,MAAO,IACFD,EACH40E,UAAWpwH,EAAOy7C,SAEtB,IAAK,0BACH,MAAO,IACFD,EACH60E,kBAAmBrwH,EAAOy7C,SAE9B,IAAK,aACH,MAAO,IACFP,IAEP,QACE,OAAOM,EAAM,ECtObi1E,GAAmB,IAEV,SAASC,GACtBv5H,EAAkCw5H,EAAoBF,KAEtD1mI,EAAAA,EAAAA,KAAU,KACJgM,EAAAA,IAIJzL,YAAW,MACT05G,EAAAA,GAAAA,KAAQ,KACF7sG,EAAInO,SACNmO,EAAInO,QAAQ+5B,OACd,GACA,GACD4tG,EAAkB,GACpB,CAACx5H,EAAKw5H,GACX,CCLA,MA2CA,IAAerlI,EAAAA,EAAAA,KA3Ce+T,IAC5B,MAAM,GACJpc,EAAE,MACF0U,EAAK,MACLojB,EAAK,SACL61G,EAAQ,MACRh6G,EAAK,IACLzf,EAAG,YACHk7C,EAAW,SACXhyB,EAAQ,SACRzoB,EAAQ,SACRnG,GACE4N,EACEwxH,EAAYj6G,GAASmE,EACrBktB,GAAgBr0C,EAAAA,GAAAA,GACpB,cACA+D,GAAS,UACTif,GAAS,QACTi6G,GAAa,aACbD,GAAY,aACZ,eAGF,OACEljI,EAAAA,GAAAA,cAAA,OAAKG,UAAWo6C,GACdv6C,EAAAA,GAAAA,cAAA,UACEG,UAAU,eACV5K,GAAIA,EACJ0U,MAAOA,GAAS,GAChBC,SAAUA,EACVy6C,YAAaA,GAAet3B,EAC5BsF,SAAUA,EACVlpB,IAAKA,GAEJ1F,GAEFo/H,GAAa5tI,GACZyK,EAAAA,GAAAA,cAAA,SAAOojI,QAAS7tI,GAAK4tI,GAEnB,IC8JV,IAAevlI,EAAAA,EAAAA,KA7LoBylI,EACjCv1E,QACAw1E,YACAC,YACAC,WACAC,cACA9vG,cACAqmC,eAGA,MAAMzlC,GAAWp5B,EAAAA,EAAAA,IAAyB,MAEpCuoI,GAAWvoI,EAAAA,EAAAA,IAAyB,MAEpCwoI,GAAmBxoI,EAAAA,EAAAA,IAA0B,OAEnDkB,EAAAA,EAAAA,KAAU,KACJsnI,EAAiBroI,SAChBqoI,EAAiBroI,QAAQ2O,QAAU6jD,EAAMi0E,cAC5C4B,EAAiBroI,QAAQ2O,MAAQ6jD,EAAMi0E,YACzC,GACC,CAACj0E,EAAMi0E,cAEV,MAAMjiI,GAAOC,EAAAA,EAAAA,KAEbijI,GAAuBzuG,GAEvB,MAAMqvG,GAAuBnkI,EAAAA,EAAAA,KAAa0G,IACxC6zD,EAAS,CAAEp4D,KAAM,iBAAkBmsD,QAAS5nD,EAAEgR,OAAOlN,OAAQ,GAC5D,CAAC+vD,IAEE6pE,GAAuBpkI,EAAAA,EAAAA,KAAa0G,IACxC6zD,EAAS,CAAEp4D,KAAM,iBAAkBmsD,QAAS5nD,EAAEgR,OAAOlN,OAAQ,GAC5D,CAAC+vD,IAEE8pE,GAAmBrkI,EAAAA,EAAAA,KAAa0G,IACpC6zD,EAAS,CAAEp4D,KAAM,aAAcmsD,QAAS5nD,EAAEgR,OAAOlN,OAAQ,GACxD,CAAC+vD,IAEE+pE,GAAoBtkI,EAAAA,EAAAA,KAAa0G,IACrC6zD,EAAS,CAAEp4D,KAAM,cAAemsD,QAAS5nD,EAAEgR,OAAOlN,OAAQ,GACzD,CAAC+vD,IAEEgqE,GAAsBvkI,EAAAA,EAAAA,KAAa0G,IACvC6zD,EAAS,CAAEp4D,KAAM,gBAAiBmsD,QAASp6B,EAAYoU,MAAM6oC,GAAYA,EAAQiyD,OAAS18H,EAAEgR,OAAOlN,SAAS,GAC3G,CAAC0pB,EAAaqmC,IAEXiqE,GAAuBxkI,EAAAA,EAAAA,KAAa0G,IACxC6zD,EAAS,CAAEp4D,KAAM,iBAAkBmsD,QAAS5nD,EAAEgR,OAAOlN,OAAQ,GAC5D,CAAC+vD,IAEEkqE,GAAuBzkI,EAAAA,EAAAA,KAAa0G,IACxC6zD,EAAS,CAAEp4D,KAAM,iBAAkBmsD,QAAS5nD,EAAEgR,OAAOlN,OAAQ,GAC5D,CAAC+vD,IAEEmqE,GAAoB1kI,EAAAA,EAAAA,KAAa0G,IACrC6zD,EAAS,CAAEp4D,KAAM,cAAemsD,QAAS5nD,EAAEgR,OAAOlN,OAAQ,GACzD,CAAC+vD,IAEEzkC,GAAoB91B,EAAAA,EAAAA,KAAa0G,IACrC,IAAI,MAAE8D,GAAU9D,EAAEgR,OAClBlN,EAAS,IAAGA,EAAM8nB,QAAQ,MAAO,MAC7B2xG,EAASpoI,UACXooI,EAASpoI,QAAQ2O,MAAQA,GAE3B+vD,EAAS,CAAEp4D,KAAM,cAAemsD,QAAS9jD,GAAQ,GAChD,CAAC+vD,IAEEoqE,GAAuB3kI,EAAAA,EAAAA,KAAa0G,IACxC6zD,EAAS,CAAEp4D,KAAM,iBAAkBmsD,QAAS5nD,EAAEgR,OAAOlN,OAAQ,GAC5D,CAAC+vD,KAEE,WAAEyoE,GAAe30E,EACvB,OACE9tD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,gBACbH,EAAAA,GAAAA,cAAA,YACGyjI,EACCzjI,EAAAA,GAAAA,cAAA,WACEA,EAAAA,GAAAA,cAAA,UAAKF,EAAK,2BACVE,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRlsB,IAAK8qB,EACLlH,MAAOvtB,EAAK,sCACZoK,SAAU05H,EACV35H,MAAO6jD,EAAM8zE,YACb/uG,UAAU,OACVF,SAAU,EACVzJ,MAAOu5G,EAAWb,cAEpB5hI,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRtI,MAAOvtB,EAAK,sCACZoK,SAAU25H,EACV55H,MAAO6jD,EAAM+zE,YACbhvG,UAAU,OACVF,SAAU,EACVzJ,MAAOu5G,EAAWZ,cAEpB7hI,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRtI,MAAOvtB,EAAK,kCACZoK,SAAU45H,EACV75H,MAAO6jD,EAAMg0E,KACbjvG,UAAU,OACVF,SAAU,EACVzJ,MAAOu5G,EAAWX,OAEpB9hI,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRtI,MAAOvtB,EAAK,mCACZoK,SAAU65H,EACV95H,MAAO6jD,EAAMA,MACbj7B,UAAU,OACV3J,MAAOu5G,EAAW30E,QAEpB9tD,EAAAA,GAAAA,cAACqkI,GAAM,CACLh3G,MAAOvtB,EAAK,0BACZ6kD,YAAa7kD,EAAK,0BAClBoK,SAAU85H,EACV/5H,MAAO6jD,EAAMi0E,YACbmB,SAAU5pI,SAAQ,GAClB/D,GAAG,mBACH2zB,MAAOu5G,EAAWV,YAClBt4H,IAAKk6H,EACLhxG,SAAU,GAETgB,EAAY/zB,KAAI,EAAGkjI,cAAat+G,OAAMq+G,UACrC7iI,EAAAA,GAAAA,cAAA,UACEiK,MAAO44H,EACP1iI,UAAU,cACVmgE,SAAUuiE,IAAS/0E,EAAMi0E,aAExBe,GAAet+G,MAKtBxkB,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRtI,MAAOvtB,EAAK,iCACZoK,SAAU+5H,EACVh6H,MAAO6jD,EAAMk0E,SACbnvG,UAAU,OACVF,SAAU,EACVzJ,MAAOu5G,EAAWT,iBAGpB3pI,EACFmrI,GAAYF,GAAaC,EACzBvjI,EAAAA,GAAAA,cAAA,UAAKF,EAAK,iCACRzH,EACFmrI,GACAxjI,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRtI,MAAOvtB,EAAK,uBACZoK,SAAUg6H,EACVj6H,MAAO6jD,EAAM2xE,SACb5sG,UAAU,OACVF,SAAU,EACVzJ,MAAOu5G,EAAWhD,WAGpB6D,GACAtjI,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRtI,MAAOvtB,EAAK,mCACZoK,SAAUi6H,EACVl6H,MAAO6jD,EAAMF,MACb/6B,UAAU,QACVF,SAAU,EACVzJ,MAAOu5G,EAAW70E,QAGpB21E,GACAvjI,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRtI,MAAOvtB,EAAK,8BACZoK,SAAUqrB,EACVtrB,MAAO6jD,EAAMl5B,MACb/B,UAAU,MACVF,SAAU,EACVzJ,MAAOu5G,EAAW7tG,MAClBnrB,IAAKi6H,IAGT1jI,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,uBACZo/D,SAAUp/D,EAAK,2BACfstB,QAAS9zB,QAAQw0D,EAAMy0E,UACvB5vG,SAAU,EACVzoB,SAAUk6H,KAGV,ICtJV,IAAexmI,EAAAA,EAAAA,KAxCgB0mI,EAC7Bx2E,QACAy2E,kBACAj7F,WACA0wB,eAEA,MAAMl6D,GAAOC,EAAAA,EAAAA,MAEb1D,EAAAA,EAAAA,KAAU,KACHkoI,GAAoBA,EAAgBpgI,SAAU2pD,EAAMm0E,UAGzDjoE,EAAS,CAAEp4D,KAAM,iBAAkBmsD,QAASw2E,EAAgB,GAAGhvI,IAAK,GACnE,CAACgvI,EAAiBz2E,EAAMm0E,SAAUjoE,IAErC,MAAMwqE,GAAuB/kI,EAAAA,EAAAA,KAAawK,IACxC+vD,EAAS,CAAEp4D,KAAM,iBAAkBmsD,QAAS9jD,GAAQ,GACnD,CAAC+vD,IAEElyB,GAAUjuC,EAAAA,EAAAA,KAAQ,IAAO0qI,EAAgB3kI,KAAI,EAAGrK,GAAI0U,EAAO7J,MAAOitB,EAAOgc,aAAa,CAC1Fhc,QACA6xC,UAAU91B,EAAAA,GAAAA,GAAeC,EAAQC,EAAUxpC,EAAK4xB,MAChDznB,aACI,CAACs6H,EAAiBj7F,EAAUxpC,EAAK4xB,OAEvC,OACE1xB,EAAAA,GAAAA,cAAA,OAAKG,UAAU,YACbH,EAAAA,GAAAA,cAAA,YACEA,EAAAA,GAAAA,cAAA,SAAIF,EAAK,0BACTE,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACT77C,KAAK,mBACLsjB,QAASA,EACT59B,SAAUs6H,EACVlkE,SAAUxS,EAAMm0E,YAGhB,I,gBCzDV,UAAgB,KAAO,uBAAuB,YAAc,uBAAuB,mBAAmB,uBAAuB,gBAAkB,uBAAuB,KAAO,uBAAuB,iBAAiB,uBAAuB,cAAgB,uBAAuB,uBAAuB,uBAAuB,oBAAsB,uBAAuB,aAAa,uBAAuB,UAAY,uBAAuB,kBAAkB,uBAAuB,cAAgB,uBAAuB,uBAAuB,uBAAuB,kBAAoB,uBAAuB,wBAAwB,uBAAuB,mBAAqB,uBAAuB,SAAW,uBAAuB,SAAW,uBAAuB,gBAAkB,uBAAuB,eAAiB,uBAAuB,eAAe,uBAAuB,YAAc,uBAAuB,SAAW,uBAAuB,OAAS,uBAAuB,YAAc,uBAAuB,gCAAgC,uBAAuB,0BAA4B,uBAAuB,+BAA+B,uBAAuB,yBAA2B,uBAAuB,eAAe,uBAAuB,YAAc,wBC8NtwC,IAAerkI,EAAAA,EAAAA,KA/KgB6mI,EAC7BrmI,OACAsmI,UACAC,SACAC,iBACAC,eACAv7F,WACAw7F,aACAC,gBACA/qE,WACAgrE,cACAtC,YACAe,cACAwB,qBACAC,uBAEA,MAAM,eAAEC,IAAmB5lI,EAAAA,EAAAA,MAErBO,GAAOC,EAAAA,EAAAA,KACPqlI,EAAgB9rI,QAAQ0gE,IAExB,MACJ7hE,EAAK,MAAEiI,EAAK,KAAE+E,EAAI,YAAEkgI,EAAW,kBAAEC,EAAiB,oBAAEC,EAAmB,aAAEC,GACvEd,GAAW,CAAC,GACV,cACJe,EAAa,gBACbC,EAAe,gBACfC,EAAe,KACfnhH,EAAI,MACJoQ,EAAK,eACLgxG,GACGf,GAAgB,CAAC,EAEhBgB,GAAW1rI,EAAAA,EAAAA,IAAS2rI,EAAAA,EAAAA,IAAmB3tI,IAEvC4tI,GAAkBtmI,EAAAA,EAAAA,KAAaumI,IACnChsE,EAAU,CAAEp4D,KAAM,eAAgBmsD,QAASy3E,EAAexhI,KAAKgF,IAAIg9H,EAAMR,GAAgBQ,GAAO,GAC/F,CAAChsE,EAAUwrE,IAERS,GAA2BxmI,EAAAA,EAAAA,KAAY,KAC3C0lI,EAAe,CAAEe,KAAMhB,GAAkB/gI,OAASgiI,EAAAA,GAAAA,cAA4BA,EAAAA,GAAAA,aAA0B,GACvG,CAACjB,GAAkB/gI,OAAQghI,IAExBiB,GAA6B3mI,EAAAA,EAAAA,KAAY,KAC7C0lI,EAAe,CAAEe,KAAMC,EAAAA,GAAAA,cAA2B,GACjD,CAAChB,IAEEkB,GAA4B5mI,EAAAA,EAAAA,KAAY,KAC5C0lI,EAAe,CAAEe,KAAMC,EAAAA,GAAAA,UAAuB,GAC7C,CAAChB,IAyDJ,OACEnlI,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,MACdkK,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,aACb+vI,GAAY7lI,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,gBAAwBtB,IAAKqxI,EAAUhzH,IAAI,MACtEgzH,GAAY1tI,GACZ6H,EAAAA,GAAAA,cAACsmI,GAAAA,EAAQ,CACP/qI,MAAOpD,EAAMiF,YAAY7B,MACzBK,OAAQzD,EAAMiF,YAAYxB,OAC1BuE,UAAWrK,GAAAA,gBACXywI,kBAAgB,IAGpBvmI,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,MACdkK,EAAAA,GAAAA,cAAA,MAAIG,UAAWrK,GAAAA,eAAuBsK,GACrC+E,GAAQnF,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,sBAA6B4nB,EAAAA,GAAAA,GAAWvY,EAAM,CAAC,KAAM,QAAS,aAG3FnF,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,WACb6uI,GAAUA,EAAO/kI,KAAKwhG,GACrBolC,GAAkB1mI,EAAK4xB,KAAM0vE,EAAK/zE,MAAO+zE,EAAK/3D,OAAQC,KAEvDs7F,GAAkBA,EAAehlI,KAAKwhG,GACrColC,GAAkB1mI,EAAK4xB,KAAM0vE,EAAK/zE,MAAO+zE,EAAK/3D,OAAQC,KAEvDi8F,GAAuBA,EAAoBphI,OAAS,GA7EvDnE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,eACdkK,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,oBACbsK,GAEHJ,EAAAA,GAAAA,cAAA,YACGopC,EAAAA,GAAAA,GAAes5F,EAAYp5F,EAAUxpC,EAAK4xB,QAG/C1xB,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,UACbyvI,EAAqB3lI,KAAK6mI,GACzBzmI,EAAAA,GAAAA,cAAA,OACEwE,IAAKiiI,EACLtmI,WAAW+F,EAAAA,GAAAA,GAAepQ,GAAAA,SAAiB2wI,IAAQ/D,GAAa5sI,GAAAA,iBAChE0K,QAASw5D,EAAW,IAAM+rE,EAAgBU,IAAQ/D,EAAY,EAAI+D,QAAOpuI,IAExE+wC,EAAAA,GAAAA,GAAeq9F,EAAKn9F,EAAUxpC,EAAK4xB,MAAM,aA8DhCr5B,IAAfysI,GACC0B,GAAkB1mI,EAAK4xB,KAAM5xB,EAAK,wBAAyBglI,EAAYx7F,GAAU,IAGrFtpC,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,aACb4wI,GAAmB,CAClBtmI,MAAOqlI,GAAiBP,IAAmB,GAAG9kI,MAC9CitB,MAAOvtB,EAAK,yBACZgE,KAAM,OACNtD,QAAS4kI,EAAgBa,OAA2B5tI,IAErDqtI,GAAmBgB,GAAmB,CACrCtmI,MAAOslI,EACPr4G,MAAOvtB,EAAK,2BACZ6mI,YAAYzgI,EAAAA,GAAAA,GAAepQ,GAAAA,SAAiBA,GAAO4vI,EAAgBjhF,mBAEnEg/E,IAAgB2B,IAAkBsB,GAAmB,CACrDtmI,MAAOulI,EACPt4G,MAAOvtB,EAAK,0BACZgE,KAAM,WACNtD,QAAS4kI,EAAgBgB,OAA6B/tI,IAEvDmsB,GAAQkiH,GAAmB,CAC1BtmI,MAAOokB,EACP6I,MAAOvtB,EAAK,uBACZgE,KAAM,SAEP8wB,GAAS8xG,GAAmB,CAC3BtmI,MAAOw0B,EACPvH,MAAOvtB,EAAK,8BACZgE,KAAM,WAENmhI,IAAuBG,IAAkBsB,GAAmB,CAC5DtmI,MAAOwlI,EACPv4G,MAAOvtB,EAAK,iCACZgE,KAAM,QACNtD,QAAS4kI,EAAgBiB,OAA4BhuI,IAEtDgtI,IA5EYz6H,EA4Ea06H,EA1E5BtlI,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAnBN,SAAuBziB,EAAauR,GAClC,MACMyqH,EADa9mI,EAAK,iCAAkC1B,GAAMgC,OAC7BurD,MAAM,KACzC,OACE3rD,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACG4mI,EAAgB,GACjB5mI,EAAAA,GAAAA,cAAC+7C,GAAAA,EAAQ,CACPnxC,IAAKA,EACLzF,KAAMyhI,EAAgB,GACtBzqH,MAAOA,IAERyqH,EAAgBviG,MAAM,GAG7B,CAKawiG,CAAcj8H,EAAK9K,EAAKqc,OAC/BqI,KAAK,eACL4I,QAAS9zB,QAAQyrI,GACjB5kI,UAAWrK,GAAAA,YACX68B,SAAU,EACVpF,QAASy3G,OARf,IAAmBp6H,CA8EX,IAMV,SAAS47H,GACPtiF,EAAgC9jD,EAAe6J,EAAeq/B,EAAkBw9F,GAAO,GAEvF,OACE9mI,EAAAA,GAAAA,cAAA,OAAKG,WAAW+F,EAAAA,GAAAA,GAAepQ,GAAAA,cAAsBgxI,GAAQhxI,GAAAA,oBAC3DkK,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,oBACbsK,GAEHJ,EAAAA,GAAAA,cAAA,YACGopC,EAAAA,GAAAA,GAAen/B,EAAOq/B,EAAU4a,IAIzC,CAEA,SAASwiF,IAAmB,MAC1BtmI,EAAK,MACLitB,EAAK,KACLvpB,EAAI,WACJ6iI,EAAU,QACVnmI,IAQA,OACER,EAAAA,GAAAA,cAACypC,GAAAA,EAAQ,CACPqb,UAAWxrD,QAAQ8G,GAASitB,IAAUjtB,GACtC0D,KAAMA,EACNw1D,UAAW94D,EACXA,QAASA,GAERmmI,GAAc3mI,EAAAA,GAAAA,cAAA,KAAGG,UAAWwmI,IAC7B3mI,EAAAA,GAAAA,cAAA,OAAKG,UAAWrK,GAAAA,2BACbsK,GAASitB,GAEXjtB,GAASitB,IAAUjtB,GAClBJ,EAAAA,GAAAA,cAAA,KAAGG,UAAWrK,GAAAA,0BACXu3B,GAKX,CCvQA,MAmCA,IAAezvB,EAAAA,EAAAA,KA3BoBmpI,EAAG98H,QAAOif,QAAOhf,eAClD,MAAMpK,GAAOC,EAAAA,EAAAA,KAEPotC,GAAe1tC,EAAAA,EAAAA,KAAa0G,IAChC,MAAMkmE,EAAWlmE,EAAEgR,OAAOlN,MAEtBA,EAAM+3E,SAAS,MAAQ/3E,EAAM9F,OAASkoE,EAASloE,OACjD+F,EAASmiE,GAETniE,ECzBC,SAA0Bm0F,GAE/B,MAAM3vD,GADN2vD,EAAQA,EAAMtsE,QAAQ,SAAU,IAAIsS,MAAM,EAAG,IACzBsK,MAAM,WAO1B,OANID,IAAQ,IAAMzc,OAAOyc,EAAM,IAAM,KACnCA,EAAM,GAAK,MAETA,IAAQ,IAA0B,IAApBA,EAAM,GAAGvqC,SAAiBuqC,EAAM,KAChDA,EAAM,GAAK,IAENA,EAAQA,EAAMv9B,KAAK,KAAO,EACnC,CDee61H,CAAiB7gI,EAAEgR,OAAOlN,OACrC,GACC,CAACC,EAAUD,IAEd,OACEjK,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRtI,MAAOvtB,EAAK,yBACZoK,SAAUijC,EACVljC,MAAOA,EACPif,MAAOA,EACP2J,UAAU,UACVF,SAAU,EACVoQ,UA7BmB,EA8BnB6hB,2BAAyB,GACzB,I,0HE6BN,IAAehnD,EAAAA,EAAAA,KA1CkBqpI,EAAGh9H,QAAOif,QAAOhf,eAChD,MAAMpK,GAAOC,EAAAA,EAAAA,KAEPmnI,GAAgB/rI,EAAAA,EAAAA,IAAyB,MAE/C6nI,GAAuBkE,GAEvB,MAAOC,EAAUC,IAAe5hI,EAAAA,EAAAA,IAAiB47H,GAASE,UAC1DjlI,EAAAA,EAAAA,KAAU,KACR,MAAMgrI,EAAc3F,GAAez3H,GACnCm9H,EAAYC,EAAY,GAEvB,IAEH,MAAMl6F,GAAe1tC,EAAAA,EAAAA,KAAa0G,IAChC,MAAMkmE,ED7BH,SAA0BgyB,GAE/B,MAAM3vD,GADN2vD,EAAQA,EAAMtsE,QAAQ,SAAU,KACZ4c,MAAM,WAC1B,OAAOD,EAAQA,EAAMv9B,KAAK,KAAO,EACnC,CCyBqBm2H,CAAiBnhI,EAAEgR,OAAOlN,OACrCo9H,EAAc3F,GAAev7H,EAAEgR,OAAOlN,OAC5Cm9H,EAAYC,GACZn9H,EAASmiE,EAAS,GACjB,CAACniE,IAEEq9H,EAuBR,SAAqBJ,GACnB,OAAQA,GACN,KAAK/F,GAASI,WACZ,OAAOxhI,EAAAA,GAAAA,cAAA,OAAKxL,IAAKgzI,GAAoB30H,IAAI,KAC3C,KAAKuuH,GAASG,KACZ,OAAOvhI,EAAAA,GAAAA,cAAA,OAAKxL,IAAKizI,GAAc50H,IAAI,KACrC,KAAKuuH,GAASK,IACZ,OAAOzhI,EAAAA,GAAAA,cAAA,OAAKxL,IAAKkzI,GAAa70H,IAAI,KACpC,QACE,OAEN,CAlCmB80H,CAAYR,GAE7B,OACEnnI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,aACbH,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRlsB,IAAKy9H,EACL75G,MAAOvtB,EAAK,qBACZoK,SAAUijC,EACVljC,MAAOA,EACP4oB,UAAU,UACV1yB,UAAWgnI,EAAW,kBAAoB,GAC1Cj+G,MAAOA,EACPyJ,SAAU,EACVoQ,UA1CuB,GA2CvB6hB,2BAAyB,IAE3B5kD,EAAAA,GAAAA,cAAA,QAAMG,UAAU,eAAeonI,GAC3B,IC0GV,IAAe3pI,EAAAA,EAAAA,KA9ImBgqI,EAChC95E,QACA+5E,qBACAC,qBACAC,cACAC,UACAr0G,cACAqmC,eAGA,MAAM2pE,GAAmBxoI,EAAAA,EAAAA,IAA0B,OAEnDkB,EAAAA,EAAAA,KAAU,KACJsnI,EAAiBroI,SAChBqoI,EAAiBroI,QAAQ2O,QAAU6jD,EAAMu0E,iBAC5CsB,EAAiBroI,QAAQ2O,MAAQ6jD,EAAMu0E,eACzC,GACC,CAACv0E,EAAMu0E,iBAEV,MAAM4F,GAAyBxoI,EAAAA,EAAAA,KAAawK,IAC1C+vD,EAAS,CAAEp4D,KAAM,mBAAoBmsD,QAAS9jD,GAAQ,GACrD,CAAC+vD,IAEEkuE,GAAyBzoI,EAAAA,EAAAA,KAAa0G,IAC1C6zD,EAAS,CAAEp4D,KAAM,mBAAoBmsD,QAAS5nD,EAAEgR,OAAOlN,MAAMk+H,eAAgB,GAC5E,CAACnuE,IAEEouE,GAAqB3oI,EAAAA,EAAAA,KAAawK,IACtC+vD,EAAS,CAAEp4D,KAAM,mBAAoBmsD,QAAS9jD,GAAQ,GACrD,CAAC+vD,IAEEquE,GAAkB5oI,EAAAA,EAAAA,KAAa0G,IACnC,MAAMkmE,EAAWlmE,EAAEgR,OAAOlN,MAAM8nB,QAAQ,UAAW,IACnDioC,EAAS,CAAEp4D,KAAM,gBAAiBmsD,QAASse,GAAW,GACrD,CAACrS,IAEEgqE,GAAsBvkI,EAAAA,EAAAA,KAAa0G,IACvC6zD,EAAS,CAAEp4D,KAAM,uBAAwBmsD,QAAS5nD,EAAEgR,OAAOlN,OAAQ,GAClE,CAAC+vD,IAEEsuE,GAA8B7oI,EAAAA,EAAAA,KAAa0G,IAC/C6zD,EAAS,CAAEp4D,KAAM,mBAAoBmsD,QAAS5nD,EAAEgR,OAAOlN,OAAQ,GAC9D,CAAC+vD,IAEEuuE,GAA8B9oI,EAAAA,EAAAA,KAAa0G,IAC/C6zD,EAAS,CAAEp4D,KAAM,wBAAyBmsD,QAAS5nD,EAAEgR,OAAOlN,OAAQ,GACnE,CAAC+vD,IAEEl6D,GAAOC,EAAAA,EAAAA,MAEP,WAAE0iI,EAAa,CAAC,GAAM30E,EAE5B,OACE9tD,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAAA,YACEA,EAAAA,GAAAA,cAAA,UAAKF,EAAK,qBACVE,EAAAA,GAAAA,cAACinI,GAAS,CACR/8H,SAAU+9H,EACVh+H,MAAO6jD,EAAM6zE,WACbz4G,MAAOu5G,EAAWd,aAElBmG,GACA9nI,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRtI,MAAOvtB,EAAK,8CACZoK,SAAUg+H,EACVj+H,MAAO6jD,EAAMo0E,WACbrvG,UAAU,OACVF,SAAU,EACVzJ,MAAOu5G,EAAWP,aAGtBliI,EAAAA,GAAAA,cAAA,WAASG,UAAU,iBACjBH,EAAAA,GAAAA,cAAC+mI,GAAW,CACV98H,MAAO6jD,EAAMq0E,OACbj4H,SAAUk+H,EACVl/G,MAAOu5G,EAAWN,SAEpBniI,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRtI,MAAOvtB,EAAK,yBACZoK,SAAUm+H,EACVp+H,MAAO6jD,EAAMs0E,IACbvvG,UAAU,UACVkQ,UAAW,EACXpQ,SAAU,EACVzJ,MAAOu5G,EAAWL,IAClBx9E,2BAAyB,KAG3BmjF,GAAeC,EACfhoI,EAAAA,GAAAA,cAAA,UAAKF,EAAK,+BACRzH,EACF0vI,GACA/nI,EAAAA,GAAAA,cAACqkI,GAAM,CACLh3G,MAAOvtB,EAAK,0BACZ6kD,YAAa7kD,EAAK,0BAClBoK,SAAU85H,EACV/5H,MAAO6jD,EAAMu0E,eACba,SAAU5pI,SAAQ,GAClB/D,GAAG,kBACH2zB,MAAOu5G,EAAWJ,eAClB1vG,SAAU,EACVlpB,IAAKk6H,GAGHhwG,EAAY/zB,KAAI,EAAGkjI,cAAat+G,UAC9BxkB,EAAAA,GAAAA,cAAA,UACEiK,MAAO64H,EACP3iI,UAAU,cACVmgE,SAAUwiE,IAAgBh1E,EAAMu0E,gBAE/BS,GAAet+G,MAMxBwjH,GACAhoI,EAAAA,GAAAA,cAAC21B,GAAAA,EAAS,CACRtI,MAAOvtB,EAAK,iCACZoK,SAAUo+H,EACVr+H,MAAO6jD,EAAMw0E,WACbzvG,UAAU,OACVF,SAAU,EACVoQ,UAAW,GACX7Z,MAAOu5G,EAAWH,aAGtBtiI,EAAAA,GAAAA,cAACmtB,GAAAA,EAAQ,CACPE,MAAOvtB,EAAK,qCACZstB,UAASy6G,GAAqB/5E,EAAM00E,gBACpC7vG,SAAU,EACVzoB,SAAUq+H,EACV79H,UAAWm9H,IAEb7nI,EAAAA,GAAAA,cAAA,KAAGG,UAAU,eACVL,EAAK+nI,EAAqB,gCAAkC,uBAG7D,ICpGV,IAAejqI,EAAAA,EAAAA,KA3CsB4qI,EAAG59H,MAAK69H,aAAYrpI,cACvD,MAAM,iBAAE63B,IAAqB13B,EAAAA,EAAAA,MAEvBO,GAAOC,EAAAA,EAAAA,KAEP27B,GAAgBj8B,EAAAA,EAAAA,KAAa2Z,IACjC,IACE,MAAMwgB,EAAO9a,KAAK6c,MAAMviB,EAAMwgB,OACxB,UAAEX,EAAS,UAAEC,GAAcU,EAEjC,GAAkB,yBAAdX,EACF,OAGF,IAAKwvG,EAAY,CACf,MAAMrvG,EAAUC,EAAAA,IAAkBH,EAAUI,UAC5CrC,EAAiB,CAAErsB,IAAKwuB,GAC1B,CAEAh6B,GACF,CAAE,MAAO9H,GACP,IAED,CAAC8H,EAASqpI,EAAYxxG,IAOzB,OALA56B,EAAAA,EAAAA,KAAU,KACRM,OAAOoJ,iBAAiB,UAAW21B,GAC5B,IAAM/+B,OAAOqJ,oBAAoB,UAAW01B,KAClD,CAACA,IAGF17B,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,UACExL,IAAKoW,EACLxK,MAAON,EAAK,kCACZ0+B,MAAM,UACND,QAAQ,gFACRp+B,UAAU,4BAER,ICLV,IAAevC,EAAAA,EAAAA,KAtC+B8qI,EAC5C56E,QACAo3E,mBACAlrE,WACA2uE,qBAEA,MAAM7oI,GAAOC,EAAAA,EAAAA,KAEP+nC,GAAUjuC,EAAAA,EAAAA,KAAQ,IACfqrI,GAAkB/gI,OACrB+gI,EAAiBtlI,KAAI,EAAGrK,KAAI6K,YAAY,CAAGitB,MAAOjtB,EAAO6J,MAAO1U,MAChE2jD,GAAAA,GACH,CAACgsF,IAEEh7H,GAAWzK,EAAAA,EAAAA,KAAawK,IAC5B+vD,EAAS,CAAEp4D,KAAM,0BAA2BmsD,QAAS9jD,GAAQ,GAC5D,CAAC+vD,IAEJ,OACEh6D,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAAA,YACEA,EAAAA,GAAAA,cAAA,UAAKF,EAAK,qBAEVE,EAAAA,GAAAA,cAACqgE,GAAAA,EAAU,CACT77C,KAAK,oBACLsjB,QAASA,EACTw4B,SAAUxS,EAAM60E,kBAChBz4H,SAAUA,IAGZlK,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CAACE,QAAM,EAACC,QAASmoI,GACrB7oI,EAAK,kCAGN,ICWV,IAAelC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KAAsBC,IACxC,MAAM,QAAE44B,IAAYplB,EAAAA,EAAAA,IAAexT,GACnC,MAAO,CACLorB,MAAOwN,EAAQxN,OAAO/yB,QACtByyI,aAAc9qI,EAAOw5E,cAAc3pB,KACnCu3E,iBAAkBxuG,EAAQwuG,iBAC3B,GANiBrnI,EAtC+BgrI,EACjDj3H,WACAsX,QACA4kC,QACAo3E,mBACA0D,eACAE,uBAEA,MAAM,kBAAEC,IAAsBxpI,EAAAA,EAAAA,MAExBO,GAAOC,EAAAA,EAAAA,MACN21E,EAAoBC,IAAyBnwE,EAAAA,EAAAA,KAAS,GACvDwjI,GAAWnvI,EAAAA,EAAAA,KAAQ,IAChBqrI,GAAkB/gI,QAAU2pD,EAAM60E,kBACrCuC,EAAiBn9F,MAAK,EAAGxyC,QAASA,IAAOu4D,EAAM60E,qBAAoBviI,WACnE/H,GACH,CAAC6sI,EAAkBp3E,EAAM60E,oBAE5B,OACE3iI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,eACbH,EAAAA,GAAAA,cAAC81E,GAAAA,EAAc,CAACC,OAAK,EAACC,kBAAmBN,IAEzC11E,EAAAA,GAAAA,cAACi2E,GAAAA,EAAY,CACX/sD,MAAOA,EAAQppB,EAAKopB,QAAS7wB,EAC7Bs1D,KAAMi7E,EACNjoG,YAAa7gC,EAAK,6BAA8BkpI,GAChDrkF,YAAa7kD,EAAK,YAClBy1E,WAAYwzD,EACZE,kBAAkB,EAClB/yD,iBAAkBtkE,EAClBokE,kBAAmBN,EACnBS,2BAA4BR,EAC5BuzD,cAAeJ,IAEb,KCzBJK,GAAmB,SACnBC,GAAkB,cAClBC,GAAsB,IAAIx0F,IAAI,CAACs0F,GAAkBC,KAmiBvD,IAAexrI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,KACJooI,EAAI,gBACJ3B,EAAe,UACf+E,EAAS,mBACTzB,EAAkB,QAClBnD,EAAO,iBACP6E,EAAgB,eAChBC,EAAc,aACdC,EAAY,gBACZC,EAAe,MACfxgH,EAAK,kBACLygH,EAAiB,aACjBC,EAAY,UACZ5tG,EAAS,kBACT6tG,EAAiB,uBACjBC,EAAsB,iBACtB5E,EAAgB,kBAChB6E,EAAiB,gBACjBC,IACE14H,EAAAA,EAAAA,IAAexT,GAAQ44B,QAErBt4B,EAAOwrI,GAAgB,WAAYA,GAAevrI,EAAAA,EAAAA,IAAWP,EAAQ8rI,EAAatrI,aAAUjG,EAC5F4xI,EAAkB3wI,QAAQorI,KAAa8E,IAAmBH,GAAoB5zF,IAAI+zF,MAClF,mBAAE1B,EAAkB,YAAEC,EAAW,QAAEC,GAAayB,GAAgB,CAAC,GACjE,gBACJS,EAAe,2BACfC,EAA0B,iBAC1BC,EAAgB,iBAChBC,EAAgB,0BAChBC,EAAyB,0BACzBC,EAAyB,SACzBjhG,EAAQ,OACRq7F,GACG4E,GAAoB,CAAC,EAE1B,MAAO,CACLrD,OACA9nI,OACAmmI,kBACA+E,YACAzB,qBACA2B,iBACAE,kBACAQ,kBACAC,6BACAC,mBACAC,mBACAC,4BACAC,4BACAjhG,WACAq7F,SACAsF,kBACAvF,UACAoD,qBACAC,cACAC,UACA9+G,QACAygH,oBACAh2G,YAAa71B,EAAO61B,YAAY62G,QAChCxuG,YACAipG,mBAAoB3rI,QAAQirI,GAAiBpgI,QAC7CsmI,iBAAkBX,GAAwBnpB,MAC1C+pB,SAAUb,GAAmBt0I,GAC7B2vI,mBACAyF,mBAAoBZ,GAAmBa,WACvCZ,kBACD,GApEensI,EA5f+CgtI,EACjE5rI,SACAG,UACA8mI,OACA9nI,OACAmmI,kBACA+E,YACAzB,qBACAqC,kBACAC,6BACAC,mBACAC,mBACAC,4BACAC,4BACAjhG,WACAogG,kBACAO,kBACAvF,UACA8E,iBACA7E,SACAmD,qBACAC,cACAC,UACA2B,oBACAzgH,QACAyK,cACAsxG,qBACAjpG,YACAyuG,mBACAC,WACAxF,mBACAyF,qBACAX,sBAEA,MAAM,iBACJc,EAAgB,sBAChBC,EAAqB,gBACrBC,EAAe,eACf7F,EAAc,oBACd8F,EAAmB,kBACnBlC,EAAiB,wBACjBmC,IACE3rI,EAAAA,EAAAA,MAEEO,GAAOC,EAAAA,EAAAA,MAEN2pB,EAAaC,EAAWC,IAAclnB,EAAAA,EAAAA,MACtCyoI,EAAcC,IdsHdzsD,EAAAA,GAAAA,GAAWikD,GAASp1E,KcrHpBiH,EAAW8tD,IAAgB/8G,EAAAA,EAAAA,KAAS,IACpCu/H,GAAesG,KAAoB7lI,EAAAA,EAAAA,KAAS,IAC5C8lI,GAAeC,KAAoB/lI,EAAAA,EAAAA,IAAS,IAE7CgmI,GAAkBtF,IAASC,EAAAA,GAAAA,eAE3BsF,IAAUhsI,EAAAA,EAAAA,KAAaisI,IAC3BvG,EAAe,CAAEe,KAAMwF,GAAW,GACjC,CAACvG,KAEJ9oI,EAAAA,EAAAA,KAAU,KACJ4C,IACFssI,GAAiB,IACjBT,IACAnhH,IACF,GACC,CAAC1qB,EAAQ6rI,EAAkBnhH,KAG9BttB,EAAAA,EAAAA,KAAU,MACH4C,GAAUyqB,GACbE,GACF,GACC,CAACA,EAAYF,EAAazqB,KAE7B5C,EAAAA,EAAAA,KAAU,WACKhE,IAAT6tI,GAAsBh9G,IACxBq5F,GAAa,EACf,GACC,CAAC2jB,EAAMh9G,KAEV7sB,EAAAA,EAAAA,KAAU,KACJ6sB,GAAOo1F,OACT8sB,EAAgB,CACdxpI,KAAM,gBACNmsD,QAAS,CACP,CAAC7kC,EAAMo1F,OAAQp1F,EAAM/yB,UAG3B,GACC,CAAC+yB,EAAOkiH,KAEX/uI,EAAAA,EAAAA,KAAU,KACR,GAAIitI,EAAW,CACb,MACE9kH,KAAMi7G,EAAQ,MAAE7qG,EAAK,MAAEg5B,EAAK,gBAAE+3E,GAC5B2D,GACE,YACJvH,KAAgB4J,GACdhG,GAAmB,CAAC,EAClBiG,EAAkB7J,GAAepuG,EAAYoU,MAAK,EAAG86F,UAAWA,IAASd,IAAce,YAC7FsI,EAAgB,CACdxpI,KAAM,iBACNmsD,QAAS,CACP0xE,WACA7qG,MAAOA,GAA6B,MAApBA,EAAMi3G,OAAO,GACxB,IAAGj3G,IACJA,EACJg5B,WACIg+E,GAAmB,CACrBh7D,QAASg7D,EACT7J,iBACG4J,KAIX,IACC,CAACrC,EAAW8B,EAAiBz3G,KAEhCt3B,EAAAA,EAAAA,KAAU,KACJ6oI,GAAkB/gI,QACpBinI,EAAgB,CACdxpI,KAAM,0BACNmsD,QAASm3E,EAAiB,GAAG3vI,IAEjC,GACC,CAAC61I,EAAiBlG,IAErB,MAAM4G,IAAwBrsI,EAAAA,EAAAA,KAAY,KACxCspI,GAAmB,GAClB,CAACA,IAEEjE,IAAajrI,EAAAA,EAAAA,KAAQ,IACrBqsI,IAASC,EAAAA,GAAAA,SACJ,EAycb,SACExB,EAAkB,GAClBJ,EACAwH,EACArJ,GAEA,MAAMkC,EAAiBL,EACnByH,GAAkBzH,EAAiBwH,GACnC,GACJ,IAAIjpB,EAAQ4f,EAKZ,OAHA5f,EADoB6hB,EAAOtrF,OAAOurF,GAAkB,IAChCx2F,QAAO,CAACC,EAAK49F,IACxB59F,EAAM49F,EAAI5iG,QAChBy5E,GACIA,CACT,CArdWopB,CAAcvH,EAAQJ,EAAiB4G,EAAalJ,SAAUkJ,EAAazI,YACjF,CAACwD,EAAMvB,EAAQJ,EAAiB4G,EAAalJ,SAAUkJ,EAAazI,YAEjEmC,IAAehrI,EAAAA,EAAAA,KAAQ,KAC3B,GAAIqsI,IAASC,EAAAA,GAAAA,SAGb,OAgdJ,SAAyBr4E,EAAkBy2E,EAA+CmB,GACxF,MAAMyG,Ef1oBD,SAA4BxK,GACjC,MAAMwF,EAAWzF,GAAeC,GAChC,OAAON,GAAM8F,IAAuB,EACtC,CeuoBuBiF,CAAmBt+E,EAAM6zE,YACxC8D,EAAgB0G,GAAgBr+E,EAAM6zE,WAAc,GAAEwK,MAAiBr+E,EAAM6zE,WAAWt9F,OAAO,UAAOhsC,EACtGstI,EAAkB73E,EAAM8zE,YACzB,GAAE9zE,EAAM8zE,gBAAgB9zE,EAAMg0E,SAASh0E,EAAMi0E,mBAC9C1pI,GACE,MAAEu8B,EAAO6qG,SAAUj7G,GAASspC,EAC5Bi+E,EAAiBxH,EAAkB8H,GAAmB9H,EAAiBz2E,EAAMm0E,eAAY5pI,EACzFutI,EAAiBmG,GAAgB3rI,MACvC,MAAO,CACLqlI,gBACAC,kBACAC,kBACAnhH,OACAoQ,QACAgxG,iBAEJ,CAjeW0G,CAAgBnB,EAAc5G,EAAiBiF,GAAkB,GAAG,GAC1E,CAACtD,EAAMiF,EAAc5G,EAAiBiF,IAEnC+C,IAAqB9sI,EAAAA,EAAAA,KAAY,KACrCgsI,GAAQtF,EAAAA,GAAAA,YAAwB,GAC/B,CAACsF,KAEEe,IAA0B/sI,EAAAA,EAAAA,KAAY,KAC1CspI,GAAmB,GAClB,CAACA,IAiHE0D,IAAkBhtI,EAAAA,EAAAA,KAAY,KAClC,MAAM,SAAE8iI,GAAa4I,EACfuB,EAuWV,SAAwBvB,GACtB,MAAM,YACJvJ,EAAW,YACXC,EAAW,KACXC,EAAI,MACJh0E,EAAK,YACLi0E,EAAW,SACXC,EACAvC,SAAUj7G,EAAI,MACdoQ,EAAK,MACLg5B,GACEu9E,EAWJ,MAAO,CACL3mH,OACAoQ,QACAg5B,QACA+3E,gBAbsB,CACtB/D,cACAC,cACAC,OACAh0E,QACAi0E,cACAC,YASJ,CAnYwB2K,CAAexB,GACnCJ,EAAsB,CAAE2B,cAAanK,YAAW,GAC/C,CAACwI,EAAuBI,IAErByB,IAAkBntI,EAAAA,EAAAA,KAAY,KAClC,MAAMotI,EA4YV,SAAwB1B,GACtB,MAAM,WACJxJ,EAAU,WAAEO,EAAU,OAAEC,EAAM,IAAEC,EAAG,eAAEC,EAAc,WAAEC,GACnD6I,GACG2B,EAAaC,GAAc5K,EAAOx2E,MAAM,KAW/C,MAAO,CACL/xB,KAXW,CACX+nG,aACAO,aACA4K,cACAC,aACA3K,MACAxxD,QAASyxD,EACT2K,IAAK1K,GAMT,CA9ZwB2K,CAAe9B,GACnCF,EAAoB,CAClB4B,eACA,GACD,CAAC5B,EAAqBE,IAEnB+B,IAAWztI,EAAAA,EAAAA,KAAY,KAC3BurI,EAAgB,CACdmC,iBAAkBhC,EAAalJ,SAC/BO,gBAAiB2I,EAAa3I,gBAC9BG,kBAAmBwI,EAAaxI,kBAChCD,UAAWyI,EAAazI,WACxB,GACD,CAACsI,EAAiBG,IAEfzzC,IAAoBj4F,EAAAA,EAAAA,KAAY,KACpC,OAAQymI,GACN,KAAKC,EAAAA,GAAAA,aACH5jB,GAAa,GACbkqB,KACA,MAEF,KAAKtG,EAAAA,GAAAA,SACHsF,GAAQtF,EAAAA,GAAAA,UACR,MAEF,KAAKA,EAAAA,GAAAA,cACHsF,GAAQtF,EAAAA,GAAAA,iBACR,MAEF,KAAKA,EAAAA,GAAAA,gBACH,GAAsB,KAAlBmF,GACF,OAGF/oB,GAAa,GACb2oB,EAAwB,CAAEx9E,SAAU49E,KACpC,MAEF,KAAKnF,EAAAA,GAAAA,YACH5jB,GAAa,GACbqqB,KACAxB,EAAgB,CAAExpI,KAAM,0BAA2BmsD,QAAS,KAC5D,MAEF,KAAKo4E,EAAAA,GAAAA,SAAsB,CACzB,GAAImD,IAActtG,IAAcmvG,EAAalJ,SAG3C,OAFA1f,GAAa,QACbkqB,KAIF,GACEtB,EAAaxI,qBACRgI,GAAsBA,GAAuBt0H,KAAKC,MAAQ,IAvUvC,GA0UxB,YADAm1H,GAAQtF,EAAAA,GAAAA,iBAIV,IACGgF,EAAaxI,oBAEX6G,IAAmBL,KAAqBuB,GACrClB,IAAmBJ,KAAoBqB,GAI7C,YADAgB,GAAQtF,EAAAA,GAAAA,aAIV,MAAM,MAAEvxG,EAAK,MAAEg5B,EAAK,SAAE6xE,GAAa0L,EAKnC,GAAKhB,IAA+BnuG,GAJHquG,IAAqBz8E,GAChDw8E,IAAqBx1G,GACrBs1G,IAAoBzK,EAIxB,YADAgM,GAAQtF,EAAAA,GAAAA,cAIV,GAAIgE,IAA+BgB,EAAalJ,SAE9C,YADAwJ,GAAQtF,EAAAA,GAAAA,UAIV5jB,GAAa,GACb2qB,KACA,KACF,EAAC,GAEF,CACD7C,EAAkBH,EAAiBE,EAAkBD,EAA4BX,EAAgBmB,EACjGS,EAAiBD,EAAcnvG,EAAWstG,EAAWsD,GAAiBM,GAAUzB,GAAShB,EAAkBvE,EAC3GwE,EAAUY,GAAeJ,EAAyBuB,MAGpDpwI,EAAAA,EAAAA,KAAU,IACD6pI,IAASC,EAAAA,GAAAA,iBACZrnF,EAAAA,GAAAA,GAAyB,CAAE5+C,QAASw3F,UACpCr/F,GAEN,CAACq/F,GAAmBwuC,IAEpB,MAAMj5D,IAAmBxtE,EAAAA,EAAAA,KAAY,KACnC2rI,EAAgB,CACdxpI,KAAM,eAERypI,IAAiB,GACjBjsI,GAAS,GACR,CAACA,EAASgsI,IAEPluG,IAAkBz9B,EAAAA,EAAAA,KAAY,KAClCgsI,GAAQvF,IAASC,EAAAA,GAAAA,gBAA8BA,EAAAA,GAAAA,cAA4BA,EAAAA,GAAAA,SAAqB,GAC/F,CAACsF,GAASvF,IAEPkH,IAAcvzI,EAAAA,EAAAA,KAAQ,KAC1B,OAAQqsI,GACN,KAAKC,EAAAA,GAAAA,SACH,OAAOrmI,EAAK,mBACd,KAAKqmI,EAAAA,GAAAA,aACH,OAAOrmI,EAAK,uBACd,KAAKqmI,EAAAA,GAAAA,SACH,OAAOrmI,EAAK,yBACd,KAAKqmI,EAAAA,GAAAA,cACH,OAAOrmI,EAAK,yBACd,KAAKqmI,EAAAA,GAAAA,gBACH,OAAOrmI,EAAK,gCACd,KAAKqmI,EAAAA,GAAAA,YACH,OAAOrmI,EAAK,mBACd,KAAKqmI,EAAAA,GAAAA,eACH,OAAOrmI,EAAK,kCACd,QACE,MAAO,GAAG,GAEb,CAAComI,EAAMpmI,IAEJ84B,GAAastG,IAASC,EAAAA,GAAAA,SACxBrmI,EAAK,qBAAqBspC,EAAAA,GAAAA,GAAe07F,GAAYx7F,EAAWxpC,EAAK4xB,OACrE5xB,EAAK,QAwBT,GAAImqI,EACF,OACEjqI,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UAAU,QACVlB,OAAQyqB,EACRtqB,QAASwqB,EACT5D,oBAAqBinD,IAErBjtE,EAAAA,GAAAA,cAAA,SAAG,yEAC0EA,EAAAA,GAAAA,cAAA,WAAM,iDAGnFA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLE,QAAM,EACNC,QAASopB,GAER9pB,EAAK,SAOhB,MAAMutI,GA9CN,WACE,GAAI54E,EACF,OAAO,EAGT,OAAQyxE,GACN,KAAKC,EAAAA,GAAAA,SACH,OAAO7sI,QAAQorI,GAASW,cAAgBN,IAE1C,KAAKoB,EAAAA,GAAAA,YACH,OAAO7sI,QACuB,KAA5B6xI,EAAaxJ,YACTmG,GAAkD,KAA5BqD,EAAajJ,YACf,KAArBiJ,EAAa/I,KACW,KAAxB+I,EAAahJ,QAGpB,QACE,OAAO,EAEb,CA0ByBmL,GAEzB,OACEttI,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,WAAW+F,EAAAA,GAAAA,GAAe,eAAgBw+H,GAASW,aAAe,aAClEpmI,OAAQyqB,EACRtqB,QAASwqB,EACT5D,oBAAqBinD,IAErBjtE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SAASkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAChD2H,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,eACVG,MAAM,cACNkD,OAAK,EACLhH,KAAK,UACLgE,QAAS0lI,IAASC,EAAAA,GAAAA,SAAuBv8G,EAAasT,GACtDz5B,UAAU,SAEVzD,EAAAA,GAAAA,cAAA,KAAGG,UAAW+lI,IAASC,EAAAA,GAAAA,SAAuB,aAAe,qBAE/DnmI,EAAAA,GAAAA,cAAA,UAAKotI,UAEG/0I,IAAT6tI,EACClmI,EAAAA,GAAAA,cAACskB,EAAAA,EAAU,CAACE,KAAK,QAAQD,UAAW2hH,GAClClmI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,yBAjTvB,SAA4BotI,GAC1B,OAAQA,GACN,KAAKpH,EAAAA,GAAAA,SACH,OACEnmI,EAAAA,GAAAA,cAACykI,GAAQ,CACPrmI,KAAMA,EACNumI,OAAQA,EACR3qE,SAAUoxE,EACVxG,eAAgBuG,EAAalJ,UAAYsC,EACrCyH,GAAkBzH,EAAiB4G,EAAalJ,eAChD5pI,EACJysI,WAAYA,GACZJ,QAASA,EACTG,aAAcA,GACdv7F,SAAUA,EACV27F,mBAAoBA,EACpBvC,UAAWyI,EAAazI,UACxBe,YAAanqI,QAAQ6wI,GACrBjF,iBAAkBA,EAClBH,cAAeA,GACfC,YAAaqG,KAGnB,KAAKlF,EAAAA,GAAAA,cACH,OACEnmI,EAAAA,GAAAA,cAAC0oI,GAAuB,CACtB56E,MAAOq9E,EACPjG,iBAAkBA,EAClBlrE,SAAUoxE,EACVzC,eAAgB4D,KAGtB,KAAKpG,EAAAA,GAAAA,gBACH,OACEnmI,EAAAA,GAAAA,cAAC6oI,GAAe,CACd/6E,MAAOq9E,EACPjG,iBAAkBA,EAClB4D,iBAAkByC,GAClB35H,SAAU27H,IAAgBrH,IAGhC,KAAKC,EAAAA,GAAAA,YACH,OACEnmI,EAAAA,GAAAA,cAAC4nI,GAAW,CACV95E,MAAOq9E,EACPnxE,SAAUoxE,EACVvD,mBAAoBvuI,SAASowI,GAAmB7B,GAChDC,mBAAoBA,EACpBC,YAAaA,EACbC,QAASA,EACTr0G,YAAaA,IAGnB,KAAKwyG,EAAAA,GAAAA,aACH,OACEnmI,EAAAA,GAAAA,cAACqjI,GAAY,CACXv1E,MAAOq9E,EACPnxE,SAAUoxE,EACV3H,YAAanqI,QAAQ6wI,GACrB7G,UAAWhqI,QAAQ+wI,GAAoBE,GACvChH,UAAWjqI,QAAQ8wI,GAAoBE,GACvC9G,SAAUlqI,QAAQ4wI,GAClBv2G,YAAaA,IAGnB,KAAKwyG,EAAAA,GAAAA,SACH,OACEnmI,EAAAA,GAAAA,cAACskI,GAAQ,CACPx2E,MAAOq9E,EACPnxE,SAAUoxE,EACV7G,gBAAiBA,GAAmB,GACpCj7F,SAAUA,IAGhB,KAAK68F,EAAAA,GAAAA,eACH,OACEnmI,EAAAA,GAAAA,cAACwoI,GAAc,CACb59H,IAAK++H,EACLlB,WAAYuB,EACZ5qI,QAASwqB,IAGf,QACE,OAEN,CA6NW4jH,CAAmBtH,KAIxBlmI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iBACbH,EAAAA,GAAAA,cAAC2S,GAAAA,EAAO,CAACrS,MAAM,UAGlBkrI,IACCxrI,EAAAA,GAAAA,cAAA,OAAKG,UAAU,UACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLuB,KAAK,SACLpB,QAASk3F,GACThtF,SAAU2iI,GACV54E,UAAWA,GAEV77B,KAIN1P,IAAUA,EAAMo1F,OA9VrB,WACE,GAAKp1F,EAGL,OACElpB,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UAAU,QACVlB,OAAQ3F,QAAQ4vB,GAChB9pB,QAAS0sI,IAET9rI,EAAAA,GAAAA,cAAA,UAAKkpB,EAAMyX,aAAe,SAC1B3gC,EAAAA,GAAAA,cAAA,SAAIkpB,EAAMyX,aAAe,SACzB3gC,EAAAA,GAAAA,cAAA,OAAKG,UAAU,uBACbH,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLE,QAAM,EACNC,QAASgsI,IAER1sI,EAAK,QAKhB,CAwU8B2tI,GACpB,KA4EZ,SAASpB,GAAmB9H,EAAmCmJ,GAC7D,OAAOnJ,EAAgBx8F,MAAK,EAAGxyC,QAASA,IAAOm4I,GACjD,CAEA,SAAS1B,GAAkBzH,EAAmCwH,GAC5D,MAAM/jG,EAASqkG,GAAmB9H,EAAiBwH,GACnD,OAAO/jG,GAAQ28F,MACjB,CC9mBA,MA4EA,IAAe/mI,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAE6vI,IAAYr8H,EAAAA,EAAAA,IAAexT,GAAQ44B,SACrC,SACJ4S,EAAQ,OACRq7F,EAAM,KACNiJ,EAAI,YACJC,EAAW,iBACXC,EAAgB,eAChBlJ,EAAc,eACdgB,EAAc,MACdztI,EAAK,KACLgN,EAAI,MACJ/E,EAAK,UACLsiI,GACGiL,GAAW,CAAC,EAEjB,MAAO,CACLrkG,WACAq7F,SACAiJ,OACAlL,YACAmL,cACAC,mBACAlJ,iBACAgB,iBACAztI,QACAgN,OACA/E,QACD,GA7BevC,EA5E4BkwI,EAC9C9uI,SACAG,UACAulI,SACAC,iBACAlC,YACAmL,cACAvkG,WACAskG,OACAz1I,QACAgN,OACA/E,QACA0tI,mBACAlI,qBAEA,MAAM9lI,GAAOC,EAAAA,EAAAA,MAEN2pB,EAAaC,EAAWC,IAAclnB,EAAAA,EAAAA,MAE7CrG,EAAAA,EAAAA,KAAU,KACJ4C,GACF0qB,GACF,GACC,CAAC1qB,EAAQ0qB,IAEZ,MAAMk7G,GAAehrI,EAAAA,EAAAA,KAAQ,IAoF/B,SAAyB4rI,EACvBmI,EAKAhI,GACA,IAAKgI,EACH,MAAO,CAAEnI,iBAEX,MAAM,gBAAEE,GAAoBiI,EACtBI,EAAcrI,GAAiB/D,YAChC,GAAE+D,EAAgB/D,gBAAgB+D,EAAgB7D,SAAS6D,EAAgB5D,mBAC5E1pI,GACE,MAAEu8B,EAAK,KAAEpQ,GAASopH,EACxB,MAAO,CACLnI,gBACAE,gBAAiBqI,EACjBxpH,OACAoQ,QACAgxG,iBAEJ,CAzGW0G,CAAgBwB,EAAkBF,EAAMhI,IAC9C,CAACgI,EAAMhI,EAAgBkI,IAEpBpJ,GAAU7qI,EAAAA,EAAAA,KAAQ,KACf,CACL1B,QACAgN,KAAMA,EACN/E,MAAOA,EACPipC,OAAQwkG,EACRvkG,SAAUA,KAEX,CAACA,EAAUnxC,EAAOgN,EAAM/E,EAAOytI,IAElC,OACE7tI,EAAAA,GAAAA,cAACC,GAAAA,EAAK,CACJE,UAAU,oCACVlB,OAAQyqB,EACRtqB,QAASwqB,EACT5D,oBAAqB5mB,GAErBY,EAAAA,GAAAA,cAAA,WACEA,EAAAA,GAAAA,cAAA,OAAKG,UAAU,SAASkG,IAAKvG,EAAKqc,MAAQ,WAAQ9jB,GAChD2H,EAAAA,GAAAA,cAACK,EAAAA,EAAM,CACLF,UAAU,eACVG,MAAM,cACNkD,OAAK,EACLhH,KAAK,UACLgE,QAASopB,EACTnmB,UAAU,SAEVzD,EAAAA,GAAAA,cAAA,KAAGG,UAAU,gBAEfH,EAAAA,GAAAA,cAAA,UAAI,IAAEF,EAAK,kBAAkB,MAE/BE,EAAAA,GAAAA,cAAA,OAAKG,UAAU,iCACbH,EAAAA,GAAAA,cAACykI,GAAQ,CACPE,OAAQA,EACRC,eAAgBA,EAChBE,WAAY+I,EACZnL,UAAWA,EACXgC,QAASA,EACTG,aAAcA,EACdv7F,SAAUA,MAIV,I,wEC7FZ,MAkEA,GAAe1rC,EAAAA,EAAAA,KAlEsB03D,EACnCl1D,QAAQ,8BACRsK,WACA2/G,aACA71D,uBACAtqD,eAEA,MAAO2iE,EAAcC,IAAmBtnE,EAAAA,EAAAA,OACjCyoI,EAAgBC,IAAqB1oI,EAAAA,EAAAA,IAA6BgvD,IAEzEn4D,EAAAA,EAAAA,KAAU,KACR6xI,EAAkB15E,EAAqB,GACtC,CAACA,IAaJ,MAAMuY,GAAmBttE,EAAAA,EAAAA,KAAautE,IACpCF,OAAgBz0E,GAChB6R,EAAS8iE,GAELihE,GAAkBA,IAAmBz5E,GACvC25E,IAAIC,gBAAgBH,GAEtBC,EAAkBC,IAAIE,gBAAgBrhE,GAAY,GACjD,CAACihE,EAAgBz5E,EAAsBtqD,IAEpC+iE,GAAmBxtE,EAAAA,EAAAA,KAAY,KACnCqtE,OAAgBz0E,EAAU,GACzB,IAEGi2I,GAAiBpoI,EAAAA,EAAAA,GACrB+nI,GAAkB,SAClBvjI,GAAY,WACZ2/G,GAAc,kBAGhB,OACErqH,EAAAA,GAAAA,cAAA,OAAKG,UAAU,kBACbH,EAAAA,GAAAA,cAAA,SACEG,UAAWmuI,EACX57G,KAAK,SACLC,SAAU,EACVvyB,MAAOA,GAEPJ,EAAAA,GAAAA,cAAA,SACE4B,KAAK,OACLsI,SAzCR,SAA0BkP,GACxB,MAAMjC,EAASiC,EAAMjC,OAEhBA,GAAQsR,QAAQ,KAIrBqkD,EAAgB31D,EAAOsR,MAAM,IAC7BtR,EAAOlN,MAAQ,GACjB,EAiCQijE,OAAO,0BAETltE,EAAAA,GAAAA,cAAA,KAAGG,UAAU,oBACZ8tI,GAAkBjuI,EAAAA,GAAAA,cAAA,OAAKxL,IAAKy5I,EAAgBp7H,IAAI,YAEnD7S,EAAAA,GAAAA,cAACmtE,EAAAA,EAAS,CAACC,KAAMP,EAAcztE,QAAS6tE,EAAkB/iE,SAAU6iE,IAChE,G","sources":["webpack://wai/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://wai/./src/hooks/usePictureInPicture.ts","webpack://wai/./src/hooks/useBlur.ts","webpack://wai/./src/hooks/useBlurSync.ts","webpack://wai/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://wai/./src/components/common/DeleteMessageModal.tsx","webpack://wai/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://wai/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://wai/./src/hooks/useFullscreen.ts","webpack://wai/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://wai/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://wai/./src/components/mediaViewer/VideoPlayer.tsx","webpack://wai/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://wai/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://wai/./src/components/mediaViewer/SenderInfo.tsx","webpack://wai/./src/components/mediaViewer/MediaViewer.tsx","webpack://wai/./src/components/common/RecipientPicker.tsx","webpack://wai/./src/components/main/ForwardRecipientPicker.tsx","webpack://wai/./src/components/main/DraftRecipientPicker.tsx","webpack://wai/./src/components/main/AttachBotRecipientPicker.tsx","webpack://wai/./src/components/main/Dialogs.tsx","webpack://wai/./src/components/main/Notifications.tsx","webpack://wai/./src/components/main/SafeLinkModal.tsx","webpack://wai/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://wai/./src/components/main/UrlAuthModal.tsx","webpack://wai/./src/components/common/CalendarModal.tsx","webpack://wai/./src/components/main/HistoryCalendar.tsx","webpack://wai/./src/components/main/NewContactModal.tsx","webpack://wai/./src/components/main/hooks/useWebAppFrame.ts","webpack://wai/./src/components/main/WebAppModal.tsx","webpack://wai/./src/components/main/WebAppModal.module.scss?73f6","webpack://wai/./src/components/main/BotTrustModal.tsx","webpack://wai/./src/components/main/AttachBotInstallModal.tsx","webpack://wai/./src/components/main/DeleteFolderDialog.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://wai/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://wai/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://wai/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://wai/./src/components/common/SliderDots.module.scss?afdd","webpack://wai/./src/components/common/SliderDots.tsx","webpack://wai/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://wai/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://wai/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://wai/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://wai/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://wai/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://wai/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://wai/./src/components/main/premium/PremiumMainModal.tsx","webpack://wai/./src/components/main/premium/GiftOption.module.scss?a171","webpack://wai/./src/components/main/premium/GiftOption.tsx","webpack://wai/./src/components/main/premium/GiftPremiumModal.tsx","webpack://wai/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://wai/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://wai/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://wai/./src/components/middle/composer/StickerSet.tsx","webpack://wai/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://wai/./src/components/middle/composer/StickerSetCover.tsx","webpack://wai/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://wai/./src/components/left/main/StatusPickerMenu.tsx","webpack://wai/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://wai/./src/components/common/AboutAdsModal.tsx","webpack://wai/./src/components/common/PinMessageModal.tsx","webpack://wai/./src/components/common/UnpinAllMessagesModal.tsx","webpack://wai/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://wai/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://wai/./src/components/middle/MessageSelectToolbar.tsx","webpack://wai/./src/components/common/SeenByModal.tsx","webpack://wai/./src/components/middle/ReactorListModal.tsx","webpack://wai/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://wai/./src/components/middle/MessageLanguageModal.tsx","webpack://wai/./src/components/middle/MessageLanguageModal.module.scss?f702","webpack://wai/./src/hooks/useSelectWithEnter.ts","webpack://wai/./src/components/left/search/LeftSearchResultChat.tsx","webpack://wai/./src/components/left/search/RecentContacts.tsx","webpack://wai/./src/components/left/search/ChatMessage.tsx","webpack://wai/./src/components/left/search/DateSuggest.tsx","webpack://wai/./src/components/left/search/BotUser.tsx","webpack://wai/./src/components/left/search/ChatResults.tsx","webpack://wai/./src/components/left/search/LeftSearch.tsx","webpack://wai/./src/hooks/reducers/useTwoFaReducer.ts","webpack://wai/./src/components/left/settings/SettingsHeader.tsx","webpack://wai/./src/hooks/useMultiClick.ts","webpack://wai/./src/components/left/settings/SettingsMain.tsx","webpack://wai/./src/components/ui/Draggable.tsx","webpack://wai/./src/components/ui/Draggable.module.scss?804f","webpack://wai/./src/components/common/ManageUsernames.module.scss?3086","webpack://wai/./src/components/common/ManageUsernames.tsx","webpack://wai/./src/components/left/settings/SettingsEditProfile.tsx","webpack://wai/./src/components/left/settings/SettingsDataStorage.tsx","webpack://wai/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://wai/./src/components/ui/ShowMoreButton.tsx","webpack://wai/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://wai/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://wai/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://wai/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://wai/./src/components/left/settings/SettingsGeneral.tsx","webpack://wai/./src/components/left/settings/WallpaperTile.tsx","webpack://wai/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://wai/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://wai/./src/components/left/settings/SettingsNotifications.tsx","webpack://wai/./src/components/left/settings/SettingsPrivacy.tsx","webpack://wai/./src/components/left/settings/SettingsLanguage.tsx","webpack://wai/./src/components/left/settings/helpers/privacy.ts","webpack://wai/./src/components/ui/SelectAvatar.module.scss?3384","webpack://wai/./src/components/ui/SelectAvatar.tsx","webpack://wai/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://wai/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://wai/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://wai/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://wai/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://wai/./src/components/left/settings/SettingsActiveSession.tsx","webpack://wai/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://wai/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://wai/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://wai/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://wai/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://wai/./src/components/left/settings/BlockUserModal.tsx","webpack://wai/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://wai/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://wai/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://wai/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://wai/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://wai/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://wai/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://wai/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://wai/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://wai/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://wai/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://wai/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://wai/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://wai/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://wai/./src/components/common/StickerSetCard.tsx","webpack://wai/./src/components/left/settings/SettingsStickers.tsx","webpack://wai/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://wai/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://wai/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://wai/./src/components/left/settings/SettingsExperimental.tsx","webpack://wai/./src/components/left/settings/Settings.tsx","webpack://wai/./src/components/left/main/ContactList.tsx","webpack://wai/./src/components/left/newChat/NewChatStep1.tsx","webpack://wai/./src/components/left/newChat/NewChatStep2.tsx","webpack://wai/./src/components/left/newChat/NewChat.tsx","webpack://wai/./src/components/left/ArchivedChats.tsx","webpack://wai/./src/components/left/ChatFolderModal.tsx","webpack://wai/./src/components/middle/message/helpers/copyOptions.ts","webpack://wai/./src/util/scrollLock.ts","webpack://wai/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://wai/./src/components/middle/message/ReactionSelector.tsx","webpack://wai/./src/components/middle/message/MessageContextMenu.tsx","webpack://wai/./src/components/common/ShareModal.tsx","webpack://wai/./src/components/middle/message/ContextMenuContainer.tsx","webpack://wai/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://wai/./src/components/common/StickerSetModal.tsx","webpack://wai/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://wai/./src/components/common/CustomEmojiSetsModal.tsx","webpack://wai/./src/components/middle/HeaderMenuContainer.tsx","webpack://wai/./src/components/middle/MobileSearch.tsx","webpack://wai/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://wai/./src/hooks/useScrolledState.ts","webpack://wai/./src/util/findInViewport.ts","webpack://wai/./src/util/isFullyVisible.ts","webpack://wai/./src/util/setTooltipItemVisible.ts","webpack://wai/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://wai/./src/components/middle/composer/MentionTooltip.tsx","webpack://wai/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://wai/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://wai/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://wai/./src/components/middle/composer/AttachmentModal.tsx","webpack://wai/./src/components/middle/composer/PollModal.tsx","webpack://wai/./src/components/middle/composer/EmojiButton.tsx","webpack://wai/./src/components/middle/composer/EmojiCategory.tsx","webpack://wai/./src/components/middle/composer/EmojiPicker.tsx","webpack://wai/./src/components/middle/composer/StickerPicker.tsx","webpack://wai/./src/components/common/GifButton.tsx","webpack://wai/./src/components/middle/composer/GifPicker.tsx","webpack://wai/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://wai/./src/components/middle/composer/SymbolMenu.tsx","webpack://wai/./src/components/middle/composer/BotCommand.tsx","webpack://wai/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://wai/./src/components/middle/composer/BotCommandMenu.tsx","webpack://wai/./src/components/middle/composer/StickerTooltip.tsx","webpack://wai/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://wai/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://wai/./src/components/middle/composer/CustomSendMenu.tsx","webpack://wai/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://wai/./src/components/middle/composer/EmojiTooltip.tsx","webpack://wai/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://wai/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://wai/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://wai/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://wai/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://wai/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://wai/./src/components/middle/composer/SendAsMenu.tsx","webpack://wai/./src/components/right/RightSearch.tsx","webpack://wai/./src/components/right/StickerSetResult.tsx","webpack://wai/./src/components/right/StickerSearch.tsx","webpack://wai/./src/components/right/GifSearch.tsx","webpack://wai/./src/components/right/statistics/StatisticsOverview.tsx","webpack://wai/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://wai/./src/components/right/statistics/Statistics.tsx","webpack://wai/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://wai/./src/components/right/statistics/MessageStatistics.tsx","webpack://wai/./src/components/right/PollAnswerResults.tsx","webpack://wai/./src/components/right/PollResults.tsx","webpack://wai/./src/components/right/ManageTopic.module.scss?04dd","webpack://wai/./src/components/right/CreateTopic.tsx","webpack://wai/./src/components/right/EditTopic.tsx","webpack://wai/./src/components/right/management/ManageUser.tsx","webpack://wai/./src/components/right/management/ManageGroup.tsx","webpack://wai/./src/components/right/hooks/useManagePermissions.ts","webpack://wai/./src/components/right/management/ManageGroupPermissions.tsx","webpack://wai/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://wai/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://wai/./src/components/right/management/ManageChannel.tsx","webpack://wai/./src/components/common/UsernameInput.tsx","webpack://wai/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://wai/./src/components/right/management/ManageDiscussion.tsx","webpack://wai/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://wai/./src/components/right/management/ManageChatAdministrators.tsx","webpack://wai/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://wai/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://wai/./src/components/right/management/ManageGroupMembers.tsx","webpack://wai/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://wai/./src/components/right/management/ManageInvites.tsx","webpack://wai/./src/components/right/management/ManageInvite.tsx","webpack://wai/./src/components/right/management/ManageReactions.tsx","webpack://wai/./src/components/right/management/ManageInviteInfo.tsx","webpack://wai/./src/components/right/management/JoinRequest.tsx","webpack://wai/./src/components/right/management/ManageJoinRequests.tsx","webpack://wai/./src/components/right/management/Management.tsx","webpack://wai/./src/components/common/helpers/detectCardType.ts","webpack://wai/./src/hooks/reducers/usePaymentReducer.ts","webpack://wai/./src/hooks/useFocusAfterAnimation.tsx","webpack://wai/./src/components/ui/Select.tsx","webpack://wai/./src/components/payment/ShippingInfo.tsx","webpack://wai/./src/components/payment/Shipping.tsx","webpack://wai/./src/components/payment/Checkout.module.scss?4e47","webpack://wai/./src/components/payment/Checkout.tsx","webpack://wai/./src/components/payment/ExpiryInput.tsx","webpack://wai/./src/components/middle/helpers/inputFormatters.ts","webpack://wai/./src/components/payment/CardInput.tsx","webpack://wai/./src/components/payment/PaymentInfo.tsx","webpack://wai/./src/components/payment/ConfirmPayment.tsx","webpack://wai/./src/components/payment/SavedPaymentCredentials.tsx","webpack://wai/./src/components/payment/PasswordConfirm.tsx","webpack://wai/./src/components/payment/PaymentModal.tsx","webpack://wai/./src/components/payment/ReceiptModal.tsx","webpack://wai/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiDimensions, ApiMessage } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media, ${MESSAGE_CONTENT_SELECTOR} .thumbnail`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isInPictureInPicture, setIsInPictureInPicture] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsInPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      onLeave();\n      setIsInPictureInPicture(false);\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isInPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize, getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport {photosMap} from \"../../middle/message/Photo\";\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  let previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n\n  if(previewMediaHash && photosMap[previewMediaHash]){\n    previewBlobUrl = photosMap[previewMediaHash];\n  }\n\n  let {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  if(getMediaHash(true) && photosMap[getMediaHash(true)!]){\n    fullMediaBlobUrl = photosMap[getMediaHash(true)!];\n  }\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto || actionPhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    loadProgress,\n    videoSize,\n  };\n};\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {/*{canDeleteForAll && (*/}\n        {/*  <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>*/}\n        {/*    {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}*/}\n        {/*    {!contactName && lang('Conversation.DeleteMessagesForEveryone')}*/}\n        {/*  </Button>*/}\n        {/*)}*/}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  zoomLevelChange,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n  setZoomLevelChange,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {/*{message?.isForwardingAllowed && !isChatProtected && (*/}\n      {/*  <Button*/}\n      {/*    round*/}\n      {/*    size=\"smaller\"*/}\n      {/*    color=\"translucent-white\"*/}\n      {/*    ariaLabel={lang('Forward')}*/}\n      {/*    onClick={onForward}*/}\n      {/*  >*/}\n      {/*    <i className=\"icon-forward\" />*/}\n      {/*  </Button>*/}\n      {/*)}*/}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport { captureEvents } from '../../util/captureEvents';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if ((e.key === 'Enter' || e.key === ' ') && !isInPictureInPicture) {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n  const isMoving = isMouseDown && scale > 1;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          isMoving={isMoving}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, isMobile, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n\n  if(message?.content.photo){\n    console.log(\"[media]\\n\",JSON.stringify(message?.content))\n  }\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (!chatId || !mediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: mediaId });\n    }\n  }, [handleClose, isMobile, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === (avatarOwner as ApiUser).fullInfo?.fallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        isChatWithSelf,\n        canUpdateMedia,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album\n      || origin === MediaViewerOrigin.SuggestedAvatar) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Wai';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        const { req_id: requestId } = data.eventData;\n        // eslint-disable-next-line no-null/no-null -- Required by spec\n        window.navigator.clipboard.readText().catch(() => null).then((text) => {\n          sendEvent({\n            eventType: 'clipboard_text_received',\n            eventData: {\n              req_id: requestId,\n              data: text,\n            },\n          });\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendEvent, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeCloseModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId! });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\nimport grey from '../../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideRecentHeader?: boolean;\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isStatusPicker,\n  isCurrentUserPremium,\n  shouldHideRecentHeader,\n  withDefaultTopicIcon,\n  withDefaultStatusIcon,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(ITEMS_PER_ROW_FALLBACK);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickerMarginPx = isMobile ? 8 : 16;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const handleDefaultTopicIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const handleDefaultStatusIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useCallback((width: number) => {\n    if (!width) return ITEMS_PER_ROW_FALLBACK;\n\n    return Math.floor(width / (itemSize + margin));\n  }, [itemSize, margin]);\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  }, [calculateItemsPerRow]);\n  useResizeObserver(ref, handleResize);\n\n  useLayoutEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow) * (itemSize + margin);\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * (itemSize + margin);\n\n  const shouldHideHeader = isRecent && shouldHideRecentHeader;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className=\"symbol-set-name\">\n            {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n            {stickerSet.title}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n          )}\n          {!isRecent && isEmoji && !isInstalled && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersection}\n                noAnimate={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBoundsInSharedCanvas from '../../../hooks/useBoundsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const bounds = useBoundsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size || bounds.size}\n            play={isIntersecting && !noAnimate}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={bounds.coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport {\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  loadAndPlay: boolean;\n  isStatusPicker?: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isStatusPicker,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith(idPrefix)) {\n        return;\n      }\n\n      const index = Number(id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrRecent[] = [];\n\n    if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, defaultStatusIconsId, lang, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, [idPrefix]);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            idPrefix={idPrefix}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            isStatusPicker={isStatusPicker}\n            shouldHideRecentHeader={withDefaultTopicIcons || isStatusPicker}\n            withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n            onContextMenuOpen={onContextMenuOpen}\n            onContextMenuClose={onContextMenuClose}\n            onContextMenuClick={onContextMenuClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n    };\n  },\n)(CustomEmojiPicker));\n","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../middle/composer/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isStatusPicker\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={\"删除消息\"}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {/*{canDeleteForAll && (*/}\n        {/*  <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>*/}\n        {/*    {contactName*/}\n        {/*      ? renderText(lang('ChatList.DeleteForEveryone', contactName))*/}\n        {/*      : lang('Conversation.DeleteMessagesForEveryone')}*/}\n        {/*  </Button>*/}\n        {/*)}*/}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    saveMsgToCloud,\n    exitMessageSelectMode,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n\n  const handleExitMessageSelectMode = useCallback(() => {\n    exitMessageSelectMode();\n  }, [exitMessageSelectMode]);\n\n\n  const handleSaveMsgToCloud = useCallback(() => {\n    saveMsgToCloud();\n  }, [saveMsgToCloud]);\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,icon_rotate_180?:boolean\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={`icon-${icon_rotate_180 ? icon + \" rotate_180\" : icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {/*{messageListType !== 'scheduled' && canForwardMessages && (*/}\n            {/*  renderButton(*/}\n            {/*    'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,*/}\n            {/*  )*/}\n            {/*)}*/}\n            {/*{canReportMessages && (*/}\n            {/*  renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)*/}\n            {/*)}*/}\n            {/*{canDownloadMessages && !hasProtectedMessage && (*/}\n            {/*  renderButton('download', lang('lng_media_download'), handleDownload)*/}\n            {/*)}*/}\n            {/*{!hasProtectedMessage && (*/}\n            {/*  renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)*/}\n            {/*)}*/}\n            {/*{canDeleteMessages && (*/}\n            {/*  renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)*/}\n            {/*)}*/}\n\n            {/* {( */}\n            {/*   renderButton('download', lang('保存到云端'), handleSaveMsgToCloud,false,true) */}\n            {/* )} */}\n\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)}\n\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const handleCloseSeenByModal = useCallback(() => {\n    closeSeenByModal();\n  }, [closeSeenByModal]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                      <FullNameTitle peer={user} withEmojiStatus />\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { selectLanguageCode, selectRequestedTranslationLanguage, selectTabState } from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './MessageLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst MessageLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const { requestMessageTranslation, closeMessageLanguageModal } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useCallback((toLanguageCode: string) => {\n    if (!chatId || !messageId) return;\n\n    requestMessageTranslation({ chatId, id: messageId, toLanguageCode });\n    closeMessageLanguageModal();\n  }, [chatId, closeMessageLanguageModal, messageId, requestMessageTranslation]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeMessageLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={styles.listItem}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).messageLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId && messageId\n      ? selectRequestedTranslationLanguage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(MessageLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ty4iYfZBkv7TFGwTrzul\",\"list-item\":\"GXEouxz4KmZfOmlymVnB\",\"listItem\":\"GXEouxz4KmZfOmlymVnB\",\"title\":\"MpKdUudmoMIsoFkDFNbJ\",\"subtitle\":\"B0tluyEaLLlMRQ5TZMEP\",\"languages\":\"SxqwP1DiSMFc8Gh_KgfK\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n    const { animationLevel } = global.settings.byKey;\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback} from '../../../lib/teact/teact';\nimport {getActions, getGlobal, withGlobal} from '../../../global';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from \"../../ui/InfiniteScroll\";\nimport {selectUser} from \"../../../global/selectors\";\n\ntype OwnProps = {\n  searchQuery?: string;\n  activeTab: number;\n  onReset: () => void;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  botIds?:string[],\n};\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\n\nconst BotUser: FC<OwnProps & StateProps> = ({\n  botIds,\n  onClick,\n  onReset,\n  activeTab,\n}) => {\n\n  const {\n    openChat,\n    openTopBotChat,\n    setActiveChatFolder,\n    sendBotCommand,\n    addRecentlyFoundChatId,\n  } = getActions();\n\n  const handleClick = useCallback((e,id) => {\n    let global = getGlobal()\n    let shouldSend = false\n    if(!global.chats.byId[id]){\n      openTopBotChat({id})\n      shouldSend = true;\n    }\n\n    openChat({ id, shouldReplaceHistory: true });\n    setActiveChatFolder({ activeChatFolder: 0 }, { forceOnHeavyAnimation: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n      if(shouldSend){\n        sendBotCommand({chatId:id,command:\"/start\"})\n      }\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n    onReset();\n  }, [ onClick]);\n  return (\n      <InfiniteScroll\n        className=\"LeftSearch custom-scroll\"\n        items={botIds || []}\n        noScrollRestoreOnTop\n        noFastList\n      >\n        <div>\n          {\n            activeTab === 0 &&\n            <div className=\"pl-2 pt-2 mb-0 mt-1 font-14\">\n              🔥 热门\n            </div>\n          }\n        {\n          botIds && botIds.map(userId=>(\n            <ListItem\n              className=\"chat-item-clickable search-result\"\n              onClick={handleClick}\n              clickArg={userId}\n            >\n              <PrivateChatInfo userId={userId} withUsername={false} avatarSize=\"large\" withDesc />\n            </ListItem>\n          ))\n        }\n      </div>\n      </InfiniteScroll>  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { searchQuery,activeTab }): StateProps => {\n    const {topCats} = global\n    const {cats} = topCats\n    let botIds:string[] = []\n    if(cats && cats![activeTab]){\n      botIds = cats![activeTab].botIds\n    }\n\n    let botIds_:string[] = [];\n    if(searchQuery){\n      for (let i = 0; i < botIds.length; i++) {\n        const botId = botIds[i];\n        const user = selectUser(global,botId);\n        if(user){\n          const {firstName,fullInfo}  = user;\n          const {botInfo} = fullInfo!\n          if(\n            firstName!.toLowerCase().indexOf(searchQuery) > -1 ||\n            botInfo && botInfo.description!.toLocaleString().indexOf(searchQuery) > -1\n          ){\n            botIds_.push(botId)\n          }\n        }\n      }\n    }else{\n      botIds_ = botIds\n    }\n    return {\n      botIds:botIds_,\n    };\n  },\n)(BotUser));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport BotUser from \"./BotUser\";\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  showBotUsers?:boolean;\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  showBotUsers,\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openTopBotChat,\n    sendBotCommand,\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n\n      let global = getGlobal()\n      let shouldSend = false\n      if(!global.chats.byId[id]){\n        openTopBotChat({id})\n        shouldSend = true;\n      }\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if(shouldSend){\n        setTimeout(()=>{\n          addRecentlyFoundChatId({ id });\n          if(shouldSend){\n            sendBotCommand({chatId:id,command:\"/start\"})\n          }\n        },200)\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    // setGlobalSearchChatId({ id });\n    handleChatClick(id)\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n  if (!searchQuery && !searchDate) {\n    if(showBotUsers){\n      return(\n        <>\n          <BotUser searchQuery={\"\"} onReset={onReset} activeTab={0}/>\n        </>\n      )\n    }else{\n      return(\n        <RecentContacts onReset={onReset} />\n      )\n    }\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localUserIds) && localUserIds?.length > 0 && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localUserIds!.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n    const {topCats} = global\n    const {cats} = topCats\n    return {\n      showBotUsers:!!cats,\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useMemo, useRef, useState,} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport {GlobalSearchContent} from '../../../types';\n\nimport {selectTabState} from '../../../global/selectors';\nimport {parseDateString} from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\n\nimport './LeftSearch.scss';\nimport BotUser from \"./BotUser\";\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  tabs:{type:number,title:string}[],\n  cats:{title:string,botIds:string[]}[],\n  topSearchPlaceHolder?:string,\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  tabs,\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    if(tabs && tabs[index]){\n      const tab = tabs[index];\n      setGlobalSearchContent({ content: tab.type });\n      setActiveTab(index);\n    }else{\n      setGlobalSearchContent({ content: 0 });\n      setActiveTab(0);\n    }\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n  const renderCount = tabs.length+1\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      {\n        tabs.length > 1 && <TabList activeTab={currentContent} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      }\n\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={renderCount}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case 0:\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            default:\n              return <BotUser searchQuery={searchQuery} onReset={onReset} activeTab={currentContent}/>;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n    const {topCats} = global\n    const {cats} = topCats\n    const tabs = cats ? cats!.map((row,i)=>{\n      return {type:i,title:row.title}\n    }):[\n      {\n        type: 0,\n        title:\"全部\"\n      }\n    ]\n    tabs[0].title = \"全部\"\n    return {\n      cats:cats || [],\n      tabs,\n      currentContent,\n      chatId\n    };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && editedFolderId !== 1 && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            {/*<DropdownMenu*/}\n            {/*  className=\"settings-more-menu\"*/}\n            {/*  trigger={SettingsMenuButton}*/}\n            {/*  positionX=\"right\"*/}\n            {/*>*/}\n            {/*  <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>*/}\n            {/*</DropdownMenu>*/}\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {/*<ListItem*/}\n        {/*  icon=\"lock\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Privacy)}*/}\n        {/*>*/}\n        {/*  {lang('PrivacySettings')}*/}\n        {/*</ListItem>*/}\n\n        {/*<ListItem*/}\n        {/*  icon=\"settings\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.General)}*/}\n        {/*>*/}\n        {/*  {lang('Telegram.GeneralSettingsViewController')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"unmute\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Notifications)}*/}\n        {/*>*/}\n        {/*  {lang('Notifications')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"data\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.DataStorage)}*/}\n        {/*>*/}\n        {/*  {lang('DataSettings')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"lock\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Privacy)}*/}\n        {/*>*/}\n        {/*  {lang('PrivacySettings')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"folder\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Folders)}*/}\n        {/*>*/}\n        {/*  {lang('Filters')}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"active-sessions\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}*/}\n        {/*>*/}\n        {/*  {lang('SessionsTitle')}*/}\n        {/*  {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"language\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Language)}*/}\n        {/*>*/}\n        {/*  {lang('Language')}*/}\n        {/*  <span className=\"settings-item__current-value\">{lang.langName}</span>*/}\n        {/*</ListItem>*/}\n        {/*<ListItem*/}\n        {/*  icon=\"stickers\"*/}\n        {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*  onClick={() => onScreenSelect(SettingsScreens.Stickers)}*/}\n        {/*>*/}\n        {/*  {lang('StickersName')}*/}\n        {/*</ListItem>*/}\n        {/*{canBuyPremium && (*/}\n        {/*  <ListItem*/}\n        {/*    leftElement={<PremiumIcon withGradient big />}*/}\n        {/*    className=\"settings-main-menu-premium\"*/}\n        {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*    onClick={() => openPremiumModal()}*/}\n        {/*  >*/}\n        {/*    {lang('TelegramPremium')}*/}\n        {/*  </ListItem>*/}\n        {/*)}*/}\n        {/*  <ListItem*/}\n        {/*    leftElement={<PremiumIcon withGradient big />}*/}\n        {/*    className=\"settings-main-menu-premium\"*/}\n        {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n        {/*    onClick={() => openPremiumModal()}*/}\n        {/*  >*/}\n        {/*    {lang('TelegramPremium')}*/}\n        {/*  </ListItem>*/}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n  console.log({currentAvatarBlobUrl,currentAvatarHash})\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    // if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item pb-2\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          {/* <InputText */}\n          {/*   value={lastName} */}\n          {/*   onChange={handleLastNameChange} */}\n          {/*   label={lang('LastName')} */}\n          {/*   disabled={isLoading} */}\n          {/* /> */}\n          {/* <TextArea */}\n          {/*   value={bio} */}\n          {/*   onChange={handleBioChange} */}\n          {/*   label={lang('UserBio')} */}\n          {/*   disabled={isLoading} */}\n          {/*   maxLength={maxBioLength} */}\n          {/*   maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined} */}\n          {/* /> */}\n\n          {/* <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}> */}\n          {/*   {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])} */}\n          {/* </p> */}\n        </div>\n\n        {/*<div className=\"settings-item\">*/}\n        {/*  <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>*/}\n\n        {/*  <UsernameInput*/}\n        {/*    currentUsername={currentUsername}*/}\n        {/*    isLoading={isLoading}*/}\n        {/*    isUsernameAvailable={isUsernameAvailable}*/}\n        {/*    checkedUsername={checkedUsername}*/}\n        {/*    onChange={handleUsernameChange}*/}\n        {/*  />*/}\n\n        {/*  {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}*/}\n        {/*  <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n        {/*    {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}*/}\n        {/*  </p>*/}\n        {/*  {editableUsername && (*/}\n        {/*    <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n        {/*      {lang('lng_username_link')}<br />*/}\n        {/*      <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>*/}\n        {/*    </p>*/}\n        {/*  )}*/}\n        {/*</div>*/}\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\nimport {BOT_FOLDER_ID} from \"../../../../worker/setting\";\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID || folder.id === BOT_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={folder.id === 1 ? undefined : [\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\n// const ERROR_NO_TITLE = 'Please provide a title for this folder.';\n// const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\n\nconst ERROR_NO_TITLE = '请填写名称';\nconst ERROR_NO_CHATS = '对话不能为空';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n    //\n    // if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n    //   dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n    //   return;\n    // }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId!, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder as ApiChatFolder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {/*<h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n            {/*  {lang('FilterChatTypes')}*/}\n            {/*</h4>*/}\n            {/*{chatTypes.map(renderChatType)}*/}\n            {/*<div className=\"picker-list-divider\" />*/}\n            {/*<h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n            {/*  {lang('FilterChats')}*/}\n            {/*</h4>*/}\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport type {ApiPrivacySettings} from '../../../types';\nimport {SettingsScreens} from '../../../types';\n\nimport {selectIsCurrentUserPremium} from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  session?:string;\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  session,\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n    updatePageTitle,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n    updatePageTitle();\n  }, []);\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n\n        {/*</ListItem>*/}\n          {/*<ListItem*/}\n          {/*  icon=\"key\"*/}\n          {/*  narrow*/}\n          {/*  // eslint-disable-next-line react/jsx-no-bind*/}\n          {/*  onClick={() => onScreenSelect(*/}\n          {/*    hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,*/}\n          {/*  )}*/}\n          {/*>*/}\n          {/*  <div className=\"multiline-menu-item\">*/}\n          {/*    <span className=\"title\">{lang('Passcode')}</span>*/}\n          {/*    <span className=\"subtitle\" dir=\"auto\">*/}\n          {/*      {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}*/}\n          {/*    </span>*/}\n          {/*  </div>*/}\n          {/*</ListItem>*/}\n\n      </div>\n\n      {/*<div className=\"settings-item pt-3\">*/}\n      {/*  <ListItem*/}\n      {/*    icon=\"delete-user\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}*/}\n      {/*  >*/}\n      {/*    {lang('BlockedUsers')}*/}\n      {/*    <span className=\"settings-item__current-value\">{blockedCount || ''}</span>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    icon=\"key\"*/}\n      {/*    narrow*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(*/}\n      {/*      hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,*/}\n      {/*    )}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('Passcode')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    icon=\"lock\"*/}\n      {/*    narrow*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(*/}\n      {/*      hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,*/}\n      {/*    )}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('TwoStepVerification')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  {webAuthCount > 0 && (*/}\n      {/*    <ListItem*/}\n      {/*      icon=\"web\"*/}\n      {/*      // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*      onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}*/}\n      {/*    >*/}\n      {/*      {lang('PrivacySettings.WebSessions')}*/}\n      {/*      <span className=\"settings-item__current-value\">{webAuthCount}</span>*/}\n      {/*    </ListItem>*/}\n      {/*  )}*/}\n      {/*</div>*/}\n\n      {/*<div className=\"settings-item\">*/}\n      {/*  <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>*/}\n\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyPhoneNumber)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('LastSeenTitle')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyLastSeen)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyProfilePhoto)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('WhoCanCallMe')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyPhoneCall)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyP2P')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyPhoneP2P)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyForwarding)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    disabled={!isCurrentUserPremium}*/}\n      {/*    allowDisabledClick*/}\n      {/*    rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    onClick={handleVoiceMessagesClick}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyVoiceMessages)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*  <ListItem*/}\n      {/*    narrow*/}\n      {/*    className=\"no-icon\"*/}\n      {/*    // eslint-disable-next-line react/jsx-no-bind*/}\n      {/*    onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}*/}\n      {/*  >*/}\n      {/*    <div className=\"multiline-menu-item\">*/}\n      {/*      <span className=\"title\">{lang('WhoCanAddMe')}</span>*/}\n      {/*      <span className=\"subtitle\" dir=\"auto\">*/}\n      {/*        {getVisibilityValue(privacyGroupChats)}*/}\n      {/*      </span>*/}\n      {/*    </div>*/}\n      {/*  </ListItem>*/}\n      {/*</div>*/}\n\n      {/*{canDisplayAutoarchiveSetting && (*/}\n      {/*  <div className=\"settings-item\">*/}\n      {/*    <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n      {/*      {lang('NewChatsFromNonContacts')}*/}\n      {/*    </h4>*/}\n      {/*    <Checkbox*/}\n      {/*      label={lang('ArchiveAndMute')}*/}\n      {/*      subLabel={lang('ArchiveAndMuteInfo')}*/}\n      {/*      checked={Boolean(shouldArchiveAndMuteNewNonContact)}*/}\n      {/*      onCheck={handleArchiveAndMuteChange}*/}\n      {/*    />*/}\n      {/*  </div>*/}\n      {/*)}*/}\n\n      {/*<div className=\"settings-item\">*/}\n      {/*  <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n      {/*    {lang('lng_settings_window_system')}*/}\n      {/*  </h4>*/}\n      {/*  <Checkbox*/}\n      {/*    label={lang('lng_settings_title_chat_name')}*/}\n      {/*    checked={Boolean(canDisplayChatInTitle)}*/}\n      {/*    onCheck={handleChatInTitleChange}*/}\n      {/*  />*/}\n      {/*</div>*/}\n\n      {/*{canChangeSensitive && (*/}\n      {/*  <div className=\"settings-item\">*/}\n      {/*    <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>*/}\n      {/*      {lang('lng_settings_sensitive_title')}*/}\n      {/*    </h4>*/}\n      {/*    <Checkbox*/}\n      {/*      label={lang('lng_settings_sensitive_disable_filtering')}*/}\n      {/*      subLabel={lang('lng_settings_sensitive_about')}*/}\n      {/*      checked={Boolean(isSensitiveEnabled)}*/}\n      {/*      disabled={!canChangeSensitive}*/}\n      {/*      onCheck={handleUpdateContentSettings}*/}\n      {/*    />*/}\n      {/*  </div>*/}\n      {/*)}*/}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n      session,\n    } = global;\n\n    return {\n      session,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { unique } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  lastSyncTime?: number;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  languages,\n  language,\n  canTranslate,\n  doNotTranslate,\n  lastSyncTime,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !languages?.length) {\n      loadLanguages();\n    }\n  }, [languages, lastSyncTime, loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  }, [setSettingOption]);\n\n  const doNotTranslateText = useMemo(() => {\n    const allDoNotTranslateLanguages = unique([...doNotTranslate, language]);\n    // Do not translate current language\n    if (allDoNotTranslateLanguages.length === 1) {\n      if (!languages) {\n        return lang('Loading');\n      }\n      return languages.find(({ langCode }) => langCode === language)?.nativeName;\n    }\n\n    return lang('Languages', allDoNotTranslateLanguages.length);\n  }, [doNotTranslate, lang, language, languages]);\n\n  const handleDoNotSelectOpen = useCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('ShowTranslateButton')}\n          checked={canTranslate}\n          onCheck={handleShouldTranslateChange}\n        />\n        {canTranslate && (\n          <ListItem\n            onClick={handleDoNotSelectOpen}\n          >\n            {lang('DoNotTranslate')}\n            <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n          </ListItem>\n        )}\n        <p className=\"settings-item-description mb-0 mt-1\">\n          {lang('lng_translate_settings_about')}\n        </p>\n      </div>\n      <div className=\"settings-item\">\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      languages,\n      language,\n      canTranslate,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const fallbackPhoto = currentUser.fullInfo?.fallbackPhoto;\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!currentUser.fullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [currentUser.fullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: fallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, fallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(fallbackPhoto ? 'Privacy.ProfilePhoto.UpdatePublicPhoto' : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {fallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={fallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(fallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto currentUser={currentUser} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  availableReactions,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n      disabled: langCode === language,\n    }));\n  }, [language]);\n\n  const allSelected = useMemo(() => {\n    return unique([...doNotTranslate, language]);\n  }, [doNotTranslate, language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const [selected, unselected] = partition(options, (option) => allSelected.includes(option.value));\n    const current = selected.find((option) => option.value === language);\n    const selectedFiltered = selected.filter((option) => option.value !== language);\n\n    setDisplayedOptions([current!, ...selectedFiltered, ...unselected]);\n  }, [isActive, allSelected, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={allSelected.includes(option.value)}\n              value={option.value}\n              disabled={option.disabled}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../../lib/teact/teact';\nimport {getActions, withGlobal} from '../../../global';\n\nimport {ChatCreationProgress} from '../../../types';\n\nimport {selectTabState} from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport TextArea from \"../../ui/TextArea\";\nimport Checkbox from \"../../ui/Checkbox\";\nimport MsgDispatcher from \"../../../worker/msg/MsgDispatcher\";\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n    createChat,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [enableAi, setEnableAi] = useState(true);\n  const [about, setAbout] = useState('');\n  const [username, setUsername] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n\n  const handleEnableAi = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setEnableAi(!enableAi);\n  }, [enableAi]);\n\n\n  const handleUsername = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUsername(e.target.value);\n  }, [username]);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateChannel = useCallback(() => {\n\n    if (username.length > 0) {\n      if(!username.endsWith(\"_bot\")){\n        MsgDispatcher.showNotification(\"用户名需要以 '_bot' 结尾, 如: wai_pay_support_bot 或者不填写\");\n        return;\n      }\n    }\n    createChat({\n      title,\n      about,\n      username,\n      enableAi\n    });\n  }, [title,username,enableAi,createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>新建机器人</h3>\n      </div>\n      <div className=\"NewChat-inner step-2 pt-3\">\n        {/*<AvatarEditable*/}\n        {/*  onChange={setPhoto}*/}\n        {/*  title={lang('AddPhoto')}*/}\n        {/*/>*/}\n\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={\"名称\"}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n\n        <TextArea\n          value={username}\n          onChange={handleUsername}\n          label={\"用户名,如: wai_pay_support_bot 或者不填写\"}\n        />\n\n        <TextArea\n          value={about}\n          onChange={handleDescriptionChange}\n          label={\"机器人描述(可选)\"}\n        />\n\n        <Checkbox\n          label={\"ChatGpt\"}\n          checked={enableAi}\n          onCheck={handleEnableAi}\n        />\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={handleCreateChannel}\n        disabled={isLoading}\n        ariaLabel={\"Create Bot\"}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  }, [updateArchiveSettings]);\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelOpen && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: '复制连接',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  chosen?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  previewIndex,\n  isReady,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn('static')}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\n\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { isSameReaction, canSendReaction, getReactionUniqueKey } from '../../../global/helpers';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  onToggleReaction,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  useHorizontalScroll(itemsScrollRef);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY && e.cancelable) {\n      e.preventDefault();\n    }\n  };\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }) || [];\n  }, [availableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions]);\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {reactionsToRender.map((reaction, i) => {\n            if (!reaction) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={getReactionUniqueKey(reaction.reaction)}\n                previewIndex={i}\n                isReady={isReady}\n                onToggleReaction={onToggleReaction}\n                reaction={reaction}\n                chosen={userReactionIndexes.has(i)}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onSpeak?: () => void;\n  onOpenThread?: VoidFunction;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onShare?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onTranslate?: () => void;\n  onShowOriginal?: () => void;\n  onSelectLanguage?: () => void;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onSpeak,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onShare,\n  onSponsoredHide,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets,saveMsgToCloud } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n      || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [isMobile, withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleSaveMsgToCloud = useCallback(() => {\n    if (\"id\" in message) {\n      saveMsgToCloud({\n        chatId: message.chatId!,\n        msgId: message.id\n      });\n    }\n    onClose();\n  }, [saveMsgToCloud]);\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        <MenuItem icon=\"share-filled\" onClick={onShare}>{lang('分享')}</MenuItem>\n\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('显示原文')}</MenuItem>}\n        {canSelectLanguage && (\n         <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('翻译')}</MenuItem>\n        )}\n        {/* <MenuItem icon=\"download\" icon_rotate_180 onClick={handleSaveMsgToCloud}>{lang('保存到云端')}</MenuItem> */}\n        <MenuItem icon=\"allow-speak\" onClick={onSpeak}>{lang('朗读')}</MenuItem>\n\n        {/* {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>} */}\n        {/* {canReschedule && ( */}\n        {/*   <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem> */}\n        {/* )} */}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {/* {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (*/}\n        {/*   <MenuItem icon=\"replies\" onClick={onOpenThread}>*/}\n        {/*     {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}*/}\n        {/*   </MenuItem>*/}\n        {/* )}*/}\n\n\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {/* {canFaveSticker && ( */}\n        {/*   <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem> */}\n        {/* )} */}\n        {/* {canUnfaveSticker && ( */}\n        {/*   <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem> */}\n        {/* )} */}\n        {/* {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}*/}\n        {/* {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>} */}\n        {/* {canSelectLanguage && ( */}\n        {/*   <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem> */}\n        {/* )} */}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {/* {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>} */}\n        {/* {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>} */}\n        {/* {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>} */}\n        {/* {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>} */}\n        {/* {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>} */}\n         {canDownload && (\n           <MenuItem icon=\"download\" onClick={onDownload}>\n             {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n           </MenuItem>\n         )}\n         {/*{canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}*/}\n         {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {/* {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>} */}\n        {/* {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && ( */}\n        {/*   <MenuItem */}\n        {/*     className=\"MessageContextMenu--seen-by\" */}\n        {/*     icon={canShowReactionsCount ? 'heart-outline' : 'group'} */}\n        {/*     onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy} */}\n        {/*     disabled={!canShowReactionsCount && !message.seenByUserIds?.length} */}\n        {/*   > */}\n        {/*     <span className=\"MessageContextMenu--seen-by-label\"> */}\n        {/*       {canShowReactionsCount && message.reactors?.count ? ( */}\n        {/*         canShowSeenBy && message.seenByUserIds?.length */}\n        {/*           ? lang( */}\n        {/*             'Chat.OutgoingContextMixedReactionCount', */}\n        {/*             [message.reactors.count, message.seenByUserIds.length], */}\n        {/*           ) */}\n        {/*           : lang('Chat.ContextReactionCount', message.reactors.count, 'i') */}\n        {/*       ) : ( */}\n        {/*         message.seenByUserIds?.length === 1 && seenByRecentUsers */}\n        {/*           ? renderText(getUserFullName(seenByRecentUsers[0])!) */}\n        {/*           : (message.seenByUserIds?.length */}\n        {/*             ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i') */}\n        {/*             : lang('Conversation.ContextMenuNoViews') */}\n        {/*           ) */}\n        {/*       )} */}\n        {/*     </span> */}\n        {/*     <div className=\"avatars\"> */}\n        {/*       {seenByRecentUsers?.map((user) => ( */}\n        {/*         <Avatar */}\n        {/*           size=\"micro\" */}\n        {/*           user={user} */}\n        {/*         /> */}\n        {/*       ))} */}\n        {/*     </div> */}\n        {/*   </MenuItem> */}\n        {/* )} */}\n\n         {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {/* {hasCustomEmoji && ( */}\n        {/*   <> */}\n        {/*     <MenuSeparator /> */}\n        {/*     {!customEmojiSets && ( */}\n        {/*       <> */}\n        {/*         <Skeleton inline className=\"menu-loading-row\" /> */}\n        {/*         <Skeleton inline className=\"menu-loading-row\" /> */}\n        {/*       </> */}\n        {/*     )} */}\n        {/*     {customEmojiSets && customEmojiSets.length === 1 && ( */}\n        {/*       <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\"> */}\n        {/*         {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])} */}\n        {/*       </MenuItem> */}\n        {/*     )} */}\n        {/*     {customEmojiSets && customEmojiSets.length > 1 && ( */}\n        {/*       <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\"> */}\n        {/*         {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])} */}\n        {/*       </MenuItem> */}\n        {/*     )} */}\n        {/*   </> */}\n        {/* )} */}\n         {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n\n\n        {/* {isSponsoredMessage && onSponsoredHide && ( */}\n        {/*   <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem> */}\n        {/* )} */}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type {ChangeEvent} from 'react';\n\nimport type {FC} from '../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useState,} from '../../lib/teact/teact';\nimport {getActions, getGlobal} from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport {generateImageFromDiv} from \"../../worker/share/utils/canvas\";\nimport {showBodyLoading} from \"../../worker/share/utils/utils\";\nimport {WaterMark} from \"../../worker/setting\";\nimport {fetchBlob} from \"../../util/files\";\nimport {copyBlobToClipboard} from \"../../util/clipboard\";\nimport {selectChatMessage, selectUser} from \"../../global/selectors\";\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId:number,\n  chatId:string,\n  aiAssistantMsgId?:number,\n  aiUserMsgId?:number,\n  onClose: () => void;\n};\n\nconst ShareModel: FC<OwnProps> = ({\n  isOpen,\n  aiAssistantMsgId,\n  aiUserMsgId,\n  messageId,\n  chatId,\n  onClose,\n}) => {\n  const global = getGlobal();\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [readyToForward, setReadyToForward] = useState(false);\n  const [text, setText] = useState(\"\");\n  useEffect(()=>{\n    const init = async ()=>{\n      showBodyLoading(true);\n      let url;\n      const watermark = WaterMark\n\n      const message = selectChatMessage(global,chatId,messageId);\n      if(message?.chatId){\n        const user = selectUser(getGlobal(),message?.chatId!)\n        setText(`我正在使用 @WaiChatBot ${user?.firstName} ,\\n${user?.fullInfo?.bio}\\n#Wai\\n${window.location.href}\\n`)\n      }\n\n      if(aiAssistantMsgId && aiUserMsgId){\n        url = await generateImageFromDiv(\n          ['message'+aiUserMsgId,'message'+aiAssistantMsgId],\n          20,\n          \"#99BA92\",\n          watermark\n        );\n        const message = selectChatMessage(global,chatId,aiUserMsgId);\n      }else{\n        url = await generateImageFromDiv(\n          ['message'+messageId],\n          20,\n          \"#99BA92\",\n          watermark\n        );\n\n      }\n\n      setImageUrl(url)\n      showBodyLoading(false);\n    }\n    if(isOpen){\n      init()\n    }\n  },[isOpen])\n\n  const handleCopyClipboard = useCallback(async () => {\n    if(imageUrl){\n      const blob = await fetchBlob(imageUrl)\n      await copyBlobToClipboard(blob)\n      getActions().showNotification({message:\"复制成功\"})\n      setReadyToForward(true)\n    }\n  }, [imageUrl]);\n\n  const lang = useLang();\n  return (\n    <Modal\n      noBackdropClose={true}\n      hasCloseButton={true}\n      isOpen={isOpen}\n      onClose={()=>{\n        setImageUrl(\"\");\n        onClose()\n      }}\n      title={\"分享\"}\n    >\n      <div>\n        {text}\n      </div>\n      <div className={\"share-image-wrap\"}>\n        {\n          imageUrl &&\n          <a href={imageUrl} target=\"_blank\" className={\"share-image\"} ><img src={imageUrl} alt=\"\"/></a>\n        }\n      </div>\n      <div className={\"share-image-actions\"}>\n        <Button type=\"button\" onClick={handleCopyClipboard} ripple={true} isLoading={!imageUrl} disabled={!imageUrl}>\n          点击复制图片\n        </Button>\n        <Button\n          href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&via=&media=${encodeURIComponent(imageUrl)}`}\n          type=\"button\"\n          target={\"_blank\"}\n          ripple={true} disabled={!readyToForward}>\n          点击打开 Twitter 手动粘贴图片\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ShareModel);\n","import type {FC} from '../../../lib/teact/teact';\nimport React, {memo, useCallback, useEffect, useMemo, useState,} from '../../../lib/teact/teact';\nimport {getActions, getGlobal, withGlobal} from '../../../global';\n\nimport type {MessageListType} from '../../../global/types';\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiStickerSet,\n  ApiStickerSetInfo,\n  ApiThreadInfo,\n} from '../../../api/types';\nimport type {IAlbum, IAnchorPosition} from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedTranslationLanguage,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  areReactionsEmpty,\n  getChatMessageLink,\n  getMessageVideo,\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isMessageLocal,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport {SERVICE_NOTIFICATIONS_USER_ID} from '../../../config';\nimport {IS_TRANSLATION_SUPPORTED} from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport {copyTextToClipboard} from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ShareModal from \"../../common/ShareModal\";\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  repliesThreadInfo?: ApiThreadInfo;\n};\n\ntype StateProps = {\n  aiAssistantMsgId?:number,\n  aiUserMsgId?:number,\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  aiAssistantMsgId,\n  aiUserMsgId,\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    onSpeak,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isShareModalOpen, setIsShareModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeShareModal = useCallback(() => {\n    setIsShareModalOpen(false);\n    onClose();\n  }, [onClose]);\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleSpeak = useCallback(() => {\n    onSpeak({ messageId: message.id,chatId:message.chatId });\n    closeMenu();\n  },  [message.id, closeMenu]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openChat]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const handleTranslate = useCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, requestMessageTranslation]);\n\n  const handleShowOriginal = useCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, showOriginalMessage]);\n  const handleShare = useCallback(() => {\n    setIsMenuOpen(false);\n    setTimeout(()=>{\n      setIsShareModalOpen(true)\n    },500)\n  },[setIsShareModalOpen])\n  const handleSelectLanguage = useCallback(() => {\n    openMessageLanguageModal({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openMessageLanguageModal]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={false}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={true}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onSpeak={handleSpeak}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n        onShare={handleShare}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n\n      <ShareModal\n        messageId={message.id}\n        aiAssistantMsgId={aiAssistantMsgId}\n        aiUserMsgId={aiUserMsgId}\n        chatId={message.chatId}\n        isOpen={isShareModalOpen}\n        onClose={closeShareModal}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n\n    const { canTranslate: isTranslationEnabled, language, doNotTranslate } = global.settings.byKey;\n    const { chatGptAskHistory } = global;\n    const history = chatGptAskHistory[message.chatId] || {}\n    let aiAssistantMsgId,aiUserMsgId;\n\n    if(history[message.id]){\n      aiAssistantMsgId = message.id\n      aiUserMsgId = history[message.id]\n    }else{\n      Object.keys(history).forEach(id=>{\n        if(history[id] === message.id){\n          aiUserMsgId = message.id\n          aiAssistantMsgId = parseInt(id)\n        }\n      })\n    }\n    const canTranslateLanguage = !detectedLanguage\n      || (!doNotTranslate.includes(detectedLanguage) && language !== detectedLanguage);\n    const canTranslate = IS_TRANSLATION_SUPPORTED && isTranslationEnabled && message.content.text\n      && canTranslateLanguage && !isLocal && !isScheduled && !isAction && !hasTranslation && !message.emojiOnlyCount;\n\n    return {\n      aiAssistantMsgId,\n      aiUserMsgId,\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation,\n      canSelectLanguage: hasTranslation,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet, selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder: isAdded });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectNotifySettings,\n  selectNotifyExceptions,\n  selectUser,\n  selectChatBot,\n  selectIsPremiumPurchaseBlocked,\n  selectCurrentMessageList, selectTabState,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getCanDeleteChat,\n  selectIsChatMuted,\n  getCanAddContact,\n  isChatChannel,\n  isChatGroup,\n  getCanManageTopic,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleViewAsTopicsClick = useCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  }, [closeMenu, openChat]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, requestMasterAndJoinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleCloseLocalTextSearch = useCallback(() => {\n    closeLocalTextSearch();\n  }, [closeLocalTextSearch]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  }, [threshold]);\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useCallback(() => {\n    onToggleSpoiler?.(index);\n  }, [index, onToggleSpoiler]);\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <i\n            className={buildClassName(\n              attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n              styles.actionItem,\n            )}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n            <i className={buildClassName('icon-delete', styles.actionItem)} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChat, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  }, [\n    isOpen, shouldSchedule, onSendScheduled, onSendSilent, onSend, isSendingCompressed, shouldSendGrouped,\n    updateAttachmentSettings,\n  ]);\n\n  const handleSendSilent = useCallback(() => {\n    sendAttachments(true);\n  }, [sendAttachments]);\n\n  const handleSendClick = useCallback(() => {\n    sendAttachments();\n  }, [sendAttachments]);\n\n  const handleScheduleClick = useCallback(() => {\n    sendAttachments(false, true);\n  }, [sendAttachments]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  }, [handleFileSelect]);\n\n  const handleDelete = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleEnableSpoilers = useCallback(async () => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: true })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleDisableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleToggleSpoiler = useCallback(async (index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id=\"caption-input-text\"\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {lang('Send')}\n              </Button>\n              {/*{canShowCustomSendMenu && (*/}\n              {/*  <CustomSendMenu*/}\n              {/*    isOpen={isCustomSendMenuOpen}*/}\n              {/*    onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}*/}\n              {/*    onSendSchedule={handleScheduleClick}*/}\n              {/*    onClose={handleContextMenuClose}*/}\n              {/*    onCloseAnimationEnd={handleContextMenuHide}*/}\n              {/*    isSavedMessages={isChatWithSelf}*/}\n              {/*  />*/}\n              {/*)}*/}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chat?.fullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {/* {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)} */}\n      {/* {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)} */}\n      {/* {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)} */}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    shouldUpdateStickerSetsOrder?: boolean\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || isAttachmentModal) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, shouldUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const handleSelect = useCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  }, [getHtml, handleSendCommand]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoom-fade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoom-fade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat, selectTabState, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\nimport {UserIdFirstBot} from \"../../../worker/setting\";\nimport TextArea from \"../../ui/TextArea\";\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    deleteHistory,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n  const currentBio = user ? (user.fullInfo?.bio || '') : '';\n\n  const [bio, setBio] = useState(currentBio);\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n      bio:trimmedBio,\n    });\n  }, [firstName,bio, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({chatId:userId})\n    // deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleUploadPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  let canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n  const personalPhoto = user.fullInfo?.personalPhoto;\n  const notPersonalPhoto = user.fullInfo?.profilePhoto || user.fullInfo?.fallbackPhoto;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            hideName={true}\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            // label={lang('UserInfo.FirstNamePlaceholder')}\n            label={\"名称\"}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n\n          <TextArea\n            id=\"user-bio\"\n            label={\"简介\"}\n            onChange={handleBioChange}\n            value={bio}\n          />\n          {/*<InputText*/}\n          {/*  id=\"user-last-name\"*/}\n          {/*  label={lang('UserInfo.LastNamePlaceholder')}*/}\n          {/*  onChange={handleLastNameChange}*/}\n          {/*  value={lastName}*/}\n          {/*/>*/}\n          {/*<div className=\"ListItem no-selection narrow\">*/}\n          {/*  <Checkbox*/}\n          {/*    checked={isNotificationsEnabled}*/}\n          {/*    label={lang('Notifications')}*/}\n          {/*    subLabel={lang(isNotificationsEnabled*/}\n          {/*      ? 'UserInfo.NotificationsEnabled'*/}\n          {/*      : 'UserInfo.NotificationsDisabled')}*/}\n          {/*    onChange={handleNotificationChange}*/}\n          {/*  />*/}\n          {/*</div>*/}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"camera-add\" ripple onClick={handleUploadPhoto}>\n            上传头像\n          </ListItem>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              {lang('UserInfo.SuggestPhoto', user.firstName)}\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              {lang('UserInfo.SetCustomPhoto', user.firstName)}\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        {\n          ((UserIdFirstBot !== userId )) &&\n          <div className=\"section\">\n            <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n              {lang(\"删除\")}\n            </ListItem>\n          </div>\n        }\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang(\"确定要删除么？\")}\n        confirmLabel={lang(\"删除\")}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const handleForumToggle = useCallback(() => {\n    toggleForum({ chatId, isEnabled: !chat.isForum });\n  }, [chat.isForum, chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chat, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  }, [chat.fullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={chat.isForum}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (chat.isForum ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={chat.isForum}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem no-selection with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const hasLinkedChat = Boolean(chat?.fullInfo?.linkedChatId);\n\n    return { chat, currentUserId: global.currentUserId, hasLinkedChat };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiAvailableReaction, ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    const text = totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n    return text;\n  }, [availableReactions, chat, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { selectChat, selectTabState, selectManagement } from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? editableUsername : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat?.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? chat.fullInfo?.adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  isBasicGroup?: boolean;\n  areParticipantsHidden?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  isBasicGroup,\n  areParticipantsHidden,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {!isBasicGroup && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      isBasicGroup: Boolean(chat && isChatBasicGroup(chat)),\n      areParticipantsHidden: Boolean(chat && chat.fullInfo?.areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.usernames && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["ANIMATION_DURATION","createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","RADIUS","ITERATIONS","MAX_CACHE_SIZE","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","photosMap","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","DeleteMessageModal","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForSelf","useCallback","messageIds","messages","map","shouldDeleteForAll","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","DeleteProfilePhotoModal","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","MediaViewerActions","canReport","zoomLevelChange","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","setZoomLevelChange","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","length","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","MediaViewerFooter","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","VideoPlayerControls","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","onLeave","isSupported","setIsSupported","setIsInPictureInPicture","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isMoving","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","cancelAnimation","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","getMediaId","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","useFullscreenStatus","fullscreenProp","checkIfFullscreen","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","_transformRef$current","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","MediaViewerContent","isRtl","toFixed","selector","matches","messageId","isAvatar","settings","byKey","sender","selectSender","SenderInfo","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","renderText","formatMediaDateTime","date","shouldSkipHistoryAnimations","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","selectChatScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","MediaViewer","JSON","stringify","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","disableDirectTextInput","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handleBeforeDelete","ShowTransition","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","name","fullInfo","fallbackPhoto","ReportModal","subject","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","RecipientPicker","filter","API_CHAT_TYPES","searchPlaceholder","loadMore","onSelectRecipient","onCloseAnimationEnd","search","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","getCanPostInChat","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","ChatOrUserPicker","chatOrUserIds","onSearchChange","onSelectChatOrUser","isManyMessages","forwardMessages","ForwardRecipientPicker","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","topicId","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","getReadableErrorText","Notifications","notifications","dismissNotification","localId","actionText","Notification","onDismiss","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","UrlAuthModal","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","request","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","Number","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userId","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","InputText","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","status","payment","paymentStatus","WebAppModal","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","frame","once","contentWindow","postMessage","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","requestId","navigator","clipboard","readText","catch","then","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","destructive","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","BotTrustModal","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","setIsWriteAllowed","prevBot","renderingBot","_bot$shouldRequestWri","shortName","DeleteFolderDialog","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","PremiumLimitPreview","description","colorStepProgress","lerp","PremiumFeaturePreviewVideo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","slice","cycleRestrict","clientWidth","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","PremiumFeatureItem","ListItem","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","PremiumMainModal","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","GiftOption","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","GiftPremiumModal","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","reduce","acc","gift","selectedGift","botUrl","handlePremiumClick","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","StickerSet","stickerSet","loadAndPlay","idPrefix","favoriteStickers","isSavedMessages","isStatusPicker","isCurrentUserPremium","shouldHideRecentHeader","withDefaultTopicIcon","withDefaultStatusIcon","observeIntersection","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","toggleStickerSet","loadStickers","sharedCanvasRef","sharedCanvasHqRef","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","isIntersecting","useIsIntersecting","stickerMarginPx","emojiMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","margin","calculateItemsPerRow","entry","contentRect","useResizeObserver","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","heightWhenCut","shouldHideHeader","favoriteStickerIdsSet","Set","pill","fluid","grey","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","StickerButton","noAnimate","canViewSet","clickArg","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","StickerSetCover","STICKER_SIZE_PICKER_HEADER","hasThumbnail","isVideos","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","isReady","useBoundsInSharedCanvas","sharedCanvas","sharedCanvasCoords","coords","getFirstLetters","stickerSetIntersections","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","addedCustomEmojiIds","added","setIds","canAnimate","shouldLoopStickers","defaultTopicIconsId","defaultStatusIconsId","CustomEmojiPicker","withDefaultTopicIcons","onCustomEmojiSelect","headerRef","activeSetIndex","setActiveSetIndex","values","pickTruthy","observe","useIntersectionObserver","rootRef","throttleMs","entries","forEach","startsWith","intersectingWithIndexes","observeIntersectionForCovers","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","defaultStatusIconsPack","concat","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","shouldRenderContents","useHorizontalScroll","newLeft","offsetWidth","HEADER_BUTTON_WIDTH","selectStickerSet","stickerSetEl","fastSmoothScroll","handleEmojiSelect","emoji","fullClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","faded","noContextMenu","Loading","areFeaturedStickersLoaded","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","AboutAdsModal","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","PinMessageModal","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","DeleteSelectedMessageModal","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","saveMsgToCloud","downloadSelectedMessages","copySelectedMessages","useCopySelectedMessages","useHotkeys","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","SeenByModal","closeSeenByModal","handleCloseSeenByModal","renderingMemberIds","PrivateChatInfo","noStatusOrTyping","reactorModal","reactions","reactors","availableReactions","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","reaction","r","isSameReaction","viewportIds","getMore","useInfiniteScroll","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","getReactionUniqueKey","ReactionStaticEmoji","InfiniteScroll","items","onLoadMore","flatMap","userReactions","reactor","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","messageLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedTranslationLanguage","MessageLanguageModal","requestMessageTranslation","closeMessageLanguageModal","handleSelect","toLanguageCode","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","langCode","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","toLowerCase","isSlim","placeholder","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","LeftSearchResultChat","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","GroupChatInfo","DeleteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","lastSyncTime","privateChatUser","ChatMessage","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","activeTab","topCats","cats","botIds","botIds_","botInfo","toLocaleString","BotUser","openTopBotChat","setActiveChatFolder","sendBotCommand","shouldSend","activeChatFolder","command","noScrollRestoreOnTop","noFastList","withDesc","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","showBotUsers","ChatResults","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","NothingFound","PickerSelectedItem","chatOrUserId","TABS","GlobalSearchContent","keys","currentContent","tabs","row","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","useKeyboardListNavigation","renderCount","onKeyDown","TabList","onSwitchTab","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","SettingsHeader","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","SettingsMain","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","ZERO_POINT","Draggable","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","username","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","handler","ERROR_FIRST_NAME_MISSING","isUsernameAvailable","checkedUsername","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","currentUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","isLoading","ProfileEditProgress","isUsernameError","previousIsUsernameAvailable","renderingIsUsernameAvailable","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","FloatingActionButton","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","getFolderDescriptionText","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","BOT_FOLDER_ID","inactive","isStatic","ShowMoreButton","itemName","itemPluralName","ERROR_NO_TITLE","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","SettingsFoldersEdit","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","SettingsFoldersChatsPicker","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","itemSelector","isSelected","withChatType","SettingsFoldersChatFilters","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFolders","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","SettingsGeneral","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","WallpaperTile","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","session","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","SettingsPrivacy","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","updatePageTitle","language","languages","canTranslate","doNotTranslate","SettingsLanguage","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","setLanguage","currentLangCode","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","doNotTranslateText","allDoNotTranslateLanguages","handleDoNotSelectOpen","loadingOption","getPrivacyKey","screen","SelectAvatar","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","SettingsPrivacyPublicProfilePhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","leftElement","privacySettings","SettingsPrivacyVisibility","visibility","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","result","membersCount","blockCount","handleVisibilityChange","getSessionIcon","platform","device","deviceModel","systemVersion","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","SettingsActiveSessions","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveWebsite","terminateWebAuthorization","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","BlockUserModal","setUserSearchQuery","blockContact","query","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","viewportOffset","isPrivate","userOrChat","userMainUsername","CHAT_HEIGHT_PX","renderContact","SettingsTwoFaEnabled","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","SettingsTwoFaStart","onStart","animatedEmoji","selectAnimatedEmoji","SettingsTwoFaSkippableForm","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","SettingsTwoFaCongratulations","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","SettingsTwoFaEmailCode","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","availableReaction","isInactive","emoticon","SettingsPasscodeStart","STICKER_SIZE_PASSCODE","SettingsPasscodeEnabled","SettingsPasscodeCongratulations","fullReset","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeForm","StickerSetCard","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","SettingsStickers","shouldSuggestStickers","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","SettingsCustomEmoji","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","SettingsDoNotTranslate","displayedOptions","setDisplayedOptions","allSelected","useEffectWithPrevDeps","prevIsActive","unselected","partition","selectedFiltered","newDoNotTranslate","v","filteredDisplayedOptions","SettingsExperimental","nonInteractive","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","ContactList","openNewContactDialog","filteredIds","sortUserIds","isSearching","NewChatStep1","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","createChat","setTitle","enableAi","setEnableAi","setAbout","setUsername","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleEnableAi","handleUsername","handleDescriptionChange","handleCreateChannel","endsWith","MsgDispatcher","renderedError","TextArea","RENDER_COUNT","LeftColumnContent","NewChat","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ArchivedChats","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","onTransitionEnd","ChatList","folderType","ForumPanel","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","ReactionSelectorReaction","previewIndex","chosen","onToggleReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","ReactionSelector","enabledReactions","currentReactions","maxUniqueReactions","itemsScrollRef","handleWheel","cancelable","reactionsToRender","canSendReaction","userReactionIndexes","chosenReactions","chosenOrder","findIndex","onWheelCapture","onTouchMove","MessageContextMenu","anchor","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onOpenThread","onEdit","onPin","onSpeak","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onShare","onSponsoredHide","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","transformOriginY","menuStyle","withScroll","useContextMenuPosition","msgId","bubbleStyle","ShareModel","aiAssistantMsgId","aiUserMsgId","imageUrl","setImageUrl","readyToForward","setReadyToForward","setText","showBodyLoading","watermark","WaterMark","location","generateImageFromDiv","init","handleCopyClipboard","copyBlobToClipboard","noBackdropClose","encodeURIComponent","detectedLanguage","activeDownloads","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isLocal","isMessageLocal","isChatGroup","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","every","translationRequestLanguage","hasTranslation","selectMessageTranslations","isTranslationEnabled","chatGptAskHistory","history","parseInt","canTranslateLanguage","IS_TRANSLATION_SUPPORTED","emojiOnlyCount","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","ContextMenuContainer","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openMessageLanguageModal","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isShareModalOpen","setIsShareModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","recentReactions","uniqueReactors","msg","handleReport","closeMenu","closeShareModal","closePinModal","handleSpeak","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","handleTranslate","handleShowOriginal","handleShare","handleSelectLanguage","reportMessageIds","scheduledMaxDate","ShareModal","SponsoredMessageContextMenuContainer","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","shouldUpdateStickerSetsOrder","handleButtonClick","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","topic","topics","canCreateTopic","isForum","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","commands","isChatInfoShown","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","updateChatMutedState","enterMessageSelectMode","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","handleRestartBot","handleToggleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","MenuSeparator","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","MobileSearchFooter","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","THRESHOLD","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","findInViewport","selectorOrElements","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","VIEWPORT_MARGIN","SCROLL_MARGIN","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","smaller","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","useDerivedState","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","isMultiple","isBottomDividerShown","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","PollModal","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","EmojiButton","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EmojiCategory","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","shouldRenderContent","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","favorite","premiumSet","recentStickers","premiumStickers","StickerPicker","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","PremiumIcon","withGradient","big","GifButton","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","handleSearchOpen","isLeftColumnShown","SymbolMenu","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","mobileClassName","withPortal","onMouseLeave","BotCommand","withAvatar","botCommand","BotCommandTooltip","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommandMenu","StickerTooltip","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","CustomSendMenu","isOpenToBottom","onSendSchedule","CustomEmojiButton","withSharedAnimation","shouldPreloadPreview","observeIntersectionForPlaying","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","BaseResult","thumbUrl","thumbnailDataUrl","decoding","MediaResult","isForGallery","inlineResult","webThumbnail","ArticleResult","GifResult","_gif","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","InlineBotTooltip","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","rightElement","noFake","messagesById","RightSearch","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","renderSearchResult","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","StickerSetResult","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","StatisticsOverview","isMessage","statistics","period","formatFullDate","cell","field","formatInteger","percentage","renderOverviewItemValue","change","isChangeNegative","StatisticsRecentMessage","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","Statistics","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","StatisticsPublicForward","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","total","PollResults","getMessagePoll","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","prev","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","TopicIcon","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","ManageUser","deleteContact","deleteHistory","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleBioChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleUploadPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","personalPhoto","notPersonalPhoto","hideName","withFullInfo","noPersonalPhoto","UserIdFirstBot","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","invites","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","ManageGroup","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","checkbox","chatReactionsDescription","enabledLength","allowed","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","maxLengthIndicator","noReplaceNewlines","joinRequests","FLOATING_BUTTON_ANIMATION_TIMEOUT_MS","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","ManageGroupPermissions","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","rightIcon","onClickLabel","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","RemoveGroupUserModal","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","ManageChatRemovedUsers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","ManageChannel","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","UsernameInput","asLink","checkUsername","checkPublicLink","langPrefix","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","selectManagement","maxPublicLinks","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","ManageGroupUserPermissions","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","ManageChatAdministrators","handleRecentActionsClick","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","ManageGroupRecentActions","defaultRights","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","ManageGroupMembers","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","ManageGroupUserPermissionsCreate","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","handleExpireDateChange","handleSaveClick","n","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","renderRequesters","requester","JoinRequest","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","Management","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","DEFAULT_DURATION","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","ShippingInfo","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","Shipping","shippingOptions","handleShippingSelect","Checkout","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","Skeleton","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","ExpiryInput","formatCardExpiry","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","PaymentInfo","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","ConfirmPayment","noRedirect","SavedPaymentCredentials","onNewCardClick","passwordHint","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","ReceiptModal","fullAddress","croppedBlobUrl","setCroppedBlobUrl","URL","revokeObjectURL","createObjectURL","labelClassName"],"sourceRoot":""}